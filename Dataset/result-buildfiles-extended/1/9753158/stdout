{
  "Repository" : "9753158",
  "Revision" : "HEAD",
  "ObjectId" : "13adbdd880b75048bfde91a85cb3f8777344aca6",
  "CommitTime" : "2019-04-10T14:59:57Z",
  "Files" : {
    "CESystem/CMakeLists.txt" : {
      "ObjectId" : "e142b49e20216ed6b29552df38cb09d8553269b7",
      "LastModified" : "2015-12-13T14:53:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Random/Old/SVJ/CMakeLists.txt" : {
      "ObjectId" : "00b6e6da8e0a0437e8e4d6f4d717d666fe9116c8",
      "LastModified" : "2014-09-29T20:49:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Random/Old/testTypeIds/Makefile" : {
      "ObjectId" : "a94468d2515d4645eb20aa5a2c7ea4cbc0b31e44",
      "LastModified" : "2015-12-13T14:53:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Random/fn_queue/CMakeLists.txt" : {
      "ObjectId" : "358e5dfa9f971d908e1647b70a637eb15317d078",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable(main \"./main.cpp\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Random/fn_queue/test/CMakeLists.txt" : {
      "ObjectId" : "678b15559a30eabc60abaa18e53682d82c445f7c",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SSVVM/CMakeLists.txt" : {
      "ObjectId" : "c8824741d80be2f74a9805202ad0c10f55cf3fc5",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "TestScript/CMakeLists.txt" : {
      "ObjectId" : "c3dc3c404f5e1d4cfa8b5764501bfdd8a034e700",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSFML.cmake" : {
      "ObjectId" : "93e94e5bc87034dd0693984fd7fc7d447c27fa1d",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(SFML COMPONENTS graphics window system) // find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(SFML COMPONENTS ...)     // no specific version required\n\n#   find_package(SFML 2 COMPONENTS ...)   // any 2.x version\n\n#   find_package(SFML 2.4 COMPONENTS ...) // version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n\n# Since you have to link yourself all the SFML dependencies when you link it statically, the following\n\n# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\n\n# description below).\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n\n# to tell CMake where SFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n\n# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n\n# - SFML_FOUND:        true if all the required modules are found\n\n# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n\n# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SFML version is < 2.0\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 119,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 133,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\n",
        "Line" : 139,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 163,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 191,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\n",
        "Line" : 193,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\n",
        "Line" : 198,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\n",
        "Line" : 203,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of SFML libraries\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# sfml-system\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 254,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# sfml-network\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 271,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# sfml-window\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# find libraries\n",
        "Line" : 282,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# update the list\n",
        "Line" : 289,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# sfml-graphics\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# find libraries\n",
        "Line" : 309,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# update the list\n",
        "Line" : 314,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# sfml-audio\n",
        "Line" : 319,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# find libraries\n",
        "Line" : 323,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# update the list\n",
        "Line" : 327,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# handle errors\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# SFML version not ok\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# fatal error\n",
        "Line" : 348,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# error but continue\n",
        "Line" : 351,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# handle success\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "cmake/modules/FindSSVEntitySystem.cmake" : {
      "ObjectId" : "93baf1033a918212d697ad623ed34a14c83ee9fd",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSSVMenuSystem.cmake" : {
      "ObjectId" : "ab11d3214140903171b7e6263407a87a95f96d80",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSSVSCollision.cmake" : {
      "ObjectId" : "0afde22e615aff2c061afe14bda16609322daba1",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSSVStart.cmake" : {
      "ObjectId" : "91378482a405f1943b4005500f4f3088e9b7ea3b",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSSVUtils.cmake" : {
      "ObjectId" : "b08f409c901454357e0ed4d7f37e125e5d265fb7",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSSVUtilsJson.cmake" : {
      "ObjectId" : "7d446f1eb6c8da628255503d629bad4fe6d1b978",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/Findvrm_pp.cmake" : {
      "ObjectId" : "f06c7bae9f3853ea0e15b577c31a1b4aab434bfc",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015-2016 Vittorio Romeo\n\n# License: Academic Free License (\"AFL\") v. 3.0\n\n# AFL License page: http://opensource.org/licenses/AFL-3.0\n\n# http://vittorioromeo.info | vittorio.romeo@outlook.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adapted from Louise Dionne's FindHana.cmake file\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright Louis Dionne 2015\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: document variables:\n\n# VRM_PP_FOUND\n\n# VRM_PP_INCLUDE_DIR\n\n# VRM_PP_CLONE_DIR\n\n# VRM_PP_ENABLE_TESTS\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Since we don't have any files to download, we set the DOWNLOAD_DIR\n\n# to TMP_DIR to avoid creating a useless empty directory.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Download step\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Configure step\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Install step (nothing to be done)\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Test step\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "emscripten/CMakeLists.txt" : {
      "ObjectId" : "849004e598d5634abbec78053eed89e24fe4ccfb",
      "LastModified" : "2017-12-25T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Basic project setup.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "emscripten/cmake/modules/FindSDL2.cmake" : {
      "ObjectId" : "026dc34e71234ba6de30da1bbff4504dcf47c2b5",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 75,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 76,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 77,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 136,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 146,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "emscripten/cmake/modules/FindSDL2_image.cmake" : {
      "ObjectId" : "b5696c4b92b88f1f218fce05d3b2b7f5a700225d",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL_image library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL_IMAGE_LIBRARIES, the name of the library to link against\n\n#   SDL_IMAGE_INCLUDE_DIRS, where to find the headers\n\n#   SDL_IMAGE_FOUND, if false, do not try to link against\n\n#   SDL_IMAGE_VERSION_STRING - human-readable string containing the version of SDL_image\n\n#\n\n#\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#\n\n# ::\n\n#\n\n#   SDLIMAGE_LIBRARY (same value as SDL_IMAGE_LIBRARIES)\n\n#   SDLIMAGE_INCLUDE_DIR (same value as SDL_IMAGE_INCLUDE_DIRS)\n\n#   SDLIMAGE_FOUND (same value as SDL_IMAGE_FOUND)\n\n#\n\n#\n\n#\n\n# $SDLDIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDLDIR used in building SDL.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\n",
        "Line" : 50,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# for backward compatiblity\n\n#set(SDLIMAGE_LIBRARY ${SDL_IMAGE_LIBRARIES})\n\n#set(SDLIMAGE_INCLUDE_DIR ${SDL_IMAGE_INCLUDE_DIRS})\n\n#set(SDLIMAGE_FOUND ${SDL_IMAGE_FOUND})\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "emscripten/cmake/modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "0898a814fd49b051610fe860ab60a50730ce59d3",
      "LastModified" : "2016-05-31T13:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL_image library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL_TTF_LIBRARIES, the name of the library to link against\n\n#   SDL_TTF_INCLUDE_DIRS, where to find the headers\n\n#   SDL_TTF_FOUND, if false, do not try to link against\n\n#   SDL_F_VERSION_STRING - human-readable string containing the version of SDL_ttf\n\n#\n\n#\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#\n\n# ::\n\n#\n\n#   SDLTTF_LIBRARY (same value as SDL_TTF_LIBRARIES)\n\n#   SDLTTF_INCLUDE_DIR (same value as SDL_TTF_INCLUDE_DIRS)\n\n#   SDLTTF_FOUND (same value as SDL_TTF_FOUND)\n\n#\n\n#\n\n#\n\n# $SDLDIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDLDIR used in building SDL.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\n",
        "Line" : 50,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# for backward compatiblity\n\n#set(SDLTTF_LIBRARY ${SDL_TTF_LIBRARIES})\n\n#set(SDLTTF_INCLUDE_DIR ${SDL_TTF_INCLUDE_DIRS})\n\n#set(SDLTTF_FOUND ${SDL_TTF_FOUND})\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 18,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 925
}