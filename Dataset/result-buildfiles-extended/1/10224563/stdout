{
  "Repository" : "10224563",
  "Revision" : "HEAD",
  "ObjectId" : "4a644180c9e5a15bc2babe3997f75d96b869d838",
  "CommitTime" : "2019-04-08T18:13:57Z",
  "Files" : {
    "mpe/Makefile" : {
      "ObjectId" : "9112f2b7f02320d12fb14114e782bc0c8f4859eb",
      "LastModified" : "2017-04-07T20:21:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAKEFILE: MPE TOOLS\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that the library, mpe.c, is simply #include'd\n\n# by all the programs\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stc/bench/suite/uts/uts-src/Makefile" : {
      "ObjectId" : "61ddbbee027eeda21a6c4e166e14983fe4415131",
      "LastModified" : "2017-04-07T20:21:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Only enable one RNG at a time to avoid link issues\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove old archive entries\n",
        "Line" : 34,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 2
    },
    "stc/code/build.xml" : {
      "ObjectId" : "99828a590cd87c8037867108a699e5f906d6d2b7",
      "LastModified" : "2017-12-19T21:42:37Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " ExM STC build file\n\n       Note:\n       Eclipse generates class files in build/\n       This Ant script puts them in classes/\n       The ones in classes/ are the ones used in the output jar file\n\n       Use -Dlf=true to get per-file output (list-files)\n  ",
        "Line" : 14,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Locations of jars and ANTLR grammar file ",
        "Line" : 16,
        "CharPositionInLine" : 52
      },
      "2" : {
        "Text" : " Needed for JUnit ",
        "Line" : 35,
        "CharPositionInLine" : 28
      },
      "3" : {
        "Text" : " Code coverage ",
        "Line" : 61,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : " Allow coverage to be disabled if needed ",
        "Line" : 64,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " Output directory for system tests ",
        "Line" : 69,
        "CharPositionInLine" : 45
      },
      "6" : {
        "Text" : " We compile STC java and antlr-generated code separately\n       This is so we can get all warnings on our code but suppress\n       warnings on ANTLR-generated code that is outside our control\n  ",
        "Line" : 92,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : " Check if the ANTLR code is up-to-date ",
        "Line" : 122,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : " ANTLR output directory ",
        "Line" : 127,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : " Compile the ANTLR-generated parser code ",
        "Line" : 133,
        "CharPositionInLine" : 51
      },
      "10" : {
        "Text" : " Call ANTLR to generate the parser code ",
        "Line" : 152,
        "CharPositionInLine" : 50
      },
      "11" : {
        "Text" : " Delete all compiled java classes to avoid mismatch with token number\n         constants in compiled .class files",
        "Line" : 168,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " Record source directory ",
        "Line" : 192,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : " Config: setup config ",
        "Line" : 198,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "\n  <target name=\"config\">\n    <- Empty turbine home unless already provided ->\n    <property name=\"turbine.home\"\n              value=\"\"/>\n    <copy file=\"${stc.env.template}\" toFile=\"${stc.env}\"\n          overwrite=\"true\">\n      <filterset>\n        <filter token=\"TURBINE_HOME\" value=\"${turbine.home}\"/>\n      </filterset>\n    </copy>\n    </target>\n    ",
        "Line" : 211,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : " Generate full coverage report based on all tests.  Assumes\n       that Junit tests and run-tests.zsh have been run - report\n       is generated based on whatever execution files we can find. ",
        "Line" : 265,
        "CharPositionInLine" : 71
      },
      "16" : {
        "Text" : " Determine if this is a Debian build or a source build ",
        "Line" : 287,
        "CharPositionInLine" : 65
      },
      "17" : {
        "Text" : " Install: User must have set dist.dir ",
        "Line" : 304,
        "CharPositionInLine" : 48
      },
      "18" : {
        "Text" : " Delete all ANTLR-generated stuff ",
        "Line" : 371,
        "CharPositionInLine" : 46
      },
      "19" : {
        "Text" : " Use this when you get UnsupportedClassVersionError:\n       It means you are not using the Java you think you are using.\n  ",
        "Line" : 396,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 20
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2,
    "ANT" : 1
  },
  "ElapsedTime" : 2511
}