{
  "Repository" : "10402412",
  "Revision" : "HEAD",
  "ObjectId" : "c73c4dbe3a99a0cc03d7a498135c27e28790ad2e",
  "CommitTime" : "2018-12-08T12:10:43Z",
  "Files" : {
    "BUILD" : {
      "ObjectId" : "463ddc925066c88212a1cdd57ad105a3a546b746",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "20e5ba00922b8b3560cdc8688688cee95f0be0d3",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake on OSX likes to see this set explicitly, otherwise it outputs a warning.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Visual Studio CMake generators default to multiple configurations, but Fruit doesn't support multi-configuration build directories.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Full list of possible values at https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html .\n\n# Major compilers not currently supported:\n\n# * \"Intel\": not supported ATM due to compiler bugs:\n\n#   - https://software.intel.com/en-us/forums/intel-c-compiler/topic/606048\n\n#   - https://software.intel.com/en-us/forums/intel-c-compiler/topic/606049\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# TODO: we currently disable the warning C4709 because MSVC emits it even when there is no reason to. Re-enable it when possible.\n\n# TODO: the warning C4141 is disabled, because MSVC emits it (\"'inline': used more than once\") when a function/method is marked with both __forceinline and inline.\n\n# TODO: the warning C4714 is disabled, MSVC emits it when it decides not to inline a __forceinline function/method.\n\n# The warning C4577 is disabled because we don't need a termination guarantee on exceptions for functions marked with\n\n# 'noexcept'.\n\n# The warning C4530 is disabled because it's triggered by MSVC's STL.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# We also disable exceptions because otherwise GCC considers every function/method call that could throw as an\n\n# additional branch.\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Unsafe, only for debugging/benchmarking.\n\n#set(FRUIT_ADDITIONAL_COMPILE_FLAGS \"${FRUIT_ADDITIONAL_COMPILE_FLAGS} -DFRUIT_NO_LOOP_CHECK=1\")\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# (debug-only) compile switch to get deep template instantiation stacktraces for errors (instead\n\n# of the user-friendly default that hides Fruit internals).\n\n#add_definitions(-DFRUIT_DEEP_TEMPLATE_INSTANTIATION_STACKTRACES_FOR_ERRORS=1)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Do not exclude these from \"make all\" in debug mode, they must build.\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake-modules/FindFruit.cmake" : {
      "ObjectId" : "a6155cd7eac6119a321f41309b2dfb290e405b5b",
      "LastModified" : "2018-12-08T12:10:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# You can set your own route by setting FRUIT_INSTALLED_DIR:\n\n# set(ENV{FRUIT_INSTALLED_DIR} \"/path/to/fruit/build\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "configuration/CMakeLists.txt" : {
      "ObjectId" : "b18a4637db7f0c89cda7ec85c089966cfd8af139",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "a00f93c48b9677267b94d7537c2ef2b2e73bb7c2",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This uses threads and doesn't work on Windows (at least when using MinGW's GCC).\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/annotated_injection/BUILD" : {
      "ObjectId" : "a659487a328a1695c6ad59ad503735489df5f126",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/annotated_injection/CMakeLists.txt" : {
      "ObjectId" : "5fbf75436677875f802b6d92a2a519d82aa54c22",
      "LastModified" : "2016-05-15T17:21:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/hello_world/BUILD" : {
      "ObjectId" : "c11a74d3b2533857003a7f790c6948aaaa1929d6",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/hello_world/CMakeLists.txt" : {
      "ObjectId" : "5a154adcdb0a9b97dc94b977fe5d2fa9f1153823",
      "LastModified" : "2016-05-15T17:21:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/multibindings/BUILD" : {
      "ObjectId" : "1750e1d81669eb47b9e56b1c7f016a657a7facbf",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/multibindings/CMakeLists.txt" : {
      "ObjectId" : "fd0c06d7041649d977e1b55e066dcd0bc0b1bd42",
      "LastModified" : "2016-05-15T17:21:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/scaling_doubles/BUILD" : {
      "ObjectId" : "a9d6e85a19f82657a1a37e532af34b27074c2293",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/scaling_doubles/CMakeLists.txt" : {
      "ObjectId" : "4a0472ed8bc780a4acbe686d503fdcd1890f4246",
      "LastModified" : "2016-05-15T17:21:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/server/BUILD" : {
      "ObjectId" : "18886142a06bb509e6ee14c4e11ea9a568275d52",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/server/CMakeLists.txt" : {
      "ObjectId" : "9e61837006608b5bda5e4eab08a15b689a74643a",
      "LastModified" : "2016-05-15T17:21:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/simple_injection/BUILD" : {
      "ObjectId" : "4c2cf42fc859d1658f99fc0ebb5096f59c00d37c",
      "LastModified" : "2016-11-18T18:42:08Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/simple_injection/CMakeLists.txt" : {
      "ObjectId" : "738dd3bcbd1891486a8b15583d27aca0ecdf90ec",
      "LastModified" : "2016-05-15T17:21:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/testing/BUILD" : {
      "ObjectId" : "4744d1b4856e25ffac07e1600b747374203ecc22",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "examples/testing/CMakeLists.txt" : {
      "ObjectId" : "ab164766a835e28bdb65db6a0a0bed58d8642247",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: run the tests here under CMake (ATM they only run when using Bazel).\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extras/CMakeLists.txt" : {
      "ObjectId" : "49af9ab5e09cb2ee6529efd7cd2e78ac452209d7",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "extras/bazel_root/third_party/fruit/BUILD" : {
      "ObjectId" : "388dc92094f5ee3719f64b7c69833d1e97c27c8f",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "extras/benchmark/CMakeLists.txt" : {
      "ObjectId" : "fba9f915a7c0ba5d35ea33442176f89565f6616e",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is just to help IDEs (e.g. CLion) figure out how new_delete_benchmark.cpp is supposed to be built.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is just to help IDEs (e.g. CLion) figure out how compile_time_benchmark.cpp is supposed to be built.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "extras/doc/CMakeLists.txt" : {
      "ObjectId" : "21e1cc168c23eab3422d021e613aa2f751067c88",
      "LastModified" : "2018-08-27T14:58:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This normalizes the PNG files, so that we avoid tracking multiple copies of the same file in the Github wiki repo.\n",
        "Line" : 62,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "# This normalizes the PNG files, so that we avoid tracking multiple copies of the same file in the Github wiki repo.\n",
        "Line" : 86,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 2
    },
    "extras/packaging/CMakeLists.txt" : {
      "ObjectId" : "7592bf02dab2bd91d1f6c1ddfdd39808b839fc9a",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This places configured files (build files with @FRUIT_VERSION@ replaced) in build/extras/packaging/built\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "66bf79ff50ff34618ead2ce20d8d6c948e99aa21",
      "LastModified" : "2018-08-27T12:28:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test_package/CMakeLists.txt" : {
      "ObjectId" : "ad6dc6ebd8e1258ca4c08d5893d5fc0eabb4c2cc",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CTest is a testing tool that can be used to test your project.\n\n# enable_testing()\n\n# add_test(NAME example\n\n#          WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/bin\n\n#          COMMAND example)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/BUILD" : {
      "ObjectId" : "fa6349f3ae32625b9f62a08f2b88aba431aa5430",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Here we copy libfruit.so to work around an issue with py_test where the outputs of a cc_library in the data\n# attribute of a py_test are not taken into account.",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The removal of \".*/genfiles\" from the location is a bit of a hack, but that's how the path will look like in the py_tests\n# below.",
        "Line" : 64,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "b5cbfdb5dcadaf629b9c27c8940e4a0bfee5928d",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This defaults to OFF on Windows, since we don't support PCHs there.\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# TODO: consider adding support for PCHs on Windows (at least when using MinGW).\n",
        "Line" : 9,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# No timeout on windows, the `timeout' executable has a different syntax.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Join the list with \" \".\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Note that the \"test_common-precompiled.h\" header doesn't exist, but it's ok because GCC looks for\n\n# test_common-precompiled.h.gch first. We don't call the precompiled header test_common.h.gch so that if GCC doesn't\n\n# find it it reports an error instead of using the normal header.\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# These warnings are disabled for tests only, since they can only be produced when using fruit as a client. Also, they cannot be disabled via pragma pushes/pops,\n\n#   so we leave it up to clients to disable them if desired.\n\n# The warning C4702 is disabled because if MSVC optimizes the call to InvokeLambdaWithInjectedArgVector::operator() when cPtr is null, it will inline\n\n#   a FRUIT_UNREACHABLE statement, which makes all statements succeeding the operator() call unreachable.\n\n# The warning C4503 is disabled because some of the test_class_destruction.py tests suchs as \"test_injector_creation_and_injection\"\n\n#   produce extremely long decorator names. This has no effect on the actual results of the test.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "tests/build_defs.bzl" : {
      "ObjectId" : "ec48f39f5a69cb275da3275af832f5f7da8cd75f",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "tests/data_structures/BUILD" : {
      "ObjectId" : "764f8773e6b34481e20589b16c0112f59a8e44ad",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "tests/meta/BUILD" : {
      "ObjectId" : "1623eed7a30a963ddee72a5f50932cca070e4dc8",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "tests/util/BUILD" : {
      "ObjectId" : "632aa141e40b0b40ff47c758f9e87e94f66cd102",
      "LastModified" : "2018-09-15T10:38:18Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 18,
    "BAZEL" : 14
  },
  "ElapsedTime" : 1361
}