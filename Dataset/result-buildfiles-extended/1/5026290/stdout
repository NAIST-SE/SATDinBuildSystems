{
  "Repository" : "5026290",
  "Revision" : "HEAD",
  "ObjectId" : "21279e894b81a7b6db88257c06949d78c6ec027d",
  "CommitTime" : "2019-04-16T22:28:25Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "528b7188ad74b79bdf8d319b065062f34e4bbbeb",
      "LastModified" : "2019-01-22T12:56:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prefer GLVND OpenGL\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GCC C++11 support\n\n# from http://stackoverflow.com/questions/10984442/how-to-detect-c11-support-of-a-compiler-with-cmake\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#learn_more: output is spammed like shit by all those #pragma mark items\n",
        "Line" : 78,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# Clang C++11 support\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#static link to msv runtime (MSVCR(P)xxx.dll)\n",
        "Line" : 108,
        "CharPositionInLine" : 63
      },
      "5" : {
        "Text" : "#set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n",
        "Line" : 109,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#msvc / xcode: group files in project\n",
        "Line" : 112,
        "CharPositionInLine" : 45
      },
      "7" : {
        "Text" : "#mainly for ENet...\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# note that all paths are without trailing slash\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# various texts\n",
        "Line" : 214,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# menu file\n",
        "Line" : 217,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# man file\n",
        "Line" : 220,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# changelog file\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# copyright file\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# install asset paks (including non-GPL one)\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Package info (used for automatic update check)\n",
        "Line" : 242,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# install icons\n",
        "Line" : 245,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# binary file\n",
        "Line" : 253,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# desktop file\n",
        "Line" : 256,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Currently there is no files in lib/openspades. But if you reading this message in future and want to\n\n# place somewhere libs, binaries or other non-media stuff, place them in lib/openspades. Thank you.\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "#see http://www.cmake.org/cmake/help/v2.8.11/cpack.html\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# There is a bug in NSIS that does not handle full unix paths properly. Make\n\n# sure there is at least one set of four (4) backlasshes.\n",
        "Line" : 287,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# TODO: set(CPACK_PACKAGE_ICON  \"\")\n",
        "Line" : 290,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# TODO: SET(CPACK_NSIS_CREATE_ICONS_EXTRA \"\")\n\n# TODO: SET(CPACK_NSIS_DELETE_ICONS_EXTRA \"\")\n\n# TODO: SET(CPACK_NSIS_MUI_FINISHPAGE_RUN \"openspades.exe\")\n",
        "Line" : 294,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# usage: `cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release .. ; make package`\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# TODO: add libopus/libopusfile\n",
        "Line" : 310,
        "CharPositionInLine" : 215
      },
      "26" : {
        "Text" : "#everyone hates a dir inside a zip named exactly like the zip\n",
        "Line" : 322,
        "CharPositionInLine" : 45
      },
      "CommentCount" : 27
    },
    "Resources/CMakeLists.txt" : {
      "ObjectId" : "b24e7384ae23f90b964659e31e419d20ea9f288a",
      "LastModified" : "2018-12-20T09:34:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No automatic downloading for Windows (for now)\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# TODO: subgroups for script files\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# multi-config\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "Resources/Makefile.am" : {
      "ObjectId" : "b83f23364824468bf71b49379507085507518767",
      "LastModified" : "2013-08-30T12:05:51Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "Sources/AngelScript/projects/cmake/CMakeLists.txt" : {
      "ObjectId" : "94304aaf1b8387d2492c6384cabedf8090050037",
      "LastModified" : "2016-11-10T13:21:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fix x64 issues on Linux\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sources/AngelScript/projects/cmake_addons/CMakeLists.txt" : {
      "ObjectId" : "af125e2e343ff6c0c5600e1cdaf10ee6ce7bb323",
      "LastModified" : "2016-11-10T13:21:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fix x64 issues on Linux\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sources/CMakeLists.txt" : {
      "ObjectId" : "ef0b9b3665be5c20bc9403cf497bfc1762026cb2",
      "LastModified" : "2018-12-31T16:52:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# = gcc, can someone confirm that this works?\n",
        "Line" : 33,
        "CharPositionInLine" : 11
      },
      "1" : {
        "Text" : "# msvc\n",
        "Line" : 38,
        "CharPositionInLine" : 58
      },
      "2" : {
        "Text" : "# Use a single output directory for all configs\n\n# (Without this, the generated binary cannot find pak files created by mkpak.ps1 unless\n\n# a user explicitly specifies a search directory)\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#static linked\n",
        "Line" : 75,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "#lm: this sucks, msvc fucks up some linking (conflicts)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#todo: MACOSX_BUNDLE_ICON_FILE ?\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#install(TARGETS OpenSpades DESTINATION bin)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindGLEW2.cmake" : {
      "ObjectId" : "53047f007ca4bc15c12c700b64bed6e04a96e706",
      "LastModified" : "2016-11-10T13:21:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find GLEW library and include path.\n\n# Once done this will define\n\n#\n\n# GLEW_FOUND\n\n# GLEW_INCLUDE_DIR\n\n# GLEW_LIBRARY\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindOpus.cmake" : {
      "ObjectId" : "879af81c8a26190dacd50d7b92f17a1d78821de1",
      "LastModified" : "2016-12-18T11:05:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fink\n",
        "Line" : 10,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 11,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# Blastwave\n",
        "Line" : 12,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 3
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "8563ae12893c699eb9c819287554a30ea678c1f4",
      "LastModified" : "2019-01-01T04:17:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SDL 1.2 has SDL.h too. As such, the search paths should be restricted to\n\n# directories specific to SDL2.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 85,
        "CharPositionInLine" : 26
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 86,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For SDL2main\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# For MinGW library\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/FindSDL2_image.cmake" : {
      "ObjectId" : "139c098ac9b5a85a3de52a030476aa61c20da972",
      "LastModified" : "2016-12-18T11:05:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_image library\n\n# This module defines:\n\n#  SDL2_IMAGE_LIBRARIES, the name of the library to link against\n\n#  SDL2_IMAGE_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_IMAGE_FOUND, if false, do not try to link against\n\n#  SDL2_IMAGE_VERSION_STRING - human-readable string containing the version of SDL2_image\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#  SDL2IMAGE_LIBRARY (same value as SDL2_IMAGE_LIBRARIES)\n\n#  SDL2IMAGE_INCLUDE_DIR (same value as SDL2_IMAGE_INCLUDE_DIRS)\n\n#  SDL2IMAGE_FOUND (same value as SDL2_IMAGE_FOUND)\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL2.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for backward compatiblity\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1986
}