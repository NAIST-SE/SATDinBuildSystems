{
  "Repository" : "63773700",
  "Revision" : "HEAD",
  "ObjectId" : "1e4a7853572e491c5ec0afac4288346c9004065f",
  "CommitTime" : "2019-04-15T22:44:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e3926cd1e1add363e27d34ec3192286996c0ec1e",
      "LastModified" : "2019-04-14T00:44:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### VERSION INFO\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### OS-DEPENDENT FLAGS\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### CMAKE HEADERS\n\n# Ubuntu 18 default. After 3.8, no need for find_CUDA\n\n# https://cmake.org/cmake/help/v3.10/module/FindCUDA.html\n\n# https://cmake.org/cmake/help/v3.10/command/project.html\n\n# https://devblogs.nvidia.com/building-cuda-applications-cmake/\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# # Not tested\n\n# cmake_policy(SET CMP0048 NEW)\n\n# set(CUDACXX /usr/local/cuda/bin/nvcc)\n\n# project(OpenPose VERSION ${OpenPose_VERSION} LANGUAGES CXX CUDA)\n\n# set(AUTO_FOUND_CUDA TRUE)\n\n# # else\n\n# set(AUTO_FOUND_CUDA FALSE)\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Ubuntu 16 default\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# required by cmake eigen finder to find locally installed versions (e.g., CUDA 9.2 support was added in eigen 3.3.5)\n",
        "Line" : 34,
        "CharPositionInLine" : 48
      },
      "6" : {
        "Text" : "# cmake_minimum_required(VERSION 2.8.7 FATAL_ERROR) # min. cmake version recommended by Caffe\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### Extra functionality\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### CMAKE_BUILD_TYPE\n\n# Default: Release\n\n# Bug fixed: By default, it uses something different to Release, that provokes OpenPose to be about 15% slower than\n\n# it should be.\n\n# Is CMAKE_BUILD_TYPE \"Debug\" or \"MinSizeRel\" or \"RelWithDebInfo\"?\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Assign proper CMAKE_BUILD_TYPE\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### FLAGS\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO -- Makeshift solution -- This prevents rerunning build again\n\n# https://gitlab.kitware.com/cmake/cmake/issues/16783\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# /GL option causes the code to crash -- fix this\n\n# sdl flags causes error -- error : unknown attribute \\\"guard\\\"\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Turn on C++11\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Turn on C++11\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# C++ additional flags\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# set(OP_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp -Wpedantic -Wall -Wextra -Wfatal-errors\")\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# set(CUDA_NVCC_FLAGS \"${CUDA_NVCC_FLAGS} -Wpedantic -Wall -Wextra -Wfatal-errors\")\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Select the Enhanced Instruction Set\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Windows\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Suboptions for Enhanced Instruction Set\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Ubuntu\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# if (CMAKE_COMPILER_IS_GNUCXX)\n",
        "Line" : 128,
        "CharPositionInLine" : 13
      },
      "23" : {
        "Text" : "# if (CMAKE_COMPILER_IS_GNUCXX)\n\n#   set_property(CACHE INSTRUCTION_SET PROPERTY STRINGS NONE SSE4 AVX)\n\n#   if (${INSTRUCTION_SET} MATCHES \"SSE4\")\n\n#     add_definitions(\"-DWITH_SSE4\")\n\n#     set(SIMD_FLAGS \"${SIMD_FLAGS} -msse4.1\")\n\n#   endif (${INSTRUCTION_SET} MATCHES \"SSE4\")\n\n#   if (${INSTRUCTION_SET} MATCHES \"AVX2\")\n\n#     add_definitions(\"-DWITH_AVX\")\n\n#     set(SIMD_FLAGS \"${SIMD_FLAGS} -mavx\")\n\n#   endif (${INSTRUCTION_SET} MATCHES \"AVX\")\n\n#   message(STATUS \"GCC detected, adding compile flags\")\n\n#   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${SIMD_FLAGS}\")\n\n# endif (CMAKE_COMPILER_IS_GNUCXX)\n\n# if (WIN32)\n\n#   # set_property(CACHE INSTRUCTION_SET PROPERTY STRINGS NONE SSE SSE2 AVX AVX2 IA32)\n\n#   # Suboptions for Enhanced Instruction Set\n\n#   if (${INSTRUCTION_SET} MATCHES \"SSE\")\n\n#     add_definitions(\"/arch:SSE\")\n\n#   elseif (${INSTRUCTION_SET} MATCHES \"SSE2\")\n\n#     add_definitions(\"/arch:SSE2\")\n\n#   elseif (${INSTRUCTION_SET} MATCHES \"AVX\")\n\n#     add_definitions(\"/arch:AVX\")\n\n#   elseif (${INSTRUCTION_SET} MATCHES \"AVX2\")\n\n#     add_definitions(\"/arch:AVX2\")\n\n#   elseif (${INSTRUCTION_SET} MATCHES \"IA32\")\n\n#     add_definitions(\"/arch:IA32\")\n\n#   endif (${INSTRUCTION_SET} MATCHES \"SSE\")\n\n# endif (WIN32)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "### PROJECT OPTIONS\n\n# Select the DL Framework\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# set_property(CACHE DL_FRAMEWORK PROPERTY STRINGS CAFFE CAFFE2 TENSORFLOW)\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Suboptions for Caffe DL Framework\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Set the acceleration library\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Display proper options to user\n\n# if (CUDA_FOUND AND OpenCL_FOUND)\n\n#   set_property(CACHE GPU_MODE PROPERTY STRINGS CUDA OPENCL CPU_ONLY)\n\n# elseif (CUDA_FOUND)\n\n#   set_property(CACHE GPU_MODE PROPERTY STRINGS CUDA CPU_ONLY)\n\n# elseif (OpenCL_FOUND)\n\n#   set_property(CACHE GPU_MODE PROPERTY STRINGS OPENCL CPU_ONLY)\n\n# else ()\n\n#   set_property(CACHE GPU_MODE PROPERTY STRINGS CPU_ONLY)\n\n# endif (CUDA_FOUND AND OpenCL_FOUND)\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Look for CUDA\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Look for OpenCL\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Code to avoid crash at compiling time if OpenCL is not found\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Required for OpenCL in Nvidia graphic cards\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Handle desired GPU mode option\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# OpenPose flag for Caffe\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# OpenPose flag for Caffe\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Intel branch with MKL Support\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Set/disable profiler\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Suboptions for GPU architectures\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Suboptions for acceleration library\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Suboptions for OpenPose 3D Reconstruction module and demo\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# option(WITH_3D_ADAM_MODEL \"Add 3-D Adam model (requires OpenGL, Ceres, Eigen, OpenMP, FreeImage, GLEW, and IGL already installed).\" OFF)\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Faster GUI rendering\n\n# Note: It seems to work by default in Windows and Ubuntu, but not in Mac nor Android.\n\n# More info: https://stackoverflow.com/questions/21129683/does-opengl-display-image-faster-than-opencv?answertab=active#tab-top\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Set the acceleration library\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# # Suboptions for OpenPose tracking\n\n# if (UNIX AND NOT APPLE)\n\n#   option(WITH_TRACKING \"Add OpenPose 3D tracking module (it requires OpenCV with CUDA support).\" OFF)\n\n# endif (UNIX AND NOT APPLE)\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Download the models\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Asio\n\n# option(USE_ASIO \"Include Asio header-only library.\" OFF)\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# More options\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Unity\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Build as shared library\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Speed profiler\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Threads - Pthread\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Caffe OpenCL Boost Issue\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "### FIND REQUIRED PACKAGES\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Adding 3D\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 343,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Adding tracking\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Unity\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 370,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# Calibration\n\n# No Eigen\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# If Eigen used\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# OpenPose download/builds Eigen\n",
        "Line" : 384,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Download it\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Set path\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Leave to CMake to find it\n",
        "Line" : 392,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# Eigen\n\n# # Option a) apt-get\n\n# find_package(PkgConfig)\n\n# pkg_check_modules(EIGEN3 REQUIRED eigen3)\n\n# # Option b) Find it (including apt-get)\n",
        "Line" : 394,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# For Caffe and OpenPose\n",
        "Line" : 412,
        "CharPositionInLine" : 23
      },
      "75" : {
        "Text" : "# For Caffe\n",
        "Line" : 413,
        "CharPositionInLine" : 21
      },
      "76" : {
        "Text" : "# For Caffe\n",
        "Line" : 414,
        "CharPositionInLine" : 34
      },
      "77" : {
        "Text" : "# Allow explicitly setting the OpenCV includes and libs\n",
        "Line" : 418,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# 3D\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# OpenGL\n",
        "Line" : 430,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# GLUT\n",
        "Line" : 432,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# OpenGL\n",
        "Line" : 434,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# Eigen + Ceres\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# Spinnaker\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# Eigen\n\n# # Option a) apt-get\n\n# find_package(PkgConfig)\n\n# pkg_check_modules(EIGEN3 REQUIRED eigen3)\n\n# # Option b) Find it (including apt-get)\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# Others: sudo apt-get install libglm-dev\n\n# http://ceres-solver.org\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# sudo apt-get install libglew-dev\n",
        "Line" : 466,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# find_package(GLUT REQUIRED) # TODO: Duplicated of WITH_3D_RENDERER, clean somehow (like Eigen)\n\n# git clone --recursive https://github.com/libigl/libigl.git\n\n# No installation, it's header only\n\n# TODO: It's header only (as Eigen), do BUILD option too to download it\n",
        "Line" : 468,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Only adam/renderer::Renderer::IdleSaveImage() uses it. Make dependency optional in hand_model\n\n# FIND_LIBRARY(FREE_IMAGE_LIBRARY NAMES libfreeimage.so)\n",
        "Line" : 474,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# OpenMP\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# Set CUDA Flags\n",
        "Line" : 492,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Download Windows 3rd party\n",
        "Line" : 534,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Download required zip files\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# download_zip(\"caffe3rdparty_2019_03_12.zip\" ${OP_WIN_URL} ${FIND_LIB_PREFIX} 34c49be6a2418fd1670b46fc455eebc0)\n",
        "Line" : 541,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# download_zip(\"caffe_2019_03_12.zip\" ${OP_WIN_URL} ${FIND_LIB_PREFIX} 859a592310f0928fd4f40da1456a217f)\n",
        "Line" : 548,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# set(VS_VERSION \"14\")\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Note: VS2017 code seems to simply works in VS2015\n",
        "Line" : 557,
        "CharPositionInLine" : 23
      },
      "97" : {
        "Text" : "# If OpenPose builds it\n",
        "Line" : 564,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# OpenCL\n",
        "Line" : 570,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# CPU & CUDA\n",
        "Line" : 575,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# CPU\n",
        "Line" : 577,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# CUDA\n",
        "Line" : 582,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# Boost DepCopy over required DLL F\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# OpenCL\n",
        "Line" : 610,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# CUDA and CPU\n",
        "Line" : 614,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# CPU\n",
        "Line" : 616,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# CUDA\n",
        "Line" : 619,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# set(Boost_INCLUDE_DIRS \"3rdparty/windows/caffe3rdparty/include/boost-1_61\") # Added in WINDOWS_INCLUDE_DIRS\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Build DLL Must be on if Build Python is on\n",
        "Line" : 634,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Auto copy DLLs\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Locate DLLs\n\n# Caffe DLLs\n",
        "Line" : 643,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# Caffe 3rd-party DLLs\n",
        "Line" : 652,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# OpenCV DLLs\n",
        "Line" : 654,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# GLUT DLLs\n",
        "Line" : 656,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Spinnaker DLLs and other files\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "# Copy DLLs into same folder\n",
        "Line" : 660,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "### CAFFE\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# Check if the user specified caffe paths\n",
        "Line" : 678,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# Else build from scratch\n",
        "Line" : 685,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# Download Caffe\n",
        "Line" : 688,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# Check if pulled\n",
        "Line" : 692,
        "CharPositionInLine" : 6
      },
      "121" : {
        "Text" : "# execute_process(COMMAND git submodule update --init --recursive --remote) # This would initialize them all\n",
        "Line" : 697,
        "CharPositionInLine" : 8
      },
      "122" : {
        "Text" : "# Build Process\n",
        "Line" : 702,
        "CharPositionInLine" : 6
      },
      "123" : {
        "Text" : "# execute_process(COMMAND git checkout master WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)\n",
        "Line" : 705,
        "CharPositionInLine" : 8
      },
      "124" : {
        "Text" : "#execute_process(COMMAND git checkout intel WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)\n",
        "Line" : 709,
        "CharPositionInLine" : 10
      },
      "125" : {
        "Text" : "# New MLSL Lib\n\n#execute_process(COMMAND sh prepare_mlsl.sh WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe/external/mlsl\n\n#    OUTPUT_VARIABLE rv)\n\n#set( MLIST ${rv} )\n\n#separate_arguments(MLIST)\n\n#list(GET MLIST 0 MLSL_PATH)\n\n#message(STATUS ${MLSL_PATH})\n\n#file(GLOB MLSL_SO\n\n#  \"${MLSL_PATH}/intel64/lib/*\"\n\n#  )\n\n#file(COPY ${MLSL_SO} DESTINATION ${CMAKE_BINARY_DIR}/caffe)\n",
        "Line" : 722,
        "CharPositionInLine" : 10
      },
      "126" : {
        "Text" : "#\"${CMAKE_BINARY_DIR}/caffe/libmlsl.so\"\n",
        "Line" : 735,
        "CharPositionInLine" : 12
      },
      "127" : {
        "Text" : "# execute_process(COMMAND git checkout master WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)\n",
        "Line" : 741,
        "CharPositionInLine" : 10
      },
      "128" : {
        "Text" : "# Build Caffe\n",
        "Line" : 751,
        "CharPositionInLine" : 6
      },
      "129" : {
        "Text" : "# One for Intel Branch and one for Master\n",
        "Line" : 758,
        "CharPositionInLine" : 6
      },
      "130" : {
        "Text" : "# -DOpenCV_DIR=${OpenCV_DIR})\n",
        "Line" : 778,
        "CharPositionInLine" : 10
      },
      "131" : {
        "Text" : "# -DOpenCV_DIR=${OpenCV_DIR})\n",
        "Line" : 796,
        "CharPositionInLine" : 10
      },
      "132" : {
        "Text" : "### PROJECT INCLUDES\n\n# Specify the include directories\n",
        "Line" : 821,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "# OpenPose flags\n",
        "Line" : 832,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# Tell Asio it is not using Boost\n",
        "Line" : 834,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# Calibration\n",
        "Line" : 838,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "# 3D\n",
        "Line" : 867,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "# To remove its warnings, equiv. to -isystem\n",
        "Line" : 875,
        "CharPositionInLine" : 56
      },
      "138" : {
        "Text" : "# TODO: TEMPORARY - TO BE REMOVED IN THE FUTURE\n",
        "Line" : 878,
        "CharPositionInLine" : 70
      },
      "139" : {
        "Text" : "# Windows includes\n",
        "Line" : 886,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "# ${Boost_INCLUDE_DIRS}\n",
        "Line" : 889,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "### COLLECT ALL 3RD-PARTY LIBRARIES TO BE LINKED AGAINST\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "# Deep net Framework\n",
        "Line" : 903,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "# CPU vs. GPU\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "# Boost\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "# 3-D\n",
        "Line" : 923,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "# Pthread\n",
        "Line" : 937,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "### ADD SUBDIRECTORIES\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "### DOWNLOAD MODELS\n\n# Download the models if flag is set\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "# URL to the models\n",
        "Line" : 958,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "# Body (BODY_25)\n",
        "Line" : 962,
        "CharPositionInLine" : 36
      },
      "151" : {
        "Text" : "# Body (COCO)\n",
        "Line" : 964,
        "CharPositionInLine" : 36
      },
      "152" : {
        "Text" : "# Body (MPI)\n",
        "Line" : 966,
        "CharPositionInLine" : 36
      },
      "153" : {
        "Text" : "# Face\n",
        "Line" : 968,
        "CharPositionInLine" : 36
      },
      "154" : {
        "Text" : "# Hand\n",
        "Line" : 970,
        "CharPositionInLine" : 36
      },
      "155" : {
        "Text" : "### PYTHON\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "# execute_process(COMMAND git submodule update --init --recursive --remote) # This would initialize them all\n",
        "Line" : 984,
        "CharPositionInLine" : 6
      },
      "157" : {
        "Text" : "### GENERATE DOCUMENTATION\n",
        "Line" : 994,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "# Set input and output files\n",
        "Line" : 1000,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# Custom target to build the documentation\n",
        "Line" : 1003,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "### INSTALL\n",
        "Line" : 1017,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "# Install the headers\n",
        "Line" : 1020,
        "CharPositionInLine" : 4
      },
      "162" : {
        "Text" : "# Compute installation prefix relative to this file\n",
        "Line" : 1028,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# Uninstall target\n",
        "Line" : 1036,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 164
    },
    "cmake/Cuda.cmake" : {
      "ObjectId" : "acd193a57fb32ace9198df46be351a9504b1d099",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from Caffe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# More info on available architectures vs. CUDA version:\n\n# http://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Remove duplicates from list(s)\n\n# Usage:\n\n#   op_list_unique(<list_variable> [<list_variable>] [...])\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This list will be used for CUDA_ARCH = All option\n\n# Fermi (3.2 <= CUDA <= 8)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Kepler (CUDA >= 5)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Maxwell (CUDA >= 6)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Pascal (CUDA >= 8)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Volta (CUDA >= 9)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# set(VOLTA \"70 71 72\") # This crashes with CUDA 10\n",
        "Line" : 32,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# Turing (CUDA >= 10)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set(Caffe_known_gpu_archs \"${FERMI} ${KEPLER} ${MAXWELL} ${PASCAL} ${VOLTA} ${TURING}\")\n\n# set(Caffe_known_gpu_archs \"20 21(20) 30 35 50 52 60 61\")\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   op_detect_installed_gpus(out_variable)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA_ARCH\n\n# Usage:\n\n#   op_select_nvcc_arch_flags(out_variable)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# List of arch names\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# set(__archs_names \"Fermi (3.2 <= CUDA <= 8)\" \"Kepler (CUDA >= 5)\" \"Maxwell (CUDA >= 6)\" \"Pascal (CUDA >= 8)\" \"Volta (CUDA >= 9)\" \"Turing (CUDA >= 10)\" \"All\" \"Manual\")\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set CUDA_ARCH strings (so it will be seen as dropbox in CMake-Gui)\n\n# set(CUDA_ARCH ${__archs_name_default} CACHE STRING \"Select target NVIDIA GPU achitecture.\")\n\n# set_property( CACHE CUDA_ARCH PROPERTY STRINGS \"\" ${__archs_names} )\n\n# mark_as_advanced(CUDA_ARCH)\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# verify CUDA_ARCH value\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# mark_as_advanced(CUDA_ARCH_BIN CUDA_ARCH_PTX)\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# (${CUDA_ARCH} STREQUAL \"Manual\")\n",
        "Line" : 140,
        "CharPositionInLine" : 11
      },
      "19" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 161,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "################################################################################################\n\n# Short command for cuda compilation\n\n# Usage:\n\n#   op_cuda_compile(<objlist_variable> <cuda_files>)\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# we remove /EHa as it generates warnings under windows\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "################################################################################################\n\n# Short command for cuDNN detection. Believe it soon will be a part of CUDA toolkit distribution.\n\n# That's why not FindcuDNN.cmake file, but just the macro\n\n# Usage:\n\n#   detect_cuDNN()\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# dynamic libs have different suffix in mac and linux\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# cuDNN v3 and beyond\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "################################################################################################\n\n###  Non macro section\n\n################################################################################################\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cmake 2.8.7 compartibility which doesn't search for curand\n",
        "Line" : 277,
        "CharPositionInLine" : 31
      },
      "31" : {
        "Text" : "# cudnn detection\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Boost 1.55 workaround, see https://svn.boost.org/trac/boost/ticket/9392 or\n\n# https://github.com/ComputationalRadiationPhysics/picongpu/blob/master/src/picongpu/CMakeLists.txt\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# avoid warning for CMake >= 2.8.12\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# disable some nvcc diagnostic that apears in boost, glog, glags, opencv, etc.\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# setting default testing device\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Handle clang/libc++ issue\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# OSX 10.9 and higher uses clang/libc++ by default which is incompatible with old CUDA toolkits\n",
        "Line" : 329,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# enabled by default if and only if CUDA version is less than 7.0\n",
        "Line" : 331,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 40
    },
    "cmake/Modules/FindCaffe.cmake" : {
      "ObjectId" : "c7992bb7cb29e6911a6c6078c9f804254ec82799",
      "LastModified" : "2018-02-06T14:58:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from\n\n# https://raw.githubusercontent.com/opencv/opencv_contrib/master/modules/cnn_3dobj/FindCaffe.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCuDNN.cmake" : {
      "ObjectId" : "82ee365a6e12c56661587ca2b02a870022123eb4",
      "LastModified" : "2018-06-01T22:30:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cuDNN v3 and beyond\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGFlags.cmake" : {
      "ObjectId" : "29b60f05037bf2257b44eb191306d000dc64900f",
      "LastModified" : "2017-09-20T02:47:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GFLAGS\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR:            Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "79b8e23238d6674c045007e8060ef9eb656964cf",
      "LastModified" : "2018-06-01T22:30:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLIBIGL.cmake" : {
      "ObjectId" : "edecfc5c7981138e5924a89968e4c42c73f9b561",
      "LastModified" : "2018-06-18T06:07:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from:\n\n# https://github.com/libigl/libigl-examples/blob/master/cmake/FindLIBIGL.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find the LIBIGL library\n\n# Once done this will define\n\n#\n\n#  LIBIGL_FOUND - system has LIBIGL\n\n#  LIBIGL_INCLUDE_DIR - **the** LIBIGL include directory\n\n#  LIBIGL_INCLUDE_DIRS - LIBIGL include directories\n\n#  LIBIGL_SOURCES - the LIBIGL source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(LIBIGL_SOURCES\n\n#   ${LIBIGL_INCLUDE_DIR}/igl/viewer/Viewer.cpp\n\n#)\n",
        "Line" : 33,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# try to find pre-requisites\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Main library must be found\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# libiglbbw will work with/without mosek\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# mosek support should be determined before trying to find bbw\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# libiglviewer is required\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindSpinnaker.cmake" : {
      "ObjectId" : "6c5cffbea3dd8fb73fc1cb966c5452bc6b56d96b",
      "LastModified" : "2018-06-18T06:07:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on `FindCaffe.cmake`\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "d3b687f04afde6b2bfcaa535056eb675076b4757",
      "LastModified" : "2018-09-10T02:13:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function to download models\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SHOW_PROGRESS)\n",
        "Line" : 9,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# Function to download zip files, then extracting them and then deleting them\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Function to prepend filenames with common path\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get names of subdirectories in directory\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "670906479f7af41ab7a5b78728c855040db59bdd",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/calibration/CMakeLists.txt" : {
      "ObjectId" : "bb19ea5d3fb2f6f57abf9fc80ff924b657a4a268",
      "LastModified" : "2018-09-26T22:56:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/openpose/CMakeLists.txt" : {
      "ObjectId" : "8f1d87c4898f65b1858c24bcae7d962acb587c5e",
      "LastModified" : "2018-09-26T22:56:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Properties->General->Output Directory\r\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/tests/CMakeLists.txt" : {
      "ObjectId" : "748b36d30e5d0c824a1d784f77fd77d36531de5a",
      "LastModified" : "2018-06-18T06:07:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/tutorial_add_module/CMakeLists.txt" : {
      "ObjectId" : "9388ab0203a8cde98abd0e7b7e2b7359f91a7a13",
      "LastModified" : "2018-06-18T06:07:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/tutorial_api_cpp/CMakeLists.txt" : {
      "ObjectId" : "ad6024a1f42b9ea60fbf9b978ac1523befdc56be",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/tutorial_api_python/CMakeLists.txt" : {
      "ObjectId" : "5de55ad4598713160e341efae09013095fa0b2b9",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Add Python Test\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/tutorial_api_thread/CMakeLists.txt" : {
      "ObjectId" : "6addce9d305f32c78ad9d0871acced76a412af62",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/user_code/CMakeLists.txt" : {
      "ObjectId" : "921da36833d07a8925ae55a766ea15c5633ffc53",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Uncomment these lines with your custom file names\n\n# set(USER_CODE_FILES \n\n#     ADD_HERE_YOUR_FILE1.cpp\n\n#     ADD_HERE_YOUR_FILE1.hpp\n\n#     ADD_HERE_YOUR_FILE2.cpp\n\n#     # ...\n\n#     ADD_HERE_YOUR_FILEn.cpp)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "ee57418f38bfab5d689aa9787a299f506270d4bd",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/openpose/CMakeLists.txt" : {
      "ObjectId" : "bd8ee99eefe4edfe50244505317e22cb026bf338",
      "LastModified" : "2019-03-20T15:45:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "8ce2c92a965b97e13fd337efef40a8c50abc4c3a",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/3d/CMakeLists.txt" : {
      "ObjectId" : "f06fdb2d9e000611bbb77f4737ec3b1e9912fdc7",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/CMakeLists.txt" : {
      "ObjectId" : "8ff23f0a44ee2ca1119abe2bf87da30bd453f1db",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make the openpose.so/dll\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # Add experimental sub-folders\n\n# foreach (FILE ${OP_HEADERS_UNFILTERED})\n\n#   if (NOT FILE MATCHES \"${CMAKE_SOURCE_DIR}/include/openpose/experimental/*\")\n\n#       list(APPEND OP_HEADERS ${FILE})\n\n#   endif ()\n\n# endforeach(FILE ${OP_HEADERS_UNFILTERED})\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ubuntu\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Windows\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Properties->General->Output Directory\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/openpose/calibration/CMakeLists.txt" : {
      "ObjectId" : "55f7eadbdda9dc7e3036e3a67e5b20e8ec37147e",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/core/CMakeLists.txt" : {
      "ObjectId" : "2ddcc43ad2fd2cf5f48da540e0f0ac499804e4fb",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/face/CMakeLists.txt" : {
      "ObjectId" : "e19f3fbab0abbb79177260b24a65f822f5160feb",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/filestream/CMakeLists.txt" : {
      "ObjectId" : "59d930397236950bf311b77d4d74883ce69b0f79",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/gpu/CMakeLists.txt" : {
      "ObjectId" : "10cf71653079bf9772059edaa481475c5ef12b74",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/gui/CMakeLists.txt" : {
      "ObjectId" : "a1d35f91402c3b64fd1c4efd9c8bf609609dc606",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/hand/CMakeLists.txt" : {
      "ObjectId" : "ab0c793bed45f6704fb4ee12484692a0a1f71f94",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/net/CMakeLists.txt" : {
      "ObjectId" : "22c8e859cdf4e5a35463b89d990eb8da9ecf5b70",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/pose/CMakeLists.txt" : {
      "ObjectId" : "92b73c7c2008a16b1ea6eed4c08032ea079dcf13",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/producer/CMakeLists.txt" : {
      "ObjectId" : "de1ff329094ecd5d4abded1006ad586a511dd371",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/thread/CMakeLists.txt" : {
      "ObjectId" : "501513978bfd7a40731bb108561034c630dcc16b",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/tracking/CMakeLists.txt" : {
      "ObjectId" : "7cff327bca06b930e75d007e72cade0359332d84",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/unity/CMakeLists.txt" : {
      "ObjectId" : "86ffc11d464ce2ba3f1a64616c360c33c5542f16",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/utilities/CMakeLists.txt" : {
      "ObjectId" : "46ccede059b7b6069c11e52466105c1a3bb937d1",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/openpose/wrapper/CMakeLists.txt" : {
      "ObjectId" : "73c3cc481ac05190f62ffb98b13ddf591ac618b5",
      "LastModified" : "2019-02-19T22:11:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 38
  },
  "ElapsedTime" : 2533
}