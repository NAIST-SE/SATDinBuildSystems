{
  "Repository" : "6780971",
  "Revision" : "HEAD",
  "ObjectId" : "bec74e3a3dc26acb251eb820b3aeafcee0576b88",
  "CommitTime" : "2019-02-20T12:02:01Z",
  "Files" : {
    "CMake/Herc00_Includes.cmake" : {
      "ObjectId" : "ddfb97e29e15c92b2cd03d2fb3c1332bb20b4e4a",
      "LastModified" : "2019-01-27T15:42:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc00_Includes.cmake - Hercules build function library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nThis library includes numerous functions and one macro that are used frequently\nthroughout the build.  herc_Save_Error is a macro so that it runs in the\ncontext of the caller.  It is not not important for the functions to be\nrun in the caller's context.\n\nFunctions:\n- herc_Save_Error           - Save error message for presentation at build end.\n- herc_Define_Executable    - Define a target for an executable program\n- herc_Define_Shared_Lib    - Define a target for a shared library\n- herc_Check_Include_Files  - Test for a header and set the HAVE_ variable\n- herc_Check_Function       - Test for a function and set the HAVE_ variable\n- herc_Check_Struct_Member  - Test a structure for a member and set HAVE_STRUCT\n- herc_Check_Symbol_Exists  - Test whether a string exists as a macro or identifier\n- herc_Check_C11_Atomics    - Collect lock free status of C11 atomic intrinics\n- herc_Check_Packed_Struct  - Determine if packed structs are supported\n- herc_Check_Compile_Capability - Test sundry compiler capabilities\n- herc_Check_Strict_Aliasing - Test for problems created by strict aliasing\n- herc_Check_User_Option_YesNo - Validate a user option as YES/NO/TARGET\n- herc_Install_Imported_Target - Install files provided by imported target\n- herc_Create_System_Import_Target - Create import target for system shared library.\n\n\n\n  --------------------------------------------------------------------  ]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#[[  ###########   function herc_Save_Error   ###########\n\nThis macro accepts a single string as input and updates the associative\narray herc_EMessage with that string.  The count of strings stored in\nthe associative array, herc_Error, is incremented.\n\nThe goal of this macro and the array is to accumulate error messages\nfor presentation as a group at the end of the build.\n\n]]",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#[[ ###########   function herc_Define_Executable   ###########\n\nFunction/Operation\n- Creates a target for an executable and specifies the sources that must\n  be compiled to build the executable.\n- Specifies for that target the libraries that must be included during\n  link.\n\nInput Parameters\n- Name of the target executable to be added to the build.\n- Semi-colon delimited list of source files that must be compiled and\n  build into the executable.\n- Semi-colon delimited list of the libraries (other targets) that must be\n  used when linking this executable.\n\nOutput\n- A target defining the executable and its build and link actions.\n\nNotes\n- Target link libraries are transitive...if hercu requires hercs and hercu\n  is needed to link the target, there is no need to list hercs as a target\n  link library.  CMake will figure it out.\n]]",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#[[ ###########   function herc_Define_Shared_Lib   ###########\n\nFunction/Operation\n- Creates a target for a shared library to be loaded execution.\n- Specifies for that target the libraries that must be included during\n  link.\n- For open source systems, supports libraries loaded by the linking\n  loader at program start and libraries explicitly loaded through dlopen().\n- For Windows, creates create an export library including all functions\n  in the shared library and adds a post-build command to copy the resulting\n  DLL to the project binary directory.  This lets the DLL live with its\n  calling EXE(s).\n\nInput Parameters\n- Name of the target library to be added to the build.\n- Semi-colon delimited list of source files that must be compiled and\n  build into the library.\n- Semi-colon delimited list of the libraries (other targets) that must be\n  used when linking this library.\n- A flag to indicate whether a shared library or a dynamically loaded\n  library ( MODULE ) is to be built.\n\nOutput\n- A target defining the shared library and its build, link, and post-build\n  actions.\n- If building for Windows and the binary directory for the shared library\n  differs from the project binary directory, then the shared library is\n  being built in a subdirectory (decNumber, crypto).  A custom_command\n  is added to copy the shared library to the project binary directory to\n  enable execution from the build directory, aka the project binary\n  directory.\n- If the fourth parameter 'type' is set to \"MODULE\", the prefix is set\n  to null, which is the Hercules expectation for dynamically-loaded\n  libraries.  This has no impact on Windows, which does not have \"lib\"\n  as an implied prefix.  But on UNIX-like systems and macOS, which\n  store a dynamically loaded module named 'xxx' as 'libxxx.so', this\n  matters.\n\nNotes\n- Target link libraries are transitive...if hercu requires hercs and hercu\n  is needed to link the target, there is no need to list hercs as a target\n  link library.  CMake will figure it out.\n]]",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install the shared library, which is included in LIBRARY on non-DLL\n\n# platforms and in RUNTIME on DLL platforms.  (The Windows import\n\n# library is included in ARCHIVE and need not be installed.)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#[[ ###########   function herc_Check_Include_Files   ###########\n\nFunction/Operation\n- Check for a header.\n- If found, set the HAVE_xxx_H variable.\n- If the header is not found, an error message is stored for later\n  if the caller identified a missing header as failing the build.\n- If the header provided is really a list of ;-separated headers,\n  the HAVE_xxx_H variable is derived from the last header name in\n  the list.  The preceding headers are prerequisites needed for a\n  valid test.\n\nInput Parameters\n- Name of the header to be tested for presence.\n- A flag indicating whether a missing header is terminal for the build.\n\nOutput\n- If the header exists, variable HAVE_<header> is defined to 1.\n- If the flag is \"FAIL\" and the header is not found, a message is added\n  to the herc_EMessage array and the herc_Error message count is incremented.\n\nNotes\n- Absence of certain headers is likely terminal, while absence of other\n  headers merely means that certain functions, such as compression, cannot\n  be included in the build.  The flag parameter lets the caller inform this\n  routine of the distinction.\n- Note that the \"have\" variable name is constructed by this function,\n  and testing the \"have\" variable requires one level of indirection,\n  in the form ${${header_varname}}\n\n]]",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#             Strip out pre-requisite headers\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#             Convert invalid characters into underscores, prepend HAVE_\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#             Force to upper case.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#[[ ###########   function herc_Check_Struct_Member   ###########\n\nFunction/Operation\n- Check a structure in a header to see if it includes a specified\n  member.\n- If found, set the HAVE_STRUCT_xxx variable.\n- If not found, an error message is stored for later if the caller\n  identified a missing variable as failing the build.\n\nInput Parameters\n- Name of the structure to be tested.  There is no need to include the\n  word \"struct\" in the first parameter.\n- Name of the member the structure should contain.\n- Name of the header containing the structure to be tested.  CMake\n  syntax applies, and semicolon-delimited list of headers can be\n  checked if one does not care which header defines the structure.\n- A flag indicating whether a missing header is terminal for the build.\n\nOutput\n- If structure contains the member, variable HAVE_STRUCT_<structname>_<member>\n  is defined to 1.\n- If the flag is \"FAIL\" and the member is not found, a message is added\n  to the herc_EMessage array and the herc_Error message count is incremented.\n\nNotes\n- Absence of certain structure members is likely terminal, while absence of\n  others merely means that certain functions, such as compression, cannot\n  be included in the build.  The flag parameter lets the caller inform this\n  routine of the distinction.\n- Note that the \"have\" variable name is constructed by this function,\n  and testing the \"have\" variable requires one level of indirection,\n  in the form ${${struct_mem_varname}}\n\n]]",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#             Convert invalid characters into underscores, prepend HAVE_\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#             Force to upper case.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#[[ ###########   function herc_Check_Symbol_Exists   ###########\n\nFunction/Operation\n- Check for a symbol or macro definition in a public header.\n- If found, set the HAVE_STRUCT_xxx variable.\n- If not found, an error message is stored for later if the caller\n  identified a missing variable as failing the build.\n\nInput Parameters\n- Name of the header to be tested for presence.\n- List of public headers to be included in the trial compile that\n  tests for the existence of the variable.\n- A flag indicating whether a missing header is terminal for the build.\n\nOutput\n- If the symbol exists, variable HAVE_VAR_<varname> is defined to 1.\n- If the flag is \"FAIL\" and the header is not found, a message is added\n  to the herc_EMessage array and the herc_Error message count is incremented.\n\nNotes\n- Absence of certain identifiers is likely terminal, while absence of\n  others merely means that certain functions, such as compression, cannot\n  be included in the build.  The flag parameter lets the caller inform this\n  routine of the distinction.\n- Note that the \"have\" variable name is constructed by this function,\n  and testing the \"have\" variable requires one level of indirection,\n  in the form ${${var_varname}}\n\n]]",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#             Convert invalid characters into underscores, prepend HAVE_\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#             Force to upper case.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#               Strip out pre-requisite headers for error message\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#[[ ###########   function herc_Check_Function_Exists   ###########\n\nFunction/Operation\n- Check for a function.\n- If found, set the HAVE_xxx variable.\n- If not found and requested by the caller a message is added to the\n   herc_EMessage array.\n\nInput Parameters\n- Name of the header to be tested for presence.\n- A flag indicating whether a missing header is terminal for the build.\n\nOutput\n- If function exists in any of the libraries specified in CMAKE_REQUIRED_LIBRARIES,\n  variable HAVE_<func> is defined to 1.\n- If the flag is \"FAIL\" and the header is not found, a message is added\n  to the herc_EMessage array and the herc_Error message count is incremented.\n\nNotes\n- Absence of certain functions likely terminal, while absence of other\n  functions merely means that certain functions, such as compression, cannot\n  be included in the build.\n- Note that the \"have\" variable name is constructed by this function,\n  and testing the \"have\" variable requires one level of indirection,\n  in the form ${${header_varname}}\n\n]]",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#[[ ###########   function herc_Check_C11_Atomics   ###########\n\nFunction/Operation\n- Create a CMake include file that contains the lock free status of\n  C11 atomic intrinsics.  This file will be included by the caller\n  to set these varables for the build.\n- A C program is used to create this file because at least one c compiler,\n  gcc 4.9.2, does not define the lock free statuses as preprocessor\n  macros, but rather as run-time function calls.\n- In addition, the variable C11_ATOMICS_AVAILABLE is set to 1 in the parent\n  scope to indicate successful completion of the program and creation of the\n  include file.\n\nInput Parameters\n- None.\n\nOutput\n- C11_ATOMICS_AVAILABLE set to 1 in the parent scope upon successful\n  completion.\n- A CMake include file containing set directives to set the values of the\n  preprocessor macros that indicate whether C11 atomics are lock free.\n- If the test program fails to compile or run, a dummy include file is\n  created, the compile or execution listing is displayed, and an error\n  messege is saved; saving the message will terminate the build.\n\nNotes\n- The c program CMakeHercTestC11Atomic.c is executed by this function.\n\n]]",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#[[ ###########   function herc_Check_Struct_Padding   ###########\n\nFunction/Operation\n- Determine whether the c compiler pads structures to other than a byte\n  boundary by running CMakeHercTestStructPadding.c, a c program that\n  checks the size of a 1 byte structure and returns zero only if the\n  size is 1.\n- Hercules requires packed structures to be padded to no more than a\n  one-byte boundary.  GCC on ARM can be tickled into doing one-byte\n  padding if needed.  Otherwise the caller will have to fail the build.\n\nInput Parameters\n- The type of compiler directive needed for packed structures, either\n  GCC_STYLE_PACK or MSVC_STYLE_PACK.  This function does not edit the\n  parameter for validity, but the c program does.\n- The name of a variable to be set in the caller's scope to 1 (true) if\n  one-byte padding is in effect and to 0 (false) if not.\n\nOutput\n- If one-byte padding is detected, the variable named by the caller is\n  set to 1 (true).\n- If the test program fails to compile or run, an error message is saved\n  along with the compile or execution output.  Saving the message will\n  terminate the build.\n\nNotes\n- The c program CMakeHercTestStructPadding.c is executed by this function.\n\n]]",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#[[ ###########   function herc_Check_Packed_Struct   ###########\n\nFunction/Operation\n- Determine whether the c compiler can create a packed structure by running\n  CMakeHercTestPackedStruct.c, a c program that compares the size of a\n  structure containing a single int variable with one containing a char\n  followed by an int.\n- Packed structures are a requirement of Hercules.  If a packed structure\n  cannot be created, an error message is issued and the build is failed.\n\nInput Parameters\n- The type of compiler directive needed for packed structures, either\n  GCC_STYLE_PACK or MSVC_STYLE_PACK.  This function does not edit the\n  parameter for validity, but the c program does.\n- The name of a variable to be set in the caller's scope to 1 (true) if\n  packed structures are supported and to 0 (false) if not.\n\nOutput\n- If packed structures are supported, the variable named by the caller\n  is set to 1 (true).\n- If the test program fails to compile or run, an error message is saved\n  along with the compile or execution output.  Saving the message will\n  terminate the build.\n\nNotes\n- The c program CMakeHercTestPackedStruct.c is executed by this function.\n- As presently written, this function does not have the capability to\n  let the caller make multiple probes of a compiler for an appropriate\n  directive to create a packed structure.  It is one and done.\n\n]]",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#[[ ###########   function herc_Check_Compile_Capability   ###########\n\nFunction/Operation\n- Determine whether the c compiler can compile a (short) c program provided\n  by the caller without generating any errors or warnings.\n- The program is provided by the caller in a variable.\n- A variable provided by the caller is set to 1 if compilation generates\n  neither errors nor warnings and undefined otherwise.\n\nInput Parameters\n- A variable containing the c program to be compiled.\n- The name of the result variable to be set/unset based on the result\n  of the compilation.\n- A flag indicating whether success (has the capability) is indicated\n  by a clean compilation (TRUE) or by an error or warning message (FALSE).\n\nOutput\n- If the c program compiles cleanly, the variable provided by the caller\n  is set to 1.\n- None if errors or warnings were generated by the compilation.\n\nNotes\n- If the code submitted for compilation or the results need to be examined,\n  these can be found in the CMakeError.log and/or the CMakeOutput.log files\n  in the CMakeFiles directory.\n\n]]",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# success means clean compile\n\n# Change TRUE to 1 for autotools compatibility.\n",
        "Line" : 573,
        "CharPositionInLine" : 43
      },
      "24" : {
        "Text" : "# sucess means a return code\n",
        "Line" : 575,
        "CharPositionInLine" : 48
      },
      "25" : {
        "Text" : "# Change TRUE to 1 for autotools compatibility.\n",
        "Line" : 576,
        "CharPositionInLine" : 43
      },
      "26" : {
        "Text" : "# failed.\n",
        "Line" : 578,
        "CharPositionInLine" : 43
      },
      "27" : {
        "Text" : "#[[ ###########   function herc_Check_Strict_Aliasing   ###########\n\nFunction/Operation\n- Determine whether the c compiler uses strict aliasing.  This test\n  is taken from the configure.ac formerly used for Hercules.\n\nInput Parameters\n- None\n\nOutput\n- The result_var parameter is set if the compiler does strict aliasing.\n- If the test program fails to compile or run, an error message is saved\n  along with the compile or execution output.  Saving the message will\n  terminate the build.\n\nNotes\n- The c program CMakeHercTestStrictAliasing.c is executed by this function.\n\n]]",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# compiler strict aliasing should not be a problem\n",
        "Line" : 621,
        "CharPositionInLine" : 49
      },
      "29" : {
        "Text" : "# compiler strict aliasing is a problem\n",
        "Line" : 623,
        "CharPositionInLine" : 49
      },
      "30" : {
        "Text" : "#[[ ###########   function herc_Check_User_Option_YesNo   ###########\n\nFunction/Operation\n- Validate a Yes/No user option,  Valid values are YES, NO, TARGET, or\n  the null string.  The test is case insensitive and values may be\n  abbreviated to their first character.\n- If a valid value is provided, it is converted to canonical form (YES, NO,\n  or null).  An input of TARGET is converted to the null string.\n- If the user specified other than YES, NO, or TARGET for a Yes/No option,\n  and set the fail_flag to true, store an error message for later issuance.\n  Storing the error message will fail the build.\n- If an option is null, it was not specified, and this function returns\n  to the caller without performing any actions.\n\nInput Parameters\n- The name of the Yes/No variable to be validated.\n- A flag indicating whether a value of other than YES or NO is allowed.\n  Most options are pure YES|NO options, while some permit a value instead\n  of YES|NO.\n\nOutput\n- If valid and an abbreviation for Yes or No, the variable is\n  canonicallized to YES or NO.\n- If invalid and fail_flag is FAIL, an error message is saved in the\n  herc_EMessage array, and as a result, the build is failed.\n\nNotes\n- It is up to the balance of the build to examine the user option variable\n  if a buildWith_ option is not supported by the target.  If the user did\n  not specify the option, the subject feature should be excluded from the\n  build without comment.  If it was explicitly requested, then the build\n  is expected to issue a message.\n\n]]",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#[[ ###########   function herc_Check_User_Option_YesNoSys   ###########\n\nFunction/Operation\n- Validate a Yes/No/SYSTEM/HERCULES user option.  Valid values are YES,\n  NO, a null string, or SYSTEM.  The test is case insensitive, and\n  values may be abbreviated to their first character.\n- If a valid value is provided, it is converted to canonical form (YES,\n  NO, SYSTEM, or HERCULES).\n- These options are used to control the configuration of external\n  packages.  SYSTEM forces the use of the package installed on the target\n  system, even if the Hercules-390 repository has a newer package.\n  HERCULES forces the use of the package in the Hercules-390 repository,\n  even if a equivalent or newer version is installed on the target system.\n- If the user specified other than YES, NO, SYSTEM, or HERCULES, set the\n  fail_flag to true and store an error message for later issuance.\n  Storing the error message will fail the build.\n- If an option is null, it was not specified, and this function returns\n  to the caller without performing any actions.\n\nInput Parameters\n- The name of the Yes/No/System/Hercules variable to be validated.\n- A flag indicating whether other thaa value of other than YES, NO,\n  SYSTEM, or HERCULES is allowed.\n\nOutput\n- If valid and an abbreviation for Yes, No, System, or Hercules, the\n  variable is canonicallized to YES, NO, SYSTEM, or HERCULES\n  respectively.\n- If invalid and fail_flag is TRUE, an error message is saved in the\n  herc_EMessage array, and as a result, the build is failed.\n\nNotes\n- It is up to the balance of the build to examine the user option variable\n  if a buildWith_ option is not supported by the target.  If the user did\n  not specify the option, the subject feature should be excluded from the\n  build without comment.  If it was explicitly requested, then the build\n  is expected to issue a message.\n\n]]",
        "Line" : 688,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#[[ ###########   function herc_Install_Imported_Target   ###########\n\nFunction/Operation\n- Install the files provided by an imported shared library target.\n  Install( TARGET ) cannot be used for imported targets.\n- External packages that are provided as shared libraries must be\n  included in the project install directory, lest execution of an\n  installed Hercules have a dependency on the external package build\n  or install directory.\n- The imported shared library target is queried for the name(s) of the\n  libraries included in the target.  Install( FILES ) commands are used\n  for each library offered by the imported target.\n- Only the Debug, Release, and \"NoConfig\" configurations are tested.\n  Other configurations that may be in the target are not queried and\n  will not be installed.\n- The Install( FILES ) commands install to the Hercules install\n  directory, not to a system or other installation directory.\n\nInput Parameters\n- The name of the imported shared library target to be installed.\n- A descriptive name for  the shared library target, to be used in any\n  descriptive message issued by this function.\n\nOutput\n- Install( FILES ) commands for each library offered by the target.\n  Configuration-specific libraries are installed only when the specified\n  configuration is built.\n\nNotes\n- The include directory, containing the public headers, is not required\n  for Hercules execution and is not installed with Hercules.\n\n]]",
        "Line" : 750,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#[[ ###########   function herc_Create_System_Import_Target   ###########\n\nFunction/Operation\n- Create an import target for a shared library package installed on a\n  target system from the distribution for that system.\n- An import target is created for these libraries to enable a common\n  CMake code path regardless of whether the build will use the package\n  provided with the target system or the package included in a\n  Hercules-390 repository.  The libraries in the Hercules-390\n  repositories are named differently, and import targets provide a\n  very useful way of hiding those differencies from the Hercules build\n  script.\n- This function is only used for the BZip2 and Zlib directories, which\n  are often found on UNIX-like distributions.\n- Only the Debug, Release, and \"NoConfig\" configurations are created.\n\nInput Parameters\n- The name of the imported shared library target to be installed.\n- The prefix for the CMake variables created by the find_package( MODULE)\n  command used to find the target system-installed version of the\n  external.\n\nOutput\n- An imported shared library target for the libraries and include files\n  needed to build Hercules using the system-installed version of the\n  packages.\n\nNotes\n- None.\n\n]]",
        "Line" : 812,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#    if(NOT ${target_id}_LIBRARY_RELEASE AND NOT ${target_id}_LIBRARY_DEBUG)\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#    endif()\n",
        "Line" : 879,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "CMake/Herc01_GitVer.cmake" : {
      "ObjectId" : "5268ba08a8d3db44f03e67c75b923a94756ddfca",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc01_GitVer.cmake - Collect git repository status for the build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n  Collect current status of ${GIT_EXECUTABLE} repostory for creation of\n  version/mod/patch/commit count/modified\n\n  With thanks to Enrico for prototype code for the following.\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#[[\n   Function/Operation -\n     - Create commitinfo.h from commitinfo.h.in using the status of the\n       git repository pointed to by SDIR.\n     - Do not disturb the current commitinfo.h if there has been no\n       change in the git repository status since commitinfo.h was last\n       re-created.\n     - If SDIR does not point to a git repository, or if a git client\n       is not installed, issue a message and create a dummy commitinfo.h.\n     - This script is intended to be run at build time using \"cmake -P\".\n       As a result, this script:\n         - does not have access to cached variables\n         - cannot change cached variables.\n     - This script is written using CMake so that it can be target system\n       independent.  It replaces the GetGitHash, GetGitHash.cmd, and\n       _dynamic_version.cmd scripts.\n\n   Arguments -\n     - SDIR - The source directory for the build.  Required.\n     - BDIR - The binary (build) directory for the build.  Optional;\n       if omitted, the current working directory is used.  The header\n       commitinfo.h will be written to BDIR.\n\n   Other Input -\n     - Git status as collected by various git command executions\n     - commitinfo.h.in, template for the commitinfo.h file\n     - Current commitinfo.h, which is used to test if the status of the\n       git repository has changed.  If a current commitinfo.h does not\n       exist, then the repository status is presumed to have changed.\n       This happens on the first build in a given build directory.\n\n   Output -\n     - A new commitinfo.h, but only if the new commitinfo.h differs from\n       the current commitinfo.h or a current commitinfo.h does not exist.\n\n   Return Code -\n     - Always zero.\n\n   Notes -\n     - If commitinfo.h does not exist in the build directory, it is created.\n     - If the build is not from a clone of a git repository, a null commitinfo.h\n       is created.\n     - If a git command line tool cannot be found, a commitinfo.h file is created\n       without git status information and an informational message is displayed\n       to stdout.  Likewise if the source directory is not a clone of a git\n       respository.\n]]",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Function create_commitinfo: Create a commitinfo.h.new and compare it\n\n#                             to the current commitinfo.h.  Replace the\n\n#                             current header if the new one is different.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# configure commitinfo.h to pass current git status to source\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the new commitinfo.h differs from the current file or there is no\n\n# current commitinfo.h, delete any current file and rename the new file.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if blank, then first build this directory\n",
        "Line" : 93,
        "CharPositionInLine" : 48
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Main: collect information from the git local repository and create\n\n#       a commitinfo.h.new.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# List of directory names to exclude from counts of new and changed files.\n\n# Each directory is rooted at the source directory and must end with a\n\n# forward slash.  CMake deals with Windows versus open source directory\n\n# separators.  Separate each directory name with \"|\".  This string is used\n\n# as part of a regular expression.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Do we have a shot at filling in the variables?  Check for a .git directory.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If we are unable to run git status commands, dummy up values and create commitinfo.h\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# All done...\n",
        "Line" : 153,
        "CharPositionInLine" : 41
      },
      "13" : {
        "Text" : "# Get the date and time of the most recent commit\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Remove leading and trailing quotes\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get the current working branch\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Get the commit message included with the latest commit to the working branch\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Get the count of commits to the current working branch\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Get the list of new/changed/deleted files\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "CMake/Herc02_ExtPackageBuild.cmake" : {
      "ObjectId" : "a9c5a50ec6f8b9ab55727e091f7948c87b5cf82a",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc02_ExtPackageBuild.cmake - Build an external package needed by\n\n#                                Hercules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nBuild an external package, such as SoftFloat-3a For Hercules.\n\nThis function is invoked when a builder specifies or defaults to\ninclusion of a package (BZip2 or PCRE, for example) and the package--most\nimportantly its development headers--is not available on the target\nsystem.\n\nFunction/Operation\n- Clones a package from a project repository and configures it to create\n  the import target script.\n- If this is a reconfiguration of Hercules and the package has been\n  previously cloned, a git pull command is used instead.  If the pull\n  reports there are no updates, the configuration step is skipped to\n  save time.\n- Creates an externalproject_add() target so that when Hercules is built,\n  the package is cloned (again) or pulled as needed, configured, and built.\n- Runs the import target script to add the package target so that it can\n  be used when creating Hercules targets.\n- Packages that are used by this process must create an import target\n  for the build tree.  This function does not execute an install step.\n  Packages that do not export a built tree target must be built and\n  installed by the person building Hercules and referenced in a\n  <pkgid>_DIR CMake variable or host environment variable.\n- The generator, toolset, and architecture specified or defaulted for\n  the Hercules configuration are used to build all external packages.\n- For multi-configuration generators (Visual Studio and Xcode), a\n  generator expression is used in externalproject_add() to ensure the\n  configuration selected at build time is used.\n\nInput\n- <EXTPKG_ROOT>   Global variable, not passed as a parameter.  Root of\n               directories created for external packages built by CMake\n               for Hercules.  Specified as an absolute path name, not\n               as a relative path name.\n- <pkg>        The descriptive name of the package.  This name is used a\n               as the externalproject_add() target that will configure\n               and build the package and as the package root directory\n               under EXTPKG_ROOT.  Because this string names the target\n               created by externalproject_add(), it CANNOT be the same\n               as the import target created by the package.  An\n               add_dependencies() function must name <pkg> as a\n               dependency of some other target (executable, library, or\n               something else) for CMake to actually build the external\n               package.\n- <pkgid>      A short string, case insensitive, that identifies a\n               single external package needed by Hercules.  It is likely\n               that this string is the same as the optional xxx_DIR\n               build option used to specify the location of a pre-built\n               package.  This string converted to lower case internally,\n               and the lower case value is used as the prefix for the\n               subdirectory of the package build directory containing\n               the import target, and as the prefix for the import\n               target script.  See the directory diagram befow for details.\n- <pkgurl>     Complete git URL for the external project repository.  At\n               the moment, only git repositories are supported, although\n               it would not be much effort to include Mercurial.\n- <pkgbranch>  Branch of the repository to be cloned, typically master.\n\nOutput\n- A new cloned local repository for the package being processed, or, if\n  a local clone already exists, a pull update to that repository.\n- If newly cloned or a pull updates the existing local repository, the\n  repository is (re-)configured to create or update any import targets\n  exported by the package.\n- An externalproject_add target, so that subsequent builds retrieve any\n  updates to the package.\n\nExternal references\n- None\n\nNotes\n- It is the responsibility of the caller to ensure a dependency is added\n  on the target created by externalproject_add( <pkg> ) to ensure that\n  the package is actually built.\n- The generator specified or defaulted for Hercules is also used for all\n  external projects built by the Hercules CMake build.\n- CMAKE_BUILD_TYPE and WINTARGET are the only variables passed to the\n  externalproject_add() for the external package being built.  Hercules\n  C flags are not; the external package must set its flags based on\n  the build type.\n- If additional control over the package configuration is needed, it\n  should be built separately and the build or install directory passed\n  to the Hercules build in the -D<pkg>_DIR variable.\n- When the package does not exist in the EXTPKG_ROOT directory, it will\n  be cloned and configured twice, once during the Hercules configure,\n  and again during Hercules build.  I have not figured out how to get\n  CMake to realize that the clone during configure can/should be used\n  as opposed to replaced.  At least it is not being built twice.\n\n\nDirectory structure created for a package by this function:\n\n<EXTPKG_ROOT>/   All external packages are placed in <EXTPKG_ROOT>/,\n                 with a separate subdirectory per package\n\n<EXTPKG_ROOT>/<pkg>/         directory for one external package with\n                             package name <pkg>.\n<EXTPKG_ROOT>/<pkg>/pkgsrc   source directory for the package,\n                             ...generally from a git repository\n<EXTPKG_ROOT>/<pkg>/build    build directory for an external package\n<EXTPKG_ROOT>/<pkg>/build/<pkgid>-targets/   directory containing\n                             ...import target script <pkgid>.cmake\n\nExample function call and resulting tree, relative to <EXTPKG_ROOT>\n\n    herc_ExtPackageBuild( SoftFloat-3a      # Descriptive name\n                S3FH              # import script prefix\n                git://github.com/hercules-390/SoftFloat-3a   # repo URL\n                master            # repo branch\n           )\n\n    SoftFloat-3a/         directory for one external package with\n                          ..package name SoftFloat-3a.\n    SoftFloat-3a/pkgsrc   source directory for SoftFloat-3a, from repo\n                          ...git://github.com/hercules-390/SoftFloat-3a\n    SoftFloat-3a/build    build directory for SoftFloat-3a\n    SoftFloat-3a/build/s3fh-targets/   directory containing build tree\n                          ...import target script s3fh.cmake\n\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugly kludge alert: the SoftFloat-3a build uses non-standard names\n\n# for the insttall prefix and the build type: the names used lack\n\n# the \"CMAKE\" prefix.  So we must adapt to that in the commands and\n\n# externalproject_add() commands below.   This will need to be\n\n# addressed in the CMake build for SoftFloat-3a For Hercules.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# WINTARGET is needed by the configure-time external package build\n\n# and for the creation of the externalproject_add() target.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If we are configuring using a single-configuration generator,\n\n# the configuration name is needed by the configure-time external\n\n# package build  and for the creation of the externalproject_add()\n\n# target.\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# See if <pkg>/pkgsrc directory contains a repository with a URL\n\n# that matches <pkgurl> exists in the ${__pkg_prefix} directory and\n\n# if so, that there is an import target script in the <pkg>-targets\n\n# subdirectory of the build directory.  If so, there is no need to\n\n# run the configure step.  Newlines confound string equality tests.\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Get the URL for the current local repository.\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If ${__remote_url} matches the URL of the package to be built, we\n\n# can use it.\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Found directory, upstream url matches.  Do a git pull to make\n\n# sure the repository is up-to-date.  And if the local\n\n# repository is current and has a target import script, there is\n\n# no need to repeat the CMake configuration.\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Not a repository with a matching upstream URL.  Delete the\n\n# directory and make a new clone.  We do a shallow clone\n\n# (-depth=1) because we need only the most recent commit.\n",
        "Line" : 204,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# We need to configure the package to get the import target.\n",
        "Line" : 225,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Import the build tree target created by the CMake configure step\n\n# performed by the execute process command above, which happens\n\n# during configure.\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# When building a static library using externalproject_add() and\n\n# using Ninja for the build tool, we must include the library name\n\n# in the BUILD BYPRODUCTS option of externalproject_add().  See the\n\n# discussion at https://cmake.org/pipermail/cmake/2015-April/060233.html.\n\n# This issue applies only to SoftFloat-3a at the moment because it\n\n# is the only static library built and used by Hercules.\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# This complexity is a decent argument for converting SoftFloat-3a\n\n# to a shared library, where none of this is needed.\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Retrieve the full path name of the static library for the current\n\n# configuration from the imported target.  This is relatively simple\n\n# because Ninja is a single-configuration build tool, so we know\n\n# which configuration should be retrieved from the target at\n\n# configure time.\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# externalproject_add() does not expose a git depth option, so we\n\n# must download the entire repository.  Oh well...maybe someday.\n\n# Note that \"<INSTALL_DIR>\" below is not a typo'd generator\n\n# expression.  Variables ${GIT_SHALLOW_OPTION} and\n\n# ${GIT_SHALLOW_OPTION_VALUE} set at the beginning of CMakeLists.txt\n\n# to enable shallow clones if using CMake 3.6 or better.\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# No patches\n\n# No updates\n\n# ..and no install.\n",
        "Line" : 307,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 18
    },
    "CMake/Herc03_CopySharedLib.cmake" : {
      "ObjectId" : "0b34977f321045e66c6199acc7987c6462cf96e5",
      "LastModified" : "2018-05-03T11:16:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc03_CopySharedLib.cmake - Copy one, two, or three shared libraries\n\n#                              from a source directory to a target\n\n#                              directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nThis CMake script is the target of Add_Custom_Command calls in\nHerc65_ExtPackageWinCopy.cmake.  The added commands ensure that shared\nlibraries created by executable packages are copied to the Hercules\nbinary directory when Hercules is built on Windows.\n\nThis script and the commands are not needed on UNIX-like and macOS\nbuilds because the shared libraries are located using the RPATH\nsetting in the calling executable or shared library.\n]]",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/Herc10_OptDef.cmake" : {
      "ObjectId" : "f4d1b19301f0a3106594a8e39589b4287f09b50f",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc10_OptDef.cmake - Define Hercules build user options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nThis script defines the user options available for the Hercules build.\n\nFor each option, the following is done\n 1. Include the option in the list of options to enable help display.\n 2. Define the brief (one or two line) help text for the option, for use\n    by the CMake GUI tools or when cmake <source-path> -DHELP=Y is used.\n 3. Define the build default to be used for an option if the builder\n    did not specify that option.  If the default varies by target-\n    specific, the default is set based on the current build target.\n\n Note that because Windows and gcc-like compilers use incompatible\n optimization flags, the default value for OPTIMIZE may only be YES\n or NO.\n\n\n    Order of use of user option specifications\n\n 1. If specified via -D on the command line, that value is used.\n 2. If specified via an environment variable, that value is used.\n 3. If neither of the above, the option is initialized to the null\n    string.\n\n The above values populate any GUI or ccmake presentation of options.`\n\n\nTo add a new CMake Hercules build option:\n\n1. Add the option name to the \"set( herc_Optionlist\" below\n2. Add a \"set help_Sumry_<optionname> \" statement with the brief help\n   text for the option.  Continuations start in column 17.  The help\n   text is also used in the CMake GUIs.\n3. Add \"set( buildWith_<optionname> \" to set the build default for the\n   option if the option has not been specified by the builder and is\n   instead defaulted.\n4. Add whatever edits are needed for the option to Herc12_OptEdit.cmake.\n5. Add code to the appropriate CMake scripts to incorporate the effect\n   of the option in the build.  Most options are processed in\n   Herc28_OptSelect.cmake, where they are compared with the capabilities\n   of the target system.\n\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set the one-line help string for each of the build options\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Yes/No options\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Other descriptive options\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Alternate directories\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Omnibus external package directory\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Cache the user interface version of the options.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If an environment variable exists that corresponds to a user option,\n\n# use the environment value.  If the environment variable does not\n\n# exist, the reference return the null string, which is the desired\n\n# initial value.  And because FORCE is not specified, any value\n\n# specified in a -D command line option will not be overwritten.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Note that we cannot skip values specified by -D because they need to\n\n# be cached.  While the value will not be overwritten, the cache\n\n# parameters will be added.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Cache the build defaults specific to the target and with any relative\n\n# path names expanded to absolute paths.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The defaults for most values are clear enough.  There is no default\n\n# for HQA_DIR, and the default for the SoftFloat 3a  for Hercules\n\n# directory is ../s3fh (at the same level and with the same parent as\n\n# the build directory).\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The default for FTHEADS is NO for non-Windows systems and YES for\n\n# Windows Systems.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The default for MULTI_CPU is determined in hconst.h based on the\n\n# availability of the uint128_t type.  So the default value here is blank.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The \"real\" default for LARGEFILE cannot be known until SIZEOF_OFF_T is\n\n# determined in Userland probes.  So this is just a placeholder.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The default for FTHREADS varies by target.  Note that FTHREADS is not allowed\n\n# for UNIX-like builds, and is required for Windows builds.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# if the MULTI-CPU default is set to other than YES, NO, or blank, it must be\n\n# set to a valid value (greater than zero and less than 65, or if __uint128_t\n\n# is available on the target system, which is not known yet, less than 129)\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If we have an optimization script for a given c compiler, then the\n\n# default is YES if OPTIMIZATION is not specified by the builder.\n\n# Otherwise no.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# There is no default for the BZip2 directory.  If it is not specified nor\n\n# defined as an environment variable or on the command line, BZip2 will be\n\n# sought in in the standard system location for UNIX-like targets and will\n\n# not be included for Windows targets.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# There is no default for the HQA directory.  If it is not specified nor\n\n# defined as an environment variable, HQA build scenarios are not\n\n# available.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# There is no default for the Zlib directory.  If it is not specified nor\n\n# defined as an environment variable or on the command line, Zlib will be\n\n# sought in in the standard system location for UNIX-like targets and will\n\n# not be included for Windows targets.\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The default for the extpkg directory is \"extpkg\" and is a subdirectory\n\n# of the build directory.\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "CMake/Herc12_OptEdit.cmake" : {
      "ObjectId" : "794066952b8857e78ffc782d679a8de397f12b10",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc12_OptEdit.cmake - Edit Hercules build user options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nThis script edits user options specified on the command line for the\nHercules build.  Edits are relatively simple; yes/no options must\nrecognizably be yes/no (YES/yes/Y/N etc.), paths must exist, and,\nfor multi-cpu, if not yes/no, then a value between 1 and 128 inclusive.\n\nIf some variant of yes/no is specified, it is canonicallized to\nYES/NO to simplify testing when the options are processed.\n\nOnly syntax errors are handled here.  Herc28_OptSelect.cmake reports\nerrors such as requesting something not supported by the target system,\nSoftFloat-3a not being in the directory specified, or a cpu count that\nexceeds the maximum supported by the target architecture or userland\n(64-bit and uint128_t are needed).\n\nFor _DIR options, editing includes issuing the find_package() command\nto collect paths to the public headers and libraries.\n\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For option ADD-CFLAGS, we will run a trial compile with the provided\n\n# options.  If the compile fails, then the options are invalid.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test added flags for validity.\n",
        "Line" : 70,
        "CharPositionInLine" : 38
      },
      "5" : {
        "Text" : "# BZIP2 cannot be SYSTEM if the build target is Windows.  If BZIP2\n\n# is SYSTEM, then BZip2 must be installed on the target system and\n\n# can be found by find_package( BZip2 MODULE ).\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Herc28 will import any target if BZIP2_DIR has been set correctly.\n\n# Herc41_ExtPackageBuild.cmake will decide whether we build BZip2 or\n\n# build an import target from information returned by find_package( )\n\n# based on the setting of BZIP2 and comparng the versions of the\n\n# target system's BZip2 versus the Zlib repository in the Hercules-390\n\n# project.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  BZIP2 is blank, YES, HERCULES, or SYSTEM.  If this is a\n\n#  non-Windows target, see if\n\n#  BZip2 headers and library are installed in the system directories.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Use of the BZip2 library installed on the system is a\n\n# possibility.  See what version if any is installed.\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SYSTEM not valid for Windows targets\n",
        "Line" : 115,
        "CharPositionInLine" : 22
      },
      "10" : {
        "Text" : "# No BZip2 lib/headers installed\n",
        "Line" : 117,
        "CharPositionInLine" : 36
      },
      "11" : {
        "Text" : "# Herc41_ExtPackageBuild.cmake will create the import target\n\n# using the information returned by find_package(BZip2 MODULE ).\n",
        "Line" : 120,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Herc28_OptSelect.cmake will decide whether to use the system-\n\n# installed BZip2 based on its existence and version, and whether\n\n# BZIP2_DIR points us at a specific build or install directory.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CCKD-BZIP2 cannot be YES if BZIP2=NO.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# There are no edits for option CUSTOM.  It is there or not.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# EXTPKG_DIR must either 1) exist and be writable or 2) creatable.\n\n# Because the directory may not be needed--as would be the case if\n\n# installation directories were specified for all external\n\n# packages, we might be creating a directory we will not use.  If\n\n# the builder specifies this option, then we presume he or she will not\n\n# be surprised by directory creation even if it is not used.  And the\n\n# default location for EXTPKG_DIR is in the Hercules build directory,\n\n# so creating an additional diretory there should not be a (big?)\n\n# problem.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create the EXTPKG directory if it does not exist\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# directory was created, or something (file or directory) exists.\n\n# make sure it is a directory.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# It is a directory.  Make sure we can create a subdirectory in it.\n",
        "Line" : 176,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "#   get a timestamp of the form yyyydddhhmmss\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Git protocol to be used by default when cloning external packages and\n\n# the HTML documentation project.  The git: protocol is the fastest but\n\n# includes no validation of the source of a clone.  It uses a high port\n\n# number and is often blocked on company networks.  The https: protocol\n\n# represents a good compromise.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# HET-BZIP2 cannot be YES if BZIP2=NO.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# MULTI-CPU may be YES, NO, or a value up to the maximum supported\n\n# by the hardware and userland (must be 64-bit and have uint128_t\n\n# for 128 CPUs, otherwise the max is 64).  We do not know about\n\n# hardware and userland yet, so we shall syntax edit only for\n\n# the moment.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# OPTIMIZATION may be YES, NO, or anything the c compiler will accept.\n\n# So anything goes.  We call the Yes/No function to canonicalize\n\n# Y/y/YES/Yes/yes into YES etc for later testing.  Note that the\n\n# Yes/No function *does not* change the value if it not a synonym for\n\n# Yes, No, or Target.  If an option string is specified, we run a\n\n# test compile to make sure the specified options are valid for the\n\n# compiler.  If YES is specified, we make sure the compiler is one\n\n# that has an optimization script.\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If YES is specified or defaulted, we have to be able to recognize\n\n# the c compiler as one for which an automated optimization script\n\n# exists.  Apple uses clang or gcc depending on version, so while\n\n# we use a separate script for Apple, we do not need a separate test.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# sample program to validate options\n",
        "Line" : 278,
        "CharPositionInLine" : 38
      },
      "26" : {
        "Text" : "# Non-zero return code means compiler rejected flags\n",
        "Line" : 291,
        "CharPositionInLine" : 33
      },
      "27" : {
        "Text" : "# PCRE is valid only for Windows systems, and cannot be SYSTEM because\n\n# Windows does not have a system-installed PCRE library.\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Herc28 will import any target if PCRE_DIR has been set correctly.\n\n# Herc41_ExtPackageBuild.cmake will decide whether we build PCRE or\n\n# use the import target based on the setting of PCRE_DIR.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#  PCRE is blank, YES, HERCULES, or SYSTEM and this is a Windows\n\n#  target system.\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Herc28_OptSelect.cmake will import the PCRE target if PCRE_DIR\n\n# points us at a specific build or install directory.\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# OBJECT-REXX - Include support for Open Object Rexx\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# If building on Windows, locate the correct Open Object Rexx directory\n\n# for the bitness of the Hercules being built and set OOREXX_DIR\n\n# to that directory.  Herc22_UserlandWin.cmake will check for\n\n# the needed headers, Herc28_OptSelect will issue any error messages,\n\n# and the OOREXX_DIR will be included in the build configuration.\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Open Object Rexx takes pains to ensure that only one bitness\n\n# of ooRexx is installed at a time.  And because the prepackaged\n\n# install executable is 32-bit, the registry keys written by\n\n# installation always end up in HKLM\\SOFTWARE\\WOW6432Node.  So\n\n# we can only determine if an ooRexx is installed, and if\n\n# installed, its bitness.\n",
        "Line" : 339,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# If the bitness does not match, then we must ignore the ooRexx\n\n# installed package.  It will not work.\n",
        "Line" : 346,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Apparently, find_path requires native path on Windows.\n",
        "Line" : 355,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# We need to read a registry key UninstallBitness.  Treat\n\n# the key as a file name and use get_filename_component()\n\n# to get the key value.\n",
        "Line" : 366,
        "CharPositionInLine" : 12
      },
      "37" : {
        "Text" : "# OOREXX_DIR FOUND\n",
        "Line" : 388,
        "CharPositionInLine" : 24
      },
      "38" : {
        "Text" : "# OBJECT_REXX=YES specified or defaulted.\n",
        "Line" : 389,
        "CharPositionInLine" : 20
      },
      "39" : {
        "Text" : "# Windows build\n",
        "Line" : 390,
        "CharPositionInLine" : 16
      },
      "40" : {
        "Text" : "# REGINA-REXX - Include support for Regina Rexx\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# If building on Windows, locate the correct Regina Rexx directory\n\n# for the bitness of the Hercules being built and set RREXX_DIR\n\n# to that directory.  Herc22_UserlandWin.cmake will check for\n\n# the needed headers, Herc28_OptSelect will issue any error messages,\n\n# and the RREXX_DIR will be included in the build configuration.\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# The environment variable REGINA_HOME is set by the Regina Rexx binary\n\n# installation to the directory in which Regina Rexx was installed.\n\n# But on 64-bit systems, there are complications:\n\n# 1. Both the 32-bit and the 64-bit versions may be installed.  In this\n\n#    case, the installer is expected to change REGINA_HOME (and the\n\n#    system PATH) to point to the bitness to be used.\n\n# 2. The bitness of Regina Rexx must match the bitness of Hercules.\n\n# So we cannot trust REGINA_HOME in the hands of the casual Windows\n\n# builder.\n",
        "Line" : 407,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# This boils down to if we are building a 32-bit version of Hercules\n\n# on a 64-bit system, we must look in a different place for a Regina\n\n# Rexx of the correct bitness.  If we have a Program Files (x86)\n\n# directory, then we are building on a 64-bit host.\n",
        "Line" : 417,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# And when running a 32-bit Hercules with Regina Rexx from the build\n\n# directory, we will need to see if Windows automatically loads the\n\n# 32-bit Rexx DLL from Program Files (x86).\n",
        "Line" : 422,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Apparently, find_path requires native path on Windows.\n",
        "Line" : 440,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# REGINA-REXX = \"YES\" specified or defaulted\n",
        "Line" : 453,
        "CharPositionInLine" : 22
      },
      "47" : {
        "Text" : "# Windows build\n",
        "Line" : 454,
        "CharPositionInLine" : 14
      },
      "48" : {
        "Text" : "# SETUID-HERCIFC may be YES, NO, or a group name.  We must take on faith\n\n# that the target system will have the group name specified.  From a\n\n# syntax perspective, anything goes here.  We call the Yes/No function\n\n# to canonicalize Y/y/YES/Yes/yes into YES/NO etc for later testing.\n\n# Note that the Yes/No function *does not* change the value if it not a\n\n# synonym for Yes, No, or Target.\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# WINTARGET -  Windows version to be targeted for this build.\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# When building for Windows, ensure that the correct Windows API version\n\n# is used.  The default is the API version of the host system.  While we\n\n# are here, ensure the debug library gets a different name and a exports\n\n# file is created for later creation of the import library.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# if( WIN32 )\n",
        "Line" : 493,
        "CharPositionInLine" : 15
      },
      "52" : {
        "Text" : "# Zlib cannot be SYSTEM if the build target is not Windows.  If Zlib\n\n# is SYSTEM, then Zlib must be installed on the target system and\n\n# can be found by find_package( Zlib MODULE ).\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Herc28 will import any target if BZIP2_DIR has been set correctly.\n\n# Herc41_ExtPackageBuild.cmake will decide whether we build Zlib or\n\n# build an import target from information returned by find_package( )\n\n# based on the setting of BZIP2 and comparng the versions of the\n\n# target system's Zlib versus the Zlib repository in the Hercules-390\n\n# project.\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#  ZLIB is blank, YES, HERCULES, or SYSTEM.  If this is a\n\n#  non-Windows target, see if\n\n#  Zlib headers and library are installed in the system directories.\n",
        "Line" : 509,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Use of the Zlib library installed on the system is a\n\n# possibility.  See what version if any is installed.\n",
        "Line" : 514,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# SYSTEM not valid for Windows targets\n",
        "Line" : 520,
        "CharPositionInLine" : 22
      },
      "57" : {
        "Text" : "# No Zlib lib/headers installed\n",
        "Line" : 522,
        "CharPositionInLine" : 35
      },
      "58" : {
        "Text" : "# Herc41_ExtPackageBuild.cmake will create the import target\n\n# using the information returned by find_package(ZLIB MODULE ).\n",
        "Line" : 525,
        "CharPositionInLine" : 8
      },
      "59" : {
        "Text" : "# Herc28_OptSelect.cmake will decide whether to use the system-\n\n# installed Zlib based on its existence and version, and whether\n\n# ZLIB_DIR points us at a specific build or install directory.\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Edit directory options.  All directory options are edited in this\n\n# section because the logic for each is very similar.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Path name editing for HQA_DIR is relatively simple: if a path is\n\n# specified, the path must exist.  A null path means build scenario\n\n# selection via a macro contained in hqa.h will not be supported.  Note\n\n# that it is not a requirement to have hqa.h present in the specified\n\n# HQA_DIR.\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# HQA_DIR may be specified on the CMake command line (-DHQA_DIR=\"xxx\")\n\n# or via a system environment variable.\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Convert BZIP2_DIR to an absolute directory name and make sure it\n\n# contains a target import script in the bzip2-targets subdirectory.\n\n# The target import script deals with the specifics of the package\n\n# directory structure.  Herc28_OptSelect.cmake will import the bzip2\n\n# target.  If the builder did not specify BZIP2_DIR, then\n\n# Herc41_ExtPackageBuld.cmake will decide what should be done (use a\n\n# BZip2 package on the target or build one from the Hercules project).\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# If the builder specified both BZIP2=SYSTEM and BZIP2_DIR=<something>,\n\n# then BZIP2_DIR will be edited for validity.  If valid, BZIP2=SYSTEM\n\n# takes precedence.  A warning message will be issued and BZIP2_DIR\n\n# will be ignored.\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Convert PCRE_DIR to an absolute directory name and make sure it\n\n# contains a target import script in the pcre-targets subdirectory.\n\n# The target import script deals with the specifics of the package\n\n# directory structure.  Herc28_OptSelect.cmake will import the pcre\n\n# target.  If the builder did not specify PCRE_DIR, then\n\n# Herc41_ExtPackageBuld.cmake will decide what should be done (use a\n\n# BZip2 package on the target or build one from the Hercules project).\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# If the builder specified both PCRE=SYSTEM and PCRE_DIR=<something>,\n\n# then PCRE_DIR will be edited for validity.  If valid, PCRE=SYSTEM\n\n# takes precedence.  A warning message will be issued and PCRE_DIR\n\n# will be ignored.\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Convert S3FH_DIR to an absolute directory name and make sure it\n\n# contains a target import script in the s3fh-targets subdirectory.\n\n# The target import script deals with the specifics of the package\n\n# directory structure.  Herc28_OptSelect.cmake will import the SoftFloat\n\n# target.  If the builder did not specify S3FH_DIR, SoftFloat-3a will\n\n# be built by Herc41_ExtPackageBuild.cmake.\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Convert ZLIB_DIR to an absolute directory name and make sure it\n\n# contains a target import script in the zlib-targets subdirectory.\n\n# The target import script deals with the specifics of the package\n\n# directory structure.  Herc28_OptSelect.cmake will import the Zlib\n\n# target.  If the builder did not specify ZLIB_DIR, then\n\n# Herc41_ExtPackageBuld.cmake will decide what should be done (use a\n\n# Zlib package on the target or build one from the Hercules project).\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# If the builder specified both ZLIB=SYSTEM and ZLIB_DIR=<something>,\n\n# then ZLIB_DIR will be edited for validity.  If valid, ZLIB=SYSTEM\n\n# takes precedence.  A warning message will be issued and ZLIB_DIR\n\n# will be ignored.\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 70
    },
    "CMake/Herc20_TargetEnv.cmake" : {
      "ObjectId" : "f27897dcfdebe0358b1f4f871dc5ef363da7a3fd",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc20_Target.cmake - Analyze target architecture and host for Hercules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nThis script sets values for the build that are determined by the\nhardware architecture or target operating system.  This includes the\nvarious sizeof_* macros.\n\nTarget OS decisions are made here because there are so few of them.\n\nSIZEOF_INT   used to set width of effective address 32/64 bits in feature.h\nSIZEOF_LONG  Used to determine how much to print when printing longs, also\n                  as proxy for 32/64 machines in vstore.h.  Although that\n                  choice is neutered by force of OPTION_STRICT_ALIGNMENT,\n                  although the neutering is neutered by the typo in the\n                  spelling of OPTION_STRICT_ALLIGNMENT [sic].\nSIZEOF_OFF_T      Required for large file support.\nSIZEOF_SIZE_T     used as a proxy to determine 32/64 bit system.  Also required\n                  for large file support.\nWORDS_BIGENDIAN   undefined means little-endian, but we should address the matter\n                  explicitly.\nWINDOWS_BUILD     Building on Windows.  Windows is different enough from\n                  UNIX-like systems that it gets its own variable.\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The big one comes first: is the target hardware bigendian or not\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test for a Windows build.  Defining WINDOWS_BUILD does a few things in\n\n# config.h for compatibility with Hercules, which currently assumes all\n\n# Windows builds have no config.h\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Size of int.  This is used to determine for some architectures the\n\n# word defined by VADR_L.  Why this is important is not clear on a\n\n# first read of the code, but stuff does not work if it is wrong.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Size of size_t.  Used as a proxy for determining whether the target hardware\n\n# is 64-bits when determining the maximum number of CPUs that can be generated.\n\n# Used in tape support for maximum tape size.  Also used when determining the\n\n# maximum disk size that can be reported.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Size of long.  This is used to determine print format sizes and\n\n# for a part of large filesystem support.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Size of int *.  This macro is used frequently in the 3705 device emulation\n\n# code and to determine how large an integer pointer is when a pointer needs\n\n# to be printf'd.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The size of off_t determines in part whether the build will support\n\n# large files on non-AIX systems.  AIX always requires LFS support\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the host does not natively support large files and is an open\n\n# source system, see if it advertises the POSIX macros that indicate the\n\n# availability of large file support.  CMake variables HAVE_DECL_...\n\n# will be set for later testing in Herc28_OptSelect.cmake.  Find the\n\n# discussion of open system support for LFS in Herc28_OptSelect.cmake\n\n# under the heading of Option LARGEFILE.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Hercules-supported Windows versions always support large files.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Build hercifc only if the target is BSD, Linux, or Apple-Darwin\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#   We do not build hercifc for AIX, only Linux & BSD\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "CMake/Herc22_Userland.cmake" : {
      "ObjectId" : "d841487c196e76c94e7e7286c4ffc91c5c352a31",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc22_Userland.cmake - perform Userland tests to build Hercules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nThis file checks for all required and optional target system components\nused when building Hercules.  If any required component is missing,\nthe build cannot proceed.  If an optional component is missang and is\nspecifically requested in a build option, say Regina Rexx, the build\ncannot proceed.\n\nThe tests are not as simple as yes-no, though.  If a preferred header\nor function is not available, a Hercules-internal substitute might do.\nThe logic to trigger substitution through preprocessor macros is here;\nHercules code must adapt to the missing function/header by testing\npreprocessor variables.\n\nIf an optional component is missing from the target system and is\nnot specifically requested by a build option, the capability enabled\nby the component is not included in Hercules.\n\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Apple macOS is and is not UNIX-like.  More or less a POSIX userland,\n\n# but a different ABI, a different executable/library format, and some\n\n# APIs not available on POSIX.  Definitely not GNU/Linux.  Hercules\n\n# needs only a few tests, and we do them here because the rest of the\n\n# UNIX-like tests are appropriate for Apple macOS.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Header mach-o/dyld.h defines the function call to determine whether\n\n# _NS_\n\n# to get the executable path name.  Hercules can run without the\n\n# system call.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# CMake does not seem to like hyphens in #cmakedefine statements.\n\n# So we need to define a more suitable macro for config.h.  Hence\n\n# the if/set following the test.  Besides, if the header is absent,\n\n# the API function it exposes will be absent too.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# definitions in assert.h are used only when compiled under Microsoft,\n\n# in only one module, hatomic.h, and it is assumed to exist under\n\n# Microsoft.  So there is no need (for the moment) to test for it here.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Function strsignal helpful but not required.  If it does not exist, we\n\n# need signal.h so that Hercules can compile its own version in strsignal.c.\n\n# But because signal.h is required by dbgtrace.h and the build fails without\n\n# it, strsignal is really optional for the build.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Needed by a \"BREAK_INTO_DEBUGGER\" macro, defined in dbgtrace.h and\n\n# referenced in hthreads.c and ptrace.c.  This is worth a further look.\n\n# And if the macro is changed, the test above for strsignal needs\n\n# to be augmented such that if strsignal does not exist, signal.h\n\n# remains mandatory.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# See if we have the declarations and structure members needed to\n\n# create a sigabend handler.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# sys/sysctl requires a type definition available in a number of headers.\n\n# We pick stddef, and we know it exists.  It is used only on Apple and\n\n# FreeBSD, and is not required on other systems.  For the moment, we shall\n\n# mark it optional.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# sys/sockio.h must be explicitly included on Solaris; it is included by\n\n# ioctl.h on BSD systems.  Do the test here so the config.h macro can be\n\n# defined.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check for public header variables defined by libtool use in the\n\n# autotools build.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check networking public headers, which are *required* to build Hercules.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# On OS X 10.3, sys/types.h apparently must be included before sys/socket.h\n\n#\n\n# On other Darwin and BSD-based systems except FreeBSD 11 (and 12?),\n\n# sys/socket.h must be included before net/if.h, net/route.h, and\n\n# netinet/in.h.  It is not clear if sys/types.h and/or sys/socket.h are\n\n# needed for net/tcp.h or netinet/tcp.h.\n\n#\n\n# So for the sake of simplicity and robustness, all network headers are\n\n# tested by including sys/types.h and, if present on the system,\n\n# sys/socket.h before the header under test.\n\n#\n\n# It is also not clear if Hercules needs net/route.h\n\n#\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# It is not clear whether Hercules needs route.h.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# tcp.h might be found in either net or netinet.  If it's not in netinet,\n\n# we will test net and let that issue the failure message.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Header linux/if_tun.h is needed (based on tests below) only for hercifc.\n\n# So Hercules will build without it, but hercifc will not on Linux systems.\n\n# On BSD systems, again based on configure.ac, linux/if_tun.h is not\n\n# required (hint: not many linux directories on a BSD system), and\n\n# net/if.h (tested above and required) will be enough.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Now that we have a complete set of headers for networking, check for\n\n# networking structures and members.  Note that the variable prereq_Headers\n\n# used above for public header tests is also used here.  If the header\n\n# is not required and does not exist, then any identifiers in the header\n\n# do not exist...and should not be required either.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Hercules htypes.h will typedef in_addr_t to unsigned int if it is not\n\n# defined, so if missing, Hercules can build.  It should be defined # in\n\n# netinet/in.h, a required header.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# socklen_t should be defined in sys/socket.h, one of the headers in\n\n# ${prereq_Headers}.  If sys/socket.h is missing, and therefore socklen_t\n\n# is missing, Hercules will define socklen_t as unsigned int.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# In configure.ac, much work is done testing for IPV6 headers.  Sadly,\n\n# this work is wasted.  Only hifr.h includes IPV6 headers, and here's\n\n# a summary:\n\n#   linux/ipv6.h        - included only if it exists and if IPV6 and\n\n#                         HAVE_IN6_IFREQ_IFR6_ADDR are defined.\n\n#   netinet6/in6_var.h  - included only if it exists and if IPV6 and\n\n#                         HAVE_IN6_IFREQ_IFR6_ADDR are defined.\n\n# Unfortunately for all of the above, HAVE_IN6_IFREQ_IFR6_ADDR is\n\n# *NEVER* defined.  On Linux systems, HAVE_STRUCT_IN6_IFREQ_IFR6_ADDR\n\n# is defined (note the addition of \"STRUCT\" in the macro).  On BSD\n\n# systems (including Apple??), HAVE_STRUCT_IN6_IFREQ_IFR_IFRU_IFRU_FLAGS\n\n# is defined.\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# And nowhere in Hercules is there an attempt to deal with the naming\n\n# differences (IFR6 versus IFRU) between Linux and BSD IPV6\n\n# implementations.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If HAVE_IN6_IFREQ_IFR6_ADDR is not defined, then hifr.h defines its\n\n# own IPV6 networking structures (not many are needed) and uses the\n\n# Linux convention to do so.   Because Hercules works without the IPV6\n\n# headers, we will not code any of things in configure.ac into CMake.\n\n# \"Fixing\" this would likely mean breaking stuff that now works.  This\n\n# should be fixed, but not here and not now; I am thinking CMake build\n\n# for Hercules V3 or later.  See Hercules issue #223.  See configure.ac\n\n# line 724 and following (as of commit 1428eee).\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# (https://github.com/hercules-390/hyperion/blob/1428eee3844f1445a6ed80b10da4d81bbc7f4840/configure.ac)\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Test for TCP/IP keepalive support.  Either SO_KEEPALIVE or TCP_KEEPALIVE\n\n# indicate basic support.  If any of TCP_KEEPIDLE, TCP_KEEPINTVL, or\n\n# TCP_KEEPCNT are present, then partial keepalive is supported by the\n\n# target, and if all three present, the the target supports full keepalive.\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# The following tests still make use of ${prereq_Headers} in addition to\n\n# those specifically required for each macro.  The TCP_KEEP* macros are\n\n# defined in tcp.h, a required header, whereever that happens to be.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# If any of the three, partial support\n",
        "Line" : 287,
        "CharPositionInLine" : 44
      },
      "28" : {
        "Text" : "# All of the three, full support\n",
        "Line" : 290,
        "CharPositionInLine" : 44
      },
      "29" : {
        "Text" : "# Sundry networking macros.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# The following IOCTL values SIOC* are used for CTC support only.\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Linux systems define IOCTL values as constants in linux/sockios.h\n\n# (note the plural), which is included by sys/ioctl.h.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# BSD systems define IOCTL values as constants in sys/sockio.h (note the\n\n# singular), which is included by sys/ioctl.h.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Solaris systems also define IOCTL values as constants in sys/sockio.h\n\n# (singular, just like BSD), and it must be included explicitly.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# For BSD systems, the Hercules autotools tests never detected the SIOC*\n\n# macros and so the corresponding functionality was never built in the\n\n# Hercules.  And as a result, functionality enabled by these macros has\n\n# not received much use on BSD.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# IOCTL values are used in hostopts.h to get and/or set interface options\n\n# in the CTC modules ctc_ptp.c, hercifc.c, and tuntap.c.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# So we shall check for the existence of linux/sockios.h as a tell-tale\n\n# for a Linux-based SIOC* implementation and sys/sockio.h as a tell-tale\n\n# for a BSD or Solaris-based SIOC* implementation.  If neither exist,\n\n# then none of the values will be defined.  If sys/sockio.h exists, we\n\n# will include it in the build.  This allows builds on Solaris without\n\n# having to test for the Solaris target.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# For compatibilty with the autotools build, if this is a BSD-style\n\n# SIOC* macro definition set, the tests are skipped and config.h will\n\n# reflect an absence of this capability.  Someone with CTC experience\n\n# (me perhaps, once I buy a modified Delorean?) can test the BSD stuff.\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# On Windows, fthreads may be used in lieu of pthreads.  So pthread.h is\n\n# potentially optional on Windows but not otherwise.  If pthreads is to be\n\n# used on Windows and is allowed, we will issue any message about a missing\n\n# pthread.h there.  Otherwise, its absence fails the build.\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# At least one of the following integer type headers must exist.\n\n# Hercules file hstdint.h tests first for stdint.h, then inttypes.h,\n\n# then unistd.h.  Because inttypes.h normally includes stdint.h, one\n\n# would think that the test order should be inttypes.h, stdint.h, and\n\n# then unistd.h.\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Especially because unistd.h is included unconditionally for all\n\n# non-Windows builds in hstdinc.h.\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Required, tested earlier.\n",
        "Line" : 399,
        "CharPositionInLine" : 32
      },
      "42" : {
        "Text" : "# Test for stdbool.h.  Its presence or absence needs to be recorded\n\n# for correct expansion of the SoftFloat-3a headers included in ieee.c.\n\n# Hercules will build without stdbool.h, but Hercules will not work\n\n# when it is built without knowing about stdbool.h and SoftFloat-3a\n\n# is built with it.\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# check for functions and libraries required to build Hercules.  CMake\n\n# caching complicates this in two ways:\n\n# - If a function is not included in the c runtime library, the cached\n\n#   result must be removed before testing another library.  Otherwise\n\n#   CMake uses the cached result instead of testing the second library.\n\n# - If a function is found in another library, we must cache the name of\n\n#   the other library, lest on a subsequent build the cached \"function\n\n#   present result be seen without knowing that another library is needed\n\n#   to generate that result.\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# The following functions should be in the basic c Runtime library.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# The following function is not used in Hercules.\n\n# herc_Check_Function_Exists( sys_siglist FAIL )\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# The following functions are used in Hercules without guarding.  When\n\n# built by configure.ac, libtool autotools code tested for these functions.\n\n# We test for them here just for completeness.  Because there is no\n\n# guarding, there is no need for config.h macros.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# dlerror is part of libdl on some systems, notably Linux, and part of\n\n# the standard C runtime on others, notably BSD.  CMake handles the\n\n# different locations of libdl, and we will use that to test for dlerror.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Pipe is required for non-Windows builds, and not required on Windows.\n\n# On Windows, socketpair() is used in its place.  Hercules does not\n\n# check HAVE_PIPE; it is assumed to exist.  So the build fails without it.\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Function fseeko() and ftello() use off_t for the file offset or returned\n\n# value respectively, instead of the long type used in fseek/ftell.  It\n\n# would surprise me to find a system with large file support, without\n\n# fseeko, and with long defined as less than sizeof(off_t) bytes.  But\n\n# one never knows.\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# On many systems, inet_aton is found in the basic c runtime.  On others\n\n# (e.g., SunOS, Solaris) it is included in libnsl.  For Windows, it does\n\n# not exist...but on Windows the lack is OK because w23util.c includes a\n\n# substitute inet_aton.  However, w32util.c does not provide a copy of\n\n# inet_ntoa, which is used far more often in Hercules and for which there\n\n# is no guarding in the code.  So the following is more about seeing\n\n# whether libnsl is needed.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# On some (?) systems, gethostbyname is found in the basic c runtime.\n\n# On others (e.g., SunOS, Solaris) it is included in libnsl.  For Windows,\n\n# it does not exist...but on Windows the lack is OK because w23util.c\n\n# includes a substitute gethostbyname.\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Noteworthy also is the fact that gethostbyname is deprecated and replaced\n\n# by getnameinfo.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# The following tests for memory allocation functions needs to be reviewed\n\n# along with the hmalloc.h file in Hercules.  The current configure.ac\n\n# code sets the variables but never establishes any of them as \"must-have.\"\n\n# So we shall do the same for the moment.  Given that valloc has been\n\n# deprecated for eons of computer years and pvalloc is a GNU extension,\n\n# this is worth persuing.  It would be interesting to see what would happen\n\n# if none of the functions were defined.\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# The following function is only needed on Windows\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Prior to version 2.17 of glibc, clock_gettime() was included in the rt\n\n# library.  See https://sourceware.org/ml/libc-announce/2012/msg00001.html\n\n# for the December 2012 announcement of glibc 2.17; the second to the\n\n# last bullet documents the move.  So if glibc is older than 2.17, we\n\n# need to include rt.  Note that rather than testing version numbers,\n\n# we will just test for clock_gettime(), first without rt, then with.\n\n# (The legacy build configure.ac always included rt if it existed on the\n\n# target system.)\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# The function sched_yield is required; its absence will fail the build.\n\n# If not part of the basic c runtime, it can be found in librt, the\n\n# POSIX Real-time Extensions library (Solaris, SunOS).  And if librt\n\n# contains sched_yield, it may also contain fdatasync.  If the fdatasync\n\n# function is missing, Hercules will use fsync instead.\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# For OS X 10.6 autoconf defines HAVE_FDATASYNC even though there is\n\n# no function prototype declared for fdatasync() and unistd.h contains\n\n# define _POSIX_SYNCHRONIZED_IO (-1) which indicates that fdatasync is\n\n# not supported. So to decide whether fdatasync really can be used, we\n\n# create a new symbol HAVE_FDATASYNC_SUPPORTED which is defined only if\n\n# HAVE_FDATASYNC is defined and _POSIX_SYNCHRONIZED_IO is not negative.\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# A better test for the above is to just use check_prototype_definition.\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# And this could be an error in autoconf, not a problem with OS X 10.6\n\n# header files.  Lacking an OS X 10.6 system, there is no way to tell.\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# The functions pow() and floor() are either in the basic c runtime library\n\n# or in the libm library.  If a cached result used the math library, be sure\n\n# it is included on the retest.\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# If none of the following five functions are defined, then the build needs\n\n# NO_SETUID defined.  If the first two functions (setresuid, getresuid) are\n\n# are avaiable, that's enough.  If those two are missing, then the next\n\n# three (setreuid, geteuid, getuid) are needed.  And if they are missing,\n\n# Setuid suppport is disabled in Hercules, but the build continues.\n\n# (* so this should really be in CMakeHercCheckOptional.cmake )\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# In Linux and BSD, connect() is defined in libc and no additional link\n\n# libraries are needed.  In Solaris, the socket library is needed.\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# In Linux and BSD, socketpair() is defined in libc and no additional\n\n# link libraries are needed.  In Solaris, the socket library is needed.\n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# See if optreset is required to use getopt.  Optreset is normally\n\n# needed for BSD systems and not for Linux systems.  If required, optreset\n\n# is declared extern int in unistd.h.\n",
        "Line" : 698,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Any of the following four types, if not defined, are typedef'd in htypes.h\n\n# to unsigned versions of the underlying type.  They can be found on BSD\n\n# systems in sys/types.h and on Windows systems in winsock.h.  So we need\n\n# to see if they exist so that htypes.h does not try to define them if\n\n# they do exist.  They appear to be synonyms for uint8_t etc in C99, so\n\n# that might be a better long-term solution to this.\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# The following test is used as a telltale for systems that use u_intn_t\n\n# instead of uintn_t.  The Hercules header htypes.h will define integer\n\n# based on the above four tests and the next test.  Note that in\n\n# configure.ac, if the following type exists, then u_int is presumed to\n\n# exist as well.  I suspect this is an error in configure.ac.\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# The following functions exist in some distributions and not in others.\n\n# If the target system does not have them, Hercules includes its own\n\n# copy of the functions.\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# found in Linux\n\n# found in BSD\n\n# found in BSD\n",
        "Line" : 741,
        "CharPositionInLine" : 43
      },
      "69" : {
        "Text" : "# If we have the header byteswap.h, then we will use it. If not,\n\n# hbyteswp.h will be included instead.  And if we are able to determine\n\n# that the target is 32-bit or 64-bit Intel, we will use asm to perform\n\n# two-byte and four-byte swaps (on MSVC this is done using intrinsics;\n\n# see hbyteswp.h for details.\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Unfortunately, CMake does not provide and easy-to-use primitive for\n\n# determining the target platform.  So for the moment, if byteswap.h\n\n# is not provided by the host system, we shall disable assembler byte\n\n# swapping in hbyteswp.h.\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Header malloc.h has been deprecated, and its content moved to stdlib.h.\n\n# However, some Linux systems in their infinite wisdom (sorry for being\n\n# snarky) retain the header and use it to define extensions to the scope\n\n# of memory management functions.  Other distros, notably FreeBSD,\n\n# include an #error directive telling you to include stdlib.h instead.\n\n# I guess that moves from deprecated to being spit upon.   So...The BSD\n\n# approach causes the test to fail, which is fine.  If a Linux system\n\n# has malloc.h, then we will include it in Hercules, but I will bet that\n\n# Hercules does not use the Linux extensions.\n",
        "Line" : 767,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# termios.h, scandir, and alphasort, if avaiable, enable UNIX shell tab\n\n# key handling.  If any are missing, no tab key handling.  Old versions\n\n# of Solaris (pre 2.9, SunOS 5.9) lack these routines.  Header presence\n\n# generates code in hconsole.c to put the console in character-by-\n\n# character mode, and function presence generates code in fillfnam.c to\n\n# scan directories when the tab key is pressed.  Termios.h also enables\n\n# one-character command shortcuts on the CUI panel (after Esc).\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# And while we are at it, we test the scandir prototype to see if the\n\n# directory entry arrays passed to the filter and comparison functions\n\n# are passed as const.\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Currently, hostopts.h assumes that only Windows includes const in the\n\n# scandir function prototype.  However, FreeBSD 11 and Debian 8.6 also\n\n# include const.  (I suspect all modern BSD and Linux systems include\n\n# const in the prototype.)\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Code changes are needed in Hercules to replace the currentt target\n\n# OS-based test, so that shall happen in V3.\n",
        "Line" : 797,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Headers and declarations for real tape devices.  On some systems (BSD?)\n\n# sys/param.h must be included before sys/mount.h.  Header sys/mtio.h and\n\n# MTEWARN are used only for SCSI tape utility routines (scsiutil.c)\n",
        "Line" : 814,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Headers for shared device server routines (shared.c)\n",
        "Line" : 829,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# See if Open Object Rexx is installed.  Open Object Rexx will be\n\n# included in the Hercules build if avaiable and not excluded by user\n\n# option.  Hercules does not require Open Object Rexx to build correctly.\n\n# The HAVE_ varibles created by these tests are not used by the build and\n\n# need not be included in config.h\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# The configure.ac script tested for both public headers, so we shall too.\n",
        "Line" : 840,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# See if Regina Rexx is installed.  Apparently the header rexxsaa.h\n\n# has the potential to be installed in a \"normal\" directory or in a\n\n# regina subdirectory; one presumes the latter location simplifies\n\n# concurrent installation of Open Object Rexx and Regina Rexx.  Regina\n\n# Rexx will be included in the Hercules build if avaiable and not\n\n# excluded by user option.  Hercules does not require Regina Rexx\n\n# to build correctly.\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Check for regular expression support as indicated by regex.h.\n\n# Hercules does not require regular expression support to build.\n\n# If regular expression support is present, the Automatic Operator\n\n# functions will be included.\n",
        "Line" : 860,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# See if sys/capability.h and the corresponding library cap exist.\n\n# If they do, then Hercules can be built with support for fine-grained\n\n# capabilities.  Header prctl.h enables some additional control\n\n# over capabilities and is a libc-based wrapper for the system call of\n\n# the same name.  Both Capabilities and prctl are Linux-only\n\n# implementations of POSIX 1003.1e.\n",
        "Line" : 868,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Hercules code only checks for the headers; the functions and libraries\n\n# are assumed to exist.  And if the library does not exist, we assume\n\n# that there is no point to including the headers either, so we unset\n\n# the HAVE_SYS_CAPABILITY_H variable too.  This makes sense for FreeBSD\n\n# where the header exists but does something different from the Linux\n\n# version.\n",
        "Line" : 875,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Miscelaneous probes of the target userland\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 85
    },
    "CMake/Herc22_UserlandWin.cmake" : {
      "ObjectId" : "9c8cac62e015de4fd67a41b4426a65466a6e8d8d",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc22_Userland.cmake - perform Userland tests to build Hercules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nThis file checks the Windows SDK for this build to see that it is an SDK\nfor at least Windows XP Professional 64-bit, Windows version and mod\n5.2.  Microsoft identifies Windows Server 2003 as 5.2 as well, and that\nis fine too.  If the SDK is 5.2 or better, then Hercules will build;\nSDK version is a sufficient test.\n\nOne other probe is needed; certain combinations of SDK and Visual Studio\nmultiply define the ceil function, once in the VS intrinsics and once in\nthe math.h library.  The work-around is to #include math.h first if this\nis the case.\n\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake exposes the MSVC compiler version in MSVC_VERSION.  Easy test.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The SDK version is tested by looking at macros defined in ntverp.h.\n\n# An SDK that is at least 5.02 (Win XP Pro 64-Bit or Win2003 Server R2)\n\n# can be used to build Hercules.  For the moment, we will not target\n\n# versions of Windows older than the build system.  Although it is\n\n# not difficult to target 5.02 (Win XP Pro 64 etc) by defining macros\n\n# to specify an older target.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VER_PRODUCTMAJORVERSION VER_PRODUCTMINORVERSION\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Target Windows XP Pro 64-bit by setting  _WIN32_WINNT and WINVER to\n\n# _WIN32_WINNT_WS03 (0x0502) and setting NTDDI_VERSION to\n\n# NTDDI_WS03 (0x05020000)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test SDK level for at least 5.02\n",
        "Line" : 46,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# Test to see if math.h must be included before intrin.h\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Test SDK level for at least 5.02\n",
        "Line" : 70,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "# The following header files require windows.h to be included before the\n\n# header under test, or the compilation of the header under test will\n\n# fail.  We do not bother testing for them because all are in the SDK\n\n# appropriate to any version of Windows that is supportd.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# herc_Check_Include_Files( \"windows.h;wincon.h\"          FAIL )\n\n# herc_Check_Include_Files( \"windows.h;tlhelp32.h\"        FAIL )\n\n# herc_Check_Include_Files( \"windows.h;dbghelp.h\"         FAIL )\n\n# herc_Check_Include_Files( \"windows.h;mstcpip.h\"         FAIL )      # (need struct tcp_keepalive)\n\n# herc_Check_Include_Files( \"winsock2.h;netioapi.h\"       FAIL )      # For if_nametoindex\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# definitions in assert.h are used only when compiled under Microsoft,\n\n# in only one module, hatomic.h, and it is assumed to exist under\n\n# Microsoft.  So there is no need (for the moment) to test for it here.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# herc_Check_Include_Files( assert.h          FAIL )\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# for Windows.h, consider lean_and_mean or more granular\n\n# API exclusion to reduce build time.   See\n\n# https://msdn.microsoft.com/en-us/library/windows/desktop/aa383745(v=vs.85).aspx\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# All Hercules-supported Windows versions support IPV6.  But some of them\n\n# require specific enablement of IPV6, and many of those systems, which are\n\n# older versions of Windows, need specific programming for IPV6.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Function strsignal helpful but not required.  If it does not exist, we\n\n# need signal.h so that Hercules can compile its own version in strsignal.c.\n\n# But because signal.h is required by dbgtrace.h and the build fails without\n\n# it, strsignal is really optional for the build.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# herc_Check_Function_Exists( strsignal OK )\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Needed by a \"BREAK_INTO_DEBUGGER\" macro, defined in dbgtrace.h and\n\n# referenced in hthreads.c and ptrace.c.  This is worth a further look.\n\n# And if the macro is changed, the test above for strsignal needs\n\n# to be augmented such that if strsignal does not exist, signal.h\n\n# remains mandatory.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# herc_Check_Include_Files( signal.h FAIL )\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Windows (any supported version) supports Basic and Partial keepalive.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Test for stdbool.h.  Its presence or absence needs to be recorded\n\n# for correct expansion of the SoftFloat-3a headers included in ieee.c.\n\n# Hercules will build without stdbool.h, but Hercules will not work\n\n# when it is built without knowing about stdbool.h and SoftFloat-3a\n\n# is built with it.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# See if Open Object Rexx is installed correctly.  Herc12_OptEdit.cmake\n\n# set OOREXX_DIR to the correct installation directory for the bitness\n\n# of the Hercules being built.  See if the two ooRexx headers are in the\n\n# api directory.  If OOREXX_DIR is not set, then either there is\n\n# no Open Object Rexx package installed, or the builder did not wish to\n\n# include Open Object Rexx support.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# See if Regina Rexx is installed correctly.  Herc12_OptEdit.cmake\n\n# set RREXX_DIR to the correct installation directory for the bitness\n\n# of the Hercules being built.  See if the rexxsaa.h header is in the\n\n# include directory.  If RREXX_DIR is not set, then either there is\n\n# no Regina Rexx package installed, or the builder did not wish to\n\n# include Regina Rexx support.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# check for required/desirable macros.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The following is only required for Windows builds, w32util.h,\n\n# and if it does not exist, it is typedef'd to long.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#### AC_CHECK_TYPES( useconds_t, [hc_cv_have_useconds_t=yes], [hc_cv_have_useconds_t=no] )  (in types.h)\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# The following is only required for Windows builds, hscutl2.h,\n\n# and if it does not exist, it is typedef'd to unsigned long.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#### AC_CHECK_TYPES( id_t,       [hc_cv_have_id_t=yes],       [hc_cv_have_id_t=no]       )  (in sys/types.h)\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# The following test for which header includes a timespec structure is\n\n# used only for Windows builds that use fthreads (i.e., most Windows\n\n# builds.  It is not required for open source builds.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#### AC_CHECK_MEMBERS( [struct timespec.tv_nsec],\n\n####     [\n\n####         hc_cv_timespec_in_sys_types_h=yes\n\n####         hc_cv_timespec_in_time_h=no\n\n####     ],\n\n####     [\n\n####         AC_CHECK_MEMBERS( [struct timespec.tv_nsec],\n\n####             [\n\n####                 hc_cv_timespec_in_sys_types_h=no\n\n####                 hc_cv_timespec_in_time_h=yes\n\n####             ],\n\n####             [\n\n####                 hc_cv_timespec_in_sys_types_h=no\n\n####                 hc_cv_timespec_in_time_h=no\n\n####             ],\n\n####             [#include <time.h>]\n\n####         )\n\n####     ],\n\n####     [#include <sys/types.h>]\n\n#### )\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "CMake/Herc25_CompilerMSVC.cmake" : {
      "ObjectId" : "cc933f76e22ab3ca6dd65cac08ee868846a48753",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc25_Optgcclike.cmake - Analyze compiler capabilities for gcc-like compilers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nFunction/Operation\n- Probes the functionality of gcc-like compilers (gcc, clang, Intel) on\n  the target system to set preprocessor macros needed by Hercules.\n- Missing but required capabilities result in an error message being addded\n  to the herc_SaveError message array with the appropriate increment of\n  the herc_Error variable.  This has the effect of terminating the build.\n- Predefined types are also tested in this module.\n\nInput Parameters\n- None.  The caller has determined that a gcc-like compiler is in use for\n  this build.\n\nOutput\n- The following CMake variables are set by this file.  Those marked with an\n  asterisk (*) are intended to be included in config.h, and the balance are\n  for downstream use by the Hercules CMake build.\n\nNotes\n- While clang seems to be free of much of the special-case nonsense associated\n  with gcc, there are still variables to be set to expose compiler capabilities\n  to Hercules.\n- clang 3.8 and 4.0 both report an equivalent gcc version of 4.2.1, but this\n  does not mean that clang behaves like gcc 4.2.1.   So we test what needs to\n  be tested without thinking about the reported gcc version.\n\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Test for the pre-defined types required by Hercules.  There are not\n\n# that many.  Pre-defined types are distinct from types defined by\n\n# standard headers.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test for atomic intrinsics.  There is some question in my mind whether\n\n# this is a userland test or a compiler test.  But we will do it here\n\n# for the nonce, and in part because different compilers implement atomic\n\n# intrisics in different ways.  Start by testing for stdatomic.h.  If this\n\n# missing there are no atomics.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# In order of preference, Hercules will use atomic intrinsics as follows:\n\n# - C11 atomics\n\n# - __atomic built-in functions\n\n# - __sync build-in funcctions.\n\n# This ordering reflects the relative performance of the atomic intrinsics,\n\n# from best to worst.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only the `and`, `or`, and `xor` are needed, and only the byte/char type\n\n# is used.  The atomic ops are used only for the NI(Y), OI(Y), and XOI(Y)\n\n# instructions.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Other atomic instrinsics would be needed for the \"LOAD AND\" family of\n\n# instructions.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# It is interesting that the code for NI(Y), OI(Y), and XOI(Y) always use\n\n# atomic intrinsics whether or not the Interlocked-Access Facility 2 (IAF2)\n\n# is enabled or not, nor whether IAF2 is even appropriate for the architecture\n\n# mode.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If we have C11 atomic intrinsics, see if they are lock free.  Preprocessor\n\n# variables are supposed to define this, but at least one compiler (gcc 4.9.2)\n\n# sets up the strings as function calls.  So...we will run a program that\n\n# retrieves the lock free status for each atomic type and creates a .cmake\n\n# script to set the required cmake variables.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# No C11 intrinsics.  Test for the \"__atomic_*\" functions.\n\n# These are the second choice.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Change TRUE to 1 for autotools compatibility.\n",
        "Line" : 110,
        "CharPositionInLine" : 43
      },
      "12" : {
        "Text" : "# Neither C11 nor __atomic_* intrinsics.  Test for the \"sync\" functions.\n\n# These are the third choice.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Change TRUE to 1 for autotools compatibility.\n",
        "Line" : 126,
        "CharPositionInLine" : 39
      },
      "14" : {
        "Text" : "# All versions of Windows supported by Hercules support C99 flexible arrays.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# for autotools compatibility\n",
        "Line" : 133,
        "CharPositionInLine" : 32
      },
      "16" : {
        "Text" : "# Test if the compiler pads structures to other than a byte boundary.\n\n# Hercules requires a byte boundary.  GCC on ARM allows specification\n\n# of byte alignment in compiler -m options if the toolchain pads\n\n# structures to other than a byte boundary.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# On other architectures, any padding found fails the build.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Test for compiler support of packed structures.  Clang uses gcc-style\n\n# packing directives, so this is a verification only.  We need not get\n\n# crazy here, as we might have to with other compilers on non-x86 targets.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Packed structure support is required to build Hercules.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Windows has printf/scanf format checking as of Visual Studio 2015.  But\n\n# IDE version, if even used, is not important; it's the C compiler version\n\n# that is.  VS015 corresponds to 19.00.  This will work for IDE, Build Tools,\n\n# and maybe nmake on VS2008.  Note also that MSVC does _not_ use __attribute__\n\n# ((printef)) to enable format checking.  Rather, specific warnings are used,\n\n# c4473-c4478 and c4773-c4778.  These warnings range from W1 to W4; see\n\n# https://blogs.msdn.microsoft.com/vcblog/2015/06/22/format-specifiers-checking/\n\n# for details.  So nothing needs to be done; the warnings are issued or\n\n# not depending on compiler capabilities.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Windows always passes the first few parameters in registers.  There is\n\n# no need to test for it.  HAVE_ATTR_REGPARM can remain unset.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Windows has its own diagnostic pragma, and the gcc form is never used\n\n# when building under MSVC.  So there is no need to test, and no need to\n\n# set HAVE_GCC_DIAG_PRAGMA.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# HAVE_GCC_DIAG_PUSHPOP is tested only once, in ccnowarn.h, and only if\n\n# HAVE_GCC_DIAG_PRAGMA is defined.  So on MSVC, there is no need to test,\n\n# nor no need to set.  Likewise for HAVE_GCC_SET_UNUSED_WARNING.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# MSVC does not check for strict aliasing, so there is no need to test\n\n# for it, and no option to disable it either.  \n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "CMake/Herc25_Compilergcclike.cmake" : {
      "ObjectId" : "1cbb31cac2edd60f08ecc840445e4dc8f4524421",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc25_Optgcclike.cmake - Analyze compiler capabilities for gcc-like compilers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nFunction/Operation\n- Probes the functionality of gcc-like compilers (gcc, clang, Intel) on\n  the target system to set preprocessor macros needed by Hercules.\n- Missing but required capabilities result in an error message being addded\n  to the herc_SaveError message array with the appropriate increment of\n  the herc_Error variable.  This has the effect of terminating the build.\n- Predefined types are also tested in this module.\n\nInput Parameters\n- None.  The caller has determined that a gcc-like compiler is in use for\n  this build.\n\nOutput\n- The following CMake variables are set by this file.  Those marked with an\n  asterisk (*) are intended to be included in config.h, and the balance are\n  for downstream use by the Hercules CMake build.\n\nNotes\n- While clang seems to be free of much of the special-case nonsense associated\n  with gcc, there are still variables to be set to expose compiler capabilities\n  to Hercules.\n- clang 3.8 and 4.0 both report an equivalent gcc version of 4.2.1, but this\n  does not mean that clang behaves like gcc 4.2.1.   So we test what needs to\n  be tested without thinking about the reported gcc version.\n\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Test for the pre-defined types required by Hercules.  There are not\n\n# that many.  Pre-defined types are distinct from types defined by\n\n# standard headers.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test for atomic intrinsics.  There is some question in my mind whether\n\n# this is a userland test or a compiler test.  But we will do it here\n\n# for the nonce, and in part because different compilers implement atomic\n\n# intrisics in different ways.  Start by testing for stdatomic.h.  If this\n\n# missing there are no atomics.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# In order of preference, Hercules will use atomic intrinsics as follows:\n\n# - C11 atomics\n\n# - __atomic built-in functions\n\n# - __sync build-in funcctions.\n\n# This ordering reflects the relative performance of the atomic intrinsics,\n\n# from best to worst.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only the `and`, `or`, and `xor` are needed, and only the byte/char type\n\n# is used.  The atomic ops are used only for the NI(Y), OI(Y), and XOI(Y)\n\n# instructions.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Other atomic instrinsics would be needed for the \"LOAD AND\" family of\n\n# instructions.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# It is interesting that the code for NI(Y), OI(Y), and XOI(Y) always use\n\n# atomic intrinsics whether or not the Interlocked-Access Facility 2 (IAF2)\n\n# is enabled or not, nor whether IAF2 is even appropriate for the architecture\n\n# mode.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If we have C11 atomic intrinsics, see if they are lock free.  Preprocessor\n\n# variables are supposed to define this, but at least one compiler (gcc 4.9.2)\n\n# sets up the strings as function calls.  So...we will run a program that\n\n# retrieves the lock free status for each atomic type and creates a .cmake\n\n# script to set the required cmake variables.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# No C11 intrinsics.  Test for the \"__atomic_*\" functions.\n\n# These are the second choice.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Change TRUE to 1 for autotools compatibility.\n",
        "Line" : 110,
        "CharPositionInLine" : 43
      },
      "12" : {
        "Text" : "# Neither C11 nor __atomic_* intrinsics.  Test for the \"sync\" functions.\n\n# These are the third choice.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Change TRUE to 1 for autotools compatibility.\n",
        "Line" : 126,
        "CharPositionInLine" : 39
      },
      "14" : {
        "Text" : "# Test for support of C99 flexible arrays.  These are supported by clang\n\n# (and other compilers), but we will run the test before we set the variable.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# for autotools compatibility\n",
        "Line" : 142,
        "CharPositionInLine" : 36
      },
      "16" : {
        "Text" : "# Test if the compiler pads structures to other than a byte boundary.\n\n# Hercules requires a byte boundary.  GCC on ARM allows specification\n\n# of byte alignment in compiler -m options if the toolchain pads\n\n# structures to other than a byte boundary.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# On other architectures, any padding found fails the build.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Test for compiler support of packed structures.  Clang uses gcc-style\n\n# packing directives, so this is a verification only.  We need not get\n\n# crazy here, as we might have to with other compilers on non-x86 targets.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Packed structure support is required to build Hercules.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Test for compiler support of sundry other things that are helpful in the\n\n# Hercules build.  Absence of any of these does not impact the build apart\n\n# from reflecting presence or absence in config.h.   Because CMake always\n\n# links as part of try_compile, we need to ensure fully formed c main\n\n# programs.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Test for __attribute__ ((format(printf,x,y)))\n",
        "Line" : 182,
        "CharPositionInLine" : 38
      },
      "22" : {
        "Text" : "# The autotools build for __attribute__ ((regparm(1))) first tested if it\n\n# existed and then tested if it was broken when using regparm(3).  The\n\n# second test required program execution, complicating cross-compilation.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The regparm(3) test in configure.ac dealt with a gcc error in versions\n\n# 3.2 and 3.3 that affected Cygwin (and MinGW?) builds, and this CMake\n\n# script does not support Cygwin nor MinGW.  So we must only run  the\n\n# compile-time check to see if __attribute__ (( regparm(3) )) compiles.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Test __attribute__ (( regparm(3) ))\n",
        "Line" : 202,
        "CharPositionInLine" : 38
      },
      "25" : {
        "Text" : "# Test for gcc diagostic pragma\n",
        "Line" : 214,
        "CharPositionInLine" : 38
      },
      "26" : {
        "Text" : "# Test for gcc diagnostic push/pop pragma\n",
        "Line" : 225,
        "CharPositionInLine" : 38
      },
      "27" : {
        "Text" : "# Test for 'function defined but not used' warnings],\n",
        "Line" : 236,
        "CharPositionInLine" : 38
      },
      "28" : {
        "Text" : "# Test for variable set but not used' warnings]\n",
        "Line" : 246,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 29
    },
    "CMake/Herc28_OptSelect.cmake" : {
      "ObjectId" : "f058777a4e146139dddf2b3c0979f601a2c91286",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeHercOptSelect.cmake - Set Hercules build user options for config.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nProcess build options in the the context of:\n\n 1. Options explicitly requested by the builder on the CMake command line\n    or in the CMake GUI/ccmake.\n 2. Build defaults in the absence of an option selection or exclusion by\n    the builder.\n 3. Capabilities of the target architecture, Operating System, and userland\n    including packages installed on the target system, such as REXX.\n\nIf a conflict exists between an explicitly requested build option and the\ncapabilities of the target system, an error message is issued and the\nbuild is terminated.\n\nIn the absence of an explicit exclusion, such as -DIPV6=NO, if the target\nsystem supports inclusion of a given option, it is included.  The exceptions\nare:\n * The getoptwrapper kludge is only included when requested.  If not\n   requested, it is excluded.\n * The build includes fthreads only for Windows builds.  It is not included\n   by default for non-Windows builds, and if explicitly requested for a\n   non-Windows build, an error message is generated and the build is\n   terminated.\n * All exceptions are documented in CMakeHercOptDef.cmake\n\nNotes\n- See the following thread for a discussion of the issues around use of\n  file( DOWNLOAD ... ), which is used  here to determine the version\n  of external packages included in the Hercules-390 github project.\n     https://cmake.org/pipermail/cmake-developers/2013-July/019416.html\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option ADD-CFLAGS\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We cannot process the ADD-CFLAGS here.  If specified, it must be\n\n# appended to CMAKE_C_FLAGS after all C Compiler Options CMake scripts\n\n# have run.  ADD-CFLAGS will be appended in CMakeLists.txt\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option AUTOMATIC-OPERATOR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Automatic Operator requires regular expression support, indicated by\n\n# the presence of the regex.h header.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Options BZIP2 and BZIP2_DIR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If BZIP2=SYSTEM, do nothing.  Herc12_OptEdit.cmake has already\n\n# confirmed existence of a system BZip2 library.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If BZIP2=NO, do nothing.  BZip2 support will be excluded.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If BZIP2=YES or blank and BZIP2_DIR pointed to a valid BZip2\n\n# development directory, then Herc12_OptEdit.cmake found the import\n\n# target script and set HAVE_BZIP2_TARGET to its directory.  It will be\n\n# imported here.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If BZIP2=HERCULES, and BZIP2_DIR was not set, do nothing.  The script\n\n# Herc12_OptEdit.cmake does not check for a system installed package\n\n# in this case, and therefore BZIP2_FOUND will not be set.  The script\n\n# Herc41_ExtPackageBuild.cmake will build the BZIP2 package.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If BZIP2=YES, HERCULES, or blank, BZIP2_DIR was not set, and the\n\n# target system has a version of BZip2 installed, compare the versions\n\n# of the target system with the Hercules-390 BZip2 repository.  If the\n\n# target system BZip2 is older, unsed BZIP2_FOUND so that it will not be\n\n# used.   Herc41_ExtPackageBuild.cmake will build the BZIP2 package from\n\n# the Hercules-390 BZip2 repository.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Target system has a BZip2 library installed and builder does not\n\n# require use of the BZip2 in the Hercules-390 repository.  Use the\n\n# repository version only if it is newer than the library on the\n\n# target system.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Make a temporary file name\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# get bzlib.h from hercules repo.  Note: URL below is the result\n\n# of the redirect done when displaying the file on github and\n\n# clicking the \"raw\" button.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Get the BZip2 version from bzlib.h in the repository.  Tset it\n\n# agaist the version found on the target system by\n\n# find_package( BZip2 MODULE ).\n",
        "Line" : 148,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option CAPABILITIES\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This option allows finer control of process privileges than that\n\n# afforded by setuid() all by itself.  And setuid() is a pre-requisite\n\n# for capabilities.  The config.h variable is used in hmacros.h.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Notes:\n\n# 1. libcap-dev(el) is not normally included in a typical distro install,\n\n#    so it must be explicitly installed.\n\n# 2. FreeBSD does not appear to have a libcap package.\n\n# 3. Due to a typo in configure.ac, capabilities were included in an\n\n#    autotools build only when --enable-capabilities was explicitly\n\n#    coded.  The default is no...despite coding that appears to set up\n\n#    a default of yes.\n\n# 4. Most open source systems require libcap-dev.  One (Leap) requires\n\n#    libcap-devel.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option CCKD-BZIP2\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The bz2 library and public header are required for support of bzip2\n\n# compression of CCKD files.  Note that if herc12_OptEdit.cmake did not\n\n# identify a suitable bzip2 library, Herc41_ExtPackageBuild.cmake will\n\n# build one.  So there is never a case where CCKD_BZIP2=YES cannot\n\n# be honored.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option CUSTOM\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If specified, set the variable CUSTOM_BUILD_STRING so the generated\n\n# config.h includes it as a quoted string.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option DEBUG\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Option DEBUG is a bit tricky because the CMake build option and the\n\n# config.h preprocessor variable to be set have the same name.  We\n\n# cannot use DEBUG as the variable containing the value to which the\n\n# preprocessor variable should be set because it may be YES/NO/\"\" and\n\n# config.h requires 1 or #undef.  So we use DEBUG_BUILD to transfer\n\n# the value of 1 or #undef into config and use preprocessor code to\n\n# get config.h DEBUG set/unset correctly.  Later we can change Hercules\n\n# to use DEBUG_BUILD.  (Or, maybe better yet, change all preprocessor\n\n# options that are driven by user CMake options to begin with \"OPTION_\".\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option EXTERNAL-GUI\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Option EXTERNAL-GUI requires OPTION_DYNAMIC_LOAD.  But OPTION_DYNAMIC_LOAD\n\n# is a basic requirement of Hercules, so there is nothing to test.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option EXTPKG_DIR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Edits on EXTPKG_DIR have validated the path, created the path, and set\n\n# EXTPKG_ROOT to either the builder-specified or default external\n\n# package path.  There is nothing to be done here.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option FTHREADS\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# FTHREADS is supported only on Windows builds.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option GETOPTWRAPPER\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# autoconfig had a fairly complex test for the need for the getoptwrapper\n\n# kludge.  And this has been transformed into a non-libtool version.  But\n\n# absent a system that requires it, there can be no validation.  So we\n\n# shall leave the test out and document the ommission with encouragement\n\n# to report so the test case can be tested.  I suspect an early ELF system\n\n# will be needed for testing.\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option GIT_CLONE\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Git protocol to be used by default when cloning external packages and\n\n# the HTML documentation project.  The git: protocol is the fastest but\n\n# includes no validation of the source of a clone.  It uses a high port\n\n# number and is often blocked on company networks.  The https: protocol\n\n# represents a good compromise.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option HET-BZIP2\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The bz2 library and public header are required for support of bzip2\n\n# compression of het files.  Note that if herc12_OptEdit.cmake did not\n\n# identify a suitable bzip2 library, Herc41_ExtPackageBuild.cmake will\n\n# build one.  So there is never a case where HET_BZIP2=YES cannot\n\n# be honored.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option HQA_DIR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# If HQA_INSTALL_DIR is non-blank, then CMakeHercOptEdit.cmake has\n\n# validated that the directory, whether specified as an environment\n\n# variable or CMake command line option, exists.  Here we make sure that\n\n# the directory, if defaulted, exists, and that, whether defaulted or\n\n# specified, it has the required structure.\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# If it does, then because CMakeCheckUserland.cmake has already run,\n\n# the test for the header hqa.h is done here.\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Note that there should be no default for HQA_DIR, although we will\n\n# presume there might be in this code.  Note also that the hqa.h\n\n# header is optional even if the HQA_DIR option is specified.  Hercules\n\n# will build quite nicely without it.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#   See if hqa.h exists.  It is optional.\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option INTERLOCKED-ACCESS-FACILITY-2\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# This option requires some kind of atomic operation.  However, hatomic.h\n\n# adapts to what the target host provides, even if that is nothing.  So\n\n# we only need to set the variable for inclusion in config.h. The only\n\n# oddball here is that config.h must *disable* it if requested, not enable\n\n# it if needed.\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option IPV6.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# If required headers exist and not explicitly excluded by the builder,\n\n# set the variable ENABLES_IPV6 to 1.  If required headers are missing\n\n# and IPV6 was explicitly requested, save an error message and thereby\n\n# terminate the build.\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Note that there are *NO* required headers for IPV6 at the moment.\n\n# Due to a typo in hifr.h, a target system-provided header is never\n\n# used to build IPV6 support.  The header hifr.h provides it's own\n\n# The commented lines below are the original test from configure.ac\n\n# to determine if IPV6 support is possible.  Right now, because hifr.h\n\n# includes enough on its own.\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#if test \"$hc_cv_have_in6_ifreq_ifr6_addr\" != \"yes\" &&\n\n#      test \"$hc_cv_have_in6_ifreq_ifru_addr\" != \"yes\")\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option LARGEFILE\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# All Windows versions supported by Hercules have large file support.\n\n# Windows implements large file support by implementing a separate API\n\n# for file operations, similar to UNIX-like transitional large file\n\n# support.\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Large file access on UNIX-like systems requires a 64-bit file offset\n\n# type (off_t) and file control functions that use that type.\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Some targets provide this as the only choice, including 64-bit open\n\n# source targets, FreeBSD of any bitness since 2.0, and all Apple/Darwin\n\n# (?) versions.  On these targets, off_t starts out as a 64-bit type and\n\n# large file support is automatic and cannot be disabled.\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Some 32-bit open source targets, notably GNU/Linux targets, and Solaris\n\n# use a 32-bit file offset by default.  Defining _FILE_OFFSET_BITS=64\n\n# prior to including any system headers causes those headers to define a\n\n# 64-bit off_t and corresponding file control functions.  To code being\n\n# compiled, such targets behave exactly the same as targets for which a\n\n# 64-bit off_t is the only choice.  The macro _LFS_LARGEFILE tells code\n\n# being compiled that large file support is possible but does not tell\n\n# if that code is enabled.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Some 32-bit targets (which ones?) only support transitional large file\n\n# support, which offers an alternative file offset type off64_t and file\n\n# control function alternates that can exist side-by-side with the non-\n\n# large type and functions.  Availability of transitional support is\n\n# revealed by the _LFS64_LARGEFILE macro.  No specific enablement is\n\n# needed for transitional support.  If Hercules is to be built without\n\n# large file support on a system that includes transitional support,\n\n# the build tools must instruct Hercules to not use transitional support.\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# The _LFS_LARGEFILE and _LFS64_LARGEFILE macros are defined in posix_opt.h.\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Open source LFS support options are defined in section \"1.6 Conformance\"\n\n# of http://www.unix.org/version2/whatsnew/lfs20mar.html.\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Hercules code supports both native (64-bit off_t) and transitional\n\n# approaches to large file support).  The existence of _LFS_LARGEFILE\n\n# and/or _LFS64_LARGEFILE is tested in Herc20_TargetEnv.cmake.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Selected AIX systems need _LARGE_FILES set to 1 to enable LFS.\n\n# The _LARGE_FILES macro in AIX apparently serves the same purpose as\n\n# _FILE_OFFSET_BITS=64 in 32-bit open source systems.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Here is detail quoted from SG24-5674-01, \"Developing and Porting C\n\n# and C++ Applications on AIX,\" June 2003, p. 129 , which applies to the\n\n# compilers available on AIX 5L version 5.2.  The prior version of the\n\n# Redbook does not mention Large File System support at all.\n\n#    \"Beginning with AIX Version 4.2.1, there are two methods to work\n\n#     around the addressability of large files in the 32-bit user\n\n#     process model:\n\n#       If the -D_LARGE_FILE option is specified when compiling the\n\n#       program, the off_t type is redefined as long long (64-bit signed\n\n#       integer). Also, most system calls and library routines are\n\n#       redefined to support large files.\"\n\n# 64-bit versions of AIX support LFS with the same preparations as\n\n# open source 64-bit systems, i.e., none.  See p. 139.\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# And off_t is defined consistent with the target's\n\n# large file support capabilities, 4 if none enabled, or 8 if large file\n\n# support is native or enabled.  If fseeko is not defined, then Hercules\n\n# will use fseek, which has a file offset parameter of long.\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# If the target's off_t is 8 bytes (64 bits) by default or we are building\n\n# for Windows, then large file support is present by default and cannot\n\n# be turned off or disabled.\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Change default for LFS support based on target capabilities.  And issue\n\n# diagnostic and fail the build if LARGEFILE requested on a system that\n\n# that does not have native or transitional large file support.\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# LFS-capable target and LFS support requested or defaulted.  See what\n\n# macro is needed to enable that support.\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Try _FILE_OFFSET_BITS = 64 (GNU/Linux) first and see if\n\n# SIZEOF_OFF_T changes from 4 to 8.\n",
        "Line" : 555,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "# Try _LARGE_FILE = 1 (AIX) and see if SIZEOF_OFF_T changes\n\n# from 4 to 8.\n",
        "Line" : 565,
        "CharPositionInLine" : 12
      },
      "66" : {
        "Text" : "# Ensure Apple Darwin (Mac OS 10.5 Leopard) uses a 64-bit inode if LFS\n\n# is enabled.  This changes the definition of the stat structure in\n\n# sys/stat.h.  Mac OS greater than 10.5 does not require this define.\n\n# See https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man2/stat64.2.html\n\n# for details and confirmation that this macro is required only for 10.5.\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option MULTI-CPU\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# If YES, support for 8 CPUs is generated.  If NO, a single-CPU Hercules\n\n# is build.  If a number (already edited to be between 1 and 128) that\n\n# number of CPUs is built if the target architecture supports it.  The\n\n# uint128_t type are required for more than 64 processors.  If MULTI_CPU\n\n# is not defined for the build, hconsts.h will check the __uint128_t\n\n# type and set the cpu count to be build to 128 if present and 64 otherwise.\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option OBJECT_REXX\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Object Rexx requires two headers, rexx.h and oorexxapi.h.\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Options PCRE and PCRE_DIR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# If PCRE=NO, do nothing.  PCRE support will be excluded.\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# If PCRE=YES or blank and PCRE_DIR pointed to a valid PCRE development\n\n# directory, then Herc12_OptEdit.cmake found the import target script\n\n# and set HAVE_PCRE_TARGET to its directory.  It will be imported here.\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# If PCRE=YES or blank and PCRE_DIR was not set,\n\n# Herc41_ExtPackageBuild.cmake will build the PCRE package from\n\n# the Hercules-390 PCRE repository.\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# We ensure that PCRE_FOUND is unset even though Windows systems do not\n\n# have a system-installed version of PCRE because that lets the code for\n\n# PCRE processing in this build to be consistent with that for BZip2 and\n\n# Zlib.\n",
        "Line" : 685,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# The PCRE build creates two targets: PCRE and PCREPOSIX.  Both are\n\n# included in the pcre.cmake target import script.\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option REGINA_REXX\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Regina Rexx needs rexxsaa.h, which may or may not be in the regina subdirectory.\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option S3FH_DIR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# If S3FH_DIR is blank, then Herc41_ExtPackageBuild.cmake will build\n\n# SoftFloat-3a and import its targets.  No action is required.\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# If S3FH_DIR is non-blank, then Herc12_OptEdit.cmake has validated\n\n# that an import target script exits.  We will import it here.\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option SETUID-HERCIFC\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# The decision to build hercifc is based on platform and made in CMakeHercTarget.\n\n# If we are not building hercifc, then SETUID-HERCIFC is invalid.  If\n\n# SETUID-HERCIFC is other than YES or NO, then it is understood to be\n\n# a group name, and hercifc is set to that.\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option SYNCIO\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# The default for this is currently yes, but will change in the near\n\n# future.  There are no header or library requirements for this option.\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Option WINTARGET\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Preprocessor variables for WINTARGET were set in herc12_OptEdit.cmake.\n\n# Nothing needs to be done here.\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Options ZLIB and ZLIB_DIR\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# If ZLIB=SYSTEM, do nothing.  Herc12_OptEdit.cmake has already\n\n# confirmed existence of a system Zlib library.\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# If ZLIB=NO, do nothing.  Zlib support will be excluded.\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# If ZLIB=YES or blank and ZLIB_DIR pointed to a valid Zlib\n\n# development directory, then Herc12_OptEdit.cmake found the import\n\n# target script and set HAVE_ZLIB_TARGET to its directory.  It will be\n\n# imported here.\n",
        "Line" : 806,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# If ZLIB=HERCULES, and ZLIB_DIR was not set, do nothing.  The script\n\n# Herc12_OptEdit.cmake does not check for a system installed package\n\n# in this case, and therefore ZLIB_FOUND will not be set.  The script\n\n# Herc41_ExtPackageBuild.cmake will build the ZLIB package.\n",
        "Line" : 811,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# If ZLIB=YES, HERCULES, or blank, ZLIB_DIR was not set, and the\n\n# target system has a version of Zlib installed, compare the versions\n\n# of the target system with the Hercules-390 Zlib repository.  If the\n\n# target system Zlib is older, unsed ZLIB_FOUND so that it will not be\n\n# used.   Herc41_ExtPackageBuild.cmake will build the ZLIB package from\n\n# the Hercules-390 Zlib repository.\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Target system has a Zlib library installed and builder does not\n\n# require use of the Zlib in the Hercules-390 repository.  Use the\n\n# repository version only if it is newer than the library on the\n\n# target system.\n",
        "Line" : 838,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# Make a temporary file name\n",
        "Line" : 843,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# get bzlib.h from hercules repo.  Note: URL below is the result\n\n# of the redirect done when displaying the file on github and\n\n# clicking the \"raw\" button.\n",
        "Line" : 850,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Get the Zlib version from zlib.h in the repository.  Tset it\n\n# agaist the version found on the target system by\n\n# find_package( Zlib MODULE ).  The Zlib version is #define'd.\n",
        "Line" : 864,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 98
    },
    "CMake/Herc31_COptsAppleGNU.cmake" : {
      "ObjectId" : "05313d1453b0eaf150a5e6b2f670cf16ec3b97f7",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc31_COptsApplegcc.cmake - Set C compiler options - used for Apple\n\n#                                when Apple gcc is used to build Hercules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nApple is a bit weird for two reasons:\n1) Early Apple Mac OS versions used gcc, and later versions\n   used clang.  For a time, both were in use, gcc for\n   preprocessing, llvm for code generation.  See the web site\n   https://trac.macports.org/wiki/XcodeVersionInfo for a summary\n   of the compilers included in the Apple development tool Xcode,\n   and the relationship between Xcode versions and Mac OS versions.\n2) Apple had no problem modifying gcc or (maybe) clang/llvm to suit\n   their needs.  So Apple gcc is not the same as gcc in the open\n   source world, and Apple clang may not be the same as an open source\n   clang.\n\nA further complication is that a user of a modern Apple Mac OS, say,\n10.9 Mavericks or newer, can build and install a modern GNU gcc\ndevelopment suite and compile with that.\n\nThis script deals only with gcc versions 4.2.1 or older on Apple\nsystems, which are presumed to be Apple-modified versions of gcc\nincluded with Xcode or its predecessor CodeWarrior.  Higher gcc\nversions are presumed to be user-built and are handled by the \"normal\"\nHercules gcc options script.\n\n\nSo MacOS situation is:\n- pre-10.0                        Non-Darwin systems, not supported\n\n- 10.0 (Cheetah, Mar 2001):       gcc 2.95.2, ABI 2.95.2\n                                  10.0 is really not recommended\n\n- 10.1 (Puma, Oct 2001):          gcc 2.95.2, ABI 2.95.2\n\n- 10.2 (Jaguar, Aug 2002):        gcc 3.1, ABI 3.1\n\n  Note: The gcc ABIs for 2.95 and 3.1 are not compatible with each\n        other nor with gcc 3.3 and newer versions.\n\n- 10.3 (Panther, Oct 2003):       gcc 3.3; older gcc versions\n                                  available for projects targetting\n                                  the ABI of older Mac OS versions\n\n- 10.4 (Tiger, Apr 2005):         gcc 3.3, 4.0.0, 4.0.1\n                                  First Mac OS to support Intel\n                                  Last Mac OS to support PowerPC G3\n\n- 10.5 (Leopard, Oct 2007):       gcc 4.2.0\n                                  gcc 4.2.1, added in Xcode 3.1\n                                  llvm/gcc 4.2.1, added in Xcode 3.1\n                                  last version to support all Intel\n                                  processors and PowerPC G4 and G5\n\n- 10.6 (Snow Leopard, Aug 2009):  gcc 4.2.0, removed in Xcode 4.0+\n                                  gcc 4.2.1, removed in Xcode 4.2\n                                  llvm/gcc 4.2.1, added in Xcode 3.1\n                                  clang Apple\n                                  Intel support only\n                                  last Mac OS to support 32-bit processors\n\n- 10.7 (Lion, Jul 2011):          llvm/gcc 4.2.1\n                                  clang Apple\n\n- 10.8 (Mountain Lion, Jul 2012): llvm/gcc 4.2.1, removed in Xcode 5.0\n                                  clang Apple\n\n- All MacOS versions from 10.9 (Mavericks, Oct 2013) forward use the\n  Apple variant of clang.  It is not clear if there is any real variation\n  from the generally available clang.\n\nSome options are needed for a correct build, for example\n-fno-strict-aliasing when it is required.  Most other options appeared\nafter 4.2.1, which means a user gcc build, and those are not dealt\nhere.\n\nOptions that are required to build Hercules are *always* added\nto the C command line options, as are the debugger options\n(\"-W -Wall -g3 -ggdb3\").  If OPTIMIZE=\"<whatever>\" is coded on the\nCMake command line, the builder's options are appended to the *always*\ncreated options, which gives the builder the opportunity to add any\npreferred optimization options, such as -O3 (which is never added\nby this CMake script), and to negate any of the *always* created\noptions, because when options conflict, the last one wins.\n\nIt is not clear what happens in gcc when one specifies -O3 *after*\nturning off something enabled by -O3, for example -fno-strict-aliasing.\nBut that is the builder's problem.  Ours here is to make sure the\noptimize flag selection process is clear.\n\nOPTIMIZE=YES means this script will interpret the target system's\nand compiler's capabilities and nature and craft a reasonable and\nworkable set of optimization flags, starting with -O2.\n\nOPTIMIZE=NO means only the options required to build Hercules and\nthe debugger options -W, -Wall, -g3, and -ggdb3 are included, as\nis -O0.  No other options are included.\n\nApple gcc 3.3 optimization options enabled by each level of -O are\navailable at this mirror (for how long?):\n\n   http://mirror.informatimago.com/next/developer.apple.com/documentation/DeveloperTools/gcc-3.3/gcc/Optimize-Options.html\n\nand for 4.0.1, look here:\n\n   http://mirror.informatimago.com/next/developer.apple.com/documentation/DeveloperTools/gcc-4.0.1/gcc/Optimize-Options.html\n\nI haven't found mirrors for 2.95, 3.1, or 4.2.x\n\nSo rather than mess around with whether -fomit-frame-pointer should\nor should not be included, we shall let the compiler include it\nbased on the optimization profile (-O0 through -O2) that is to be\nused for the build.  Anyone feeling strongly about can always\noverride the compiler flags by passing -DOPTIMIZATION=\"whatever\"\nto CMake.\n\nFor processor-based stuff, we will use CMAKE_SYSTEM_PROCESSOR for\nthe processor name; this is what config.guess does in autotools.\nCMAKE_SYSTEM_PROCESSOR is set to the host's uname -p output unless\ncross-compiling, in which case the builder must set things up\non their own.\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Apparently, selected versions of the old Apple gcc default preprocessor\n\n# had an issue where preprocessor macro argument counting did not work.\n\n# The circumvention was to use the Apple preprocessor, available in\n\n# versions 2.95 and 3.1.  In Apple 3.3 and up, there appears to be no\n\n# cure for the issue.  So for Apple gcc 3.3 and up, if argument counting\n\n# is broken, the build must be failed.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For details, review this quote from the Apple gcc 3.3 release notes:\n\n#     ... the -traditional-cpp option has changed.\n\n#    In Apple GCC 3.1 and earlier Apple GCC compilers,\n\n#    -traditional-cpp was used to toggle between the\n\n#    standard GNU GCC preprocessor and Apple's own\n\n#    preprocessor, \"cpp-precomp\". The GNU GCC compiler\n\n#    interpreted -traditional-cpp differently on all\n\n#    other platforms. Since cpp-precomp has been removed\n\n#    for Apple's GCC 3.3 compiler, the standard GNU\n\n#    meaning of -traditional-cpp has been restored. By\n\n#    default, the GCC 3.3 preprocessor conforms to the\n\n#    ISO C standard. Using the -tradtional-cpp option\n\n#    means the C preprocessor should instead try to\n\n#    emulate the old \"K&R C\".\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The test in configure.ac for a K&R preprocessor when -traditional-cpp\n\n# is included seems to be an empirical test for Apple gcc 3.3 or\n\n# better.  We will just test the gcc version.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Test to see if preprocessor macro argument counting is broken.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test for broken argument counting\n",
        "Line" : 160,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# Basic C flags. Enable all warnings, and enable gdb debugging options\n\n# including macro definitions.  Set the calculated set of optimization\n\n# flags to the null string.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Flags needed to deal with issues in the toolchain.  I am not sure if\n\n# the toolchain included with older mac OS versions has very strict\n\n# aliasing, but if we found it, we will try to turn it off.  The Apple\n\n# gcc 3.3 documentation includes -fstrict-aliasing, which implies the\n\n# existence of -fno-strict-aliasing.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Above this point, everything that has been added to c flags is needed\n\n# for compilation and has nothing to do with optimization.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builder-specified automatic optimization not YES nor NO.  So the\n\n# builder has provided an optimization string that we shall use.  And\n\n# exit, because there is nothing else we shall do.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If automatic optimization is specified or defaulted to NO, or if this\n\n# is a debug build, then add -O0 to the c flags and we are done.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Not a debug build, no builder-specified automatic optimization, and\n\n# the default automatic optimization not YES or NO.  So the default\n\n# automatic optimization is a string that we shall use.  Note: this is\n\n# a really unlikely case, but if a Hercules maintainer decides that a\n\n# default optimization string should be provided, we will respect it.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# And such a default may well be a poor idea because the default string\n\n# would have to be compiler-agnostic and target-agnostic.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Automatic optimization requested or defaulted\n\n# ----------------------------------------------------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Automatic optimization specified as or defaulted to YES.  Now the fun\n\n# begins.  The first part is easy: -O2.  We do not do -O3; there is no\n\n# consensus that it represents a better choice.  And if -O3 is the\n\n# builder's wish, OPTIMIZATION=\"-O3\" is the way to do it.\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Now see if we can improve on things.  Improvements are typically\n\n# target-processor dependent, and that is the case now, but who knows\n\n# the future brings....\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Determine if this is this a cross-platform build.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Convert the processor to upper case for later comparisons.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Intel 64-bit processor-specific compiler flags.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Some notes:\n\n# 1) if the builder is cross-compiling, it is the builder's\n\n#    responsibility to set a system processor that is valid for the\n\n#    GNU compiler in use.\n\n# 2) The Apple GNU gcc compilers do not accept -march=native.  Although\n\n#    Apple only used Intel 64-bit processors, prior to 4.2.0 -march=K8\n\n#    (an AMD processor type) is required.  4.2.0 and 4.2.1 expect\n\n#    -march=core2.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Intel 32-bit processor-specific compiler flags.\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Some notes:\n\n# 1) if the builder is cross-compiling, it is the builder's\n\n#    responsibility to set a system processor that is valid for the\n\n#    GNU compiler in use.\n\n# 2) Apparently, some systems report i786, but GNU does not accept\n\n#    that.  Use Pentium4 instead.\n\n# 3) The GNU compiler built with selected very old Red Had distros\n\n#    apparently report version 2.9.6, even though that was never a\n\n#    valid GNU release number.  And compilers reporting 2.9.6 do not\n\n#    understand i686.\n\n# 4) Apple gcc compilers do not accept -march=native.\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# if we reach this point, we did not recognize the processor.  So we\n\n# cannot do any target processor-based optimizations.  Continue without\n\n# them and hope for the best.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "CMake/Herc31_COptsClang.cmake" : {
      "ObjectId" : "90720a80d3ca513dbe23c9e4551fdb27c1efcf6b",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc31_COptsclang.cmake  -  Set C compiler options - used for clang on\n\n#                             Apple and other open source platforms.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nSome options are needed for a correct build, for example\n\n    -mstructure-size-boundary=8 for certain ARM flavors, and\n    -fno-strict-aliasing when it is required.\n\nOther options are truly optimization related, such as -frename-registers\non ARM.\n\nOptions that are required to build Hercules are *always* added\nto the C command line options, as are the debugger options\n(\"-W -Wall -g3 -ggdb3\").  If OPTIMIZE=\"<whatever>\" is coded on the\nCMake command line, the builder's options are appended to the *always*\ncreated options, which gives the builder the opportunity to add any\npreferred optimization options, such as -O3 (which is never added\nby this CMake script), and to negate any of the *always* created\noptions, because when options conflict, the last one wins.\n\nIt is not clear what happens in when one specifies -O3 *after*\nturning off something enabled by -O3, for example -fno-strict-aliasing.\nBut that is the builder's problem.  Ours here is to make sure the\noptimize flag selection process is clear.\n\nOPTIMIZE=YES means this script will interpret the target system's\nand compiler's capabilities and nature and craft a reasonable and\nworkable set of optimization flags, starting with -O2.\n\nOPTIMIZE=NO means only the options required to build Hercules and\nthe debugger options -W, -Wall, -g3, and -ggdb3 are included, as\nis -O0.  No other options are included.\n\nSee https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html for\nspecifics of the optimizations turned on at each level of -O.  In\nparticular, note that any optimization level other than -Os or -O0\ninclude -fomit-frame-pointer if doing so preserves the ability to\nuse the debugger.\n\nSo rather than mess around with whether -fomit-frame-pointer should\nor should not be included, we shall let the compiler include it\nbased on the optimization profile (-O0 through -O2) that is to be\nused for the build.  Anyone feeling strongly about can always\noverride the compiler flags by passing -DOPTIMIZATION=\"whatever\"\nto CMake.\n\nFor processor-based stuff, we will use CMAKE_SYSTEM_PROCESSOR for\nthe processor name; this is what config.guess does in autotools.\nCMAKE_SYSTEM_PROCESSOR is set to the host's uname -p output unless\ncross-compiling, in which case the builder must set things up\non their own.\n\nClang does not support the option -minline-stringops-dynamically.\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Basic C flags. Enable all warnings, and enable gdb debugging options\n\n# including macro definitions.  Set the calculated set of optimization\n\n# flags to the null string.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags needed to deal with issues in the toolchain.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If structures are padded and the target is ARM-like, then we must\n\n# tell the compiler to pad to an 8-bit (one byte) boundary.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Above this point, everything that has been added to c flags is needed\n\n# for compilation and has nothing to do with optimization.\n\n# Below this point, everything affects the optimization flags.  We will\n\n# set CMAKE_C_FLAGS_RELEASE only based on -DOPTIMIZE string or the flags\n\n# determined by this script.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Builder-specified automatic optimization not YES nor NO.  So the\n\n# builder has provided an optimization string that we shall use.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If automatic optimization is specified or defaulted to NO, or if this\n\n# is a debug build, then add -O0 to the c flags and we are done.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Not a debug build, builder-specified automatic optimization is not\n\n# NO, and if builder-specified automatic optimization is not blank,\n\n# the builder-specified automatic optimization is not NO.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Determine automatic optizimation options.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Automatic optimization requested or defaulted\n\n# ----------------------------------------------------------------------\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Automatic optimization specified as or defaulted to YES.  Now the fun\n\n# begins.  The first part is easy: -O2.  We do not do -O3; there is no\n\n# consensus that it represents a better choice.  And if -O3 is the\n\n# builder's wish, OPTIMIZATION=\"-O3\" is the way to do it.  Note: the\n\n# spaces at the beginning and end of the input expression are essential.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now see if we can improve on things.  Improvements are typically\n\n# target-processor dependent, and that is the case now, but who knows\n\n# the future brings....\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Determine if this is this a cross-platform build.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make the target processor uppercase to simplify testing\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel 64-bit processor-specific compiler flags.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Some notes:\n\n# 1) if the builder is cross-compiling, it is the builder's\n\n#    responsibility to set a system processor that is valid for the\n\n#    clang version in use.\n\n# 2) Clang, at least through 7.0, does not accept -mstringops-dynamically\n\n#    as a command line option.  (Not tested yet on Apple.)\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Intel 32-bit processor-specific compiler flags.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Some notes:\n\n# 1) if the builder is cross-compiling, it is the builder's\n\n#    responsibility to set a system processor that is valid for the\n\n#    clang version in use.\n\n# 2) Clang, at least through 7.0, does not accept -mstringops-dynamically\n\n#    as a command line option.  (Not tested yet on Apple.)\n\n# 3) Apparently, some systems report i786, but like GNU gcc, clang does\n\n#    not accept that.  Use Pentium4 instead.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Optimization flags for ARM\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The older ARM processor is just reported as \"ARM\" in CMAKE_SYSTEM_PROCESSOR.\n\n# There is not much that can be added for the original ARM.\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Newer ARM prcoessors, those with a number after \"ARM\", apparently\n\n# benefit from -mcpu and -mtune, while older ones do not. This is\n\n# apparently true for Xscale cpus too, but it is not clear how those\n\n# systems are identified.\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# XSCALE processors are based on ARM and also apparently benefit from\n\n# -mcpu and -mtune.\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 24
    },
    "CMake/Herc31_COptsGNU.cmake" : {
      "ObjectId" : "fa4ba0d087ad155af107b0930b26b96b9d9ae9f7",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc31_COptsGNU.cmake  -  Set C compiler options - used for GNU gcc on\n\n#                           other than Apple platforms.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nSet C compiler options - used for any gcc except for gcc versions\n4.2.1 or less on Apple platforms.\n\nSome options are needed for a correct build, for example\n-mstructure-size-boundary=8 for certain ARM flavors, and\n-fno-strict-aliasing when it is required.  Other options are\ntruly optimization related, such as -frename-registers on ARM.\n\nOptions that are required to build Hercules are *always* added\nto the C command line options, as are the debugger options\n(\"-W -Wall -g3 -ggdb3\").  If OPTIMIZE=\"<whatever>\" is coded on the\nCMake command line, the builder's options are appended to the *always*\ncreated options, which gives the builder the opportunity to add any\npreferred optimization options, such as -O3 (which is never added\nby this CMake script), and to negate any of the *always* created\noptions, because when options conflict, the last one wins.\n\nIt is not clear what happens in GCC when one specifies -O3 *after*\nturning off something enabled by -O3, for example -fno-strict-aliasing.\nBut that is the builder's problem.  Ours here is to make sure the\noptimize flag selection process is clear.\n\nOPTIMIZE=YES means this script will interpret the target system's\nand compiler's capabilities and nature and craft a reasonable and\nworkable set of optimization flags, starting with -O2.\n\nOPTIMIZE=NO means only the options required to build Hercules and\nthe debugger options -W, -Wall, -g3, and -ggdb3 are included, as\nis -O0.  No other options are included.\n\nSee https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html for\nspecifics of the optimizations turned on at each level of -O.  In\nparticular, note that any optimization level other than -Os or -O0\ninclude -fomit-frame-pointer if doing so preserves the ability to\nuse the debugger.\n\nSo rather than mess around with whether -fomit-frame-pointer should\nor should not be included, we shall let the compiler include it\nbased on the optimization profile (-O0 through -O2) that is to be\nused for the build.  Anyone feeling strongly about can always\noverride the compiler flags by passing -DOPTIMIZATION=\"whatever\"\nto CMake.\n\nFor processor-based stuff, we will use CMAKE_SYSTEM_PROCESSOR for\nthe processor name; this is what config.guess does in autotools.\nCMAKE_SYSTEM_PROCESSOR is set to the host's uname -p output unless\ncross-compiling, in which case the builder must set things up\non their own.\n\nGcc 4.3.0 included support for the option -minline-stringops-dynamically\n(see https://gcc.gnu.org/onlinedocs/gcc-4.3.0/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options)\nThe gcc option summary was not updated for -minline-stringops-dynamically\nuntil 4.4.0.)\n\nThe most recent Hercules configure.ac checks for a GNU compiler issue\nthat breaks implicit __alloca calls.  This issue affects only MinGW\nand Cygwin versions of the GNU compilers, and then only versions 3.0.x\nand 3.1.x.  A patch was written for 3.3 and backported to 3.2.  Because\nthis is a MinGW/Cygwin issue only, and Hercules does not use either\ntool to build Hercules, testing around this issue has not been included\nin CMake scripts for Hercules.  See:\n- https://gcc.gnu.org/bugzilla/show_bug.cgi?id=8750 (desc. and 3.3 patch)\n- https://gcc.gnu.org/ml/gcc-patches/2003-02/msg01482.html (3.2 patch)\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Basic C flags. Enable all warnings, and enable gdb debugging options\n\n# including macro definitions.  Set the calculated set of optimization\n\n# flags to the null string.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags needed to deal with issues in the toolchain.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If structures are padded and the target is ARM-like, then we must\n\n# tell the compiler to pad to an 8-bit (one byte) boundary.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Above this point, everything that has been added to c flags is needed\n\n# for compilation and has nothing to do with optimization.\n\n# Below this point, everything affects the optimization flags.  We will\n\n# set CMAKE_C_FLAGS_RELEASE only based on -DOPTIMIZE string or the flags\n\n# determined by this script.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Builder-specified automatic optimization not YES nor NO.  So the\n\n# builder has provided an optimization string that we shall use.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If automatic optimization is specified or defaulted to NO, or if this\n\n# is a debug build, then add -O0 to the c flags and we are done.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Not a debug build, builder-specified automatic optimization is not\n\n# NO, and if builder-specified automatic optimization is not blank,\n\n# the builder-specified automatic optimization is not NO.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Determine automatic optizimation options.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Automatic optimization requested or defaulted\n\n# ----------------------------------------------------------------------\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Automatic optimization specified as or defaulted to YES.  Now the fun\n\n# begins.  The first part is easy: -O2.  We do not do -O3; there is no\n\n# consensus that it represents a better choice.  And if -O3 is the\n\n# builder's wish, OPTIMIZATION=\"-O3\" is the way to do it.  Note: the\n\n# spaces at the beginning and end of the input expression are essential.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now see if we can improve on things.  Improvements are typically\n\n# target-processor dependent, and that is the case now, but who knows\n\n# the future brings....\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Determine if this is this a cross-platform build.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make the target processor uppercase to simplify testing\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# For Intel processors, two checks apply to both 32-bit and 64-bit\n\n# processors: -minline-stringops-dynamically and -march=native.\n\n# We will test both here.  If -minline-stringops-dynamically is\n\n# accepted, we will add it to the option string.  -march=native\n\n# availability will be addressed based on processor bitness.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Intel 64-bit processor-specific compiler flags.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Some notes:\n\n# 1) if the builder is cross-compiling, it is the builder's\n\n#    responsibility to set a system processor that is valid for the\n\n#    GNU compiler in use.\n\n# 2) GNU compilers 4.2.0 and better accept -march=native.  Prior to\n\n#    4.2.0, Hercules used -march=K8 for all 64-bit processors, even on\n\n#    Apple builds (which use a script separate from this one).\n\n# 3) One target/compiler combination, NetBSD 7.0.1 and gcc 4.8.4,\n\n#    reject -march=native.  Use -march=x86-64 instead.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Intel 32-bit processor-specific compiler flags.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Some notes:\n\n# 1) if the builder is cross-compiling, it is the builder's\n\n#    responsibility to set a system processor that is valid for the\n\n#    GNU compiler in use.\n\n# 2) Apparently, some systems report i786, but GNU does not accept\n\n#    that.  Use Pentium4 instead.\n\n# 3) The GNU compiler built with selected very old Red Had distros\n\n#    apparently report version 2.9.6, even though that was never a\n\n#    valid GNU release number.  And compilers reporting 2.9.6 do not\n\n#    understand i686.\n\n# 4) GNU compilers 4.2.0 and better accept -march=native.\n\n# 6) One target/compiler combination, NetBSD 7.0.1 and gcc 4.8.4,\n\n#    reject -march=native.  Use ${CMAKE_SYSTEM_PROCESSOR} instead.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Optimization flags for ARM\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The older ARM processor is just reported as \"ARM\" in CMAKE_SYSTEM_PROCESSOR.\n\n# There is not much that can be added for the original ARM.\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Newer ARM prcoessors, those with a number after \"ARM\", apparently\n\n# benefit from -mcpu and -mtune, while older ones do not. This is\n\n# apparently true for Xscale cpus too, but it is not clear how those\n\n# systems are identified.\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# XSCALE processors are based on ARM and also apparently benefit from\n\n# -mcpu and -mtune.\n",
        "Line" : 282,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "CMake/Herc31_COptsMSVC.cmake" : {
      "ObjectId" : "5ec794512e2414d10030490965b3ccde752b867c",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc31_COptsMSVC.cmake  -  Set C compiler options - used for the\n\n#                            Microsoft Visual Studio C compiler.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nCMake default c flags for an MSVC build are:\n\n  Base:    /DWIN32 /D_WINDOWS /W3\n\n    /W3   Display production quality warnings.\n\n  Release: /MD /O2 /Ob2 /DNDEBUG\n\n    /MD   Use multithreaded dynamic runtime library\n    /O2   Optimize for speed\n    /Ob2  Inline whatever the compiler likes.  Included in /O2\n\n  Debug:   /MDd /Zi /Ob0 /Od /RTC1\n\n    /MDd  Use multithreaded dynamic runtime library debug version\n    /Od   No optimization\n    /Ob0  Disable inlining\n    /Zi   Generate debugging information\n    /RTC1 Enable runtime stack frame checking and uninitialized variable\n        checking.\n\nOptions that are required to build Hercules are *always* added\nto the base C command line options.  These include defining\nwarnings as errors, linker warnings as errors, multiprocessor\nexploitation during the build.\n\nConfiguration-specific options such as debug and optimization are\nadded to the configuration-speciic CMake C flags variables.  Flags\nneeded to create .pdb files are specified on both of the configuration-\nspecific flags variables so that it is easy to remove .pdb creation\nfrom the Release configuration when appropriate.\n\nA builder-provided optimization string is appended to _BOTH_ the\nRelease and Debug strings so that the builder can override any\noptimization or debug string provided by CMake or this script.\n\nOPTIMIZE=YES means this script will uset the default CMake flags\nfor a Release configuration and will in addition set the /favor\ncompiler option based on the detected host processor.  OPTIMIZE=YES\nis ignored for a Debug build.\n\nOPTIMIZE=NO means the CMake default optimization options (/O2 /Ob2)\nare removed from the Release configuration.  No change is made to\nthe Debug configuration.\n\nSee https://msdn.microsoft.com/en-us/library/k1ack8f1(v=vs.140).aspx for\nspecifics of the optimizations associated with the variants of the /O\noption.  That page is for Visual Studio 2015, but that page has the best\nlinks to options available for Visual Studio 2017 and for older\nversions.\n\nFor processor-based stuff (OPTIMIZE=YES specified or defaulted, we look\nat the environment variables PROCESSOR_IDENTIFIER (Windows) and Platform\n(Visual Studio command prompt) to determine the host processor and the\nappropriate /flavor: tag.  When compiling for other than the host,\nOPTIMIZE should be used to specify the /flavor: option.  For distribution\nbuilds, OPTIMIZE=\"/flavor:blend\" should be used as a best choice for an\nunknown target CPU.\n\n\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set basic C compiler flags other than optimization flags.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The nmake Windows build, if ASSEMBLY_LISTINGS was defined, would\n\n# put those listings in the msvc.AMD64.cod subdirectory of the build\n\n# tree.   We will see where they appear in a CMake build and act\n\n# accordingly.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Useful MSVC c compiler flags\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# suppress startup banner line and copyright notice\n",
        "Line" : 94,
        "CharPositionInLine" : 21
      },
      "7" : {
        "Text" : "#  Indicate config.h is present\n",
        "Line" : 95,
        "CharPositionInLine" : 31
      },
      "8" : {
        "Text" : "# Treat as error: 'identifier' : unreferenced local variable\n\n# Treat as error: 'label' : unreferenced label\n\n# Treat as error: unreachable code\n\n# Treat all warnings as errors\n",
        "Line" : 96,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# MSVC 2015 and better can use multiple processors to build.  Multiple\n\n# processors interfers with /Gm, and the /Gm option is reputed to not\n\n# work well anyway, so /MP wins.  Besides, the documentation leads me to\n\n# believe that /Gm is useful for C++ only, what with its references to\n\n# changed classes.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Visual Studio 2008 or better\n",
        "Line" : 108,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# Use multiple processors if available\n",
        "Line" : 110,
        "CharPositionInLine" : 28
      },
      "12" : {
        "Text" : "# Disable some nuisance warnings that get displayed by MSVC 2015 or\n\n# newer.  This applies to both debug and release builds.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Visual Studio 2015 or better\n",
        "Line" : 117,
        "CharPositionInLine" : 38
      },
      "14" : {
        "Text" : "# 'keyword' : ignored on left of 'type' when no\n\n# ...variable is declared\n\n# returning address of local variable or temporary\n\n# 'operation': conversion from 'type1' to 'type2'\n\n# ...of greater size\n\n# ‘<function>’ : format string ‘<format-string>’\n\n# ...requires an argument of type ‘<type>’, but\n\n# ...variadic argument <position> has type ‘<type>’\n\n# ‘%<conversion-specifier>’ is not allowed in\n\n# ...the format string of function ‘<function>’\n\n# The compiler encountered a deprecated declaration.\n",
        "Line" : 119,
        "CharPositionInLine" : 24
      },
      "15" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set configuration-dependent C compiler flags other than optimization\n\n# flags.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add /GL (global optimization) and /Zi (produce a separate .pdb file\n\n# with detailed information for the debugger.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#set( CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\" )\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The CMake debug configuration flags are sufficient for a Windows build.\n\n# We will add preprocessor definitions DEBUG and _DEBUG.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set the Resource Compiler flag.  These are actually macro definitions,\n\n# but there does not seem to be a CDEFS CMake variable.  So we do it in\n\n# CMAKE_RC_FLAGS.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# While MS is quite clear that the ANSI predefined macros are _not_\n\n# defined for the resource compiler, apparently at least one important\n\n# MS-specific one is not either:  _WIN64.  So we shall use SIZEOF_SIZE_P\n\n# to set it.  See: https://msdn.microsoft.com/en-us/library/windows/desktop/aa381032(v=vs.85).aspx\n\n# for Microsoft's limited discussion of this.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set configuration-independent linker flags\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Do not suppress Manifests with /MANIFEST:NO.  Manifests are required to\n\n# to connect to the correct C runtime DLL on pre-VS2015 builds.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generate map files.  The nmake-based Windows build scripts created map\n\n# files in a subdirectory of the source tree.  A CMake build creates the\n\n# map files in the build directory for executables and shared libraries.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Default base address: The nmake-based Windows build scripts based\n\n# Hercules at the 4mb line (0x400000).  There is a nice discussion of\n\n# the reason for this choice at:\n\n#\n\n#   https://blogs.msdn.microsoft.com/oldnewthing/20141003-00/?p=43923/\n\n#\n\n# Starting with Visual Studio 2015, Microsoft changed the defaults for\n\n# /BASE for 64-bit systems to 0x140000000 for executables and\n\n# 0x180000000 for DLLs.\n\n#\n\n# Starting with Visual Studio 2015, Microsoft recommends /DYNAMICBASE\n\n# to enable Address Space Layout Randomization (ASLR).  The linker\n\n# option that supports ASLR, /DYNAMICBASE, is supported in Visual Studio\n\n# 2008 and newer, and ASLR itself is supported on Windows Vista and\n\n# higher.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# /DEBUG is used for both Debug and Release so we get PDB files for\n\n# either configuration.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Above this point, everything that has been added to compiler and\n\n# linker flags is needed for any compilation/link and has nothing to do\n\n# with optimization.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set configuration-dependent C compiler optimization flags\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# The OPTIMIZE= option really does not address the question of multi-\n\n# configuration generators, nor does it address the availability of\n\n# CMake Debug and Release configurations.  Between the reasonable\n\n# optimization defaults selected by CMake for both Release and Debug\n\n# when Windows is targeted, optimization flags are set as follows:\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# OPTIMIZE=YES:\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Builder-specified automatic optimization not YES nor NO.  So the\n\n# builder has provided an optimization string that we shall use.\n\n# The builder-supplied string must be appended to the configuration-\n\n# specific C flags for the release configuration.  The flags for the\n\n# debug configuration are not changed.\n\n#\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Builder specified OPTIMIZATION=NO.  Remove the default optimization\n\n# flags from CMAKE_C_FLAGS_RELEASE and replace them with those from\n\n# CMAKE_C_FLAGS_DEBUG.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# all done.\n",
        "Line" : 270,
        "CharPositionInLine" : 20
      },
      "33" : {
        "Text" : "# At this point, OPTIMIZE was specified as YES or left blank.  Auto-\n\n# optimize.  Default optimization flags provided by CMake are good.\n\n# Just add /favor, which controls optimization for specific processors.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Prior to Visual Studio 2012, the /favor option was available only in\n\n# x64 compilers and could only favor Intel or AMD processors.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# There is no good way to determine if host=target because Windows\n\n# reports all 64-bit processors, Intel and AMD (and ATOM?), as AMD64.\n\n# If we know that we are building for the host, then we can use the\n\n# Windows environment variable PROCESSOR_IDENTIFIER to distinquish\n\n# between Intel, Intel ATOM/Centrino, and AMD processors.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# The default /favor:blend supports x64 optimizations only until Visual\n\n# Studio 2012, when /favor:blend is documented as supporting x86 and\n\n# x64 optimizations.  VS2012 also added /favor:ATOM.\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# For the moment, we will support /favor:ATOM on ATOM processors when we\n\n# can (VS2012 or better), /favor:AMD64 when we can detect an AMD 64-bit\n\n# processor, and /favor:Intel64 on an Intel 64-bit processor.\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Less than VS 2012.  x64 Intel or AMD only\n",
        "Line" : 297,
        "CharPositionInLine" : 36
      },
      "39" : {
        "Text" : "# and targetting a 64-bit system\n",
        "Line" : 298,
        "CharPositionInLine" : 32
      },
      "40" : {
        "Text" : "# VS2012 or better.\n",
        "Line" : 305,
        "CharPositionInLine" : 24
      },
      "41" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Set configuration-dependent linker flags.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Allow link-time code generation for Release builds (required and\n\n# implied for obj's compiled with /GL).\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    },
    "CMake/Herc31_COptsUnknown.cmake" : {
      "ObjectId" : "c509bdcd30edc4f9530327d0ce2a7489c45f4555",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc31_COptsunknown.cmake  -  Set C compiler options when building\n\n#                               an unrecognized compiler.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unrecognized C compiler.  We do not know how to control it through\n\n# command line options.  Which means we cannot automatically create\n\n# optimization flags or flags to deal with detected oddities.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The default for automatic optimization is NO for an unrecognized\n\n# compiler.  If OPTIMIZATION=YES is specified, the build is terminated\n\n# with an error message.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If a builder specifies NO, the build continues without comment.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If a builder specifies a string, that string is used.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The builder has provided flags to be used by the compiler.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "CMake/Herc41_ExtPackageBuild.cmake" : {
      "ObjectId" : "94c18b35af3d783a3a7bd7253cd200fc44aa863f",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc41_ExtPackageBuild.cmake - Build external packages needed by\n\n#                                Hercules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nBuild any required external packages that are required by Hercules or\nhave been requested by the builder or defaulted.\n\nPackage         Target\nSoftFloat-3a    SoftFloat       Required by Hercules\nBZip2           bz2             Optional, but included by default\nPCRE            pcre            Windows only, optional, included by default\nZlib            zlib            Optional, but included by default\n\n\nIf the builder provided an installation directory for a given package,\nthen there is no need for it to be built here.  The import target for\na builder-specified package was imported in Herc28_OptSelect.cmake.\n\n\n]]",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# SoftFloat-3a package, CMake target SoftFloat.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# BZip2 package, CMake target bz2\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if we are not using a target system-provided BZip2 library, install it.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# PCRE package, CMake target pcre\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if we are not using a target system-provided ZLib library, install it.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Zlib package, CMake target zlib\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# if we are not using a target system-provided ZLib library, install it.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/Herc60_CreateTargets.cmake" : {
      "ObjectId" : "095b4ee86521401528d26d5932b92b03d42c9c30",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc60_CreateTargets.cmake - Create CMake targets and include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nFunction/Operation\n- Create all targets needed to build Hercules.\n- Include the crypto, decNumber, and html directories in the required\n  order to complete the build.\n- In addition to the targets created for the libraries and executables\n  that comprise Hercules, the following targets are created:\n  . test - runs all test scripts defined by add_test()\n  . check - A synonym for the test target\n  . uninstall - uses the build directory install manifest to uninstall\n\n\nInput\n- Targets that include numerous source files have those files identified\n  in herc61_SlibSource.cmake.  This separation keeps this file uncluttered\n  so the mechanics of target construction are not obscured by the need to\n  include, say, 20 source files in a particular target.\n\nOutput\n- Targets defined as needed for CMake to create file(s) needed by the\n  generator to build those targets.\n\n\nNotes\n- This exists as a separate include file to isolate target creation into\n  a complete and self-contained script.\n- The term \"target\" here describes a CMake target, which is often a\n  named target in the generated build scripts.\n\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Ensure commitinfo.h is up to date on every build.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create the custom target to create the commitinfo.h header, which is\n\n# included in version.c.  The commitinfo.h header needs to be re-created\n\n# each time the git status of the source directory changes.  The CMake\n\n# script Herc01_GitVer.cmake addresses creation and updates of commitinfo.h\n\n# and must be executed each time a build is done.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Custom targets are always out of date; this target will be re-executed\n\n# every time Hercules is built.  When it is built is an interesting question\n\n# and build tool dependent.  To make it work the way we wish, a dependency\n\n# on the custom target must be included in the target (hercu) that includes\n\n# the potentially new commitinfo.h.  So the dependency in hercu on\n\n# commitinfo_phonytarget ensures that commitinfo_phonytarget is built before\n\n# compiling the components of hercu.  And commitinfo_phonytarget triggers\n\n# the custom command that \"creates\" commitinfo.phony and as a byproduct\n\n# creates commitinfo.h.  Ninja needs the BYPRODUCTS clause in the\n\n# add_custom_command() signature.  GNU make and Visual Studio do not.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Key to all of this working as expected is the fact that CMake does not\n\n# test to see that add_custom_command() actually creates the OUTPUT file\n\n# named in add_custom_command().  In the Hercules CMake build,\n\n# add_custom_command _does not_ by design create the named OUTPUT file,\n\n# which ensures the target and the command are run on every build.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# It is not clear that the following is necessary.  commitinfo.h is not\n\n# named in a target source files list (doing so creates problems when\n\n# building with GNU make).  But it does not hurt, so we leave it in.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We need not re-link targets if a dependent target that is a shared\n\n# library is rebuilt unless header(s) in common between the target and\n\n# the dependent target have changed (so-called interface headers.)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Map source files to targets.  A variable <libname>_sources is created\n\n# for each shared library, dynamically loaded module, or executable.\n\n# The shared libraries are comprised of lots of files.  The dynamically\n\n# modules and executables have relatively few, but it makes sense to\n\n# keep all mapping of sources to targets in one script.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Addition of a file to one of the libraries, modules, or executables\n\n# should just mean changing Herc61_SlibSource.cmake, with no changes\n\n# needed elsewhere.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create a dummy target for the general Hercules headers so that\n\n# things look good when someone opens the configured Hercules\n\n# in Visual Studio.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Take note: targets in lower case are the imported targets for the\n\n# libraries built by externalproject_add() targets.  These imported\n\n# targets need to be included in the target_link_libraries() command\n\n# included in herc_Define_Shared_Lib().  Targets in mixed/upper case\n\n# are the externalproject_add() targets that must be built before\n\n# the targets that need the external shared libraries.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For each external package that is enabled, ensure the package include\n\n# directories are available for the pre-compiled header target and the\n\n# package is a dependency of the PCH target.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Add the decNumber subdirectories.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create the core Hercules shared library targets:\n\n#  - hercs - Hercules system data areas\n\n#  - hercu - Hercules core utilities\n\n#  - hercd - Hercules DASD utilities\n\n#  - herct - Hercules tape utilities\n\n#  - herc  - Hercules core engine\n\n#\n\n# Shared libraries are loaded when Hercules begins execution.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Needed to trigger commitinfo.h build\n",
        "Line" : 177,
        "CharPositionInLine" : 50
      },
      "17" : {
        "Text" : "# When building on UNIX-like and macOS systems, the expectation is that\n\n# any REXX package is installed in a system directory.  On Windows, the\n\n# public header directories and link libraries must be explicitly added.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If the builder did not specify a given external package directory,\n\n# then we need to add a dependency on the external package so that it\n\n# gets built.  If the builder did provide a directory, then it is\n\n# already built and dependency is not needed.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Take note: targets in mixed case are the externalproject_add() targets\n\n# that must be built before hercs, hence the dependencies on hercs to\n\n# get the external procjects built before hercs.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create targets for the dynamically loaded device interface modules.\n\n# Dynamically loaded modules are loaded by Hercules when a device is\n\n# attached.  They are not unloaded except as directed by the rmmod\n\n# command.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create targets for other dynamically loaded modules.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Crypto must be built after Hercules as it requires the hercs library\n\n# (really the static shared storage area for Hercules).  The dependency\n\n# on hercu will take care of this, as hercu is dependent on hercs.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## The dyncrypt module needs to be built with its own headers in\n\n## addition to those required for the rest of Hercules.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#target_include_directories( dyncrypt BEFORE PRIVATE\n\n#        ${PROJECT_BINARY_DIR}\n\n#        ${PROJECT_SOURCE_DIR}/crypto\n\n#        ${PROJECT_SOURCE_DIR}\n\n#      )\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# It is not clear to this author why target_link_libraries() is\n\n# required for Windows and Apple target systems and not required when\n\n# building for UNIX-like target systems.  Something to investigate.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create targets for the utility executables.  These are straightforward.\n\n# The shared library includes are transitive in CMake; if hercd needs\n\n# hercu, there is no need to mention hercu here.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Remove all include directories from the compilation of herctest.\n\n# Herctest.c does not require any Hercules headers, and the\n\n# presence of getopt.h in the Hercules source directory interferes\n\n# with that extant in the host's system libraries.   Herctest.c\n\n# has its own getopt.c/.h, used when compiling on Windows systems.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Define the target for the main executable Hercules.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Note that Hercules, unlike the above utilities, must export its\n\n# symbols because it dlopen()'s itself.  The set_target_properties\n\n# directive takes care of this.\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Deal with HERCIFC\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Herc20_TargetEnv.CMake decided whether hercifc should be built.  If\n\n# is, do so, and set up any post-install commands to setuid and chgrp.\n\n# Permissions and setuid are easy enough, but unfortunately, CMake does\n\n# not provide an easy way to set file ownership or group ownership post-\n\n# install.  Nor is there an easy way to do a post-install script that\n\n# take care of the group ownership.  So for the moment we shall punt\n\n# and issue a \"For the nonce...\" message.\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "###         chgrp $(HERCIFC_GROUPNAME) $(DESTDIR)$(bindir)/hercifc  (from makefile.am install-exec-hook.)\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Define the target for the external repository containing the manual\n\n# pages for Hercules.  Clone/update them into the build directory for\n\n# later installation.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# No Configure\n\n# No build\n\n# No patches\n\n# No updates\n\n# ..and no install.\n",
        "Line" : 414,
        "CharPositionInLine" : 36
      },
      "35" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create CMake test cases from the contents of the tests directory.  Add\n\n# a target 'check' for compatibility with the autotools-generated\n\n# Makefile build script.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create the uninstall target.  (Credit to Kitware for posting the\n\n# solution here: https://cmake.org/Wiki/RecipeAddUninstallTarget\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "CMake/Herc61_SlibSource.cmake" : {
      "ObjectId" : "b2bd3bc9450d4a5b6b2e6421160371650d7f138e",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc60_SlibSource.cmake - Identify source files needed for each\n\n#                           Hercules module\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n\nAt the end of this script, a number of adjustments are made to the\nsource file list to accomodate the differences between a build on\nUNIX-like systems and Windows build.  Comments explain the differences.\n\n\n]]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------\n\n#\n\n# Collect the source files required to build each Hercules executable.\n\n#\n\n#-----------------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For each executable, create a variable name <libname>_sources.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disk Utilities\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tape utilities\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Test driver\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------\n\n#\n\n# Collect the source files required to build each dynamically-loaded\n\n# Hercules module.\n\n#\n\n#-----------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For each module, create a variable name <modname>_sources.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The following shared libraries are set up:\n\n# -  altcmpsc - The \"alternate\" Compression algorithm (now standard)\n\n# -  dyncrypt - z/Architecture crypto instructions\n\n# -  dyngui   - GUI Hercules Console support\n\n# -  dyninst  - Dynamic loadable instruction module support\n\n# -  hdt1052c - Device handler for integrated operator console\n\n# -  hdt1403  - Printer emulation device handler\n\n# -  hdt2703  - Communications Controller emulation device handler\n\n# -  hdt2880  - Block mux channel emulation device handler (experimental)\n\n#  - hdt3088  - Channel-to-channel adapter device handler\n\n#  - hdt3270  - Console device handler for device types 3270 or\n\n#                  1052/3215 assigned to tn3270 or telnet connections.\n\n#  - hdt3420  - Tape device handler\n\n#  - hdt3505  - Card reader emulation device handler\n\n#  - hdt3525  - Card punch emulation device handler\n\n#  - hdt3705  - Communications controller emulation device handler\n\n#  - hdtzfcp  - z Fiber Channel Protocol Interface translator\n\n#  - hdtptp   - Point-to-Point CTC adapter device handler\n\n#  - hdtqeth  - Ethernet adapter device handler\n\n#  - s37x     - Extensions to System/370, which include a number of\n\n#               ESA/370 or better instructions.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Module altcmpsc: Alternate Compression algorithm (now standard)\n\n#-----------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Module dyncrypt: z/Architecture crypto instructions.  While the\n\n##                  source files are in a subdirectory, the loadable\n\n##                  module is built in the same directory as other\n\n#                   loadable modules.\n\n#-----------------------------------------------------------------------\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Module dyngui: GUI Hercules Console support\n\n#-----------------------------------------------------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Module dyninst: Dynamic loadable instruction module support\n\n#-----------------------------------------------------------------------\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdtteq: Device type equivalency table and scan routine\n\n#-----------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt1052c: Device handler for keyboard/printer operator console\n\n#                  emulation on the Hercules console.\n\n#-----------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt1403: Printer emulation device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt2703: Communications Controller emulation device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt2880 Block multiplexer channel emulation device handler\n\n#                 (Experimental, not presently used)\n\n#-----------------------------------------------------------------------\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt3088: Channel-to-channel device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt3270: Console device handler for device types 3270 or\n\n#                 1052/3215 assigned to tn3270 or telnet connections.\n\n#-----------------------------------------------------------------------\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt3420: Tape emulation device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt3505: Card reader emulation device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt3525: Card punch emulation device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdt3705: Communications controller emulation device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdtzfcp: z Fiber Channel Protocol Interface translator\n\n#-----------------------------------------------------------------------\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdtptp: Channel-to-channel point-to-point device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Module hdtqeth: Ethernet adapter device handler\n\n#-----------------------------------------------------------------------\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Module s37x: Extensions to System/370, which include a number of\n\n##               ESA/370 or better instructions.\n\n#-----------------------------------------------------------------------\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#-----------------------------------------------------------------------\n\n#\n\n# Collect the source files required to build each shared Hercules library.\n\n# Shared libraries are loaded by the host OS when the Hercules executable\n\n# is loaded.\n\n#\n\n#-----------------------------------------------------------------------\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# For each shared library, create a variable name <libname>_sources.\n\n#\n\n# The following shared libraries are set up:\n\n#  - herc    - Hercules main engine\n\n#  - hercs   - Common Data Areas\n\n#  - hercu   - General Hercules utility routines\n\n#  - hercd   - Disk device common logical routines\n\n#  - herct   - Tape device common logical routines\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Library hercd: DASD utility subroutines (shared)\n\n#-----------------------------------------------------------------------\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Library hercs: Static shared global data areas\n\n#-----------------------------------------------------------------------\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-----------------------------------------------------------------------\n\n# Library herct: Tape utility subroutines (shared)\n\n#-----------------------------------------------------------------------\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Library hercu: Pure Utility functions\n\n#-----------------------------------------------------------------------\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Library herc: The core Hercules engine\n\n#-----------------------------------------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#-----------------------------------------------------------------------\n\n## Headers: Interface library headers, sources for all headers used\n\n##          in the project.\n\n#-----------------------------------------------------------------------\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#[[\n-----------------------------------------------------------------------\n  Adjustments to source file name lists needed for a Windows build.\n-----------------------------------------------------------------------\n\nMake changes to sources needed if we are building on Windows.  Mostly\nthis means including compilation units that define Windows versions of\nfunctions that are common in UNIX-like systems.  Tape and CTC support\nneeds to be provided to match that common in UNIX-like systems, and\nmpc.c needs to be moved from the two shared libraries that need it to\nherc, the main Hercules engine shared library.\n\nWhen built on Windows, mpc.c includes code that requires that it be\nincluded as part of the Hercules engine shared library herc.  Only\ntwo libraries use mpc.c, so it could be moved to each of those libraries\nprovided the following code change is made.  Specifically, at line 10\nof mpc.c, remove:\n\n    #if !defined(_HENGINE_DLL_)\n    #define _HENGINE_DLL_\n    #endif\n\nand when you do this, you must also, at line 12 of mpc.h, change this:\n\n    #ifndef _MPC_C_\n    #ifndef _HENGINE_DLL_\n    #define MPC_DLL_IMPORT DLL_IMPORT\n    #else   /* _HENGINE_DLL_ */\n    #define MPC_DLL_IMPORT extern\n    #endif  /* _HENGINE_DLL_ */\n    #else\n    #define MPC_DLL_IMPORT DLL_EXPORT\n    #endif\n\ninto this:\n\n    #ifndef _MPC_C_\n    #define MPC_DLL_IMPORT extern\n    #else\n    #define MPC_DLL_IMPORT DLL_EXPORT\n    #endif\n\nNone of this matters in non-Windows builds because DLL_EXPORT is\ndefined as a null string and DLL_IMPORT is defined as extern.\n\nThe separately-loaded S37X module, and on UNIX-like systems, it is.\nBut on Windows, the activation code in s37x.c is linked into the main\nherc engine and the much larger separately loaded module just contains\nthe implementation of s37x.c.\n\n]]",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add source files for the one Windows-specific executable\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Add Windows-specific files to shared libraries that need them.\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# The Windows build expects mpc.c to be in herc, not in the device\n\n# shared libraries.  Move it.\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# The Windows build expects the s37x.c bootstrapper to be in herc,\n\n# not in the S37x shared library.  Move it.\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Add the resource libraries to the source lists for the shared\n\n# hercules libraries.  The resource files add a pretty icon\n\n# and version/modification information.\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Engine shared libraries\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Disk utitilies\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Tape utilities\n",
        "Line" : 715,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Other Utilities and the main executable\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "CMake/Herc65_ExtPackageWinCopy.cmake" : {
      "ObjectId" : "58fa1566626507552272ba377bdacaaf1ab39fef",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Herc65_ExtPackageInstall.cmake - Install CMake external package shared\n\n#                                  libraries needed to execute Hercules\n\n#                                  from the install directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\n\nFunction/Operation\n- Create commands that run post-build to copy the shared library(s)\n  to the Hercules binary directory for use when Hercules is run from\n  the build directory.  This is required ONLY for Windows; on UNIX-\n  like target systems, CMake assembles a build RPATH that includes the\n  directories for dependent targets.  On install, the RPATH is updated\n  to point to the Hercules install directory.\n- Shared libraries from the following packages are copied in all cases:\n  . BZip2\n  . PCRE\n  . Zlib\n- If Hercules was built as a 32-bit application on a 64-bit system and\n  one or both REXX interpreters, Open Object Rexx and Regina Rexx, are\n  included in Hercules, then their respective shared libraries are also\n  copied to the release directory.  The assumption is that the system\n  PATH statement points to the 64-bit REXX interpreters, with the\n  the result that the 32-bit Hercules will find and attempt to load\n  a 64-bit REXX .dll.  This is a bad thing.\n\nInput Parameters\n- All parameters are passed as CMake -D options before the -P\n  Herc65_ExtPackageWinCopy.cmake option.\n- IN1, IN2, and IN3 identify the full path names of the library files\n  that are to be copied.  If the path name ends -NOTFOUND, or the path\n  does not exist, the file is not copied.\n- OUT identifies the directory name of the Hercules target executable\n  to which the library files are to be copied.  It is expected but not\n  required that -DOUT= be completed with a generator expression that\n  identifies the Hercules executable directory.  This approach addresses\n  the issue of placing the shared library executable in the correct\n  directory for the current build, Release or Debug.\n\nOutput\n- The external package shared libraries are copied to the directory\n  containing the Hercules executable.  This is a de facto requirement\n  for execution on Windows.  The generator expression\n  $<TARGET_FILE_DIR:hercules> nicely and transparently identifies this\n  directory.\n\nNotes\n- This script should not be invoked for non-Windows builds, and if it\n  is, configure is aborted with an error message.\n- This author is not certain what needs to happen for mac OS Xcode\n  builds.  Alteration of this script and the process surrounding it\n  are distinct possibilities.\n\n]]",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some bullet-proofing\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Copy the BZip2 shared library from its directory to the Hercules build\n\n# directory.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Copy the PCRE shared library from its directory to the Hercules build\n\n# directory.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note that PCRE includes two targets: PCRE and PCREPOSIX.  Because the\n\n# two libraries represent different interfaces to the same functionality,\n\n# HAVE_PCRE_TARGET is treated as indicating both must\n\n# be copied.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Copy the Zlib shared library from its directory to the Hercules build\n\n# directory.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# If this is a 32-bit build on a 64-bit system and Regina Rexx support\n\n# was included in Hercules, copy the regina.dll and rxutil.dll shared\n\n# libraries from their directory to the Hercules build directory.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "CMake/herc_setWindowsTarget.cmake" : {
      "ObjectId" : "97b2b8050e47bbe23d323f04555c41b9d7c5ccd8",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# herc_setWindowsTarget.cmake - Set Windows API target version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[ ###########   macro herc_setWindowsTarget   ###########\n\nFunction/Operation\n- Translates a symbolic Windows target version into a descriptive\n  target version.\n- If a specific version of Windows is the target, the variables\n  WINVER, _WIN32_WINNT, and NTDDI_VERSION are set to the hex values\n  that correspond to the target.\n- If an invalid target version is specified, the returned descriptive\n  target version is set to ${Windows_version}-NOTFOUND.\n\nInput Parameters\n- WinTarget: symbolic name of the minimum Windows version that compiled\n  code should target.  In addition to the Windows version names listed\n  in the variable Windows_versions, the following symbolic values are\n  allowed:\n  - DIST: Target the oldest version of Windows listed in Windows_versions.\n    \"DIST\" means code is being compiled for distribution.\n  - HOST: Target the version of Windows being used to compile.  In this\n    case, WINVER, _WIN32_WINNT, and NTDDI_VERSION are not set, and the\n    Windows userland will build for the host.\n  - <blank>: a synonym for HOST.\n\nOutput\n- If the symbolic target \"DIST\" is passed, then Windows_version is set\n  the first value in the Windows_version list, and WINVER, _WIN32_WINNT,\n  and NTDDI_VERSION are set to the hex values corresponding to that\n  version.\n- If the symbolic target \"HOST\" is passed, the host Windows header\n  sdkddtver.h is analyzed to extract the WINVER hex string, that hex\n  string is translated into the corresponding Windows version text, and\n  WINVER, _WIN32_WINNT, and NTDDI_VERSION are not set.\n  - If the hex string indicates a Windows version newer than the highest\n    supported version of Windows, the highest supported version of\n    Windows is reported with a \"+\" suffix.\n  - If the hex string indicates a Windows version lower than the lowest\n    supported version of Windows, Windows_version is set to\n    ${Windows_version}-NOTFOUND.\n- If any other version of Windows is requested, WINVER, _WIN32_WINNT,\n  and NTDDI_VERSION are set to the hex values for that Windows version.\n- If an invalid symbolic target version is passed, Windows_version is\n  set to ${Windows_version}-NOTFOUND.\n- If the build will target a valid Windows version, a message is issued\n  naming the target Windows version.\n\nNotes\n- Windows target version names and codes are defined in Windows_versions\n  and Windows_vercodes, respectively.  The version names names are our\n  own invention; the hex strings are defined by Microsoft and documented\n  here:\n\n    https://msdn.microsoft.com/en-us/library/windows/desktop/aa383745(v=vs.85).aspx\n\n  They are also defined in Windows header SDKDDKVer.h (the source for\n  the Windows 10 values).\n- The lowest supported version of Windows and its corresponding hex code\n  must be the first element in the list, in orderby hex code.\n- The highest supported version of Windows and its corresponding hex code\n  must be the last element in the list, in orderby hex code.\n\nNote that the versions listed reflect the Software Development Kit (SDK)\nversion, not the underlying host/target system.  The Windows SDK 6.0A\nincluded with Visual C++ 2008 SP1 Express Edition, for example, reports\nWindows Vista as the default target.\n\n]]",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# decrement max into rel 0 index\n",
        "Line" : 84,
        "CharPositionInLine" : 56
      },
      "4" : {
        "Text" : "# DIST means use the lowest supported Windows version as the target\n\n# for compilations.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# HOST or blank means target for the Windows version of the host\n\n# System.  See if the host is at least at the minimum version and\n\n# determine the appropriate descriptive string.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Only one line in sdkddkver.h will match the above REGEX.  Extract\n\n# the Windows version code.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# NOTE: above test fails on EBCDIC systems because numbers colate\n\n# higher than letters on such systems.  ***************************\n\n# Target system Windows version higher than current highest known\n\n# supported Windows Version.  It will probably work.  Label it\n\n# WIN10+ and leave the target variables unset to accept the host\n\n# version as the target version.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Host Windows version at or below highest supported, or is an\n\n# invalid Windows version string.\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Host is too old, not supported.\n",
        "Line" : 120,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "# Host is supported.  Get descriptor\n",
        "Line" : 122,
        "CharPositionInLine" : 18
      },
      "11" : {
        "Text" : "# A Windows version was specified.  It must be in the list.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Host is not in list, invalid,\n",
        "Line" : 131,
        "CharPositionInLine" : 38
      },
      "13" : {
        "Text" : "# Host is supported.  Get descriptor\n",
        "Line" : 134,
        "CharPositionInLine" : 14
      },
      "14" : {
        "Text" : "# Set the Windows version codes if required because a caller specified\n\n# DIST or a specific version of Windows.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "CMakeLists.txt" : {
      "ObjectId" : "b2887c784b7bdbb6aba1f2912b11b82e25a568c7",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt - top-level driver for CMake Hercules Build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017-2019 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMakeLists.txt used to build Hercules and its separate component library\n\n# dyncrypto.  Also used to build the separately-licensed decNumber library.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#[[-------------------------------------------------------------------------\n\n            Shortcomings/shortcuts/work remaining:\n\n- This has been tested on Debian 8.6 (Jessie) using the Unix Makefile\n  generator, with GNU Make doing the build under the covers.  The command\n  `cmake --build .` invokes make.\n- This has been tested on FreeBSD 11.0 using the Unix Makefile generator\n  and using the Ninja generator.\n\n\n\n           To Do List\n- Write a prolog(ue) to match that written for CMakeHercGitVer.cmake\n- Write a brief task-oriented update tutorial, to deal with at least\n  adding a new compilation unit to an existing executable or shared\n  library, a new executable, a new shared library.  For extra credit,\n  document the addition of a test for a new required function in an existing\n  library and one in a new library.\n\n\n--------------------------------------------------------------------------- ]]",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Preamble: basic CMake setup, prevent an in-source build, set\n\n# configuration type(s), set the minimum CMake version required, and\n\n# define the install directory structure appropriate for the target\n\n# system.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# No errors detected yet\n",
        "Line" : 44,
        "CharPositionInLine" : 65
      },
      "6" : {
        "Text" : "# 3.4 is required for the Windows export library support.\n",
        "Line" : 46,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "#  cmake_policy(SET CMP0048 NEW)          # Set version variables from project directive\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use new policies in effect as of 3.4\n",
        "Line" : 48,
        "CharPositionInLine" : 39
      },
      "9" : {
        "Text" : "# Enable shallow git clones if using CMake 3.6 or better.  The GIT_SHALLOW\n\n# option and its value must be passed in two variables; CMake will not\n\n# accept them in a single string.  These two variables are used in\n\n# Herc03_ExtPackageBuild.cmake.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Git to be at least 1.8.5.1; 1.8.5 fails.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set GIT_FOUND, GIT_EXECUTABLE, and GIT_VERSION_STRING\n",
        "Line" : 62,
        "CharPositionInLine" : 29
      },
      "12" : {
        "Text" : "# Prevent an in-source build.  REALPATH resolves any symlinks.  There is\n\n# no way to programatically remove CMakeCache.txt nor CMakeFiles/*\n\n# from within a CMakeLists.txt, so we must just instruct the builder.\n\n# And if the builder fails to clean up the source directory, the stale\n\n# CMakeCache.txt file in the source directory will confound the build\n\n# process until it is removed.  So check for it, and if one is found,\n\n# complain and fail the configure.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Everything (almost) in Hercules must be compiled with position-\n\n# independent code, so we shall just make it global.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Determine the configuration type if using a single-configuration\n\n# generator, and remove extraneous configuration types if using a\n\n# multiple-configuration generator.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generator in use creates build scripts for exactly one configuration.\n\n# Determine whether this is a release or debug build.\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# For generators that support multiple configurations with build-time\n\n# configuration selection (Visual Studio or mac OS Xcode), CMake\n\n# defaults to four configurations: Release, Debug, MinSizeRel, and\n\n# RelWithDebInfo.  For now, only the first two are needed.  Remove the\n\n# other two.\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# It is deucedly difficult to determine which bitness of Windows is\n\n# being configured by CMake.  If using the NMake, JOM, or Ninja\n\n# generators, the Windows environment variable PLATFORM is either x86\n\n# or x64.  If using any Visual Studio generator, the bitness may be\n\n# either a suffix to the generator name (\"Win64\") or specified by the\n\n# CMake --build option -A [Arch], which may be either x86 or x64.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Assume 32-bit build for now\n",
        "Line" : 160,
        "CharPositionInLine" : 32
      },
      "19" : {
        "Text" : "# Case 1: Single configuration generator in a 64-bit Visual Studio\n\n#         command prompt.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Case 2: Visual Studio generator with 64-bit architecture specified\n\n#         using -A x64.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Case 3: Visual Studio generator with 64-bit architecture specified\n\n#         using Win64 suffix on generator name.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# There is also some CMAKE_INSTALL_PREFIX fixup to be done when using\n\n# the NMake Makefiles generator on Windows.  This generator always\n\n# assumes an install prefix of \"C\\Program Files (x86)\\<projname>\", but\n\n# the actual bitness of the build is set by which Visual Studio command\n\n# prompt is used.  The Windows variable PLATFORM identifies the bitness\n\n# of the Visual Studio command prompt; we will remove \" (x86)\" from\n\n# the install prefix for 64-bit builds.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# And if the builder specifies CMAKE_INSTALL_PREFIX, we will leave it\n\n# alone.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define variables for the installation targets, one for libraries, one for\n\n# executables, one for the html content.  The relative paths are used in\n\n# install() directives, and the full paths are passed to the compiler in\n\n# config.h for documentation purposes.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Note that for Windows targets, the package name is included in\n\n# CMAKE_INSTALL_PREFIX; the documentation of this variable is incorrect\n\n# through CMake release 3.6.3.  See the gitlab report at\n\n# https://gitlab.kitware.com/cmake/cmake/issues/16211.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# For non-Windows builds, we will append the project name to the share\n\n# directory, which is used for http sources.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the expected installation directory structure, assuming a\n\n# default CMAKE_INSTALLATION_PREFIX:\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Windows 64-bit:\n\n#   c:\\Program Files\\Hercules         Executables and DLLs\n\n#   c:\\Program Files\\Hercules\\share   http server root\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Windows 32-bit:\n\n#   c:\\Program Files (x86)\\Hercules         Executables and DLLs\n\n#   c:\\Program Files (x86)\\Hercules\\share   http server root\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# UNIX-like systems:\n\n#   /usr/local/bin/                   executables and dynamic libraries\n\n#   /usr/local/lib/                   shared libraries and loadable modules\n\n#   /usr/local/share/Hercules         http server root\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# install dir for executables\n\n# install dir for shared libraries (DLL)\n\n# install dir for loadable modules (DLL)\n\n# module search rel dir (inst. dir)\n\n# module search rel dir (build dir)\n\n# install dir for web server files\n\n# web server default root rel to exe.\n",
        "Line" : 232,
        "CharPositionInLine" : 36
      },
      "32" : {
        "Text" : "# executables destination\n\n# install dir for shared libraries (.so or .dylib)\n\n# install dir for loadable modules (.so)\n",
        "Line" : 240,
        "CharPositionInLine" : 31
      },
      "33" : {
        "Text" : "# module search rel dir (inst. dir)\n\n# module search rel dir (build dir)\n",
        "Line" : 243,
        "CharPositionInLine" : 40
      },
      "34" : {
        "Text" : "# install dir for web server files\n\n# web server default root rel to exe.\n",
        "Line" : 245,
        "CharPositionInLine" : 50
      },
      "35" : {
        "Text" : "# Single configuration generator creates the html directory as a\n\n# subdirectory of the build directory, which is also the directory that\n\n# contains the executables.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Multi-configuration generator creates the executable directory *AND*\n\n# the html directory as subdirectories of the build build directory.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Define sets of useful constant strings.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Define list of supported compilers and Intel processers for IN_LIST\n\n# tests.  See https://cmake.org/cmake/help/v3.4/variable/CMAKE_LANG_COMPILER_ID.html\n\n# for a complete list of possible values for CMAKE_C_COMPILER_ID.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Lists of supported Intel processor types, used for optimization and flag\n\n# setting when compiling for an Intel target.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Windows target version names and codes, used to ensure compilations\n\n# target the correct version of the Windows internal API.  The names are\n\n# our own invention; the hex strings are defined by Microsoft and\n\n# documented at https://msdn.microsoft.com/en-us/library/windows/desktop/aa383745(v=vs.85).aspx\n\n# and in header SDKDDKVer.h.  The specified or default version code is\n\n# included in the generated config.h; the default version is the version\n\n# of the target machine and SDK used to build Hercules.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Sundry other helpful list definitions\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Reference strings for library names.  libm is required and the build\n\n# will be failed if it is missing.  The remaining libraries are included\n\n# in the build if required for the target system (librt, libnsl) or by\n\n# build options (libcap).\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# IEEE math library, needed for STSI instruction\n\n# POSIX real time extensions library, needed for Solaris\n\n# Nameserver lookup library, needed for Solaris\n\n# POSIX 1003.1e capabilities interface library\n\n# Socket library for Solaris, HP-UX, maybe others\n",
        "Line" : 312,
        "CharPositionInLine" : 34
      },
      "44" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Set up CMake to correctly probe the target system.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Ensure /usr/local/include is part of the compiler preprocessor -I\n\n# includes.  We may wish to do the same for /usr/local/lib.  And\n\n# because the local directory is used to build Hercules, it should\n\n# also be used for all CMake tests for public headers.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Set c compiler flag string to a) enable all warnings and b) treat all\n\n# warnings as errors.  This must be done early because herc12_OptEdit.cmake\n\n# does compilations to edit options.  These flags are only used during\n\n# probes of the target system; they are not the start of the C compiler\n\n# option string that will be used to build Hercules.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#  ALL CMake functions needed for this build should be included here.\n\n#  CMake functions create the enviroment used by this build.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Enable endian test\n\n# Enable tests for valid c compiler flags\n\n# Enable tests for types and their sizes\n\n# Enable tests for include headers\n\n# Enable tests for specific libraries\n\n# Enable tests for membership in a structure\n\n# Enable existence tests for symbols & function prototypes\n\n# Enable tests for function existence\n\n# Enable tests of function prototypes\n\n# Enable tests for specific symbols\n\n# Required for implicitly loaded Windows DLLs\n\n# enable build of SoftFloat-3a, other\n\n# external projects\n",
        "Line" : 351,
        "CharPositionInLine" : 36
      },
      "49" : {
        "Text" : "# Include test directives\n\n# Enable them\n",
        "Line" : 365,
        "CharPositionInLine" : 36
      },
      "50" : {
        "Text" : "# Enable creation of installable binary and source packages\n",
        "Line" : 368,
        "CharPositionInLine" : 36
      },
      "51" : {
        "Text" : "# CPack: required to build CPack installers\n",
        "Line" : 369,
        "CharPositionInLine" : 43
      },
      "52" : {
        "Text" : "# Get Hercules-specific CMake functions and macros\n",
        "Line" : 371,
        "CharPositionInLine" : 39
      },
      "53" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Define all user options and edit them.  If user option HELP is defined,\n\n# CMakeHercOptEdit.cmake will display help and return without doing any\n\n# other processing.  And if help is displayed, then nothing else is done.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# define user options and build defaults\n",
        "Line" : 381,
        "CharPositionInLine" : 46
      },
      "55" : {
        "Text" : "# edit all provided user options\n",
        "Line" : 383,
        "CharPositionInLine" : 46
      },
      "56" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# probe the target system hardware, operating system, userland, and c\n\n# compiler.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# collect info about the target system\n",
        "Line" : 394,
        "CharPositionInLine" : 46
      },
      "58" : {
        "Text" : "# There are two userland tests specific to macOS.  Apart from that,\n\n# userland testing for macOS is the same as that for UNIX-like systems.\n\n# So while macOS might merit a separate userland script on principle, it\n\n# makes little sense to split the script for two tests when there is so\n\n# much overlap otherwise.  Maybe later if additional tests are needed.\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# check for Windowns userland requirements.\n",
        "Line" : 403,
        "CharPositionInLine" : 50
      },
      "60" : {
        "Text" : "# check for userland requirements.\n",
        "Line" : 405,
        "CharPositionInLine" : 50
      },
      "61" : {
        "Text" : "# Probe the characteristics of the c compiler.  For the moment we assume\n\n# that if the MSVC compiler is not in use, the compiler is gcc-like\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# check compiler capabilities\n",
        "Line" : 412,
        "CharPositionInLine" : 47
      },
      "63" : {
        "Text" : "# check compiler capabilities\n",
        "Line" : 414,
        "CharPositionInLine" : 50
      },
      "64" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Interpret builder-specified options in the context of the target\n\n# system.  Set compiler and build options based accordingly.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Make selected options effective\n",
        "Line" : 423,
        "CharPositionInLine" : 46
      },
      "66" : {
        "Text" : "# Five different routines are used to set options for the c compiler,\n\n# one each for clang, gcc, Apple gcc, Windows, and unknown.  Expect\n\n# additional routines for Windows-clang, Apple-clang, Intel C, and AIX.\n\n# If we can find test articles.\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# When the c compiler is not recognized, there is little we can do, but\n\n# we can let the builder specify an optimization string.  If a builder\n\n# expects automatic optimization with an unrecognized compiler, we will\n\n# abort the build.\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# This should really be done in the respective Herc31.  Note that\n\n# any specified ADD-CFLAGS have already been edited for valitidy\n\n# in Herc12_OptEdit.cmake.\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Anything that can abort the build has already been detected.  If there\n\n# are any error messages, send them to stderr and abort the build.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Define targets for the external projects used by Hercules.  For now,\n\n# external packages include BZip2, SoftFloat-3a For Hercules, and Zlib.\n\n# When the target system is Windows, PCRE is added to that list.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Assemble the include directory set, the link library set, and the\n\n# install RPATH (UNIX-like only).  Create a configured config.h.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Include directories for compiles.  The binary directory will include\n\n# config.h.  The decNumber directory precedes the source directory so\n\n# that we get the authoritative public headers, not just something that\n\n# lets an IDE do reasonable incremental compilation.\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Assemble the link library string to be used for compilation units.  This\n\n# is done in one place rather than just adding libraries as the need is\n\n# identified so that link library ordering can be addressed explicitly\n\n# in one place rather than as a side effect of library test order.\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Set the RPATH to be used by UNIX-like and macOS systems when running\n\n# Hercules from the build directory and when installing Hercules.\n\n# Windows does not use RPATH.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Use (don't skip) the full RPATH for the build tree, and do not use the\n\n# install directory RPATH when building.  This enables execution from\n\n# the build directory prior to install.  CMake correctly handles setup\n\n# of RPATH for execution from the build tree, regardless of whether\n\n# external packages are built by the Hercules CMake build or previously\n\n# built outside the Hercules build tree.\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# CMake will update the RPATH in place in the executable or shared\n\n# library when installing.\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Note that CMake only includes path(s) for shared libraries in the\n\n# build RPATH.  It does not include paths for dynamically loaded\n\n# mobules.  If loadable module paths need to be in the build RPATH,\n\n# they need to be coded.  Hercules doees not require this because\n\n# loadable modules are built in the same directory as the executable,\n\n# but if that changes, add code here to deal with it.\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# when building, don't use the install RPATH\n\n# only later when installing\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# define the RPATH relative to the executable path\n\n# will make possible to move around/rename the \"PREFIX\" path\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# add the automatically determined parts of the RPATH\n",
        "Line" : 564,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# If Hercules is to be installed in other than a standard location for\n\n# the target system, include the non-standard lib directory in the\n\n# installation RPATH.  The lib directory is relative to $ORIGIN, the\n\n# linking loader's synonym for the directory from which the executable\n\n# was fetched.\n",
        "Line" : 574,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# Following inspired by the CMake Wiki RPATH page at\n\n# https://cmake.org/Wiki/CMake_RPATH_handling.\n\n# See that page for copyright, attribution, and license.\n",
        "Line" : 580,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# End of code inspired by Wiki\n",
        "Line" : 590,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# create config.h.\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# ----------------------------------------------------------------------\n\n# Create the initial commitinfo.h.  This file will be recreated on each\n\n# build when the git repository has been updated.\n\n# ----------------------------------------------------------------------\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# If the source directory is a git repository, extract the git status into\n\n# commitinfo.h so the status can be displayed on startup.  If not a git\n\n# repository, then create a dummy commitinfo.h to enable the build.  The\n\n# script CMakeHercGitVer.cmake issues a few user messages, so we will\n\n# do the top border here.\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Share some information about where things are going and how they get there.\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# ----------------------------------------------------------------------\n\n#\n\n# Create all targets and tests needed to build Hercules.\n\n#\n\n# ----------------------------------------------------------------------\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# If the target system is Windows, create targets to copy the external\n\n# package DLLs to the directory that contains the Hercules executable.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Copy the tests directory to the build tree so that execution of test\n\n# scripts do not require the source tree.\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# That's it.\n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#### ##--------------------------------------------------------------#\n\n#### ##  AIX-specific stuff - not presently supported in the build.  #\n\n#### ##  A willing tester would be a great help.                     #\n\n#### ##--------------------------------------------------------------#\n\n#### #\n\n#### #if test \"$hc_cv_is_aix\" = \"yes\"; then\n\n#### #\n\n#### #  if test \"$target_os\" = \"$host_os\"; then\n\n#### #\n\n#### #    # Not cross-compiling (likely case); use same architecture\n\n#### #    # as that of the actual hardware (CPU) as reported by the\n\n#### #    # prtconf -c  ==> \"CPU Type: 32-bit\" or \"CPU Type: 64-bit\"\n\n#### #\n\n#### #    if prtconf -c | grep '64' 1>/dev/null 2>&1\n\n#### #    then\n\n#### #      hc_cv_build_aix64=yes\n\n#### #    else\n\n#### #      hc_cv_build_aix64=no\n\n#### #    fi\n\n#### #  else\n\n#### #    # Cross-compiling (unlikely case); rely on value of OBJECT_MODE\n\n#### #    # variable to tell us for which architecture they want to build...\n\n#### #\n\n#### #    if echo $OBJECT_MODE | grep '64' 1>/dev/null 2>&1\n\n#### #    then\n\n#### #      hc_cv_build_aix64=yes\n\n#### #    else\n\n#### #      hc_cv_build_aix64=no\n\n#### #    fi\n\n#### #  fi\n\n#### #  if test \"$hc_cv_build_aix64\" = \"yes\"; then\n\n#### #    if test \"$GCC\" = \"yes\"; then\n\n#### #      CC=\"$CC -maix64\"\n\n#### #      CXX=\"$CXX -maix64\"\n\n#### #    else\n\n#### #      # VisualAge presumed...\n\n#### #      CC=\"$CC -q64\"\n\n#### #      CXX=\"$CXX -q64\"\n\n#### #    fi\n\n#### #    test \"$AR\" = \"\" && AR=\"ar\"\n\n#### #    test \"$NM\" = \"\" && NM=\"nm\"\n\n#### #    AR=\"$AR -X64\"\n\n#### #    NM=\"$NM -X64 -B\"\n\n#### #  fi\n\n#### #  LDFLAGS=\"$LDFLAGS -L/usr/local/lib\"\n\n#### #  CPPFLAGS=\"$CPPFLAGS -I/usr/local/include -D_LARGE_FILES -D_LFS_LARGEFILE -D_LINUX_SOURCE_COMPAT\"\n\n#### #fi\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "#### ##----------------------------------------------------------------#\n\n#### ##  The following is also AIX-specific accorting to README.AIX,   #\n\n#### ##  but there is no preprocessor code in Hercules to test it at   #\n\n#### ##  the moment.                                                   #\n\n#### ##----------------------------------------------------------------#\n\n#### #\n\n#### #if test \"$hc_cv_have_sys_mtio_h\" = \"yes\"; then\n\n#### #\n\n#### #  AC_CHECK_MEMBERS( [struct mtget.mt_gstat],\n\n#### #                    [hc_cv_have_mtget_mt_gstat=yes  ],\n\n#### #                    [hc_cv_have_mtget_mt_gstat=no   ],\n\n#### #                    [#include <sys/mtio.h>] )\n\n#### #fi\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "Makefile.am" : {
      "ObjectId" : "7901a90d893eb6b02c1c4e11edde014df4a3cb0f",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ***************************************************************************\n\n# Makefile for Hercules S/370, ESA/390 and z/Architecture emulator\n\n# Process this file with 'automake' to produce Makefile.in\n\n# ***************************************************************************\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOte! Due to inter-module dependencies the sequence\n\n#\t\t  (ordering) of the SUBDIRS list is important!\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need to still include the source for the dynamic modules\n\n# in with the distribution regardless of whether or not the dyanmic\n\n# modules themselves are to be built so if dynamic load not possible,\n\n# then we need to include the source on the EXTRA_hercules_SOURCES\n\n# statement so even though they won't/don't actually get built, they\n\n# still nonetheless get included into distribution tarball. This is\n\n# *similar* to (bit not identical to) the way the fthreads sources\n\n# are handled. With the fthreads sources though, they can at least always\n\n# be built (even though they may not always generate any actual code\n\n# whenever they do) whereas the dynamic module source CANNOT (MUST not)\n\n# even be *attempted* to be \"built\" if support for building dynamic modules\n\n# doesn't even exist on the system doing the building.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -module\t\t\t:\tcreate a dlopen'able module\n\n# -no-undefined\t:\trequired on all platform that do not allow\n\n#\t\t\t\t\t\t\tshared modules to have undefined symbols\n\n# $(LDADD)\t\t\t:\tMisc Linker flags set by autoconf\n\n# -export-dynamic :\tso dlsym works (to be verified -\n\n#\t\t\t\t\t\t\tnot sure whether it is necessary)\n\n# -avoid-version\t:\tneeded.. Otherwise libtool gives crazy names\n\n#\t\t\t\t\t\t\tto Windows DLLs\n\n#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# List of Libtool shared libraries & loadable modules\n\n#\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The following causes the dynamic modules to not even get built\n\n# unless support for building dynamic modules exists on the build system\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# For each module:\n\n#\n\n#\t ModuleName_la_SOURCES\t\t = <list of source files>\n\n#\t ModuleName_la_LDFLAGS\t\t = $(DYNMOD_LD_FLAGS) (see above)\n\n#\t ModuleName_la_LIBADD\t\t = libherc.la (the Core Hercules Shared Library)\n\n#\t ModuleName_la_DEPENDENCIES = libherc.la (may not be necessary)\n\n#\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Common data areas (shared) library\n\n#\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Tape utility subroutines (shared) library\n\n#\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# DASD utility subroutines (shared) library\n\n#\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n## Pure Utility functions\n\n#\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Core Hercules (shared) library\n\n#\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n#\tTHIS is the hercules executable.\n\n#\thdlmain.c is requires so that dlopen(self) retrieves\n\n#\tthe 'main' hdl symbols\n\n#\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# side binaries\n\n#\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# Files that are not 'built' per-se\n\n# Also contains some WIN32 only source files\n\n#\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# Source Header files. No 'build' for those\n\n#\n",
        "Line" : 861,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#########################################################\n\n#\t\t\t\t\t B U I L D\t R U L E S\t. . .\n\n#########################################################\n\n#\n\n#\t\t\t\t  ***\tPROGRAMMING NOTE!  ***\n\n#\n\n#\t The tabs in the BELOW build rules ARE significant!\n\n#\n\n#\t (the preceding assignment statements can use blanks)\n\n#\n\n#\t Not all make programs accept (handle correctly)\n\n#\t make files that use blanks instead of tabs in their\n\n#\t build rules. Thus in order to remain compatible\n\n#\t with older make programs the below build rules\n\n#\t MUST use *tabs* and NOT BLANKS!\n\n#\n\n#########################################################\n",
        "Line" : 990,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# NOTE : symbolic links point to FINAL destination (not to staged install)\n\n#\n",
        "Line" : 1020,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# PROGRAMMING NOTE: the following two rules cause only ieee.c to be\n\n# recompiled whenever the interface to Softfloat 3a is changed.\n\n# Changes to softfloat.h and softfloat_types.h are evidence of same.\n",
        "Line" : 1061,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "crypto/Makefile.am" : {
      "ObjectId" : "ea6facd6255b475da5b752e164a6089a24ee0173",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n\n#\n\n# Makefile for Hercules S/370, ESA/390 and z/Architecture emulator\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "decNumber/CMakeLists.txt" : {
      "ObjectId" : "ab55f6b99105d18c8bcce964a5dc3baa246ec9b9",
      "LastModified" : "2019-01-30T13:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# decNumber/CMakeLists.txt - CMake Hercules Build for the decNumber library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the decNumber shared library.  This build script depends on many\n\n# things being done by the script in the parent directory, including\n\n# CMake minimum version, policy settings, in-source build prevention,\n\n# and variables defining the build environment.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include the export definitions file if building under Windows\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If building on Windows, disable C4244 \"conversion from 'x' to 'y',\n\n# possible loss of data\"  This needs to be done here because much of\n\n# decNumber does not include config.h, where it could be done as\n\n# a pragma, and because we do not wish to suppress 4244 for all of\n\n# Hercules.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install the shared library, which is included in LIBRARY on non-DLL\n\n# platforms and in RUNTIME on DLL platforms.  The Windows import\n\n# library is included in ARCHIVE, which is not required because\n\n# decNumber is consumed by other targets in this script.  If\n\n# decNumber gets built as an external package, then ARCHIVE would be\n\n# needed in the install command.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include directories for compiles.  The decNumber library is not\n\n# sensitive to the target system, so it needs no exposure to the tests\n\n# performed by the parent CMakeLists.txt or the config.h generated\n\n# therefrom.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link directories.  There is no need for the decNumber link to reference\n\n# objects outside the decNumber directory.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if building on Windows, add a post-build command to copy the generated\n\n# DLL to the project build directory from the decNumber build directory.\n\n# If CMake is using a multi-configuration generator, the copy must be\n\n# from and to the configuration type subdirectory.  This is not needed on\n\n# UNIX-like and macOS target systems because the build RPATH created by\n\n# CMake takes care of this.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Single configuration generator\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Multi-configuration generator\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "decNumber/Makefile.am" : {
      "ObjectId" : "5e7f3c45822138a4b87509c328527c7ed95ff185",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n\n#\n\n# Makefile for building the decNumber package\n\n# for use with Hercules S/370, ESA/390 and z/Architecture emulator\n\n#\n\n# This file was added by the Hercules project.\n\n# It is not part of the original decNumber distribution.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "html/Makefile.am" : {
      "ObjectId" : "12dda4b75322340c7ed1db6add997761341ebedd",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "m4/Makefile.am" : {
      "ObjectId" : "dcb8a63e271d576bcfaf9fa74d951adc76d223f7",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "man/Makefile.am" : {
      "ObjectId" : "9be3425300d18e6ebf8df1bc10bcbd30805ab2a2",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "9068bbde3358f32b5c53fab954784389e15d3fe9",
      "LastModified" : "2019-02-20T00:51:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tests/CMakeLists.txt - Create CTest tests for Hercules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[   Copyright 2017 by Stephen Orso.\n\n      Distributed under the Boost Software License, Version 1.0.\n      See accompanying file BOOST_LICENSE_1_0.txt or copy at\n      http://www.boost.org/LICENSE_1_0.txt)\n]]",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[[\nThis script defines CTest tests to be made available when building\nHercules.  At present only one test is created: an execution of\nruntest to run the Hercules test suite.\n\nOpportunities for expansion include variations on runtest to exclude\ncrypto testing for those systems that do not support it and addition\nof tests for the offline utilities like dasdinit.\n]]",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# test that dyncrypt is loadable.\n",
        "Line" : 35,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "# InterlockedAccess Facility 2 tests\n\n# Prefixed storage testing\n",
        "Line" : 51,
        "CharPositionInLine" : 20
      },
      "5" : {
        "Text" : "# if Zlib is included, include the hetbsf test, which needs Zlib.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determine the pointer size.  On UNIX-like systems, config.h is in the\n\n# same directory as the Hercules executable, and herctest will parse\n\n# it to determine the pointer size.  When using Windows Visual Studio,\n\n# the Hercules executable is built in a subdirectory.  In either case,\n\n# we can just determine the pointer size from CMAKE_SIZEOF_VOID_P and\n\n# provide it in a -v parameter.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create CMake tests, one per test group.  Each CMake test uses one\n\n# invocation of runtest to run the tests in the test group.  Tests\n\n# are provided to runtest in the order they were listed in the test\n\n# group.  It is presumed that runtest runs the tests in the specified\n\n# order.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Accumulate -f options for the test, one per test case in the group.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Create the CMake test case.  The runtest command assumes that the\n\n# tests directory has been copied to the build directory.  The\n\n# runtest timer is slowed (-t 10) to avoid false positives when\n\n# testing on a busy system.\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "tests/Makefile.am" : {
      "ObjectId" : "d562b219567bc67bba995de0d97f898f2cd3015d",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# The following rule requires the environment APATH to be set to the\n\n# location of SATK before making, for example:\n\n# export APATH=/usr/data/src/SATK/tools\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can clone SATK from\n\n# git@github.com:s390guy/SATK.git\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "util/Makefile.am" : {
      "ObjectId" : "c80340cdd67f1d66807876ec8255860bf196c368",
      "LastModified" : "2018-03-08T20:36:36Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "AUTOMAKE" : 8
  },
  "ElapsedTime" : 2345
}