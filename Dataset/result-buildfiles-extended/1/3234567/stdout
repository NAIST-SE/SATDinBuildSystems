{
  "Repository" : "3234567",
  "Revision" : "HEAD",
  "ObjectId" : "6ee169018e7bfd935bb8330683733b430a08bd7f",
  "CommitTime" : "2019-04-06T07:26:17Z",
  "Files" : {
    "src/CMakeLists.txt" : {
      "ObjectId" : "74dd23caa110a1b142232d5f9a1972f6c08346fb",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Project settings\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add custom cmake modules path\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Output build settings\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "src/CMakeModules/Bootstrap_Linux.cmake" : {
      "ObjectId" : "845bb3ce4239478ac83a6f148d68c2a5188313b0",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine build (target) platform\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needed for precompiled headers to work\n",
        "Line" : 71,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# swprintf on Linux seems to always use , as decimal point regardless of C-locale or C++-locale\n",
        "Line" : 72,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# Needed for precompiled headers to work\n",
        "Line" : 74,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : "# Needed for precompiled headers to work\n",
        "Line" : 76,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# Needed for precompiled headers to work\n",
        "Line" : 77,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# Allow signal handler to throw exception\n",
        "Line" : 81,
        "CharPositionInLine" : 44
      },
      "7" : {
        "Text" : "# Help TBB figure out what compiler support for c++11 features\n\n# https://github.com/01org/tbb/issues/22\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# http://stackoverflow.com/questions/7172670/best-shortest-way-to-join-a-list-in-cmake\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#fixes escaping\n",
        "Line" : 147,
        "CharPositionInLine" : 63
      },
      "CommentCount" : 10
    },
    "src/CMakeModules/Bootstrap_Windows.cmake" : {
      "ObjectId" : "c4e00b9edb1616ace162fa68708c7511487e5481",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# http://stackoverflow.com/questions/7172670/best-shortest-way-to-join-a-list-in-cmake\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#fixes escaping\n",
        "Line" : 57,
        "CharPositionInLine" : 63
      },
      "2" : {
        "Text" : "# BOOST\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FFMPEG\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TBB\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# GLEW\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SFML\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FREEIMAGE\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#ZLIB\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# OPENAL\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LIBERATION_FONTS\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CEF\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/CMakeModules/FindBoost.cmake" : {
      "ObjectId" : "4a55588862fc090d50381eb2938826205ea8defb",
      "LastModified" : "2018-02-07T14:57:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#                            # e.g. \"date_time\" for \"libboost_date_time\"\n\n#     [OPTIONAL_COMPONENTS <libs>...]\n\n#                            # Optional Boost libraries by their canonical name)\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   Boost::boost                  - Target for header-only dependencies\n\n#                                   (Boost include directory)\n\n#   Boost::<C>                    - Target for specific component dependency\n\n#                                   (shared or static library); <C> is lower-\n\n#                                   case\n\n#   Boost::diagnostic_definitions - interface target to enable diagnostic\n\n#                                   information about Boost's automatic linking\n\n#                                   during compilation (adds BOOST_LIB_DIAGNOSTIC)\n\n#   Boost::disable_autolinking    - interface target to disable automatic\n\n#                                   linking with MSVC (adds BOOST_ALL_NO_LIB)\n\n#   Boost::dynamic_linking        - interface target to enable dynamic linking\n\n#                                   linking with MSVC (adds BOOST_ALL_DYN_LINK)\n\n#\n\n# Implicit dependencies such as Boost::filesystem requiring\n\n# Boost::system will be automatically detected and satisfied, even\n\n# if system is not specified when using find_package and if\n\n# Boost::system is not added to target_link_libraries.  If using\n\n# Boost::thread, then Threads::Threads will also be added automatically.\n\n#\n\n# It is important to note that the imported targets behave differently\n\n# than variables created by this module: multiple calls to\n\n# find_package(Boost) in the same directory or sub-directories with\n\n# different options (e.g. static or shared) will not override the\n\n# values of the targets created by the first call.\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_DEBUG_LIBS     - Set to ON or OFF to specify whether to search\n\n#                              and use the debug libraries.  Default is ON.\n\n#   Boost_USE_RELEASE_LIBS   - Set to ON or OFF to specify whether to search\n\n#                              and use the release libraries.  Default is ON.\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.  A list may be\n\n#                              used if multiple compatible suffixes should\n\n#                              be tested for, in decreasing order of\n\n#                              preference.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n\n#                              Boost_LIBRARY_DIR_DEBUG.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost libraries and use imported targets::\n\n#\n\n#   find_package(Boost 1.56 REQUIRED COMPONENTS\n\n#                date_time filesystem iostreams)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo Boost::date_time Boost::filesystem\n\n#                             Boost::iostreams)\n\n#\n\n# Example to find Boost headers and some *static* (release only) libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON)  # only find static libs\n\n#   set(Boost_USE_DEBUG_LIBS         OFF) # ignore debug libs and\n\n#   set(Boost_USE_RELEASE_LIBS       ON)  # only find release libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save project's policies\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if IN_LIST\n",
        "Line" : 222,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Restore project's policies\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# if the generator is multi-config or if CMAKE_BUILD_TYPE is set for\n\n# single-config generators, set optimized and debug libraries\n",
        "Line" : 281,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# For single-config generators where CMAKE_BUILD_TYPE has no value,\n\n# just use the release libraries\n",
        "Line" : 287,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 291,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Detect changes in used variables.\n\n# Compares the current variable value with the last one.\n\n# In short form:\n\n# v != v_LAST                      -> CHANGED = 1\n\n# v is defined, v_LAST not         -> CHANGED = 1\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\n\n# otherwise                        -> CHANGED = 0\n\n# CHANGED is returned in variable named ${changed_var}\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# Find the given library (var).\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\n\n#\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 376,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Good luck!\n",
        "Line" : 461,
        "CharPositionInLine" : 59
      },
      "29" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 462,
        "CharPositionInLine" : 34
      },
      "30" : {
        "Text" : "# VS 6.0 Good luck!\n",
        "Line" : 463,
        "CharPositionInLine" : 11
      },
      "31" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 464,
        "CharPositionInLine" : 34
      },
      "32" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 474,
        "CharPositionInLine" : 36
      },
      "33" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 482,
        "CharPositionInLine" : 36
      },
      "34" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 485,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 489,
        "CharPositionInLine" : 14
      },
      "36" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 493,
        "CharPositionInLine" : 14
      },
      "37" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 498,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 508,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "#\n\n# Get component dependencies.  Requires the dependencies to have been\n\n# defined for the Boost release version.\n\n#\n\n# component - the component to check\n\n# _ret - list of library dependencies\n\n#\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Note: to add a new Boost release, run\n\n#\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\n\n#\n\n# The output may be added in a new block below.  If it's the same as\n\n# the previous release, simply update the version range of the block\n\n# for the previous release.  Also check if any new components have\n\n# been added, and add any new components to\n\n# _Boost_COMPONENT_HEADERS.\n\n#\n\n# This information was originally generated by running\n\n# BoostScanDeps.cmake against every boost release to date supported\n\n# by FindBoost:\n\n#\n\n#   % for version in /path/to/boost/sources/*\n\n#     do\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\n\n#     done\n\n#\n\n# The output was then updated by search and replace with these regexes:\n\n#\n\n# - Strip message(STATUS) prefix dashes\n\n#   s;^-- ;;\n\n# - Indent\n\n#   s;^set(;    set(;;\n\n# - Add conditionals\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\n\n#\n\n# This results in the logic seen below, but will require the xxxx\n\n# replacing with the following Boost release version (or the next\n\n# minor version to be released, e.g. 1.59 was the latest at the time\n\n# of writing, making 1.60 the next, so 106000 is the needed version\n\n# number).  Identical consecutive releases were then merged together\n\n# by updating the end range of the first block and removing the\n\n# following redundant blocks.\n\n#\n\n# Running the script against all historical releases should be\n\n# required only if the BoostScanDeps.cmake script logic is changed.\n\n# The addition of a new release should only require it to be run\n\n# against the new release.\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\n",
        "Line" : 810,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#\n\n# Get component headers.  This is the primary header (or headers) for\n\n# a given component, and is used to check that the headers are present\n\n# as well as the library itself as an extra sanity check of the build\n\n# environment.\n\n#\n\n# component - the component to check\n\n# _hdrs\n\n#\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Note: new boost components will require adding here.  The header\n\n# must be present in all versions of Boost providing a library.\n",
        "Line" : 823,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# message(STATUS \"Headers for Boost::${component}: ${_boost_HDRS_STRING}\")\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "#\n\n# Determine if any missing dependencies require adding to the component list.\n\n#\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\n\n# defined; FALSE if dependency information is unavailable).\n\n#\n\n# componentvar - the component list variable name\n\n# extravar - the indirect dependency list variable name\n\n#\n\n#\n",
        "Line" : 880,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\n\n# _boost_processed_components - components already processed (or currently being processed)\n\n# _boost_new_components - new components discovered for future processing\n\n#\n",
        "Line" : 892,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "#\n\n# Some boost libraries may require particular set of compler features.\n\n# The very first one was `boost::fiber` introduced in Boost 1.62.\n\n# One can check required compiler features of it in\n\n# `${Boost_ROOT}/libs/fiber/build/Jamfile.v2`.\n\n#\n",
        "Line" : 923,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Boost >= 1.62 and < 1.67\n",
        "Line" : 930,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "#\n\n# Update library search directory hint variable with paths used by prebuilt boost binaries.\n\n#\n\n# Prebuilt windows binaries (https://sourceforge.net/projects/boost/files/boost-binaries/)\n\n# have library directories named using MSVC compiler version and architecture.\n\n# This function would append corresponding directories if MSVC is a current compiler,\n\n# so having `BOOST_ROOT` would be enough to specify to find everything.\n\n#\n",
        "Line" : 950,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 990,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\n\n# configurations.\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 1017,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 1023,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n\n#\n\n# Note: When adding a new Boost release, also update the dependency\n\n# information in _Boost_COMPONENT_DEPENDENCIES and\n\n# _Boost_COMPONENT_HEADERS.  See the instructions at the top of\n\n# _Boost_COMPONENT_DEPENDENCIES.\n",
        "Line" : 1029,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 1050,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 1053,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 1056,
        "CharPositionInLine" : 8
      },
      "59" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 1062,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Supply Boost_LIB_DIAGNOSTIC_DEFINITIONS as a convenience target. It\n\n# will only contain any interface definitions on WIN32, but is created\n\n# on all platforms to keep end user code free from platform dependent\n\n# code.  Also provide convenience targets to disable autolinking and\n\n# enable dynamic linking.\n",
        "Line" : 1088,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 1099,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 1108,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 1112,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 1129,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 1142,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1164,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1170,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 1206,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 1211,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 1216,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1243,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1251,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 1255,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 1263,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 1289,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 1302,
        "CharPositionInLine" : 6
      },
      "79" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 1315,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1324,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1338,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 1355,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 1363,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag for the 'tagged' and 'versioned' layouts\n\n# http://boost.org/doc/libs/1_66_0/more/getting_started/windows.html#library-naming\n\n# http://boost.org/doc/libs/1_66_0/boost/config/auto_link.hpp\n\n# http://boost.org/doc/libs/1_66_0/tools/build/src/tools/common.jam\n\n# http://boost.org/doc/libs/1_66_0/boostcpp.jam\n",
        "Line" : 1383,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 1391,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 1398,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 1407,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 1411,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 1413,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n\n#           removed from the documentation in 1.43.0 but still present in\n\n#           boost/config/auto_link.hpp\n",
        "Line" : 1419,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "#  -x86     Architecture and address model tag\n\n#           First character is the architecture, then word-size, either 32 or 64\n\n#           Only used in 'versioned' layout, added in Boost 1.66.0\n",
        "Line" : 1427,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# {CMAKE_CXX_COMPILER_ARCHITECTURE_ID} is not currently set for all compilers\n",
        "Line" : 1431,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# This needs to be kept in-sync with the section of CMakePlatformId.h.in\n\n# inside 'defined(_WIN32) && defined(_MSC_VER)'\n",
        "Line" : 1434,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1461,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1470,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\n",
        "Line" : 1476,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 1525,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 1535,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 1547,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 1561,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# Additional components may be required via component dependencies.\n\n# Add any missing components to the list.\n",
        "Line" : 1569,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\n",
        "Line" : 1573,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 1584,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 1603,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 1616,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 1626,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1630,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 1642,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\n",
        "Line" : 1674,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1680,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1692,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\n",
        "Line" : 1725,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1731,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Check if component requires some compiler features\n",
        "Line" : 1750,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1755,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1760,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1776,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1779,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Optional indirect dependencies are not counted as missing.\n",
        "Line" : 1790,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1800,
        "CharPositionInLine" : 4
      },
      "121" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1827,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1830,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1840,
        "CharPositionInLine" : 6
      },
      "124" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1858,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Add imported targets\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1865,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 1870,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\n\n# libraries as a result.\n",
        "Line" : 1886,
        "CharPositionInLine" : 10
      },
      "128" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1933,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1959,
        "CharPositionInLine" : 6
      },
      "130" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1972,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1987,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 2000,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "# Restore project's policies\n",
        "Line" : 2009,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 134
    },
    "src/CMakeModules/FindCEF.cmake" : {
      "ObjectId" : "7528879cff7163953d5630ac6b0707dc130b51bc",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeModules/FindFFmpeg.cmake" : {
      "ObjectId" : "a5560d80841dc3dab942014e7232baf2828b1cb1",
      "LastModified" : "2018-02-07T14:57:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: ts=2 sw=2\n\n# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)\n\n#\n\n# Once done this will define\n\n#  FFMPEG_FOUND         - System has the all required components.\n\n#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.\n\n#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.\n\n#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.\n\n#\n\n# For each of the components it will additionally set.\n\n#   - AVCODEC\n\n#   - AVDEVICE\n\n#   - AVFORMAT\n\n#   - AVFILTER\n\n#   - AVUTIL\n\n#   - POSTPROC\n\n#   - SWSCALE\n\n# the following variables will be defined\n\n#  <component>_FOUND        - System has <component>\n\n#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers\n\n#  <component>_LIBRARIES    - Link these to use <component>\n\n#  <component>_DEFINITIONS  - Compiler switches required for using <component>\n\n#  <component>_VERSION      - The components version\n\n#\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2011, Michael Jansen, <kde@michael-jansen.biz>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The default components were taken from a survey over other FindFFMPEG.cmake files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n### Macro: set_component_found\n\n#\n\n# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(STATUS \"  - ${_component} found.\")\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# message(STATUS \"  - ${_component} not found.\")\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n### Macro: find_component\n\n#\n\n# Checks for the given component by invoking pkgconfig and then looking up the libraries and\n\n# include directories.\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 62,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# Check for cached results. If there are skip the costly part.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for all possible component.\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check if the required components were found and add their stuff to the FFMPEG_* vars.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# message(STATUS \"Required component ${_component} present.\")\n",
        "Line" : 116,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# message(STATUS \"Required component ${_component} missing.\")\n",
        "Line" : 122,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Build the include path with duplicates removed.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Build the lib path with duplicates removed.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# cache the vars.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Now set the noncached _FOUND vars for the components.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Compile the list of required vars\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Give a nice error message if some of the required vars are missing.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/CMakeModules/FindFreeImage.cmake" : {
      "ObjectId" : "ad72ebb67653bacb717f4ebc41cb0bbdc5fc1790",
      "LastModified" : "2018-02-07T14:57:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find FreeImage includes and library\n\n#\n\n# This module defines\n\n#  FreeImage_INCLUDE_DIRS\n\n#  FreeImage_LIBRARIES, the libraries to link against to use FreeImage.\n\n#  FreeImage_LIBRARY_DIRS, the location of the libraries\n\n#  FreeImage_FOUND, If false, do not try to use FreeImage\n\n#\n\n# Copyright © 2007, Matt Williams\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Do some preparation\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/CMakeModules/FindGLFW.cmake" : {
      "ObjectId" : "f0c6dc2c5a4a81d1a1ea9a637f415096d8f664f3",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#   Copyright 2013 Pixar\n\n#\n\n#   Licensed under the Apache License, Version 2.0 (the \"Apache License\")\n\n#   with the following modification; you may not use this file except in\n\n#   compliance with the Apache License and the following modification to it:\n\n#   Section 6. Trademarks. is deleted and replaced with:\n\n#\n\n#   6. Trademarks. This License does not grant permission to use the trade\n\n#      names, trademarks, service marks, or product names of the Licensor\n\n#      and its affiliates, except as required to comply with Section 4(c) of\n\n#      the License and to reproduce the content of the NOTICE file.\n\n#\n\n#   You may obtain a copy of the Apache License at\n\n#\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n#   Unless required by applicable law or agreed to in writing, software\n\n#   distributed under the Apache License with the above modification is\n\n#   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\n#   KIND, either express or implied. See the Apache License for the specific\n\n#   language governing permissions and limitations under the Apache License.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find GLFW library and include path.\n\n# Once done this will define\n\n#\n\n# GLFW_FOUND\n\n# GLFW_INCLUDE_DIR\n\n# GLFW_LIBRARIES\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# XXX: Do we still need to search for GL/glfw.h?\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# (*)NIX\n",
        "Line" : 139,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Tease the GLFW_VERSION numbers from the lib headers\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/CMakeModules/FindSFML.cmake" : {
      "ObjectId" : "2454f7d67361d3d9869d8207f224f75e5c8c2c12",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(SFML COMPONENTS graphics window system) # find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(SFML COMPONENTS ...)     # no specific version required\n\n#   find_package(SFML 2 COMPONENTS ...)   # any 2.x version\n\n#   find_package(SFML 2.4 COMPONENTS ...) # version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n\n# Since you have to link yourself all the SFML dependencies when you link it statically, the following\n\n# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\n\n# description below).\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n\n# to tell CMake where SFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n\n# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n\n# - SFML_FOUND:        true if all the required modules are found\n\n# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n\n# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SFML version is < 2.0\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 121,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 135,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\n",
        "Line" : 195,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\n",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of SFML libraries\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# No lookup in environment variables (PATH on Windows), as they may contain wrong library versions\n",
        "Line" : 245,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# sfml-system\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 257,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# sfml-network\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 274,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# sfml-window\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# find libraries\n",
        "Line" : 285,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# update the list\n",
        "Line" : 295,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# sfml-graphics\n",
        "Line" : 308,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# find libraries\n",
        "Line" : 312,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# update the list\n",
        "Line" : 316,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# sfml-audio\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# find libraries\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# update the list\n",
        "Line" : 333,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# handle errors\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# SFML version not ok\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# fatal error\n",
        "Line" : 354,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# error but continue\n",
        "Line" : 357,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# handle success\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    },
    "src/CMakeModules/FindSndFile.cmake" : {
      "ObjectId" : "0399968680172ab4a64b5b65abf79403325a488c",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Found on http://hg.kvats.net\n\n#\n\n# - Try to find libsndfile\n\n#\n\n# Once done this will define\n\n#\n\n#  SNDFILE_FOUND - system has libsndfile\n\n#  SNDFILE_INCLUDE_DIRS - the libsndfile include directory\n\n#  SNDFILE_LIBRARIES - Link these to use libsndfile\n\n#\n\n#  Copyright (C) 2006  Wengo\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the SNDFILE_INCLUDE_DIRS and SNDFILE_LIBRARIES variables only in the advanced view\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/CMakeModules/FindTBB.cmake" : {
      "ObjectId" : "2d77bb747ad6fb1f39a8654cf16391d42e98d0be",
      "LastModified" : "2018-02-07T14:57:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ThreadingBuildingBlocks include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(TBB\n\n#    [REQUIRED]             # Fail with error if TBB is not found\n\n#    )                      #\n\n# Once done, this will define\n\n#\n\n#  TBB_FOUND - system has TBB\n\n#  TBB_INCLUDE_DIRS - the TBB include directories\n\n#  TBB_LIBRARIES - TBB libraries to be lined, doesn't include malloc or\n\n#                  malloc proxy\n\n#\n\n#  TBB_VERSION_MAJOR - Major Product Version Number\n\n#  TBB_VERSION_MINOR - Minor Product Version Number\n\n#  TBB_INTERFACE_VERSION - Engineering Focused Version Number\n\n#  TBB_COMPATIBLE_INTERFACE_VERSION - The oldest major interface version\n\n#                                     still supported. This uses the engineering\n\n#                                     focused interface version numbers.\n\n#\n\n#  TBB_MALLOC_FOUND - system has TBB malloc library\n\n#  TBB_MALLOC_INCLUDE_DIRS - the TBB malloc include directories\n\n#  TBB_MALLOC_LIBRARIES - The TBB malloc libraries to be lined\n\n#\n\n#  TBB_MALLOC_PROXY_FOUND - system has TBB malloc proxy library\n\n#  TBB_MALLOC_PROXY_INCLUDE_DIRS = the TBB malloc proxy include directories\n\n#  TBB_MALLOC_PROXY_LIBRARIES - The TBB malloc proxy libraries to be lined\n\n#\n\n#\n\n# This module reads hints about search locations from variables:\n\n#  ENV TBB_ARCH_PLATFORM - for eg. set it to \"mic\" for Xeon Phi builds\n\n#  ENV TBB_ROOT or just TBB_ROOT - root directory of tbb installation\n\n#  ENV TBB_BUILD_PREFIX - specifies the build prefix for user built tbb\n\n#                         libraries. Should be specified with ENV TBB_ROOT\n\n#                         and optionally...\n\n#  ENV TBB_BUILD_DIR - if build directory is different than ${TBB_ROOT}/build\n\n#\n\n#\n\n# Modified by Robert Maynard from the original OGRE source\n\n#\n\n#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n\n#\n\n#=============================================================================\n\n# Copyright 2010-2012 Kitware, Inc.\n\n# Copyright 2012      Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n#  FindTBB helper functions and macros\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#===============================================\n\n# Do the final processing for the package find.\n\n#===============================================\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#mark the following variables as internal variables\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#===============================================\n\n# Generate debug names from given release names\n\n#===============================================\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#===============================================\n\n# See if we have env vars to help us find tbb\n\n#===============================================\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 106,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#===============================================\n\n# Couple a set of release AND debug libraries\n\n#===============================================\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#=============================================================================\n\n#  Now to actually find TBB\n\n#\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# initialize search paths\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If user built from sources\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# include directory under ${ENV_TBB_ROOT}/include\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# For Windows, let's assume that the user might be using the precompiled\n\n# TBB packages from the main website. These use a rather awkward directory\n\n# structure (at least for automatically finding the right files) depending\n\n# on platform and compiler, but we'll do our best to accommodate it.\n\n# Not adding the same effort for the precompiled linux builds, though. Those\n\n# have different versions for CC compiler versions and linux kernels which\n\n# will never adequately match the user's setup, so there is no feasible way\n\n# to detect the \"best\" version to use. The user will have to manually\n\n# select the right files. (Chances are the distributions are shipping their\n\n# custom version of tbb, anyway, so the problem is probably nonexistent.)\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# for each prefix path, add ia32/64\\${COMPILER_PREFIX}\\lib to the lib search path\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# For OS X binary distribution, choose libc++ based libraries for Mavericks (10.9)\n\n# and above and AppleClang\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# check compiler ABI\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Assume compatibility with 4.4 for other compilers\n",
        "Line" : 234,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# if platform architecture is explicitly specified\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# add general search paths\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#if we haven't found TBB no point on going any further\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#=============================================================================\n\n# Look for TBB's malloc package\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#=============================================================================\n\n# Look for TBB's malloc proxy package\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#=============================================================================\n\n#parse all the version numbers from tbb\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#only read the start of the file\n",
        "Line" : 337,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 26
    },
    "src/CMakeModules/PlatformIntrospection.cmake" : {
      "ObjectId" : "1c287572a8e0741324dbd6d76087088a91b49bc7",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns a simple string describing the current architecture. Possible\n\n# return values currently include: amd64, x86_64, x86.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# target_arch is used by environment.bat to represent the desired\n\n# target architecture, so use that value first if set.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We tweak MacOS, which for some reason claims to be i386\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# QQQ MacOS 10.7 could be 32-bit; we should catch and abort\n",
        "Line" : 14,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# If user didn't specify the arch via target_arch or\n\n# CB_DOWNLOAD_DEPS_ARCH, assume that the target is the same as\n\n# the current host architecture and derive that from\n\n# Windows-provided environment variables.\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Returns a lowercased version of a given lsb_release field.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Returns a simple string describing the current platform. Possible\n\n# return values currently include: windows_msvc2015; windows_msvc (implies\n\n# MSVC 2013); macosx; or any value from _DETERMINE_LINUX_DISTRO.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Returns a simple string describing the current Linux distribution\n\n# compatibility. Possible return values currently include:\n\n# ubuntu14.04, ubuntu12.04, ubuntu10.04, centos5, centos6, debian7, debian8.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Linux Mint is an Ubuntu derivative; estimate nearest Ubuntu equivalent\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Just use the major version from the CentOS/Debian identifier - we don't\n\n# need different builds for different minor versions.\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Returns number of CPUs the system has. The value can be overwritten by the\n\n# CB_CPU_COUNT environment variable. If neither of these work, return some\n\n# (hopefully) reasonable default.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sets _platform to the name of the current platform if it is a supported\n\n# platform, or a False value otherwise.\n\n# \"Supported\" means that we produce and distribute builds to\n\n# customers on that platform.\n\n# QQQ This list should come from manifest/product-config.json ultimately.\n\n# _platform is in the same format as _DETERMINE_PLATFORM().\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# First get the current platform\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# .. and check it against the list, returning it if found.\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "src/CMakeModules/PrecompiledHeader.cmake" : {
      "ObjectId" : "40f619b4b0698ea39214b4f6f1f090b3ab943e33",
      "LastModified" : "2018-02-07T14:57:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function for setting up precompiled headers. Usage:\n\n#\n\n#   add_library/executable(target\n\n#       pchheader.c pchheader.cpp pchheader.h)\n\n#\n\n#   add_precompiled_header(target pchheader.h\n\n#       [FORCEINCLUDE]\n\n#       [SOURCE_C pchheader.c]\n\n#       [SOURCE_CXX pchheader.cpp])\n\n#\n\n# Options:\n\n#\n\n#   FORCEINCLUDE: Add compiler flags to automatically include the\n\n#   pchheader.h from every source file. Works with both GCC and\n\n#   MSVC. This is recommended.\n\n#\n\n#   SOURCE_C/CXX: Specifies the .c/.cpp source file that includes\n\n#   pchheader.h for generating the pre-compiled header\n\n#   output. Defaults to pchheader.c. Only required for MSVC.\n\n#\n\n# Caveats:\n\n#\n\n#   * Its not currently possible to use the same precompiled-header in\n\n#     more than a single target in the same directory (No way to set\n\n#     the source file properties differently for each target).\n\n#\n\n#   * MSVC: A source file with the same name as the header must exist\n\n#     and be included in the target (E.g. header.cpp). Name of file\n\n#     can be changed using the SOURCE_CXX/SOURCE_C options.\n\n#\n\n# License:\n\n#\n\n# Copyright (C) 2009-2013 Lars Christensen <larsch@belunktum.dk>\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the 'Software') deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/accelerator/CMakeLists.txt" : {
      "ObjectId" : "bbe6483cdf0cd68e7c145dad1e43646cff4b2b7f",
      "LastModified" : "2019-03-05T18:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/common/CMakeLists.txt" : {
      "ObjectId" : "8276b54ac8575f2646d29ceb6eda11bfbd354aba",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "1640fbd1ab32811e95e983a0b0846d4aa7499c00",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/CMakeLists.txt" : {
      "ObjectId" : "160f44e3722a3bad569a7d008e0d90909ba4b7b8",
      "LastModified" : "2019-04-03T19:11:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/bluefish/CMakeLists.txt" : {
      "ObjectId" : "5e54830f57203e99c6080fd58b70a4354c048d43",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/decklink/CMakeLists.txt" : {
      "ObjectId" : "56cb2393121e17784caa141a1c7273525b4a595b",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/ffmpeg/CMakeLists.txt" : {
      "ObjectId" : "f18de6689744df38c6eb3bbfc30dacd76072cff4",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/flash/CMakeLists.txt" : {
      "ObjectId" : "a1b96db526a0c1d2f3384babda668dceca461391",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/html/CMakeLists.txt" : {
      "ObjectId" : "3778c68f830732fce6c4fbe80fb8cf01fafd5dfc",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/image/CMakeLists.txt" : {
      "ObjectId" : "bf34fa8520d4af4802457a1ddd89dc765252c0db",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/newtek/CMakeLists.txt" : {
      "ObjectId" : "4109a8dbcb51d1939a790dac4e39577c2b1d2115",
      "LastModified" : "2019-04-03T19:11:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/oal/CMakeLists.txt" : {
      "ObjectId" : "64ff4d8d8bfa9a764e2b8aaa48dc28d689bdf36f",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/screen/CMakeLists.txt" : {
      "ObjectId" : "0ac9029f01f49e595e3c0b4cc718f09629452a32",
      "LastModified" : "2019-04-03T19:11:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/protocol/CMakeLists.txt" : {
      "ObjectId" : "e14a81ffaa207d4d39e1fdeb43a90c789ce0332e",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shell/CMakeLists.txt" : {
      "ObjectId" : "50c101faf77bf060c36439d7cb943dc5773f2af1",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#jpeg.lib\n\n#sndfile.lib\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Disabled as HTML module is disabled\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "dcc20b27f940d13d2edd69df1f6cab0f2a53f076",
      "LastModified" : "2019-02-25T19:45:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 29
  },
  "ElapsedTime" : 2279
}