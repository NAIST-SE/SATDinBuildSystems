{
  "Repository" : "28347026",
  "Revision" : "HEAD",
  "ObjectId" : "c19e558b3358cf9c6bf6c41b4af92338f242878a",
  "CommitTime" : "2019-04-17T16:03:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "977804e7826dd6380286b6b235a71239ed628cbe",
      "LastModified" : "2019-03-12T15:27:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set dynamic library version\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HARP format version\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General setup\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Option handling\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that we also add an explicit -D option for HARP_UDUNITS2_NAME_MANGLE, since the udunits2 sources do not include config.h\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# settings for expat\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Suppress warnings from VC on deprecated POSIX names and unsafe functions\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# we use a different installation directory structure on Windows\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# all non-python components need to be installed in a Library sub-directory for Conda on Windows\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# For Visual Studio > 2010 and MinGW we can use stdint.h\n\n# For earlier versions of Visual Studio we need to provide our own defines\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We allow HARP to be build as part of a larger CMake build that also includes\n\n# CODA. It this is the case then CODA_SOURCE_DIR and CODA_BINARY_DIR will\n\n# already be set and we don't have to look for an installed version of CODA.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The Doxyfile uses some autoconf variables CMake does not have.\n\n# We set them here manually, so that we can use the same .in\n\n# file for both autoconf and cmake\n\n#\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# libharp sources\n\n#\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Also set DLL compile flags\n",
        "Line" : 475,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# On Windows, we want libharp.lib for static, harp.dll & harp.lib for shared.\n\n# On Unix, we want libharp.a and libharp.so\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#  harpcheck\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#  harpcollocate\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#  harpconvert\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#  harpdump\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#  harpmerge\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# idl\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# matlab\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# python\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# product definition files\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# documentation\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# udunits xml files\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# installer\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Some autoconf variables that CMake does not use itself, but that are used in the config file substitutions.\n\n# (leave this section at the end so other rules will use the unquoted VERSION value)\n\n#\n",
        "Line" : 685,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "CMakeModules/FindCODA.cmake" : {
      "ObjectId" : "60274dc4b3df5d0817ed27d663e7607aab8094ed",
      "LastModified" : "2017-09-23T19:47:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the CODA library\n\n#\n\n# This module defines\n\n# CODA_INCLUDE_DIR, where to find coda.h\n\n# CODA_LIBRARIES, the coda libraries to link against to use CODA.\n\n# CODA_FOUND, If false, do not try to use CODA.\n\n#\n\n# The user may specify CODA_INCLUDE_DIR and CODA_LIBRARY_DIR variables\n\n# to locate include and library files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindHDF4.cmake" : {
      "ObjectId" : "d9394a01b24c5823b1655f3ef8253f174d069ddb",
      "LastModified" : "2016-08-01T09:54:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the HDF4 library\n\n#\n\n# This module defines\n\n# HDF4_INCLUDE_DIR, where to find hdfi.h, etc.\n\n# HDF4_LIBRARIES, the hdf libraries to link against to use HDF4.\n\n# HDF4_FOUND, If false, do not try to use HDF4.\n\n#\n\n# The user may specify HDF4_INCLUDE_DIR and HDF4_LIBRARY_DIR variables\n\n# to locate include and library files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindHDF5.cmake" : {
      "ObjectId" : "d40277428079cce41ca9b5e81fbc1afa80abefbe",
      "LastModified" : "2016-08-01T09:54:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the HDF5 library\n\n#\n\n# This module defines\n\n# HDF5_INCLUDE_DIR, where to find hdf5.h, etc.\n\n# HDF5_LIBRARIES, the hdf5 libraries to link against to use HDF5.\n\n# HDF5_FOUND, If false, do not try to use HDF5.\n\n#\n\n# The user may specify HDF5_INCLUDE_DIR and HDF5_LIBRARY_DIR variables\n\n# to locate include and library files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindIDL.cmake" : {
      "ObjectId" : "e17cbd51fe80461e1a57405afa89893364febd67",
      "LastModified" : "2018-08-23T09:25:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindIDL\n\n# ----------\n\n#\n\n# Finds IDL installations and provides IDL executable and library to cmake.\n\n#\n\n# This package first intention is to find the library associated with IDL\n\n# in order to be able to build IDL extensions (DLM files).\n\n#\n\n# The module supports the following components:\n\n#\n\n# * ``IDL_LIBRARY`` the IDL shared library\n\n# * ``MAIN_PROGRAM`` the IDL binary program.\n\n#\n\n# .. note::\n\n#\n\n# The variable :variable:`IDL_ROOT_DIR` may be specified in order to give\n\n# the path of the desired IDL version. Otherwise, the behaviour is platform\n\n# specific:\n\n#\n\n# * Windows: The installed versions of IDL are retrieved from the\n\n#   Windows registry.\n\n# * macOS: The installed versions of IDL are given by the IDL\n\n#   paths in ``/Applications``. If no such application is found, it falls\n\n#   back to the one that might be accessible from the PATH.\n\n# * Unix: The installed versions of IDL are given by the IDL\n\n#   paths in ``/usr/local``. If no such application is found, it falls\n\n#   back to the one that might be accessible from the PATH.\n\n# IDL paths in ``/Applications`` and ``/usr/local`` are located by looking\n\n# for subdirectories ``harris/idl``, ``exelis/idl``, or ``itt/idl``.\n\n#\n\n# Additional information is provided when :variable:`IDL_FIND_DEBUG` is set.\n\n#\n\n# Module Input Variables\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Users or projects may set the following variables to configure the module\n\n# behaviour:\n\n#\n\n# :variable:`IDL_ROOT_DIR`\n\n#   the root of the IDL installation.\n\n# :variable:`IDL_FIND_DEBUG`\n\n#   outputs debug information\n\n#\n\n# Variables defined by the module\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Result variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``IDL_FOUND``\n\n#   ``TRUE`` if the IDL installation is found, ``FALSE``\n\n#   otherwise. All variable below are defined if IDL is found.\n\n# ``IDL_ROOT_DIR``\n\n#   the final root of the IDL installation determined by the FindIDL\n\n#   module.\n\n# ``IDL_INCLUDE_DIRS``\n\n#  the path of the IDL libraries headers\n\n# ``IDL_LIBRARY``\n\n#   library for idl.\n\n# ``IDL_LIBRARIES``\n\n#   the whole set of libraries of IDL\n\n#\n\n# Cached variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``IDL_ROOT_DIR``\n\n#   the location of the root of the IDL installation found. If this value\n\n#   is changed by the user, the result variables are recomputed.\n\n#\n\n# Provided functions\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# :command:`IDL_extract_all_installed_versions_from_registry`\n\n#   parses the registry for all IDL versions. Available on Windows only.\n\n#   The part of the registry parsed is dependent on the host processor\n\n# :command:`IDL_get_all_valid_IDL_roots_from_registry`\n\n#   returns all the possible IDL paths, according to a previously\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\n\n#   useful for the searching all possible IDL installation.\n\n# :command:`IDL_get_version_from_root`\n\n#   returns the version of IDL, given the IDL root directory.\n\n#\n\n# Reference\n\n# ^^^^^^^^^\n\n#\n\n# .. variable:: IDL_ROOT_DIR\n\n#\n\n#    The root folder of the IDL installation. If set before the call to\n\n#    :command:`find_package`, the module will look for the components in that\n\n#    path. If not set, then an automatic search of IDL\n\n#    will be performed. If set, it should point to a valid version of IDL.\n\n#\n\n# .. variable:: IDL_FIND_DEBUG\n\n#\n\n#    If set, the lookup of IDL and the intermediate configuration steps are\n\n#    outputted to the console.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#.rst:\n\n# .. command:: IDL_extract_all_installed_versions_from_registry\n\n#\n\n#   This function parses the registry and finds the IDL versions that are\n\n#   installed. The found versions are returned in `IDL_versions`.\n\n#   Set `win64` to `TRUE` if the 64 bit version of IDL should be looked for\n\n#   The returned list contains all versions under\n\n#   ``HKLM\\\\SOFTWARE\\\\ITT\\\\IDL`` or an empty list in case an error\n\n#   occurred (or nothing found).\n\n#\n\n#   .. note::\n\n#\n\n#     Only the versions are provided. No check is made over the existence of the\n\n#     installation referenced in the registry,\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\n\n# redirection of 64 bits applications\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#.rst:\n\n# .. command:: IDL_get_all_valid_IDL_roots_from_registry\n\n#\n\n#   Populates the IDL root with valid versions of IDL.\n\n#   The returned IDL_roots is organized in pairs\n\n#   ``(version_number,IDL_root_path)``.\n\n#\n\n#   ::\n\n#\n\n#     IDL_get_all_valid_IDL_roots_from_registry(\n\n#         IDL_versions\n\n#         IDL_roots)\n\n#\n\n#   ``IDL_versions``\n\n#     the versions of each of the IDL installations\n\n#   ``IDL_roots``\n\n#     the location of each of the IDL installations\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# IDL root is \"${Installdir}/IDLxy\" with x.y the IDL version\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# get IDL version for a given root path from the list of `(version_number,IDL_root_path)`` pairs\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Get the version of IDL from the version.txt file (Mac/Linux only).\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# determine based on entries in registry\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# change version 'xyz' to 'x.y.z'\n",
        "Line" : 256,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# ###################################\n\n# Exploring the possible IDL_ROOTS\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# this variable will get all IDL installations found in the current system.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if the user specifies a possible root, we keep this one\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# if IDL_ROOT_DIR specified but erroneous\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# cached version\n",
        "Line" : 290,
        "CharPositionInLine" : 86
      },
      "15" : {
        "Text" : "# determine the version again\n",
        "Line" : 292,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\n\n# one installation using the appropriate heuristics\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# On WIN32, we look for IDL installation in the registry\n\n# if unsuccessful, we look for all known revision and filter the existing\n\n# ones.\n",
        "Line" : 308,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# filtering the results with the registry keys\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# on mac, we look for the /Application paths\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\n\n# any other guess.\n",
        "Line" : 333,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\n",
        "Line" : 363,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\n\n# If set by the user, this will not change\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# we then populate the list of roots, with empty version\n",
        "Line" : 370,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# resolve symlinks\n",
        "Line" : 375,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# get the directory (the command below has to be run twice)\n\n# this will be the IDL root\n",
        "Line" : 378,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# IDL should be in bin\n",
        "Line" : 381,
        "CharPositionInLine" : 89
      },
      "28" : {
        "Text" : "# take the first possible IDL root\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# adding a warning in case of ambiguity\n",
        "Line" : 408,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# check if the root changed wrt. the previous defined one, if so\n\n# clear all the cached variables for being able to reconfigure properly\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# internal\n",
        "Line" : 426,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# internal\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\n\n# This is the function to be used below instead of the find_library directives.\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# the IDL root is required\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# the idl library and export.h header file are required\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# component IDL program\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# the IDL version is required\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "CMakeModules/FindJPEG.cmake" : {
      "ObjectId" : "2670214ba01aedb159fdba938b9f41a421261ac7",
      "LastModified" : "2016-06-28T14:52:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Jpeg library\n\n#\n\n# This module defines\n\n# JPEG_INCLUDE_DIR, where to find jpeglib.h\n\n# JPEG_LIBRARIES, the libraries to link against to use JPEG.\n\n# JPEG_FOUND, If false, do not try to use JPEG\n\n#\n\n# The user may specify JPEG_INCLUDE_DIR and JPEG_LIBRARY_DIR variables\n\n# to locate include and library files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindSZIP.cmake" : {
      "ObjectId" : "c3e08ec3da198fa8c27dd6d44e2b8871bb401781",
      "LastModified" : "2016-06-28T14:52:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the SZIP library\n\n#\n\n# This module defines\n\n# SZIP_INCLUDE_DIR, where to find szip.h\n\n# SZIP_LIBRARIES, the libraries to link against to use SZIP.\n\n# SZIP_FOUND, If false, do not try to use SZIP\n\n#\n\n# The user may specify SZIP_INCLUDE_DIR and SZIP_LIBRARY_DIR variables\n\n# to locate include and library files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindZLIB.cmake" : {
      "ObjectId" : "8adb3fadf65845706725e2adc4da5ce3b26cc898",
      "LastModified" : "2019-03-06T14:17:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Zlib library\n\n#\n\n# This module defines\n\n# ZLIB_INCLUDE_DIR, where to find zlib.h\n\n# ZLIB_LIBRARIES, the libraries to link against to use Zlib.\n\n# ZLIB_FOUND, If false, do not try to use Zlib\n\n#\n\n# The user may specify ZLIB_INCLUDE_DIR and ZLIB_LIBRARY_DIR variables\n\n# to locate include and library files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Makefile.am" : {
      "ObjectId" : "47407f0187ea7d8183e9bdfdac9b014790567014",
      "LastModified" : "2019-03-06T14:17:18Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# *** general build settings ****\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# *** targets ***\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# programs\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libraries (+ related files)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# headers\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# *** build rules ***\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# parser generator\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# libharp\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# harpcheck\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# harpcollocate\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# harpconvert\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# harpdump\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# harpmerge\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# libnetcdf\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# libudunits2\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# *** indent ***\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# *** CMake-specific ***\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#[ ]*undef \\(.*\\)/#cmakedefine \\1 \\$${\\1}/' > config.h.cmake.in2\n",
        "Line" : 670,
        "CharPositionInLine" : 245
      },
      "18" : {
        "Text" : "#[ ]*undef \\(.*\\)/#cmakedefine \\1 \\$${\\1}/' > libharp/harp.h.cmake.in2\n",
        "Line" : 679,
        "CharPositionInLine" : 42
      },
      "19" : {
        "Text" : "# *** cppcheck ***\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    }
  },
  "FileTypes" : {
    "CMAKE" : 8,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2209
}