{
  "Repository" : "4287330",
  "Revision" : "HEAD",
  "ObjectId" : "91b560ec8294dcc988c850d0d4320dcf841a7aac",
  "CommitTime" : "2019-04-18T20:02:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e96f52648ed2daf6e8468b64c6c09447863a908e",
      "LastModified" : "2019-03-23T21:52:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Set the locale to default C to prevent issued due to localization of commands---------------\n\n# This is necessary as we for example call `clang -v` and parse its output. But on a localized\n\n# program, the output parsing is much more error prone as certrain strings we're looking for\n\n# could be missing or be in a different order. To prevent those errors, let's just force all\n\n# output to use the default C locale which is more or less identical on all systems.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Set paths where to put the libraries, executables and headers------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Before setting ROOTSYS, make sure that the environment isn't polluted by a different\n\n# ROOT build. This is significant e,g. for roottest, which will otherwise have libraries\n\n# of a different ROOT build available / visible / reachable.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---Set the ROOT version--------------------------------------------------------------------\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GIT_DESCRIBE_ALWAYS: v6-16-00-rc1\n\n# GIT_DESCRIBE_ALL: tags/v6-16-00-rc1\n\n# tag might end on \"-rc1\" or similar; parse version number in front.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# GIT_DESCRIBE_ALWAYS: v6-16-00-rc1-47-g9ba56ef4a3\n\n# GIT_DESCRIBE_ALL: heads/v6-16-00-patches\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# aka head of ...-patches\n",
        "Line" : 91,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# GIT_DESCRIBE_ALWAYS: v6-13-04-2163-g7e8d27ea66\n\n# GIT_DESCRIBE_ALL: heads/master or remotes/origin/master\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#---Where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked-------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---Enable Folders in IDE like Visual Studio----------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---Load some basic macros which are needed later for the confiuration and build----------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---Enable CCache ------------------------------------------------------------------------------\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#---Enable test coverage -----------------------------------------------------------------------\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#--- Enable build timing -----------------------------------------------------------------------\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM \"${CMAKE_COMMAND} -E time\")\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---Enable CTest package -----------------------------------------------------------------------\n\n#include(CTest)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#---Check if the user wants to build the project in the source directory------------------------\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#---Here we look for installed software and switch on and of the different build options--------\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#---Here we add tcmalloc to the linker flags if needed------------------------------------------\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---Here we add jemalloc to the linker flags if needed------------------------------------------\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#---Populate the configure arguments returned by 'root-config --config'-------------------------\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# filter out the very long list of Qt libraries and include dirs\n",
        "Line" : 177,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#---Move (copy) directories to binary tree------------------------------------------------------\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#---Copy files to the build area, with dependency---------------------------------\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Filter out hsimple.root; someone might have created it in the src dir, and the hsimple.root\n\n# target below will interfere.\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Add the compilation flags from LLVM to the flags we use to compile cling-based tools.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#---CXX MODULES-----------------------------------------------------------------------------------\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Copy-pasted from HandleLLVMOptions.cmake, please keep up to date.\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Check that we can build code with modules enabled, and that repeatedly\n\n# including <cassert> still manages to respect NDEBUG properly.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# FIXME: We should remove this once libc++ supports -fmodules-local-submodule-visibility.\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# FIXME: TGLIncludes and alike depend on glew.h doing special preprocessor\n\n# trickery to override the contents of system's OpenGL.\n\n# On OSX #include TGLIncludes.h will trigger the creation of the system\n\n# OpenGL.pcm. Once it is built, glew cannot use preprocessor trickery to 'fix'\n\n# the translation units which it needs to 'rewrite'. The translation units\n\n# which need glew support are in graf3d. However, depending on the modulemap\n\n# organization we could request it implicitly (eg. one big module for ROOT).\n\n# In these cases we need to 'prepend' this include path to the compiler in order\n\n# for glew.h to it its trick.\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# These vars are useful when we want to compile things without cxxmodules.\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#---Recurse into the given subdirectories.  This does not actually cause another cmake executable\n\n#  to run. The same process will walk through the project's entire directory structure.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#---CXX MODULES-----------------------------------------------------------------------------------\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Provide our own modulemap for implementations other than libcxx.\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Take all the modulemap contents we collected from the packages and append them to our modulemap.\n\n# We have to delay this because the ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT is filled in the\n\n# add_subdirectory calls above.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# From now on we handled all exposed module and want to make all new modulemaps private to ROOT.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#---Global PCH-----------------------------------------------------------------------------------\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# rootcling uses our internal version of clang. Passing the modules flags here\n\n# would allow rootcling to find module files built by the external compiler\n\n# (eg. $CXX or $CC). This, in turn, would cause problems if we are using\n\n# different clang version (even different commit revision) as the modules files\n\n# are not guaranteed to be compatible among clang revisions.\n",
        "Line" : 346,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Dummy target that does nothing, we don't need a PCH for modules.\n\n# Onepcm target has all dependencies needed for allDict.cxx.pch, which allow\n\n# to test hsimple.C after all C++ modules are updated.\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#---hsimple.root---------(use the executable for clearer dependencies and proper return code)---\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#---version--------------------------------------------------------------------------------------\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#add_dependencies(version root.exe)\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#---distribution commands------------------------------------------------------------------------\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#---Configure and install various files neded later and for clients -----------------------------\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#---Installation of project-wise artifacts-------------------------------------------------------\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#---Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT-----\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#---install clad header files-------------------------------------------------------------------\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#---Set flag for PyROOT tests that are expected to fail in experimental\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#---Configure Testing using CTest----------------------------------------------------------------\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#---Is the roottest source directory around?\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Need to break into two steps in case the source dir is a symlink\n",
        "Line" : 509,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "#---Is the rootbench source directory around?\n",
        "Line" : 531,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Need to break into two steps in case the source dir is a symlink\n",
        "Line" : 535,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "#---Packaging-------------------------------------------------------------------------------------\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 56
    },
    "bindings/CMakeLists.txt" : {
      "ObjectId" : "e337043aaf92b84377378d866baf7c9ba6a605c7",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/pyroot/CMakeLists.txt" : {
      "ObjectId" : "a0c96f5780d30afdff3d28c7c667a83e61bd911b",
      "LastModified" : "2019-01-09T09:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT bindings/pyroot package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Install python modules--------------------------------------------------\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bindings/pyroot/test/CMakeLists.txt" : {
      "ObjectId" : "585e20dc712394ffd0858c064d208e95bcbe4269",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this excludes RDF for 32 bits builds because of clang/gcc abi issues\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "bindings/pyroot_experimental/CMakeLists.txt" : {
      "ObjectId" : "0f9a014ddae6d6fd256d899dce0e3aded815904c",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/pyroot_experimental/PyROOT/CMakeLists.txt" : {
      "ObjectId" : "459b6a7a6450fb2d4cc2726f3ccd1ce0710c9a97",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT bindings/pyroot_experimental package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disables warnings originating from deprecated register keyword in Python\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bindings/pyroot_experimental/PyROOT/test/CMakeLists.txt" : {
      "ObjectId" : "8f7783d42d34448feed4acd3886300970758242a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# General pythonizations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TObject and subclasses pythonisations\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TClass pythonisations\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TDirectory and subclasses pythonizations\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TTree and subclasses pythonizations\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TH1 and subclasses pythonizations\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TGraph, TGraph2D and error subclasses pythonizations\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TCollection and subclasses pythonizations\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TSeqCollection and subclasses pythonizations\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TIter pythonisations\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TClonesArray pythonisations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TArray and subclasses pythonizations\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TVectorT pythonisations\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TVector3 pythonisations\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# TString pythonisations\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# TString converter\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# TObjString pythonisations\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# RVec and subclasses pythonizations\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# RDataFrame and subclasses pythonizations\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Passing Python callables to ROOT.TF\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# RooAbsCollection and subclasses pythonizations\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# RooDataHist pythonisations\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# std::string_view backport in CPyCppyy\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Test wrapping Python callables for use in C++\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "bindings/pyroot_experimental/cppyy/CMakeLists.txt" : {
      "ObjectId" : "2ec73f85db7a080f4ed1533a4d0077cde286759d",
      "LastModified" : "2019-01-18T14:13:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt" : {
      "ObjectId" : "d5162e9badde2cba56bbcc77572a7d79d36f7549",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(BEFORE include)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disables warnings coming from PyCFunction casts\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disables warnings originating from deprecated register keyword in Python\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# needed for string_view backport\n",
        "Line" : 61,
        "CharPositionInLine" : 70
      },
      "CommentCount" : 4
    },
    "bindings/pyroot_experimental/cppyy/cppyy-backend/CMakeLists.txt" : {
      "ObjectId" : "1c81a86076e13b4f2a6be1b448e76b6969f857a3",
      "LastModified" : "2019-01-25T16:55:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cppyy uses ROOT headers from binary directory\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bindings/pyroot_experimental/cppyy/cppyy-backend/cling/python/cppyy_backend/cmake/FindCppyy.cmake" : {
      "ObjectId" : "7238431ff6418eb30931840e650e616d7c73e1e4",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCppyy\n\n# -------\n\n#\n\n# Find Cppyy\n\n#\n\n# This module finds an installed Cppyy.  It sets the following variables:\n\n#\n\n# ::\n\n#\n\n#   Cppyy_FOUND - set to true if Cppyy is found\n\n#   Cppyy_DIR - the directory where Cppyy is installed\n\n#   Cppyy_EXECUTABLE - the path to the Cppyy executable\n\n#   Cppyy_INCLUDE_DIRS - Where to find the ROOT header files.\n\n#   Cppyy_VERSION - the version number of the Cppyy backend.\n\n#\n\n#\n\n# The module also defines the following functions:\n\n#\n\n#   cppyy_add_bindings - Generate a set of bindings from a set of header files.\n\n#\n\n# The minimum required version of Cppyy can be specified using the\n\n# standard syntax, e.g.  find_package(Cppyy 4.19)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Cppyy_DIR.\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# Cppyy_INCLUDE_DIRS.\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#\n\n# Cppyy_VERSION.\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n# Generate a set of bindings from a set of header files. Somewhat like CMake's\n\n# add_library(), the output is a compiler target. In addition ancilliary files\n\n# are also generated to allow a complete set of bindings to be compiled,\n\n# packaged and installed.\n\n#\n\n#   cppyy_add_bindings(\n\n#       pkg\n\n#       pkg_version\n\n#       author\n\n#       author_email\n\n#       [URL url]\n\n#       [LICENSE license]\n\n#       [LANGUAGE_STANDARD std]\n\n#       [LINKDEFS linkdef...]\n\n#       [IMPORTS pcm...]\n\n#       [GENERATE_OPTIONS option...]\n\n#       [COMPILE_OPTIONS option...]\n\n#       [INCLUDE_DIRS dir...]\n\n#       [LINK_LIBRARIES library...]\n\n#       [H_DIRS H_DIRSectory]\n\n#       H_FILES h_file...)\n\n#\n\n# The bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be\n\n# used as per the documentation provided via the cppyy.cgl namespace. First add\n\n# the directory of the <pkg>.rootmap file to the LD_LIBRARY_PATH environment\n\n# variable, then \"import cppyy; from cppyy.gbl import <some-C++-entity>\".\n\n#\n\n# Alternatively, use \"import <pkg>\". This convenience wrapper supports\n\n# \"discovery\" of the available C++ entities using, for example Python 3's command\n\n# line completion support.\n\n#\n\n# The bindings are complete with a setup.py, supporting Wheel-based\n\n# packaging, and a test.py supporting pytest/nosetest sanity test of the bindings.\n\n#\n\n# The bindings are generated/built/packaged using 3 environments:\n\n#\n\n#   - One compatible with the header files being bound. This is used to\n\n#     generate the generic C++ binding code (and some ancilliary files) using\n\n#     a modified C++ compiler. The needed options must be compatible with the\n\n#     normal build environment of the header files.\n\n#\n\n#   - One to compile the generated, generic C++ binding code using a standard\n\n#     C++ compiler. The resulting library code is \"universal\" in that it is\n\n#     compatible with both Python2 and Python3.\n\n#\n\n#   - One to package the library and ancilliary files into standard Python2/3\n\n#     wheel format. The packaging is done using native Python tooling.\n\n#\n\n# Arguments and options:\n\n#\n\n#   pkg                 The name of the package to generate. This can be either\n\n#                       of the form \"simplename\" (e.g. \"Akonadi\"), or of the\n\n#                       form \"namespace.simplename\" (e.g. \"KF5.Akonadi\").\n\n#\n\n#   pkg_version         The version of the package.\n\n#\n\n#   author              The name of the library author.\n\n#\n\n#   author_email        The email address of the library author.\n\n#\n\n#   URL url             The home page for the library. Default is\n\n#                       \"https://pypi.python.org/pypi/<pkg>\".\n\n#\n\n#   LICENSE license     The license, default is \"LGPL 2.0\".\n\n#\n\n#   LANGUAGE_STANDARD std\n\n#                       The version of C++ in use, \"14\" by default.\n\n#\n\n#   IMPORTS pcm         Files which contain previously-generated bindings\n\n#                       which pkg depends on.\n\n#\n\n#   GENERATE_OPTIONS option\n\n#                       Options which are to be passed into the rootcling\n\n#                       command. For example, bindings which depend on Qt\n\n#                       may need \"-D__PIC__;-Wno-macro-redefined\" as per\n\n#                       https://sft.its.cern.ch/jira/browse/ROOT-8719.\n\n#\n\n#   LINKDEFS def        Files or lines which contain extra #pragma content\n\n#                       for the linkdef.h file used by rootcling. See\n\n#                       https://root.cern.ch/root/html/guides/users-guide/AddingaClass.html#the-linkdef.h-file.\n\n#\n\n#                       In lines, literal semi-colons must be escaped: \"\\;\".\n\n#\n\n#   EXTRA_CODES code    Files which contain extra code needed by the bindings.\n\n#                       Customisation is by routines named \"c13n_<something>\";\n\n#                       each such routine is passed the module for <pkg>:\n\n#\n\n#                           def c13n_doit(pkg_module):\n\n#                               print(pkg_module.__dict__)\n\n#\n\n#                       The files and individual routines within files are\n\n#                       processed in alphabetical order.\n\n#\n\n#   EXTRA_HEADERS hdr   Files which contain extra headers needed by the bindings.\n\n#\n\n#   EXTRA_PYTHONS py    Files which contain extra Python code needed by the bindings.\n\n#\n\n#   COMPILE_OPTIONS option\n\n#                       Options which are to be passed into the compile/link\n\n#                       command.\n\n#\n\n#   INCLUDE_DIRS dir    Include directories.\n\n#\n\n#   LINK_LIBRARIES library\n\n#                       Libraries to link against.\n\n#\n\n#   H_DIRS directory    Base directories for H_FILES.\n\n#\n\n#   H_FILES h_file      Header files for which to generate bindings in pkg.\n\n#                       Absolute filenames, or filenames relative to H_DIRS. All\n\n#                       definitions found directly in these files will contribute\n\n#                       to the bindings. (NOTE: This means that if \"forwarding\n\n#                       headers\" are present, the real \"legacy\" headers must be\n\n#                       specified as H_FILES).\n\n#\n\n#                       All header files which contribute to a given C++ namespace\n\n#                       should be grouped into a single pkg to ensure a 1-to-1\n\n#                       mapping with the implementing Python class.\n\n#\n\n# Returns via PARENT_SCOPE variables:\n\n#\n\n#   target              The CMake target used to build.\n\n#\n\n#   setup_py            The setup.py script used to build or install pkg.\n\n#\n\n# Examples:\n\n#\n\n#   find_package(Qt5Core NO_MODULE)\n\n#   find_package(KF5KDcraw NO_MODULE)\n\n#   get_target_property(_H_DIRS KF5::KDcraw INTERFACE_INCLUDE_DIRECTORIES)\n\n#   get_target_property(_LINK_LIBRARIES KF5::KDcraw INTERFACE_LINK_LIBRARIES)\n\n#   set(_LINK_LIBRARIES KF5::KDcraw ${_LINK_LIBRARIES})\n\n#   include(${KF5KDcraw_DIR}/KF5KDcrawConfigVersion.cmake)\n\n#\n\n#   cppyy_add_bindings(\n\n#       \"KDCRAW\" \"${PACKAGE_VERSION}\" \"Shaheed\" \"srhaque@theiet.org\"\n\n#       LANGUAGE_STANDARD \"14\"\n\n#       LINKDEFS \"../linkdef_overrides.h\"\n\n#       GENERATE_OPTIONS \"-D__PIC__;-Wno-macro-redefined\"\n\n#       INCLUDE_DIRS ${Qt5Core_INCLUDE_DIRS}\n\n#       LINK_LIBRARIES ${_LINK_LIBRARIES}\n\n#       H_DIRS ${_H_DIRS}\n\n#       H_FILES \"dcrawinfocontainer.h;kdcraw.h;rawdecodingsettings.h;rawfiles.h\")\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Package metadata.\n\n#\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\n\n# Language standard.\n\n#\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# Make H_FILES with absolute paths.\n\n#\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n# Create the linkdef.h file with a line for each h_file.\n\n#\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\n\n# Doubled-up path separators \"//\" causes errors in rootcling.\n\n#\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#\n\n# Doubled-up path separators \"//\" causes errors in rootcling.\n\n#\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#\n\n# Append any manually-provided linkdef.h content.\n\n#\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#\n\n# Record diagnostics.\n\n#\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# Set up args.\n\n#\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# Run generator. First check dependencies. TODO: temporary hack: rather\n\n# than an external dependency, enable libclang in the local build.\n\n#\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#\n\n# Set up arguments for cppyy-generator.\n\n#\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#\n\n# Set up arguments for rootcling.\n\n#\n",
        "Line" : 345,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#\n\n# Create -m options for any imported .pcm files.\n\n#\n",
        "Line" : 353,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#\n\n# Run rootcling, specifying the generated output.\n\n#\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\n\n# Compile/link.\n\n#\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#\n\n# Install. NOTE: The generated files contain as few binding-specific strings\n\n# as possible.\n\n#\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#\n\n# Generate a pytest/nosetest sanity test script.\n\n#\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#\n\n# Stage extra Python code.\n\n#\n",
        "Line" : 461,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#\n\n# Return results.\n\n#\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#\n\n# Return a list of available pip programs.\n\n#\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "bindings/pyroot_experimental/cppyy/cppyy-backend/cling/python/cppyy_backend/cmake/FindLibClang.cmake" : {
      "ObjectId" : "768cfb57d09a6058759dc0937af961850e13bafa",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLibClang\n\n# ------------\n\n#\n\n# Find LibClang\n\n#\n\n# Find LibClang headers and library\n\n#\n\n# ::\n\n#\n\n#   LibClang_FOUND             - True if libclang is found.\n\n#   LibClang_LIBRARY           - Clang library to link against.\n\n#   LibClang_VERSION           - Version number as a string (e.g. \"3.9\").\n\n#   LibClang_PYTHON_EXECUTABLE - Compatible python version.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Python support for clang might not be available for Python3. We need to\n\n# find what we have.\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Prefer python3 explicitly or implicitly over python2.\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt" : {
      "ObjectId" : "3d89fba1d94c45d3c780644788505d37824d22a2",
      "LastModified" : "2019-01-25T16:55:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/pyroot_experimental/cppyy/cppyy/bench/Makefile" : {
      "ObjectId" : "65872fdaf34545cc04663f1d8a54207f21367992",
      "LastModified" : "2019-01-25T16:55:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# note -O2 for cxx to make sure code actually runs instead of being optimized out of existence\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bindings/pyroot_experimental/cppyy/cppyy/doc/Makefile" : {
      "ObjectId" : "cbe159e5ce7fedb73e3bbad1d6ff9fbaae313890",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "bindings/pyroot_experimental/cppyy/cppyy/test/Makefile" : {
      "ObjectId" : "51adca6a80927391b40ef611d82111b8cb48e91e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/r/CMakeLists.txt" : {
      "ObjectId" : "9b1a335bcaa24f4603eb38f1df2b187946c3faa5",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT R package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/CMakeLists.txt" : {
      "ObjectId" : "2d5e3ef6c27a09f1567b9c5f76303064ca3fe8f6",
      "LastModified" : "2019-01-25T16:55:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT build package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "builtins/davix/CMakeLists.txt" : {
      "ObjectId" : "20e22602f8650ba4a11f5b841a12ff1e8ac62f84",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "builtins/lz4/CMakeLists.txt" : {
      "ObjectId" : "15fef25e79977066817f75127ecb201c8bcc7289",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "builtins/openssl/CMakeLists.txt" : {
      "ObjectId" : "5067dfea2b773afcca516376abc5b98ed0f5590d",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find_package(OpenSSL) may not have found it,\n\n# clear parent scope variables set to NOTFOUND\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# needed by Davix\n",
        "Line" : 42,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 2
    },
    "builtins/pcre/CMakeLists.txt" : {
      "ObjectId" : "a755f04fa90543b91e72e51ec78700aafc40cbd0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clear cache variables set by find_package(PCRE)\n\n# to ensure that we use the builtin version\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build byproducts only needed by Ninja\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "builtins/xxhash/CMakeLists.txt" : {
      "ObjectId" : "fe5fc8737280a3e31a587f35c7dbfa05ae8c50b1",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "builtins/zlib/CMakeLists.txt" : {
      "ObjectId" : "78e2dc7f34179ab5c3f7751bedf15ec16bcd8b61",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/CMakeMacroParseArguments.cmake" : {
      "ObjectId" : "c028eeae9a623452b7adfac17381f70d49bee0df",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file defines the following macro for developers needing to parse\n\n# arguments passed to a CMake macro using names.\n\n#\n\n# PARSE_ARGUMENTS           - parse arguments supplied to a macro\n\n#\n\n# The PARSE_ARGUMENTS macro will take the arguments of another macro and define\n\n# several variables. The first argument to PARSE_ARGUMENTS is a prefix to put\n\n# on all variables it creates. The second argument is a list of names, and the\n\n# third argument is a list of options. Both of these lists should be quoted.\n\n# The rest of PARSE_ARGUMENTS are arguments from another macro to be parsed.\n\n#\n\n#    PARSE_ARGUMENTS(prefix arg_names options arg1 arg2...)\n\n#\n\n# For each item in options, PARSE_ARGUMENTS will create a variable with that\n\n# name, prefixed with prefix_. So, for example, if prefix is MY_MACRO and\n\n# options is OPTION1;OPTION2, then PARSE_ARGUMENTS will create the variables\n\n# MY_MACRO_OPTION1 and MY_MACRO_OPTION2. These variables will be set to true\n\n# if the option exists in the command line or false otherwise.\n\n#\n\n# For each item in arg_names, PARSE_ARGUMENTS will create a variable with that\n\n# name, prefixed with prefix_. Each variable will be filled with the arguments\n\n# that occur after the given arg_name is encountered up to the next arg_name\n\n# or the end of the arguments. All options are removed from these lists.\n\n# PARSE_ARGUMENTS also creates a prefix_DEFAULT_ARGS variable containing the\n\n# list of all arguments up to the first arg_name encountered.\n\n#\n\n# Here is a simple, albeit impractical, example of using PARSE_ARGUMENTS that\n\n# demonstrates its behavior.\n\n#\n\n# SET(arguments\n\n#   hello OPTION3 world\n\n#   LIST3 foo bar\n\n#   OPTION2\n\n#   LIST1 fuz baz\n\n#   )\n\n# PARSE_ARGUMENTS(ARG \"LIST1;LIST2;LIST3\" \"OPTION1;OPTION2;OPTION3\" ${arguments})\n\n#\n\n# PARSE_ARGUMENTS creates 7 variables and sets them as follows:\n\n#\n\n#    * ARG_DEFAULT_ARGS: hello;world\n\n#    * ARG_LIST1: fuz;baz\n\n#    * ARG_LIST2:\n\n#    * ARG_LIST3: foo;bar\n\n#    * ARG_OPTION1: FALSE\n\n#    * ARG_OPTION2: TRUE\n\n#    * ARG_OPTION3: TRUE\n\n#\n\n# If you don't have any options, use an empty string in its place.\n\n#\n\n# PARSE_ARGUMENTS(ARG \"LIST1;LIST2;LIST3\" \"\" ${arguments})\n\n#\n\n# Likewise if you have no lists.\n\n#\n\n# PARSE_ARGUMENTS(ARG \"\" \"OPTION1;OPTION2;OPTION3\" ${arguments})\n\n#\n\n#\n\n# Code and description copied from:\n\n#   http://www.cmake.org/Wiki/CMakeMacroParseArguments\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/CTestCustom.cmake" : {
      "ObjectId" : "48c3263121b89ed1da0314cf1a7b9a820c96afa5",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Custom CTest settings---------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library.a(object.c.o) has no symbols\n\n# vc/tests/sse_blend.cpp\n",
        "Line" : 15,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : "# deprecated use of std functions cint/ROOT\n\n# deprecated use of std functions cint/ROOT\n\n# deprecated use of std functions cint/ROOT\n",
        "Line" : 19,
        "CharPositionInLine" : 65
      },
      "3" : {
        "Text" : "#---Include other CTest Custom files----------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/CaptureCommandLine.cmake" : {
      "ObjectId" : "3ca9ae62fcc5b8ab08860c8c306e81dba7cfc48b",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to capture the initial set of cmake command line args passed by\n\n# the user for configuration.\n\n# Original Recipe taken from http://stackoverflow.com/questions/10205986/how-to-capture-cmake-command-line-arguments\n\n#\n\n# Note: The entries will live on CMakeCache.txt, so re-configuring with\n\n# a command line that doesn't include an option won't remove it. You need\n\n# to remove the CMakeCache.txt file, or override the value via the command line.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Record the variable also in the cache    \n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Record the full command line invocation.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create a simple shell script that allows us to reinvoke cmake with the captured command line.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/CheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "4dfba140be72dc0abe72b39d5cffd1b441148ef3",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the CXX compiler supports a given flag.\n\n# CHECK_CXX_COMPILER_FLAG(<flag> <var>)\n\n#  <flag> - the compiler flag\n\n#  <var>  - variable to store the result\n\n# This internally calls the check_cxx_source_compiles macro.  See help\n\n# for CheckCXXSourceCompiles for a listing of variables that can\n\n# modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2010 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 30,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# GNU\n",
        "Line" : 31,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : "# GNU\n\n# Clang\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# Intel\n\n# Intel\n\n# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 32,
        "CharPositionInLine" : 60
      },
      "5" : {
        "Text" : "# AIX\n",
        "Line" : 43,
        "CharPositionInLine" : 69
      },
      "6" : {
        "Text" : "# PGI\n\n# Open64\n",
        "Line" : 44,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 7
    },
    "cmake/modules/CheckCompiler.cmake" : {
      "ObjectId" : "dcf3c5aea07220d3f7c35a9825305c94805130a2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#  CheckCompiler.cmake\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Enable FORTRAN (unfortunatelly is not not possible in all cases)-------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--Work-around for CMake issue 0009220\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# CMAKE_Fortran_COMPILER has already been defined somewhere else, so\n\n# just check whether it contains a valid compiler\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# CMAKE_Fortran_COMPILER has not been defined, so first check whether\n\n# there is a Fortran compiler at all\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Fortran compiler found, however as 'check_language' was executed\n\n# in a separate process, the result might not be compatible with\n\n# the C++ compiler, so reset the variable, ...\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# ..., and enable Fortran again, this time prefering compilers\n\n# compatible to the C++ compiler\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#----Test if clang setup works----------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# LLVM/Clang are automatically checking if we are in interactive terminal mode.\n\n# We use color output only for Ninja, because Ninja by default is buffering the output,\n\n# so Clang disables colors as it is sure whether the output goes to a file or to a terminal.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# https://bugzilla.samba.org/show_bug.cgi?id=8118\n\n# Call to 'ccache clang' is triggering next warning (valid for ccache 3.1.x, fixed in 3.2):\n\n# \"clang: warning: argument unused during compilation: '-c\"\n\n# Adding -Qunused-arguments provides a workaround for the bug.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#---Obtain the major and minor version of the GNU compiler-------------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---C++ standard----------------------------------------------------------------------\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# for backward compatibility\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# needed by roottest, to be removed once roottest is fixed\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---Check for libcxx option------------------------------------------------------------\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---Need to locate thead libraries and options to set properly some compilation flags----------------\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---Setup compiler-specific flags (warning etc)----------------------------------------------\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# AppleClang and Clang proper.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#---Setup details depending on the major platform type----------------------------------------------\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#---Check if we use the new libstdc++ CXX11 ABI-----------------------------------------------------\n\n# Necessary to compile check_cxx_source_compiles this early\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---Print the final compiler flags--------------------------------------------------------------------\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/modules/FindAfterImage.cmake" : {
      "ObjectId" : "114624f473c52dab8d7df68be501947c19d8c5aa",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the AfterImage includes and libraries.\n\n#  (See http://afterstep.sourceforge.net/afterimage/)\n\n# This module defines\n\n# AFTERIMAGE_INCLUDE_DIR, where to locate libAfterImage header files\n\n# AFTERIMAGE_LIBRARIES, the libraries to link against to use libAfterImage\n\n# AFTERIMAGE_FOUND. If false, you cannot build anything that requires libAfterImage\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---TODO (check that the version is sufficient)\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindAlien.cmake" : {
      "ObjectId" : "8d7e8a9b739cb872a5da95be28df85d17cba89b7",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Alien includes and library.\n\n#\n\n# This module defines\n\n# ALIEN_INCLUDE_DIR, where to locate gapiUI.h file\n\n# ALIEN_LIBRARY, the libraries to link against to use Alien\n\n# ALIEN_LIBRARIES, the libraries to link against to use Alien\n\n# ALIEN_FOUND.  If false, you cannot build anything that requires Alien.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindArrow.cmake" : {
      "ObjectId" : "0a1789a8f676d36095e4d7b6e26dbd18c41e15fb",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Licensed to the Apache Software Foundation (ASF) under one\n\n# or more contributor license agreements.  See the NOTICE file\n\n# distributed with this work for additional information\n\n# regarding copyright ownership.  The ASF licenses this file\n\n# to you under the Apache License, Version 2.0 (the\n\n# \"License\"); you may not use this file except in compliance\n\n# with the License.  You may obtain a copy of the License at\n\n#\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing,\n\n# software distributed under the License is distributed on an\n\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\n# KIND, either express or implied.  See the License for the\n\n# specific language governing permissions and limitations\n\n# under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find ARROW (arrow/api.h, libarrow.a, libarrow.so)\n\n# This module defines\n\n#  ARROW_INCLUDE_DIR, directory containing headers\n\n#  ARROW_LIBS, directory containing arrow libraries\n\n#  ARROW_STATIC_LIB, path to libarrow.a\n\n#  ARROW_SHARED_LIB, path to libarrow's shared library\n\n#  ARROW_SHARED_IMP_LIB, path to libarrow's import library (MSVC only)\n\n#  ARROW_FOUND, whether arrow has been found\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure we don't accidentally pick up a different version\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindCFITSIO.cmake" : {
      "ObjectId" : "b6b1d328991f30b600bed20e5d3f110fd92e2bd2",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find CFITSIO\n\n# Once done this will define\n\n#\n\n#  CFITSIO_FOUND - system has CFITSIO\n\n#  CFITSIO_INCLUDE_DIR - the CFITSIO include directory\n\n#  CFITSIO_LIBRARY - the CFITSIO library\n\n#  CFITSIO_LIBRARIES (not cached) - Link these to use CFITSIO\n\n#  CFITSIO_VERSION_STRING - Human readable version number of cfitsio\n\n#  CFITSIO_VERSION_MAJOR  - Major version number of cfitsio\n\n#  CFITSIO_VERSION_MINOR  - Minor version number of cfitsio\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Jasem Mutlaq <mutlaqja@ikarustech.com>\n\n# Based on FindLibfacile by Carsten Niehaus, <cniehaus@gmx.de>\n\n# Chnaged by Pere Mato\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CFITSIO_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the version of the cfitsio header\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindDCAP.cmake" : {
      "ObjectId" : "fd0ee76099cc7a4f8786546dd40bd12878f5f13d",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate dCache library\n\n# Defines:\n\n#\n\n#  DCAP_FOUND\n\n#  DCAP_INCLUDE_DIR\n\n#  DCAP_INCLUDE_DIRS (not cached)\n\n#  DCAP_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set DCAP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindDPM.cmake" : {
      "ObjectId" : "41b9c5dd6cbb28204a21154965cf5f9447096710",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate dpm library\n\n# Defines:\n\n#\n\n#  DPM_FOUND\n\n#  DPM_INCLUDE_DIR\n\n#  DPM_INCLUDE_DIRS (not cached)\n\n#  DPM_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindDavix.cmake" : {
      "ObjectId" : "ec2269dd27547271244b26d8cf95152c13148f33",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindDavix\n\n# -------\n\n#\n\n# Find Davix library for file management over HTTP-based protocols.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target:\n\n#\n\n# ``Davix::Davix``\n\n#   The libdavix library, if found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``DAVIX_FOUND``\n\n#   True if Davix has been found.\n\n# ``DAVIX_INCLUDE_DIRS``\n\n#   Where to find davix.hpp, etc.\n\n# ``DAVIX_LIBRARIES``\n\n#   The libraries to link against to use Davix.\n\n# ``DAVIX_VERSION``\n\n#   The version of the Davix library found (e.g. 0.6.4)\n\n#\n\n# Obsolete variables\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# The following variables may also be set, for backwards compatibility:\n\n#\n\n# ``DAVIX_LIBRARY``\n\n#   where to find the DAVIX library.\n\n# ``DAVIX_INCLUDE_DIR``\n\n#   where to find the DAVIX headers (same as DAVIX_INCLUDE_DIRS)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindFFTW.cmake" : {
      "ObjectId" : "0e630a2c934f735a3bd7b209eb0c669336d3c15d",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the FFTW includes and library.\n\n#\n\n# This module defines\n\n# FFTW_INCLUDE_DIR, where to locate fftw3.h file\n\n# FFTW_LIBRARIES, the libraries to link against to use fftw3\n\n# FFTW_FOUND.  If false, you cannot build anything that requires fftw3.\n\n# FFTW_LIBRARY, where to find the libfftw3 library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindFTGL.cmake" : {
      "ObjectId" : "eaaaef99034a5f7e314bf7fb5abb4b37eb7afad3",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate FTGL library\n\n# Defines:\n\n#\n\n#  FTGL_FOUND\n\n#  FTGL_INCLUDE_DIR\n\n#  FTGL_LIBRARY\n\n#  FTGL_INCLUDE_DIRS (not cached)\n\n#  FTGL_LIBRARIES (not cached)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindGEANT4.cmake" : {
      "ObjectId" : "569750b5fb59fa46898151556bec7f63cd38e776",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GEANT4\n\n# Once done this will define\n\n#\n\n#  GEANT4_FOUND - system has GEANT4\n\n#  GEANT4_INCLUDE_DIR - the GEANT4 include directory\n\n#  GEANT4_LIBRARIES - The libraries needed to use GEANT4\n\n#  GEANT4_DEFINITIONS - Compiler switches required for using GEANT4\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    message(STATUS \"Found ${GEANT4_LIBRARY_DIR}\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindGEANT4VMC.cmake" : {
      "ObjectId" : "ff6d6d1380883172d9c39bac35d2060efee39dbb",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GEANT4VMC\n\n# Once done this will define\n\n#\n\n#  GEANT4VMC_FOUND - system has GEANT3\n\n#  GEANT4VMC_INCLUDE_DIR - the GEANT3 include directory\n\n#  GEANT4VMC_LIBRARIES - The libraries needed to use GEANT3\n\n#  GEANT4VMC_DEFINITIONS - Compiler switches required for using GEANT3\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check for existence of header file, which is needed in CbmRunConfiguration\n\n# The file is only present in old versions of VMC\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindGFAL.cmake" : {
      "ObjectId" : "10396a73e29ce4847fc41bd92c186d5807ee368c",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate GFAL library\n\n# Defines:\n\n#\n\n#  GFAL_FOUND\n\n#  GFAL_INCLUDE_DIR\n\n#  GFAL_INCLUDE_DIRS (not cached)\n\n#  GFAL_LIBRARIES (not cached)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use pkg-config to get the directories for glib and then use these values\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GFAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindKerberos5.cmake" : {
      "ObjectId" : "5ec4970651872e339b555e49308aa420dc1a1c5d",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Kerberos5\n\n#  Check for libkrb5.a\n\n#\n\n#  KRB5_INCLUDE_DIR - where to find krb5.h, etc.\n\n#  KRB5_INCLUDE_DIRS (not cached)\n\n#  KRB5_LIBRARIES   - List of libraries when using Kerberos5\n\n#  KRB5_INIT        - kinit command\n\n#  KRB5_FOUND       - True if Kerberos 5 libraries found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLZ4.cmake" : {
      "ObjectId" : "17ff722bbdb20e3b5bf298210ab1b92066a492ab",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLZ4\n\n# -------\n\n#\n\n# Find the LZ4 library header and define variables.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``LZ4::LZ4``,\n\n# if LZ4 has been found\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   LZ4_FOUND          - True if LZ4 is found.\n\n#   LZ4_INCLUDE_DIRS   - Where to find lz4.h\n\n#\n\n# ::\n\n#\n\n#   LZ4_VERSION        - The version of LZ4 found (x.y.z)\n\n#   LZ4_VERSION_MAJOR  - The major version of LZ4\n\n#   LZ4_VERSION_MINOR  - The minor version of LZ4\n\n#   LZ4_VERSION_PATCH  - The patch version of LZ4\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLZMA.cmake" : {
      "ObjectId" : "beb4e129a6ef6631512bf99d344a8b9d40abd9c6",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the LZMA includes and library.\n\n#\n\n# This module defines\n\n# LZMA_INCLUDE_DIR, where to locate LZMA header files\n\n# LZMA_LIBRARIES, the libraries to link against to use LZMA\n\n# LZMA_FOUND.  If false, you cannot build anything that requires LZMA\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLdap.cmake" : {
      "ObjectId" : "33f610696b8c95c697e6a4fbda7e1faf9d251073",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the LDAP client libraries\n\n# Once done this will define\n\n#\n\n#  LDAP_FOUND - system has libldap\n\n#  LDAP_INCLUDE_DIR - the ldap include directory\n\n#  LDAP_LIBRARY  libldap library\n\n#  LBER_LIBRARY  liblber library\n\n#  LDAP_LIBRARIES - libldap + liblber (if found) library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LDAP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindMonalisa.cmake" : {
      "ObjectId" : "6752ff52dd48b5d396ab22f7c014045efa8a09b5",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Monalisa includes and library.\n\n#\n\n# This module defines\n\n# MONALISA_INCLUDE_DIR, where to locate ApMon.h file\n\n# MONALISA_LIBRARY, the libraries to link against to use Monalisa\n\n# MONALISA_LIBRARIES, the libraries to link against to use Monalisa\n\n# MONALISA_FOUND.  If false, you cannot build anything that requires Monalisa.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindMySQL.cmake" : {
      "ObjectId" : "c818f5a1ab5ba324e8f8d6603c06b79682ef31c3",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the native MySQL includes and library\n\n#\n\n#  MYSQL_INCLUDE_DIR - where to find mysql.h, etc.\n\n#  MYSQL_LIBRARIES   - List of libraries when using MySQL.\n\n#  MYSQL_FOUND       - True if MySQL found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set DCAP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindNumPy.cmake" : {
      "ObjectId" : "2a9bef818ecc9c6ed6bbe740362aaf4a4d8b636b",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n#  NUMPY_FOUND               - was NumPy found\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\n\n#  NUMPY_INCLUDE_DIRS        - path to the NumPy include files (non cached)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#============================================================================\n\n# Copyright 2012 Continuum Analytics, Inc.\n\n#\n\n# MIT License\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining\n\n# a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction, including\n\n# without limitation the rights to use, copy, modify, merge, publish,\n\n# distribute, sublicense, and/or sell copies of the Software, and to permit\n\n# persons to whom the Software is furnished to do so, subject to\n\n# the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#\n\n#============================================================================\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finding NumPy involves calling the Python interpreter\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert the process output into a list\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Just in case there is unexpected output from the Python command.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The output from Python was unexpected. Raise an error always\n\n# here, because we found NumPy, but it appears to be corrupted somehow.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# we already know where it should be so don't search default paths as well.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Get the major and minor version numbers\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/FindODBC.cmake" : {
      "ObjectId" : "c8ca477cca8b636a7b86d782f6b4ca3ca5f3a696",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindODBC\n--------\n\nFind an Open Database Connectivity (ODBC) include directory and library.\n\nOn Windows, when building with Visual Studio, this module assumes the ODBC\nlibrary is provided by the available Windows SDK.\n\nOn Unix, this module allows to search for ODBC library provided by\nunixODBC or iODBC implementations of ODBC API.\nThis module reads hint about location of the config program:\n\n.. variable:: ODBC_CONFIG\n\n  Location of odbc_config or iodbc-config program\n\nOtherwise, this module tries to find the config program,\nfirst from unixODBC, then from iODBC.\nIf no config program found, this module searches for ODBC header\nand library in list of known locations.\n\nImported targets\n^^^^^^^^^^^^^^^^\n\nThis module defines the following :prop_tgt:`IMPORTED` targets:\n\n.. variable:: ODBC::ODBC\n\n  Imported target for using the ODBC library, if found.\n\nResult variables\n^^^^^^^^^^^^^^^^\n\n.. variable:: ODBC_FOUND\n\n  Set to true if ODBC library found, otherwise false or undefined.\n\n.. variable:: ODBC_INCLUDE_DIRS\n\n  Paths to include directories listed in one variable for use by ODBC client.\n  May be empty on Windows, where the include directory corresponding to the\n  expected Windows SDK is already available in the compilation environment.\n\n.. variable:: ODBC_LIBRARIES\n\n  Paths to libraries to linked against to use ODBC.\n  May just a library name on Windows, where the library directory corresponding\n  to the expected Windows SDK is already available in the compilation environment.\n\n.. variable:: ODBC_CONFIG\n\n  Path to unixODBC or iODBC config program, if found or specified.\n\nCache variables\n^^^^^^^^^^^^^^^\n\nFor users who wish to edit and control the module behavior, this module\nreads hints about search locations from the following variables:\n\n.. variable:: ODBC_INCLUDE_DIR\n\n  Path to ODBC include directory with ``sql.h`` header.\n\n.. variable:: ODBC_LIBRARY\n\n  Path to ODBC library to be linked.\n\nThese variables should not be used directly by project code.\n\nLimitations\n^^^^^^^^^^^\n\nOn Windows, this module does not search for iODBC.\nOn Unix, there is no way to prefer unixODBC over iODBC, or vice versa,\nother than providing the config program location using the ``ODBC_CONFIG``.\nThis module does not allow to search for a specific ODBC driver.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define lists used internally\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Try Windows Kits ##########################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# List names of ODBC libraries on Windows\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# List additional libraries required to use ODBC library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "### Try unixODBC or iODBC config program ######################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# unixODBC and iODBC accept unified command line options\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Collect paths of include directories from CFLAGS\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Collect paths of library names and directories from LIBS\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "### Try unixODBC or iODBC in include/lib filesystems ##########################\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# List names of both ODBC libraries, unixODBC and iODBC\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "### Find include directories ##################################################\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Find libraries ############################################################\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# system parths or collected from ODBC_CONFIG\n",
        "Line" : 172,
        "CharPositionInLine" : 31
      },
      "15" : {
        "Text" : "# Unset internal lists as no longer used\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### Set result variables ######################################################\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### Import targets ############################################################\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/modules/FindOracle.cmake" : {
      "ObjectId" : "f09e7491954d356f2c2732802bffd528b1333a2b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TOra: Configure Oracle libraries\n\n#\n\n# ORACLE_FOUND - system has Oracle OCI\n\n# ORACLE_INCLUDE_DIR - where to find oci.h\n\n# ORACLE_LIBRARIES - the libraries to link against to use Oracle OCI\n\n#\n\n# copyright (c) 2007 Petr Vanek <petr@scribus.info>\n\n# Redistribution and use is allowed according to the terms of the GPLv2 license.\n\n# Mofified by Pere Mato\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sdk\n",
        "Line" : 23,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# xe on windows\n",
        "Line" : 25,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# xe on windows\n",
        "Line" : 35,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# guess OCI version\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# sqlplus executable needs its shared libraries\n",
        "Line" : 78,
        "CharPositionInLine" : 65
      },
      "6" : {
        "Text" : "# WARNING!\n\n# MATCHES operator is using Cmake regular expression.\n\n# so the e.g. 9.* does not expand like shell file mask\n\n# but as \"9 and then any sequence of characters\"\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# do not change the order of the ora10 checking!\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# there *must* be OCI version defined for internal libraries\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# setup the variables for silent continue\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#  set(INCLUDE_DIRS \"\n\n#      include=${ORACLE_HOME}/precomp/public\n\n#      include=${ORACLE_HOME}/rdbms/public\n\n#      include=${ORACLE_HOME}/rdbms/demo\n\n#      include=${ORACLE_HOME}/plsql/public\n\n#      include=${ORACLE_HOME}/network/public\n\n#  \")\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ${SYS_INCLUDE} ${INCLUDE_DIRS})\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#  MESSAGE(\"PROCFLAGS: ${PROCFLAGS}\")\n\n#  MESSAGE(\"INCLUDE_DIRS: ${INCLUDE_DIRS}\")\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/modules/FindPCRE.cmake" : {
      "ObjectId" : "25131f402f08146cb05fe866e6abd02bac286d12",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPCRE\n\n# --------\n\n#\n\n# Find PCRE library\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target:\n\n#\n\n# ``PCRE::PCRE``\n\n#   The pcre library, if found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n# This module will set the following variables in your project:\n\n#\n\n# ``PCRE_FOUND``\n\n#   True if PCRE has been found.\n\n# ``PCRE_INCLUDE_DIRS``\n\n#   Where to find pcre.h\n\n# ``PCRE_LIBRARIES``\n\n#   The libraries to link against to use PCRE.\n\n# ``PCRE_VERSION``\n\n#   The version of the PCRE found (e.g. 8.42)\n\n#\n\n# Obsolete variables\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# The following variables may also be set, for backwards compatibility:\n\n#\n\n# ``PCRE_PCRE_LIBRARY``\n\n#   where to find the PCRE_PCRE library.\n\n# ``PCRE_INCLUDE_DIR``\n\n#   where to find the pcre.h header (same as PCRE_INCLUDE_DIRS)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindPLUTO.cmake" : {
      "ObjectId" : "b06454c7d610787dd2bff9f795a1e88f4d040f7c",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PLUTO instalation\n\n# Once done this will define\n\n#\n\n#  PLUTO_FOUND - system has GEANT3\n\n#  PLUTO_INCLUDE_DIR - the GEANT3 include directory\n\n#  PLUTO_LIBRARIES - The libraries needed to use GEANT3\n\n#  PLUTO_DEFINITIONS - Compiler switches required for using GEANT3\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    message(STATUS \"Found PLUTO: ${PLUTO_LIBRARY_DIR}\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindPostgreSQL.cmake" : {
      "ObjectId" : "1026046ff7ef659c8fca6460f4969436e6bc610a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindPostgreSQL\n\n# --------------\n\n#\n\n# Find the PostgreSQL installation.\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   PostgreSQL_LIBRARIES - the PostgreSQL libraries needed for linking\n\n#   PostgreSQL_INCLUDE_DIRS - the directories of the PostgreSQL headers\n\n#   PostgreSQL_LIBRARY_DIRS  - the link directories for PostgreSQL libraries\n\n#   PostgreSQL_VERSION_STRING - the version of PostgreSQL found (since CMake 2.8.8)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# History:\n\n# This module is derived from the module originally found in the VTK source tree.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# Note:\n\n# PostgreSQL_ADDITIONAL_VERSIONS is a variable that can be used to set the\n\n# version number of the implementation of PostgreSQL.\n\n# In Windows the default installation of PostgreSQL uses that as part of the path.\n\n# E.g C:\\Program Files\\PostgreSQL\\8.4.\n\n# Currently, the following version numbers are known to this module:\n\n# \"11\" \"10\" \"9.6\" \"9.5\" \"9.4\" \"9.3\" \"9.2\" \"9.1\" \"9.0\" \"8.4\" \"8.3\" \"8.2\" \"8.1\" \"8.0\"\n\n#\n\n# To use this variable just do something like this:\n\n# set(PostgreSQL_ADDITIONAL_VERSIONS \"9.2\" \"8.4.4\")\n\n# before calling find_package(PostgreSQL) in your CMakeLists.txt file.\n\n# This will mean that the versions you set here will be found first in the order\n\n# specified before the default ones are searched.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# You may need to manually set:\n\n#  PostgreSQL_INCLUDE_DIR  - the path to where the PostgreSQL include files are.\n\n#  PostgreSQL_LIBRARY_DIR  - The path to where the PostgreSQL library files are.\n\n# If FindPostgreSQL.cmake cannot find the include files or the library files.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# The following variables are set if PostgreSQL is found:\n\n#  PostgreSQL_FOUND         - Set to true when PostgreSQL is found.\n\n#  PostgreSQL_INCLUDE_DIRS  - Include directories for PostgreSQL\n\n#  PostgreSQL_LIBRARY_DIRS  - Link directories for PostgreSQL libraries\n\n#  PostgreSQL_LIBRARIES     - The PostgreSQL libraries.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# If you have installed PostgreSQL in a non-standard location.\n\n# (Please note that in the following comments, it is assumed that <Your Path>\n\n# points to the root directory of the include directory of PostgreSQL.)\n\n# Then you have three options.\n\n# 1) After CMake runs, set PostgreSQL_INCLUDE_DIR to <Your Path>/include and\n\n#    PostgreSQL_LIBRARY_DIR to wherever the library pq (or libpq in windows) is\n\n# 2) Use CMAKE_INCLUDE_PATH to set a path to <Your Path>/PostgreSQL<-version>. This will allow find_path()\n\n#    to locate PostgreSQL_INCLUDE_DIR by utilizing the PATH_SUFFIXES option. e.g. In your CMakeLists.txt file\n\n#    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} \"<Your Path>/include\")\n\n# 3) Set an environment variable called ${PostgreSQL_ROOT} that points to the root of where you have\n\n#    installed PostgreSQL, e.g. <Your Path>.\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define additional search paths for root directories.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Look for an installation.\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Look in other places.\n",
        "Line" : 102,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# The PostgreSQL library.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Setting some more prefixes for the library\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Some platforms include multiple pg_config.hs for multi-lib configurations\n\n# This is a temporary workaround.  A better solution would be to compile\n\n# a dummy c file and extract the value of the symbol.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Did we find anything?\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Now try to get the include and library path.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/modules/FindPythia6.cmake" : {
      "ObjectId" : "343b2685a8ae46f561a3687320815190adc5451a",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate pythia6 library\n\n# Defines:\n\n#\n\n#  PYTHIA6_FOUND\n\n#  PYTHIA6_INCLUDE_DIR\n\n#  PYTHIA6_INCLUDE_DIRS (not cached)\n\n#  PYTHIA6_LIBRARY\n\n#  PYTHIA6_LIBRARY_DIR (not cached)\n\n#  PYTHIA6_LIBRARIES (not cached)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PHOTOS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindPythia8.cmake" : {
      "ObjectId" : "80a72d82f7997082f24802033962a14278eb3436",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Pythia8 includes and library.\n\n#\n\n# This module defines\n\n# PYTHIA8_INCLUDE_DIR   where to locate Pythia.h file\n\n# PYTHIA8_LIBRARY       where to find the libpythia8 library\n\n# PYTHIA8_<lib>_LIBRARY Addicional libraries\n\n# PYTHIA8_LIBRARIES     (not cached) the libraries to link against to use Pythia8\n\n# PYTHIA8_FOUND         if false, you cannot build anything that requires Pythia8\n\n# PYTHIA8_VERSION       version of Pythia8 if found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PYTHIA8_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindR.cmake" : {
      "ObjectId" : "6dc602e8803826de10896f8b32666119fdf8ca17",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake module to find R\n\n# - Try to find R\n\n# Once done, this will define\n\n#\n\n#  R_FOUND - system has R\n\n#  R_INCLUDE_DIRS - the R include directories\n\n#  R_LIBRARIES - link these to use R\n\n#  R_ROOT_DIR - As reported by R\n\n# Autor: Omar Andres Zapata Mesa 31/05/2013\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---searching R installtion unsing R executable\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---setting include dirs and libraries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set R_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindSqlite.cmake" : {
      "ObjectId" : "c4f2e90a6749b5885a8f2c34e97b20ffc65529d2",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Sqlite\n\n# Once done this will define\n\n#\n\n#  SQLITE_FOUND - system has Sqlite\n\n#  SQLITE_INCLUDE_DIR - the Sqlite include directory\n\n#  SQLITE_LIBRARIES - Link these to use Sqlite\n\n#  SQLITE_DEFINITIONS - Compiler switches required for using Sqlite\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# show the SQLITE_INCLUDE_DIR and SQLITE_LIBRARIES variables only in the advanced view\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindTBB.cmake" : {
      "ObjectId" : "4f331cf6ff5b503dd2f9bcc1b248837d988a3c37",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module for locating Intel's Threading Building Blocks (TBB).\n\n#\n\n# Customizable variables:\n\n#   TBB_ROOT_DIR\n\n#     Specifies TBB's root directory.\n\n#\n\n# Read-only variables:\n\n#   TBB_FOUND\n\n#     Indicates whether the library has been found.\n\n#\n\n#   TBB_INCLUDE_DIRS\n\n#      Specifies TBB's include directory.\n\n#\n\n#   TBB_LIBRARIES\n\n#     Specifies TBB libraries that should be passed to target_link_libararies.\n\n#\n\n#   TBB_<COMPONENT>_LIBRARIES\n\n#     Specifies the libraries of a specific <COMPONENT>.\n\n#\n\n#   TBB_<COMPONENT>_FOUND\n\n#     Indicates whether the specified <COMPONENT> was found.\n\n#\n\n#\n\n# Copyright (c) 2012 Sergiu Dotenco\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTTBBLAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Component missing: record it for a later report\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# setup the TBB_<COMPONENT>_LIBRARIES variable\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Display missing components indented, each on a separate line\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Determine library's version\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do not redirect the output\n",
        "Line" : 235,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# collect lib requisites using the lib tool\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindUnuran.cmake" : {
      "ObjectId" : "a4b08773219a692fc84d2613bfc8568734406e5b",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate Unuran library\n\n# Defines:\n\n#\n\n#  UNURAN_FOUND\n\n#  UNURAN_INCLUDE_DIR\n\n#  UNURAN_INCLUDE_DIRS (not cached)\n\n#  UNURAN_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set UNURAN_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindVdt.cmake" : {
      "ObjectId" : "f60872ac1bdb85d651657487a980e6551726251c",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate vdt library\n\n# Defines:\n\n#\n\n#  VDT_FOUND\n\n#  VDT_INCLUDE_DIRS\n\n#  VDT_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set VDT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindVecGeom.cmake" : {
      "ObjectId" : "23d33254a359ec2d08deb4af44af1708b57082b9",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the VecGeom library. \n\n#\n\n# This file is meant to be copied into projects that want to use VecGeom. It will\n\n# search for VecGeomConfig.cmake, which ships with VecGeom and which will provide \n\n# up-to-date buildsystem changes. \n\n#\n\n# This module defines the following variables:\n\n# VECGEOM_FOUND\n\n# VECGEOM_INCLUDE_DIR\n\n# VECGEOM_LIBRARIES\n\n# VECGEOM_DEFINITIONS\n\n# VECGEOM_VERSION_MAJOR # not yet\n\n# VECGEOM_VERSION_MINOR # not yet\n\n# VECGEOM_VERSION_PATCH # not yet\n\n# VECGEOM_VERSION # not yet\n\n# VECGEOM_VERSION_STRING # not yet\n\n# VECGEOM_INSTALL_DIR\n\n# VECGEOM_LIB_DIR\n\n# VECGEOM_CMAKE_MODULES_DIR\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindXROOTD.cmake" : {
      "ObjectId" : "474ed5d10b3ce71954c3a0d13cb30ca18245fa1b",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find XROOTD\n\n# Once done this will define\n\n#\n\n#  XROOTD_FOUND - system has XROOTD\n\n#  XROOTD_INCLUDE_DIR - the XROOTD include directory\n\n#  XROOTD_INCLUDE_DIRS - with additonal include directories (non cached)\n\n#  XROOTD_LIBRARIES - The libraries needed to use XROOTD\n\n#  XROOTD_CFLAGS - Additional compilation flags (defines)\n\n#  XROOTD_OLDPACK - old-style packaging for XROOTD libraries\n\n#  XROOTD_NOMAIN - No main available: xproofd not build\n\n#  XROOTD_NOOLDCLNT - No old client available: use built-in version\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Regular version string; parse it out\n",
        "Line" : 34,
        "CharPositionInLine" : 7
      },
      "2" : {
        "Text" : "# Old version string: we keep only the first numerics, i.e. the date\n",
        "Line" : 41,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : "# Set include dirs and compiler macro variable\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Search for the required libraries; this depends on packaging ...\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# libXrdMain (dropped in versions >= 4)\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# libXrdUtils\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# libXrdClient (old client; will be dropped at some point)\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# libXrdCl\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/modules/Findgl2ps.cmake" : {
      "ObjectId" : "6dd3cdc4158bc5308343bc56035ef10c406367c7",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate gl2ps library\n\n# Defines:\n\n#\n\n#  GL2PS_FOUND\n\n#  GL2PS_INCLUDE_DIR\n\n#  GL2PS_INCLUDE_DIRS (not cached)\n\n#  GL2PS_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GL2PS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/Findjemalloc.cmake" : {
      "ObjectId" : "cb0d2c4c760c956bb0e671b5a571229eb43a40e7",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate jemalloc library\n\n#\n\n# Defines:\n\n#\n\n# JEMALLOC_FOUND\n\n# JEMALLOC_LIBRARIES\n\n# JEMALLOC_LIBRARY_PATH\n\n# JEMALLOC_INCLUDE_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/Findlibuuid.cmake" : {
      "ObjectId" : "7be711aee73abe14373ea571641197d656d6b341",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# Findlibuuid\n\n# -----------\n\n#\n\n# Find libuuid, DCE compatible Universally Unique Identifier library.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target:\n\n#\n\n# ``uuid::uuid``\n\n#   The libuuid library, if found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``UUID_FOUND``\n\n#   True if libuuid has been found.\n\n# ``UUID_INCLUDE_DIRS``\n\n#   Where to find uuid/uuid.h.\n\n# ``UUID_LIBRARIES``\n\n#   The libraries to link against to use libuuid.\n\n#\n\n# Obsolete variables\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# The following variables may also be set, for backwards compatibility:\n\n#\n\n# ``UUID_LIBRARY``\n\n#   where to find the libuuid library (same as UUID_LIBRARIES).\n\n# ``UUID_INCLUDE_DIR``\n\n#   where to find the uuid/uuid.h header (same as UUID_INCLUDE_DIRS).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/Findtcmalloc.cmake" : {
      "ObjectId" : "4c5bbfffb6fa5d8b7eed0baa4c7607cd9e0f61c2",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate tcmalloc library\n\n# Defines:\n\n#\n\n#  TCMALLOC_FOUND\n\n#  TCMALLOC_INCLUDE_DIR\n\n#  TCMALLOC_INCLUDE_DIRS (not cached)\n\n#  TCMALLOC_LIBRARY_PATH\n\n#  TCMALLOC_tcmalloc_LIBRARY\n\n#  TCMALLOC_profiler_LIBRARY\n\n#  TCMALLOC_LIBRARIES (not cached)\n\n#  TCMALLOC_LIBRARY_DIRS (not cached)\n\n#  PPROF_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TCMALLOC_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindxxHash.cmake" : {
      "ObjectId" : "8d9738aa94581b70ed996ad188ccf43c8e96ee0d",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindxxHash\n\n# -----------\n\n#\n\n# Find the xxHash library header and define variables.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``xxHash::xxHash``,\n\n# if xxHash has been found\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   xxHash_FOUND          - True if xxHash is found.\n\n#   xxHash_INCLUDE_DIRS   - Where to find xxhash.h\n\n#\n\n# ::\n\n#\n\n#   xxHash_VERSION        - The version of xxHash found (x.y.z)\n\n#   xxHash_VERSION_MAJOR  - The major version of xxHash\n\n#   xxHash_VERSION_MINOR  - The minor version of xxHash\n\n#   xxHash_VERSION_PATCH  - The patch version of xxHash\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/RootBuildOptions.cmake" : {
      "ObjectId" : "52385d4853d791d56f2acd3fdafb6cdcb6b096ba",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_BUILD_OPTION( name defvalue [description] )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_APPLY_OPTIONS()\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_GET_OPTIONS(result ENABLED)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_SHOW_ENABLED_OPTIONS()\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_WRITE_OPTIONS(file )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------------------------------------------\n\n#---Full list of options with their descriptions and default values\n\n#   The default value can be changed as many times as we wish before calling ROOT_APPLY_OPTIONS()\n\n#--------------------------------------------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- Compression algorithms in ROOT-------------------------------------------------------------\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--- Minor chnages in defaults due to platform--------------------------------------------------\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--- The 'all' option swithes ON major options---------------------------------------------------\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--- The 'builtin_all' option swithes ON old the built in options-------------------------------\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---webui always build together with root7----------------------------------------------------\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---Vc supports only x86_64 architecture-------------------------------------------------------\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#---Options depending of CMake Generator-------------------------------------------------------\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---Apply minimal or gminimal------------------------------------------------------------------\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---ROOT 7 requires C++14 standard or higher---------------------------------------------------\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---roottest option implies testing\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---Define at moment the options with the selected default values-----------------------------\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#---check if webui can be build-------------------------------\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#---Removed options------------------------------------------------------------\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#---Deprecated options---------------------------------------------------------\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---Avoid creating dependencies to 'non-standard' header files -------------------------------\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#---Add Installation Variables------------------------------------------------------------------\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#---RPATH options-------------------------------------------------------------------------------\n\n#  When building, don't use the install RPATH already (but later on when installing)\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# don't skip the full RPATH for the build tree\n\n# use always the build RPATH for the build tree\n\n# use RPATH for MacOSX\n",
        "Line" : 346,
        "CharPositionInLine" : 42
      },
      "24" : {
        "Text" : "# point to directories outside the build tree to the install RPATH\n",
        "Line" : 349,
        "CharPositionInLine" : 44
      },
      "25" : {
        "Text" : "# Check whether to add RPATH to the installation (the build tree always has the RPATH enabled)\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# install LIBDIR\n",
        "Line" : 353,
        "CharPositionInLine" : 56
      },
      "27" : {
        "Text" : "# don't skip the full RPATH for the install tree\n",
        "Line" : 354,
        "CharPositionInLine" : 47
      },
      "28" : {
        "Text" : "# install LIBDIR\n",
        "Line" : 358,
        "CharPositionInLine" : 58
      },
      "29" : {
        "Text" : "# self relative LIBDIR\n",
        "Line" : 360,
        "CharPositionInLine" : 54
      },
      "30" : {
        "Text" : "# don't skip the full RPATH for the install tree\n",
        "Line" : 362,
        "CharPositionInLine" : 47
      },
      "31" : {
        "Text" : "# skip the full RPATH for the install tree\n",
        "Line" : 364,
        "CharPositionInLine" : 47
      },
      "32" : {
        "Text" : "#---deal with the DCMAKE_IGNORE_PATH------------------------------------------------------------\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Fink installs in /sw, and MacPort in /opt/local and Brew in /usr/local\n",
        "Line" : 371,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 34
    },
    "cmake/modules/RootCPack.cmake" : {
      "ObjectId" : "37887974e565c029aafcfd455d686e792c064236",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#  RootCPack.cmake\n\n#   - basic setup for packaging ROOT using CTest\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Package up needed system libraries - only for WIN32?\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# General packaging setup - variable relavant to all package formats\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---Resource Files-----------------------------------------------------------------------------------\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---Source package settings--------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---Binary package setup-----------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---Processor architecture---------------------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---OS and version-----------------------------------------------------------------------------------\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---Build type---------------------------------------------------------------------------------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# Finally, generate the CPack per-generator options file and include the\n\n# base CPack configuration.\n\n#\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# Define components and installation types (after CPack included!)\n\n#\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/modules/RootCTest.cmake" : {
      "ObjectId" : "0c0281a05b7a69a7c92ec11775fc28fb0e1a1c20",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#  RootCTest.cmake\n\n#   - basic setup for testing ROOT using CTest\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Deduce the build name--------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---A number of operations to allow running the tests from the build directory-----------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---Test products should not be poluting the standard destinations--------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---Add all subdirectories with tests-----------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# to avoid clashes with the tutorial sources copied to binary tree\n",
        "Line" : 42,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "cmake/modules/RootConfiguration.cmake" : {
      "ObjectId" : "8524a5fd91e058d9250a88b8e08757e4468ce77f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Define a function to do not polute the top level namespace with unneeded variables-----------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Define all sort of variables to bridge between the old Module.mk and the new CMake equivalents-----------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(ROOT_CONFIGARGS \"\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---RConfigure-------------------------------------------------------------------------------------------------\n\n# set(setresuid undef)\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# clear cache to allow reconfiguring\n\n# with a different CMAKE_CXX_STANDARD\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---root-config----------------------------------------------------------------------------------------------\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# change the name of the c++11 feature needed for root-config.in\n",
        "Line" : 562,
        "CharPositionInLine" : 53
      },
      "7" : {
        "Text" : "#---RConfigure.h---------------------------------------------------------------------------------------------\n",
        "Line" : 574,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---Configure and install various files----------------------------------------------------------------------\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---Generate the ROOTConfig files to be used by CMake projects-----------------------------------------------\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---Compiler flags (because user apps are a bit dependent on them...)----------------------------------------\n",
        "Line" : 597,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Re-add the -Wno-module-import-in-extern-c which we just filtered out.\n\n# We want it because it changes the module cache hash and causes modules to be\n\n# rebuilt.\n\n# FIXME: We should review how we do the regex.\n",
        "Line" : 602,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#---To be used from the binary tree--------------------------------------------------------------------------\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---To be used from the install tree--------------------------------------------------------------------------\n\n# Need to calculate actual relative paths from CMAKEDIR to other locations\n",
        "Line" : 641,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---Especial definitions for root-config et al.--------------------------------------------------------------\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---compiledata.h--------------------------------------------------------------------------------------------\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We cannot use the compiledata.sh script for windows\n",
        "Line" : 682,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#---Get the value of CMAKE_CXX_FLAGS provided by the user in the command line\n",
        "Line" : 692,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#--Local root-configure\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/modules/RootInstallDirs.cmake" : {
      "ObjectId" : "a99b0d48148baf8e9c00ecb132548fe89329fc53",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Define GNU standard installation directories\n\n# Provides install directory variables as defined for GNU software:\n\n#  http://www.gnu.org/prep/standards/html_node/Directory-Variables.html\n\n# Inclusion of this module defines the following variables:\n\n#  CMAKE_INSTALL_<dir>      - destination for files of a given type\n\n#  CMAKE_INSTALL_FULL_<dir> - corresponding absolute path\n\n# where <dir> is one of:\n\n#  BINDIR           - user executables (bin)\n\n#  LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)\n\n#  INCLUDEDIR       - C/C++ header files (include)\n\n#  SYSCONFDIR       - read-only single-machine data (etc)\n\n#  DATAROOTDIR      - read-only architecture-independent data (share)\n\n#  DATADIR          - read-only architecture-independent data (DATAROOTDIR/root)\n\n#  MANDIR           - man documentation (DATAROOTDIR/man)\n\n#  MACRODIR         - ROOT macros (DATAROOTDIR/macros)\n\n#  CINTINCDIR       - CINT include files (LIBDIR/cint)\n\n#  ICONDIR          - icons (DATAROOTDIR/icons)\n\n#  SRCDIR           - sources (DATAROOTDIR/src)\n\n#  FONTDIR          - fonts (DATAROOTDIR/fonts)\n\n#  DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)\n\n#  TUTDIR           - tutorials (DOCDIR/tutorials)\n\n#  ACLOCALDIR       - locale-dependent data (DATAROOTDIR/aclocal)\n\n#  CMAKEDIR         - cmake modules (DATAROOTDIR/cmake)\n\n#  ELISPDIR         - lisp files (DATAROOTDIR/emacs/site-lisp)\n\n#\n\n# Each CMAKE_INSTALL_<dir> value may be passed to the DESTINATION options of\n\n# install() commands for the corresponding file type.  If the includer does\n\n# not define a value the above-shown default will be used and the value will\n\n# appear in the cache for editing by the user.\n\n# Each CMAKE_INSTALL_FULL_<dir> value contains an absolute path constructed\n\n# from the corresponding destination by prepending (if necessary) the value\n\n# of CMAKE_INSTALL_PREFIX.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Nikita Krupen'ko <krnekit@gmail.com>\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Values whose defaults are relative to DATAROOTDIR.  Store empty values in\n\n# the cache and store the defaults in local variables if the cache values are\n\n# not set explicitly.  This auto-updates the defaults as DATAROOTDIR changes.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Result directories\n\n#\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/RootNewMacros.cmake" : {
      "ObjectId" : "7b8c497401320cbc1272456cd6a422aac97981aa",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#  RootNewMacros.cmake\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_GLOB_FILES( <variable> [REALTIVE path] [FILTER regexp] <sources> ...)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_GET_SOURCES( <variable> cwd <sources> ...)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Eliminate G__* files\n",
        "Line" : 96,
        "CharPositionInLine" : 54
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---REFLEX_GENERATE_DICTIONARY( dictionary headerfiles SELECTION selectionfile OPTIONS opt1 opt2 ...)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---Get List of header files---------------\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#---Get Selection file------------------------------------\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#---roottest compability---------------------------------\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Follow the roottest dictionary library naming\n",
        "Line" : 148,
        "CharPositionInLine" : 44
      },
      "9" : {
        "Text" : "#---roottest compability---------------------------------\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Creating this target at ALL level enables the possibility to generate dictionaries (genreflex step)\n\n# well before the dependent libraries of the dictionary are build\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_GENERATE_DICTIONARY( dictionary headerfiles NODEPHEADERS ghdr1 ghdr2 ...\n\n#                                                    MODULE module DEPENDENCIES dep1 dep2\n\n#                                                    BUILTINS dep1 dep2\n\n#                                                    STAGE1 LINKDEF linkdef OPTIONS opt1 opt2 ...)\n\n#\n\n# <dictionary> is the dictionary stem; the macro creates (among other files) the dictionary source as\n\n#   <dictionary>.cxx\n\n# <headerfiles> are \"as included\"; set appropriate INCLUDE_DIRECTORIES property on the directory.\n\n#   The dictionary target depends on these headers. These files must exist.\n\n# <NODEPHEADERS> same as <headerfiles>. If these files are not found (given the target include path)\n\n#   no error is emitted. The dictionary does not depend on these headers.\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check if OPTIONS start with a dash.\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#---roottest compability---------------------------------\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# rootcling invoked on foo.h should find foo.h in the current source dir,\n\n# no matter what.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---Get the list of header files-------------------------\n\n# CMake needs dependencies from ${CMAKE_CURRENT_SOURCE_DIR} while rootcling wants\n\n# header files \"as included\" (and thus as passed as argument to this CMake function).\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Is this header a globbing expression?\n",
        "Line" : 235,
        "CharPositionInLine" : 29
      },
      "18" : {
        "Text" : "# Elements of ${fp} have the complete path.\n",
        "Line" : 236,
        "CharPositionInLine" : 39
      },
      "19" : {
        "Text" : "# skip LinkDefs from globbing result\n",
        "Line" : 238,
        "CharPositionInLine" : 34
      },
      "20" : {
        "Text" : "# find_file, forget headerFile!\n",
        "Line" : 256,
        "CharPositionInLine" : 30
      },
      "21" : {
        "Text" : "# no dependency - think \"vector\" etc.\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# This is for the RuntimeUniverse\n",
        "Line" : 271,
        "CharPositionInLine" : 53
      },
      "23" : {
        "Text" : "#---Get the list of definitions---------------------------\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# avoid generator expressions\n",
        "Line" : 297,
        "CharPositionInLine" : 59
      },
      "25" : {
        "Text" : "#---Get LinkDef.h file------------------------------------\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#---Build the names for library, pcm and rootmap file ----\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#---Set the library output directory-----------------------\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# FIXME: Krb5Auth.h triggers \"declaration of '__mb_cur_max' has a different language linkage\"\n\n# problem.\n",
        "Line" : 343,
        "CharPositionInLine" : 10
      },
      "29" : {
        "Text" : "#---Get the library and module dependencies-----------------\n",
        "Line" : 365,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#---what rootcling command to use--------------------------\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#---build the path exclusion switches----------------------\n",
        "Line" : 392,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#---build the implicit dependencies arguments\n\n# NOTE: only the Makefile generator respects this!\n",
        "Line" : 398,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#---call rootcint------------------------------------------\n",
        "Line" : 408,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#---roottest compability\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Install the C++ module if we generated one.\n",
        "Line" : 423,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# FIXME: Support mulptiple dictionaries. In some cases (libSMatrix and\n\n# libGenVector) we have to have two or more dictionaries (eg. for math,\n\n# we need the two for double vs Double32_t template specializations).\n\n# In some other cases, eg. libTreePlayer.so we add in a separate dictionary\n\n# files which for some reason (temporarily?) cannot be put in the PCH. Eg.\n\n# all rest of the first dict is in the PCH but this file is not and it\n\n# cannot be present in the original dictionary.\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_CXXMODULES_APPEND_TO_MODULEMAP( library library_headers )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Variable 'dirs' is the return result of ROOT_FIND_DIRS_WITH_HEADERS.\n",
        "Line" : 463,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Deprecated header files.\n",
        "Line" : 488,
        "CharPositionInLine" : 3
      },
      "40" : {
        "Text" : "# Add a `use` directive to Core/Thread to signal that they use some\n\n# split out submodules and we pass the rootcling integrity check.\n",
        "Line" : 493,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# For modules GCocoa and GQuartz we need objc context.\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Check if header is in included header list\n",
        "Line" : 516,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "#set(modulemap_entry \"${modulemap_entry}  link \\\"lib/${library}\\\"\\n\")\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Non ROOT projects need a modulemap generated for them in the current\n\n# directory. The same happens with test dictionaries in ROOT which are not\n\n# exposed via the main modulemap. This is exposed by setting the\n\n# ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR.\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# It's possible that multiple modulemaps are needed in the current\n\n# directory and we need to merge them. As we don't want to have multiple\n\n# modules in the same moduluemap when rerunning CMake, we do a quick\n\n# check if the current module is already in the modulemap (in which case\n\n# we know we rerun CMake at the moment and start writing a new modulemap\n\n# instead of appending new modules).\n",
        "Line" : 537,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# The string we use to identify if the current module is already in the\n\n# modulemap.\n",
        "Line" : 544,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Check if the needle is in the modulemap. If the file doesn't exist\n\n# we just pretend we didn't found the string in the modulemap.\n",
        "Line" : 547,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Append our new module to the existing modulemap containing other modules.\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Sanity check that the string we're looking for is actually in the content\n\n# we're writing to this file.\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_LINKER_LIBRARY( <name> source1 source2 ...[TYPE STATIC|SHARED] [DLLEXPORT]\n\n#                        [NOINSTALL] LIBRARIES library1 library2 ...\n\n#                        BUILTINS dep1 dep2)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# we are building a test, so add EXCLUDE_FROM_ALL\n",
        "Line" : 587,
        "CharPositionInLine" : 15
      },
      "52" : {
        "Text" : "#---create a list of all the object files-----------------------------\n",
        "Line" : 597,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "#foreach(src1 ${lib_srcs})\n\n#  if(NOT src1 MATCHES \"[.]h$|[.]icc$|[.]hxx$|[.]hpp$\")\n\n#    string (REPLACE ${CMAKE_CURRENT_SOURCE_DIR} \"\" src2 ${src1})\n\n#    string (REPLACE ${CMAKE_CURRENT_BINARY_DIR} \"\" src3 ${src2})\n\n#    string (REPLACE \"..\" \"__\" src ${src3})\n\n#    get_filename_component(name ${src} NAME_WE)\n\n#    set(lib_objs ${lib_objs} ${library}.dir/${CMAKE_CFG_INTDIR}/${name}.obj)\n\n#  endif()\n\n#endforeach()\n",
        "Line" : 600,
        "CharPositionInLine" : 6
      },
      "54" : {
        "Text" : "#---create a shared library with the .def file------------------------\n",
        "Line" : 622,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Uncomment to see if we maybe forgot to add a dependency between linking\n\n# a dictionary and generating the G__*.cxx file. We can't have this by\n\n# default because right now quite few dictionaries don't have the associated\n\n# ROOT_GENERATE_DICTIONARY call that prevents this warning.\n\n#message(AUTHOR_WARNING \"Couldn't find target: \" ${library} \"\\n Forgot to call ROOT_GENERATE_DICTIONARY?\")\n",
        "Line" : 640,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "#----Installation details-------------------------------------------------------\n",
        "Line" : 666,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_OBJECT_LIBRARY( <name> source1 source2 ... BUILTINS dep1 dep2 ...)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#--- Only for building shared libraries\n",
        "Line" : 700,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 702,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "#--- Fill the property OBJECTS with all the object files\n\n#    This is needed becuase the generator expression $<TARGET_OBJECTS:target>\n\n#    does not get expanded when used in custom command dependencies\n",
        "Line" : 719,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "#message(WARNING \"Unknown location of source ${s} for object library ${library}\")\n",
        "Line" : 736,
        "CharPositionInLine" : 10
      },
      "63" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_MODULE_LIBRARY( <name> source1 source2 ... [DLLEXPORT] LIBRARIES library1 library2 ...)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 757,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "#----Installation details-------------------------------------------------------\n",
        "Line" : 764,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_GENERATE_ROOTMAP( library LINKDEF linkdef LIBRRARY lib DEPENDENCIES lib1 lib2 )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "#--- No needed anymore\n",
        "Line" : 774,
        "CharPositionInLine" : 13
      },
      "68" : {
        "Text" : "#---Set the library output directory-----------------------\n",
        "Line" : 779,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "#---Build the rootmap file--------------------------------------\n\n#add_custom_command(OUTPUT ${outfile}\n\n#                   COMMAND ${rlibmap_cmd} -o ${outfile} -l ${_library} -d ${_dependencies} -c ${_linkdef}\n\n#                   DEPENDS ${_linkdef} ${rlibmap_cmd} )\n",
        "Line" : 807,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "#---Install the rootmap file------------------------------------\n",
        "Line" : 813,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_FIND_DIRS_WITH_HEADERS([dir1 dir2 ...] OPTIONS [options])\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_INSTALL_HEADERS([dir1 dir2 ...] OPTIONS [options])\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_STANDARD_LIBRARY_PACKAGE(libname\n\n#                                 [NO_INSTALL_HEADERS]         : don't install headers for this package\n\n#                                 [STAGE1]                     : use rootcling_stage1 for generating\n\n#                                 HEADERS header1 header2      : relative header path as #included; pass -I to find them. If not specified, globbing for *.h is used\n\n#                                 NODEPHEADERS header1 header2 : like HEADERS, but no dependency is generated\n\n#                                 [NO_HEADERS]                 : don't glob to fill HEADERS variable\n\n#                                 SOURCES source1 source2      : if not specified, globbing for *.cxx is used\n\n#                                 [NO_SOURCES]                 : don't glob to fill SOURCES variable\n\n#                                 [OBJECT_LIBRARY]             : use ROOT_OBJECT_LIBRARY to generate object files\n\n#                                                                and then use those for linking.\n\n#                                 LIBRARIES lib1 lib2          : linking flags such as dl, readline\n\n#                                 DEPENDENCIES lib1 lib2       : dependencies such as Core, MathCore\n\n#                                 BUILTINS builtin1 builtin2   : builtins like AFTERIMAGE\n\n#                                 LINKDEF LinkDef.h LinkDef2.h : linkdef files, default value is \"LinkDef.h\"\n\n#                                 DICTIONARY_OPTIONS option    : options passed to rootcling\n\n#                                 INSTALL_OPTIONS option       : options passed to install headers\n\n#                                 NO_MODULE                    : don't generate a C++ module for this package\n\n#                                )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 878,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Check if we have any unparsed arguments\n",
        "Line" : 904,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# Check that the user doesn't pass NO_HEADERS (to disable globbing) and HEADERS at the same time.\n",
        "Line" : 908,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# Set default values\n\n# If HEADERS/SOURCES are not parsed, we glob for those files.\n",
        "Line" : 916,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Don't pass the MODULE arg to ROOT_GENERATE_DICTIONARY when\n\n# NO_MODULE is set.\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Record ROOT targets to be used as a dependency targets for \"onepcm\" target.\n",
        "Line" : 940,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# Dictionary might include things from the current src dir, e.g. tests. Alas\n\n# there is no way to set the include directory for a source file (except for\n\n# the generic COMPILE_FLAGS), so this needs to be glued to the target.\n",
        "Line" : 976,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Install headers if we have any headers and if the user didn't explicitly\n\n# disabled this.\n",
        "Line" : 981,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_EXECUTABLE( <name> source1 source2 ... LIBRARIES library1 library2 ... BUILTINS dep1 dep2 ...)\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 988,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# we are building a test, so add EXCLUDE_FROM_ALL\n",
        "Line" : 999,
        "CharPositionInLine" : 15
      },
      "83" : {
        "Text" : "#----Installation details------------------------------------------------------\n",
        "Line" : 1022,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---REFLEX_BUILD_DICTIONARY( dictionary headerfiles selectionfile OPTIONS opt1 opt2 ...  LIBRARIES lib1 lib2 ... )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#----Installation details-------------------------------------------------------\n",
        "Line" : 1046,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n#---ROOT_CHECK_OUT_OF_SOURCE_BUILD( )\n\n#---------------------------------------------------------------------------------------------------\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function ROOT_ADD_TEST( <name> COMMAND cmd [arg1... ]\n\n#                        [PRECMD cmd [arg1...]] [POSTCMD cmd [arg1...]]\n\n#                        [OUTPUT outfile] [ERROR errfile] [INPUT infile]\n\n#                        [ENVIRONMENT var1=val1 var2=val2 ...\n\n#                        [DEPENDS test1 ...]\n\n#                        [RUN_SERIAL]\n\n#                        [TIMEOUT seconds]\n\n#                        [DEBUG]\n\n#                        [SOURCE_DIR dir] [BINARY_DIR dir]\n\n#                        [WORKING_DIR dir]\n\n#                        [BUILD target] [PROJECT project]\n\n#                        [PASSREGEX exp] [FAILREGEX epx]\n\n#                        [PASSRC code])\n\n#\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#- Handle COMMAND argument\n",
        "Line" : 1088,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# if command is a target, get the actual executable\n",
        "Line" : 1098,
        "CharPositionInLine" : 55
      },
      "90" : {
        "Text" : "# if the command is found in the system, use it\n",
        "Line" : 1103,
        "CharPositionInLine" : 55
      },
      "91" : {
        "Text" : "# if not absolute, assume is found in current binary dir\n",
        "Line" : 1105,
        "CharPositionInLine" : 55
      },
      "92" : {
        "Text" : "# take as it is\n",
        "Line" : 1108,
        "CharPositionInLine" : 55
      },
      "93" : {
        "Text" : "#- Handle PRE and POST commands\n",
        "Line" : 1119,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "#- Handle INPUT, OUTPUT, ERROR, DEBUG arguments\n",
        "Line" : 1130,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "#- Handle ENVIRONMENT argument\n",
        "Line" : 1189,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "#- Copy files to the build directory.\n",
        "Line" : 1196,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "#- Locate the test driver\n",
        "Line" : 1202,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "#- Now we can actually add the test\n",
        "Line" : 1213,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "#- Handle TIMOUT and DEPENDS arguments\n",
        "Line" : 1245,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_PATH_TO_STRING( <variable> path PATH_SEPARATOR_REPLACEMENT replacement )\n\n#\n\n# Mangle the path to a string.\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1276,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# FIXME: Copied and modified from ROOTTEST_TARGETNAME_FROM_FILE. We should find a common place for that code.\n\n# FIXME: ROOTTEST_TARGETNAME_FROM_FILE could be replaced by just a call to string(MAKE_C_IDENTIFIER)...\n",
        "Line" : 1282,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_UNITTEST_DIR(<libraries ...>)\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1303,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# Get the component from the path. Eg. core to form coreTests test suite name.\n",
        "Line" : 1308,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function ROOT_ADD_GTEST(<testsuite> source1 source2... COPY_TO_BUILDDIR file1 file2 LIBRARIES)\n\n#\n",
        "Line" : 1313,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# Note we cannot use ROOT_EXECUTABLE without user-specified set of LIBRARIES to link with.\n\n# The test suites should choose this in their specific CMakeLists.txt file.\n\n# FIXME: For better coherence we could restrict the libraries the test suite could link\n\n# against. For example, tests in Core should link only against libCore. This could be tricky\n\n# to implement because some ROOT components create more than one library.\n",
        "Line" : 1321,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_TEST_SUBDIRECTORY( <name> )\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1343,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_PYUNITTESTS( <name> )\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1351,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_PYUNITTEST( <name> <file>)\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1365,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_CXX_FLAG(var flag)\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1398,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_C_FLAG(var flag)\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1408,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT_ADD_COMPILE_OPTIONS(flags)\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1419,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# find_python_module(module [REQUIRED] [QUIET])\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1433,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# A module's location is usually a directory, but for binary modules\n\n# it's a .so file.\n",
        "Line" : 1446,
        "CharPositionInLine" : 6
      },
      "114" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# generateHeader(target input output)\n\n# Generate a help header file with build/misc/argparse2help.py script\n\n# The 1st argument is the target to which the custom command will be attached\n\n# The 2nd argument is the path to the python argparse input file\n\n# The 3rd argument is the path to the output header file\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1468,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Generate and install manual page with build/misc/argparse2help.py script\n\n# The 1st argument is the name of the manual page\n\n# The 2nd argument is the path to the python argparse input file\n\n# The 3rd argument is the path to the output manual page\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1487,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 116
    },
    "cmake/modules/RootTestDriver.cmake" : {
      "ObjectId" : "a6c2c4c9995c6d4b51c26501a019d64467f27867",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#\n\n# RootCTestDriver.cmake\n\n#\n\n# CTest testdriver. Takes arguments via -DARG.\n\n#\n\n# Script arguments:\n\n#\n\n#   CMD   Command to be executed for the test.\n\n#   PRE   Command to be executed before the test command.\n\n#   POST  Command to be executed after the test command.\n\n#   IN    File to be used as input\n\n#   OUT   File to collect stdout and stderr.\n\n#   ENV   Environment VAR1=Value1;VAR2=Value2.\n\n#   CWD   Current working directory.\n\n#   SYS   Value of ROOTSYS\n\n#   DBG   Debug flag.\n\n#   RC    Return code for success.\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Set environment --------------------------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Copy files to current direcotory----------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---Execute pre-command-----------------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---Execute the actual test ------------------------------------------------------------------------\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# log stdout\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# log stderr\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Check err reference\n",
        "Line" : 130,
        "CharPositionInLine" : 46
      },
      "8" : {
        "Text" : "# Both err and out together\n",
        "Line" : 133,
        "CharPositionInLine" : 46
      },
      "9" : {
        "Text" : "# Only check (no reference) the err and and ignore out\n",
        "Line" : 135,
        "CharPositionInLine" : 46
      },
      "10" : {
        "Text" : "# Only check out eventually\n",
        "Line" : 137,
        "CharPositionInLine" : 46
      },
      "11" : {
        "Text" : "# Filter messages in stderr that are expected\n",
        "Line" : 163,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "#---Execute post-command-----------------------------------------------------------------------------\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/modules/SearchInstalledSoftware.cmake" : {
      "ObjectId" : "ed50f042278daf3c560d75535fa189c221156a6a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Check for installed packages depending on the build options/components eamnbled -\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---On MacOSX, try to find frameworks after standard libraries or headers------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Guess under which lib directory the external packages will install the libraires\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---If -Dshared=Off, prefer static libraries-----------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---Check for Cocoa/Quartz graphics backend (MacOS X only)---------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---Check for Zlib ------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Clear cache variables, or LLVM may use old values for ZLIB\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#---Check for Unuran ------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---Check for Freetype---------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---Check for PCRE-------------------------------------------------------------------\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Clear cache before calling find_package(PCRE),\n\n# necessary to be able to toggle builtin_pcre and\n\n# not have find_package(PCRE) find builtin pcre.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#---Check for LZMA-------------------------------------------------------------------\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#---Check for xxHash-----------------------------------------------------------------\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---Check for LZ4--------------------------------------------------------------------\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---Check for X11 which is mandatory lib on Unix--------------------------------------\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---Check for all kind of graphics includes needed by libAfterImage--------------------\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---Check for AfterImage---------------------------------------------------------------\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#---Check for GSL library---------------------------------------------------------------\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# http://mirror.switch.ch/ftp/mirror/gnu/gsl/gsl-${gsl_version}.tar.gz\n",
        "Line" : 420,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "#---Check for Python installation-------------------------------------------------------\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---Check for OpenGL installation-------------------------------------------------------\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#---Check for GLEW -------------------------------------------------------------------\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#---Check for gl2ps ------------------------------------------------------------------\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#---Check for krb5 Support-----------------------------------------------------------\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#---Check for XML Parser Support-----------------------------------------------------------\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#---Check for OpenSSL------------------------------------------------------------------\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# builtin OpenSSL does not work on Windows\n",
        "Line" : 536,
        "CharPositionInLine" : 16
      },
      "27" : {
        "Text" : "#---Check for MySQL-------------------------------------------------------------------\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#---Check for Oracle-------------------------------------------------------------------\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---Check for ODBC-------------------------------------------------------------------\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#---Check for PostgreSQL-------------------------------------------------------------------\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#---Check for SQLite-------------------------------------------------------------------\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#---Check for Pythia6-------------------------------------------------------------------\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#---Check for Pythia8-------------------------------------------------------------------\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#---Check for FFTW3-------------------------------------------------------------------\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#---Check for fitsio-------------------------------------------------------------------\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio${cfitsio_version_no_dots}.tar.gz\n",
        "Line" : 702,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio${cfitsio_version_no_dots}.tar.gz\n",
        "Line" : 717,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "#---Check Shadow password support----------------------------------------------------\n",
        "Line" : 741,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#---TODO--The test always succeeds because the actual file is protected\n",
        "Line" : 743,
        "CharPositionInLine" : 30
      },
      "40" : {
        "Text" : "#---Monalisa support----------------------------------------------------------------\n",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#---Check for Xrootd support---------------------------------------------------------\n",
        "Line" : 761,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# variable used internally\n",
        "Line" : 778,
        "CharPositionInLine" : 44
      },
      "43" : {
        "Text" : "# Otherwise it produces many warnings\n\n# Otherwise it produces many warnings\n",
        "Line" : 789,
        "CharPositionInLine" : 63
      },
      "44" : {
        "Text" : "# Otherwise it produces many warnings\n",
        "Line" : 791,
        "CharPositionInLine" : 68
      },
      "45" : {
        "Text" : "# Otherwise it produces manywarnings  \n",
        "Line" : 792,
        "CharPositionInLine" : 72
      },
      "46" : {
        "Text" : "# We cannot call find_package(XROOTD) becuase the package is not yet built. So, we need to emulate what it defines....\n",
        "Line" : 815,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "#---Alien support----------------------------------------------------------------\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#---Check for Apache Arrow\n",
        "Line" : 849,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#---Check for cling and llvm --------------------------------------------------------\n",
        "Line" : 866,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#---These are the libraries that we link ROOT with CLING---------------------------\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "#---Check for gfal-------------------------------------------------------------------\n",
        "Line" : 889,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#---Check for dCache-------------------------------------------------------------------\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#---Check for Ldap--------------------------------------------------------------------\n",
        "Line" : 919,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#---Check for ftgl if needed----------------------------------------------------------\n",
        "Line" : 933,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#---Check for R/Rcpp/RInside--------------------------------------------------------------------\n\n#added search of R packages here to remove multiples searches\n",
        "Line" : 952,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#---Check for Davix library-----------------------------------------------------------\n",
        "Line" : 968,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#---Check for TCMalloc---------------------------------------------------------------\n",
        "Line" : 1003,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#---Check for JEMalloc---------------------------------------------------------------\n",
        "Line" : 1012,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#---Check for TBB---------------------------------------------------------------------\n",
        "Line" : 1024,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Here we check that the CMAKE_OSX_SYSROOT variable is not empty otherwise\n\n# it can happen that a \"-isysroot\" switch is added without an argument.\n",
        "Line" : 1089,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "#---Check for Vc---------------------------------------------------------------------\n",
        "Line" : 1115,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# FIXME: This is a workaround to let ROOT find the headers at runtime if\n\n# they are in the build directory. This is necessary until we decide how to\n\n# treat externals with headers used by ROOT\n",
        "Line" : 1179,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# end of workaround\n",
        "Line" : 1189,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Missing from VcConfig.cmake\n",
        "Line" : 1195,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "#---Check for VecCore--------------------------------------------------------------------\n",
        "Line" : 1199,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# FIXME: This is a workaround to let ROOT find the headers at runtime if\n\n# they are in the build directory. This is necessary until we decide how to\n\n# treat externals with headers used by ROOT\n",
        "Line" : 1265,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# end of workaround\n",
        "Line" : 1275,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "#---Check for Vdt--------------------------------------------------------------------\n",
        "Line" : 1280,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# breaks on ARM without this\n",
        "Line" : 1305,
        "CharPositionInLine" : 18
      },
      "70" : {
        "Text" : "#---Check for VecGeom--------------------------------------------------------------------\n",
        "Line" : 1325,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#---Check for CUDA-----------------------------------------------------------------------\n",
        "Line" : 1341,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#---TMVA and its dependencies------------------------------------------------------------\n",
        "Line" : 1355,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#---Download googletest--------------------------------------------------------------\n",
        "Line" : 1398,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# FIXME: Remove our version of gtest in roottest. We can reuse this one.\n\n# Add googletest\n\n# http://stackoverflow.com/questions/9689183/cmake-googletest\n",
        "Line" : 1400,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# TIMEOUT 10\n\n# # Force separate output paths for debug and release builds to allow easy\n\n# # identification of correct lib in subsequent TARGET_LINK_LIBRARIES commands\n\n# CMAKE_ARGS -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG:PATH=DebugLibs\n\n#            -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE:PATH=ReleaseLibs\n\n#            -Dgtest_force_shared_crt=ON\n",
        "Line" : 1428,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Disable install step\n",
        "Line" : 1443,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# Wrap download, configure and build steps in a script to log output\n",
        "Line" : 1446,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# Specify include dirs for gtest and gmock\n",
        "Line" : 1451,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Libraries\n",
        "Line" : 1456,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Register gtest, gtest_main, gmock, gmock_main\n",
        "Line" : 1460,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "#------------------------------------------------------------------------------------\n",
        "Line" : 1472,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 82
    },
    "cmake/modules/SetUpLinux.cmake" : {
      "ObjectId" : "720ec1cfd4744a68207a04c0ae2e12a13ab1e88f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# JIT must be able to resolve symbols from all ROOT binaries.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Select flags.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Select flags.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check icc compiler version and set compile flags according to the\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Select flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/modules/SetUpMacOS.cmake" : {
      "ObjectId" : "2c6c2f27f4787a03459b412e5b62dd1eea2b1cc7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO: check haveconfig and rpath -> set rpath true\n\n#TODO: check Thread, define link command\n\n#TODO: more stuff check configure script\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Select flags.\n",
        "Line" : 63,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# Select flags.\n",
        "Line" : 93,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "#---Set Linker flags----------------------------------------------------------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#---Avoid puting the libraires and executables in different configuration locations\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/SetUpWindows.cmake" : {
      "ObjectId" : "787a5befb1b70510659c3c76a4a36a70b6619d22",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----Check the compiler that is used-----------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Select flags.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#---Set Linker flags----------------------------------------------------------------------\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#---Select compiler flags----------------------------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#---Set Linker flags----------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/scripts/InstallTBB.cmake" : {
      "ObjectId" : "b3bacd44eebf63334a30449dee14e61a25b126fa",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Arguments:\n\n#   install_dir\n\n#   source_dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/CMakeLists.txt" : {
      "ObjectId" : "73f94e2e1ace555db03152e8984f6d7f44e6434b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT (global) core package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---G__Core--------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libCore is linked against zlib (based on the location returned by find_package or builtin_zlib). The dictionary of\n\n# libCore, G__Core.cxx, should contain the include path to zlib.h in order to keep the symbol and header files in sync.\n\n# The includePath variable of the dictionary is empty, but we do not notice it because, by chance, G__MathMore adds\n\n# the same includePath for GSL. OTOH, if we have a small test case which works only with libCore.so we never give a\n\n# chance MathMore's dictionary to hide the problem and thus we pick up the system zlib.h.\n\n#\n\n# FIXME: Using include_directories is too intrusive as it does much more than what we want, that is, it will add this\n\n# include path not only in the dictionary but as part of the compilation lines. It is harmless but suboptimal: we need a\n\n# mechanism throough which we can express that we only need the path in the dictionary.\n\n#\n\n# NOTE: We cannot use set_property(TARGET G__Core ...) becase this has to happen before registering the target.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is needed becuase LinkDef.h includes other LinkDef starting from  ${CMAKE_SOURCE_DIR}\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---Generation of RGitCommit.h-----------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------------------\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------------------\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "core/base/CMakeLists.txt" : {
      "ObjectId" : "ee7e78bac31abf6655825ff67f5d9de8dd035439",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/base package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TLogger.hxx may be used without root7 flag, but is placed in v7/inc/,\n\n# so we need to tell ROOT_INSTALL_HEADERS() where to find it\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# only here complete list of headers can be propogated to parent cmake file\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---CreateTApplicationCommandLineOptions------------------------------------------------------------------\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---addRootC++CmdMan-------------------------------------------------------------------------\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---addRootPyCmdMan---------------------------------------------------------------------------\n\n#generateManual(rootbrowseMan ${CMAKE_SOURCE_DIR}/main/python/rootbrowse.py ${CMAKE_BINARY_DIR}/man/rootbrowse.1)\n\n#generateManual(rootcpMan ${CMAKE_SOURCE_DIR}/main/python/rootcp.py ${CMAKE_BINARY_DIR}/man/rootcp.1)\n\n#generateManual(rootdrawtreeMan ${CMAKE_SOURCE_DIR}/main/python/rootdrawtree.py ${CMAKE_BINARY_DIR}/man/rootdrawtree.1)\n\n#generateManual(rooteventselectorMan ${CMAKE_SOURCE_DIR}/main/python/rooteventselector.py ${CMAKE_BINARY_DIR}/man/rooteventselector.1)\n\n#generateManual(rootlsMan ${CMAKE_SOURCE_DIR}/main/python/rootls.py ${CMAKE_BINARY_DIR}/man/rootls.1)\n\n#generateManual(rootmkdirMan ${CMAKE_SOURCE_DIR}/main/python/rootmkdir.py ${CMAKE_BINARY_DIR}/man/rootmkdir.1)\n\n#generateManual(rootmvMan ${CMAKE_SOURCE_DIR}/main/python/rootmv.py ${CMAKE_BINARY_DIR}/man/rootmv.1)\n\n#generateManual(rootprintMan ${CMAKE_SOURCE_DIR}/main/python/rootprint.py ${CMAKE_BINARY_DIR}/man/rootprint.1)\n\n#generateManual(rootrmMan ${CMAKE_SOURCE_DIR}/main/python/rootrm.py ${CMAKE_BINARY_DIR}/man/rootrm.1)\n\n#generateManual(rootslimtreeMan ${CMAKE_SOURCE_DIR}/main/python/rootslimtree.py ${CMAKE_BINARY_DIR}/man/rootslimtree.1)\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "core/base/test/CMakeLists.txt" : {
      "ObjectId" : "9b9cb5c6143fb395bf14a93f97aa2eabfd8e62fd",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: The tests in core should require only libCore. OTOH, TQObjectTests uses the interpreter to register the class.\n\n# This means that if we run make CoreBaseTests the executable wouldn't be runnable because it requires libCling and\n\n# onepcm targets to be built.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/clib/CMakeLists.txt" : {
      "ObjectId" : "8a87997550f6f8ff77b92bd3beb858a1d0480efe",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/clib package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/clingutils/CMakeLists.txt" : {
      "ObjectId" : "0a9557a568e77c5656416ef0479adb831e5f91b4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/clingutils package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These files depend on cling/clang/llvm; they need to be linked into libCling.\n\n# They are used by rootcling_stage1, rootcling and libCling.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Register the llvm include directories after clangs. This instructs the compiler to resolve\n\n# headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off\n\n# and we have installed clang headers, too.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is to avoid warnings coming from GCC 7 in llvm/src/include/llvm/ADT/DenseMap.h:1010\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#### STL dictionary (replacement for cintdlls)##############################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# A user can define a clang version to use, otherwise find it (but will error if more than one version is present)\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# There is no reasonable way to get the version of clang under which is its resource directory.\n\n# For example, lib/clang/5.0.0/include. Deduce it.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#---Deal with clang resource here----------------------------------------------\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---Install a bunch of files to /etc/cling------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We do not want our modulemap to be considered part of the PCH.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# These headers do not have complete include guards on all platforms we\n\n# support. This means that the PCH cannot provide their representation at\n\n# runtime and clang will hit disk, triggering a possible incompatibility\n\n# of that file in build-time versus run-time (different length etc).\n\n# Capture their build-time version here, and inject it into runtime.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "core/cont/CMakeLists.txt" : {
      "ObjectId" : "e76137f9266a5cd1f6a6bea7dcf10aa89fd153a2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/cont package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/cont/test/CMakeLists.txt" : {
      "ObjectId" : "82f60fe25db7f72562ec9952d302dfc983e7d105",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/dictgen/CMakeLists.txt" : {
      "ObjectId" : "675034ade769eea43f7c3eb8e5ab8031970ed3d7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/dictgen package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provides capabilities to parse Linkdef / selection files and generate\n\n# dictionaries.\n\n#\n\n# These files are linked into rootcling_stage1 and libCling. rootcling accesses\n\n# them through rootcling_impl.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Register the llvm include directories after clangs. This instructs the compiler to resolve\n\n# headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off\n\n# and we have installed clang headers, too.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---CreateRootClingCommandLineOptions------------------------------------------------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "core/foundation/CMakeLists.txt" : {
      "ObjectId" : "2046fa79d552c8cf4e55d13eaf175f5e3977fa92",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/foundation package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used by rootcling_stage1\n",
        "Line" : 27,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 2
    },
    "core/foundation/test/CMakeLists.txt" : {
      "ObjectId" : "5ecc078c29aaee22cbf52452bb7cb9e4e299cf0e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/imt/CMakeLists.txt" : {
      "ObjectId" : "f991d15dd50d0a2f34ba8523c8874efe475d2e00",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/imt package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# G__Imt.cxx is automatically added by ROOT_LINKER_LIBRARY.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "core/imt/test/CMakeLists.txt" : {
      "ObjectId" : "007feba8489111253e571f2b78192523d35e8b4e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/lz4/CMakeLists.txt" : {
      "ObjectId" : "41a7521b1345eee0922762901e6d3ddb7e03ae9c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/lzma/CMakeLists.txt" : {
      "ObjectId" : "84216979c20aa1b2d6bd4e763d9ca0028f5558bd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/lzma package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/macosx/CMakeLists.txt" : {
      "ObjectId" : "99395aae89dc54d4ed953c621aab8a6d0994f4c0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/macosx package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/meta/CMakeLists.txt" : {
      "ObjectId" : "4d3e4d74906619dd285ceeb70e628cc53e46aa7e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/meta package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/meta/test/CMakeLists.txt" : {
      "ObjectId" : "97197b54e1a6d3731f317a180c4f07a64361856e",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/metacling/CMakeLists.txt" : {
      "ObjectId" : "54680647712aa03807e365199bf3431bea75a31b",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/metacling package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/metacling/src/CMakeLists.txt" : {
      "ObjectId" : "97a395136e2775b6f762f2b9071dfbae675dc004",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TInterpreter implementation for cling. Only in libCling; needs to resolve\n\n# symbols from libCore.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Register the llvm include directories after clangs. This instructs the compiler to resolve\n\n# headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off\n\n# and we have installed clang headers, too.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This to avoid warning coming from llvm/src/tools/clang/include/clang/Sema/Lookup.h:441\n\n# in clang + llvm version r227800.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is to avoid warnings coming from GCC 7 in llvm/src/include/llvm/ADT/DenseMap.h:1010\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##### libCling #############################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We need to paste the content of the cling plugins disabling link symbol optimizations.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "core/metacling/test/CMakeLists.txt" : {
      "ObjectId" : "36960b4587b9279959af1fd178c43622b138ee17",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/multiproc/CMakeLists.txt" : {
      "ObjectId" : "1033a375cb5f4d666722910e924654f067c681ff",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/multiproc package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/newdelete/CMakeLists.txt" : {
      "ObjectId" : "d58ce33c9393a546f0dd7be14bc82da2708afe91",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/newdelete package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/rint/CMakeLists.txt" : {
      "ObjectId" : "0fad29d22871fc6d307be237577545262513a877",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/rint package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/rootcling_stage1/CMakeLists.txt" : {
      "ObjectId" : "ef142dcc69c88fe3f0f51a7a6dc0adf952726e7c",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/rootcling_stage1 package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/textinput/CMakeLists.txt" : {
      "ObjectId" : "8e42776167a51b2c4b75e6c10ceab2b428f3f5b8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/textinout package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/textinput/src/textinput/Makefile" : {
      "ObjectId" : "e7105bc7a106200b02f13c333459a6c3fd16c9e4",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##===- cling/lib/UserInterface/Makefile---------------------*- Makefile -*-===##\n\n#\n\n#                     The LLVM Compiler Infrastructure\n\n#\n\n# This file is distributed under the University of Illinois Open Source\n\n# License. See LICENSE.TXT for details.\n\n#\n\n##===----------------------------------------------------------------------===##\n\n#\n\n#  This implements the a C++ interpreter user frontend.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/thread/CMakeLists.txt" : {
      "ObjectId" : "e38e73433220705cd7bc61e96f141c8c74eb5cf2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/thread package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# keep include directory for ROOT/RSha256.hxx private\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "core/thread/test/CMakeLists.txt" : {
      "ObjectId" : "bfdc2f70ff7e444119ef8cc76cfd687f3516102c",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/unix/CMakeLists.txt" : {
      "ObjectId" : "518309cec7826b32d7f0dfe67480ae70e6d4a12a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/unix package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/winnt/CMakeLists.txt" : {
      "ObjectId" : "83814b318b8282c8ce4213c9904c54afccb69a43",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT core/winnt package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "core/zip/CMakeLists.txt" : {
      "ObjectId" : "5fa8de9afd75a0019c763e950926fd8a0393c7f7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "documentation/HttpServer/Makefile" : {
      "ObjectId" : "1497908bf9bc3a6936c27c47aa51266cbe5872b0",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define the pandoc options according to the pandoc version.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "documentation/JSROOT/Makefile" : {
      "ObjectId" : "28272dd8116d965b09e3cee31cf30674a937cde6",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define the pandoc options according to the pandoc version.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "documentation/doxygen/Makefile" : {
      "ObjectId" : "b50f3cea9a5c43d10661dc88455b8d702aaa1357",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "documentation/minuit2/Makefile" : {
      "ObjectId" : "4a3a0fc16b062ae262ab1a00f096500da11fd65f",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define the pandoc options according to the pandoc version.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "documentation/primer/Makefile" : {
      "ObjectId" : "55adc3f40063a31fda7e1a6cf2f47d5aa6b646f6",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define the pandoc options according to the pandoc version.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "documentation/spectrum/Makefile" : {
      "ObjectId" : "73ae451bbfd2acb21bdec3a3e5d9b5970a7a63ea",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define the pandoc options according to the pandoc version.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "documentation/tmva/UsersGuide/Makefile" : {
      "ObjectId" : "721adde8699288f62f4ddb7b52696212d267eb34",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "documentation/users-guide/Makefile" : {
      "ObjectId" : "0b4420a3473f0fdde09541c962f88a47bd08325b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define the pandoc options according to the pandoc version.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# on OSX pdflatex returns 1 even in case of success !?\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --number-offset unfortunately not supported in PDF output :(\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "geom/CMakeLists.txt" : {
      "ObjectId" : "9b7498372b29ff564a9d64192bebbba83cab9e3b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# special CMakeLists.txt\n\n# special CMakeLists.txt\n\n# special CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 1
    },
    "geom/gdml/CMakeLists.txt" : {
      "ObjectId" : "21a105494f1bde0d51abca976cfbd0f168d73fbf",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT geom/gdml package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "geom/geom/CMakeLists.txt" : {
      "ObjectId" : "11280e3734be3dea56d2e797dd6e11bc4ea3b80d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT geom/geom package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GCC has bugs with -O3 or -Ofast that break Geom\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "geom/geombuilder/CMakeLists.txt" : {
      "ObjectId" : "d7647210099d2902652a19c5b5446a91568d67b4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT geom/geom package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "geom/geompainter/CMakeLists.txt" : {
      "ObjectId" : "1711bb84667dc79719deaab72cbcf6c2d4da3864",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT geom/geopainter package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "geom/vecgeom/CMakeLists.txt" : {
      "ObjectId" : "cafad25eb455aa867a8a5953370932926a7c662e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT geom/vecgeom package\n\n# @author Mihaela Gheata, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/CMakeLists.txt" : {
      "ObjectId" : "510c5e1ea160c0124c99dd67dcd0aafcf5403ddc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# special CMakeLists.txt\n\n# special CMakeLists.txt\n",
        "Line" : 12,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "graf2d/asimage/CMakeLists.txt" : {
      "ObjectId" : "eba9e0829061956f71041d9114f6a819cf0cde9e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/asimage package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not needed to locate PNG, JPG, TIFF libraries\n",
        "Line" : 6,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 2
    },
    "graf2d/cocoa/CMakeLists.txt" : {
      "ObjectId" : "424402913b19c4f7ea1a4ba0377305ba0ac7f4c4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/cocoa package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We know GL is deprecated on macOS. And our answer is WebGUI/Graphics.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# special case when cocoa is enabled but not opengl (i.e. gminimal=ON)\n",
        "Line" : 42,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 3
    },
    "graf2d/fitsio/CMakeLists.txt" : {
      "ObjectId" : "2dcbd6f9b0560e1dbed00176b8f25e3dff786e0e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/fitsio package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/gpad/CMakeLists.txt" : {
      "ObjectId" : "340d5e0f968c3a817584b2744d25479f123162c5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/gpad package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/gpadv7/CMakeLists.txt" : {
      "ObjectId" : "077289e60add51bfca15fd194dc05ae625142ce3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/gpadv7 package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/gpadv7/v7/test/CMakeLists.txt" : {
      "ObjectId" : "cbf071ebe4265c1d713166b04231a7a6ad855a35",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "graf2d/graf/CMakeLists.txt" : {
      "ObjectId" : "ebb6d879e7c47cd7d3cbda348b249948e1c37aad",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/graf package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/mathtext/CMakeLists.txt" : {
      "ObjectId" : "09f3db28482a4a09eba9aec67cb8ed15148774a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "graf2d/postscript/CMakeLists.txt" : {
      "ObjectId" : "ece5b642d40cff6c8181e0a9dd4026a695710206",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/postcript package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/primitives/CMakeLists.txt" : {
      "ObjectId" : "ed1d6314c8a539d0d791caaa54337ef6069789b2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/primitives package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/primitives/v7/test/CMakeLists.txt" : {
      "ObjectId" : "efd6eeab0d86528476af2a91cbc29f4f7924a1d7",
      "LastModified" : "2019-01-09T07:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "graf2d/quartz/CMakeLists.txt" : {
      "ObjectId" : "348efe43209417acbe9543ce1b5029a0e2e05756",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/quartz package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/win32gdk/CMakeLists.txt" : {
      "ObjectId" : "f73f9109f318743b9df101ce761b7cf795640ac6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/win32gdk package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build iconv\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build glib\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gdk\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "graf2d/x11/CMakeLists.txt" : {
      "ObjectId" : "91b63cf6a5be26e17db4eb1ceb3ec48d9e187d6c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/x11 package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf2d/x11ttf/CMakeLists.txt" : {
      "ObjectId" : "484a268949aa11442065a9c82f254225283865f5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf2d/x11ttf package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf3d/CMakeLists.txt" : {
      "ObjectId" : "2e5701d2f2f4350f6df727d8d700cd22469b86a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Any header of graf3d can trigger building of the OSX OpenGL module.\n\n# It looks like our glew infrastructure combined with the OpenGL modulemap\n\n# cannot be compiled with -fmodules-local-submodule-visibility yet.\n\n# Strip out that flag.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 9,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 11,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 14,
        "CharPositionInLine" : 22
      },
      "4" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 17,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 18,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 28,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 7
    },
    "graf3d/csg/CMakeLists.txt" : {
      "ObjectId" : "280dfdc7030b20eabbeb4d52c0e90443a893184d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "graf3d/eve/CMakeLists.txt" : {
      "ObjectId" : "2f966a73c55f5ada9fb04676a04f8069ebb538c0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf3d/eve package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf3d/eve7/CMakeLists.txt" : {
      "ObjectId" : "345f809bff1e10216e32a0c718967d1ff8bc8264",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "graf3d/eve7/test/CMakeLists.txt" : {
      "ObjectId" : "a2c267c5ee564f77c88f13866529299a27ad4ec8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "graf3d/ftgl/CMakeLists.txt" : {
      "ObjectId" : "0c5233c477717efe78cc0d7c202c249dc99d293e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf3d/ftgl package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf3d/g3d/CMakeLists.txt" : {
      "ObjectId" : "b5e85a91b54f2a9407ee208a8d9be93491d2a9f1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf3d/g3d package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf3d/gl/CMakeLists.txt" : {
      "ObjectId" : "8d926c324dbc5fdd4cdc7ac07a16fab102e161a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf3d/gl package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "graf3d/glew/CMakeLists.txt" : {
      "ObjectId" : "765cc72a85183c1e6d01cd488d33fbc8afd80da1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf3d/glew package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not install headers for all platforms and configurations.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "graf3d/x3d/CMakeLists.txt" : {
      "ObjectId" : "c173e2ddb97ddcc39198bb177cc2646cb9728c73",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT graf3d/x3d package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/CMakeLists.txt" : {
      "ObjectId" : "a332b5d577891d118a423bd08711b5f105ac81f1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gui/canvaspainter/CMakeLists.txt" : {
      "ObjectId" : "4e5f32602244c8f778d8ca62862574427fa074e0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/canvaspainter package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/cefdisplay/CMakeLists.txt" : {
      "ObjectId" : "5471fcb6ece6da1d3a8b7d575c8cbba3fe33739d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/cefdisplay package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ensure bin directory is exists where CEF files should be copied\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## copy different CEF files into binary directory to avoid CEF_ROOT when running ROOT\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "gui/fitpanel/CMakeLists.txt" : {
      "ObjectId" : "d27b984de93617ce692e9ad1048f05f2212b5d33",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/fitpanel package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/fitpanel/test/Makefile" : {
      "ObjectId" : "602389c39cf026dba2b692951030f6b3ee46aa35",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gui/fitpanelv7/CMakeLists.txt" : {
      "ObjectId" : "47ef425514dda350df064b0d0e706d12fcf740ed",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/fitpanelv7\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/ged/CMakeLists.txt" : {
      "ObjectId" : "45a26762c0761adb3b5de531263125996567fbf2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/ged package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/gui/CMakeLists.txt" : {
      "ObjectId" : "7425b70b3fc152049dbd0390d652482110f19b5d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/gui package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/guibuilder/CMakeLists.txt" : {
      "ObjectId" : "e86583512785f6ac79ce6057b8ecc274c190e90a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/guibuilder package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/guihtml/CMakeLists.txt" : {
      "ObjectId" : "0791f50e29f6b37f33f0542052d340ad689ab3ad",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/guihtml package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/qt5webdisplay/CMakeLists.txt" : {
      "ObjectId" : "1f07b0e059c480a0ac21406901603387fc1dccef",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/qt5webdisplay package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/recorder/CMakeLists.txt" : {
      "ObjectId" : "a1db908122cf22cae6c3d33b86b9ea5aad07e0bb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/recorder package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/sessionviewer/CMakeLists.txt" : {
      "ObjectId" : "f38360096ec4978c5dcc981fad28a3c9d9477b22",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/sessionviewer package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/webdisplay/CMakeLists.txt" : {
      "ObjectId" : "1f5272f97c7e6b1a22144a04891a736d7ff0cfe9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/webdisplay package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/webgui6/CMakeLists.txt" : {
      "ObjectId" : "785cb97ae4da619fdbeeebb3cf6271b15339941f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT gui/webgui6 package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/CMakeLists.txt" : {
      "ObjectId" : "4aadc0e2a51cb46a05c94b24193b312350b5263d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# special CMakeLists.txt\n\n# special CMakeLists.txt\n\n# special CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 35
      },
      "1" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 5,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 2
    },
    "hist/hbook/CMakeLists.txt" : {
      "ObjectId" : "f50ec92723e5f329420283ef52054bf1c770e92e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/hbook package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/hist/CMakeLists.txt" : {
      "ObjectId" : "32bfc17ce9fc950663f625eaeb762665e82f3944",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/hist package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/hist/test/CMakeLists.txt" : {
      "ObjectId" : "d4e64bcf6173a7b63650ab5c5e3088293ab48f02",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hist/hist/v7/test/CMakeLists.txt" : {
      "ObjectId" : "74805f029422f79434dcdb51ece2eb45a350de3d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hist/histdraw/CMakeLists.txt" : {
      "ObjectId" : "915a674da1861cb6275b99134a0aa43642123795",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/histdraw package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/histdraw/v7/test/CMakeLists.txt" : {
      "ObjectId" : "5e2467066e26afe977e41900307cfb84420b5578",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hist/histpainter/CMakeLists.txt" : {
      "ObjectId" : "62e71dda22c7c46ab979dd5fc9212906762802a7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/histpainter package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/spectrum/CMakeLists.txt" : {
      "ObjectId" : "91aa5b63b46629f35d99a4563e83a610e06effd2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/spectrum package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/spectrumpainter/CMakeLists.txt" : {
      "ObjectId" : "ff378fa14c5700940527d3f52816573c7290a1aa",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/spectrumpainter package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hist/unfold/CMakeLists.txt" : {
      "ObjectId" : "c158d543057b4040b00d7f47fdea4633791bf7d0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT hist/unfold package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "html/CMakeLists.txt" : {
      "ObjectId" : "9fbbf76416319535d6ea1162b4d1d54194beeb09",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT html package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/CMakeLists.txt" : {
      "ObjectId" : "1ce174ebf7b3dc3ab4f3e769fd45efd9f89e3689",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--- Check if we need to build llvm and clang ------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Define the way we want to build and what of llvm/clang/cling------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# It looks like that turning off CLANG_BUILD_TOOLS is not enough.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We only use llvm/clang through TCling which is (with the help of core/meta) already taking a lock\n\n# to serialize access to llvm.  We can later review how to make this finer grained by using llvm's own locking\n\n# mechanism.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The llvm::ReverseIterate<bool>::value symbol from llvm's SmallPtrSet.h\n\n# somehow lands in our cling libraries on OS X and doesn't get hidden\n\n# by visibility-inlines-hidden, so we suddenly have a global weak symbol\n\n# from LLVM in cling which our visiblity=hidden compiled LLVM libraries\n\n# reference. This is triggering some build system warnings like this:\n\n#   ld: warning: direct access in function '(anonymous namespace)::NewGVN::runGVN()'\n\n#   from file 'interpreter/llvm/src/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol\n\n#   'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm/src/lib/libclingUtils.a(AST.cpp.o)'\n\n#   means the weak symbol cannot be overridden at runtime. This was likely caused by different\n\n#   translation units being compiled with different visibility settings.\n\n# There is no apparent reason why this is happening and it looks like a compiler bug,\n\n# so let's just disable the part of the code that provides this symbol.\n\n# As it's in the validation part of LLVM and not in something that providing functionality,\n\n# this shouldn't cause any problems.\n\n# TODO: We maybe can remove this code once we upgrade to LLVM>=6.0 as this symbol\n\n# was introduced quite recently into LLVM 5.0 and probably is also causing problems\n\n# for some other projects.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make the configuration of LLVM quiet\n",
        "Line" : 69,
        "CharPositionInLine" : 29
      },
      "6" : {
        "Text" : "# replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*)\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# The path to cling passed through environment variable only relevant when building\n\n# against external llvm. In that case, cling's testsuite cannot deduce the binary\n\n# of cling relatively to the llvm tools folder.\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#--- Build LLVM/Clang with modules -----------------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LLVM knows how to configure its modules builds. We cannot just add the flags\n\n# because the cxxmodules builds in llvm have different build dependency order.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# FIXME: We cannot build LLVM/clang with modules on with libstdc++, yet.\n\n# FIXME: We cannot build LLVM/clang with modules on with libc++, too.\n\n#set (LLVM_ENABLE_MODULES ON CACHE BOOL \"Override the default LLVM_ENABLE_MODULES option value.\" )\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#---Build type--------------------------------------------------------------------------------------\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---Remove the inherited include_directories()\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---Disable VCS writing to prevent that we always have to rebuild when someone touched the git HEAD\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---Add the sub-directory excluding all the targets from all-----------------------------------------\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---Make LLVM compilation flags public---------------------------------------------------------------\n\n# Extract the compilation flags from LLVM and make them public to the\n\n# rest of ROOT so that we can compile against LLVM with matching flags.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# LLVM doesn't really give us a API to get this with an in-source build\n\n# so we just use the normal way of doing this and read the llvm directory\n\n# compilation properties.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Turns DEFINE1;DEFINE2 to -DDEFINE1 -DDEFINE2\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# CACHE variable that contains the additional flags that LLVM needs.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Assertions should follow llvm-config's.\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.\n\n# CMake assumes slashes as PATH.\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# They are used as destination of target generators.\n\n# We try to keep these locations consistent with the builtin_llvm. This is important\n\n# for the LLVMRES target.\n\n# FIXME: In longer term, we do not really need this and may want to adjust LLVMRES.\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )\n\n#  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} )\n\n#  set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} )\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Check prebuilt llvm/utils.\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Note: path not really used, except for checking if lit was found\n",
        "Line" : 318,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# We do not run llvm tests in ROOT.\n\n#set(UNITTEST_DIR ${ROOT_LLVM_MAIN_SRC_DIR}/utils/unittest)\n\n#if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h\n\n#    AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}\n\n#    AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt)\n\n#  add_subdirectory(${UNITTEST_DIR} utils/unittest)\n\n#endif()\n",
        "Line" : 327,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 335,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 343,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 352,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "#---Export the include directories------------------------------------------------------------------\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#---Set into parent scope LLVM_VERSION --------------------------------------------------------------\n",
        "Line" : 385,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# We cannot include LLVMConfig.cmake here. We reply on builtin clang to discover the available\n\n# llvm version and set it in clang version.\n\n# FIXME: This is a very ugly workaround. Is there a better way to do this?\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#---Avoid to dependencies to system (e.g. atomic) libraries without modifying the LLVM code----------\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#---Mark the LLVM/CLANG variables as advanced--------------------------------------------------------\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "interpreter/cling/CMakeLists.txt" : {
      "ObjectId" : "dae7bedffa6bc7c5f46521e4da1db7c34f232cf4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we are not building as a part of LLVM, build Cling as an\n\n# standalone project, using LLVM as an external library:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need cmake to support exporting of symbols not only from libraries but\n\n# from executables too. This way cling can find symbols from its own\n\n# executable during runtime.\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Assertions should follow llvm-config's.\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check prebuilt llvm/utils.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 148,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 162,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# From ROOT:\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add appropriate flags for GCC\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Lots of cling is needed at runtime (e.g. Value, or Interpreter::Evaluate()).\n\n# The JIT needs to be able to resolve these symbols from cling; unhide them.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The package needs to be compiler without RTTI information\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add the /std:c++14 flag for Visual Studio 2017 (and up)\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Building as part of ROOT.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add public headers\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# It may contain unparsed unknown args.\n",
        "Line" : 296,
        "CharPositionInLine" : 32
      },
      "18" : {
        "Text" : "# On Windows exceptions aren’t as generic as an x64 ABI.\n\n# Stack unwinding code must be generated for every function between the\n\n# throw and catch blocks.\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# All of libClingInterpreter is compiled with exceptions, mostly because\n\n# llvm_unreachable throws an exception. Otherwise it could be reduced:\n\n#    Exception.cpp, Interpreter.cpp, IncrementalParser.cpp,\n\n#    IncrementalExecutor.cpp\n",
        "Line" : 308,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# For libClingUserInterface, only UserInterface.cpp uses exceptions.\n",
        "Line" : 314,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# needs to be on before llvm_add_library so flags can be set below\n",
        "Line" : 318,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# /EHs because cling_runtime_internal_throwIfInvalidPointer is extern “C”\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Building as part of ROOT (CMake)\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Building as part of ROOT (classic)\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# and this when building Cling standalone:\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# All targets below may depend on all tablegen'd files.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# And llvm-intrinsics.\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Generate a list of CMake library targets so that other CMake projects can\n\n# link against them. LLVM calls its version of this file LLVMExports.cmake, but\n\n# the usual CMake convention seems to be ${Project}Targets.cmake.\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Install a <prefix>/lib/cmake/cling/ClingConfig.cmake file so that\n\n# find_package(Cling) works. Install the target list with it.\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Also copy ClingConfig.cmake to the build directory so that dependent projects\n\n# can build against a build directory of Cling more easily.\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 34
    },
    "interpreter/cling/cmake/modules/ClingConfig.cmake" : {
      "ObjectId" : "789de48cd82506010e8f466f841432af10f4fd12",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file allows users to call find_package(Cling) and pick up our targets.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cling doesn't have any CMake configuration settings yet because it mostly\n\n# uses LLVM's. When it does, we should move this file to ClingConfig.cmake.in\n\n# and call configure_file() on it.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't just use any llvm / clang: cling needs its own:\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Provide all our library targets to users.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "interpreter/cling/docs/CMakeLists.txt" : {
      "ObjectId" : "4b2122ea961ae2bec25c9f503b1cb5c2e957abb8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/cling/lib/CMakeLists.txt" : {
      "ObjectId" : "00c22081a6ab59daeb728d909c321051048ec023",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/cling/lib/Interpreter/CMakeLists.txt" : {
      "ObjectId" : "840cc0b818d068123a5879d5b0ab9db95cdd91b7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clingInterpreter depends on Options.inc to be tablegen-ed\n\n# (target ClangDriverOptions) from in-tree builds.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clangSema will make sure all of the dependencies of clingInterpreter are met.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove all -I from CMAKE_CXX_FLAGS\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remove absolute path from CMAKE_CXX_COMPILER\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This should probably be more general...but how?\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIXME: In some ccache setups we can have a soft link pointing to ccache\n\n# binary. Eg. /usr/local/gcc -> /usr/bin/ccache. Resolving the realpath\n\n# we will get to the ccache and not the intended compiler binary. This\n\n# could be fixed if we run 'gcc -###' which will give us the correct info.\n",
        "Line" : 195,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Test if path compiler is on PATH.\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This adds a lot of unneccessary flags, but may be useful if there's\n\n# a flag that should be passed to cling.\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# FIXME: Perhaps CLING_CXX_RLTV should have a better name?\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We got nothing, just use whatever CMake is using.\n",
        "Line" : 218,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If CMAKE_CXX_FLAGS contains --gcc-toolchain= then that should be passed on\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# TODO Refactor these two into common function\n",
        "Line" : 225,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# convert CMAKE_CXX_FLAGS to a list for execute_process\n",
        "Line" : 247,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# In modules builds we 'mount' our own stl modulemap for libstdc++. In order to do this,\n\n# we need to know where is ROOT/cling STL.\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# FIXME: We should use file(GENERATE) cmake command.\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Make sure this goes last so so we can pick up any changes that occured\n\n# Also means cling-compiledata.h.in should be edited never cling-compiledata.h\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "interpreter/cling/lib/MetaProcessor/CMakeLists.txt" : {
      "ObjectId" : "e753dca3c76cd49effa0b2d1f967cb04de57df80",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/cling/lib/UserInterface/CMakeLists.txt" : {
      "ObjectId" : "a995b7d970874dda54072a88bd2158d0862a828c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For cling, install textinput *.h in include/cling/UserInterface/textinput.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "interpreter/cling/lib/Utils/CMakeLists.txt" : {
      "ObjectId" : "288857f2a1d08028bf0dbf8f2b38af073d6ef7a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/cling/test/CMakeLists.txt" : {
      "ObjectId" : "1dde4542414caae5b0a41c0b44ae38fe33182806",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needed for '%shlibext'\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add a legacy target spelling: cling-test\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "interpreter/cling/tools/CMakeLists.txt" : {
      "ObjectId" : "67881875f36c60966aa350d05358ea1e1d392087",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/cling/tools/Jupyter/CMakeLists.txt" : {
      "ObjectId" : "d48e16cae70839fe8a6690b027bf29c7ff977233",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep symbols for JIT resolution\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Solve unresolved symbols bug in unix\n\n#See https://github.com/vgvassilev/cling/issues/114\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#FIXME: I don't know what flags are used in windows\n\n#to include all symbols from a static library\n\n#Maybe the bug is not present in windows and we leave it \n\n#as it is\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#Force all interpreter symbols to be present in the shared library\n\n#this will prevent missing symbol errors because we don't know at\n\n#link time what function calls will be made by the user of \n\n#the shared library\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "interpreter/cling/tools/demo/CMakeLists.txt" : {
      "ObjectId" : "992cac990a6dbc7ba61143d694f78cfb0795c0b7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep symbols for JIT resolution\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cling needs at least C++11; so does this demo.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Building as part of cling; all CMake variables are set.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Building as separate project.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This project needs cling.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# The project has one binary:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ...which links against clingInterpreter (and its dependencies).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Provide LLVMDIR to cling-demp.cpp:\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "interpreter/cling/tools/driver/CMakeLists.txt" : {
      "ObjectId" : "5130933867daa51c7146dd9fab2109849711c880",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep symbols for JIT resolution\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal string\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# RTTI/C++ symbols\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Compiler added symbols for static variables. NOT for VStudio < 2015\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# new/delete variants needed when linking to static msvc runtime (esp. Debug)\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#??2@YAPEAX_KPEBDH@Z  ## not used in cling\n\n#??_U@YAPEAX_KPEBDH@Z ## not used in cling\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Most (if not all) of these MSVC decided are inlines that aren't exported\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# List to '/EXPORT:sym0 /EXPORT:sym1 /EXPORT:sym2 ...'\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "interpreter/cling/tools/libcling/CMakeLists.txt" : {
      "ObjectId" : "143d3bdb3e99a4904a161587185c78e96c75894b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#get_target_property(clingInterpSrc clingInterpreter SOURCES)\n\n#get_target_property(clingMetaSrc clingMetaProcessor SOURCES)\n\n#get_target_property(clingUtilsSrc clingUtils SOURCES)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We do C++...\n\n# set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/libclang.exports)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if(MSVC)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid LNK4197 not to spceify libclang.def here.\n\n# Each functions is exported as \"dllexport\" in include/clang-c.\n\n# KB835326\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#  set(LLVM_EXPORTED_SYMBOL_FILE)\n\n#endif()\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  DEPENDS clang-headers\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  Core\n\n#  Support\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "interpreter/cling/tools/plugins/CMakeLists.txt" : {
      "ObjectId" : "5ca768120f59e22727c9d63f3cce1d64472b0161",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  # If we drop a compatible cmake project in this folder we should automatically\n\n#  # pick it up and build it.\n\n#  function(LISTSUBDIRS result curdir)\n\n#    file(GLOB children RELATIVE ${curdir} ${curdir}/*)\n\n#    set(dirlist \"\")\n\n#    foreach(child ${children})\n\n#      if(IS_DIRECTORY ${curdir}/${child})\n\n#        list(APPEND dirlist ${child})\n\n#      endif()\n\n#      endforeach()\n\n#      set(${result} ${dirlist} PARENT_SCOPE)\n\n#  endfunction()\n\n#\n\n#  LISTSUBDIRS(subdirs ${CMAKE_CURRENT_SOURCE_DIR}/plugins/)\n\n#  foreach(subdir ${SUBDIRS})\n\n#    add_subdirectory(${subdir})\n\n#  endforeach()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/cling/tools/plugins/clad/CMakeLists.txt" : {
      "ObjectId" : "8c184ed003f371e833c497bfe41deec94a7e2581",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify include dirs for clad\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Clad Libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build byproducts only needed by Ninja\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Wrap download, configure and build steps in a script to log output\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# We need the target clangBasic to be built before building clad. However, we\n\n# support building prebuilt clang and adding clangBasic breaks this case.\n\n# Delegate the dependency resolution to the clingInterpreter target (which\n\n# will always depend on clangBasic).\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Wrap download, configure and build steps in a script to log output\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# We need the target clangBasic to be built before building clad. However, we\n\n# support building prebuilt clang and adding clangBasic breaks this case.\n\n# Delegate the dependency resolution to the clingInterpreter target (which\n\n# will always depend on clangBasic).\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Register cladPlugin, cladDifferentiator\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "interpreter/cling/tools/plugins/example/CMakeLists.txt" : {
      "ObjectId" : "30dda3abafbf64805ccf169279366d747ebc1e4f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure if we are running the testsuite to build clingDemoPlugin before.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/CMakeLists.txt" : {
      "ObjectId" : "1a53e1444021c129b3958d713b4fc535be312334",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See docs/CMake.html for instructions about how to build LLVM with CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# automatic when 2.8.12 is required\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# if (POLICY CMP0051)\n\n#   # CMake 3.1 and higher include generator expressions of the form\n\n#   # $<TARGETLIB:obj> in the SOURCES property.  These need to be\n\n#   # stripped everywhere that access the SOURCES property, so we just\n\n#   # defer to the OLD behavior of not including generator expressions\n\n#   # in the output for now.\n\n#   cmake_policy(SET CMP0051 OLD)\n\n# endif()\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This should only apply if you are both on an Apple host, and targeting Apple.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if CMAKE_LIBTOOL is not set, try and find it with xcrun or find_program\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If DYLD_LIBRARY_PATH is set we need to set it on archiver commands\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Side-by-side subprojects layout: automatically set the\n\n# LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS\n\n# This allows an easy way of setting up a build directory for llvm and another\n\n# one for llvm+clang+... using the same sources.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# There is a widely spread opinion that clang-tools-extra should be merged\n\n# into clang. The following simulates it by always enabling clang-tools-extra\n\n# when enabling clang.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Build llvm with ccache if the package is present\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Some features of the LLVM build may be disallowed when dependency debugging is\n\n# enabled. In particular you cannot use ccache because we want to force compile\n\n# operations to always happen.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate a CompilationDatabase (compile_commands.json file) for our build,\n\n# for use by clang_complete, YouCompleteMe, etc.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Configure CPack.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Sanity check our source directory to make sure that we are not trying to\n\n# generate an in-tree build (unless on MSVC_IDE, where it is ok), and to make\n\n# sure that we don't have any stray generated files lying around in the tree\n\n# (which would end up getting picked up by header search, instead of the correct\n\n# versions).\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Each of them corresponds to llvm-config's.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --bindir\n\n# --libdir\n\n# --src-root\n\n# --includedir\n\n# --prefix\n",
        "Line" : 307,
        "CharPositionInLine" : 57
      },
      "18" : {
        "Text" : "# Note: LLVM_CMAKE_PATH does not include generated files\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List of all targets to be built by default:\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# List of targets with JIT support:\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Verify we are on a supported platform\n",
        "Line" : 418,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# If enabled, verify we are on a platform that supports oprofile.\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an option controlling whether we should build for 32-bit on 64-bit\n\n# platforms, where supported.\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 470,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user to\n\n# override.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Define options to control the inclusion and default build behavior for\n\n# components which may not strictly be necessary (tools, examples, and tests).\n\n#\n\n# This is primarily to support building smaller or faster project files.\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# You can configure which libraries from LLVM you want to include in the\n\n# shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited\n\n# list of LLVM components. All component names handled by llvm-config are valid.\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# A pool size of 1-2 is probably sufficient on a SSD. 3-4 should be fine\n\n# for spining disks. Anything higher may only help on slower mediums.\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# All options referred to from HandleLLVMOptions have to be specified\n\n# BEFORE this include, otherwise options will not be correctly set on\n\n# first cmake run\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Verify that we can find a Python 2 interpreter.  Python 3 is unsupported.\n\n# FIXME: We should support systems with only Python 3, but that requires work\n\n# on LLDB.\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "######\n\n# LLVMBuild Integration\n\n#\n\n# We use llvm-build to generate all the data required by the CMake based\n\n# build system in one swoop:\n\n#\n\n#  - We generate a file (a CMake fragment) in the object root which contains\n\n#    all the definitions that are required by CMake.\n\n#\n\n#  - We generate the library table used by llvm-config.\n\n#\n\n#  - We generate the dependencies for the CMake fragment, so that we will\n\n#    automatically reconfigure outselves.\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Create the list of optional components that are enabled\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# On Win32, CMake doesn't properly handle piping the default output/error\n\n# streams into the GUI console. So, we explicitly catch and report them.\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Include the generated CMake fragment. This will define properties from the\n\n# LLVMBuild files in a format which is easy to consume from CMake, and will add\n\n# the dependencies so that CMake will reconfigure properly when the LLVMBuild\n\n# files change.\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "######\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Configure all of the various header file fragments LLVM uses which depend on\n\n# configuration variables.\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Produce the target definition files, which provide a way for clients to easily\n\n# include various classes of targets.\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Configure the three LLVM configuration header files.\n",
        "Line" : 729,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Add target for generating source rpm package.\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# SVN_REVISION and GIT_COMMIT get set by the call to add_version_info_from_vcs.\n\n# DUMMY_VAR contains a version string which we don't care about.\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# They are not referenced. See set_output_directory().\n",
        "Line" : 767,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Work around a broken bfd ld behavior. When linking a binary with a\n\n# foo.so library, it will try to find any library that foo.so uses and\n\n# check its symbols. This is wasteful (the check was done when foo.so\n\n# was created) and can fail since it is not the dynamic linker and\n\n# doesn't know how to handle search paths correctly.\n",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# when crosscompiling import the executable targets from a file\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Dummy use to avoid CMake Wraning: Manually-specified variables were not used\n\n# (this is a variable that CrossCompile sets on recursive invocations)\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# On FreeBSD, /usr/local/* is not used by default. In order to build LLVM\n\n# with libxml2, iconv.h, etc., we must add /usr/local paths.\n",
        "Line" : 805,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# special hack for Solaris to handle crazy system sys/regset.h\n",
        "Line" : 812,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# Make sure we don't get -rdynamic in every binary. For those that need it,\n\n# use export_executable_symbols(target).\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# People report that -O3 is unreliable on MinGW. The traditional\n\n# build also uses -O2 for that reason:\n",
        "Line" : 835,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Put this before tblgen. Else we have a circular dependence.\n",
        "Line" : 840,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Force target to be built as soon as possible. Clang modules builds depend\n\n# header-wise on it as they ship all headers from the umbrella folders. Building\n\n# an entire module might include header, which depends on intrinsics_gen. This\n\n# should be right after LLVMSupport and LLVMTableGen otherwise we introduce a\n\n# circular dependence.\n",
        "Line" : 847,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util\n",
        "Line" : 874,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# This utility is used to prevent crashing tests from calling Dr. Watson on\n\n# Windows.\n",
        "Line" : 915,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 920,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by \"*.def\"\n",
        "Line" : 972,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Installing the headers needs to depend on generating any public\n\n# tablegen'd headers.\n",
        "Line" : 978,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# This must be at the end of the LLVM root CMakeLists file because it must run\n\n# after all targets are created.\n",
        "Line" : 991,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake\n",
        "Line" : 1015,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 61
    },
    "interpreter/llvm/src/bindings/ocaml/CMakeLists.txt" : {
      "ObjectId" : "20583682c3d750b01df13876a34bb91299c0dcf9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/all_backends/CMakeLists.txt" : {
      "ObjectId" : "716a49cc3281b34a21f1fcf15e1a2682b11cea5e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/analysis/CMakeLists.txt" : {
      "ObjectId" : "f8ca84ddbe33e8b8a7205ac80250d18bc067a4ce",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/backends/CMakeLists.txt" : {
      "ObjectId" : "18d62a857381491689bfdae8d8b4900f7dd54998",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/bitreader/CMakeLists.txt" : {
      "ObjectId" : "8d1610320e0e6c6d6ca2b9489c5449f04fd6ba66",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/bitwriter/CMakeLists.txt" : {
      "ObjectId" : "5a14498cb07e1372f9b80060bf547568a6820f12",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/executionengine/CMakeLists.txt" : {
      "ObjectId" : "ae9af088c025a1616de0d8529506d59532462e91",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/irreader/CMakeLists.txt" : {
      "ObjectId" : "87d269b48c7a3d0b372e1f4e7617dc2ef0d420f5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/linker/CMakeLists.txt" : {
      "ObjectId" : "b6bc8ac1e83091130ae4cc1ecdffbac32cd2d2d7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/llvm/CMakeLists.txt" : {
      "ObjectId" : "db7aee2adff9f147de17e17099fdcb81b9e525e6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/target/CMakeLists.txt" : {
      "ObjectId" : "adee0fcec659a36352d94ea2fb21b75dc223bc22",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/transforms/CMakeLists.txt" : {
      "ObjectId" : "beb8694019b7a87c065d5eb5c1bad3844a3fb2b2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/transforms/ipo/CMakeLists.txt" : {
      "ObjectId" : "4b8784fad67bb29707f063b1b52a810324e4d496",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/transforms/passmgr_builder/CMakeLists.txt" : {
      "ObjectId" : "b012863d8ec7ed57ccd1e6a47f4ed2964d88dabc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/transforms/scalar_opts/CMakeLists.txt" : {
      "ObjectId" : "98c7c6861d2b117df95b39e4b1ab3ef7801af362",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/transforms/utils/CMakeLists.txt" : {
      "ObjectId" : "37f3eb7d8ecabdf895d6f1615f5cdf5813042c08",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/bindings/ocaml/transforms/vectorize/CMakeLists.txt" : {
      "ObjectId" : "af0ffce563f6e0d31b0fc53a25771efe368bc806",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/cmake/config-ix.cmake" : {
      "ObjectId" : "d1c9a70d1061a212bda1359c7f6b01eb0d2d457c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We consider Cygwin as another Unix\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Used by check_symbol_exists:\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# x86_64 FreeBSD 9.2 requires libcxxrt to be specified explicitly.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helper macros and functions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include checks\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# older kernels use split files\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# library checks\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this could be Android\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# We want to find pthreads library and at the moment we do want to\n\n# have it reported as '-l<lib>' instead of '-pthread'.\n\n# TODO: switch to -pthread once the rest of the build system can deal with it.\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't look for these libraries on Windows. Also don't look for them if we're\n\n# using MSan, since uninstrumented third party code may call MSan interceptors\n\n# like strlen, leading to false positives.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#check_library_exists(${ZLIB_LIBRARY} compress2 \"\" HAVE_LIBZ)\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Skip libedit if using ASan as it contains memory leaks.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# function checks\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# AddressSanitizer conflicts with lib/Support/Unix/Signals.inc\n\n# Avoid sigaltstack on Apple platforms, where backtrace() cannot handle it\n\n# (rdar://7089625) and _Unwind_Backtrace is unusable because it cannot unwind\n\n# past the signal handler after an assertion failure (rdar://29866587).\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This check requires _GNU_SOURCE\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# available programs checks\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Define LLVM_HAS_ATOMICS if gcc or MSVC atomic builtins are supported.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Disable gcc's potentially uninitialized use analysis as it presents lots of\n\n# false positives.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Only recent versions of gcc make the distinction between -Wuninitialized\n\n# and -Wmaybe-uninitialized. If -Wmaybe-uninitialized isn't supported, just\n\n# turn off all uninitialized use warnings.\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Determine the native architecture.\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If build targets includes \"host\", then replace with native architecture.\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We don't have an ASM parser for all architectures yet.\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# We don't have an disassembler for all architectures yet.\n",
        "Line" : 438,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# TODO: Check existence of libraries.\n\n#   include(CheckLibraryExists)\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Use _strtoi64 if strtoll is not available.\n",
        "Line" : 452,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# See if the DIA SDK is available and usable.\n",
        "Line" : 466,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Due to a bug in MSVC 2013's installation software, it is possible\n\n# for MSVC 2013 to write the DIA SDK into the Visual Studio 2012\n\n# install directory.  If this happens, the installation is corrupt\n\n# and there's nothing we can do.  It happens with enough frequency\n\n# though that we should handle it.  We do so by simply checking that\n\n# the DIA SDK folder exists.  Should this happen you will need to\n\n# uninstall VS 2012 and then re-install VS 2013.\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# FIXME: Signal handler return type, currently hardcoded to 'void'\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check if threading primitives aren't supported on this platform\n",
        "Line" : 496,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Check if zlib is available in the system.\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# If we find doxygen and we want to enable doxygen by default create a\n\n# global aggregate doxygen target for generating llvm and any/all\n\n# subprojects doxygen documentation.\n",
        "Line" : 520,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 32
    },
    "interpreter/llvm/src/cmake/modules/AddLLVM.cmake" : {
      "ObjectId" : "e60c253fdfb1698034c9726c1809a354c40f9337",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_REQUIRES_EH is an internal flag that individual targets can use to\n\n# force EH\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# LLVM_REQUIRES_RTTI is an internal flag that individual\n\n# targets can use to force RTTI\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Assume that;\n\n#   - LLVM_COMPILE_FLAGS is list.\n\n#   - PROPERTY COMPILE_FLAGS is string.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Update target props, since all sources are C++.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Gold and BFD ld require a version script rather than a plain list.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Don't write the \"local:\" line on OpenBSD.\n\n# in the export file, also add a linker script to version LLVM symbols (form: LLVM_N.M)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Force re-linking when the exports file changes. Actually, it\n\n# forces recompilation of the source file. The LINK_DEPENDS target\n\n# property only works for makefile-based generators.\n\n# FIXME: This is not safe because this will create the same target\n\n# ${native_export_file} in several different file:\n\n# - One where we emitted ${target_name}_exports\n\n# - One where we emitted the build command for the following object.\n\n# set_property(SOURCE ${first_source_file} APPEND PROPERTY\n\n#   OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${native_export_file})\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add dependency to *_exports later -- CMake issue 14747\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Detect what linker we have here\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't use linker optimizations in debug builds since it slows down the\n\n# linker in a context where the optimizations are not important.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Pass -O3 to the linker. This enabled different optimizations on different\n\n# linkers.\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# With gold gc-sections is always safe.\n",
        "Line" : 189,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Note that there is a bug with -Wl,--icf=safe so it is not safe\n\n# to enable. See https://sourceware.org/bugzilla/show_bug.cgi?id=17704.\n",
        "Line" : 192,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# ld64's implementation of -dead_strip breaks tools that use plugins.\n",
        "Line" : 198,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Object files are compiled with -ffunction-data-sections.\n\n# Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks\n\n# tools that use plugins. Always pass --gc-sections once we require\n\n# a newer linker.\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.\n\n# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,\n\n# or a certain builder, for example, msbuild.exe, would be confused.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# module_dir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.\n\n# It affects output of add_library(MODULE).\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# DLL platform\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# If on Windows and building with MSVC, add the resource script containing the\n\n# VERSIONINFO data to the project.  This embeds version resource information\n\n# into the output .exe or .dll.\n\n# TODO: Enable for MinGW Windows builds too.\n\n#\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set_windows_version_resource_properties(name resource_file...\n\n#   VERSION_MAJOR int\n\n#     Optional major version number (defaults to LLVM_VERSION_MAJOR)\n\n#   VERSION_MINOR int\n\n#     Optional minor version number (defaults to LLVM_VERSION_MINOR)\n\n#   VERSION_PATCHLEVEL int\n\n#     Optional patchlevel version number (defaults to LLVM_VERSION_PATCH)\n\n#   VERSION_STRING\n\n#     Optional version string (defaults to PACKAGE_VERSION)\n\n#   PRODUCT_NAME\n\n#     Optional product name string (defaults to \"LLVM\")\n\n#   )\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# llvm_add_library(name sources...\n\n#   SHARED;STATIC\n\n#     STATIC by default w/o BUILD_SHARED_LIBS.\n\n#     SHARED by default w/  BUILD_SHARED_LIBS.\n\n#   OBJECT\n\n#     Also create an OBJECT library target. Default if STATIC && SHARED.\n\n#   MODULE\n\n#     Target ${name} might not be created on unsupported platforms.\n\n#     Check with \"if(TARGET ${name})\".\n\n#   DISABLE_LLVM_LINK_LLVM_DYLIB\n\n#     Do not link this library to libLLVM, even if\n\n#     LLVM_LINK_LLVM_DYLIB is enabled.\n\n#   OUTPUT_NAME name\n\n#     Corresponds to OUTPUT_NAME in target properties.\n\n#   DEPENDS targets...\n\n#     Same semantics as add_dependencies().\n\n#   LINK_COMPONENTS components...\n\n#     Same as the variable LLVM_LINK_COMPONENTS.\n\n#   LINK_LIBS lib_targets...\n\n#     Same semantics as target_link_libraries().\n\n#   ADDITIONAL_HEADERS\n\n#     May specify header files for IDE generators.\n\n#   SONAME\n\n#     Should set SONAME link flags and create symlinks\n\n#   PLUGIN_TOOL\n\n#     The tool (i.e. cmake target) that this plugin will link against\n\n#   )\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Pass through ADDITIONAL_HEADERS.\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Plugins that link against a tool are allowed even when plugins in general are not\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Generate objlib\n",
        "Line" : 396,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Do add_dependencies(obj) later due to CMake issue 14747.\n",
        "Line" : 406,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# static\n",
        "Line" : 413,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# DEPENDS has been appended to LLVM_COMMON_LIBS.\n",
        "Line" : 418,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# objlib\n",
        "Line" : 421,
        "CharPositionInLine" : 27
      },
      "29" : {
        "Text" : "# FIXME: Add name_static to anywhere in TARGET ${name}'s PROPERTY.\n",
        "Line" : 425,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# $<TARGET_OBJECTS> doesn't require compile flags.\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Set SOVERSION on shared libraries that lack explicit SONAME\n\n# specifier, on *nix systems that are not Darwin.\n",
        "Line" : 476,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Since 4.0.0, the ABI version is indicated by the major version\n",
        "Line" : 481,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 488,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# On DLL platforms symbols are imported from the tool by linking against it.\n",
        "Line" : 518,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Components have not been defined explicitly in CMake, so add the\n\n# dependency information for this library as defined by LLVMBuild.\n\n#\n\n# It would be nice to verify that we have the dependencies for this library\n\n# name, but using get_property(... SET) doesn't suffice to determine if a\n\n# property has been set to an empty value.\n",
        "Line" : 530,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# We can use PRIVATE since SO knows its dependent libs.\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Add dependencies also to objlibs.\n\n# CMake issue 14747 --  add_dependencies() might be ignored to objlib's user.\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Libraries that are meant to only be exposed via the build tree only are\n\n# never installed and are only exported as a target in the special build tree\n\n# config file.\n",
        "Line" : 578,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 631,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# DLL platform\n",
        "Line" : 639,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# Generate objlib\n",
        "Line" : 670,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 672,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Note: the dummy.cpp source file provides no definitions. However,\n\n# it forces Xcode to properly link the static library.\n",
        "Line" : 686,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# $<TARGET_OBJECTS> doesn't require compile flags.\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 713,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# libpthreads overrides some standard library symbols, so main\n\n# executable must be linked with it in order to provide consistent\n\n# API for all shared libaries loaded by this executable.\n",
        "Line" : 738,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# The symbol file should contain the symbols we want the executable to\n\n# export\n",
        "Line" : 747,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Extract the symbols to export from the static libraries that the\n\n# executable links against.\n",
        "Line" : 751,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# We need to consider not just the direct link dependencies, but also the\n\n# transitive link dependencies. Do this by starting with the set of direct\n\n# dependencies, then the dependencies of those dependencies, and so on.\n",
        "Line" : 755,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# If something links against this executable then we want a\n\n# transitive link against only the libraries whose symbols\n\n# we aren't exporting.\n",
        "Line" : 794,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# The default import library suffix that cmake uses for cygwin/mingw is\n\n# \".dll.a\", but for clang.exe that causes a collision with libclang.dll,\n\n# where the import libraries of both get named libclang.dll.a. Use a suffix\n\n# of \".exe.a\" to avoid this.\n",
        "Line" : 798,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# On Windows auto-exporting everything doesn't work because of the limit on\n\n# the size of the exported symbol table, but on other platforms we can do\n\n# it without any trouble.\n",
        "Line" : 806,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# This is a macro that is used to create targets for executables that are needed\n\n# for development, but that are not intended to be installed by default.\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Custom add_subdirectory wrapper\n\n# Takes in a project name (i.e. LLVM), the subdirectory name, and an optional\n\n# path if it differs from the name.\n",
        "Line" : 911,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Treat it as in-tree subproject.\n",
        "Line" : 921,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Don't process it in add_llvm_implicit_projects().\n",
        "Line" : 927,
        "CharPositionInLine" : 6
      },
      "57" : {
        "Text" : "# FIXME: It'd be redundant.\n",
        "Line" : 950,
        "CharPositionInLine" : 6
      },
      "58" : {
        "Text" : "# Add external project that may want to be built as part of llvm such as Clang,\n\n# lld, and Polly. This adds two options. One for the source directory of the\n\n# project, which defaults to ${CMAKE_CURRENT_SOURCE_DIR}/${name}. Another to\n\n# enable or disable building it with everything else.\n\n# Additional parameter can be specified as the name of directory.\n",
        "Line" : 956,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Generic support for adding a unittest.\n",
        "Line" : 1017,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Some parts of gtest rely on this GNU extension, don't warn on it.\n",
        "Line" : 1032,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# gtest needs it for raw_ostream\n",
        "Line" : 1039,
        "CharPositionInLine" : 44
      },
      "62" : {
        "Text" : "# libpthreads overrides some standard library symbols, so main\n\n# executable must be linked with it in order to provide consistent\n\n# API for all shared libaries loaded by this executable.\n",
        "Line" : 1043,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# FIXME: This should depend only on the libraries Go needs.\n",
        "Line" : 1059,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# This function canonicalize the CMake variables passed by names\n\n# from CMake boolean to 0/1 suitable for passing into Python or C++,\n\n# in place.\n",
        "Line" : 1085,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# This function provides an automatic way to 'configure'-like generate a file\n\n# based on a set of common and custom variables, specifically targeting the\n\n# variables needed for the 'lit.site.cfg' files. This function bundles the\n\n# common variables that any Lit instance is likely to need, and custom\n\n# variables can be passed in.\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Configuration-time: See Unit/lit.site.cfg.in\n",
        "Line" : 1111,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# They below might not be the build tree but provided binary tree.\n",
        "Line" : 1118,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# SHLIBDIR points the build tree.\n",
        "Line" : 1124,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# FIXME: \"ENABLE_SHARED\" doesn't make sense, since it is used just for\n\n# plugins. We may rename it.\n",
        "Line" : 1128,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Override config_target_triple (and the env)\n",
        "Line" : 1151,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# This is expanded into the heading.\n",
        "Line" : 1153,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# This is expanded to; config.target_triple = \"\"+config.target_triple+\"\"\n",
        "Line" : 1160,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# A raw function to create a lit target. This is used to implement the testuite\n\n# management functions.\n",
        "Line" : 1167,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Tests should be excluded from \"Build Solution\".\n",
        "Line" : 1201,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# A function to add a set of lit test suites to be driven through 'check-*' targets.\n",
        "Line" : 1205,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# EXCLUDE_FROM_ALL excludes the test ${target} out of check-all.\n",
        "Line" : 1209,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Register the testsuites, params and depends for the global check rule.\n",
        "Line" : 1211,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# Produce a specific suffixed check rule.\n",
        "Line" : 1218,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Search recursively for test directories by assuming anything not\n\n# in a directory called Inputs contains tests.\n",
        "Line" : 1231,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# Create a check- target for the directory.\n",
        "Line" : 1244,
        "CharPositionInLine" : 6
      },
      "81" : {
        "Text" : "# This got a bit gross... For multi-configuration generators the target\n\n# properties return the resolved value of the string, not the build system\n\n# expression. To reconstruct the platform-agnostic path we have to do some\n\n# magic. First we grab one of the types, and a type-specific path. Then from\n\n# the type-specific path we find the last occurrence of the type in the path,\n\n# and replace it with CMAKE_CFG_INTDIR. This allows the build step to be type\n\n# agnostic again. \n",
        "Line" : 1335,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# If you're not overriding the OUTPUT_DIR, we can make the link relative in\n\n# the same directory.\n",
        "Line" : 1343,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# Make sure both the link and target are toolchain tools\n",
        "Line" : 1398,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# $ORIGIN is not interpreted at link time by ld.bfd\n",
        "Line" : 1463,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 85
    },
    "interpreter/llvm/src/cmake/modules/AddLLVMDefinitions.cmake" : {
      "ObjectId" : "dab16236d3e9fa4d845c7325d99a8d04120e463d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There is no clear way of keeping track of compiler command-line\n\n# options chosen via `add_definitions', so we need our own method for\n\n# using it on tools/llvm-config/CMakeLists.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Beware that there is no implementation of remove_llvm_definitions.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We don't want no semicolons on LLVM_DEFINITIONS:\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/cmake/modules/AddOCaml.cmake" : {
      "ObjectId" : "1d8094cc505f54f7e27f92271c42f3ea38353fc9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build rules for the OCaml language.\n\n# Assumes FindOCaml is used.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# add_ocaml_library(pkg_a OCAML mod_a OCAMLDEP pkg_b C mod_a_stubs PKG ctypes LLVM core)\n\n#\n\n# Unnamed parameters:\n\n#\n\n#   * Library name.\n\n#\n\n# Named parameters:\n\n#\n\n# OCAML     OCaml module names. Imply presence of a corresponding .ml and .mli files.\n\n# OCAMLDEP  Names of libraries this library depends on.\n\n# C         C stub sources. Imply presence of a corresponding .c file.\n\n# CFLAGS    Additional arguments passed when compiling C stubs.\n\n# PKG       Names of ocamlfind packages this library depends on.\n\n# LLVM      Names of LLVM libraries this library depends on.\n\n# NOCOPY    Do not automatically copy sources (.c, .ml, .mli) from the source directory,\n\n#           e.g. if they are generated.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's an option, pass it without changes.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Otherwise assume it's a library name we need to link with.\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# include -D/-UNDEBUG to match dump function visibility\n\n# regex from HandleLLVMOptions.cmake\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "interpreter/llvm/src/cmake/modules/AddSphinxTarget.cmake" : {
      "ObjectId" : "4540c5c36c8e25ecdc3120ae29d9dafe388d0cf6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create sphinx target\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handy function for creating the different Sphinx targets.\n\n#\n\n# ``builder`` should be one of the supported builders used by\n\n# the sphinx-build command.\n\n#\n\n# ``project`` should be the project name\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Quiet: no output other than errors and warnings.\n",
        "Line" : 35,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# Treat warnings as errors if requested\n",
        "Line" : 36,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# Source\n",
        "Line" : 37,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Output\n",
        "Line" : 38,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : "# When \"clean\" target is run, remove the Sphinx build directory\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# We need to remove ${SPHINX_DOC_TREE_DIR} when make clean is run\n\n# but we should only add this path once\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Handle installation\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# FIXME: We might not ship all the tools that these man pages describe\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Slash indicates contents of\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : "# '/.' indicates: copy the contents of the directory directly into\n\n# the specified destination, without recreating the last component\n\n# of ${SPHINX_BUILD_DIR} implicitly.\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "interpreter/llvm/src/cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "ac4b0b7c03047804539479f74261b6be75de4dc3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First for users who use an installed LLVM, create the LLVMExports.cmake file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Then for users who want to link against the LLVM build tree, provide the\n\n# normal targets and the build tree only targets.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake requires that all targets expressed as dependencies exist, so we can't\n\n# have intrinsics_gen in LLVM_COMMON_DEPENDS when it is written out, otherwise\n\n# projects building out of tree will have CMake errors. This only gets hit when\n\n# LLVM_ENABLE_MODULES=On. Eventually we should come up with a better solution to\n\n# this, but there is no easy solution.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate LLVMConfig.cmake for the build tree.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We need to use the full path to the LLVM Exports file to make sure we get the\n\n# one from the build tree. This is due to our cmake files being split between\n\n# this source dir and the binary dir in the build tree configuration and the\n\n# LLVM_CONFIG_CMAKE_DIR being the source directory. In contrast in the install\n\n# tree, both the generated LLVMExports.cmake file and the rest of the cmake\n\n# source files are put in the same cmake directory.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For compatibility with projects that include(LLVMConfig)\n\n# via CMAKE_MODULE_PATH, place API modules next to it.\n\n# This should be removed in the future.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate LLVMConfig.cmake for the install tree.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Construct the proper number of get_filename_component(... PATH)\n\n# calls to compute the installation prefix.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate LLVMConfigVersion.cmake for build and install tree.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "interpreter/llvm/src/cmake/modules/CheckAtomic.cmake" : {
      "ObjectId" : "dcf021b8fddafa0e8afffa06795a9db72ee3ce91",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# atomic builtins are required for threading support.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sometimes linking against libatomic is required for atomic ops, if\n\n# the platform doesn't support lock-free atomics.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This isn't necessary on MSVC, so avoid command-line switch annoyance\n\n# by only running on GCC-like hosts.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First check if atomics work without the library.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check for 64 bit atomic operations.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## TODO: This define is only used for the legacy atomic operations in\n\n## llvm's Atomic.h, which should be replaced.  Other code simply\n\n## assumes C++11 <atomic> works.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "interpreter/llvm/src/cmake/modules/CheckCompilerVersion.cmake" : {
      "ObjectId" : "2e8f5445781c00b1dcb396d1d26e429e58b6abed",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the host compiler is new enough. LLVM requires at least GCC 4.8,\n\n# MSVC 2015 (Update 3), or Clang 3.1.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Otherwise, test that we aren't using too old of a version of libstdc++\n\n# with the Clang compiler. This is tricky as there is no real way to\n\n# check the version of libstdc++ directly. Instead we test for a known\n\n# bug in libstdc++4.6 that is fixed in libstdc++4.7.\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/cmake/modules/CheckLinkerFlag.cmake" : {
      "ObjectId" : "e96d35e7721ec434c63c0267773ef0c5d183b685",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/cmake/modules/ChooseMSVCCRT.cmake" : {
      "ObjectId" : "0e6e1aa55254e51480ba489e54c545c7a6accc25",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The macro choose_msvc_crt() takes a list of possible\n\n# C runtimes to choose from, in the form of compiler flags,\n\n# to present to the user. (MTd for /MTd, etc)\n\n#\n\n# The macro is invoked at the end of the file.\n\n#\n\n# CMake already sets CRT flags in the CMAKE_CXX_FLAGS_* and\n\n# CMAKE_C_FLAGS_* variables by default. To let the user\n\n# override that for each build type:\n\n# 1. Detect which CRT is already selected, and reflect this in\n\n# LLVM_USE_CRT_* so the user can have a better idea of what\n\n# changes they're making.\n\n# 2. Replace the flags in both variables with the new flag via a regex.\n\n# 3. set() the variables back into the cache so the changes\n\n# are user-visible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Helper macros: ###\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trying to match the beginning or end of the string with stuff\n\n# like [ ^]+ didn't work, so use a bunch of parentheses instead.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find the selected-by-CMake CRT for each build type, if any.\n\n# Strip off the leading slash and any whitespace.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Replaces or adds a flag to a variable.\n\n# Expects 'flag' to be padded with spaces.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure this change gets reflected in the cache/gui.\n\n# CMake requires the docstring parameter whenever set() touches the cache,\n\n# so get the existing docstring and re-use that.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# List of valid CRTs for MSVC\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "interpreter/llvm/src/cmake/modules/CrossCompile.cmake" : {
      "ObjectId" : "b0726ebd4de238b419f405f24d57e169e59511a1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Propagate LLVM_EXTERNAL_CLANG_SOURCE_DIR so that clang-tblgen can be built\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/cmake/modules/DetermineGCCCompatible.cmake" : {
      "ObjectId" : "1369ebe9d0e212e57dcbf7f82a5d94d201a48eaf",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine if the compiler has GCC-compatible command-line syntax.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/cmake/modules/FindOCaml.cmake" : {
      "ObjectId" : "8eba2127df1b361d9b70728d9f09a85753eb3286",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() module for the OCaml language.\n\n# Assumes ocamlfind will be used for compilation.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(OCaml)\n\n#\n\n# If successful, the following variables will be defined:\n\n# OCAMLFIND\n\n# OCAML_VERSION\n\n# OCAML_STDLIB_PATH\n\n# HAVE_OCAMLOPT\n\n#\n\n# Also provides find_ocamlfind_package() macro.\n\n#\n\n# Example usage:\n\n#\n\n# find_ocamlfind_package(ctypes)\n\n#\n\n# In any case, the following variables are defined:\n\n#\n\n# HAVE_OCAML_${pkg}\n\n#\n\n# If successful, the following variables will be defined:\n\n#\n\n# OCAML_${pkg}_VERSION\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's optional and the constraint is not satisfied, pretend\n\n# it wasn't found.\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "9d252e8b70aef4abf8a8da21eb0248bea53137a6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() Module for Sphinx documentation generator\n\n# http://sphinx-doc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Sphinx)\n\n#\n\n# If successful the following variables will be defined\n\n# SPHINX_FOUND\n\n# SPHINX_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set SPHINX_FOUND to true if SPHINX_EXECUTABLE exists\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide options for controlling different types of output\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/cmake/modules/GenerateVersionFromCVS.cmake" : {
      "ObjectId" : "6b1c719834667d4c7f1338d947d1e8c03e76ae38",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   SRC               - Source directory\n\n#   HEADER_FILE       - The header file to write\n\n#\n\n# The output header will contain macros FIRST_REPOSITORY and FIRST_REVISION,\n\n# and SECOND_REPOSITORY and SECOND_REVISION if requested, where \"FIRST\" and\n\n# \"SECOND\" are substituted with the names specified in the input variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "interpreter/llvm/src/cmake/modules/GetHostTriple.cmake" : {
      "ObjectId" : "0cad1db4effee791d348afe87a2774723b88ae55",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns the host triple.\n\n# Invokes config.guess\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/cmake/modules/GetSVN.cmake" : {
      "ObjectId" : "d512bd292cf43f3f875e5063b5725e1fc6597f89",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   FIRST_SOURCE_DIR  - First source directory\n\n#   FIRST_NAME        - The macro prefix for the first repository's info\n\n#   SECOND_SOURCE_DIR - Second source directory (opt)\n\n#   SECOND_NAME       - The macro prefix for the second repository's info (opt)\n\n#   HEADER_FILE       - The header file to write\n\n#\n\n# The output header will contain macros FIRST_REPOSITORY and FIRST_REVISION,\n\n# and SECOND_REPOSITORY and SECOND_REVISION if requested, where \"FIRST\" and\n\n# \"SECOND\" are substituted with the names specified in the input variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If svn is a bat file, find_program(Subversion) doesn't find it.\n\n# Explicitly search for that here; Subversion_SVN_EXECUTABLE will override\n\n# the find_program call in FindSubversion.cmake.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "interpreter/llvm/src/cmake/modules/HandleLLVMOptions.cmake" : {
      "ObjectId" : "0676317acc684afaea7775f23ecfbb74ab3579fc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for interpreting the user defined LLVM_\n\n# options and executing the appropriate CMake commands to realize the users'\n\n# selections.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is commonly needed so make sure it's defined before we include anything\n\n# else.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ninja Job Pool support\n\n# The following only works with the Ninja generator in CMake >= 3.0.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pass /MANIFEST:NO so that CMake doesn't run mt.exe on our binaries.  Adding\n\n# manifests with mt.exe breaks LLD's symbol tables and takes as much time as\n\n# the link. See PR24476.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# On non-Debug builds cmake automatically defines NDEBUG, so we\n\n# explicitly undefine it:\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# We don't need to do anything special to turn off ABI breaking checks.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Treat LLVM_ABI_BREAKING_CHECKS like \"FORCE_OFF\" when it has not been\n\n# defined.\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# We use *.dylib rather than *.so on darwin.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Darwin-specific linker flags for loadable modules.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Pass -Wl,-z,defs. This makes sure all symbols are defined. Otherwise a DSO\n\n# build might work on ELF but fail on MachO/COFF.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Xcode has -mdynamic-no-pic on by default, which overrides -fPIC. I don't\n\n# know how to disable this, so just force ENABLE_PIC off for now.\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# On Windows all code is PIC. MinGW warns if -fPIC is used.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# MinGW warns if -fvisibility-inlines-hidden is used.\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# If building on a GNU specific 32-bit system, make sure off_t is 64 bits\n\n# so that off_t can stored offset > 2GB\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# For Xcode enable several build settings that correspond to\n\n# many warnings that are on by default in Clang but are\n\n# not enabled for historical reasons.  For versions of Xcode\n\n# that do not support these options they will simply\n\n# be ignored.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# On Win32 using MS tools, provide an option to set the number of parallel jobs\n\n# to use.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set stack reserved size to ~10MB\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CMake previously automatically set this value for MSVC builds, but the\n\n# behavior was changed in CMake 2.8.11 (Issue 12437) to use the MSVC default\n\n# value (1 MB) which is not enough for us in tasks such as parsing recursive\n\n# C++ templates in Clang.\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# FIXME: Also cygwin?\n",
        "Line" : 289,
        "CharPositionInLine" : 14
      },
      "22" : {
        "Text" : "# Pass -mbig-obj to mingw gas on Win64. COFF has a 2**16 section limit, and\n\n# on Win64, every COMDAT function creates at least 3 sections: .text, .pdata,\n\n# and .xdata.\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For MSVC 2013, disable iterator null pointer checking in debug mode,\n\n# especially so std::equal(nullptr, nullptr, nullptr) will not assert.\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add definitions that make MSVC much less annoying.\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For some reason MS wants to deprecate a bunch of standard functions...\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Tell MSVC to use the Unicode version of the Win32 APIs instead of ANSI.\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# /Zc:strictStrings is incompatible with VS12's (Visual Studio 2013's)\n\n# debug mode headers. Instead of only enabling them in VS2013's debug mode,\n\n# we'll just enable them for Visual Studio 2015 (VS 14, MSVC_VERSION 1900)\n\n# and up.\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Disable string literal const->non-const type conversion.\n\n# \"When specified, the compiler requires strict const-qualification\n\n# conformance for pointers initialized by using string literals.\"\n",
        "Line" : 341,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# \"Generate Intrinsic Functions\".\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# \"Enforce type conversion rules\".\n",
        "Line" : 350,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# clang-cl and cl by default produce non-deterministic binaries because\n\n# link.exe /incremental requires a timestamp in the .obj file.  clang-cl\n\n# has the flag /Brepro to force deterministic binaries. We want to pass that\n\n# whenever you're building with clang unless you're passing /incremental\n\n# or using LTO (/Brepro with LTO would result in a warning about the flag\n\n# being unused, because we're not generating object files).\n\n# This checks CMAKE_CXX_COMPILER_ID in addition to check_cxx_compiler_flag()\n\n# because cl.exe does not emit an error on flags it doesn't understand,\n\n# letting check_cxx_compiler_flag() claim it understands all flags.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Check if /INCREMENTAL is passed to the linker and complain that it\n\n# won't work with /Brepro.\n",
        "Line" : 365,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# MinGW and Cygwin are a bit stricter and lack things like\n\n# 'strdup', 'stricmp', etc in c++11 mode.\n",
        "Line" : 395,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# On Darwin -fmodules does not imply -fcxx-modules.\n",
        "Line" : 409,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Check that we can build code with modules enabled, and that repeatedly\n\n# including <cassert> still manages to respect NDEBUG properly.\n",
        "Line" : 422,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Disabled warnings.\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Suppress ''modifier' : used more than once' (because of __forceinline combined with inline)\n\n# Suppress 'unary minus operator applied to unsigned type, result still unsigned'\n\n# Suppress 'qualifier applied to function type has no meaning; ignored'\n\n# Suppress ''argument' : conversion from 'type1' to 'type2', possible loss of data'\n\n# Suppress ''var' : definition from the for loop is ignored; the definition from the enclosing scope is used'\n\n# Suppress ''var' : conversion from 'size_t' to 'type', possible loss of data'\n\n# Suppress ''declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception'\n\n# Suppress 'behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized'\n\n# Suppress 'new behavior: elements of array 'array' will be default initialized'\n\n# Suppress ''this' : used in base member initializer list'\n\n# Suppress 'declaration of 'var' hides local variable'\n\n# Suppress 'declaration of 'var' hides function parameter'\n\n# Suppress 'declaration of 'var' hides class member'\n\n# Suppress 'declaration of 'var' hides global declaration'\n\n# Suppress ''identifier' : decorated name length exceeded, name was truncated'\n\n# Suppress ''derived class' : destructor could not be generated because a base class destructor is inaccessible'\n\n# Suppress 'function' : destructor never returns, potential memory leak\n\n# Suppress ''type' : forcing value to bool 'true' or 'false' (performance warning)'\n\n# Suppress 'unreferenced formal parameter'\n\n# Suppress 'conditional expression is constant'\n\n# Suppress 'assignment operator could not be generated'\n\n# Suppress 'unreferenced local function has been removed'\n\n# Suppress '<class> can never be instantiated'\n\n# Suppress 'default constructor could not be generated'\n\n# Suppress 'unreachable code'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'assignment within conditional expression'\n\n# Suppress 'cast truncates constant value'\n\n# Suppress 'potentially uninitialized local variable'\n\n# Suppress 'potentially uninitialized local pointer variable'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'interaction between '_setjmp' and C++ object destruction is non-portable'\n\n# Suppress 'unsafe mix of type <type> and type <type> in operation'\n\n# Suppress 'nonstandard extension used : non-constant aggregate initializer'\n\n# Suppress 'noexcept used with no exception handling mode specified; termination on exception is not guaranteed'\n\n# Suppress 'typedef: ignored on left of '' when no variable is declared'\n",
        "Line" : 442,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# C4592 is disabled because of false positives in Visual Studio 2015\n\n# Update 1. Re-evaluate the usefulness of this diagnostic with Update 2.\n",
        "Line" : 478,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# Suppress ''var': symbol will be dynamically initialized (implementation limitation)\n\n# Suppress ''operator' : zero extending 'type' to 'type' of greater size'\n",
        "Line" : 480,
        "CharPositionInLine" : 12
      },
      "40" : {
        "Text" : "# Ideally, we'd like this warning to be enabled, but MSVC 2013 doesn't\n\n# support the 'aligned' attribute in the way that clang sources requires (for\n\n# any code that uses the LLVM_ALIGNAS macro), so this is must be disabled to\n\n# avoid unwanted alignment warnings.\n\n# When we switch to requiring a version of MSVC that supports the 'alignas'\n\n# specifier (MSVC 2015?) this warning can be re-enabled.\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Suppress 'structure was padded due to __declspec(align())'\n",
        "Line" : 489,
        "CharPositionInLine" : 12
      },
      "42" : {
        "Text" : "# Promoted warnings.\n",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Promote 'enumerator in switch of enum is not handled' to level 1 warning.\n",
        "Line" : 492,
        "CharPositionInLine" : 12
      },
      "44" : {
        "Text" : "# Promoted warnings to errors.\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Promote 'nonstandard extension used : class rvalue used as lvalue' to error.\n",
        "Line" : 495,
        "CharPositionInLine" : 12
      },
      "46" : {
        "Text" : "# Enable warnings\n",
        "Line" : 498,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Put /W4 in front of all the -we flags. cl.exe doesn't care, but for\n\n# clang-cl having /W4 after the -we flags will re-enable the warnings\n\n# disabled by -we.\n",
        "Line" : 500,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# CMake appends /W3 by default, and having /W3 followed by /W4 will result in\n\n# cl : Command line warning D9025 : overriding '/W3' with '/W4'.  Since this is\n\n# a command line warning and not a compiler warning, it cannot be suppressed except\n\n# by fixing the command line.\n",
        "Line" : 504,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# No MSVC equivalent available\n",
        "Line" : 512,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# Turn off missing field initializer warnings for gcc to avoid noise from\n\n# false positives with empty {}. Turn them on otherwise (they're off by\n\n# default for clang).\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Check if -Wnon-virtual-dtor warns even though the class is marked final.\n\n# If it does, don't add it. So it won't be added on clang 3.4 and older.\n\n# This also catches cases when -Wnon-virtual-dtor isn't supported by\n\n# the compiler at all.  This flag is not activated for gcc since it will\n\n# incorrectly identify a protected non-virtual base when there is a friend\n\n# declaration. Don't activate this in general on Windows as this warning has\n\n# too many false positives on COM-style classes, which are destroyed with\n\n# Release() (PR32286).\n",
        "Line" : 546,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Enable -Wdelete-non-virtual-dtor if available.\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Check if -Wcomment is OK with an // comment ending with '\\' if the next\n\n# line is also a // comment.\n",
        "Line" : 569,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Enable -Wstring-conversion to catch misuse of string literals.\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Append -fno-omit-frame-pointer and turn on debug info to get better\n\n# stack traces.\n",
        "Line" : 590,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Use -O1 even in debug mode, otherwise sanitizers slowdown is too large.\n",
        "Line" : 597,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Keep frame pointers around.\n",
        "Line" : 602,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Use DWARF debug info with LLD.\n",
        "Line" : 605,
        "CharPositionInLine" : 6
      },
      "59" : {
        "Text" : "# Enable codeview otherwise.\n",
        "Line" : 608,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# Always ask the linker to produce symbols with asan.\n",
        "Line" : 611,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Turn on sanitizers if necessary.\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Turn on -gsplit-dwarf if requested\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# clang doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# lld doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Add flags for add_dead_strip().\n\n# FIXME: With MSVS, consider compiling with /Gy and linking with /OPT:REF?\n\n# But MinSizeRel seems to add that automatically, so maybe disable these\n\n# flags instead if LLVM_NO_DEAD_STRIP is set.\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Don't add -ffunction-section if it can be disabled with -fno-function-sections.\n\n# Doing so will break sanitizers.\n",
        "Line" : 703,
        "CharPositionInLine" : 6
      },
      "67" : {
        "Text" : "# Remove flags here, for exceptions and RTTI.\n\n# Each target property or source property should be responsible to control\n\n# them.\n\n# CL.EXE complains to override flags like \"/GR /GR-\".\n",
        "Line" : 712,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Provide public options to globally control RTTI and EH\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# If the linker supports it, enable the lto cache. This improves initial build\n\n# time a little since we re-link a lot of the same objects, and significantly\n\n# improves incremental build time.\n\n# FIXME: We should move all this logic into the clang driver.\n",
        "Line" : 751,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# This option makes utils/extract_symbols.py be used to determine the list of\n\n# symbols to export from LLVM tools. This is necessary when using MSVC if you\n\n# want to allow plugins, though note that the plugin has to explicitly link\n\n# against (exactly one) tool so we can't unilaterally turn on\n\n# LLVM_ENABLE_PLUGINS when it's enabled.\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Plugin support\n\n# FIXME: Make this configurable.\n",
        "Line" : 790,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 72
    },
    "interpreter/llvm/src/cmake/modules/HandleLLVMStdlib.cmake" : {
      "ObjectId" : "c0512ac34f6dab5e8b84fedd9f72c4349bae4c7c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for setting the standard library to libc++\n\n# if the user has requested it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/cmake/modules/LLVM-Config.cmake" : {
      "ObjectId" : "52330151065b69c0d7e7c1b51f0874061ae029c7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# is_llvm_target_library(\n\n#   library\n\n#     Name of the LLVM library to check\n\n#   return_var\n\n#     Output variable name\n\n#   ALL_TARGETS;INCLUDED_TARGETS;OMITTED_TARGETS\n\n#     ALL_TARGETS - default looks at the full list of known targets\n\n#     INCLUDED_TARGETS - looks only at targets being configured\n\n#     OMITTED_TARGETS - looks only at targets that are not being configured\n\n# )\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets variable `return_var' to ON if `library' corresponds to a\n\n# LLVM supported target. To OFF if it doesn't.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If USE_SHARED is specified, then we link against libLLVM,\n\n# but also against the component libraries below. This is\n\n# done in case libLLVM does not contain all of the components\n\n# the target requires.\n\n#\n\n# Strip LLVM_DYLIB_COMPONENTS out of link_components.\n\n# To do this, we need special handling for \"all\", since that\n\n# may imply linking to libraries that are not included in\n\n# libLLVM.\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use plain form for legacy user.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This is Deprecated\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a variant intended for the final user:\n\n# Map LINK_COMPONENTS to actual libnames.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Inside LLVM itself available libs are in a global property.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Generally in our build system we avoid order-dependence. Unfortunately since\n\n# not all targets create the same set of libraries we actually need to ensure\n\n# that all build targets associated with a target are added before we can\n\n# process target dependencies.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Expand some keywords:\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Translate symbolic component names to real libraries:\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# add codegen, asmprinter, asmparser, disassembler\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# already processed\n",
        "Line" : 200,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# same case as in `native'.\n",
        "Line" : 210,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# already processed\n",
        "Line" : 212,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Link all the asm printers from all the targets\n",
        "Line" : 216,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Link all the asm parsers from all the targets\n",
        "Line" : 223,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Link all the descs from all the targets\n",
        "Line" : 230,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Link all the disassemblers from all the targets\n",
        "Line" : 237,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Link all the infos from all the targets\n",
        "Line" : 244,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Canonize the component name:\n",
        "Line" : 251,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# The component is unknown. Maybe is an omitted target?\n",
        "Line" : 255,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# A missing library to a directly referenced omitted target would be bad.\n",
        "Line" : 258,
        "CharPositionInLine" : 10
      },
      "22" : {
        "Text" : "# If it is not an omitted target we should assume it is a component\n\n# that hasn't yet been processed by CMake. Missing components will\n\n# cause errors later in the configuration, so we can safely assume\n\n# that this is valid here.\n",
        "Line" : 261,
        "CharPositionInLine" : 10
      },
      "23" : {
        "Text" : "# Perform a post-order traversal of the dependency graph.\n\n# This duplicates the algorithm used by llvm-config, originally\n\n# in tools/llvm-config/llvm-config.cpp, function ComputeLibsForComponents.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Expand dependencies while topologically sorting the list of libraries:\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Return just the libraries included in this build:\n",
        "Line" : 315,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "interpreter/llvm/src/cmake/modules/LLVMExternalProjectUtils.cmake" : {
      "ObjectId" : "c851eb8dbf0861e4cad3a31aefd8ac5fdc3b5a3d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# llvm_ExternalProject_BuildCmd(out_var target)\n\n#   Utility function for constructing command lines for external project targets\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use special command for Makefiles to support parallelism.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# llvm_ExternalProject_Add(name source_dir ...\n\n#   USE_TOOLCHAIN\n\n#     Use just-built tools (see TOOLCHAIN_TOOLS)\n\n#   EXCLUDE_FROM_ALL\n\n#     Exclude this project from the all target\n\n#   NO_INSTALL\n\n#     Don't generate install targets for this project\n\n#   ALWAYS_CLEAN\n\n#     Always clean the sub-project before building\n\n#   CMAKE_ARGS arguments...\n\n#     Optional cmake arguments to pass when configuring the project\n\n#   TOOLCHAIN_TOOLS targets...\n\n#     Targets for toolchain tools (defaults to clang;lld)\n\n#   DEPENDS targets...\n\n#     Targets that this project depends on\n\n#   EXTRA_TARGETS targets...\n\n#     Extra targets in the subproject to generate targets for\n\n#   PASSTHROUGH_PREFIXES prefix...\n\n#     Extra variable prefixes (name is always included) to pass down\n\n#   )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all variables that start with a prefix and propagate them through\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add top-level targets\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "interpreter/llvm/src/cmake/modules/LLVMInstallSymlink.cmake" : {
      "ObjectId" : "482697b06bafcdc9bee82eae15a630c73ffefa2e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to execute this script at installation time because the\n\n# DESTDIR environment variable may be unset at configuration time.\n\n# See PR8397.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/cmake/modules/LLVMProcessSources.cmake" : {
      "ObjectId" : "ae1921b5bc0b5a0aab581908853238f5b7d04ef5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Replaces a compiler option or switch `old' in `var' by `new'.\n\n# If `old' is not in `var', appends `new' to `var'.\n\n# Example: llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-O2\")\n\n# If the option already is on the variable, don't add it:\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This adds .td and .h files to the Visual Studio solution:\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Don't reject hidden files. Some editors create backups in the\n\n# same directory as the file.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/cmake/modules/TableGen.cmake" : {
      "ObjectId" : "8c3e2d7d700473af28112f27d2fdb6743c8ce47b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_TARGET_DEFINITIONS must contain the name of the .td file to process.\n\n# Extra parameters for `tblgen' may come after `ofn' parameter.\n\n# Adds the name of the generated file to TABLEGEN_OUTPUT.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Validate calling context.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use depfile instead of globbing arbitrary *.td(s)\n\n# DEPFILE is available for Ninja Generator with CMake>=3.7.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make output path relative to build.ninja, assuming located on\n\n# ${CMAKE_BINARY_DIR}.\n\n# CMake emits build targets as relative paths but Ninja doesn't identify\n\n# absolute path (in *.d) as relative path (in build.ninja)\n\n# Note that tblgen is executed on ${CMAKE_BINARY_DIR} as working directory.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# We need both _TABLEGEN_TARGET and _TABLEGEN_EXE in the  DEPENDS list\n\n# (both the target and the file) to have .inc files rebuilt on\n\n# a tablegen change, as cmake does not propagate file-level dependencies\n\n# of custom targets. See the following ticket for more information:\n\n# https://cmake.org/Bug/view.php?id=15858\n\n# The dependency on both, the target and the file, produces the same\n\n# dependency twice in the result file when\n\n# (\"${${project}_TABLEGEN_TARGET}\" STREQUAL \"${${project}_TABLEGEN_EXE}\")\n\n# but lets us having smaller and cleaner code here.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Generate tablegen output in a temporary file.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# The file in LLVM_TARGET_DEFINITIONS may be not in the current\n\n# directory and local_tds may not contain it, so we must\n\n# explicitly list it here:\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Only update the real output file if there are any differences.\n\n# This prevents recompilation of all the files depending on it if there\n\n# aren't any.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# `make clean' must remove all those generated files:\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Creates a target for publicly exporting tablegen dependencies.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CMake-3.9 doesn't let compilation units depend on their dependent libraries.\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# FIXME: It leaks to user, callee of add_tablegen.\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Upgrade existing LLVM_TABLEGEN setting.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Effective tblgen executable to be used:\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "interpreter/llvm/src/cmake/modules/VersionFromVCS.cmake" : {
      "ObjectId" : "552fe77cdfb6890d43b34ff0fc478e29577951b7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds version control information to the variable VERS. For\n\n# determining the Version Control System used (if any) it inspects the\n\n# existence of certain subdirectories under SOURCE_DIR (if provided as an\n\n# extra argument, otherwise uses CMAKE_CURRENT_SOURCE_DIR).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Run from a subdirectory to force git to print an absoute path.\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Try to get a ref-id\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Get the repository URL\n",
        "Line" : 43,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Get the svn revision number for this git commit if one exists.\n",
        "Line" : 58,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# Get the git ref id\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "interpreter/llvm/src/cmake/platforms/Android.cmake" : {
      "ObjectId" : "2a6f5a5e45b78d753e7f90e2198381ce544153db",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for Android NDK.\n\n# This is expected to be used with a standalone Android toolchain (see\n\n# docs/STANDALONE-TOOLCHAIN.html in the NDK on how to get one).\n\n#\n\n# Usage:\n\n# mkdir build; cd build\n\n# cmake ..; make\n\n# mkdir android; cd android\n\n# cmake -DLLVM_ANDROID_TOOLCHAIN_DIR=/path/to/android/ndk \\\n\n#   -DCMAKE_TOOLCHAIN_FILE=../../cmake/platforms/Android.cmake ../..\n\n# make <target>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/cmake/platforms/iOS.cmake" : {
      "ObjectId" : "15c7aae12c702bfdbcdce50460bf8df3f3273366",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for iOS.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/docs/CMakeLists.txt" : {
      "ObjectId" : "4437610146c45a04316f2f1a1fab6fca5d1d984a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ./ suffix is needed to copy the contents of html directory without\n\n# appending html/ into LLVM_INSTALL_DOXYGEN_HTML_DIR.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ./ suffix is needed to copy the contents of html directory without\n\n# appending html/ into LLVM_INSTALL_OCAMLDOC_HTML_DIR.\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/examples/BrainF/CMakeLists.txt" : {
      "ObjectId" : "7b44b3a62756a4cc7be46c28828b343be564ed38",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/CMakeLists.txt" : {
      "ObjectId" : "5727066d6227b37e3615a9bc057a9cbf703322ca",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/ExceptionDemo/CMakeLists.txt" : {
      "ObjectId" : "793cf291ca6f110eae23c396e24c2ee3cd050bcd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable EH and RTTI for this demo\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/examples/Fibonacci/CMakeLists.txt" : {
      "ObjectId" : "e294a2523759a9a08ad2171e9ec3c20aa876a42f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/HowToUseJIT/CMakeLists.txt" : {
      "ObjectId" : "e86626d5cec646196a6071c82cc90c0ed7a86dcd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/CMakeLists.txt" : {
      "ObjectId" : "947b5a3a3271ef394e0e12a8ee3cf20f755feecd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/Chapter1/CMakeLists.txt" : {
      "ObjectId" : "657a14be87d0f2d0fd387f3a57b27a3d5f27b8af",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/Chapter2/CMakeLists.txt" : {
      "ObjectId" : "ea5bc05fa00a1854ee648c6ccf4b9ab7dfa10cd2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/Chapter3/CMakeLists.txt" : {
      "ObjectId" : "51800a64b1e30c967d54880f1c117b60827188d9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/Chapter4/CMakeLists.txt" : {
      "ObjectId" : "7cd40a1da60dc2c1af054fa94063c31641cd3a47",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/Chapter5/CMakeLists.txt" : {
      "ObjectId" : "d5b832b495504f785a481a0fcbf1686488c57a5f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/CMakeLists.txt" : {
      "ObjectId" : "ef0240c0ca771138d8e4671cbc362fbe97df02b1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/CMakeLists.txt" : {
      "ObjectId" : "543b9f73b4fe257e6764141e15e6a9f44fc04fa2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter2/CMakeLists.txt" : {
      "ObjectId" : "e4f275d01d4059cc104a938214c32b672fcd4c2a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter3/CMakeLists.txt" : {
      "ObjectId" : "8053c968f3dd978fc42b934d1e2bf885fd55cd6e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter4/CMakeLists.txt" : {
      "ObjectId" : "89feed143adcd53ab0ed2d5e4e1d4c4e66dccdda",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter5/CMakeLists.txt" : {
      "ObjectId" : "c0ae70654c363cfecfbf8b3e08d622a64d99f87c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter6/CMakeLists.txt" : {
      "ObjectId" : "49627f07ddf05ece09bdcac0bf8d9f46cb163c2b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter7/CMakeLists.txt" : {
      "ObjectId" : "69e78be6a620757daaf4bb13227a892b04cca4e4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter8/CMakeLists.txt" : {
      "ObjectId" : "1bb1cd25af72d836db0f8670d13fcda00b059af1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/Kaleidoscope/Chapter9/CMakeLists.txt" : {
      "ObjectId" : "a85b2c5e8b318de8c01083422893ec5cefb0382d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/ModuleMaker/CMakeLists.txt" : {
      "ObjectId" : "a73909a13bd48eadeaa9382dddc9c0c3b41002f2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/examples/ParallelJIT/CMakeLists.txt" : {
      "ObjectId" : "deeee072b33caa3896a10b9550d1bb8ad1875979",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/include/llvm/CMakeLists.txt" : {
      "ObjectId" : "1d5ca3ba92b0e153b3424d83316cee9534522a4f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we're doing an out-of-tree build, copy a module map for generated\n\n# header files into the build area.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/include/llvm/Config/abi-breaking.h.cmake" : {
      "ObjectId" : "7ae401e5b8a8c7df2826869e3569d6a4cb517642",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/abi-breaking.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file controls the C++ ABI break introduced in LLVM public header. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to enable checks that alter the LLVM C++ ABI */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to enable reverse iteration of unordered llvm containers */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Allow selectively disabling link-time mismatch checking so that header-only\n   ADT content from LLVM can be used without linking libSupport. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "// ABI_BREAKING_CHECKS protection: provides link-time failure when clients build\n// mismatch with LLVM",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "// Use pragma with MSVC",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "// FIXME: Implement checks without weak.",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "interpreter/llvm/src/include/llvm/Config/config.h.cmake" : {
      "ObjectId" : "1289551f0739a607c235ab9e93ae1d04eae8a083",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Exported configuration */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 to enable backtraces, and to 0 otherwise. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 to enable crash overrides, and to 0 otherwise. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the `backtrace' function. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the <CrashReporterClient.h> header file. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* can use __crashreporter_info__ */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the declaration of `arc4random', and to 0 if you\n   don't. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_ALL_EXCEPT', and to 0 if you\n   don't. */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_INEXACT', and to 0 if you\n   don't. */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you\n   don't. */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the DIA SDK installed, and to 0 if you don't. */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if dlopen() is available on this platform. */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if dladdr() is available on this platform. */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the <errno.h> header file. */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have the <fcntl.h> header file. */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to 1 if you have the <fenv.h> header file. */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define if libffi is available on this platform. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to 1 if you have the <ffi/ffi.h> header file. */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to 1 if you have the <ffi.h> header file. */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the `futimens' function. */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to 1 if you have the `futimes' function. */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to 1 if you have the `getcwd' function. */",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the `getpagesize' function. */",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to 1 if you have the `getrlimit' function. */",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define to 1 if you have the `getrusage' function. */",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to 1 if you have the `gettimeofday' function. */",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to 1 if the system has the type `int64_t'. */",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have the <inttypes.h> header file. */",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define to 1 if you have the `isatty' function. */",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have the `edit' library (-ledit). */",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the `psapi' library (-lpsapi). */",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Define to 1 if you have the `pthread' library (-lpthread). */",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Define to 1 if you have the `shell32' library (-lshell32). */",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to 1 if you have the `z' library (-lz). */",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to 1 if you have the <link.h> header file. */",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to 1 if you have the `lseek64' function. */",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to 1 if you have the <mach/mach.h> header file. */",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define to 1 if you have the `mallctl' function. */",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to 1 if you have the `mallinfo' function. */",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Define to 1 if you have the <malloc.h> header file. */",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Define to 1 if you have the <malloc/malloc.h> header file. */",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Define to 1 if you have the `malloc_zone_statistics' function. */",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if you have the `mkdtemp' function. */",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Define to 1 if you have the `mkstemp' function. */",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to 1 if you have the `mktemp' function. */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Define to 1 if you have the `posix_fallocate' function. */",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define to 1 if you have the `posix_spawn' function. */",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define to 1 if you have the `pread' function. */",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Have pthread_getspecific */",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to 1 if you have the <pthread.h> header file. */",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Have pthread_mutex_lock */",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Have pthread_rwlock_init */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Define to 1 if you have the `realpath' function. */",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Define to 1 if you have the `sbrk' function. */",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to 1 if you have the `setenv' function. */",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to 1 if you have the `setrlimit' function. */",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if you have the `sigaltstack' function. */",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to 1 if you have the <signal.h> header file. */",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Define to 1 if you have the `strerror' function. */",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Define to 1 if you have the `strerror_r' function. */",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define to 1 if you have the `strtoll' function. */",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Define to 1 if you have the `sysconf' function. */",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Define to 1 if you have the <sys/ioctl.h> header file. */",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Define to 1 if you have the <sys/mman.h> header file. */",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "/* Define to 1 if you have the <sys/param.h> header file. */",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "/* Define to 1 if you have the <sys/resource.h> header file. */",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "/* Define to 1 if you have the <sys/time.h> header file. */",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "/* Define to 1 if you have the <sys/uio.h> header file. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* Define if the setupterm() function is supported this platform. */",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* Define if the xar_open() function is supported this platform. */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "/* Define to 1 if you have the <termios.h> header file. */",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Define to 1 if the system has the type `uint64_t'. */",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "/* Define to 1 if the system has the type `u_int64_t'. */",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "/* Define to 1 if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "/* Define to 1 if you have the `writev' function. */",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "/* Define to 1 if you have the <zlib.h> header file. */",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "/* Have host's _alloca */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "/* Define to 1 if you have the `_chsize_s' function. */",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "/* Define to 1 if you have the `_Unwind_Backtrace' function. */",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "/* Have host's __alloca */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "/* Have host's __ashldi3 */",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "/* Have host's __ashrdi3 */",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* Have host's __chkstk */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Have host's __chkstk_ms */",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "/* Have host's __cmpdi2 */",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "/* Have host's __divdi3 */",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "/* Have host's __fixdfdi */",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "/* Have host's __fixsfdi */",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "/* Have host's __floatdidf */",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "/* Have host's __lshrdi3 */",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "/* Have host's __main */",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "/* Have host's __moddi3 */",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "/* Have host's __udivdi3 */",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* Have host's __umoddi3 */",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "/* Have host's ___chkstk */",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "/* Have host's ___chkstk_ms */",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* Target triple LLVM will generate code for by default */\n/* Doesn't use `cmakedefine` because it is allowed to be empty. */",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "/* Define if zlib compression is available */",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "/* Define if this is Win32ish platform */",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "/* Define if overriding target triple is enabled */",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "/* LLVM version information */",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "/* Whether tools show host and target info when invoked with --version */",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "/* LLVM version string */",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "/* Define to the extension used for shared libraries, say, \".so\". */",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "/* Define to the vendor of this package. */",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "/* Define as the return type of signal handlers (`int' or `void'). */",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "/* Define to a function replacing strtoll */",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "/* Define to a function implementing strtoull */",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "/* Define to a function implementing stricmp */",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "/* Define to a function implementing strdup */",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 136
    },
    "interpreter/llvm/src/include/llvm/Config/llvm-config.h.cmake" : {
      "ObjectId" : "4b0c59460619ec9f1e804f642acf7fdaa45dd1ce",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/llvm-config.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file enumerates variables from the LLVM configuration so that they\n   can be in exported headers and won't override package specific directives.\n   This is a C header that can be included in the llvm-c headers. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Target triple LLVM will generate code for by default */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* LLVM architecture name for the native architecture, if available */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* LLVM name for the native AsmParser init function, if available */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* LLVM name for the native AsmPrinter init function, if available */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* LLVM name for the native Disassembler init function, if available */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* LLVM name for the native Target init function, if available */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* LLVM name for the native TargetInfo init function, if available */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* LLVM name for the native target MC init function, if available */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if this is Win32ish platform */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* LLVM version string */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "interpreter/llvm/src/include/llvm/IR/CMakeLists.txt" : {
      "ObjectId" : "cf75d5800b74fb78fbcb0363a711da2c73e1f62f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/include/llvm/Support/CMakeLists.txt" : {
      "ObjectId" : "79e78f51fdd00d84ec140ef9f49fb203a23f782d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Figure out if we can track VC revisions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run from a subdirectory to force git to print an absolute path.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# some branchless cases (e.g. 'repo') may not yet have .git/logs/HEAD\n",
        "Line" : 23,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# SVN 1.7\n\n# SVN 1.6\n",
        "Line" : 29,
        "CharPositionInLine" : 31
      },
      "4" : {
        "Text" : "# The VC revision include that we want to generate.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Disable this version check as it will cause constant rebuilds because\n\n# this code doesn't correctly handle out embedded LLVM.\n\n# This can just be dropped when we upgrade to LLVM 6.0 where this check will\n\n# be disabled by the LLVM_APPEND_VC_REV=OFF we set in interpreter/CMakeLists.txt\n\n#if(DEFINED llvm_vc)\n\n#  # Create custom target to generate the VC revision include.\n\n#  add_custom_command(OUTPUT \"${version_inc}\"\n\n#    DEPENDS \"${llvm_vc}\" \"${get_svn_script}\"\n\n#    COMMAND\n\n#    ${CMAKE_COMMAND} \"-DSOURCE_DIR=${LLVM_MAIN_SRC_DIR}\"\n\n#                     \"-DNAME=LLVM_REVISION\"\n\n#                     \"-DHEADER_FILE=${version_inc}\"\n\n#                     -P \"${get_svn_script}\")\n\n#\n\n#  # Mark the generated header as being generated.\n\n#  set_source_files_properties(\"${version_inc}\"\n\n#    PROPERTIES GENERATED TRUE\n\n#               HEADER_FILE_ONLY TRUE)\n\n#else()\n\n#  file(WRITE \"${version_inc}\" \"\")\n\n#endif()\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Instead of the code above, just write a dummy file if none exists yet. If\n\n# one already exists, we shouldn't touch it to prevent rebuilding.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "interpreter/llvm/src/include/llvm/Support/DataTypes.h.cmake" : {
      "ObjectId" : "a58e2e454b7d1749d3b7a3cdaa41b74af32ddb42",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===-- include/Support/DataTypes.h - Define fixed size types -----*- C -*-===*\\\n|*                                                                            *|\n|*                     The LLVM Compiler Infrastructure                       *|\n|*                                                                            *|\n|* This file is distributed under the University of Illinois Open Source      *|\n|* License. See LICENSE.TXT for details.                                      *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*|\n|*                                                                            *|\n|* This file contains definitions to figure out the size of _HOST_ data types.*|\n|* This file is important because different host OS's define different macros,*|\n|* which makes portability tough.  This file exports the following            *|\n|* definitions:                                                               *|\n|*                                                                            *|\n|*   [u]int(32|64)_t : typedefs for signed and unsigned 32/64 bit system types*|\n|*   [U]INT(8|16|32|64)_(MIN|MAX) : Constants for the min and max values.     *|\n|*                                                                            *|\n|* No library is required when using these functions.                         *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Please leave this file C-compatible. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Note that <inttypes.h> includes <stdint.h>, if this is a C99 system. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "// GCC is strict about defining large constants: they must have LL modifier.",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Handle incorrect definition of uint64_t as u_int64_t */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Set defaults for constants which we cannot find. */",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "interpreter/llvm/src/lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "161709a48466f8868ca34bc2e945343d4b58310e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "0d72723210591fbac9fcc52a92446095a2c498dc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AsmParser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/BinaryFormat/CMakeLists.txt" : {
      "ObjectId" : "cb78ea6fdf927a08587d5ae105a7388940225e74",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "ff7e290cad1bbdc568b68286489c747d8f245de7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Bitcode/Reader/CMakeLists.txt" : {
      "ObjectId" : "c24216ffa7086445a5482d928c74e9b160c97038",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Bitcode/Writer/CMakeLists.txt" : {
      "ObjectId" : "82dc6b24137de2d9c76a08fd805ea2154285caf7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/CMakeLists.txt" : {
      "ObjectId" : "946067e6358f3293798ce1dcf2fe32dfd5376a76",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# `Demangle', `Support' and `TableGen' libraries are added on the top-level\n\n# CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/CodeGen/AsmPrinter/CMakeLists.txt" : {
      "ObjectId" : "05c6a28bbcaca223761ac040c4afddd96d447301",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "7f3c6da912687422c79b03d0e0d909b94055f9eb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/CodeGen/GlobalISel/CMakeLists.txt" : {
      "ObjectId" : "eba7ea8132e3bdcf148e13a1f4bdcc367becdcd3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of all GlobalISel files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add GlobalISel files to the dependencies if the user wants to build it.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In LLVMBuild.txt files, it is not possible to mark a dependency to a\n\n# library as optional. So instead, generate an empty library if we did\n\n# not ask for it.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/lib/CodeGen/MIRParser/CMakeLists.txt" : {
      "ObjectId" : "2eb5b844d0e11ee45521de9c84c4e6e7fd30376c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/CodeGen/SelectionDAG/CMakeLists.txt" : {
      "ObjectId" : "ae9c5adb0397992c5b3c5f7e7a2f65fe51f2f218",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "e7be0a0617da6c30b26495d048c8b12864b889ec",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/DebugInfo/CodeView/CMakeLists.txt" : {
      "ObjectId" : "b94bb0c80c7936b75a78e3be87b1e27573f88ba0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "11f94509e8fae4502668db25c6ae68e7196c9f94",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/DebugInfo/MSF/CMakeLists.txt" : {
      "ObjectId" : "6f38de336ee02021f8fa881bde0a83ebca2e6b8d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "9b1f37943e6784c4c2aaf6537b501925f08ff33b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/DebugInfo/Symbolize/CMakeLists.txt" : {
      "ObjectId" : "fe5c4bfc43217ed60d9e0b85394b6596cfce6d8d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Demangle/CMakeLists.txt" : {
      "ObjectId" : "74e37654f07f5f07274f69e48d97dd677fec1d52",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ExecutionEngine/CMakeLists.txt" : {
      "ObjectId" : "84b34919e442b50baa4df83ad8336186a64241d5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ExecutionEngine/IntelJITEvents/CMakeLists.txt" : {
      "ObjectId" : "e6c33b2ecc2a06b4d0ae0645cbae8c1ac42cc1d4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ExecutionEngine/Interpreter/CMakeLists.txt" : {
      "ObjectId" : "7456b3dbe905ad82b33e6caae82bb3d9e4a9d27d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that the path to libffi headers is on the command\n\n# line. That path can be a compiler's non-default path even when\n\n# FFI_INCLUDE_DIR was not used, because cmake has its own paths for\n\n# searching for headers (CMAKE_SYSTEM_INCLUDE_PATH, for instance):\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/ExecutionEngine/MCJIT/CMakeLists.txt" : {
      "ObjectId" : "b1e2bc3d635cf0bf5121f7b6671cd84434b79e8f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ExecutionEngine/OProfileJIT/CMakeLists.txt" : {
      "ObjectId" : "d585136eb0ace450d8c8d07f00cdcddc792b3c30",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ExecutionEngine/Orc/CMakeLists.txt" : {
      "ObjectId" : "f83e002c758f452baa7b177d28807cfbe7409e18",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/CMakeLists.txt" : {
      "ObjectId" : "3fa7ee6bb710d111493deb4d958a01f94fe47648",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Fuzzer/CMakeLists.txt" : {
      "ObjectId" : "bc744890b997d98f9d104a31c09dc71e7f3b72f7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable the coverage and sanitizer instrumentation for the fuzzer itself.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Compile libFuzzer if the compilation is specifically requested, OR\n\n# if the platform is known to be working.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/lib/IR/CMakeLists.txt" : {
      "ObjectId" : "1cc229d68bfce912f31aac2bd824dcf51ae7faf4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/IRReader/CMakeLists.txt" : {
      "ObjectId" : "87ea88039ef38047c26d9aef823450645125e51a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/LTO/CMakeLists.txt" : {
      "ObjectId" : "73b5662d4bc8ed10b1383f0c617db5d71d011028",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/LineEditor/CMakeLists.txt" : {
      "ObjectId" : "0d2bada1e84f95b654838eca016982d7a179908f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Linker/CMakeLists.txt" : {
      "ObjectId" : "8916fb3f725102e8a64704e312bba0ce245364d5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/MC/CMakeLists.txt" : {
      "ObjectId" : "562f136a3ce2ba908a27152306e579bcd5c1b42a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/MC/MCDisassembler/CMakeLists.txt" : {
      "ObjectId" : "e940afc56f5b7fbce74447f5a695b3d1c777df42",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/MC/MCParser/CMakeLists.txt" : {
      "ObjectId" : "99fdd0167993780f81c43be5503cf260ba2f240f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Object/CMakeLists.txt" : {
      "ObjectId" : "fd5e7707c5411e83274456684dc0a515c9f4e002",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ObjectYAML/CMakeLists.txt" : {
      "ObjectId" : "7af0b9c194e64d76d5f2a7e80e996172f54a2921",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Option/CMakeLists.txt" : {
      "ObjectId" : "8eb086028da467e0d502b7d89f5260517f75c9a7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Passes/CMakeLists.txt" : {
      "ObjectId" : "8fcadcf2c958cc65151e08ba7f62a8f948118606",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "cd65762ae6a005fd1c2b3b6d61ced4fb2ac05a6c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ProfileData/Coverage/CMakeLists.txt" : {
      "ObjectId" : "035b8fdb8b3d69c1f3f7f4c4cfa77e813b1699a5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Support/CMakeLists.txt" : {
      "ObjectId" : "c9dc7d4ec900f3c57bd2ed756a8d892ac47f44ee",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libuuid required for FOLDERID_Profile usage in lib/Support/Windows/Path.inc.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# System\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/lib/TableGen/CMakeLists.txt" : {
      "ObjectId" : "9333b6537778052274839645f8763b84429681c0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AArch64/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "cc0a9d86a14e45d35f3b265f0a2f0b593870291a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AArch64/CMakeLists.txt" : {
      "ObjectId" : "f7e0a5c7bed393fa5af4807de2e09b648a0f7fcb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of all GlobalISel files.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add GlobalISel files to the dependencies if the user wants to build it.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/lib/Target/AArch64/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "d64c05b0adbcfc2e73be48dd5d6fb0a218689d03",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AArch64/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "363f50258d777ede9b5593a38e582658af761859",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AArch64/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "56eeba8a1d4b8483bc49023fd29cbd4e7b17e7b7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hack: we need to include 'main' target directory to grab private headers\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/Target/AArch64/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "e236eed00be130ab99a322afdfbd5435cb631d48",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AArch64/Utils/CMakeLists.txt" : {
      "ObjectId" : "8ee03a7571b4c7f9c0b909ec69f7997c71d6b883",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "70be7bb6eb36a50404aa392ff6e616f7da95e515",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/CMakeLists.txt" : {
      "ObjectId" : "971208c5db847d1ab3e194de12a26fd77d5d1bc1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of all GlobalISel files.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add GlobalISel files to the dependencies if the user wants to build it.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "fb9231576919dc417a65b09563e0dac6f3b10500",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7191ff2c4577be4199aeea02aefec8dbf10491e5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "09e3efad10af1aea0d6291abd5b588808a15b35d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "961dc5509000980eb6dc26f2242bf7c8b6ef6e2a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AMDGPU/Utils/CMakeLists.txt" : {
      "ObjectId" : "01b80ebe8d3dc6bbdc622f58e99532bf4a9ad9d4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/ARM/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "66ed1df61a21f09d2ef88d4ed1ec2afc7f9e1e6f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/ARM/CMakeLists.txt" : {
      "ObjectId" : "cf6827fd6ca19c53d7c046ed76b2f35c58d0636d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add GlobalISel files if the user wants to build it.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/Target/ARM/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "2d9d534d6e527d0814039ca058269ab6149d7282",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/ARM/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "e59ec4bb77fa9a01aac18e8c90a66484bbe88519",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/ARM/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "9582e8cbef47ab2ba413b9255a0662258af142da",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/ARM/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "03393a0102c12104faedd27a140209622bacd0e6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AVR/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "4ec01a60b2194a92d0ad85e9fc895817c0e7a76b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AVR/CMakeLists.txt" : {
      "ObjectId" : "e103a60fa6ff4cf7ada378f603f5028f41c0fd8c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AVR/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "cfce8b7f080932e0b1ad876323d1d19e38896916",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AVR/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "0f3539a7d5efaa0eb8f39eb62d6bf10b79f4a0de",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AVR/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "5bad6494c8a94d61a2504ed8449b8e27f5defc6b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/AVR/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "557c55ae2f7251a31705af96c4db45768ec2eec6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/BPF/CMakeLists.txt" : {
      "ObjectId" : "4918653ff19dabc3096e492afeb2882f09900c19",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/BPF/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "c6dd1b34ad1d9942396a54b68e93837be013951a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/BPF/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "f9e91619252c8d962091ec208ee1cb585e2b6b98",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/BPF/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "5fcd8743da536a3cf051aa5b6ba53a71cfd4652c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/BPF/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "ca0884614deb2250a304a16d52d5912bca6506b5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/CMakeLists.txt" : {
      "ObjectId" : "1e6abfacb79217465db19499a127268273f5d865",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Currently we do not allow libraries from lib to reference targets directly.\n\n# This property is used to enforce that convention. It is important because the\n\n# logic in llvm_map_components_to_libnames is order dependent on the target\n\n# libraries being created.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/Target/Hexagon/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "bbfa92d59628e1855df3d918b4a748f615bcd18b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Hexagon/CMakeLists.txt" : {
      "ObjectId" : "2f3dd3326fccdff160d6097a0353fdd7a1acefd9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Hexagon/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "755a45e2df8bee314bc2d7a040bf2956e2a1c15a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Hexagon/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "2c5d0dab2848af193c64561bb47ebfc46b77f2c6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Hexagon/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "b9411f6925d26ba66c30c29b9d8c5cfa0ba7a229",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Lanai/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "3c88192ea6f0b8e65146f5eed438419a8d70a448",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Lanai/CMakeLists.txt" : {
      "ObjectId" : "867f6165c2536d044b52ce5b11f9fdcd2c889631",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Lanai/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "785c98d8dff13c782acdffe67235e877974bac21",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Lanai/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7f76b895e6ecdccb4964b6e155c84a79740a59ba",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Lanai/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "16cde31e75975c38e1fc69fb49b9b6cd1cc4e90c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Lanai/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "01611b54b2d8db15d7f60d9ac85990e2228c3dd1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/MSP430/CMakeLists.txt" : {
      "ObjectId" : "3f377631c016cb2266b0b9152475fb0ab6810cd7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/MSP430/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "580a9ce71d9d7cbbce1bde0591f2e013249c33ec",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/MSP430/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "0f3ebd303924154092f218e2efd9371ad6f16b15",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/MSP430/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "fee5f434e79bb9602df3c8a0caa029060cb59d9f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Mips/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "f1675560853a861dd50e3765d09cde6e78dac0e3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Mips/CMakeLists.txt" : {
      "ObjectId" : "40e337eb97ca14be0d1645b16e51e8b7018f3f3e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Mips/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "a64d02c47406f87721f0b30a4c9f4624fa0b0ef6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Mips/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "2a67fba796a67ab16e2d1b306c1e800ffdbf03ae",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Mips/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "c63af7c710cc2308f9333ab2128418d60c0dd363",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Mips/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "3347a99a43211bad544e07c0e4eff55596f021f6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/NVPTX/CMakeLists.txt" : {
      "ObjectId" : "a8eecfcc138c7273dcdbc0cc416ba2fc747613ef",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/NVPTX/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "bb6c8abc961fef807fb44ab95afbd5cc0767a482",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/NVPTX/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "dbbf23554aa9cc7fe537604a351637548a79667d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/NVPTX/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1beb40ea58e4a931a2e0eada484f26a0722e70d7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Nios2/CMakeLists.txt" : {
      "ObjectId" : "78db452094bd06e02ec082929c8cd07d2c103b07",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Generate Nios2GenRegisterInfo.inc and Nios2GenInstrInfo.inc which included by\n\n#your hand code C++ files.\n\n#Nios2GenRegisterInfo.inc came from Nios2RegisterInfo.td, Nios2GenInstrInfo.inc\n\n#came from Nios2InstrInfo.td.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Nios2CommonTableGen must be defined\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Nios2CodeGen should match with LLVMBuild.txt Nios2CodeGen\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Should match with \"subdirectories =  MCTargetDesc TargetInfo\" in LLVMBuild.txt\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "interpreter/llvm/src/lib/Target/Nios2/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "21def509a2324a5cf82c330e8a43595fea8a162d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MCTargetDesc / CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/Target/Nios2/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "394d2c2680b76a0403ac6741774fe1f49fc04fe6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/PowerPC/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "408858e424d5148642651ec137c158451162afcc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/PowerPC/CMakeLists.txt" : {
      "ObjectId" : "7ca4c1999003a4f2d4debbe5a7259ef636e7bff0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/PowerPC/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "ca457df88d3ef0cd8abdba4dbb3ab8b6304af29c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/PowerPC/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "ab30a110f40ee9344ab0222d4942dd593f95179a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/PowerPC/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "3cea65ee4de614a504381426ace78c2e1f9e5ff0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/PowerPC/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "c9548c7fe0cda84f45f77f3ecb42539b23e76314",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/RISCV/CMakeLists.txt" : {
      "ObjectId" : "c8887548b9179a1fb28895eeb660b93d1bcede60",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/RISCV/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "d79de74f7cfc7e42e83278036d9a0cd313672f20",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/RISCV/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "f440fe2cb82a962506adffacce40eadc54a4caa2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Sparc/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "7579bfed75a2831680b7e0b6b0a7e06dc2ddc588",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Sparc/CMakeLists.txt" : {
      "ObjectId" : "312215cf6cdeb3a28f643d6d02292facd7d9d316",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Sparc/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "7359c6a0bcb2063e30e8f3b525a90c65e25cdcc7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Sparc/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "a285a8337a811e00f2d0354ac97bb14a985dd38a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Sparc/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "c4dcdb5ba662dd22763e44dd574a63455a8c5a4a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/Sparc/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "9633e03a3847c9207c3afbe34c4c9237cadde49c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/SystemZ/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "ad19a565030bb1c7bb06cdeab84698119e03b7e7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/SystemZ/CMakeLists.txt" : {
      "ObjectId" : "138e14a25b70f78d053d46155c1b1aecdef42a45",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/SystemZ/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "4b94bcd1f5f1e6bd9cd6d2755e0c3de70f26b7ec",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/SystemZ/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "21b023ce1f7b65ae1dea4a04923c345a04153be9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/SystemZ/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "1aa8c76e8bc6414661f6a55c60b6d29cfe0b1921",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/SystemZ/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1ebc669e59af1361310697abd17ce3b8ca752e0f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/WebAssembly/CMakeLists.txt" : {
      "ObjectId" : "78b2cdb61b76521cd4922c9996bc690f2103e399",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/WebAssembly/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "5e55e2958aeb167a239665919be415489172a852",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/WebAssembly/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "5394b67d2b87f5827d566421770f06e2441ac345",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/WebAssembly/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "13c0fe91590840e14ae6698522f499e6767c1e92",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/WebAssembly/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "ef6e4d2b617a294a08abd466c887432de1cc55b5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/X86/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "b022a41b192f3b58753a19a718f9aea01700c916",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/X86/CMakeLists.txt" : {
      "ObjectId" : "6e08d4cff6eaf9853ebcf63bd666523a00d98688",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add GlobalISel files if the build option was enabled.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/Target/X86/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "43702826c9bcc479890ea878f0e54e4969d72c0a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/X86/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "686a37e614988c42bda29988c82b8e823fc3f8ac",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/X86/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "33df9ec7dcde7ec725d4b66b3e6405801fff87e6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/X86/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1d8a8c1c118e72671dc577eeed258136802a7d1d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/X86/Utils/CMakeLists.txt" : {
      "ObjectId" : "b2697467f26a458efc484c1f0118c736e7dc59e1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/XCore/CMakeLists.txt" : {
      "ObjectId" : "0a609ef76f4417764350ad26a1c3703f4094dd4f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/XCore/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "1ed10c02c356ea9d50357d22ad0f760b7966d68b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/XCore/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "53cf84da7be98bc7e19deb3eddf2e5fcd010ab9b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/XCore/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "a14cf5ce2ac1498231a1958d398791fe1bc3f227",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Target/XCore/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "462f2d405304b65e6acf59e8beedd54ef16f2001",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Testing/CMakeLists.txt" : {
      "ObjectId" : "fc23e64eeb7a439011c9dd162b83cae7cbc4ca59",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Testing/Support/CMakeLists.txt" : {
      "ObjectId" : "fa8dfe59c8bdbbc52199b651b28dc14e477f451f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ToolDrivers/CMakeLists.txt" : {
      "ObjectId" : "28da36bba20915e7c08a6d1cd15690986d905142",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ToolDrivers/llvm-dlltool/CMakeLists.txt" : {
      "ObjectId" : "52bd5cba86f4321f4f5f6863fa7dfcd5fccf44a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/ToolDrivers/llvm-lib/CMakeLists.txt" : {
      "ObjectId" : "ab53a6843446a430c780408e1b8b6fcc752cd241",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/CMakeLists.txt" : {
      "ObjectId" : "67bdeb27212dc57a9d47115ac9de220775cd85ec",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/Coroutines/CMakeLists.txt" : {
      "ObjectId" : "1c635bd9db08ac6cb85fb44615aeb4e499476f54",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/Hello/CMakeLists.txt" : {
      "ObjectId" : "4a55dd9c04b8019b37efe6b2d55513d23aea70ae",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from the hello plugin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/lib/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "67f18a307b9b955fda130441650729d2c4bba7ce",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/InstCombine/CMakeLists.txt" : {
      "ObjectId" : "5cbe804ce3ec03f47d5212f94dc17531d9903f6e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/Instrumentation/CMakeLists.txt" : {
      "ObjectId" : "f2806e278e6e19d18df257bab9d3e59b739ea504",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/ObjCARC/CMakeLists.txt" : {
      "ObjectId" : "114471eb6f6e14010438e06defdde918a02c598c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/Scalar/CMakeLists.txt" : {
      "ObjectId" : "457c9427ab9ac86fae60b4ed97169b477fe3792a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "83bc05d0311caebbc841dfe8ac11c4b29152a6b5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/Transforms/Vectorize/CMakeLists.txt" : {
      "ObjectId" : "1aea73cd4a329f211bc04299a2cba8f1a16f48df",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/lib/XRay/CMakeLists.txt" : {
      "ObjectId" : "8d558209d8ee7cac1497133780bdbe45ad5f366b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/projects/CMakeLists.txt" : {
      "ObjectId" : "9102efbdcb460baf89e682aa1046fbf295855009",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Discover the projects that use CMake in the subdirectories.\n\n# Note that explicit cmake invocation is required every time a new project is\n\n# added or removed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Also add in libc++ and compiler-rt trees if present (and we have\n\n# a sufficiently recent version of CMake where required).\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC isn't quite working with libc++ yet, disable it until issues are\n\n# fixed.\n\n# FIXME: LLVM_FORCE_BUILD_RUNTIME is currently used by libc++ to force\n\n# enable the in-tree build when targeting clang-cl.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add the projects in reverse order of their dependencies so that the\n\n# dependent projects can see the target names of their dependencies.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "interpreter/llvm/src/runtimes/CMakeLists.txt" : {
      "ObjectId" : "f475878e2f2a0aeba6aad1cbeb57d575702b63f5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file handles building LLVM runtime sub-projects.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Runtimes are different from tools or other drop-in projects because runtimes\n\n# should be built with the LLVM toolchain from the build directory. This file is\n\n# a first step to formalizing runtime build interfaces.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In the current state this file only works with compiler-rt, other runtimes\n\n# will work as the runtime build interface standardizes.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all subdirectories containing CMake projects\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If this file is acting as a top-level CMake invocation, this code path is\n\n# triggered by the external project call for the runtimes target below.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add the root project's CMake modules, and the LLVM build's modules to the\n\n# CMake module path.\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Some of the runtimes will conditionally use the compiler-rt sanitizers\n\n# to make this work smoothly we ensure that compiler-rt is added first in\n\n# the list of sub-projects. This allows other sub-projects to have checks\n\n# like `if(TARGET asan)` to enable building with asan.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# LLVMConfig.cmake contains a bunch of CMake variables from the LLVM build.\n\n# This file is installed as part of LLVM distributions, so this can be used\n\n# either from a build directory or an installed LLVM.\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Setting these variables will allow the sub-build to put their outputs into\n\n# the library and bin directories of the top-level build.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# This variable makes sure that e.g. llvm-lit is found.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Handle common options used by all runtimes.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# TODO: Clean this up as part of an interface standardization\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# The subdirectories need to treat this as standalone builds\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Setting a variable to let sub-projects detect which other projects\n\n# will be included under here.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# We do this in two loops so that HAVE_* is set for each runtime before the\n\n# other runtimes are added.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Between each sub-project we want to cache and clear the LIT properties\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# if this is included from LLVM's CMake\n",
        "Line" : 197,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# If compiler-rt is present we need to build the builtin libraries first. This\n\n# is required because the other runtimes need the builtin libraries present\n\n# before the just-built compiler can pass the configuration tests.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# We don't need to depend on the builtins if we're building instrumented\n\n# because the next stage will use the same compiler used to build this stage.\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# We create a list the names of all the runtime projects in all uppercase and\n\n# with dashes turned to underscores. This gives us the CMake variable prefixes\n\n# for all variables that will apply to runtimes.\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# runtime_register_target(target)\n\n#   Utility function to register external runtime target.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Builtins were built separately above\n",
        "Line" : 331,
        "CharPositionInLine" : 29
      },
      "23" : {
        "Text" : "# Create a runtimes target that uses this file as its top-level CMake file.\n\n# The runtimes target is a configuration of all the runtime libraries\n\n# together in a single CMake invocaiton.\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Builtins were built separately above\n",
        "Line" : 378,
        "CharPositionInLine" : 31
      },
      "25" : {
        "Text" : "# TODO: This is a hack needed because the libcxx headers are copied into the\n\n# build directory during configuration. Without that step the clang in the\n\n# build directory cannot find the C++ headers in certain configurations.\n\n# I need to build a mechanism for runtime projects to provide CMake code\n\n# that executes at LLVM configuration time to handle this case.\n",
        "Line" : 417,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "interpreter/llvm/src/tools/CMakeLists.txt" : {
      "ObjectId" : "b654b8c5cb8e0d1f24d4acc8b8faa9d48422733c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file will recurse into all subdirectories that contain CMakeLists.txt\n\n# Setting variables that match the pattern LLVM_TOOL_{NAME}_BUILD to Off will\n\n# prevent traversing into a directory.\n\n#\n\n# The only tools that need to be explicitly added are ones that have explicit\n\n# ordering requirements.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Iterates all the subdirectories to create CMake options to enable/disable\n\n# traversing each directory.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build polly before the tools: the tools link against polly when\n\n# LINK_POLLY_INTO_TOOLS is set.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add LTO, llvm-ar, llvm-config, and llvm-profdata before clang, ExternalProject\n\n# requires targets specified in DEPENDS to exist before the call to\n\n# ExternalProject_Add.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Projects supported via LLVM_EXTERNAL_*_SOURCE_DIR need to be explicitly\n\n# specified.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automatically add remaining sub-directories containing a 'CMakeLists.txt'\n\n# file as external projects.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add subprojects specified using LLVM_EXTERNAL_PROJECTS\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "interpreter/llvm/src/tools/bugpoint-passes/CMakeLists.txt" : {
      "ObjectId" : "e32b0a3aa34f3be8917523c4fd010ccb7e7b9c26",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from this plugin.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/bugpoint/CMakeLists.txt" : {
      "ObjectId" : "8975e67634340abc7b7698dbc0b94f4f9eadb714",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure LLVMTarget can resolve dependences in Polly.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/CMakeLists.txt" : {
      "ObjectId" : "80d7795fdfdbff3f5bdd9c0f45c2c53652703837",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we are not building as a part of LLVM, build Clang as an\n\n# standalone project, using LLVM as an external library:\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Assertions should follow llvm-config's.\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.\n\n# CMake assumes slashes as PATH.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check prebuilt llvm/utils.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Note: path not really used, except for checking if lit was found\n",
        "Line" : 137,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 153,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 161,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Make sure that our source directory is on the current cmake module path so that\n\n# we can include cmake files from this directory.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The libdir suffix must exactly match whatever LLVM's configuration used.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Unlike PACKAGE_VERSION, CLANG_VERSION does not include LLVM_VERSION_SUFFIX.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Configure the Version.inc file.\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add appropriate flags for GCC\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Enable -pedantic for Clang even if it's not enabled for LLVM.\n",
        "Line" : 307,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Determine HOST_LINK_VERSION on Darwin.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Clang version information\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# All targets below may depend on all tablegen'd files.\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# this line is needed as a cleanup to ensure that any CMakeCaches with the old\n\n# default value get updated to the new default.\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 461,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold\n",
        "Line" : 524,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work\n\n# using the just-built compiler, and we need to override DYLD_LIBRARY_PATH\n\n# so that the host object file tools will use the just-built libLTO.\n\n# However if System Integrity Protection is enabled the DYLD variables\n\n# will be scrubbed from the environment of any base system commands. This\n\n# includes /bin/sh, which ninja uses when executing build commands. To\n\n# work around the envar being filtered away we pass it in as a CMake\n\n# variable, and have LLVM's CMake append the envar to the archiver calls.\n",
        "Line" : 528,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# We don't need to depend on compiler-rt if we're building instrumented\n\n# because the next stage will use the same compiler used to build this stage.\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Use the current tools for LTO instead of the instrumented ones\n",
        "Line" : 606,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Find all variables that start with BOOTSTRAP_ and populate a variable with\n\n# them.\n",
        "Line" : 622,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Populate the passthrough variables\n",
        "Line" : 638,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# We shouldn't need to set this here, but INSTALL_DIR doesn't\n\n# seem to work, so instead I'm passing this through\n",
        "Line" : 659,
        "CharPositionInLine" : 16
      },
      "30" : {
        "Text" : "# exclude really-install from main target\n",
        "Line" : 674,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# exclude from main target\n",
        "Line" : 689,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 32
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/3-stage-base.cmake" : {
      "ObjectId" : "46c747edd77848f0dfe98d3f807aff253fea9bcc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/3-stage.cmake" : {
      "ObjectId" : "49bce39dfc981b8b7b52dff96e17ceb0f18dd4b3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/Apple-stage1.cmake" : {
      "ObjectId" : "32159811a884a9263f86835d386d1cfe5208821d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style bootstrap builds. It can be\n\n# used on any Darwin system to approximate Apple Clang builds.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#bootstrap\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/Apple-stage2-ThinLTO.cmake" : {
      "ObjectId" : "54e54e306e7a6b627cf70e3c68ac584f83e992e5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style stage2 ThinLTO bootstrap. It is\n\n# specified by the stage1 build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/Apple-stage2.cmake" : {
      "ObjectId" : "f07973dc0ab2261685c67eeeabdcd643bf0f0f23",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style stage2 bootstrap. It is\n\n# specified by the stage1 build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make unit tests (if present) part of the ALL target\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# setup toolchain\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# test args\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/BaremetalARM.cmake" : {
      "ObjectId" : "73f797d9c4b1578df23c11d36233d462ce3f5c45",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Builtins\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/DistributionExample-stage2.cmake" : {
      "ObjectId" : "894ea6af6c39eed4b025cdbb161ed0a11e770699",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for the second stage of a simple distribution\n\n# bootstrap build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setup toolchain\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/DistributionExample.cmake" : {
      "ObjectId" : "551f4ee07eaccacb6aacc77ef1ada7e2c24d92d9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for a simple distribution bootstrap build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only build the native target in stage1 since it is a throwaway build.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optimize the stage1 compiler, but don't LTO it because that wastes time.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup vendor-specific settings.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setting up the stage2 LTO option needs to be done on the stage1 build so that\n\n# the proper LTO library dependencies can be connected.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Expose stage2 targets through the stage1 build configuration.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup the bootstrap build.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/Fuchsia-stage2.cmake" : {
      "ObjectId" : "1b7b636fef3e5411fbdf8e39304a2c06cefe4769",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for the second stage of a Fuchsia toolchain\n\n# build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup toolchain.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/Fuchsia.cmake" : {
      "ObjectId" : "0932c046f628a95e4612b61d173da037905665ba",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for a Fuchsia toolchain build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup the bootstrap build.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/PGO-stage2-instrumented.cmake" : {
      "ObjectId" : "858c07f562650965e2b881a81989f22000a916bb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/PGO-stage2.cmake" : {
      "ObjectId" : "2080cd405f2a6351a66b029221f683ceda08b27e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/cmake/caches/PGO.cmake" : {
      "ObjectId" : "7e4a001129cb9d0c256185728dbf2c5d383a225b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/cmake/modules/AddClang.cmake" : {
      "ObjectId" : "e657059744a4ffa77115275f74ee298b6487d891",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Syntax:\n\n# clang_tablegen output-file [tablegen-arg ...] SOURCE source-file\n\n# [[TARGET cmake-target-name] [DEPENDS extra-dependency ...]]\n\n#\n\n# Generates a custom command for invoking tblgen as\n\n#\n\n# tblgen source-file -o=output-file tablegen-arg ...\n\n#\n\n# and, if cmake-target-name is provided, creates a custom target for\n\n# executing the custom command depending on output-file. It is\n\n# possible to list more files to depend after DEPENDS.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Add public headers\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# It may contain unparsed unknown args.\n",
        "Line" : 80,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Always generate install targets\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "interpreter/llvm/src/tools/clang/cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "c97ebd4d984356166cfa7bfc88116e72b5fa5d11",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate a list of CMake library targets so that other CMake projects can\n\n# link against them. LLVM calls its version of this file LLVMExports.cmake, but\n\n# the usual CMake convention seems to be ${Project}Targets.cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep this in sync with llvm/cmake/CMakeLists.txt!\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate ClangConfig.cmake for the build tree.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate ClangConfig.cmake for the install tree.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Construct the proper number of get_filename_component(... PATH)\n\n# calls to compute the installation prefix.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "interpreter/llvm/src/tools/clang/cmake/modules/FindZ3.cmake" : {
      "ObjectId" : "779ef928da1bb819b01d19435982350926e3a243",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set Z3_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/docs/CMakeLists.txt" : {
      "ObjectId" : "d2956c18f80c558ed583ddefce1a14fe9d7f6c0e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/examples/AnnotateFunctions/CMakeLists.txt" : {
      "ObjectId" : "5684abf2380d14ccea063a5629737560fc36cd36",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/examples/CMakeLists.txt" : {
      "ObjectId" : "8c2654840a98827964ce8793702ae8de33ff55c2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/examples/PrintFunctionNames/CMakeLists.txt" : {
      "ObjectId" : "f5f818866ca60e9f89489d04b23532c87a076f4e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from the plugin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MSVC mangles symbols differently, and\n",
        "Line" : 3,
        "CharPositionInLine" : 15
      },
      "2" : {
        "Text" : "# PrintFunctionNames.export contains C++ symbols.\n",
        "Line" : 4,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/tools/clang/examples/analyzer-plugin/CMakeLists.txt" : {
      "ObjectId" : "0d5b2754cafec4c664175fae58cee1929d4b88f1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/examples/clang-interpreter/CMakeLists.txt" : {
      "ObjectId" : "e7e59d930877680205adf611faca4f8d6d3a313e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/CMakeLists.txt" : {
      "ObjectId" : "253a09b1012fbb1ed22808a79989363e2a2c6aa8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/AST/CMakeLists.txt" : {
      "ObjectId" : "260734f2200ac94bd4ff3d7e318b74dc982d8ce0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/Basic/CMakeLists.txt" : {
      "ObjectId" : "3e0fb8728c4835542b29c39f152882767ebd6523",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ARM NEON\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/include/clang/CMakeLists.txt" : {
      "ObjectId" : "feb81f0686caca1828bb21ab29fde0db2659dd96",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/Config/config.h.cmake" : {
      "ObjectId" : "b138b5fcd8288dd6a13e9db5da983f0156e757a2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* This generated file is for internal use. Do not include it from headers. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Default linker to use. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Default C++ stdlib to use. */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Default runtime library to use. */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Default OpenMP runtime used by -fopenmp. */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Multilib suffix for libdir. */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Relative directory for resource files */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Directories clang will search for headers */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Default <path> to all compiler invocations for --sysroot=<path>. */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Directory where gcc is installed. */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define if we have libxml2 */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define if we have z3 and want to build it */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define if we have sys/resource.h (rlimits) */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* The LLVM product name and version */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* pass --build-id to ld */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* enable x86 relax relocations by default */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable each functionality of modules */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "interpreter/llvm/src/tools/clang/include/clang/Driver/CMakeLists.txt" : {
      "ObjectId" : "a9d988047920b0d845e69f0e03f1ef88b68d4556",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/Parse/CMakeLists.txt" : {
      "ObjectId" : "2cc7e54b3b01a2bf84539eb07f02c60d8ca19bee",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/Sema/CMakeLists.txt" : {
      "ObjectId" : "5a48b901d2bfbda8ad3d798754f602d8c2147acd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/Serialization/CMakeLists.txt" : {
      "ObjectId" : "d91513da99979d5a6b8e55e4d6759a86c0f5d5b1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/include/clang/StaticAnalyzer/Checkers/CMakeLists.txt" : {
      "ObjectId" : "37dd9e848296898357110497b9d4513ff6b5d69d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/ARCMigrate/CMakeLists.txt" : {
      "ObjectId" : "b716a20fe63f9fc8aaa97bbcce6ae6cfc312c8da",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/AST/CMakeLists.txt" : {
      "ObjectId" : "ab9b59184294bf5eabe373d46929ae59c418d0cc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/ASTMatchers/CMakeLists.txt" : {
      "ObjectId" : "b49528ede2272c20408ab190687530602031e09f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/ASTMatchers/Dynamic/CMakeLists.txt" : {
      "ObjectId" : "82c12a47fa9397bbf3e289adeb164fbea0fe6881",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The registry source file ends up generating a lot of sections for each\n\n# matcher. Each matcher appears to get a vtable and several methods. Each\n\n# method needs .text, .pdata, .xdata, and .debug sections, adding to the\n\n# section multiplier. By default MSVC has a 2^16 limit on the number of\n\n# sections in an object file, and this needs more than that.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "fdc9e6cee8e16fa28e9fb2121af31af4690dd932",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Basic/CMakeLists.txt" : {
      "ObjectId" : "e971b55e8585dba7296f1eeebbc3812efe1fc36b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Figure out if we can track VC revisions.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Normally '.git' is a directory that contains a 'logs/HEAD' file that\n\n# is updated as modifications are made to the repository. In case the\n\n# repository is a Git submodule, '.git' is a file that contains text that\n\n# indicates where the repository's Git directory exists.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# '.git' is indeed a link to the submodule's Git directory.\n\n# Use the path to that Git directory.\n",
        "Line" : 27,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Git or Git submodule\n\n# SVN 1.7\n\n# SVN 1.6\n",
        "Line" : 34,
        "CharPositionInLine" : 29
      },
      "4" : {
        "Text" : "# The VC revision include that we want to generate.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create custom target to generate the VC revision include.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Mark the generated header as being generated.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Tell Version.cpp that it needs to build with -DHAVE_SVN_VERSION_INC.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Not producing a VC revision include.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Being able to force-set the SVN revision in cases where it isn't available\n\n# is useful for performance tracking, and matches compatibility from autoconf.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "interpreter/llvm/src/tools/clang/lib/CMakeLists.txt" : {
      "ObjectId" : "dfd819a407e986277adc1b9d6a3225c444012d8f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "84248cc647199721917742486d28b6700413bb3c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# In a standard Clang+LLVM build, we need to generate intrinsics before\n\n# building codegen. In a standalone build, LLVM is already built and we don't\n\n# need this dependency. Furthermore, LLVM doesn't export it so we can't have\n\n# this dependency.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/lib/Driver/CMakeLists.txt" : {
      "ObjectId" : "c7ca698d95a0844cdc4faf9025f34a537b99f7f9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVCToolChain.cpp uses version.dll.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/lib/Edit/CMakeLists.txt" : {
      "ObjectId" : "a7fa9c28e1f611bce8afe9411d46ef93bf55fba3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Format/CMakeLists.txt" : {
      "ObjectId" : "42e6d53d9fe6ea55adc4425a5abf53b4092be096",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Frontend/CMakeLists.txt" : {
      "ObjectId" : "ba3bd7d28c7034e4a5c6cf645fb735f21b88764f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Frontend/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "61a22b5b13b4d9f4f2e41e64e9ab5cf5ff65a6fa",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/FrontendTool/CMakeLists.txt" : {
      "ObjectId" : "7e11be0ce4c5832f0d77282192b526e610871e7b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Headers/CMakeLists.txt" : {
      "ObjectId" : "a621c02644e3800defe27be01e24d5fa7a07213c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate arm_neon.h\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't add this for IDE's.\n",
        "Line" : 140,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/lib/Index/CMakeLists.txt" : {
      "ObjectId" : "c9fbfafcf9460cc3533176bc380c2aa12d5ba3b9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Lex/CMakeLists.txt" : {
      "ObjectId" : "38df144adf9abc5cf13a7710dff32dc2026f54da",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Add -maltivec when ARCH is PowerPC.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/lib/Parse/CMakeLists.txt" : {
      "ObjectId" : "b868696eb6bb3c6b4c5c8a505e6b9ed934ceebf7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "16550b1b710ef9f0dc4d863ddca69eabdb1425da",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Sema/CMakeLists.txt" : {
      "ObjectId" : "7d9ae621c93d65f0745b455dbf83383e079d56e5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Serialization/CMakeLists.txt" : {
      "ObjectId" : "95b33c388c56ab5e77bdc14d1b02b183e840f167",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/StaticAnalyzer/CMakeLists.txt" : {
      "ObjectId" : "3d1509254f52ff5f442a091cd462be57b6760c65",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/StaticAnalyzer/Checkers/CMakeLists.txt" : {
      "ObjectId" : "2759240dd2768271835ad32386285067c58afd11",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/StaticAnalyzer/Core/CMakeLists.txt" : {
      "ObjectId" : "85878f5e96ee7d5e658dd8fc66d3fca9b475eddb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link Z3 if the user wants to build it.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/lib/StaticAnalyzer/Frontend/CMakeLists.txt" : {
      "ObjectId" : "e3ca91aec9cd180fc51f1d1597a62ad1d9f739f6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Tooling/CMakeLists.txt" : {
      "ObjectId" : "7b0c58e7947d61589eabe75cfdf5070c934105d8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Tooling/Core/CMakeLists.txt" : {
      "ObjectId" : "e2b0dd424d10432e663fefcc63035ca42f85ea24",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/lib/Tooling/Refactoring/CMakeLists.txt" : {
      "ObjectId" : "288582fc1b6bdc69a7dd8b50d95a7e1162d19a8d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/runtime/CMakeLists.txt" : {
      "ObjectId" : "27cb83afcc93d16f3d64f40db9aa182c922baec2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Set the install directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use special command for Makefiles to support parallelism.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Fallback to the external path, if the other one isn't available.\n\n# This is the same behavior (try \"internal\", then check the LLVM_EXTERNAL_...\n\n# variable) as in add_llvm_external_project\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is \"\"\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add compiler-rt as an external project.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find all variables that start with COMPILER_RT and populate a variable with\n\n# them.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add top-level targets that build specific compiler-rt runtimes.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add binaries that compiler-rt tests depend on.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add top-level targets for various compiler-rt test suites.\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add special target to run all compiler-rt test suites.\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Add special target to run all compiler-rt test suites.\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "interpreter/llvm/src/tools/clang/tools/CMakeLists.txt" : {
      "ObjectId" : "f22de42123f8c611a8d9535b97c23db117a8de34",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We support checking out the clang-tools-extra repository into the 'extra'\n\n# subdirectory. It contains tools developed as part of the Clang/LLVM project\n\n# on top of the Clang tooling platform. We keep them in a separate repository\n\n# to keep the primary Clang repository small and focused.\n\n# It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Builtin llvm does not provide utils such as FileCheck and not.\n\n# Let's add them from our builtin llvm.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# libclang may require clang-tidy in clang-tools-extra.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "interpreter/llvm/src/tools/clang/tools/arcmt-test/CMakeLists.txt" : {
      "ObjectId" : "0cb2c0f98eb51db04724e475595385b0bbfd0f2f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/c-arcmt-test/CMakeLists.txt" : {
      "ObjectId" : "8914607358fcb4f2f912e6cf68bf34de68efc983",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/c-index-test/CMakeLists.txt" : {
      "ObjectId" : "ad990e010eeff77027f67b5b14ab6e74b96389a4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If libxml2 is available, make it available for c-index-test.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't add this for IDE's.\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/tools/clang-check/CMakeLists.txt" : {
      "ObjectId" : "04151a8e0331dbabf62f97b1262d75863a6cdb08",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/clang-format-vs/CMakeLists.txt" : {
      "ObjectId" : "1d44a47a3137bebd28e4b8b5417ab5f320ca3337",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build number added to Clang version to ensure that new VSIX can be upgraded\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/tools/clang-format/CMakeLists.txt" : {
      "ObjectId" : "a13633eaefc4e4ee3066018c71f175d5958d5077",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/clang-format/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "c7772fcb2f01646e24f1c6a34a5cf9fea0191ef9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/clang-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "a4ea4ca19cdd1c771303c211c72acd8c36293f65",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/clang-import-test/CMakeLists.txt" : {
      "ObjectId" : "bd4919694a27f9bb7928d31f6339a8f8629eb4c1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/clang-offload-bundler/CMakeLists.txt" : {
      "ObjectId" : "6161d08ae587c2910b083003d273e775260cddaf",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/clang-rename/CMakeLists.txt" : {
      "ObjectId" : "771e3bdea6f013b72b534e4c65ad42d6b8d21b9e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/diagtool/CMakeLists.txt" : {
      "ObjectId" : "3f7d80385a82c332d4b1e849152c7b1ea8f3e1c4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt" : {
      "ObjectId" : "901b6d62e465234c1be0b5b5fcbc18463fdb7287",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins. This must be before add_clang_executable as it reads\n\n# LLVM_NO_DEAD_STRIP.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent versioning if the buildhost is targeting for Win32.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Support plugins.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure plist creation for OS X.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is a test to ensure the actual order file works with the linker.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Passing an empty order file disables some linker layout optimizations.\n\n# To work around this and enable workflows for re-linking when the order file\n\n# changes we check during configuration if the file is empty, and make it a\n\n# configuration dependency.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "interpreter/llvm/src/tools/clang/tools/libclang/CMakeLists.txt" : {
      "ObjectId" : "2dd6703076360c1eba982068fd2fb4169820f17b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Avoid LNK4197 not to spceify libclang.def here.\n\n# Each functions is exported as \"dllexport\" in include/clang-c.\n\n# KB835326\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# don't add this for IDE's.\n",
        "Line" : 135,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/tools/scan-build-py/tests/functional/exec/CMakeLists.txt" : {
      "ObjectId" : "42ee1d11db828a41a8ee43725b90f6d3434262ca",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/scan-build-py/tests/functional/src/build/Makefile" : {
      "ObjectId" : "a8c0aafd0e5e61678c6be3e8166619a914e21779",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/scan-build/CMakeLists.txt" : {
      "ObjectId" : "380379300b099d4d5553440e5633cc1b1ddf2337",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/tools/scan-view/CMakeLists.txt" : {
      "ObjectId" : "b305ca562a72b9797df5cfcbed0abdb9b4a359ca",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/utils/ABITest/layout/Makefile" : {
      "ObjectId" : "0520625fcf29f850a47fe9e095adfabd2ced6810",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Usage: make test.N.report \n\n#\n\n# COUNT can be over-ridden to change the number of tests generated per\n\n# file, and TESTARGS is used to change the type generation. Make sure\n\n# to 'make clean' after changing either of these parameters.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/tools/clang/utils/ABITest/return-types-32/Makefile" : {
      "ObjectId" : "df1c53f1a16685ef1e8c5a9c54e1847030cde915",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/utils/ABITest/return-types-64/Makefile" : {
      "ObjectId" : "9616e45cba949cfbdfa6a6c5d3cc70ed1e06bca2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/utils/ABITest/single-args-32/Makefile" : {
      "ObjectId" : "9ff417fc29e592d5448b669262b9e83bd66c1642",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/utils/ABITest/single-args-64/Makefile" : {
      "ObjectId" : "b8acb70c1354dd00f2a33a964637480e8486e3e9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Usage: make test.N.report \n\n#\n\n# COUNT can be over-ridden to change the number of tests generated per\n\n# file, and TESTARGS is used to change the type generation. Make sure\n\n# to 'make clean' after changing either of these parameters.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/utils/ClangVisualizers/CMakeLists.txt" : {
      "ObjectId" : "16d118a421bad824bcf3433cce3457e6ffdc7860",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do this by hand instead of using add_llvm_utilities(), which\n\n# tries to create a corresponding executable, which we don't want.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/clang/utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "c8e9537cb56bbf3e4fdea25292491bf5e04fc654",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/clang/utils/perf-training/CMakeLists.txt" : {
      "ObjectId" : "c046a1dac40bcc87fe9d34f4dc05ec67e9275d20",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# All test suites added here should be excuded from check-all\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/dsymutil/CMakeLists.txt" : {
      "ObjectId" : "3a9b29326b3f68b33087dc2cf6bff8605883dc30",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/gold/CMakeLists.txt" : {
      "ObjectId" : "e9029e1e7c107f250cece06323f3c72d8392b409",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Because off_t is used in the public API, the largefile parts are required for\n\n# ABI compatibility.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/llc/CMakeLists.txt" : {
      "ObjectId" : "4f8181a1b6577e33b04fd4f479b06672d84e801b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/lli/CMakeLists.txt" : {
      "ObjectId" : "f02e19313b7915eaf016f732297e9d9fd1bccaaf",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/lli/ChildTarget/CMakeLists.txt" : {
      "ObjectId" : "f08ce57c29533518fb979770cdbd9b162a29d56e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-ar/CMakeLists.txt" : {
      "ObjectId" : "731bcbd8ac9d74e99842d1ddbcee8c9ac1c31fc1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-as-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "ff9bdaaf4c4373db2c362dc3df43c8b779b72c1e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-as/CMakeLists.txt" : {
      "ObjectId" : "3a157a3d4098a16129af5dd2b7a856bc6f97fa99",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-bcanalyzer/CMakeLists.txt" : {
      "ObjectId" : "15d51ee7a9d75d6bba97d625a953703b9f6d448c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-c-test/CMakeLists.txt" : {
      "ObjectId" : "a2bde0d9714f04e4e178381f8d9daf4454632f29",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We should only have llvm-c-test use libLLVM if libLLVM is built with the\n\n# default list of components. Using libLLVM with custom components can result in\n\n# build failures.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/llvm-cat/CMakeLists.txt" : {
      "ObjectId" : "61e5f9d004e7d0bc49484753a5955a7bc5f1bdfa",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-config/CMakeLists.txt" : {
      "ObjectId" : "5112648ea73173bd3b4b23b2f1fe2cfb8e30f268",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the llvm-config tool.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compute the substitution values for various items.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If it's an option, pass it without changes.\n",
        "Line" : 18,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Otherwise assume it's a library name we need to link with.\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Fetch target specific compile options, e.g. RTTI option\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use configure_file to create BuildVariables.inc.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use the C++ link flags, since they should be a superset of C link flags.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set build-time environment(s).\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add the dependency on the generation step.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "interpreter/llvm/src/tools/llvm-cov/CMakeLists.txt" : {
      "ObjectId" : "d0416b06f9cde3620594d618ab5b8ca755bec133",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-cvtres/CMakeLists.txt" : {
      "ObjectId" : "e912030e205ee060d7a250547ffa3f56c05dcdce",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-cxxdump/CMakeLists.txt" : {
      "ObjectId" : "ada886e888734225f53b575365ded0b89be2f112",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-cxxfilt/CMakeLists.txt" : {
      "ObjectId" : "488064d08dab2ded6bf81de483c82f5c40ee1a08",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-diff/CMakeLists.txt" : {
      "ObjectId" : "703ed97cb0b01dd9b4c77a24e6f77f8e1dcd73f9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-dis/CMakeLists.txt" : {
      "ObjectId" : "5804754ba696ed229f563751cffa9024bf3a37e5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-dwarfdump/CMakeLists.txt" : {
      "ObjectId" : "9a2e53f5a4bb27e82447e45d1ce5263454839f02",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-dwarfdump/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "1de35a3de478124db2cdb6ae438326fcde6cdd2c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-dwp/CMakeLists.txt" : {
      "ObjectId" : "98d67e04fe6a0b46dd31f2217fda07b1f2306f2a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-extract/CMakeLists.txt" : {
      "ObjectId" : "ce2a78d5d3865f2614e391308bcfb59109f2e175",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-go/CMakeLists.txt" : {
      "ObjectId" : "20393f728f8f1c2c87337c9feed583e538b5806f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-jitlistener/CMakeLists.txt" : {
      "ObjectId" : "61f8420a7ae590c8d07e428729492f21d83b0946",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool is excluded from the CMake build if Intel JIT events are disabled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/llvm-link/CMakeLists.txt" : {
      "ObjectId" : "051489f94bc92f88199d300eb51341267b6b58e5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-lto/CMakeLists.txt" : {
      "ObjectId" : "f0b385b7993d210d86bc4880a254cc46525ce191",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-lto2/CMakeLists.txt" : {
      "ObjectId" : "9be12d71ed793e18b670c4f7bb03be5dbc7c9d2b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-mc-assemble-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "c5fb62166cfd4fc99f1719cece43e32cb187fa8b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-mc-disassemble-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "c539f823e57f460135ee0b5a6520a237327d5746",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-mc/CMakeLists.txt" : {
      "ObjectId" : "15c6dda1b258633669721a93d27e2e284e6bfd3e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-mcmarkup/CMakeLists.txt" : {
      "ObjectId" : "0a51e99f1953e70205321e81eb06f320a05e7ef6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-modextract/CMakeLists.txt" : {
      "ObjectId" : "8484b3b0fb73ab729a80b0106813922f5a034165",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-mt/CMakeLists.txt" : {
      "ObjectId" : "d97cc4fe446fa1c946e937309dfebd742074d2bf",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-nm/CMakeLists.txt" : {
      "ObjectId" : "08bcd5f3089803301f1c0c60c079d9da7c1fe0e4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-objdump/CMakeLists.txt" : {
      "ObjectId" : "27e6145dfc1391721d6eee3b88faf53fcdc78374",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-opt-report/CMakeLists.txt" : {
      "ObjectId" : "777537a54c0ff47cbb3976bdabf4f32d7a7725ad",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-pdbutil/CMakeLists.txt" : {
      "ObjectId" : "bc28e6bdd7eaa4dffc9cced2455f698f9dc06512",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-pdbutil/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "6af00476577f145c04784f22ef525e01eee460bc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-profdata/CMakeLists.txt" : {
      "ObjectId" : "49641c482f29fc60eee9bd7b64107e71c8d2e3f1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-readobj/CMakeLists.txt" : {
      "ObjectId" : "f5b1a5b256add433eb210909c52717bfdaf8a628",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-rtdyld/CMakeLists.txt" : {
      "ObjectId" : "c1acbe5846bdb549808e5812352076f7f83b446d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-shlib/CMakeLists.txt" : {
      "ObjectId" : "907345a94023b16965cce5cfc7164e8b23e2c23a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool creates a shared library from the LLVM libraries. Generating this\n\n# library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake\n\n# commandline. By default the shared library only exports the LLVM C API.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libLLVM.so should not have any dependencies on any other LLVM\n\n# shared libraries. When using the \"all\" pseudo-component,\n\n# LLVM_AVAILABLE_LIBS is added to the dependencies, which may\n\n# contain shared libraries (e.g. libLTO).\n\n#\n\n# Also exclude libLLVMTableGen for the following reasons:\n\n#  - it is only used by internal *-tblgen utilities;\n\n#  - it pollutes the global options space.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: It should be \"GNU ld for elf\"\n",
        "Line" : 40,
        "CharPositionInLine" : 164
      },
      "3" : {
        "Text" : "# GNU ld doesn't resolve symbols in the version script.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# To get the export list for a single llvm library:\n\n# nm ${LIB_PATH} | awk \"/T _LLVM/ { print $3 }\" | sort -u | sed -e \"s/^_//g\" > ${LIB_PATH}.exports\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "interpreter/llvm/src/tools/llvm-size/CMakeLists.txt" : {
      "ObjectId" : "60345739c35a8a7c89d47a3d277637e9f55e3e5a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-split/CMakeLists.txt" : {
      "ObjectId" : "52eedeb9f53f32fe9352d6a495c57ceefae81229",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-stress/CMakeLists.txt" : {
      "ObjectId" : "139ab9e0d8f967de4381d1cafd84401644e49411",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-strings/CMakeLists.txt" : {
      "ObjectId" : "9339892a4997270981fb56a405a06f3c0816a89e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/llvm-symbolizer/CMakeLists.txt" : {
      "ObjectId" : "b04c45ff74421656de1eecdcbbb78210c5afc21e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: As we plan to execute llvm-symbolizer binary from compiler-rt\n\n# libraries, it has to be compiled for all supported targets (x86_64, i386 etc).\n\n# This means that we need LLVM libraries to be compiled for these\n\n# targets as well. Currently, there is no support for such a build strategy.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/llvm-xray/CMakeLists.txt" : {
      "ObjectId" : "6312e7ac47f4a66b14c99c3b66f65881877dea23",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/lto/CMakeLists.txt" : {
      "ObjectId" : "6e913519a809a3afa6115665561e9272d4e52c60",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/msbuild/CMakeLists.txt" : {
      "ObjectId" : "9d132ea58d5d9dc48822c4b0cc1f0c278522ff4b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPack will install a registry key in this format that we wish to reference.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/obj2yaml/CMakeLists.txt" : {
      "ObjectId" : "36dcfd92dfee7ccffa8a4e4b1163c661ec8efc55",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/opt-viewer/CMakeLists.txt" : {
      "ObjectId" : "19b60693308201fbc0b530f6e92a1eddf725b1a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/opt/CMakeLists.txt" : {
      "ObjectId" : "518396e36028fbf79b028f669051870e6b1b7687",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/tools/sancov/CMakeLists.txt" : {
      "ObjectId" : "e92b1fcbb86257a2adbff3cce4123804c23a48eb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/sanstats/CMakeLists.txt" : {
      "ObjectId" : "198f6692531d5870ed4e92b194bf23b6f84b2e9a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/verify-uselistorder/CMakeLists.txt" : {
      "ObjectId" : "74f7195c9066a18067eabafa58fa10ffb3e25fc0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/tools/xcode-toolchain/CMakeLists.txt" : {
      "ObjectId" : "978c4bc81dc85fa211237dea9aea9914a22857f6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OS X 10.11 El Capitan has just been released. One of the new features, System\n\n# Integrity Protection, prevents modifying the base OS install, even with sudo.\n\n# This prevents LLVM developers on OS X from being able to easily install new\n\n# system compilers. The feature can be disabled, but to make it easier for\n\n# developers to work without disabling SIP, this file can generate an Xcode\n\n# toolchain. Xcode toolchains are a mostly-undocumented feature that allows\n\n# multiple copies of low level tools to be installed to different locations, and\n\n# users can easily switch between them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setting an environment variable TOOLCHAINS to the toolchain's identifier will\n\n# result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To make this work with Xcode 7.1 and later you can install the toolchain this\n\n# file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the\n\n# path specified by $CMAKE_INSTALL_PREFIX/Toolchains\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file generates a custom install-xcode-toolchain target which constructs\n\n# and installs a toolchain with the identifier in the pattern:\n\n# org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the\n\n# system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the\n\n# in the environment.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Example usage:\n\n# cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On\n\n#   -DCMAKE_INSTALL_PREFIX=$PWD/install\n\n# ninja install-xcode-toolchain\n\n# export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains\n\n# export TOOLCHAINS=org.llvm.3.8.0svn\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# `xcrun -find clang` should return the installed clang, and `clang --version`\n\n# should show 3.8.0svn.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need\n\n# to detect it manually here.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If detecting Xcode version failed, set a crazy high version so we default\n\n# to the newest.\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Xcode 8 requires CompatibilityVersion 2\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Xcode 7.3 (the first version supporting external toolchains) requires\n\n# CompatibilityVersion 1\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "interpreter/llvm/src/tools/yaml2obj/CMakeLists.txt" : {
      "ObjectId" : "adeac2331a6b6dc288eeb48594fa3ab6cd468e3d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/FileCheck/CMakeLists.txt" : {
      "ObjectId" : "999320f78af28090496c43e7db1a02a04b011033",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/KillTheDoctor/CMakeLists.txt" : {
      "ObjectId" : "72d994fb9953ac6fb3d8670d954831e8621717ae",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/LLVMVisualizers/CMakeLists.txt" : {
      "ObjectId" : "9fdc8906e55aea789e9120a214b82b004363154a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do this by hand instead of using add_llvm_utilities(), which\n\n# tries to create a corresponding executable, which we don't want.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/utils/PerfectShuffle/CMakeLists.txt" : {
      "ObjectId" : "ed70760a43e425b4730a809abc1ddb2e4f2836da",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "b2913afae12a4c49d3474d8855156a4232027fff",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/count/CMakeLists.txt" : {
      "ObjectId" : "4e0d371334e473d643d791ae839ea51a953f0c7f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/llvm-lit/CMakeLists.txt" : {
      "ObjectId" : "4b10354cfdeabaee6f6a33487981053ae6507c69",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# llvm-lit needs suffix.py for multiprocess to find a main module.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "interpreter/llvm/src/utils/not/CMakeLists.txt" : {
      "ObjectId" : "4a92348ba0f9d82ed4c307f170da2e02e63c5636",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interpreter/llvm/src/utils/unittest/CMakeLists.txt" : {
      "ObjectId" : "b42ac834e3a77d5f661e92d655bb71ab4256de08",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Experimental CMake build script for Google Test.\n\n#\n\n# Consider this a prototype.  It will change drastically.  For now,\n\n# this is only for people on the cutting edge.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n\n########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where gtest's .h files can be found.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Depends on llvm::raw_ostream\n",
        "Line" : 56,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# This is a library meant only for the build tree.\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "interpreter/llvm/src/utils/unittest/UnitTestMain/CMakeLists.txt" : {
      "ObjectId" : "32f0f25a60ffcde4f151a8bf7fedcd8b5ba2b1fb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Depends on llvm::cl\n",
        "Line" : 8,
        "CharPositionInLine" : 10
      },
      "1" : {
        "Text" : "# This library is not meant to be in the install tree, only the build tree.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "interpreter/llvm/src/utils/yaml-bench/CMakeLists.txt" : {
      "ObjectId" : "403182ceee2a8e9b5d187f8137ec8128c29ea6a4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "io/CMakeLists.txt" : {
      "ObjectId" : "bb37dba4311c64cff5ff4e40ae2c05ef5f651c8d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# special CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "io/dcache/CMakeLists.txt" : {
      "ObjectId" : "c8936f2dbaed3b8cd7ceb4d0bd839b906db75b44",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/dcache package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "io/gfal/CMakeLists.txt" : {
      "ObjectId" : "31113325ebb95e144901b3728a2c946e798f650a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/gfal package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "io/io/CMakeLists.txt" : {
      "ObjectId" : "dd09d63beb9d86ed505bf10f5331388255b2dff0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/io package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called\n\n# recursively, quickly exhausting the stack. Prevent that by forcing\n\n# the many scope-local vars to share their stack space / become\n\n# registers, thanks to the optimizer.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "io/io/test/CMakeLists.txt" : {
      "ObjectId" : "69e06d960a6273dc1d0cddccd994b8152d9e649f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "io/rootpcm/CMakeLists.txt" : {
      "ObjectId" : "edc5cd72066c6d5ae9393adcb7162aa8c0fbe5b7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/rootpcm package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "io/sql/CMakeLists.txt" : {
      "ObjectId" : "914b9d9008137ae2fb3ca44f77cfc9912b282193",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/sql package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "io/xml/CMakeLists.txt" : {
      "ObjectId" : "e83401bd99d6b5683e5dfa095d7423147f1633f2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/xml package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "io/xmlparser/CMakeLists.txt" : {
      "ObjectId" : "e530f6bee43ccdb4536e99e2fb8b4e9baf862e80",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT io/xmlparser package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# needed to propagate includes to rootling\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "main/CMakeLists.txt" : {
      "ObjectId" : "58affba6fcf47b8b359be1b56735e4ced4c8e386",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT main package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---CreateHaddCommandLineOptions------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need the .py only on Windows\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# rootcling includes the ROOT complex header which would build the complex\n\n# dictionary with modules. To make sure that rootcling_stage1 builds this\n\n# dict before we use it, we add a dependency here.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create aliases: rootcint, genreflex.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "math/CMakeLists.txt" : {
      "ObjectId" : "18955db66a38223403e7d516c6d8088b84b216bb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(mathcore/test EXCLUDE_FROM_ALL)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/fftw/CMakeLists.txt" : {
      "ObjectId" : "8587e6410d43fb7840d87b43cde2323be52b22d7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/fftw package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/foam/CMakeLists.txt" : {
      "ObjectId" : "1387fb17e8ba86f3ac1d9f61175f882172fc40b0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/foam package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/fumili/CMakeLists.txt" : {
      "ObjectId" : "0ac3a7d902eb10d9b1dc510f0ce7dc741192da9e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/fumili package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/genetic/CMakeLists.txt" : {
      "ObjectId" : "a1146767b8ccd21e0cac39a93895ebb92ae824d6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/genetic package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/genetic/test/CMakeLists.txt" : {
      "ObjectId" : "a1e433a126945a21f85861b36ba1f243267d9cf9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Build and add all the defined test in the list---------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/genvector/CMakeLists.txt" : {
      "ObjectId" : "d7e94b9ec463fe06102bb9514c8419502a6c2d45",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/genvector package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/genvector/test/Makefile" : {
      "ObjectId" : "89f2dfabfa6ad9c15f55535bf7112640eacd2e4b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use reflex\n\n#useReflex=yes\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if have clhep\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#EXTRALIBS+=  $(CLHEPBASE)/lib/libCLHEP.a\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#VECTORSCALEOBJ     = testVectorScale.$(ObjSuf)\n\n#VECTORSCALESRC     = testVectorScale.$(SrcSuf)\n\n#VECTORSCALE        = testVectorScale$(ExeSuf)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# $(VECTORSCALE):   \t$(VECTORSCALEOBJ)\n\n# \t\t    $(LD) $(LDFLAGS) $^ $(LIBS) $(EXTRALIBS) $(EXTRAIOLIBS) $(OutPutOpt)$@\n\n# \t\t    @echo \"$@ done\"\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "math/mathcore/CMakeLists.txt" : {
      "ObjectId" : "2e4dc346e609ff10d8d6544c9b43b924f093381d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/mathcore package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adding Math/Math.h to the MathCore module makes the generation of GenVector\n\n# dictionary hand due to a bug in rootcling/clang. The redeclaration chain of\n\n# 'abs' shadow declaration (from stl math.h) is broken.\n\n# FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Avoid what it seems a compiler false positive warning\n",
        "Line" : 106,
        "CharPositionInLine" : 46
      },
      "3" : {
        "Text" : "# Avoid what it seems a compiler false positive warning\n",
        "Line" : 107,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 4
    },
    "math/mathcore/test/CMakeLists.txt" : {
      "ObjectId" : "f8beebc43fede5b77cc743cfea7fd939bb75c7b9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Build and add all the defined test in the list---------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/mathcore/test/CTestCustom.cmake" : {
      "ObjectId" : "300800d2f76c6416ed7d5d6dce569d59c9d7a7c2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Custom CTest settings---------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these tests are disabled as they timeout\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "math/mathcore/test/fit/Makefile" : {
      "ObjectId" : "cd78e419fba6b298cc4f1f07cdd26b9080bfeadd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# RC     := root-config\n\n# ifeq ($(shell which $(RC) 2>&1 | sed -ne \"s@.*/$(RC)@$(RC)@p\"),$(RC))\n\n# MKARCH := $(wildcard $(shell $(RC) --etcdir)/Makefile.arch)\n\n# RCONFIG := $(wildcard $(shell $(RC) --incdir)/RConfigure.h)\n\n# endif\n\n# ifneq ($(MKARCH),)\n\n# include $(MKARCH)\n\n# else\n\n# ifeq ($(ROOTSYS),)\n\n# ROOTSYS = ..\n\n# endif\n\n# include $(ROOTSYS)/etc/Makefile.arch\n\n# endif\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "math/mathmore/CMakeLists.txt" : {
      "ObjectId" : "75b3a53a27c2bb9abcd7fe6a8ef7b29fb9f861e2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/mathmore package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/mathmore/test/CMakeLists.txt" : {
      "ObjectId" : "78b54103bfa37bc32326d7bf217ccbc390f7d0a3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#some tests requires directly gsl\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Build and add all the defined test in the list---------------\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "math/matrix/CMakeLists.txt" : {
      "ObjectId" : "c4fb76a972cf83074e5a126bfc63b1678353262f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/matrix package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/minuit/CMakeLists.txt" : {
      "ObjectId" : "d50dabac6e16848201467618ef935f28989264f1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/minuit package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/minuit2/CMakeLists.txt" : {
      "ObjectId" : "37c4efc2c34999406929adedec7e4a6069c09149",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This package can be built separately\n\n# or as part of ROOT.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/minuit2/StandAlone.cmake" : {
      "ObjectId" : "1461d64732560825075222c10596ed933ee1b7e3",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tested with and supporting policies up to the following CMake version. \n\n# Not using ... syntax due to parser bug in MSVC's built-in CMake server mode.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check to see if we are inside ROOT and set a smart default\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This file adds copy_standalone\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy these files in if needed\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Inherit default from parent project if not main project\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Common features to all packages (Math and Minuit2)\n\n# If using this with add_subdirectory, the Minuit2\n\n# namespace does not get automatically prepended,\n\n# so including an alias for that.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# OpenMP support\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MPI support\n\n# Uses the old CXX bindings (deprecated), probably do not activate\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add the libraries\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Exporting targets to allow find_package(Minuit2) to work properly\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make a config file to make this usable as a CMake Package\n\n# Start by adding the version in a CMake understandable way\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Now, install the Interface targets\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Install the export set\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Adding the Minuit2Config file\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Allow build directory to work for CMake import\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Only add tests and docs if this is the main project\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Make adding tests cleaner using this macro\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Add a build docs target if Doxygen found\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Add purge target\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Setup package info\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Print package info to screen and log if this is the main project\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Packaging support\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Making a source package should fail if standalone has not been built\n\n# Setting an obvious package name in case a generator is manually specified\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# CPack collects *everything* except what's listed here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "math/minuit2/copy_standalone.cmake" : {
      "ObjectId" : "3ce15d478eb78a19ee7bc2a35f1bc3d9212d7be8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This adds a copy function. You give a directory and a\n\n# file, and it copies from one to the other. All paths\n\n# are relative to the source directory, not the build\n\n# directory. You can see the copied files with\n\n# STANDALONE_VERBOSE=ON\n\n#\n\n# This is designed for a \"standalone\" folder inside a\n\n# larger project.\n\n#\n\n# prepend_path(outvar addition item1 [item2...])\n\n#   Prepend a path ADDITION to each item in the list and set OUTVAR with it\n\n#\n\n# copy_standalone(SOURCE original_dir\n\n#                 DESTINATION new_dir\n\n#                 [OUTPUT variable_name]\n\n#                 FILES name1 [name2...])\n\n#\n\n#   For each file, does something similar to:\n\n#\n\n#   If minuit2_inroot and minuit2_standalone:\n\n#     cp ORIGINAL_DIR/NAME NEW_DIR/NAME\n\n#     set the NAME in ${OUTPUT} to NEW_DIR/NAME\n\n#\n\n#   If minuit2_inroot and not minuit2_standalone:\n\n#     set the NAME in ${OUTPUT} to OLD_DIR/NAME\n\n#\n\n#   If not minuit2_inroot:\n\n#     set the NAME in ${OUTPUT} to NEW_DIR/NAME\n\n#\n\n# minuit2_inroot:          A global setting that indicates that we are in the ROOT source\n\n# minuit2_standalone:      A global setting to turn on copying\n\n# COPY_STANDALONE_LISTING: A GLOBAL PROPERTY listing all files\n\n#                          added (to set up purging)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needed for CMake 3.4 and lower:\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake keyword arguments\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Error messages\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get and normalize path to new directory\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Keep track of all files listed\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Loop over all filenames given\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# All paths are relative to master directory\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Normalize paths\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Error if file to copy is missing\n",
        "Line" : 84,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# This is a configure setting to turn on/off copying\n",
        "Line" : 89,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Verify that the file would not copy over itself\n",
        "Line" : 92,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# Actually do the copy here\n",
        "Line" : 97,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# Allow cleaning with make purge\n",
        "Line" : 100,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "# Add new file to filename listing\n",
        "Line" : 103,
        "CharPositionInLine" : 16
      },
      "15" : {
        "Text" : "# Add old file to filename listing\n",
        "Line" : 106,
        "CharPositionInLine" : 16
      },
      "16" : {
        "Text" : "# Error if file to copy to is missing (since copy is off)\n",
        "Line" : 110,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Add new file to filename listing\n",
        "Line" : 115,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Output list of file names\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 19
    },
    "math/minuit2/doc/CMakeLists.txt" : {
      "ObjectId" : "cca9782bd17cee7db6a8f83dc92db3d30b1c2dae",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note that CMake 3.9+ provides a much more powerful and idiomatic FindDoxygen\n\n# On the older version, generating the main page is difficult.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide nice warning to user about docs target\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Policy needs to be set to use the new version of FindDoxygen\n\n# when the main minimum required CMake is < 3.3\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Only add docs target if Doxygen present\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Setting DOXYGEN settings\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Actually add the docs target\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "math/minuit2/examples/simple/CMakeLists.txt" : {
      "ObjectId" : "269c127116e8a5be770873acf90df0012d37530f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a test of the Minuit2 CMake build system.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake should be able to find the Minuit2 package if you have either built it or installed it\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reusing the existing test file for simplicity\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Linking with Minuit2::Minuit2 target\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Run this executable as a test with make test\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "math/minuit2/src/CMakeLists.txt" : {
      "ObjectId" : "6d95e2f9057f41b60b2a4ed994ae066484d2b845",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add alias for direct inclusion with add_subdirectory\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/minuit2/src/math/CMakeLists.txt" : {
      "ObjectId" : "4a1ee5b84fabce85369e709e49cf639877d2a7dd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adding the headers helps IDEs show the correct headers on targets\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add alias for direct inclusion\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build and install directories are different, using CMake Generator expression\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to add the ROOT mathcore directories if build inside of ROOT without standalone)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "math/minuit2/test/CMakeLists.txt" : {
      "ObjectId" : "19504b58abb0687504d3f935797b7552e1eccee1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---For the simple Minuit2 tests build and defined them---------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#input text files\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "math/minuit2/test/MnSim/CMakeLists.txt" : {
      "ObjectId" : "b8ca6df826dea7310bf50b0d89dbc310524c56ff",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "math/minuit2/test/MnTutorial/CMakeLists.txt" : {
      "ObjectId" : "e0c6a569df5942ff4d6ffb79421c35bd73b45e8e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "math/mlp/CMakeLists.txt" : {
      "ObjectId" : "7a860936426baf808ae98d0e6409aa1140511e5d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/mlp package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/physics/CMakeLists.txt" : {
      "ObjectId" : "42f69d81e0ae9b9391b60a98000aefd17fc6cd73",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/physics package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/quadp/CMakeLists.txt" : {
      "ObjectId" : "3735bd2d7c91a03ef1abc54f6e96ee1dd8b02ee1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/quadp package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/rtools/CMakeLists.txt" : {
      "ObjectId" : "230f02f50342a773cf6ee4b0ae16d858dd59b667",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/rtools package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/smatrix/CMakeLists.txt" : {
      "ObjectId" : "c0e2103f6562c87cb04fa50b531043b1843cc220",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/smatrix package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/smatrix/test/Makefile" : {
      "ObjectId" : "1c3b803b542a347d55dc470fba50e26eb0e07583",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ifeq ($(PLATFORM),macosx) \n\n# #unroll loop better on gcc > 4\n\n# CXXFLAGS+= -O3 -g  -funroll-loops \n\n# endif\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if have clhep\n\n#CLHEPBASE=/Users/moneta/mathlibs/CLHEP-1.9.2.2\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#EXTRALIBS+=  $(CLHEPBASE)/lib/libCLHEP.a\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "math/splot/CMakeLists.txt" : {
      "ObjectId" : "ea1ef09d0bf704792190dbdf6b1ffdfead43187c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/splot package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/unuran/CMakeLists.txt" : {
      "ObjectId" : "61d320f2db4f61888187a16cbc76a3ec03de077c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/unurun package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Define package related variables-----------------------------------------------------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Untar sources at configuration/generation time (needed for listing sources)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the \n\n# package on arm64.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#---Define special compiler settings for unurun-----------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#---configure unuran (required for creating the config.h used by unuran source files)----------------\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#---We need to disable some warnings-------------------------------------------------------------------\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "math/unuran/test/Makefile" : {
      "ObjectId" : "29c65f75bfce9eeb2f3004f4251c8ed712f85524",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $(TESTUNURAN):  $(TESTUNURANOBJ)\n\n# \t\t$(LD) $(LDFLAGS) $^ $(LIBS) $(EXTRALIBS) $(OutPutOpt)$@\n\n# \t\t@echo \"$@ done\"\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "math/vecops/CMakeLists.txt" : {
      "ObjectId" : "70d3b466a45404f50a112ef9a03808e6734ff694",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT math/vecops package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "math/vecops/test/CMakeLists.txt" : {
      "ObjectId" : "d10053c414a9b6ee7522bc3523416b8ca66e1b98",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "misc/CMakeLists.txt" : {
      "ObjectId" : "2e378a8669fa69ddd107086f8e64737aedab626f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "misc/memstat/CMakeLists.txt" : {
      "ObjectId" : "039b4f4950ac6819124aad05959abd6fb3da00d9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT misc/memstat package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "misc/memstat/doc/Makefile" : {
      "ObjectId" : "72b6decdfe4979a1f8db51df73a0afb919a5fade",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#IMGS= \\\n\timportant.png\\\n\ttip.png\\\n\twarning.png\\\n\tnote.png\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IMG_DIR = img\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#XMLTO_PARAM=-vv -o $(HTML_OUT_DIR) xhtml -m config.xsl\n\n#XMLTO_PARAM_NOCHUNKS=-o $(HTML_OUT_DIR) xhtml-nochunks -m config.xsl\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#$(HTML_OUT_DIR)/%.png:\n\n#\t@echo \"Copying images...\"\n\n#\t@cp ${addprefix $(IMG_DIR)/, $(IMGS)} $(HTML_OUT_DIR)/\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#img_files: ${addprefix $(HTML_OUT_DIR)/, $(IMGS)}\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#gen_html: $(HTML_OUT_DIR) css_files img_files html_files\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "misc/minicern/CMakeLists.txt" : {
      "ObjectId" : "bae895f7016e1c5577a2dad15eb43fe110ae0ecb",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT misc/minicern package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable optimization since it some cases was causing crashes.\n\n# Disable warnings, since what has worked for 40 years...\n\n# (see https://sft.its.cern.ch/jira/browse/ROOT-9179 for the warnings)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "montecarlo/CMakeLists.txt" : {
      "ObjectId" : "7f89b01ddedb26cd2c8f6b901870e6ecaa8f04f0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "montecarlo/eg/CMakeLists.txt" : {
      "ObjectId" : "8c38f911a9550fc0f29a8acee34663ac97ab37a8",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT montecarlo/eg package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "montecarlo/pythia6/CMakeLists.txt" : {
      "ObjectId" : "1e8a7cf580ab56efc2451e5f1650672537475745",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT montecarlo/pythia6 package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "montecarlo/pythia8/CMakeLists.txt" : {
      "ObjectId" : "06d350e439c236ec71d2071663f2929cd1c04b54",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT montecarlo/pythia8 package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "montecarlo/vmc/CMakeLists.txt" : {
      "ObjectId" : "fe08b725291b2918c76f72a02e315778e2e09e59",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT montecarlo/vmc package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/CMakeLists.txt" : {
      "ObjectId" : "a2091e859af72a9e03aeac96908966df8183e256",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "net/alien/CMakeLists.txt" : {
      "ObjectId" : "361249bc53eef3340b4f251aa3b1c70b5d5e6af9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/alien package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/auth/CMakeLists.txt" : {
      "ObjectId" : "8c24ce647fdefa9c47fb8e2b6b08c37e6822d20e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/auth package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/davix/CMakeLists.txt" : {
      "ObjectId" : "87941ad7f50f980edf556a8d7f8b227684bf4359",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/davix package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/http/CMakeLists.txt" : {
      "ObjectId" : "02c11600a11270817ac05ff8554b5cf3c6c168e5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/http package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# look for the realtime extensions library and use it if it exists\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "net/httpsniff/CMakeLists.txt" : {
      "ObjectId" : "399c81c56128e2a7ed718e7b73ad1a06627c5186",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/http package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/krb5auth/CMakeLists.txt" : {
      "ObjectId" : "e45db8a32da20d98ae52fd9d592bc00b90790eb0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/krb5auth package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/ldap/CMakeLists.txt" : {
      "ObjectId" : "08262cb1424741d4a67216111aba32d7c34946e4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/ldap package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/monalisa/CMakeLists.txt" : {
      "ObjectId" : "a179c3cd1c395e2d2a67565c4b160b5d486fdcfc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/monalisa package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/net/CMakeLists.txt" : {
      "ObjectId" : "491f645779897744eed42b4310af1d3246d9e69e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/net package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/netx/CMakeLists.txt" : {
      "ObjectId" : "4260f68fcf22f9eacd46b10268a34fb7d41c365c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/netx package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/netxng/CMakeLists.txt" : {
      "ObjectId" : "57307a43a831a6e9cd58aa6d7f372bcd9811afee",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/netxng package\n\n# @author Lukasz Janyst <ljanyst@cern.ch>\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "net/rpdutils/CMakeLists.txt" : {
      "ObjectId" : "b88fb4137eb6521a1cb75bee712c460ca5e4c041",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT net/rpdutils package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "proof/CMakeLists.txt" : {
      "ObjectId" : "82dbad2430df56341644e9630b66901fe7849abc",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# special CMakeListst.txt\n",
        "Line" : 2,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# special CMakeListst.txt\n",
        "Line" : 4,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 2
    },
    "proof/doc/confman/Makefile" : {
      "ObjectId" : "12bd6d9f8f134f445b3b05596ce2ae636959492e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for creating HTML out of Markdown for the PROOF configuration\n\n# manual.\n\n#\n\n# Pandoc is used for the conversion. Thanks to Olivier Couet for the Markdown\n\n# ROOT documentation generation scripts.\n\n#\n\n# Pandoc sample installation on OSX (using Homebrew):\n\n#\n\n#   $> brew install haskell-platform\n\n#   $> cabal install pandoc\n\n#   $> export PATH=$HOME/.cabal/bin:$PATH\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "proof/proof/CMakeLists.txt" : {
      "ObjectId" : "8526b3d895e67418dd1f576772292e3701b974d6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT proof/proof package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "proof/proofbench/CMakeLists.txt" : {
      "ObjectId" : "ed128b27c90d9fe005afdba9c90512378e762631",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT proof/proofbench package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generation and installation of the PAR files required by the benchmark\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "proof/proofd/CMakeLists.txt" : {
      "ObjectId" : "4e3ee00957c0f85ace0a324c0e27ffb46c8c2a1a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT proof/proofd package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# This should not be needed any longer after fix 039136791216af4620b9041e89d60c3ac0bab2f7\n\n# Uncomment if not the case (G Ganis, 18/5/2016)\n\n# ROOT_ADD_CXX_FLAG(CMAKE_CXX_FLAGS -Wno-undefined-bool-conversion)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "proof/proofplayer/CMakeLists.txt" : {
      "ObjectId" : "e64966a4e9645890fb136c0ac8624fefb2d3c215",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT proof/proofplayer package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "proof/proofx/CMakeLists.txt" : {
      "ObjectId" : "5ab1f272099d2512881846c067d5969c9364ba3a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT proof/proofx package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "roofit/CMakeLists.txt" : {
      "ObjectId" : "e9ca73c46cbc1ad19ecdee0af613a9945b9605f0",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "roofit/histfactory/CMakeLists.txt" : {
      "ObjectId" : "8925799ab1a3c93442e4a0407125a80475f57052",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT rootfit/histfactory package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Createhist2workspaceCommandLineOptions------------------------------------------------------------------\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "roofit/histfactory/test/CMakeLists.txt" : {
      "ObjectId" : "995f75ebe0c7db14eb9f2224e53db05f0f02a945",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# @author Stephan Hageboeck CERN, 2019\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "roofit/roofit/CMakeLists.txt" : {
      "ObjectId" : "0071481b710b4e92e48ffc597c146384d32206d7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT rootfit package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "roofit/roofit/test/CMakeLists.txt" : {
      "ObjectId" : "c58fd2dc8c51065274f47b9461aa965a7aaf4d6d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# @author Stephan Hageboeck, CERN, 2019\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "roofit/roofitcore/CMakeLists.txt" : {
      "ObjectId" : "bf96d6063d32dd81e9118fba4ffd23101ff0748b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT roofitcore package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "roofit/roofitcore/test/CMakeLists.txt" : {
      "ObjectId" : "5409126db8664ff856528348e9128e7e3526c307",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# @author Danilo Piparo CERN, 2018\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "roofit/roostats/CMakeLists.txt" : {
      "ObjectId" : "4f628e83355690499415d095c9e25227c4899ded",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT roostats package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rootx/CMakeLists.txt" : {
      "ObjectId" : "14a824b830a4cd1077dbb119f6ca05753ce7582f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT rootx package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Disable modules for ObjC/ObjC++. It has problems when compiling\n\n# rootxx-cocoa.mm with a lots of warnings and errors such as:\n\n# rootxx-cocoa.mm:884:48: error: property 'length' not found on object of type 'NSMutableAttributedString *'\n\n#\n\n# FIXME: We should disable building with modules on only the TU of rootxx-cocoa.mm\n\n# Unfortunately, cmake cannot reliably remove flags from a single TU.\n\n# as COMPILE_OPTIONS and COMPILE_FLAGS could be overriden causing tricky to\n\n# debug problems.\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# FIXME: rootxx-cocoa.mm should be compiled with -ObjC++ flag. Here we rely\n\n# that the compiler will recognise the extension mm and switch to the correct\n\n# language mode.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "sql/CMakeLists.txt" : {
      "ObjectId" : "2150aea7a57045a4ab53c05633181ce6cded21fd",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sql/mysql/CMakeLists.txt" : {
      "ObjectId" : "beb681ca266a9cf0efaa1fa48829951f66336b46",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT sql/mysql package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sql/odbc/CMakeLists.txt" : {
      "ObjectId" : "5efda8c42495c4bac60a170568b8b7c557cfc74b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT sql/odbc package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sql/oracle/CMakeLists.txt" : {
      "ObjectId" : "868cbdf652a873f85a5dc3bcb012b39bf18af4f7",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT sql/oracle package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fall back to old libstdc++ ABI if needed\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sql/pgsql/CMakeLists.txt" : {
      "ObjectId" : "60dde88367fe8ca61607cf0a64c2db62281c296f",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT sql/pgsql package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sql/sqlite/CMakeLists.txt" : {
      "ObjectId" : "56fb5bbf517e14b52f2b12cdb50f94e8c28b40f9",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT sql/pgsql package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "58e95e13c357958dc8be5c30be4c7a7666e83204",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt for the ROOT test programs.\n\n# This shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Author: Pere Mato, 25/10/2010\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---Copy the CTestCustom.cmake file into the build directory---------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To avoid to set ld_Library_path to locate the test libraries\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Testing using the binary tree\n",
        "Line" : 21,
        "CharPositionInLine" : 29
      },
      "4" : {
        "Text" : "# Testing using an installation (assuming access to ROOT CMake modules)\n",
        "Line" : 25,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "#---environment-------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---hworld------------------------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---event-------------------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---hsimple------------------------------------------------------------------------------------\n\n#ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist)\n\n#ROOT_ADD_TEST(test-hsimple COMMAND hsimple)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--minexam-------------------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--tstring-------------------------------------------------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--tcollex-------------------------------------------------------------------------------------\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#--tcollbm------------------------------------------------------------------------------------\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#--vvector------------------------------------------------------------------------------------\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#--vmatrix------------------------------------------------------------------------------------\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#--vlazy------------------------------------------------------------------------------------\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#--helloso------------------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#--Aclockso------------------------------------------------------------------------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#--bench------------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#--stress------------------------------------------------------------------------------------\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#--stressShapes------------------------------------------------------------------------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#--stressGeometry------------------------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#--stressLinear------------------------------------------------------------------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#--stressGraphics------------------------------------------------------------------------------------\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#--stressHistogram------------------------------------------------------------------------------------\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#--stressGUI---------------------------------------------------------------------------------------\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#--stressSpectrum----------------------------------------------------------------------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#--stressVector------------------------------------------------------------------------------------\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#--stressTMVA--------------------------------------------------------------------------------------\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#--stressMathMore----------------------------------------------------------------------------------\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#--stressMathCore----------------------------------------------------------------------------------\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#--stressRooFit----------------------------------------------------------------------------------\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#--stressRooStats----------------------------------------------------------------------------------\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#--stressHistFactory--------------------------------------------------------------------------------\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#--stressFit---------------------------------------------------------------------------------\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#--stressHistoFit-----------------------------------------------------------------------------\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#--stressEntryList---------------------------------------------------------------------------\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#--stressIterators---------------------------------------------------------------------------\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#--stressInterpreter-------------------------------------------------------------------------\n\n# FIXME: Temporary workaround for runtime_cxxmodule\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#--stressHepix-------------------------------------------------------------------------------\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX \"FAILED|Error in\")\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#--stressProof-------------------------------------------------------------------------------\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#--testbits----------------------------------------------------------------------------------\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#--ctorture----------------------------------------------------------------------------------\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#--qprandom----------------------------------------------------------------------------------\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#--threads----------------------------------------------------------------------------------\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#ROOT_ADD_TEST(test-threads COMMAND threads)\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#--stressIOPlugins--------------------------------------------------------------------------\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#--delaunay----------------------------------------------------------------------------------\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#--TestTformula------------------------------------------------------------------------------------\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#--TBB basic test----------------------------------------------------------------------------------\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#--Vc basic test-----------------------------------------------------------------------------------\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#--VecCore basic test------------------------------------------------------------------------------\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#--Vc GenVector test-----------------------------------------------------------------------------------\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#--g2root------------------------------------------------------------------------------------------\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#--periodic----------------------------------------------------------------------------------------\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# There are two problems with this test and cxxmodules. First, it picks up a\n\n# header files from $ROOTSYS/include and builds a library. Naturally, we should\n\n# build pcm files, however, building module MathCore requires specific -I to\n\n# build the needed VecCore and Vc components. This test does not have access\n\n# to the include relevant include paths. Secondly, if we want to reuse the\n\n# modules from ROOT which makes most sense we can't because we get a hard\n\n# error such as: fatal error: malformed or corrupted AST file:\n\n# 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm\n\n#\n\n# FIXME: We can fix the first point by moving out all VecCore-related headers\n\n# such as Math/Types.h and all of its includers in a separate module. Thus,\n\n# the current test will not require the VecCore (as in the textual case).\n\n# Alternatively, we can trace the origin of the fatal error and try to remap\n\n# the source locations.\n",
        "Line" : 356,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 57
    },
    "test/CTestCustom.cmake" : {
      "ObjectId" : "9fd14bb5649ed02d430ca73096afb156e737c13d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Custom CTest settings---------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  sse tests of vc fail for icc compiler\n",
        "Line" : 9,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# these tests are disabled as they timeout\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "test/Makefile" : {
      "ObjectId" : "325691a2f7bf3804e83fdd5eb3c87ba1a3a70055",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tutorials dir needed by stressProof\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2,
      "Errorlog" : "line 26:62 token recognition error at: '\"s|.*\\\"\\(.*\\)\\\"|\\1'\nline 805:51 token recognition error at: '\"\\n\\t\\t\\tgenreflex TrackMathCore.h --selection_file=TrackMathCoreRflx.xml -o TrackMathCoreRflx.cxx  -I$(ROOTSYS)/include\\n\\n.$(SrcSuf).$(ObjSuf):\\n\\t$(CXX)  $(CXXFLAGS) -c $<\\n\\nifeq ($(GCC_MAJOR),4)\\nifeq ($(GCC_MINOR),1)\\nTBenchDict.o: CXXFLAGS += -Wno-strict-aliasing\\nendif\\nendif\\n\u0000'\n"
    },
    "test/RootIDE/Makefile" : {
      "ObjectId" : "037ab0a44ffebfd2e06f72d04da8e5707a03a57d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########################################\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/RootShower/Makefile" : {
      "ObjectId" : "0696c3ee582d55ffda7e443aa0bc3cebe23ca04c",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the RootShower program.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 12/2/2003\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 49:25 token recognition error at: '\\l'\nline 49:29 token recognition error at: '\\l'\nline 49:52 token recognition error at: '\\l'\nline 49:56 token recognition error at: '\\l'\nline 50:13 token recognition error at: '\\l'\nline 50:17 token recognition error at: '\\l'\n"
    },
    "test/fit/CMakeLists.txt" : {
      "ObjectId" : "f6d392b47f81928e11f1b5078ab5b9b9599bf42a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/histviewer/Makefile" : {
      "ObjectId" : "1c3d8d647b10acf015e9c338755831176b322c03",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "############# MACROS ##############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############# RULES ###############\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "############# TARGETS #############\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/periodic/CMakeLists.txt" : {
      "ObjectId" : "0bc56e77167a450b1e55628c7b35f4a97abbc837",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Create a shared library with geneated dictionary\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Create  a main program using the library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/periodic/Makefile" : {
      "ObjectId" : "ce36e064e075793bcff59cea65e34ab74aa7b3a5",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "############# MACROS ##############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############# RULES ###############\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "############# TARGETS #############\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/rhtml/Makefile" : {
      "ObjectId" : "d7c6fdf5c6655b677378c9920d070a6a2dfa85e6",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the ROOT test programs.\n\n# This Makefile shows nicely how to compile and link applications\n\n# using the ROOT libraries on all supported platforms.\n\n#\n\n# Copyright (c) 2000 Rene Brun and Fons Rademakers\n\n#\n\n# Author: Fons Rademakers, 29/2/2000\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/rootDownloadData.cmake" : {
      "ObjectId" : "a2957e4c317ecf30efc0eb5e7f64987468fab36e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# ROOT download test data files\n\n#   Script arguments:\n\n#     DST destination directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tmva/CMakeLists.txt" : {
      "ObjectId" : "5e54f36d9498c5fd08294ab2f41bfe3fab221c66",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build pyMVA. Allows users to call python mva's from c++ ROOT/TMVA.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build RMVA. Allows users to call R mva's from c++ ROOT/TMVA.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tmva/pymva/CMakeLists.txt" : {
      "ObjectId" : "f2867909b6c5f825ca92a014fc71416cfb16121b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for PyMVA  package\n\n############################################################################\n\n#Autor: Omar  Zapata, Lorenzo Moneta, Sergei Glayzer 22/08/2015\n\n#website:http://oproject.org\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tmva/pymva/test/CMakeLists.txt" : {
      "ObjectId" : "5527b25c7cd064f483f9681a9ecdd906f9e34f85",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building PyMVA tests\n\n# @author Stefan Wunsch\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for needed python modules\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable tests based on available python modules\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Test PyKeras: Binary classification\n",
        "Line" : 21,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Test PyKeras: Regression\n",
        "Line" : 26,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Test PyKeras: Multi-class classification\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Test PyRandomForest: Classification\n",
        "Line" : 38,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Test PyRandomForest: Multi-class classification\n",
        "Line" : 43,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Test PyGTB: Classification\n",
        "Line" : 48,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Test PyGTB: Multi-class classification\n",
        "Line" : 53,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Test PyAdaBoost: Classification\n",
        "Line" : 58,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# Test PyAdaBoost: Multi-class classification\n",
        "Line" : 63,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 12
    },
    "tmva/rmva/CMakeLists.txt" : {
      "ObjectId" : "7b83352eb144747befccccbb2e6a924922737027",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT R package\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tmva/tmva/CMakeLists.txt" : {
      "ObjectId" : "dcd496b581f04fd8ab059c568b2f025444dba15e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT tmva package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#src/DNN/Architectures/Reference/ActivationFunctions.cxx\n\n#src/DNN/Architectures/Reference/Arithmetic.cxx\n\n#src/DNN/Architectures/Reference/DenoisePropagation.cxx\n\n#src/DNN/Architectures/Reference/Dropout.cxx\n\n#src/DNN/Architectures/Reference/Initialization.cxx\n\n#src/DNN/Architectures/Reference/LossFunctions.cxx\n\n#src/DNN/Architectures/Reference/OutputFunctions.cxx\n\n#src/DNN/Architectures/Reference/Propagation.cxx\n\n#src/DNN/Architectures/Reference/RecurrentPropagation.cxx\n\n#src/DNN/Architectures/Reference/Regularization.cxx\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# cannot export include for vdt, as it points to build dir\n",
        "Line" : 372,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#src/DNN/Architectures/Cpu/ActivationFunctions.cxx\n\n#src/DNN/Architectures/Cpu/Arithmetic.cxx\n\n#src/DNN/Architectures/Cpu/DataLoader.cxx\n\n#src/DNN/Architectures/Cpu/Dropout.cxx\n\n#src/DNN/Architectures/Cpu/Initialization.cxx\n\n#src/DNN/Architectures/Cpu/LossFunctions.cxx\n\n#src/DNN/Architectures/Cpu/OutputFunctions.cxx\n\n#src/DNN/Architectures/Cpu/Propagation.cxx\n\n#src/DNN/Architectures/Cpu/RecurrentPropagation.cxx\n\n#src/DNN/Architectures/Cpu/Regularization.cxx\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tmva/tmva/test/CMakeLists.txt" : {
      "ObjectId" : "8b429cbbf5cdfe06e75345da9a770dceb751d33e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT TMVA tests.\n\n# @author Kim Albertsson\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tests using google test\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tmva/tmva/test/DNN/CMakeLists.txt" : {
      "ObjectId" : "f4c52ecfd0b526ababb67ad7d4a6ea2dd3078647",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building TMVA/DNN tests.\n\n# @author Simon Pfreundschuh\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CUDA tests. ---------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if using CUDA_ADD_EXECUTABLE CUDA_LIBRARIES are added automatically\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# DNN - Activation Functions Cuda\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# DNN - Loss Functions Cuda\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DNN - Derivatives Cuda\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# DNN - Backpropagation Cuda\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# DNN - Backpropagation DL Cuda\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# DNN - Minimization Cuda\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# DNN - Arithmetic Cuda\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# DNN - DataLoader Cuda\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#--- CPU tests. ----------------------------\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DNN - Arithmetic Functions CPU\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# DNN - Activation Functions CPU\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# DNN - Loss Functions CPU\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# DNN - Derivatives CPU\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# DNN - Backpropagation CPU\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# DNN - BackpropagationDL CPU\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# DNN - DataLoader CPU\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# DNN - Minimization CPU\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# DNN - Optimization CPU\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# DNN - MethodDL SGD Optimization CPU\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# DNN - MethodDL Adam Optimization CPU\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# DNN - MethodDL Adagrad Optimization CPU\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# DNN - MethodDL RMSProp Optimization CPU\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# DNN - MethodDL Adadelta Optimization CPU\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# DNN - Regression CPU\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# DNN - Activation Functions\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# DNN - Loss Functions\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# DNN - Derivatives\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# DNN - Backpropagation\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# DNN - Backpropagation DL\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# DNN - DataLoader\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# DNN - Minimization\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#  ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries})\n\n#  # this test takes more than 20 minutes on arm in non-optimised mode\n\n#  if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" AND CMAKE_BUILD_TYPE STREQUAL \"Debug\") )\n\n#    ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization)\n\n#  endif()\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "tmva/tmva/test/DNN/CNN/CMakeLists.txt" : {
      "ObjectId" : "574af2b27b19046f22d48d5251a56772a4a963a4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building TMVA/DNN/CNN tests.\n\n# @author Vladimir Ilievski\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CUDA tests. ---------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-- features not implemeted in ref architectures \n\n#ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--- CPU tests. ----------------------------\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-- need to be fixed \n\n#ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu)\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tmva/tmva/test/DNN/RNN/CMakeLists.txt" : {
      "ObjectId" : "5e997afe22add105da0f465d9bfcc4a0de82c75d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building TMVA/DNN/RNN tests.\n\n# @author Saurav Shekhar\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# RNN - BackPropagation Reference\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n## RNN - Initialization Reference\n\n#ROOT_EXECUTABLE(testRecurrentNetInit TestRecurrentNetInitialization.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-RNN-Init COMMAND testRecurrentNetInit)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# RNN - Forward Reference\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# RNN - Full Test Reference\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# RNN - Loss Reference\n\n#ROOT_EXECUTABLE(testRecurrentNetLoss TestRecurrentNetLoss.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-RNN-Loss COMMAND testRecurrentNetLoss)\n\n#\n\n## RNN - Prediction Reference\n\n#ROOT_EXECUTABLE(testRecurrentNetPred TestRecurrentNetPrediction.cxx LIBRARIES ${Libraries})\n\n#ROOT_ADD_TEST(TMVA-DNN-RNN-Pred COMMAND testRecurrentNetPred)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- CUDA tests. ---------------------------\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  SET(DNN_CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_CUBLAS_LIBRARIES})\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--- CPU tests. ----------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DNN - Forward CPU\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# RNN - Full Test Reference\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tmva/tmva/test/Method/CMakeLists.txt" : {
      "ObjectId" : "8fcd85e8b05dfcc2cb59e33f4b09aafd8e7cfff2",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building TMVA/Method tests.\n\n# @author Kim Albertsson\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tmva/tmva/test/ROC/CMakeLists.txt" : {
      "ObjectId" : "0c419f70a223e86da4b31e230609ea2570e0f0d4",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building TMVA/ROC tests.\n\n# @author Kim Albertsson\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tmva/tmva/test/crossvalidation/CMakeLists.txt" : {
      "ObjectId" : "b84e61c9a3c2f42bb593e85fbdbaaca9594dbe66",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT TMVA tests.\n\n# @author Kim Albertsson\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tests utilising google test\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tmva/tmva/test/envelope/CMakeLists.txt" : {
      "ObjectId" : "3371b46e25520d59b11d4c1c59679a2f8e7dbd39",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building Envelope tests.\n\n# @author  Omar Zapata\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tmva/tmvagui/CMakeLists.txt" : {
      "ObjectId" : "d20f37ee46a3b98b1a1a400375154d3fb4d8d31a",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT tmva package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tree/CMakeLists.txt" : {
      "ObjectId" : "6b8997b8a5510113985b7d86e1d352824c2bcc32",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tree/dataframe/CMakeLists.txt" : {
      "ObjectId" : "40b2a75400dd44c969ef067c1d89f61e2f25c12b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT tree/dataframe package\n\n# @author Danilo Piparo CERN, Pere Mato CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable RDataFrame on 32-bit UNIX platforms due to ROOT-9236\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO(jblomer): Use Davix through an abstraction layer in RDAVIX to avoid linking issues\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The builtin version is statically linked, thus we link against RDAVIX to avoid a symbol conflict\n\n# if libROOTDataFrame and libRDAVIX are used together.\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# If the system libDavix is used, RDAVIX does not contain the Davix symbols itself\n",
        "Line" : 113,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "tree/dataframe/test/CMakeLists.txt" : {
      "ObjectId" : "a38da5cedf42f106c7f39219bbefe86b8a08c3aa",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# @author Danilo Piparo CERN, Enrico Guiraud CERN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### C++ TESTS ####\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### PYTHON TESTS ####\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tree/tree/CMakeLists.txt" : {
      "ObjectId" : "d4a68d1e1c9ed3de262321b2da3f2a374f73ec8e",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT tree/tree package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tree/tree/test/CMakeLists.txt" : {
      "ObjectId" : "8d5394b7a9d8e6b4733aabd450ab7851e0bbd215",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FIXME: tests are having timeout on 32bit CERN VM (in docker container everything is fine),\n\n# to be reverted after investigation.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tree/treeplayer/CMakeLists.txt" : {
      "ObjectId" : "669dd916d1e7e47ba20953b4167e7eddc1cdd3da",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT tree/treeplayer package\n\n# @author Pere Mato CERN, Danilo Piparo CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tree/treeplayer/test/CMakeLists.txt" : {
      "ObjectId" : "d45eb0ded2f6b794021d5d4517db94ac0eb2787d",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tree/treeviewer/CMakeLists.txt" : {
      "ObjectId" : "3caab9715e2a6f94e88044e6aba0292851ab84c1",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt file for building ROOT tree/treeviewer package\n\n# @author Pere Mato, CERN\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tutorials/CMakeLists.txt" : {
      "ObjectId" : "e36188a86bfe6d59e9bf10653bd82c57a74b8355",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt for the ROOT tutorials programs.\n\n# Author: Pere Mato, 25/10/2010\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Testing using the binary tree\n",
        "Line" : 8,
        "CharPositionInLine" : 29
      },
      "2" : {
        "Text" : "# Ignore environment on Windows\n",
        "Line" : 10,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# testing using an installation\n",
        "Line" : 19,
        "CharPositionInLine" : 29
      },
      "4" : {
        "Text" : "#---If ROOT was built with the classic configure/make---\n",
        "Line" : 21,
        "CharPositionInLine" : 37
      },
      "5" : {
        "Text" : "#---Copy the CTestCustom.cmake file into the build directory--------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---Provide a rootlogon.C file in the current build directory that\n\n#   will affect the way we run all tutorials.\n\n#   This overwrites the existing rootlogon.C and rootalias.C in the\n\n#   tutorials directory which is copied to the build area.\n\n#-------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---Definition of the helper function--------------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---Tutorials disabled depending on the build components-------------\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# histfactory requires xml\n\n# unfold requires xml\n",
        "Line" : 82,
        "CharPositionInLine" : 35
      },
      "10" : {
        "Text" : "# variables identifying the package must have the package name  in lower case (it corresponds to the CMake option name)\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# FIXME: Temporary workaround for runtime_cxxmodule\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# histfactory doesn't work on Windows\n",
        "Line" : 104,
        "CharPositionInLine" : 64
      },
      "13" : {
        "Text" : "#---Multiproc is not supported on Windows\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#---These ones requires a display to run-----------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---These do not need to run for TMVA\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---These ones are disabled !!! ------------------------------------\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Helper macro\n\n# Helper macro\n\n# Helper macro\n\n# Instrumentation. Not a standalone tutorial\n",
        "Line" : 209,
        "CharPositionInLine" : 23
      },
      "18" : {
        "Text" : "# Instrumentation. Not a standalone tutorial\n",
        "Line" : 213,
        "CharPositionInLine" : 29
      },
      "19" : {
        "Text" : "# not a tutorial; used by mp104_processH1.C et al.\n",
        "Line" : 214,
        "CharPositionInLine" : 28
      },
      "20" : {
        "Text" : "# A driver uses this macro which cannot be executed directly\n",
        "Line" : 219,
        "CharPositionInLine" : 22
      },
      "21" : {
        "Text" : "# Takes too much time\n",
        "Line" : 223,
        "CharPositionInLine" : 36
      },
      "22" : {
        "Text" : "# these are not a tutorial but classes used in run_h1analysis.C\n",
        "Line" : 228,
        "CharPositionInLine" : 21
      },
      "23" : {
        "Text" : "#---Special return code------------------------------------------------\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#---Dependencies------------------------------------------------------\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#--many roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#--dependency for TMVA tutorials\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#---Loop over all tutorials and define the corresponding test---------\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#---Define the primordial tutorials-----------------------------------\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---Loop over all tutorials and define the corresponding test---------\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# These tests on ARM64 need much more than 20 minutes - increase the timeout\n",
        "Line" : 364,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "# 40m\n",
        "Line" : 366,
        "CharPositionInLine" : 31
      },
      "32" : {
        "Text" : "# 20m\n",
        "Line" : 368,
        "CharPositionInLine" : 31
      },
      "33" : {
        "Text" : "#---Python tutorials-----------------------------------------------------\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# requires GUI\n\n# not a tutorial\n\n# requires GUI\n\n# not really a tutorial\n\n# ????\n\n# ????\n",
        "Line" : 386,
        "CharPositionInLine" : 36
      },
      "35" : {
        "Text" : "# not a tutorial\n",
        "Line" : 392,
        "CharPositionInLine" : 60
      },
      "36" : {
        "Text" : "# requires GUI\n\n# not a tutorial\n",
        "Line" : 393,
        "CharPositionInLine" : 36
      },
      "37" : {
        "Text" : "# not a tutorial\n",
        "Line" : 395,
        "CharPositionInLine" : 43
      },
      "38" : {
        "Text" : "# requires GUI\n\n# same as the C++ case\n\n# same as the C++ case\n\n# same as the C++ case\n",
        "Line" : 396,
        "CharPositionInLine" : 36
      },
      "39" : {
        "Text" : "#---Python tutorials dependencies--------------------------------------\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "#Race condition\n",
        "Line" : 430,
        "CharPositionInLine" : 76
      },
      "41" : {
        "Text" : "#---Tutorials expected to fail in PyROOT experimental\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# These tests only fail in Py3 with PyROOT experimental\n",
        "Line" : 469,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 43
    },
    "tutorials/CTestCustom.cmake" : {
      "ObjectId" : "8cafdc5d96a1bb8112f98a35ac40b34ef47aad9b",
      "LastModified" : "2019-04-18T17:58:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---Custom CTest settings---------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  TTreeProcessorM{T,P} are not available\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  pthread is not retained on ubuntus when building root.exe\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# these tutorials are disabled as they timeout\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The new triangulation does not work on ARM\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 681,
    "CMAKESOURCE" : 5,
    "MAKEFILE" : 31
  },
  "ElapsedTime" : 16742
}