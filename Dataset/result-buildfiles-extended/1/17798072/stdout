{
  "Repository" : "17798072",
  "Revision" : "HEAD",
  "ObjectId" : "fa67f4fe3aed2dc18a3c6baef2ec8ad59a9945af",
  "CommitTime" : "2018-01-01T21:48:34Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "7d6dcba6fd39bb2e45f58239865579fb23fb4aba",
      "LastModified" : "2016-07-20T12:27:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tCopyright (C) 2015-2016 Yizhou Shan <shan13@purdue.edu>\n\n#\n\n#\tThis program is free software; you can redistribute it and/or modify\n\n#\tit under the terms of the GNU General Public License as published by\n\n#\tthe Free Software Foundation; either version 2 of the License, or\n\n#\t(at your option) any later version.\n\n#\n\n#\tThis program is distributed in the hope that it will be useful,\n\n#\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n#\tGNU General Public License for more details.\n\n#\n\n#\tYou should have received a copy of the GNU General Public License along\n\n#\twith this program; if not, write to the Free Software Foundation, Inc.,\n\n#\t51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# o Do NOT use built-in rules and variables\n\n#   This increases performance and avoids hard-to-debug behaviour );\n\n#   Yes, we will have very hard-to-debug errors!\n\n# o Look for make include files relative to root of kernel src\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid funny character set dependencies\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid interference with shell env settings\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Colorful output\n\n# ===========================================================================\n\n# Normally, we echo everything in default color. By using the \"make M=\",\n\n# we can now control the color of the output message.\n\n# For example,\n\n#\t\tmake M=1\t--> red\n\n#\t\tmake M=2 clean\t--> green\n\n#\n\n# Note that M ranges from 0~7. We do NOT check for this.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Beautiful output\n\n# ===========================================================================\n\n# Normally, we echo the whole command before executing it. By making\n\n# that echo $($(quiet)$(cmd)), we now have the possibility to set\n\n# $(quiet) to choose other forms of output instead, e.g.\n\n#\n\n#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@\n\n#               cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<\n\n#\n\n# If $(quiet) is empty, the whole command will be printed.\n\n# If it is set to \"quiet_\", only the short version will be printed.\n\n# If it is set to \"silent_\", nothing will be printed at all, since\n\n# the variable $(silent_cmd_cc_o_c) doesn't exist.\n\n#\n\n# A simple variant is to prefix commands with $(Q) - that's useful\n\n# for commands that shall be hidden in non-verbose mode.\n\n#\n\n#\t$(Q)ln $@ :<\n\n#\n\n# If KBUILD_VERBOSE equals 0 then the above command will be hidden.\n\n# If KBUILD_VERBOSE equals 1 then the above command is displayed.\n\n#\n\n# To put more focus on warnings, be less verbose as default\n\n# Use 'make V=1' to see the full commands\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user is running \"make -s\", suppress echoing of commands\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# make-4\n",
        "Line" : 103,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "# make-3.8x\n",
        "Line" : 107,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Code checker\n\n# ===========================================================================\n\n# Call a source code checker (by default, \"sparse\") as part of the\n\n# C compilation.\n\n#\n\n# Use 'make C=1' to enable checking of only re-compiled files.\n\n# Use 'make C=2' to enable checking of *all* source files, regardless\n\n# of whether they are re-compiled or not.\n\n#\n\n# See the file \"Documentation/sparse.txt\" for more details, including\n\n# where to get the \"sparse\" utility.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  1st\tFirst Part of the Makefile\t\n\n# ===========================================================================\n\n# The first part handles externel building. When users want to build on other\n\n# directory, the first part normally invokes a sub-make to do this.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# kbuild supports saving output files in a separate directory.\n\n# To locate output files in a separate directory two syntaxes are supported.\n\n# In both cases the working directory must be the root of the kernel src.\n\n#\n\n# 1) O=\n\n# Use \"make O=dir/to/store/output/files/\"\n\n#\n\n# 2) Set KBUILD_OUTPUT\n\n# Set the environment variable KBUILD_OUTPUT to point to the directory\n\n# where the output files shall be placed.\n\n# export KBUILD_OUTPUT=dir/to/store/output/files/\n\n# make\n\n#\n\n# The O= assignment takes precedence over the KBUILD_OUTPUT environment\n\n# variable.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# KBUILD_SRC is set on invocation of make in OBJ directory\n\n# KBUILD_SRC is not intended to be used by the regular user (for now)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# OK, Make called in directory where kernel src resides\n\n# Do we want to locate output files in a separate directory?\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# That's the default target when nothing is given on the command line\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Cancel implicit rules on top Makefile\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Leave processing to sub-make\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ifneq ($(KBUILD_OUTPUT),)\n\n# ifeq ($(KBUILD_SRC),)\n",
        "Line" : 193,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "#  2st\tSecond Part of the Makefile\t\n\n# ===========================================================================\n\n# The second part finish all the preprocessing and variable initialization.\n\n# We leave the make-targets processing to the third part.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Process the rest of Makefile if this is the final invocation.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Do not print \"Entering directory ...\"\n\n# But we want to display it when entering to the output directory.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Building in the src tree\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Building on external directory\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Cross compiling and selecting different set of gcc/bin-utils\n\n# ===========================================================================\n\n# When performing cross compilation for other architectures ARCH shall be set\n\n# to the target architecture. (See arch/* for the possibilities).\n\n# ARCH can be set during invocation of make:\n\n# make ARCH=x86\n\n# Another way is to have ARCH set in the environment.\n\n# The default ARCH is the host where make is executed.\n\n#\n\n# CROSS_COMPILE specify the prefix used for all executables used\n\n# during compilation. Only gcc and related bin-utils executables\n\n# are prefixed with $(CROSS_COMPILE).\n\n#\n\n# $(CROSS_COMPILE) can be set on the command line:\n\n# make CROSS_COMPILE=i386-elf-\n\n#\n\n# Alternatively CROSS_COMPILE can be set in the environment.\n\n# A third alternative is to store a setting in .config so that plain\n\n# \"make\" in the configured kernel build directory always uses that.\n\n# Default value for CROSS_COMPILE is not to prefix executables\n\n# Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#XXX\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Architecture as present in <generated/compile.h>\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Additional ARCH settings for x86\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Shell used by kbuild\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Generic definitions; cancel implicit rules\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Make variables (CC, etc...)\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# It seems like if we run kconfig again, then a new <generated/autoconf.h>\n\n# will be created, then all source files need to be re-compiled. However,\n\n# fixdep.c would take care of this.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# 3st\tThird Part of the Makefile\t\n\n# ===========================================================================\n\n# The third part describes the *config and build targets and their rules.\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Basic helpers\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# To avoid any implicit rule\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Generates a Makefile in the output directory, if using a\n\n# separate output directory. This allows convenient use of\n\n# make in the output directory.\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# To make sure we do not include .config for any of the *config targets.\n\n# Catch them early, and hand them over to scripts/kconfig/Makefile.\n\n# It is allowed to specify more targets when calling make, including\n\n# mixing *config targets and build targets, e.g. \"make config all\".\n\n# Detect when mixed targets is specified, and make a second invocation\n\n# of make so .config is not included in this case either (for *config).\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Targets that do not need .config\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ===========================================================================\n\n# We are called with mixed targets(*config and build targets).\n\n# Handle them one by one\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ===========================================================================\n\n# *config targets only - make sure prerequisites are updated,\n\n# and descend in scripts/kconfig to make the *config target.\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.\n\n# KBUILD_DEFCONFIG may point out an alternative default configuration.\n\n# Used for 'make defconfig'\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ===========================================================================\n\n# Build targets only - this includes vmSanidx, arch specific targets, clean\n\n# targets and others. In general, all targets except *config targets.\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Additional helpers built in scripts/\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# ===========================================================================\n\n# We need .config file. And we must handle it properly. See comments below.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# read in config\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Read in dependencies to all Kconfig* files, make sure to\n\n# run oldconfig if changes are detected.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# To avoid any implicit rule\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# It is important to know how Makefiles are remade and how 'include'\n\n# directive works. Here are some words form GNU Make Manual:\n\n#\n\n# If a Makefile can be remade from other files, you probably want make to\n\n# get an up-to-date version of the Makefile to read in. After reading in all\n\n# Makefiles, make will consider each as a goal target and attempt to update\n\n# it. If a Makefile has a rule which says how to update it(found either in\n\n# that very Makefile or in other one) or if an implicit rule applies to it,\n\n# it will be updated if necessary. After all Makefiles have been checked, if\n\n# any have actually been changed, make starts with a clean slate and reads all\n\n# the Makefiles again.\n\n#\n\n# If you know that one or more of your Makefiles can NOT be remade and you want\n\n# to keep make from performing an implicit rule search on them, perhaps for\n\n# effiency reasons, you can use any normal method of preventing implicit rule\n\n# look-up to do so. For example, you can write an explicit rule wuth the\n\n# Makefile as the target, and an empty recipe.\n\n#\n\n# '-q' and '-n' do not prevent updating of Makefiles, because an out-of-date\n\n# Makefile would result in the wrong output for other targets.\n\n###\n\n# Here, we have an explicit rule for included file include/config/auto.conf.\n\n# So before GNUmake read \"auto.conf\", it will checkout the dependencies of it.\n\n#\n\n# That is why in a clean tree, this target always got built even you invoke with\n\n# a non-exsit target, for example, \"make ABCDEF\".\n\n#\n\n# If .config is newer than include/config/auto.conf, someone tinkered with it\n\n# and forgot to run \"make oldconfig\".\n\n# If auto.conf.cmd is missing then we are probably in a cleaned tree so we\n\n# execute the config step to be sure to catch updates.\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Dummy target needed, since it is used as prerequisite.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# !$(dot-config)\n",
        "Line" : 504,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# The all: target is the default when no target is given on the command line.\n\n# This allow a user to issue only 'make' to build Sandix kernel.\n\n# Defaults to vmSandix, but the arch makefile usually adds further targets\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# bzImage = \n\n#\tboot-y\t\t-\tArchitecture setup image (realmode in x86)\n\n# \tvmSandix\t-\tKernel system image\n\n#\n\n# vmSandix = \n\n#\thead-y\t\t-\tSystem image header (Normally, head.S)\n\n#\tinit-y\t\t-\tKernel init part\n\n#\tcore-y\t\t-\tKernel core part\n\n#\tlibs-y\t\t-\tKernel libraries\n\n#\tnet-y\t\t-\tKernel network subsystem\n\n#\tdrivers-y\t-\tKernel drivers\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# The arch Makefile can set ARCH_{CPP,A,C}FLAGS to override the default\n\n# values of the respective KBUILD_* variables.\n\n# The arch Makefile must set $(boot-y) $(head-y), and extend the others.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# include more CC flags\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# include extra warning CC flags\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# The final assignments\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Default kernel image to build when no specific target is given.\n\n# Usually arch Makefile would define its KBUILD_IMAGE. Also, it\n\n# may be overruled on the command line or set in the environment.\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# INSTALL_PATH specifies where to place the updated kernel and system map\n\n# images. Default is /boot, but you can set it to other values\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Externally visible to link-vmSandix.sh\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Final link of vmSandix\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# The actual objects are built when descending,\n\n# make sure no implicit rules kick in\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Handle descending into subdirectories listed in $(vmSandix-dirs)\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Things we need to do before we recursively start building the kernel.\n\n# Some are alreay listed in targets scripts or else, we list them here\n\n# again to emphasize their importance in preparation.\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Gnenerate some files before building vmSandix.\n\n# UTS stands for: Unix Time Sharing.\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Clean\n\n# ===========================================================================\n\n# make distclean  - Clean all editor-tags and generated and compiled files\n\n# make mrproper   - Clean all generated and compiled files\n\n# make clean      - Clean all compiled files\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Mr.Proper\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Add prefix to avoid overriding the previous targets.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Clean files by descending into sub-directories\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Clean files generated by linking vmSandix\n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# ===========================================================================\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Generate tags for editors\n\n# ===========================================================================\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Single target\n\n# ===========================================================================\n\n# Single target - Most useful when you want to see, for example, the assembly\n\n# code of C code, or the preprocessing file .i of C code. It is NOT intended\n\n# for general users.\n\n#\n\n# Worth to mention, now it is your responsibility to clean generated files.\n\n# I do NOT write rules for cleaning such rubbish.\n\n#\n\n# Single targets are compatible with:\n\n# - build with mixed source and output\n\n# - build with separate output dir 'make O=...'\n\n#\n\n#  target-dir => where to store outputfile\n\n#  build-dir  => directory in kernel source tree to use\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# ! ifeq ($(config-targets),1)\n\n# ! ifeq ($(mixed-targets),1)\n\n# ! ifeq ($(skip-makefile),)\n",
        "Line" : 809,
        "CharPositionInLine" : 6
      },
      "72" : {
        "Text" : "# Declare the contents of the .PHONY variable as phony.  We keep that\n\n# information in a variable so we can use it in if_changed and friends.\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 73,
      "Errorlog" : "line 55:14 token recognition error at: '\\0'\nline 56:12 token recognition error at: '\\0'\n"
    },
    "arch/x86/Makefile" : {
      "ObjectId" : "5b9f77d1fd4c6611fe1a879b52952222b77757bb",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tCopyright (C) 2015-2016 Yizhou Shan <shan13@purdue.edu>\n\n#\n\n#\tThis program is free software; you can redistribute it and/or modify\n\n#\tit under the terms of the GNU General Public License as published by\n\n#\tthe Free Software Foundation; either version 2 of the License, or\n\n#\t(at your option) any later version.\n\n#\n\n#\tThis program is distributed in the hope that it will be useful,\n\n#\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n#\tGNU General Public License for more details.\n\n#\n\n#\tYou should have received a copy of the GNU General Public License along\n\n#\twith this program; if not, write to the Free Software Foundation, Inc.,\n\n#\t51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Flags\n\n# ===========================================================================\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# How to compile the 16-bit code.  Note we always compile for -march=i386;\n\n# that way we can complain to the user if the CPU is insufficient.\n\n#\n\n# The -m16 option is supported by GCC>=4.9. For older versions of GCC, include\n\n# an *assembly* header to make sure GCC does not play any games behind our back.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# BITS is used as extension for files which are available in a 32 bit\n\n# and a 64 bit version to simplify shared Makefiles.\n\n# e.g.: obj-y += foo_$(BITS).o\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Prevent GCC from generating any FP code by mistake.\n\n#\n\n# This must happen before we try the -mpreferred-stack-boundary, see:\n\n#\n\n#    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53383\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use registers to pass parameters\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Return struct, union in registers when possible\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Never want PIC in a 32-bit kernel, prevent breakage with GCC built\n\n# with nonstandard options\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Prevent GCC from keeping stack 16 bytes aligned\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Disable unit-at-a-time mode on pre-gcc-4.0 compilers, it makes gcc use\n\n# a lot more stack due to the lack of sharing of stacklots:\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# temporary until string.h fixed\n",
        "Line" : 91,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Align jump targets to 1 byte, not the default 16 bytes:\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Pack loops tightly as well:\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Don't autogenerate traditional x87 instructions\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Use -mpreferred-stack-boundary=3 if supported.\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Use -mskip-rax-setup if supported.\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# -funit-at-a-time shrinks the kernel .text considerably\n\n# unfortunately it makes reading oopses harder.\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# this works around some issues with generating unwind tables in older gccs\n\n# newer gccs do it by default\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Speed up the build\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Warn when a comparison between signed and unsigned values could produce\n\n# an incorrect result when the signed value is converted to unsigned\n\n#KBUILD_CFLAGS += Wno-sign-compare\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ?\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# General Targets\n\n# ===========================================================================\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Syscall table generation\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Kernel objects\n\n# ===========================================================================\n\n# Here we init or extend the kernel objects predefined in top Makefile.\n\n# All directories listed below are architecture-dependent. Especially the\n\n# $(boot-y) part, this is real-mode 16-bit code.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# List entry after kernel, see kernel/Makefile comment\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The all: target is the default when no target is given on the command line.\n\n# This allow a user to issue only 'make' to build Sandix kernel.\n\n# In x86 building, the final kernel image is bzImage\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This is the phony one (the pathname...). The real one is in boot\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Install bzImage and System.map\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "arch/x86/boot/Makefile" : {
      "ObjectId" : "bb89b5cc3c9ad6fa0c09cb737b60d18dffac9a2e",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tCopyright (C) 2015-2016 Yizhou Shan <shan13@purdue.edu>\n\n#\n\n#\tThis program is free software; you can redistribute it and/or modify\n\n#\tit under the terms of the GNU General Public License as published by\n\n#\tthe Free Software Foundation; either version 2 of the License, or\n\n#\t(at your option) any later version.\n\n#\n\n#\tThis program is distributed in the hope that it will be useful,\n\n#\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n#\tGNU General Public License for more details.\n\n#\n\n#\tYou should have received a copy of the GNU General Public License along\n\n#\twith this program; if not, write to the Free Software Foundation, Inc.,\n\n#\t51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Since Makefile.build has no rules for these targets, so we have to add\n\n# them manually. Then they can get their saved-old-command-files included,\n\n# then they could be used by $(if_changed_cmd) freely. Also, Makefile.clean\n\n# would know how to clean them.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 8086 machine code\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The link order of the video-*.o modules can matter.  In particular,\n\n# video-vga.o *must* be listed first, followed by video-vesa.o.\n\n# Hardware-specific drivers should follow in the order they should be\n\n# probed, and video-bios.o should typically be last.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# It is safe to override KBUILD_CFLAGS, KBUILD_AFLAGS,\n\n# since this is the last step of kbuild.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Building bzImage need four things:\n\n#\tbootloader.bin\t-\tThe simple bootloader\n\n#\tsetup.bin\t-\tThe real-mode kernel image\n\n#\tvmSandix.bin\t-\tThe bare kernel itself\n\n#\ttools/build\t-\tTool to concatenate\n\n#\tvoffset.h\t-\tKernel virtual address offset\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The target invoked by arch/x86/Makefile\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7,
      "Errorlog" : "line 68:81 token recognition error at: '\\2'\nline 68:86 token recognition error at: '\\1'\n"
    },
    "arch/x86/entry/Makefile" : {
      "ObjectId" : "7a1ef275b87f6d6936fd2e402f020ca70dec686b",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\tx86 kernel low-level entry points\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for debug\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "arch/x86/kernel/Makefile" : {
      "ObjectId" : "81662e4b25fae8e207da89be7421a0e02fa0f9e9",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# x86 kernel code\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# head file\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# linker script\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for debug\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#]*\\([-0-9]*\\) \\(.*\\):#define \\1 \\2 /* \\3 */:; \\\n\ts:^->\\([^ ]*\\) [\\$$#]*\\([^ ]*\\) \\(.*\\):#define \\1 \\2 /* \\3 */:; \\\n\ts:->::; p;}\"\n",
        "Line" : 28,
        "CharPositionInLine" : 20
      },
      "5" : {
        "Text" : "# It looks ugly to generate this file here, it should be generated\n\n# before building the kernel. If doing that, we should compile\n\n# asm-offset.c first. As you know, make can not handle this, it\n\n# has a circular dependency.\n\n#\n\n# In this order, files that will use <asm/asm-offset.h> must be\n\n# compiled after here. Currently, only kernel/entry/entry_32.S\n\n# uses this header file. So it would be ok here...\n\n#\n\n# After all, coping the header file into the generated directory.\n\n# Since all generated header files are sleeping there.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 27:1 token recognition error at: '\"/^->/{s:->#\\(.*\\):/* \\1'\n"
    },
    "arch/x86/kernel/apic/Makefile" : {
      "ObjectId" : "230d96e999ad7aca8c99c42a2e573b131739f83d",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for APIC subsystem\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arch/x86/lib/Makefile" : {
      "ObjectId" : "0113db0e8c811f43314225eada5bd6adf83de8f0",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for x86 Library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arch/x86/mm/Makefile" : {
      "ObjectId" : "8cd32241eccdf80800383e644a7d2cf9f4b1fa32",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "arch/x86/pci/Makefile" : {
      "ObjectId" : "f460b6c06e8d4ecb5361b79696c9598160e8dafe",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "block/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "drivers/Makefile" : {
      "ObjectId" : "16c812e2fb1a499601352b8ffa76f159d0731b23",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for Sandix Drivers\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#obj-y += chip/\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#obj-y += input/\n\n#obj-y += pci/\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "drivers/block/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "drivers/char/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "drivers/console/Makefile" : {
      "ObjectId" : "1725a058280078a4bb2aee3c5d415d0387fe3719",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for low-level hardware console drivers\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "drivers/input/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "drivers/input/keyboard/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "drivers/pci/Makefile" : {
      "ObjectId" : "c63e7866f56a656bde1d3190b760648fffba359c",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for PCI Bus System\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#obj-y += pci.c\n\n#obj-y += pci-driver.c\n\n#Obj-y += hotplug/\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "drivers/tty/Makefile" : {
      "ObjectId" : "9832eae998a1fde8a27a093d92b9b8f2e95bf05c",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for tty layer\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# virtual terminal\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "drivers/tty/vt/Makefile" : {
      "ObjectId" : "0b30c0deadc80b41f7b87e7a604e1fbf6cea0f29",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "fs/Makefile" : {
      "ObjectId" : "884cf31c137a5b94d0812f10221558da5a752ed2",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for Sandix filesystems\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "fs/ext2/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "fs/ext3/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "fs/proc/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "init/Makefile" : {
      "ObjectId" : "fbf1fcb2c05b84f20bae87b6db25139bab5982c5",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Sandix kernel initialization part\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/Makefile" : {
      "ObjectId" : "ebd00ea942b3e980c81f66bafbf2e194b64de913",
      "LastModified" : "2016-10-05T03:31:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\tMakefile for Sandix Kernel Part\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Makefile" : {
      "ObjectId" : "98917d73c0e28abea6ecccf38d56e9b6dc6e22a7",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for Sandix Library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "mm/Makefile" : {
      "ObjectId" : "e78430c3a6778fbf6d50416206f66bef99483931",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "net/Makefile" : {
      "ObjectId" : "41dee837eab474b4a1f120de9c5be2fc500e368b",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/Makefile" : {
      "ObjectId" : "4faa04afff6b990ba4d07e33c2ffe8a41fd59328",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This file is called by top Makefile target: scripts\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scripts/basic/Makefile" : {
      "ObjectId" : "54281598f717c7d129f7a98afccc87b736183d7c",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###\n\n# Makefile.basic lists the most basic programs used during the build process.\n\n# The programs listed herein are what are needed to do the basic stuff,\n\n# such as fix file dependencies.\n\n# This initial step is needed to avoid files to be recompiled\n\n# when kernel configuration changes (which is what happens when\n\n# .config is included by main Makefile.\n\n# ---------------------------------------------------------------------------\n\n# fixdep: \t Used to generate dependency information during build process\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scripts/kconfig/Makefile" : {
      "ObjectId" : "ebced77deb9c4dc380ab5f58751950adc0ac3d7f",
      "LastModified" : "2016-10-02T16:05:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ===========================================================================\n\n# Kernel configuration targets\n\n# These targets are used from top-level makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need this, in case the user has it in its environment\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create new linux.pot file\n\n# Adjust charset to UTF-8 in .po file to accept UTF-8 in Kconfig files\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These targets map 1:1 to the commandline options of 'conf'\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# oldnoconfig is an alias of olddefconfig, because people already are dependent\n\n# on its behavior (sets new symbols to their default value but not 'n') with the\n\n# counter-intuitive name.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Help text used by make help\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# lxdialog stuff\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use recursively expanded variables so we do not call gcc unless\n\n# we really need to do so. (Do not call gcc as part of make mrproper)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ===========================================================================\n\n# Shared Makefile for the various kconfig executables:\n\n# conf:\t  Used for defconfig, oldconfig and related targets\n\n# nconf:  Used for the nconfig target.\n\n#         Utilizes ncurses\n\n# mconf:  Used for the menuconfig target\n\n#         Utilizes the lxdialog package\n\n# qconf:  Used for the xconfig target\n\n#         Based on Qt which needs to be installed to compile it\n\n# gconf:  Used for the gconfig target\n\n#         Based on GTK+ which needs to be installed to compile it\n\n# object files used by all kconfig flavours\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check that we have the required ncurses stuff installed for lxdialog (menuconfig)\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add environment specific flags\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# generated files seem to need this to find local include files\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Qt needs some extra effort...\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# GTK+ needs some extra effort, too...\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Extract gconf menu items for i18n support\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 31
  },
  "ElapsedTime" : 1432
}