{
  "Repository" : "2842058",
  "Revision" : "HEAD",
  "ObjectId" : "a6db43f36afd71f7e31fd4b071f73db0878b10e3",
  "CommitTime" : "2015-02-17T04:58:43Z",
  "Files" : {
    "Epigenetics/nodejs/node_modules/express/Makefile" : {
      "ObjectId" : "228f299a9e7da592ade16a4145a3f0390d76a2cd",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/commander/Makefile" : {
      "ObjectId" : "00746255373c316d8da2bfbffa94c5e74b627f8d",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/connect/node_modules/bytes/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/connect/node_modules/formidable/Makefile" : {
      "ObjectId" : "8945872410e45ef62f46942fc8da5ebdfad196bf",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Makefile" : {
      "ObjectId" : "01f71404f0dc595f7fcfc61cc8ff47af0e8812b0",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/connect/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/connect/node_modules/qs/Makefile" : {
      "ObjectId" : "0a21cf73f4e2f4838c22665312afd932bfc97cd4",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/cookie-signature/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/fresh/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/range-parser/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/express/node_modules/send/Makefile" : {
      "ObjectId" : "a9dcfd50dbdb227343ca0ca3193d78d135e4298d",
      "LastModified" : "2013-04-17T16:56:47Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/cliff/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/cliff/node_modules/winston/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/cliff/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/forever-monitor/node_modules/broadway/node_modules/winston/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/forever-monitor/node_modules/broadway/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/forever-monitor/node_modules/broadway/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/nconf/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/utile/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/form-data/node_modules/combined-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "97ba3af437a6496cdb11e03beebb118a562bfffd",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/hawk/node_modules/boom/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "97ba3af437a6496cdb11e03beebb118a562bfffd",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "48ee48e73faddf863f893f26c0d8852d4febc214",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "97ba3af437a6496cdb11e03beebb118a562bfffd",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/request/node_modules/qs/Makefile" : {
      "ObjectId" : "84a78ec18b73e9ff4bdf0008a4be8e364e20e033",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/forever/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/jade/node_modules/commander/Makefile" : {
      "ObjectId" : "00746255373c316d8da2bfbffa94c5e74b627f8d",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/jade/node_modules/monocle/node_modules/readdirp/examples/node_modules/event-stream/node_modules/duplexer/Makefile" : {
      "ObjectId" : "1f8985d0a58d9dbc39ea56736f3285bb79e65088",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongodb/Makefile" : {
      "ObjectId" : "59d2bfeb89e2fd0132d975d4241bc824856071ac",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongodb/node_modules/bson/Makefile" : {
      "ObjectId" : "77ce4e040856aa32d56b49559b4ea125caba9fe0",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongodb/node_modules/bson/build/Makefile" : {
      "ObjectId" : "bdf58d16714dc9276e5bf9729e17f62d7a91a5ab",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds, and deletes the output file when done\n\n# if any of the postbuilds failed.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "Epigenetics/nodejs/node_modules/mongodb/node_modules/bson/ext/Makefile" : {
      "ObjectId" : "435999ee96002d5c99c19d4e68daff2273706721",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/commander/Makefile" : {
      "ObjectId" : "00746255373c316d8da2bfbffa94c5e74b627f8d",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/connect/node_modules/bytes/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/connect/node_modules/formidable/Makefile" : {
      "ObjectId" : "8945872410e45ef62f46942fc8da5ebdfad196bf",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Makefile" : {
      "ObjectId" : "01f71404f0dc595f7fcfc61cc8ff47af0e8812b0",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/connect/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/connect/node_modules/qs/Makefile" : {
      "ObjectId" : "0a21cf73f4e2f4838c22665312afd932bfc97cd4",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/cookie-signature/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/fresh/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/range-parser/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/examples/express/connection-sharing/node_modules/express/node_modules/send/Makefile" : {
      "ObjectId" : "a9dcfd50dbdb227343ca0ca3193d78d135e4298d",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/hooks/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mongodb/Makefile" : {
      "ObjectId" : "59d2bfeb89e2fd0132d975d4241bc824856071ac",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mongodb/node_modules/bson/Makefile" : {
      "ObjectId" : "77ce4e040856aa32d56b49559b4ea125caba9fe0",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mongodb/node_modules/bson/build/Makefile" : {
      "ObjectId" : "035790269e309636c977341682af52b44254afc7",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds, and deletes the output file when done\n\n# if any of the postbuilds failed.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mongodb/node_modules/bson/ext/Makefile" : {
      "ObjectId" : "435999ee96002d5c99c19d4e68daff2273706721",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mongodb/node_modules/kerberos/build/Makefile" : {
      "ObjectId" : "3e5b9fb54e5346571bb4f1ce152845610f4a30d8",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds, and deletes the output file when done\n\n# if any of the postbuilds failed.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "b0bb0819b7703ad4840145ed3df36afe6ba4614a",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mpromise/Makefile" : {
      "ObjectId" : "717a7960e02fde064e8b03bdb0c119055ee52362",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/mpromise/node_modules/sliced/Makefile" : {
      "ObjectId" : "3dd8a2defc931a84ad2eae21d979b06c16918628",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/ms/Makefile" : {
      "ObjectId" : "dded504de64d4e888bbb763b26b8406acb011c3c",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/mongoose/node_modules/sliced/Makefile" : {
      "ObjectId" : "3dd8a2defc931a84ad2eae21d979b06c16918628",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Epigenetics/nodejs/node_modules/passport/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2013-07-04T16:21:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 65
  },
  "ElapsedTime" : 2124
}