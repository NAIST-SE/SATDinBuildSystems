{
  "Repository" : "24308435",
  "Revision" : "HEAD",
  "ObjectId" : "dcbe592eb4355952818c940812396b32e8bd9d21",
  "CommitTime" : "2019-04-17T15:50:04Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "376d3114edc46cfbb101861df0da3cb678b99505",
      "LastModified" : "2019-01-17T12:45:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (C) 2015 LiveCode Ltd.\n\n#\n\n# This file is part of LiveCode.\n\n#\n\n# LiveCode is free software; you can redistribute it and/or modify it under\n\n# the terms of the GNU General Public License v3 as published by the Free\n\n# Software Foundation.\n\n#\n\n# LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY\n\n# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n\n# for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with LiveCode.  If not see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Usually, you'll just want to type \"make all\".\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tools that Make calls\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Some magic to control which versions of iOS we try to build.  N.b. you may\n\n# also need to modify the buildbot configuration\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Choose the correct build type\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Where to run the build command depends on community vs commercial\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Prettifying output for CI builds\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# [[ MDW-2017-05-09 ]] feature_clean_target\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################################################################\n\n# Linux rules\n\n################################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################\n\n# Android rules\n\n################################################################\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################\n\n# Mac rules\n\n################################################################\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################\n\n# iOS rules\n\n################################################################\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Dummy targets to prevent our build system from building old iOS simulators\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Provide some synonyms for \"latest iOS SDK\"\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################\n\n# Windows rules\n\n################################################################\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# windows builds occur under Wine\n",
        "Line" : 242,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# windows builds occur under Wine\n",
        "Line" : 246,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Dummy rules for Windows x86-64 builds\n\n# TODO Replace with real rules\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "################################################################\n\n# Emscripten rules\n\n################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "benchmarks/Makefile" : {
      "ObjectId" : "0a1767ce3692f884241205ae82e83cd951a4f9c5",
      "LastModified" : "2016-07-08T11:47:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "########## LiveCode Script benchmark parameters\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################\n\n# Top-level targets\n\n################################################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################\n\n# Engine benchmarks\n\n################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "extensions/Makefile" : {
      "ObjectId" : "b354ff00c35011543f9b97795835fdf90e29b9e4",
      "LastModified" : "2017-04-12T13:16:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This Makefile takes advantage of the fact that the engine's\n\n# \"tests/Makefile\" already does pretty much everything required for\n\n# running extension tests.  Rather than duplicating it, it can\n\n# just be included with a few tweaks to its configuration.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only do livecodescript-based checks\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Things have now been setup enough that the engine's test Makefile\n\n# can perform the tests without any further configuration.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "extensions/libraries/timezone/tz/Makefile" : {
      "ObjectId" : "47acbbd148797e962f9853a23558cf98071cf1f7",
      "LastModified" : "2018-03-07T22:36:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This file is in the public domain, so clarified as of\n\n# 2009-05-17 by Arthur David Olson.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package name for the code distribution.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version number for the distribution, overridden in the 'tarballs' rule below.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Email address for bug reports.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Choose source data features.  To get new features right away, use:\n\n#\tDATAFORM=\tvanguard\n\n# To wait a while before using new features, to give downstream users\n\n# time to upgrade zic (the default), use:\n\n#\tDATAFORM=\tmain\n\n# To wait even longer for new features, use:\n\n#\tDATAFORM=\trearguard\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Change the line below for your time zone (after finding the zone you want in\n\n# the time zone files, or adding it to a time zone file).\n\n# Alternately, if you discover you've got the wrong time zone, you can just\n\n#\tzic -l rightzone\n\n# to correct things.\n\n# Use the command\n\n#\tmake zonenames\n\n# to get a list of the values you can use for LOCALTIME.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If you want something other than Eastern United States time as a template\n\n# for handling POSIX-style time zone environment variables,\n\n# change the line below (after finding the zone you want in the\n\n# time zone files, or adding it to a time zone file).\n\n# When a POSIX-style environment variable is handled, the rules in the\n\n# template file are used to determine \"spring forward\" and \"fall back\" days and\n\n# times; the environment variable itself specifies UT offsets of standard and\n\n# daylight saving time.\n\n# Alternately, if you discover you've got the wrong time zone, you can just\n\n#\tzic -p rightzone\n\n# to correct things.\n\n# Use the command\n\n#\tmake zonenames\n\n# to get a list of the values you can use for POSIXRULES.\n\n# If you want POSIX compatibility, use \"America/New_York\".\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Also see TZDEFRULESTRING below, which takes effect only\n\n# if the time zone files cannot be accessed.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Installation locations.\n\n#\n\n# The defaults are suitable for Debian, except that if REDO is\n\n# posix_right or right_posix then files that Debian puts under\n\n# /usr/share/zoneinfo/posix and /usr/share/zoneinfo/right are instead\n\n# put under /usr/share/zoneinfo-posix and /usr/share/zoneinfo-leaps,\n\n# respectively.  Problems with the Debian approach are discussed in\n\n# the commentary for the right_posix rule (below).\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Destination directory, which can be used for staging.\n\n# 'make DESTDIR=/stage install' installs under /stage (e.g., to\n\n# /stage/etc/localtime instead of to /etc/localtime).  Files under\n\n# /stage are not intended to work as-is, but can be copied by hand to\n\n# the root directory later.  If DESTDIR is empty, 'make install' does\n\n# not stage, but installs directly into production locations.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Everything is installed into subdirectories of TOPDIR, and used there.\n\n# TOPDIR should be empty (meaning the root directory),\n\n# or a directory name that does not end in \"/\".\n\n# TOPDIR should be empty or an absolute name unless you're just testing.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The default local time zone is taken from the file TZDEFAULT.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The subdirectory containing installed program and data files, and\n\n# likewise for installed files that can be shared among architectures.\n\n# These should be relative file names.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# \"Compiled\" time zone information is placed in the \"TZDIR\" directory\n\n# (and subdirectories).\n\n# TZDIR_BASENAME should not contain \"/\" and should not be \".\", \"..\" or empty.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The \"tzselect\" and (if you do \"make INSTALL\") \"date\" commands go in:\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The \"zdump\" command goes in:\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The \"zic\" command goes in:\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Manual pages go in subdirectories of. . .\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Library functions are put in an archive in LIBDIR.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Types to try, as an alternative to time_t.  int64_t should be first.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If you want only POSIX time, with time values interpreted as\n\n# seconds since the epoch (not counting leap seconds), use\n\n#\tREDO=\t\tposix_only\n\n# below.  If you want only \"right\" time, with values interpreted\n\n# as seconds since the epoch (counting leap seconds), use\n\n#\tREDO=\t\tright_only\n\n# below.  If you want both sets of data available, with leap seconds not\n\n# counted normally, use\n\n#\tREDO=\t\tposix_right\n\n# below.  If you want both sets of data available, with leap seconds counted\n\n# normally, use\n\n#\tREDO=\t\tright_posix\n\n# below.  POSIX mandates that leap seconds not be counted; for compatibility\n\n# with it, use \"posix_only\" or \"posix_right\".  Use POSIX time on systems with\n\n# leap smearing; this can work better than unsmeared \"right\" time with\n\n# applications that are not leap second aware, and is closer to unsmeared\n\n# \"right\" time than unsmeared POSIX time is (e.g., 0.5 vs 1.0 s max error).\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# To install data in text form that has all the information of the binary data,\n\n# (optionally incorporating leap second information), use\n\n#\tTZDATA_TEXT=\ttzdata.zi leapseconds\n\n# To install text data without leap second information (e.g., because\n\n# REDO='posix_only'), use\n\n#\tTZDATA_TEXT=\ttzdata.zi\n\n# To avoid installing text data, use\n\n#\tTZDATA_TEXT=\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# For backward-compatibility links for old zone names, use\n\n#\tBACKWARD=\tbackward\n\n# If you also want the link US/Pacific-New, even though it is confusing\n\n# and is planned to be removed from the database eventually, use\n\n#\tBACKWARD=\tbackward pacificnew\n\n# To omit these links, use\n\n#\tBACKWARD=\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If you want out-of-scope and often-wrong data from the file 'backzone', use\n\n#\tPACKRATDATA=\tbackzone\n\n# To omit this data, use\n\n#\tPACKRATDATA=\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The name of a locale using the UTF-8 encoding, used during self-tests.\n\n# The tests are skipped if the name does not appear to work on this system.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Since \".\" may not be in PATH...\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Non-default libraries needed to link.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Add the following to the end of the \"CFLAGS=\" line as needed to override\n\n# defaults specified in the source code.  \"-DFOO\" is equivalent to \"-DFOO=1\".\n\n#  -DBIG_BANG=-9999999LL if the Big Bang occurred at time -9999999 (see zic.c)\n\n#  -DDEPRECATE_TWO_DIGIT_YEARS for optional runtime warnings about strftime\n\n#\tformats that generate only the last two digits of year numbers\n\n#  -DEPOCH_LOCAL if the 'time' function returns local time not UT\n\n#  -DEPOCH_OFFSET=N if the 'time' function returns a value N greater\n\n#\tthan what POSIX specifies, assuming local time is UT.\n\n#\tFor example, N is 252460800 on AmigaOS.\n\n#  -DHAVE_DECL_ASCTIME_R=0 if <time.h> does not declare asctime_r\n\n#  -DHAVE_DECL_ENVIRON if <unistd.h> declares 'environ'\n\n#  -DHAVE_DIRECT_H if mkdir needs <direct.h> (MS-Windows)\n\n#  -DHAVE_GENERIC=0 if _Generic does not work\n\n#  -DHAVE_GETTEXT if 'gettext' works (e.g., GNU/Linux, FreeBSD, Solaris)\n\n#  -DHAVE_INCOMPATIBLE_CTIME_R if your system's time.h declares\n\n#\tctime_r and asctime_r incompatibly with the POSIX standard\n\n#\t(Solaris when _POSIX_PTHREAD_SEMANTICS is not defined).\n\n#  -DHAVE_INTTYPES_H if you have a non-C99 compiler with <inttypes.h>\n\n#  -DHAVE_LINK=0 if your system lacks a link function\n\n#  -DHAVE_LOCALTIME_R=0 if your system lacks a localtime_r function\n\n#  -DHAVE_LOCALTIME_RZ=0 if you do not want zdump to use localtime_rz\n\n#\tlocaltime_rz can make zdump significantly faster, but is nonstandard.\n\n#  -DHAVE_POSIX_DECLS=0 if your system's include files do not declare\n\n#\tfunctions like 'link' or variables like 'tzname' required by POSIX\n\n#  -DHAVE_SNPRINTF=0 if your system lacks the snprintf function\n\n#  -DHAVE_STDBOOL_H if you have a non-C99 compiler with <stdbool.h>\n\n#  -DHAVE_STDINT_H if you have a non-C99 compiler with <stdint.h>\n\n#  -DHAVE_STRFTIME_L if <time.h> declares locale_t and strftime_l\n\n#  -DHAVE_STRDUP=0 if your system lacks the strdup function\n\n#  -DHAVE_STRTOLL=0 if your system lacks the strtoll function\n\n#  -DHAVE_SYMLINK=0 if your system lacks the symlink function\n\n#  -DHAVE_SYS_STAT_H=0 if your compiler lacks a <sys/stat.h>\n\n#  -DHAVE_SYS_WAIT_H=0 if your compiler lacks a <sys/wait.h>\n\n#  -DHAVE_TZSET=0 if your system lacks a tzset function\n\n#  -DHAVE_UNISTD_H=0 if your compiler lacks a <unistd.h>\n\n#  -Dlocale_t=XXX if your system uses XXX instead of locale_t\n\n#  -DRESERVE_STD_EXT_IDS if your platform reserves standard identifiers\n\n#\twith external linkage, e.g., applications cannot define 'localtime'.\n\n#  -Dssize_t=long on hosts like MS-Windows that lack ssize_t\n\n#  -DSUPPRESS_TZDIR to not prepend TZDIR to file names; this has\n\n#\tsecurity implemencations and is not recommended for general use\n\n#  -DTHREAD_SAFE to make localtime.c thread-safe, as POSIX requires;\n\n#\tnot needed by the main-program tz code, which is single-threaded.\n\n#\tAppend other compiler flags as needed, e.g., -pthread on GNU/Linux.\n\n#  -Dtime_tz=\\\"T\\\" to use T as the time_t type, rather than the system time_t\n\n#\tThis is intended for internal use only; it mangles external names.\n\n#  -DTZ_DOMAIN=\\\"foo\\\" to use \"foo\" for gettext domain name; default is \"tz\"\n\n#  -DTZ_DOMAINDIR=\\\"/path\\\" to use \"/path\" for gettext directory;\n\n#\tthe default is system-supplied, typically \"/usr/lib/locale\"\n\n#  -DTZDEFRULESTRING=\\\",date/time,date/time\\\" to default to the specified\n\n#\tDST transitions if the time zone files cannot be accessed\n\n#  -DUNINIT_TRAP if reading uninitialized storage can cause problems\n\n#\tother than simply getting garbage data\n\n#  -DUSE_LTZ=0 to build zdump with the system time zone library\n\n#\tAlso set TZDOBJS=zdump.o and CHECK_TIME_T_ALTERNATIVES= below.\n\n#  -DZIC_MAX_ABBR_LEN_WO_WARN=3\n\n#\t(or some other number) to set the maximum time zone abbreviation length\n\n#\tthat zic will accept without a warning (the default is 6)\n\n#  $(GCC_DEBUG_FLAGS) if you are using recent GCC and want lots of checking\n\n# Select instrumentation via \"make GCC_INSTRUMENT='whatever'\".\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\n\n# If your system has a \"GMT offset\" field in its \"struct tm\"s\n\n# (or if you decide to add such a field in your system's \"time.h\" file),\n\n# add the name to a define such as\n\n#\t-DTM_GMTOFF=tm_gmtoff\n\n# to the end of the \"CFLAGS=\" line.  If not defined, the code attempts to\n\n# guess TM_GMTOFF from other macros; define NO_TM_GMTOFF to suppress this.\n\n# Similarly, if your system has a \"zone abbreviation\" field, define\n\n#\t-DTM_ZONE=tm_zone\n\n# and define NO_TM_ZONE to suppress any guessing.  These two fields are not\n\n# required by POSIX, but are widely available on GNU/Linux and BSD systems.\n\n#\n\n# The next batch of options control support for external variables\n\n# exported by tzcode.  In practice these variables are less useful\n\n# than TM_GMTOFF and TM_ZONE.  However, most of them are standardized.\n\n# #\n\n# # To omit or support the external variable \"tzname\", add one of:\n\n# #\t-DHAVE_TZNAME=0\n\n# #\t-DHAVE_TZNAME=1\n\n# # to the \"CFLAGS=\" line.  \"tzname\" is required by POSIX 1988 and later.\n\n# # If not defined, the code attempts to guess HAVE_TZNAME from other macros.\n\n# # Warning: unless time_tz is also defined, HAVE_TZNAME=1 can cause\n\n# # crashes when combined with some platforms' standard libraries,\n\n# # presumably due to memory allocation issues.\n\n# #\n\n# # To omit or support the external variables \"timezone\" and \"daylight\", add\n\n# #\t-DUSG_COMPAT=0\n\n# #\t-DUSG_COMPAT=1\n\n# # to the \"CFLAGS=\" line; \"timezone\" and \"daylight\" are inspired by\n\n# # Unix Systems Group code and are required by POSIX 2008 (with XSI) and later.\n\n# # If not defined, the code attempts to guess USG_COMPAT from other macros.\n\n# #\n\n# # To support the external variable \"altzone\", add\n\n# #\t-DALTZONE\n\n# # to the end of the \"CFLAGS=\" line; although \"altzone\" appeared in\n\n# # System V Release 3.1 it has not been standardized.\n\n#\n\n# If you want functions that were inspired by early versions of X3J11's work,\n\n# add\n\n#\t-DSTD_INSPIRED\n\n# to the end of the \"CFLAGS=\" line.  This arranges for the functions\n\n# \"tzsetwall\", \"offtime\", \"timelocal\", \"timegm\", \"timeoff\",\n\n# \"posix2time\", and \"time2posix\" to be added to the time conversion library.\n\n# \"tzsetwall\" is like \"tzset\" except that it arranges for local wall clock\n\n# time (rather than the time specified in the TZ environment variable)\n\n# to be used.\n\n# \"offtime\" is like \"gmtime\" except that it accepts a second (long) argument\n\n# that gives an offset to add to the time_t when converting it.\n\n# \"timelocal\" is equivalent to \"mktime\".\n\n# \"timegm\" is like \"timelocal\" except that it turns a struct tm into\n\n# a time_t using UT (rather than local time as \"timelocal\" does).\n\n# \"timeoff\" is like \"timegm\" except that it accepts a second (long) argument\n\n# that gives an offset to use when converting to a time_t.\n\n# \"posix2time\" and \"time2posix\" are described in an included manual page.\n\n# X3J11's work does not describe any of these functions.\n\n# Sun has provided \"tzsetwall\", \"timelocal\", and \"timegm\" in SunOS 4.0.\n\n# These functions may well disappear in future releases of the time\n\n# conversion package.\n\n#\n\n# If you don't want functions that were inspired by NetBSD, add\n\n#\t-DNETBSD_INSPIRED=0\n\n# to the end of the \"CFLAGS=\" line.  Otherwise, the functions\n\n# \"localtime_rz\", \"mktime_z\", \"tzalloc\", and \"tzfree\" are added to the\n\n# time library, and if STD_INSPIRED is also defined the functions\n\n# \"posix2time_z\" and \"time2posix_z\" are added as well.\n\n# The functions ending in \"_z\" (or \"_rz\") are like their unsuffixed\n\n# (or suffixed-by-\"_r\") counterparts, except with an extra first\n\n# argument of opaque type timezone_t that specifies the time zone.\n\n# \"tzalloc\" allocates a timezone_t value, and \"tzfree\" frees it.\n\n#\n\n# If you want to allocate state structures in localtime, add\n\n#\t-DALL_STATE\n\n# to the end of the \"CFLAGS=\" line.  Storage is obtained by calling malloc.\n\n#\n\n# NIST-PCTS:151-2, Version 1.4, (1993-12-03) is a test suite put\n\n# out by the National Institute of Standards and Technology\n\n# which claims to test C and Posix conformance.  If you want to pass PCTS, add\n\n#\t-DPCTS\n\n# to the end of the \"CFLAGS=\" line.\n\n#\n\n# If you want strict compliance with XPG4 as of 1994-04-09, add\n\n#\t-DXPG4_1994_04_09\n\n# to the end of the \"CFLAGS=\" line.  This causes \"strftime\" to always return\n\n# 53 as a week number (rather than 52 or 53) for January days before\n\n# January's first Monday when a \"%V\" format is used and January 1\n\n# falls on a Friday, Saturday, or Sunday.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Linker flags.  Default to $(LFLAGS) for backwards compatibility\n\n# to release 2012h and earlier.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# For leap seconds, this Makefile uses LEAPSECONDS='-L leapseconds' in\n\n# submake command lines.  The default is no leap seconds.\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# The zic command and its arguments.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# How to use zic to install tz binary files.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# The name of a Posix-compliant 'awk' on your system.\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# The full path name of a Posix-compliant shell, preferably one that supports\n\n# the Korn shell's 'select' statement as an extension.\n\n# These days, Bash is the most popular.\n\n# It should be OK to set this to /bin/sh, on platforms where /bin/sh\n\n# lacks 'select' or doesn't completely conform to Posix, but /bin/bash\n\n# is typically nicer if it works.\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# The path where SGML DTDs are kept and the catalog file(s) to use when\n\n# validating.  The default should work on both Debian and Red Hat.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# The name, arguments and environment of a program to validate your web pages.\n\n# See <http://openjade.sourceforge.net/doc/> for a validator, and\n\n# <https://validator.w3.org/source/> for a validation library.\n\n# Set VALIDATE=':' if you do not have such a program.\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# since Makefile macros cannot contain '#'.\n\n# TAB_CHAR is a single tab character, in single quotes.\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# OK_CHAR matches any character allowed in the distributed files.\n\n# This is the same as SAFE_CHAR, except that multibyte letters are\n\n# also allowed so that commentary can contain people's names and quote\n\n# non-English sources.  For non-letters the sources are limited to\n\n# ASCII renderings for the convenience of maintainers whose text editors\n\n# mishandle UTF-8 by default (e.g., XEmacs 21.4.22).\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# SAFE_LINE matches a line of safe characters.\n\n# SAFE_SHARP_LINE is similar, except any OK character can follow '#';\n\n# this is so that comments can contain non-ASCII characters.\n\n# OK_LINE matches a line of OK characters.\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Flags to give 'tar' when making a distribution.\n\n# Try to use flags appropriate for GNU tar.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Flags to give 'gzip' when making a distribution.\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "###############################################################################\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#MAKE=\t\tmake\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Consult these files when deciding whether to rebuild the 'version' file.\n\n# This list is not the same as the output of 'git ls-files', since\n\n# .gitignore is not distributed.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# And for the benefit of csh users on systems that assume the user\n\n# shell should be used to handle commands in Makefiles. . .\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# These files can be tailored by setting BACKWARD, PACKRATDATA, etc.\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Arguments to pass to submakes of install_data.\n\n# They can be overridden by later submake arguments.\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# In earlier versions of this makefile, the other two directories were\n\n# subdirectories of $(TZDIR).  However, this led to configuration errors.\n\n# For example, with posix_right under the earlier scheme,\n\n# TZ='right/Australia/Adelaide' got you localtime with leap seconds,\n\n# but gmtime without leap seconds, which led to problems with applications\n\n# like sendmail that subtract gmtime from localtime.\n\n# Therefore, the other two directories are now siblings of $(TZDIR).\n\n# You must replace all of $(TZDIR) to switch from not using leap seconds\n\n# to using them, or vice versa.\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# This obsolescent rule is present for backwards compatibility with\n\n# tz releases 2014g through 2015g.  It should go away eventually.\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# If $(TZS) does not already exist (e.g., old-format tarballs), create it.\n\n# If it exists but 'make check_tzs' fails, a maintainer should inspect the\n\n# failed output and fix the inconsistency, perhaps by running 'make force_tzs'.\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#' && \\\n\t\t! grep -Env $(SAFE_LINE) $(MANS) date.1 $(MANTXTS) \\\n\t\t\t$(MISC) $(SOURCES) $(WEB_PAGES) \\\n\t\t\tCONTRIBUTING LICENSE Makefile README \\\n\t\t\tversion tzdata.zi && \\\n\t\t! grep -Env $(SAFE_SHARP_LINE) $(TDATA_TO_CHECK) backzone \\\n\t\t\tleapseconds yearistype.sh zone.tab && \\\n\t\t! grep -Env $(OK_LINE) $(ENCHILADA); \\\n\t}\n",
        "Line" : 689,
        "CharPositionInLine" : 9
      },
      "52" : {
        "Text" : "# This checks only the HTML 4.01 strict page.\n\n# To check the the other pages, use <https://validator.w3.org/>.\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Check that zishrink.awk does not alter the data, and that ziguard.awk\n\n# preserves main-format data.\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Set the time stamps to those of the git repository, if available,\n\n# and if the files have not changed since then.\n\n# This uses GNU 'touch' syntax 'touch -d@N FILE',\n\n# where N is the number of seconds since 1970.\n\n# If git or GNU 'touch' is absent, don't bother to sync with git timestamps.\n\n# Also, set the timestamp of each prebuilt file like 'leapseconds'\n\n# to be the maximum of the files it depends on.\n",
        "Line" : 799,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# The zics below ensure that each data file can stand on its own.\n\n# We also do an all-files run to catch links to links.\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 56,
      "Errorlog" : "line 672:27 token recognition error at: '\\1'\nline 673:31 token recognition error at: '\\1'\nline 675:26 token recognition error at: '\\1'\nline 686:12 token recognition error at: '\\3'\nline 686:16 token recognition error at: '\\2'\nline 700:15 token recognition error at: '\\f'\nline 700:19 token recognition error at: '\\v'\n"
    },
    "tests/Makefile" : {
      "ObjectId" : "248a7159385501549897559aa9493b05f300020d",
      "LastModified" : "2018-07-24T21:33:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "########## LiveCode Script test parameters\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When running on headless Linux, run tests in -ui mode.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Used for emulation in cross-compiles. Usually empty.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########## LiveCode Builder test parameters\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########## LiveCode Builder Compiler test parameters\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########## LiveCode Script Parser test parameters\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########## lc-run test params\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########## lc-compile-ffi-java test parameters\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################\n\n# Top-level targets\n\n################################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################\n\n# LCB test compilation rules\n\n################################################################\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########## Build dependencies rules\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We need to rewrite some of the rules to make sure that lcm files\n\n# inherit the correct dependencies.  Specifically, we need to make\n\n# sure that .lcm files depend on all the same things that their\n\n# corresponding .lci files depend on.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########## Build rules\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################\n\n# Engine-based tests\n\n################################################################\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "################################################################\n\n# Server-based tests\n\n################################################################\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################\n\n# LCB compiler tests\n\n################################################################\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################\n\n# LCS parser tests\n\n################################################################\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################\n\n# Basic LCB runner test\n\n################################################################\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "################################################################\n\n# LCB-only tests\n\n################################################################\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19,
      "Errorlog" : "line 126:49 token recognition error at: '\\2'\nline 126:56 token recognition error at: '\\1'\nline 228:12 token recognition error at: '\"`echo $$lcbfile | sed -e 's:.*/\\([^/]*\\)/tests.*$$:\\1'\nline 249:12 token recognition error at: '\" $(_PRINT_RULE); \\\\n\\t$$cmd\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 7458
}