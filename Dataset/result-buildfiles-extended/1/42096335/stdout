{
  "Repository" : "42096335",
  "Revision" : "HEAD",
  "ObjectId" : "02aa26438d3969c9420bcb8e1a6594c424134913",
  "CommitTime" : "2019-02-22T19:11:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "483d454f43e59052557246c2fc3c8d8b5bef8577",
      "LastModified" : "2017-07-19T11:59:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################\n\n# CMake build script for the UNANIMITY library\n\n##############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build type\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build-time options\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main project paths\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project configuration\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fixed order, do not sort or shuffle\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build library\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build tests\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Swig\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/uny-ccache.cmake" : {
      "ObjectId" : "56e88f3e95289b3175f8549f14d99426426ad3c7",
      "LastModified" : "2016-07-13T07:05:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/uny-codecoverage.cmake" : {
      "ObjectId" : "3a51a32f599e9bab8c182692ad69321241028dc3",
      "LastModified" : "2017-02-17T22:58:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#    SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#    SETUP_TARGET_FOR_COVERAGE(\n\n#               my_coverage_target  # Name for custom target.\n\n#               test_driver         # Name of the test driver executable that runs the tests.\n\n#                                   # NOTE! This should always have a ZERO as exit code\n\n#                                   # otherwise the coverage generation will not complete.\n\n#               coverage            # Name of output directory.\n\n#               )\n\n#\n\n# 4. Build a Debug build:\n\n#    cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#    make\n\n#    make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#                       MUST return ZERO always, even on errors.\n\n#                       If not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 127,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Setup target\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 163,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 174,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA",
        "Line" : 193,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 22
    },
    "cmake/uny-compilerflags.cmake" : {
      "ObjectId" : "4f5c8999652b1b48f7686f426659fd36a9c4870a",
      "LastModified" : "2017-12-11T18:43:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# shared CXX flags for all source code & tests\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gperftools support\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# static linking\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTE: quash clang warnings w/ Boost\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cannot use this until pbbam complies\n\n# if (CMAKE_COMPILER_IS_GNUCXX)\n\n#     set(UNY_FLAGS \"${UNY_FLAGS} -Werror=suggest-override\")\n\n# endif()\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Coverage settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Extra testing that will lead to longer compilation times!\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# AddressSanitizer is a fast memory error detector\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Clang Thread Safety Analysis is a C++ language extension which warns about\n\n# potential race conditions in code.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# ThreadSanitizer is a tool that detects data races\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# MemorySanitizer is a detector of uninitialized reads.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# UndefinedBehaviorSanitizer is a fast undefined behavior detector.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# shared CXX flags for src & tests\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/uny-config.cmake" : {
      "ObjectId" : "3bcd4b0bab5ee7789669d76cfbf5cef13c73088d",
      "LastModified" : "2017-08-31T10:22:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Config generation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/uny-dependencies.cmake" : {
      "ObjectId" : "2c914b698040f9e165493a21803cdae00b436301",
      "LastModified" : "2017-07-19T11:59:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# External libraries\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get static libraries\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Boost\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# pbcopper\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# only require if NOT called from pip install\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Threads\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ZLIB\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# pbbam\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# cpp-optparse sources\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# seqan headers\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Complete-Striped-Smith-Waterman-Library\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "cmake/uny-findpythonpath.cmake" : {
      "ObjectId" : "9a5d7513356b750380cbf255f505d05c3c9a33ed",
      "LastModified" : "2017-02-17T22:58:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find the executable\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# find the include directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# check for success\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# set the output variables\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/uny-gitsha1.cmake" : {
      "ObjectId" : "275c0b391cb529f9d711b4fa292c5e4ae0529e90",
      "LastModified" : "2017-02-17T22:58:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/uny-releasewithassert.cmake" : {
      "ObjectId" : "a41dbd4910cb0ea7aae5125e4af4125e17f8668e",
      "LastModified" : "2017-02-17T22:58:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/ConsensusCore2-DesignAndImplementation/Makefile" : {
      "ObjectId" : "98d01634e3cd607f8cdee8c7a4d4143bf558eaad",
      "LastModified" : "2017-02-17T22:58:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "31bdd5d177c5290deb8ce068e62ad3f562315def",
      "LastModified" : "2018-02-13T23:55:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# functions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get all header files for IDE support\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# get sources for src/align\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# get sources for src/genomicconsensus\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# get sources for src/matrix\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get sources for src/models\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# get sources for src/poa\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# enable models\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# compile-time parameterized\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# run-time parameterized\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# includes\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add subset of sources that only contains cc2\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add main library including everything\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add executables\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "swig/CMakeLists.txt" : {
      "ObjectId" : "06b92cdd60fed8dc3d34c35f96661f441ce5321f",
      "LastModified" : "2017-12-11T18:43:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# output directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fPIC is required by a the majority of Linux systems,\n\n# and the original ConsensusCore used it by default.\n\n# We could use python -c \"print(sysconfig.get_config_var('CCSHARED'))\",\n\n# but it's honestly unnecessary and requires providing PYTHON_EXECUTABLE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ConsensusCore2_wrap.cxx\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# _ConsensusCore2.so\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "7273311b35f1c927acb250002240bd768f4ec17c",
      "LastModified" : "2017-12-11T18:43:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# pthread\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gmock/gtest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate paths for test data\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_test(test test_unanimity)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third-party/cpp-optparse/Makefile" : {
      "ObjectId" : "595e520491d8d2bfc3ca8654972bdd1cf641a671",
      "LastModified" : "2017-02-17T22:58:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -Weffc++\n",
        "Line" : 3,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : "# -Weffc++\n",
        "Line" : 6,
        "CharPositionInLine" : 221
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1511
}