{
  "Repository" : "8479254",
  "Revision" : "HEAD",
  "ObjectId" : "8fd0872ae3fa2afa8b8ab00b3ed6e54a6735d3c6",
  "CommitTime" : "2018-11-13T18:39:34Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "04ef9aa815dbd0b359b5bb5f310e39f6f9116e63",
      "LastModified" : "2016-10-18T07:10:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First for the generic no-config case (e.g. with mingw)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Second, for multi-config builds (e.g. msvc)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Makefile" : {
      "ObjectId" : "30ab348ddac0ef3f3419fd07e101637f7bb38113",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Building\n\n## Release or Debug\n\n#\n\n#  make BUILD_TYPE=Debug\n\n#  make BUILD_TYPE=Release\n\n#\n\n# To build either in debug mode, or in release mode\n\n#\n\n# Debugging\n\n## Run in debugger\n\n#\n\n#  make tests DEBUG=1 ARGS=--gtest_filter=World*\n\n#\n\n# to only build the tests targets, and run it via gdb afterwards.\n\n# It will automatically start the execution and forward the arguments\n\n# that are given via ARGS to the target\n\n#\n\n## Verbose output\n\n#\n\n#  make Q=\n\n#\n\n# This will print out information about the commands that are executed to build\n\n# and run the target(s)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# override this in your Makefile.local to use a different directory\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#BUILDDIR         ?= $(BUILDDIRPATH)build-$(shell echo $(BUILD_TYPE) | tr '[:upper:]' '[:lower:]')\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#VOGL_OPTIONS     ?= --vogl_force_debug_context --vogl_exit_after_x_frames 2000\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 83:65 token recognition error at: '\"^\\s'\nline 108:469 token recognition error at: '\" $(CURDIR) $(CMAKE_OPTIONS) && cmake --build .\\n\\n.PHONY: cmake\\ncmake:\\n\\t$(Q)mkdir -p $(BUILDDIR)\\n\\t$(Q)cd $(BUILDDIR); $(CMAKE_BINARY) -G$(CMAKE_GENERATOR) -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) $(CURDIR) $(CMAKE_OPTIONS)\\n\\ndefine COMPILE\\n$(if $(LINUX),\\\\n\\t$(Q)$(MAKE) $(MAKE_OPTIONS) $(JOB_FLAG) $(1) \\\\n$(else),\\\\n\\t$(if $(DARWIN),\\\\n\\t\\t$(Q)cd $(BUILDDIR); xcodebuild build -target $(1) install -project tests.xcodeproj -configuration $(BUILD_TYPE) CODE_SIGN_IDENTITY=\\\"\\\" CODE_SIGNING_REQUIRED=NO | tee xcodebuild.log | xcpretty && exit ${PIPESTATUS[0]} \\\\n\\t$(else),\\\\n\\t\\t$(Q)$(MAKE) $(MAKE_OPTIONS) $(JOB_FLAG) $(1) \\\\n\\t)\\n)\\nendef\\n\\n.PHONY: build\\nbuild: cmake\\n\\t$(call COMPILE, install)\\n\\nclean:\\n\\t$(Q)rm -rf $(BUILDDIR)\\n\\ndoc: cmake\\n\\t$(call COMPILE, $@)\\n\\nsimpleai-run simpleai-debugger simpleai-tests: cmake\\n\\t$(call COMPILE, $@)\\n\\t$(Q)$(VALGRIND_CMD) $(DEBUG_CMD) $(VOGL_CMD) ./$@ $(ARGS)\\n\\namalgamate:\\n\\t$(Q)third_party/amalgamate/amalgamate.py -c third_party/amalgamate/config.json -s . --verbose=yes\\n\u0000'\n"
    },
    "Makefile.am" : {
      "ObjectId" : "8224dca90c37c8a51b9d91d6711586c7afd0c7b1",
      "LastModified" : "2014-03-28T16:26:30Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGLM.cmake" : {
      "ObjectId" : "054dd03eddde94e87e5fd00322c874d329039de8",
      "LastModified" : "2016-06-08T19:44:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fink\n",
        "Line" : 11,
        "CharPositionInLine" : 5
      },
      "1" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Blastwave\n",
        "Line" : 13,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 3
    },
    "cmake/FindLua.cmake" : {
      "ObjectId" : "04a5b016faec7b22a7e46c4cec22eca7f6b64637",
      "LastModified" : "2016-10-18T07:10:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindLua\n\n# -------\n\n#\n\n#\n\n#\n\n# Locate Lua library This module defines\n\n#\n\n# ::\n\n#\n\n#   LUA_FOUND          - if false, do not try to link to Lua\n\n#   LUA_LIBRARIES      - both lua and lualib\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\n\n#   LUA_VERSION_STRING - the version of Lua found\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\n\n#\n\n#\n\n#\n\n# Note that the expected include convention is\n\n#\n\n# ::\n\n#\n\n#   #include \"lua.h\"\n\n#\n\n# and not\n\n#\n\n# ::\n\n#\n\n#   #include <lua/lua.h>\n\n#\n\n# This is because, the lua location is not standardized and may exist in\n\n# locations other than lua/\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# At least 5.[012] have different ways to express the version\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fink\n",
        "Line" : 138,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 139,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "# Blastwave\n",
        "Line" : 140,
        "CharPositionInLine" : 19
      },
      "9" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/toolchains/linux-toolchain.cmake" : {
      "ObjectId" : "74174331ec35d0e61e41953dcc1ef5072e401082",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# thread sanitizer doesn't work in combination with address and leak\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_REQUIRED_FLAGS \"-Werror -fsanitize=address\")\n\n#check_c_compiler_flag(\"-fsanitize=address\" HAVE_FLAG_SANITIZE_ADDRESS)\n\n#set(CMAKE_REQUIRED_FLAGS \"-Werror -fsanitize=leak\")\n\n#check_c_compiler_flag(\"-fsanitize=leak\" HAVE_FLAG_SANITIZE_LEAK)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-Wthread-safety - http://clang.llvm.org/docs/ThreadSafetyAnalysis.html\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tset(SANITIZE_FLAGS \"${SANITIZE_FLAGS} -fsanitize=thread\")\n\n#\tmessage(\"Support thread sanitizer\")\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# might also be in libc\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/toolchains/windows-toolchain.cmake" : {
      "ObjectId" : "24cc013028a04500d8c5db3023029fb29b56f47b",
      "LastModified" : "2018-11-13T18:39:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/Makefile.am" : {
      "ObjectId" : "d9818da62b8c57891c75051bcec96e84e7aae3f5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#dist_man_MANS = $(directory)/man_page_1.3 $(directory)/man_page_2.3\n\n#$(directory)/man_page_1.3: doxyfile.stamp\n\n#$(directory)/man_page_2.3: doxyfile.stamp\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile.am" : {
      "ObjectId" : "39a055d76c6d6a619c08afb4a5da3f1aa4e0421a",
      "LastModified" : "2016-06-08T19:44:25Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/ai/CMakeLists.txt" : {
      "ObjectId" : "cc5875a84c884c349f432d4edd88f498817fba07",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 23,
        "CharPositionInLine" : 45
      },
      "1" : {
        "Text" : "#install(FILES ${SIMPLEAI_SOURCE_DIR}/FindSimpleAI.cmake DESTINATION ${CMAKE_MODULE_PATH})\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#install(EXPORT simpleai DESTINATION lib FILE libsimpleai.cmake)\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO Write Config.h with version and Stuff\n\n#VERSION=0.1\n\n#src/ai/Config.h\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/ai/FindSimpleAI.cmake" : {
      "ObjectId" : "a8feea4bdaea8ecbe2b0610805e0253178c51512",
      "LastModified" : "2016-06-08T19:44:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find SimpleAI\n\n# Once done this will define\n\n#  SIMPLEAI_FOUND - System has SimpleAI\n\n#  SIMPLEAI_INCLUDE_DIRS - The SimpleAI include directories\n\n#  SIMPLEAI_LIBRARIES - The libraries needed to use SimpleAI\n\n#  SIMPLEAI_DEFINITIONS - Compiler switches required for using SimpleAI\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SIMPLEAI_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ai/Makefile.am" : {
      "ObjectId" : "a9e401cb9e197db92738b93aa55bd5c6889e8282",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/debug/CMakeLists.txt" : {
      "ObjectId" : "f7a3038544e0853d9c85541691256cd72be32529",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell CMake to run moc when necessary:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tell CMake to run rcc when necessary:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Widgets finds its own dependencies.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/debug/simpleai-debugger.pro" : {
      "ObjectId" : "5a84ab3cb12f2320263335794407ca2ee0cc4441",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Input\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TRANSLATIONS += data/simpleai_de_DE.ts\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#unix:ICON = src/images/icon.icns\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3,
      "Errorlog" : "line 82:42 token recognition error at: '\\l'\n"
    },
    "src/libs/CMakeLists.txt" : {
      "ObjectId" : "533cf690e3fc23942f5070357d46d52476637324",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/Makefile.am" : {
      "ObjectId" : "0833e4a405c77954c111dc5c8732610d55e53087",
      "LastModified" : "2016-06-08T19:44:25Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/libs/glm/CMakeLists.txt" : {
      "ObjectId" : "54e7bafb8ad3ea7845964598a40c0b688b2970e4",
      "LastModified" : "2016-06-08T19:44:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/glm/Makefile.am" : {
      "ObjectId" : "84e60d9f400d523cd302aed228de12477d4dfcda",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/libs/lua/CMakeLists.txt" : {
      "ObjectId" : "464d17d9f418938e9d3124f31ea82392b8a457ff",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\tadd_definitions(\"-DLUA_USE_WINDOWS\")\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/lua/Makefile.am" : {
      "ObjectId" : "b4650a3064ee66aa5321bcfa83dc3a6e18392795",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/libs/tinyxml2/CMakeLists.txt" : {
      "ObjectId" : "9306c8822ef4532b04f6fee2ca7c1ad6bd38fc68",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/tinyxml2/Makefile.am" : {
      "ObjectId" : "b5f353605e64efcec2f5cc792c7d980fe28f4e85",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/run/CMakeLists.txt" : {
      "ObjectId" : "9fb38fa4198da91af477947b28359ce26c56021b",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/run/Makefile.am" : {
      "ObjectId" : "b5fea54c4bc546dc85d8ae74de429764f18d64cb",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "b65a40173a3f99dc435be50309ac96d670361442",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/Makefile.am" : {
      "ObjectId" : "dbe8c99f59142d27870dbf94ddd1388b0bed8f20",
      "LastModified" : "2018-08-27T14:28:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "QMAKE" : 1,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 10
  },
  "ElapsedTime" : 928
}