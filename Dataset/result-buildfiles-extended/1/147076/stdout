{
  "Repository" : "147076",
  "Revision" : "HEAD",
  "ObjectId" : "bf228016cba3f6d252ee2cc38e1ed32607f37bf0",
  "CommitTime" : "2017-09-10T20:22:36Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "6d9a87ffa50d49812e2d3d1a3a7b9e03ab86f71d",
      "LastModified" : "2017-06-18T10:55:05Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Rapicorn                      - non-recursive Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == non-migrated subdirs ==\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# == make setup ==\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -I$(top_srcdir)\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# files that need @FILE_REVISION@ substitution\n",
        "Line" : 26,
        "CharPositionInLine" : 20
      },
      "5" : {
        "Text" : "# == project tools and paths ==\n\n# objdir:\t\t# Loading newly built Python modules requires accesss to libtool objdir\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# == yapps ==\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == res/ ==\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# == aidacc/ ==\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# == rcore/ ==\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# == ui/ ==\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# == cython/ ==\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# == tools/ ==\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# == docs/ ==\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# == tests/ ==\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# == examples/ ==\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# == revisions.lst ==\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# git is required to rebuild revisions.lst, so conditionalize cleaning\n",
        "Line" : 84,
        "CharPositionInLine" : 21
      },
      "18" : {
        "Text" : "# == .revd.md (INTERMEDIATE) ==\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# == man.1 (markdown) ==\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# == man.1.html (markdown) ==\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# == topbuildid.cc ==\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# \"update rule\" for topbuildid.cc\n",
        "Line" : 114,
        "CharPositionInLine" : 83
      },
      "23" : {
        "Text" : "# avoid explicit deps, 'topbuildid::=' ensures updates\n",
        "Line" : 115,
        "CharPositionInLine" : 15
      },
      "24" : {
        "Text" : "# preserve across 'mostlyclean' if unchanged to avoid expensive rebuilds\n",
        "Line" : 116,
        "CharPositionInLine" : 32
      },
      "25" : {
        "Text" : "# == make_check_targets ==\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# == stamp-autocheck-xmllint ==\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# == python-call-info ==\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# == pkg-config-call-info ==\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# %h%n%n%B%n'\t     > $@.tmpo\t# Generate *old* ChangeLog with \u001E-prefixed records\n",
        "Line" : 203,
        "CharPositionInLine" : 23
      },
      "30" : {
        "Text" : "# Tab-indent old ChangeLog author lines\n",
        "Line" : 204,
        "CharPositionInLine" : 52
      },
      "31" : {
        "Text" : "# %h%n%n%B%n'\t     > $@.tmpn\t# Generate new git log with \u001E-prefixed records\n",
        "Line" : 207,
        "CharPositionInLine" : 23
      },
      "32" : {
        "Text" : "# Tab-indent commit bodies, kill trailing whitespaces\n",
        "Line" : 210,
        "CharPositionInLine" : 51
      },
      "33" : {
        "Text" : "# Compress multiple newlines\n",
        "Line" : 211,
        "CharPositionInLine" : 56
      },
      "34" : {
        "Text" : "# == dist ==\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# == distcheck ==\n\n# Distcheck aims:\n\n# - use srcdir==builddir;\n\n# - build *outside* the original source tree to catch missing files or dirs, and without picking up parent directory contents;\n\n# - support parallel builds;\n\n# - verify that no CLEANFILES are shipped in dist tarball;\n\n# - check that $(DESTDIR) is properly honored in installation rules.\n\n# distcheck_uniqdir - directory for build tests, outside of srcdir, unique per user and checkout\n\n# distcheck_uniqdir = distcheck-$(shell printf %d-%04x\\\\n $$UID 0x`X=$$(pwd) && echo -n \"$$X\" | md5sum | sed 's/^\\(....\\).*/\\1/'`)\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# == cleanups ==\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37,
      "Errorlog" : "line 149:58 token recognition error at: '\" $(1)\\n.PHONY: $(1)--test\\ncheck-python-tests: $(1)--test\\nendef\\n$(foreach PYTEST, $(make_check_pytests), $(eval $(call make_check_pytests_TEMPLATE, $(PYTEST))))\\n.PHONY: check-python-tests\\ncheck-local: check-python-tests\\n\\n# == ./ dependencies ==\\nrapicorn.hh: ui/clientapi.hh\\n$(SOURCES): rapicorn.hh\\n\\n# == include/ install ==\\nrapicorn_includedir      = $(includedir)/rapicorn-@MAJOR@/\\nrapicorn_include_HEADERS = rapicorn-core.hh rapicorn-test.hh rapicorn.hh\\n\\n# == rapicorn.pc ==\\nrapicorn_pkgconfig_DATA  = rapicorn-@MAJOR@.pc\\nrapicorn-@MAJOR@.pc: rapicorn.pc.in $(top_builddir)/config.status\\n\\t$(AM_V_GEN)\\n\\t$(Q) cd $(top_builddir) && $(SHELL) ./config.status --file=$@:$<\\nMOSTLYCLEANFILES += rapicorn-@MAJOR@.pc\\n# install rapicorn.pc -> rapicorn-@MAJOR@.pc symlink\\nrapicorn-pc-install-hook:\\t# runs after install-data\\n\\t$(Q) cd $(DESTDIR)$(rapicorn_pkgconfigdir) && \\\\n\\t  $(call SYMLINK_LATEST, rapicorn-[0-9][0-9].pc, rapicorn.pc) && \\\\n\\t  test -r rapicorn.pc -a -L rapicorn.pc\\ninstall-data-hook: rapicorn-pc-install-hook\\nrapicorn-pc-uninstall-hook:\\t# runs after uninstall\\n\\t$(Q) cd $(DESTDIR)$(rapicorn_pkgconfigdir) && \\\\n\\t  $(call SYMLINK_LATEST, rapicorn-[0-9][0-9].pc, rapicorn.pc) && \\\\n\\t  test -r rapicorn.pc -o ! -e rapicorn.pc\\nuninstall-hook: rapicorn-pc-uninstall-hook\\n\\n# == doc/ install ==\\nprojectdocsdir   = $(docdir)/\\nprojectdocs_DATA = README NEWS COPYING.MPL\\n\\n# == README ==\\nREADME: README.md\\n\\t$(AM_V_GEN)\\n\\t$(Q) rm -f $@\\t\\t# work around read-only target\\n\\t$(Q) $(PANDOC) -S -f markdown_github+pandoc_title_block-hard_line_breaks -t plain $< -o $@\\n\\t$(Q) chmod a-w $@\\t# prevent accidental target file edits\\n.SECONDARY: README.md\\t\\t# pacify make(1) when shipping README without README.md\\nMAINTAINERCLEANFILES += README\\n\\n# == ChangeLog ==\\n# Since we switched in 2007 from keeping a ChangeLog file to using the git log exclusively, we need to generate it in 2 parts.\\noldchangelog_sedcmd = 's/^[ \\t]*(\\w'\nline 198:34 token recognition error at: '\\w'\nline 198:36 token recognition error at: '\\w'\nline 198:39 token recognition error at: '\\w'\nline 198:41 token recognition error at: '\\w'\nline 198:43 token recognition error at: '\\w'\nline 198:110 token recognition error at: '\\w'\nline 198:126 token recognition error at: '\\1'\nline 211:13 token recognition error at: '\\s'\nline 211:26 token recognition error at: '\\s'\nline 211:31 token recognition error at: '\\s'\n"
    }
  },
  "FileTypes" : {
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1145
}