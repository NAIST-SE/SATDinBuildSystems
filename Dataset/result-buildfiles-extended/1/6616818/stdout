{
  "Repository" : "6616818",
  "Revision" : "HEAD",
  "ObjectId" : "31b09e96f28fe637e3d55a18ac08361470559129",
  "CommitTime" : "2019-04-17T10:44:28Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "597eedcec0b5ad1ac1df3e6b8ff877d573dc5df8",
      "LastModified" : "2018-05-25T15:56:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add cmake directory to search for custom cmake functions.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# llvm/runtimes/ will set OPENMP_STANDALONE_BUILD.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMAKE_BUILD_TYPE was not set, default to Release.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Group common settings.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do not use OPENMP_LIBDIR_SUFFIX directly, use OPENMP_INSTALL_LIBDIR.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Group test settings.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If building in tree, we honor the same install suffix LLVM uses.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Check and set up common compiler flags.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set up testing infrastructure.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build host runtime library.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Currently libomptarget cannot be compiled on Windows or MacOS X.\n\n# Since the device plugins are only supported on Linux anyway,\n\n# there is no point in trying to compile libomptarget on other OSes.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Check that the library can acutally be built.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now that we have seen all testuites, create the check-openmp target.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/DetectTestCompiler/CMakeLists.txt" : {
      "ObjectId" : "1fd7cc715f00fd8a5d1e0c2f7b4bbd47fe689950",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Implement blockaddress in GlobalISel and remove this flag!\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/HandleOpenMPOptions.cmake" : {
      "ObjectId" : "97b616ef2f17d27cf42436f8cec81f2c73b64d63",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From HandleLLVMOptions.cmake\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/OpenMPTesting.cmake" : {
      "ObjectId" : "52e68aa150f55e9fdb8791fb73795b9889687dc2",
      "LastModified" : "2019-04-05T22:19:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Keep track if we have all dependencies.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function to find required dependencies for testing.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find executables.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure we can use the console pool for recent CMake and Ninja > 1.5.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set lit arguments.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Macro to extract information about compiler from file. (no own scope)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Function to set variables with information about the test compiler.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Determine major version.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Detect compiler that should be used for testing.\n\n# We cannot use ExternalProject_Add() because its configuration runs when this\n\n# project is built which is too late for detecting the compiler...\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set the information that we know.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Cannot use CLANG_VERSION because we are not guaranteed that this is already set.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Unfortunately the top-level cmake/config-ix.cmake file mangles CMake's\n\n# CMAKE_THREAD_LIBS_INIT variable from the FindThreads package, so work\n\n# around that, until it is fixed there.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# TODO: Implement blockaddress in GlobalISel and remove this flag!\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Function to set compiler features for use in lit.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Just use the lowercase of the compiler ID as fallback.\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Function to add a testsuite for an OpenMP runtime library.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# EXCLUDE_FROM_ALL excludes the test ${target} out of check-openmp.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Register the testsuites and depends for the check-openmp rule.\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# We already added the testsuites themselves, no need to do that again.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cmake/config-ix.cmake" : {
      "ObjectId" : "13eace9831b687aada8902ad1dfb8f95294b574e",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libomptarget/CMakeLists.txt" : {
      "ObjectId" : "a953662bf8b4d5b1ce6007410bac0089d822d2d2",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build offloading library and related plugins.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add cmake directory to search for custom cmake functions.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build all libraries into a common place so that tests can find them.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Message utilities.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get dependencies for the different components of the project.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a list of all the targets that are supported/tested right now.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Once the plugins for the different targets are validated, they will be added to\n\n# the list of supported targets in the current system.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check whether using debug mode. In debug mode, allow dumping progress\n\n# messages at runtime by default. Otherwise, it can be enabled\n\n# independently using the LIBOMPTARGET_ENABLE_DEBUG option.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build target agnostic offloading library.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Retrieve the path to the resulting library so that it can be used for \n\n# testing.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Definitions for testing, for reuse when testing libomptarget-nvptx.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Build offloading plugins and device RTLs if they are available.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add tests.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "libomptarget/cmake/Modules/LibomptargetGetDependencies.cmake" : {
      "ObjectId" : "dbf8c381de1398aa5caddaa33b780d680d908d4e",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to detect in the system several dependencies required by the different\n\n# components of libomptarget. These are the dependencies we have:\n\n#\n\n# libelf : required by some targets to handle the ELF files at runtime.\n\n# libffi : required to launch target kernels given function and argument \n\n#          pointers.\n\n# CUDA : required to control offloading to NVIDIA GPUs.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n\n# Looking for libelf...\n\n################################################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# Looking for libffi...\n\n################################################################################\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't bother look for the library if the header files were not found.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n\n# Looking for CUDA...\n\n################################################################################\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################\n\n# Looking for CUDA Driver API... (needed for CUDA plugin)\n\n################################################################################\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# There is a libcuda.so in lib64/stubs that can be used for linking.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Since CMake 3.3 FindCUDA.cmake defaults to using static libraries. In this\n\n# case CUDA_LIBRARIES contains additional linker arguments which breaks\n\n# get_filename_component below. Fortunately, since that change the module\n\n# exports CUDA_cudart_static_LIBRARY which points to a single file in the\n\n# right directory.\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "################################################################################\n\n# Looking for CUDA libdevice subdirectory\n\n#\n\n# Special case for Debian/Ubuntu to have nvidia-cuda-toolkit work\n\n# out of the box. More info on http://bugs.debian.org/882505\n\n################################################################################\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Don't alter CUDA_TOOLKIT_ROOT_DIR if the user specified it, if a value was\n\n# already cached for it, or if it already has libdevice.  Otherwise, on\n\n# Debian/Ubuntu, look where the nvidia-cuda-toolkit package normally installs\n\n# libdevice.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "libomptarget/cmake/Modules/LibomptargetNVPTXBitcodeLibrary.cmake" : {
      "ObjectId" : "f03567a4ba4fa525a927903ac7031bebec2dfa5f",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We use the compiler and linker provided by the user, attempt to use the one\n\n# used to build libomptarget or just fail.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get compiler directory to try to locate a suitable linker.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use llvm-link from the compiler directory.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The remaining arguments are the flags to be tested.\n\n# FIXME: Don't hardcode GPU version. This is currently required because\n\n#        Clang refuses to compile its default of sm_20 with CUDA 9.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Save for which compiler we are going to do the following checks so that we\n\n# can discard cached values if the user specifies a different value.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Forward additional arguments which contain the flags.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# These flags are required to emit LLVM Bitcode. We check them together because\n\n# if any of them are not supported, there is no point in finding out which are.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# It makes no sense to continue given that the compiler doesn't support\n\n# emitting basic LLVM Bitcode\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Declaring external shared device variables might need an additional flag\n\n# since Clang 7.0 and was entirely unsupported since version 4.0.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We can compile LLVM Bitcode from CUDA source code!\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "libomptarget/cmake/Modules/LibomptargetUtils.cmake" : {
      "ObjectId" : "7339cc0b56edd642567a7ab1b1ce345878704b57",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# void libomptarget_say(string message_to_user);\n\n# - prints out message_to_user\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# void libomptarget_warning_say(string message_to_user);\n\n# - prints out message_to_user with a warning\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# void libomptarget_error_say(string message_to_user);\n\n# - prints out message_to_user with an error and exits cmake\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "libomptarget/deviceRTLs/CMakeLists.txt" : {
      "ObjectId" : "9723fb8cde3476725a7bdd3132668f2059613827",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n#\n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#\n\n# ##===----------------------------------------------------------------------===##\n\n#\n\n# Build a device RTL for each available machine available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libomptarget/deviceRTLs/nvptx/CMakeLists.txt" : {
      "ObjectId" : "c20339c71a0a3990a423663a235efcd52946a62f",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n#\n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#\n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build the NVPTX (CUDA) Device RTL if the CUDA tools are available\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We can't use clang as nvcc host preprocessor, so we attempt to replace it with\n\n# gcc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We really don't have any host code, so we don't need to care about\n\n# propagating host flags.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Get the compute capability the user requested or use SM_35 by default.\n\n# SM_35 is what clang uses by default.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Activate RTL message dumps if requested by the user.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# NVPTX runtime library has to be statically linked. Dynamic linking is not\n\n# yet supported by the CUDA toolchain on the device.\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Install device RTL under the lib destination folder.\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Check if we can create an LLVM bitcode implementation of the runtime library\n\n# that could be inlined in the user application. For that we need to find\n\n# a Clang compiler capable of compiling our CUDA files to LLVM bitcode and\n\n# an LLVM linker.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set flags for LLVM Bitcode compilation.\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# CUDA 9 header files use the nv_weak attribute which clang is not yet prepared\n\n# to handle. Therefore, we use 'weak' instead. We are compiling only for the\n\n# device, so it should be equivalent.\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Create target to build all Bitcode libraries.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Generate a Bitcode library for all the compute capabilities the user requested.\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Compile CUDA files to bitcode.\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Link to a bitcode library.\n",
        "Line" : 160,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Copy library to destination.\n",
        "Line" : 172,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Install bitcode library under the lib destination folder.\n",
        "Line" : 177,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 16
    },
    "libomptarget/deviceRTLs/nvptx/test/CMakeLists.txt" : {
      "ObjectId" : "33945d1672a1aa7ca1fbd1e4e7451e482322fcdd",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Silently return, no need to annoy the user.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Don't run by default.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run with only one thread to only launch one application to the GPU at a time.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure the lit.site.cfg.in file\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "libomptarget/plugins/CMakeLists.txt" : {
      "ObjectId" : "f8048ba69c01f9a5c2299d81fa736c568278f442",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build plugins for the user system if available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# void build_generic_elf64(string tmachine, string tmachine_name, string tmachine_libname, string elf_machine_id);\n\n# - build a plugin for an ELF based generic 64-bit target based on libffi.\n\n# - tmachine: name of the machine processor as used in the cmake build system.\n\n# - tmachine_name: name of the machine to be printed with the debug messages.\n\n# - tmachine_libname: machine name to be appended to the plugin library name.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define macro to be used as prefix of the runtime messages for this target.\n",
        "Line" : 28,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Define macro with the ELF ID for this target.\n",
        "Line" : 31,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Install plugin under the lib destination folder.\n",
        "Line" : 37,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Report to the parent scope that we are building a plugin.\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Make sure the parent scope can see the plugins that will be created.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "libomptarget/plugins/aarch64/CMakeLists.txt" : {
      "ObjectId" : "350a56cb9a493b485cbfccfffa7c1165d52a3649",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n#\n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#\n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build a plugin for an aarch64 machine if available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libomptarget/plugins/cuda/CMakeLists.txt" : {
      "ObjectId" : "5fab421c42ff2de7c7f02c294751e58fed728c5d",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build a plugin for a CUDA machine if available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the suffix for the runtime messaging dumps.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install plugin under the lib destination folder.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Report to the parent scope that we are building a plugin for CUDA.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "libomptarget/plugins/ppc64/CMakeLists.txt" : {
      "ObjectId" : "3915196453e0a4040a51e67fb129ff562d054259",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build a plugin for a ppc64 machine if available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libomptarget/plugins/ppc64le/CMakeLists.txt" : {
      "ObjectId" : "0cfe7c0051fa41b7be8a78fa8f23b7890293fe2a",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build a plugin for a ppc64le machine if available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libomptarget/plugins/x86_64/CMakeLists.txt" : {
      "ObjectId" : "f61e1e856c80dbd681ad2c8539c8e87f72a3c4b3",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build a plugin for a x86_64 machine if available.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libomptarget/src/CMakeLists.txt" : {
      "ObjectId" : "f30087ed4342308e7049dec769f027af2b9cef6e",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##===----------------------------------------------------------------------===##\n\n# \n\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n# See https://llvm.org/LICENSE.txt for license information.\n\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# \n\n##===----------------------------------------------------------------------===##\n\n#\n\n# Build offloading library libomptarget.so.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build libomptarget library with libdl dependency.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install libomptarget under the lib destination folder.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libomptarget/test/CMakeLists.txt" : {
      "ObjectId" : "607801e50e5bb2ae7c7c589c41dc02562faf0994",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt file for unit testing OpenMP offloading runtime library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the lit.site.cfg.in file\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "runtime/CMakeLists.txt" : {
      "ObjectId" : "088edd4d2d96d15e17f2aad9985e00d00b7033a4",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add cmake directory to search for custom cmake functions\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set libomp version\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These include files are in the cmake/ subdirectory\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the target architecture\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If adding a new architecture, take a look at cmake/LibompGetArchitecture.cmake\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Should assertions be enabled?  They are on by default.\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Part of LLVM build\n",
        "Line" : 37,
        "CharPositionInLine" : 7
      },
      "8" : {
        "Text" : "# Determine the native architecture from LLVM.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# last ditch effort\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Set the OpenMP Year and Month assiociated with version\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# - Support for universal fat binary builds on Mac\n\n# - Having this extra variable allows people to build this library as a universal library\n\n#   without forcing a universal build of the llvm/clang compiler.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Should @rpath be used for dynamic libraries on Mac?\n\n# The if(NOT DEFINED) is there to guard a cached value of the variable if one\n\n# exists so there is no interference with what the user wants.  Also, no cache entry\n\n# is created so there are no inadvertant effects on other parts of LLVM.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# User specified flags.  These are appended to the configured flags.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Should the libomp library and generated headers be copied into the original source exports/ directory\n\n# Turning this to FALSE aids parallel builds to not interfere with each other.\n\n# Currently, the testsuite module expects the just built OpenMP library to be located inside the exports/\n\n# directory.  TODO: have testsuite run under llvm-lit directly.  We can then get rid of copying to exports/\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# HWLOC-support\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Get the build number from kmp_version.cpp\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Currently don't record any timestamps\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Architecture\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# IA-32 architecture\n",
        "Line" : 158,
        "CharPositionInLine" : 74
      },
      "20" : {
        "Text" : "# Intel(R) 64 architecture\n",
        "Line" : 160,
        "CharPositionInLine" : 78
      },
      "21" : {
        "Text" : "# ARM architecture\n",
        "Line" : 162,
        "CharPositionInLine" : 40
      },
      "22" : {
        "Text" : "# PPC64BE architecture\n",
        "Line" : 164,
        "CharPositionInLine" : 42
      },
      "23" : {
        "Text" : "# PPC64LE architecture\n",
        "Line" : 167,
        "CharPositionInLine" : 44
      },
      "24" : {
        "Text" : "# AARCH64 architecture\n",
        "Line" : 170,
        "CharPositionInLine" : 44
      },
      "25" : {
        "Text" : "# Intel(R) Many Integrated Core Architecture\n",
        "Line" : 172,
        "CharPositionInLine" : 40
      },
      "26" : {
        "Text" : "# MIPS architecture\n",
        "Line" : 174,
        "CharPositionInLine" : 41
      },
      "27" : {
        "Text" : "# MIPS64 architecture\n",
        "Line" : 176,
        "CharPositionInLine" : 43
      },
      "28" : {
        "Text" : "# Set some flags based on build_type\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Include itt notify interface?\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# normal, profile, stubs library.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Setting directory names\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Enabling Fortran if it is needed\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Enable MASM Compiler if it is needed (Windows only)\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Getting legal type/arch\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Compiler flag checks, library checks, threading check, etc.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Is there a quad precision data type available?\n\n# TODO: Make this a real feature check\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# libgomp drop-in compatibility requires versioned symbols\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# On multinode systems, larger alignment is desired to avoid false sharing\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Build code that allows the OpenMP library to conveniently interface with debuggers\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Should we link to C++ library?\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Intel(R) Transactional Synchronization Extensions (Intel(R) TSX) based locks have\n\n# __asm code which can be troublesome for some compilers.  This feature is also x86 specific.\n\n# TODO: Make this a real feature check\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# - stats-gathering enables OpenMP stats where things like the number of\n\n# parallel regions, clock ticks spent in particular openmp regions are recorded.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# The stats functionality requires the std c++ library\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Shared library can be switched to a static library\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# OMPT-support defaults to ON for OpenMP 5.0+ and if the requirements in\n\n# cmake/config-ix.cmake are fulfilled.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# TSAN-support\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Error check hwloc support after config-ix has run\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Hierarchical scheduling support\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Setting final library name\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Optional backwards compatibility aliases.\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Print configuration after all variables are set.\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# will say development if all zeros\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 53
    },
    "runtime/cmake/LibompCheckFortranFlag.cmake" : {
      "ObjectId" : "21837ef068e36f45e1274211bb37e69f8f371004",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Checking a fortran compiler flag\n\n# There is no real trivial way to do this in CMake, so we implement it here\n\n# this will have ${boolean} = TRUE if the flag succeeds, otherwise false.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Our manual check for cmake versions that don't have CheckFortranSourceCompiles\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "runtime/cmake/LibompCheckLinkerFlag.cmake" : {
      "ObjectId" : "81ce9b0bb83a14ed1b075680cf1e160ccab00555",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Checking a linker flag to build a shared library\n\n# There is no real trivial way to do this in CMake, so we implement it here\n\n# this will have ${boolean} = TRUE if the flag succeeds, otherwise FALSE.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "runtime/cmake/LibompDefinitions.cmake" : {
      "ObjectId" : "cc93ad08c844f15604286a00c5e4e1c096164d33",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake doesn't include CPPFLAGS from environment, but we will.\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "runtime/cmake/LibompExports.cmake" : {
      "ObjectId" : "e252c6252dcb4ae11470980ae49a7c3af216a49c",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# LibompExports.cmake\n\n#   Copy library and header files into the exports/ subdirectory after library build\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create the suffix for the export directory\n\n# - Only add to suffix when not a default value\n\n# - Example suffix: .deb.30.s1\n\n#   final export directory: exports/lin_32e.deb.30.s1/lib\n\n# - These suffixes imply the build is a Debug, OpenMP 3.0, Stats-Gathering version of the library\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set exports locations\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# e.g., lin_knf, lin_knc\n",
        "Line" : 35,
        "CharPositionInLine" : 69
      },
      "5" : {
        "Text" : "# e.g., lin_arm, lin_ppc64\n",
        "Line" : 42,
        "CharPositionInLine" : 67
      },
      "6" : {
        "Text" : "# Put headers in exports/ directory post build\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Copy OpenMP library into exports/ directory post build\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Copy Windows import library into exports/ directory post build\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "runtime/cmake/LibompGetArchitecture.cmake" : {
      "ObjectId" : "e65cd302ed74986302e9d9346a419e40a27c6728",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine the architecture from predefined compiler macros\n\n# The architecture name can only contain alphanumeric characters and underscores (i.e., C identifier)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# void get_architecture(string* return_arch)\n\n# - Returns the architecture in return_arch\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Write out ${detect_arch_src_txt} to a file within the cmake/ subdirectory\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Try to compile using the C Compiler.  It will always error out with an #error directive, so store error output to ${local_architecture}\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Match the important architecture line and store only that matching string in ${local_architecture}\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Get rid of the ARCHITECTURE= part of the string\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# set the return value to the architecture detected (e.g., 32e, 32, arm, ppc64, etc.)\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove ${detect_arch_src_txt} from cmake/ subdirectory\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "runtime/cmake/LibompHandleFlags.cmake" : {
      "ObjectId" : "86f629478be8293c7326d34d41d1769bb66dc39c",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup the flags correctly for cmake (covert to string)\n\n# Pretty them up (STRIP any beginning and trailing whitespace,\n\n# remove duplicates, remove empty entries)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if flags are empty, don't do anything\n",
        "Line" : 15,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# remove duplicates\n",
        "Line" : 17,
        "CharPositionInLine" : 37
      },
      "4" : {
        "Text" : "# remove empty items\n",
        "Line" : 18,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# Gets flags common to both the C and C++ compiler\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Intel(R) C Compiler flags\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Architectural C and C++ flags\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# C compiler flags\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# flags only for the C Compiler\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# C++ compiler flags\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Assembler flags\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Architectural assembler flags\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Linker flags\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Architectural linker flags\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Library flags\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Fortran flags\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Perl generate-defs.pl flags (For Windows only)\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "runtime/cmake/LibompMicroTests.cmake" : {
      "ObjectId" : "2fde724f6c7662f3b2ed058f3e1002c9cd1691a5",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The following micro-tests are small tests to perform on the library just created.\n\n# There are currently five micro-tests:\n\n# (1) test-touch\n\n#  - Compile and run a small program using newly created libomp library\n\n#  - Fails if test-touch.c does not compile or if test-touch.c does not run after compilation\n\n#  - Program dependencies: gcc or g++, grep, bourne shell\n\n#  - Available for all Unix,Mac,Windows builds.  Not available on Intel(R) MIC Architecture builds.\n\n# (2) test-relo\n\n#  - Tests dynamic libraries for position-dependent code (can not have any position dependent code)\n\n#  - Fails if TEXTREL is in output of readelf -d libomp.so command\n\n#  - Program dependencies: readelf, grep, bourne shell\n\n#  - Available for Unix, Intel(R) MIC Architecture dynamic library builds. Not available otherwise.\n\n# (3) test-execstack\n\n#  - Tests if stack is executable\n\n#  - Fails if stack is executable. Should only be readable and writable. Not exectuable.\n\n#  - Program dependencies: perl, readelf\n\n#  - Available for Unix dynamic library builds. Not available otherwise.\n\n# (4) test-instr (Intel(R) MIC Architecutre only)\n\n#  - Tests Intel(R) MIC Architecture libraries for valid instruction set\n\n#  - Fails if finds invalid instruction for Intel(R) MIC Architecture (wasn't compiled with correct flags)\n\n#  - Program dependencies: perl, objdump\n\n#  - Available for Intel(R) MIC Architecture and i386 builds. Not available otherwise.\n\n# (5) test-deps\n\n#  - Tests newly created libomp for library dependencies\n\n#  - Fails if sees a dependence not listed in td_exp variable below\n\n#  - Program dependencies: perl, (unix)readelf, (mac)otool[64], (windows)link.exe\n\n#  - Available for Unix,Mac,Windows, Intel(R) MIC Architecture dynamic builds and Windows\n\n#    static builds. Not available otherwise.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# get library location\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# test-touch\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# pick test-touch compiler\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# test-touch compilation flags\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# (Unix based systems, Intel(R) MIC Architecture, and Mac)\n",
        "Line" : 68,
        "CharPositionInLine" : 7
      },
      "7" : {
        "Text" : "# pick test-touch compiler\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# test-touch compilation flags\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# test-relo\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# test-execstack\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# test-instr\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# test-deps\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Perl script expects comma separated list\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "runtime/cmake/LibompUtils.cmake" : {
      "ObjectId" : "179c8d0f8b188904576196b950d1433232d65a16",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# void libomp_say(string message_to_user);\n\n# - prints out message_to_user\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# void libomp_warning_say(string message_to_user);\n\n# - prints out message_to_user with a warning\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# void libomp_error_say(string message_to_user);\n\n# - prints out message_to_user with an error and exits cmake\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# libomp_append(<flag> <flags_list> [(IF_TRUE | IF_FALSE | IF_TRUE_1_0 ) BOOLEAN])\n\n#\n\n# libomp_append(<flag> <flags_list>)\n\n#   - unconditionally appends <flag> to the list of definitions\n\n#\n\n# libomp_append(<flag> <flags_list> <BOOLEAN>)\n\n#   - appends <flag> to the list of definitions if BOOLEAN is true\n\n#\n\n# libomp_append(<flag> <flags_list> IF_TRUE <BOOLEAN>)\n\n#   - appends <flag> to the list of definitions if BOOLEAN is true\n\n#\n\n# libomp_append(<flag> <flags_list> IF_FALSE <BOOLEAN>)\n\n#   - appends <flag> to the list of definitions if BOOLEAN is false\n\n#\n\n# libomp_append(<flag> <flags_list> IF_DEFINED <VARIABLE>)\n\n#   - appends <flag> to the list of definitions if VARIABLE is defined\n\n#\n\n# libomp_append(<flag> <flags_list> IF_TRUE_1_0 <BOOLEAN>)\n\n#   - appends <flag>=1 to the list of definitions if <BOOLEAN> is true, <flag>=0 otherwise\n\n# e.g., libomp_append(\"-D USE_FEATURE\" IF_TRUE_1_0 HAVE_FEATURE)\n\n#     appends \"-D USE_FEATURE=1\" if HAVE_FEATURE is true\n\n#     or \"-D USE_FEATURE=0\" if HAVE_FEATURE is false\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# void libomp_get_legal_arch(string* return_arch_string);\n\n# - returns (through return_arch_string) the formal architecture\n\n#   string or warns user of unknown architecture\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# void libomp_check_variable(string var, ...);\n\n# - runs through all values checking if ${var} == value\n\n# - uppercase and lowercase do not matter\n\n# - if the var is found, then just print it out\n\n# - if the var is not found, then error out\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# void libomp_get_build_number(string src_dir, string* return_build_number);\n\n# - grab the eight digit build number (or 00000000) from kmp_version.cpp\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# sets file_lines_list to a list of all lines in kmp_version.cpp\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# runs through each line in kmp_version.cpp\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# if the line begins with \"#define KMP_VERSION_BUILD\" then we take not of the build number\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# if we matched \"#define KMP_VERSION_BUILD\", then grab the build number\n",
        "Line" : 144,
        "CharPositionInLine" : 35
      },
      "12" : {
        "Text" : "# return build number\n",
        "Line" : 150,
        "CharPositionInLine" : 61
      },
      "13" : {
        "Text" : "# void libomp_get_legal_type(string* return_legal_type);\n\n# - set the legal type name Performance/Profiling/Stub\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# void libomp_add_suffix(string suffix, list<string>* list_of_items);\n\n# - returns list_of_items with suffix appended to all items\n\n# - original list is modified\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# void libomp_list_to_string(list<string> list_of_things, string* return_string);\n\n# - converts a list to a space separated string\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# void libomp_string_to_list(string str, list<string>* return_list);\n\n# - converts a string to a semicolon separated list\n\n# - what it really does is just string_replace all running whitespace to a semicolon\n\n# - in cmake, a list is strings separated by semicolons: i.e., list of four items, list = \"item1;item2;item3;item4\"\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "runtime/cmake/config-ix.cmake" : {
      "ObjectId" : "5404715b6d9ab6f106392a9a654b01977b9e501a",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check for versioned symbols\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Includes the architecture flag in both compile and link phase\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Checking C, CXX, Linker Flags\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check Windows MSVC style flags.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# It is difficult to create a dummy masm assembly file\n\n# and then check the MASM assembler to see if these flags exist and work,\n\n# so we assume they do for Windows.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Change Windows flags /MDx to /MTx\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# It is difficult to create a dummy assembly file that compiles into an\n\n# exectuable for every architecture and then check the C compiler to\n\n# see if -x assembler-with-cpp exists and works, so we assume it does for non-Windows.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Check linker flags\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check Intel(R) C Compiler specific flags\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Checking Threading requirements\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find perl executable\n\n# Perl is used to create omp.h (and other headers) along with kmp_i18n_id.inc and kmp_i18n_default.inc\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The perl scripts take the --os=/--arch= flags which expect a certain format for operating systems and arch's.\n\n# Until the perl scripts are removed, the most portable way to handle this is to have all operating systems that\n\n# are neither Windows nor Mac (Most Unix flavors) be considered lin to the perl scripts.  This is rooted\n\n# in that all the Perl scripts check the operating system and will fail if it isn't \"valid\".  This\n\n# temporary solution lets us avoid trying to enumerate all the possible OS values inside the Perl modules.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Checking features\n\n# Check if version symbol assembler directives are supported\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check if quad precision types are available\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check if adaptive locks are available\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check if stats-gathering is available\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check if OMPT support is available\n\n# Currently, __builtin_frame_address() is required for OMPT\n\n# Weak attribute is required for Unices (except Darwin), LIBPSAPI is used for Windows\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# hardware architecture supported?\n",
        "Line" : 243,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "#      (LIBOMP_ARCH STREQUAL arm) OR\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# OS supported?\n",
        "Line" : 250,
        "CharPositionInLine" : 9
      },
      "21" : {
        "Text" : "# Check if HWLOC support is available\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check if ThreadSanitizer support is available\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "runtime/src/CMakeLists.txt" : {
      "ObjectId" : "efa9e1f5a9fcc2f55b119874e2b6139c24768ade",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#//===----------------------------------------------------------------------===//\n\n#//\n\n#// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n\n#// See https://llvm.org/LICENSE.txt for license information.\n\n#// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n#//\n\n#//===----------------------------------------------------------------------===//\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure omp.h, kmp_config.h and omp-tools.h if necessary\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate message catalog files: kmp_i18n_id.inc and kmp_i18n_default.inc\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the -D definitions for all sources\n\n# UNICODE and _UNICODE are set in LLVM's CMake system.  They affect the\n\n# ittnotify code and should only be set when compiling ittnotify_static.c\n\n# on Windows (done below).\n\n# TODO: Fix the UNICODE usage in ittnotify code for Windows.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the -I includes for all sources\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Getting correct source files to build library\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get C++ files\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Windows specific files\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Windows assembly file\n",
        "Line" : 89,
        "CharPositionInLine" : 60
      },
      "9" : {
        "Text" : "# Unix specific files\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Unix assembly file\n",
        "Line" : 94,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : "# Files common to stubs and normal library\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For Windows, there is a resource file (.rc -> .res) that is also compiled\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Get compiler and assembler flags\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set the compiler flags for each type of source\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Let the compiler handle the assembly files on Unix-like systems\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Remove any cmake-automatic linking of the standard C++ library.\n\n# We neither need (nor want) the standard C++ library dependency even though we compile c++ files.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add the OpenMP library\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Get the library's location within the build tree for the unit tester\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add symbolic links to libomp\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Linking command will include libraries in LIBOMP_CONFIGURED_LIBFLAGS\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Create *.inc before compiling any sources\n\n# objects depend on : .inc files\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Windows specific build rules\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Create .def and .rc file before compiling any sources\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# z_Windows_NT-586_asm.asm requires definitions to be sent via command line\n\n# It only needs the architecutre macro and OMPT_SUPPORT=0|1\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Create Windows import library\n\n# the import library is \"re-linked\" to include kmp_import.cpp which prevents\n\n# linking of both Visual Studio OpenMP and newly built OpenMP\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# uses /version flag\n",
        "Line" : 205,
        "CharPositionInLine" : 60
      },
      "27" : {
        "Text" : "# control generated import library name when building omp\n",
        "Line" : 206,
        "CharPositionInLine" : 38
      },
      "28" : {
        "Text" : "# Get generated import library from creating omp\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Create new import library that is just the previously created one + kmp_import.cpp\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ensure generated import library is created first\n",
        "Line" : 223,
        "CharPositionInLine" : 31
      },
      "31" : {
        "Text" : "# Create def file to designate exported functions\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# generate-def.pl flags (Windows only)\n",
        "Line" : 226,
        "CharPositionInLine" : 37
      },
      "33" : {
        "Text" : "# Building the Fortran module files\n\n# One compilation step creates both omp_lib.mod and omp_lib_kinds.mod\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Move files to exports/ directory if requested\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Micro test rules for after library has been built (cmake/LibompMicroTests.cmake)\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Install rules\n\n# We want to install libomp in DESTDIR/CMAKE_INSTALL_PREFIX/lib\n\n# We want to install headers in DESTDIR/CMAKE_INSTALL_PREFIX/include\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Create aliases (regular copies) of the library for backwards compatibility\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Create aliases (symlinks) of the library for backwards compatibility\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# install under legacy name ompt.h\n",
        "Line" : 321,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 40
    },
    "runtime/src/kmp_config.h.cmake" : {
      "ObjectId" : "b4b76a2f3368fb60af20af120c08b9f44d7e837d",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n * kmp_config.h -- Feature macros\n */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "//===----------------------------------------------------------------------===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "// cmakedefine01 MACRO will define MACRO as either 0 or 1\n// cmakedefine MACRO 1 will define MACRO as 1 or leave undefined",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "// Configured cache line based on architecture",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "runtime/test/CMakeLists.txt" : {
      "ObjectId" : "851377f735cb945172efa3ef4b594bc484f4dc8a",
      "LastModified" : "2019-04-03T18:11:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt file for unit testing OpenMP host runtime library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some tests use math functions\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When using libgcc, -latomic may be needed for atomics\n\n# (but when using compiler-rt, the atomics will be built-in)\n\n# Note: we can not check for __atomic_load because clang treats it\n\n# as special built-in and that breaks CMake checks\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# not needed\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add target check-ompt, but make sure to not add the tests twice to check-openmp.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure the lit.site.cfg.in file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 32,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 2609
}