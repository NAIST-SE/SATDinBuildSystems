{
  "Repository" : "63487587",
  "Revision" : "HEAD",
  "ObjectId" : "df173f9c0f91bac3aba2d086ada81e65c6e85903",
  "CommitTime" : "2019-04-18T22:52:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "82e5a0df80ca1196a68317b3ae82e8be7832ef8b",
      "LastModified" : "2019-03-30T20:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake modules.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For shipit-transformed builds\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Joins arguments and stores the result in ${var}.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate compilation database for use by YouCompleteMe.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make sure to bail on in-source builds for cleanliness\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# default built type is Debug\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Enable ASAN by default on debug macOS builds.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# disable coverage mode by default\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add compiler-specific options.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Enable code coverage, if the compiler is supported\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# clang and linux's lcov don't play nice together; don't attempt with linux/clang\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Capture coverage info.\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Filter out system and test code.\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Debug before upload.\n",
        "Line" : 96,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# gmock\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Common configuration for all build modes.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find glog::glog to satisfy the folly dep.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### Fuzzer harnesses\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################\n\n# TCK Drivers\n\n########################################\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Download the latest TCK drivers JAR.\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "########################################\n\n# Examples\n\n########################################\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# request-response-hello-world\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# fire-and-forget-hello-world\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# stream-hello-world\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# channel-hello-world\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# stream-observable-to-flowable\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# conditional-request-handling\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# warm-resumption\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# BUILD_EXAMPLES\n",
        "Line" : 720,
        "CharPositionInLine" : 9
      },
      "29" : {
        "Text" : "########################################\n\n# End Examples\n\n########################################\n",
        "Line" : 722,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "build/fbcode_builder/CMake/FindGMock.cmake" : {
      "ObjectId" : "7a785044a0c5f3b5251f8a90559ac04681d6c967",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find libgmock\n\n#\n\n#  LIBGMOCK_DEFINES     - List of defines when using libgmock.\n\n#  LIBGMOCK_INCLUDE_DIR - where to find gmock/gmock.h, etc.\n\n#  LIBGMOCK_LIBRARIES   - List of libraries when using libgmock.\n\n#  LIBGMOCK_FOUND       - True if libgmock found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Explicitly set to empty string if not found to avoid it being\n\n# set to NOTFOUND and breaking compilation\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The GTEST_LINKED_AS_SHARED_LIBRARY macro must be set properly on Windows.\n\n#\n\n# There isn't currently an easy way to determine if a library was compiled as\n\n# a shared library on Windows, so just assume we've been built against a\n\n# shared build of gmock for now.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBGMOCK_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "build/fbcode_builder/CMake/FindGflags.cmake" : {
      "ObjectId" : "246ceacdd091fed1a7850d6e3d4cff92c6f8383a",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# Find libgflags.\n\n# There's a lot of compatibility cruft going on in here, both\n\n# to deal with changes across the FB consumers of this and also\n\n# to deal with variances in behavior of cmake itself.\n\n#\n\n# Since this file is named FindGflags.cmake the cmake convention\n\n# is for the module to export both GFLAGS_FOUND and Gflags_FOUND.\n\n# The convention expected by consumers is that we export the\n\n# following variables, even though these do not match the cmake\n\n# conventions:\n\n#\n\n#  LIBGFLAGS_INCLUDE_DIR - where to find gflags/gflags.h, etc.\n\n#  LIBGFLAGS_LIBRARY     - List of libraries when using libgflags.\n\n#  LIBGFLAGS_FOUND       - True if libgflags found.\n\n#\n\n# We need to be able to locate gflags both from an installed\n\n# cmake config file and just from the raw headers and libs, so\n\n# test for the former and then the latter, and then stick\n\n# the results together and export them into the variables\n\n# listed above.\n\n#\n\n# For forwards compatibility, we export the following variables:\n\n#\n\n#  gflags_INCLUDE_DIR - where to find gflags/gflags.h, etc.\n\n#  gflags_TARGET / GFLAGS_TARGET / gflags_LIBRARIES\n\n#                     - List of libraries when using libgflags.\n\n#  gflags_FOUND       - True if libgflags found.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Re-export the config-specified libs with our local names\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# cmake module compat\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBGFLAGS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# cmake module compat\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# compat with some existing FindGflags consumers\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Compat with the gflags CONFIG based detection\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Compat with the gflags CONFIG based detection\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "build/fbcode_builder/CMake/FindGlog.cmake" : {
      "ObjectId" : "a589b2e37d31af883b59096005474a4e01416833",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# - Try to find Glog\n\n# Once done, this will define\n\n#\n\n# GLOG_FOUND - system has Glog\n\n# GLOG_INCLUDE_DIRS - the Glog include directories\n\n# GLOG_LIBRARIES - link these to use Glog\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/fbcode_builder/CMake/FindLibEvent.cmake" : {
      "ObjectId" : "dd11ebd8435d7d475d78855d2baa2e2009299ea4",
      "LastModified" : "2019-04-08T18:00:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# - Find LibEvent (a cross event library)\n\n# This module defines\n\n# LIBEVENT_INCLUDE_DIR, where to find LibEvent headers\n\n# LIBEVENT_LIB, LibEvent libraries\n\n# LibEvent_FOUND, If false, do not try to use libevent\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Re-export the config under our own names\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Somewhat gross, but some vcpkg installed libevents have a relative\n\n# `include` path exported into LIBEVENT_INCLUDE_DIRS, which triggers\n\n# a cmake error because it resolves to the `include` dir within the\n\n# folly repo, which is not something cmake allows to be in the\n\n# INTERFACE_INCLUDE_DIRECTORIES.  Thankfully on such a system the\n\n# actual include directory is already part of the global include\n\n# directories, so we can just skip it.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Unfortunately, with a bare target name `event`, downstream consumers\n\n# of the package that depends on `Libevent` located via CONFIG end\n\n# up exporting just a bare `event` in their libraries.  This is problematic\n\n# because this in interpreted as just `-levent` with no library path.\n\n# When libevent is not installed in the default installation prefix\n\n# this results in linker errors.\n\n# To resolve this, we ask cmake to lookup the full path to the library\n\n# and use that instead.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Allow reading the LOCATION property\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "build/fbcode_builder/CMake/FindPCRE.cmake" : {
      "ObjectId" : "32ccb372536f92a3b983baf2f8b4641823a19ea4",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/fbcode_builder/CMake/ThriftCppLibrary.cmake" : {
      "ObjectId" : "2613e888a4f36da9b37aa006dad6e8d2187f3c96",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# NOTE: If you change this file, fbcode/fboss/github/ThriftCppLibrary.cmake also\n\n# needs to be changed.  TODO: this should be handled via shipit.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 3.12 is finally getting a list(JOIN) function, but until then\n\n# treating the list as a string and replacing the semicolons is good enough.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Compute the list of generated files\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Emit the rule to run the thrift compiler\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Now emit the library rule to compile the sources\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/InstallFolly.cmake" : {
      "ObjectId" : "2bd17460c35cdeb875c59687ea939059921ea27c",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, Facebook, Inc.\n\n# All rights reserved.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rsocket/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "4d0c4f51c91e02110098a40fc5ead72d374c69ea",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO(lehecka):enable test\n\n#add_test(NAME StreamThroughputMemoryTest COMMAND stream-throughput-mem --items 100000)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "yarpl/CMakeLists.txt" : {
      "ObjectId" : "9942095ed19588cb6fec82acb29a893f44fd799b",
      "LastModified" : "2019-04-02T15:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake Config\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For shipit-transformed builds\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Generate compilation database\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Common configuration for all build modes.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The yarpl-tests binary constantly fails with an ASAN error in gtest internal\n\n# code on macOS.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Using NDEBUG in Release builds.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# library source\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# public API\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Flowable public API\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Observable public API\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Single\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# utils\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# RSocket's tests also has dependency on this library\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Executable for experimenting.\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Unit tests.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Inherited from rsocket-cpp CMake.\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 16
    }
  },
  "FileTypes" : {
    "CMAKE" : 10
  },
  "ElapsedTime" : 1380
}