{
  "Repository" : "40196",
  "Revision" : "HEAD",
  "ObjectId" : "bb1fc1e62c82c215d685742495c7ad3ed1ccace9",
  "CommitTime" : "2019-01-15T10:00:03Z",
  "Files" : {
    "applications/carrot2-cli/build.xml" : {
      "ObjectId" : "d71f776caa4a5b8ab82eab855fffc67133441c39",
      "LastModified" : "2013-10-10T10:27:32Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  Internal build script for Carrot2 Command Line Interface. \n  Please use the 'cli' target from the main build script to build them.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Base dir determined from the build file location ",
        "Line" : 6,
        "CharPositionInLine" : 60
      },
      "2" : {
        "Text" : " Master build base dir ",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : " Import common macros ",
        "Line" : 14,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : " CLI build dirs ",
        "Line" : 19,
        "CharPositionInLine" : 26
      },
      "5" : {
        "Text" : " CLI dist file name base ",
        "Line" : 23,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : "\n       Builds the CLI applications\n    ",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "\n       Builds the cli ZIP archive.\n    ",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : " \n       Builds the CLI classes file.\n    ",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "applications/carrot2-dcs/build.xml" : {
      "ObjectId" : "fd6d24ff5968be420d675695bee4fe3fc4eae90d",
      "LastModified" : "2018-05-11T10:29:59Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  Internal build script for Carrot2 Document Clustering Server. \n  Please use the 'dcs' target from the main build script to build the DCS.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Base dir determined from the build file location ",
        "Line" : 6,
        "CharPositionInLine" : 60
      },
      "2" : {
        "Text" : " Master build base dir ",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : " Import common macros ",
        "Line" : 14,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : " DCS build dirs ",
        "Line" : 18,
        "CharPositionInLine" : 26
      },
      "5" : {
        "Text" : " DCS WAR ",
        "Line" : 21,
        "CharPositionInLine" : 19
      },
      "6" : {
        "Text" : " DCS dist file name base ",
        "Line" : 25,
        "CharPositionInLine" : 35
      },
      "7" : {
        "Text" : " DCS-specific dependencies ",
        "Line" : 28,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "\n       Builds the DCS (includes bootstrap class and embedded jetty).\n    ",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "\n       Builds the DCS ZIP archive.\n    ",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : " \n       Builds the DCS war file.\n    ",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : " Add DCS-specific JARs ",
        "Line" : 138,
        "CharPositionInLine" : 35
      },
      "12" : {
        "Text" : " Copies the runtime resources to the compiled classes directory. ",
        "Line" : 194,
        "CharPositionInLine" : 75
      },
      "CommentCount" : 13
    },
    "applications/carrot2-dcs/examples/java/pom.xml" : {
      "ObjectId" : "0e6767cf0d14fae8d70258d69b3bae23e40ac02e",
      "LastModified" : "2016-08-30T13:21:29Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Global properties. ",
        "Line" : 11,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 1
    },
    "applications/carrot2-examples/build.xml" : {
      "ObjectId" : "c1723e35e91664657e7fc1e41f876ef06d36fb87",
      "LastModified" : "2016-08-30T13:21:29Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n     A build script that checks whether Carrot2 API examples compile\n     and run without exceptions.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "\n       Builds the examples.\n    ",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "\n         Dependencies (JARs) required for clustering directly fed documents.\n      ",
        "Line" : 12,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "\n         Dependencies (JARs) required for both fetching documents using\n         document sources and clustering them using one of Carrot2 algorithms.\n      ",
        "Line" : 20,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : " Runs selected classes ",
        "Line" : 42,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : " Runs selected classes (invoked from Maven too). ",
        "Line" : 58,
        "CharPositionInLine" : 59
      },
      "6" : {
        "Text" : " Run some example classes ",
        "Line" : 60,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : " Create a simple Lucene index and run Lucene examples. ",
        "Line" : 72,
        "CharPositionInLine" : 67
      },
      "8" : {
        "Text" : " Removes all compiled binaries ",
        "Line" : 86,
        "CharPositionInLine" : 41
      },
      "9" : {
        "Text" : " A macro that runs the specified class. ",
        "Line" : 91,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 10
    },
    "applications/carrot2-examples/pom.xml" : {
      "ObjectId" : "7496d1f8b440be1799034410bca964b0be741667",
      "LastModified" : "2016-08-30T13:21:29Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " SLF4J, simple console logging ",
        "Line" : 29,
        "CharPositionInLine" : 43
      },
      "1" : {
        "Text" : " Enable metadata extraction from @Bindable classes. ",
        "Line" : 61,
        "CharPositionInLine" : 70
      },
      "2" : {
        "Text" : "\n    On a mac compiler plugin doesn't pick up annotation preprocessors from its dependencies\n    for some reason. This is a patch that fixes that.\n    ",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "applications/carrot2-webapp/build.xml" : {
      "ObjectId" : "fda20a61eb5fac72150bdd78756ef2d5338b2209",
      "LastModified" : "2016-08-23T14:31:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  Internal build script for Carrot2 web application. \n  Please use the 'webapp' target from the main build script to build the web application.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Base dir determined from the build file location ",
        "Line" : 6,
        "CharPositionInLine" : 60
      },
      "2" : {
        "Text" : " Master build base dir ",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : " Build number, provided by Bamboo ",
        "Line" : 14,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : " Import common macros ",
        "Line" : 18,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : " Customizable properties ",
        "Line" : 22,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : " Webapp build dirs ",
        "Line" : 30,
        "CharPositionInLine" : 29
      },
      "7" : {
        "Text" : " Webapp-specific dependencies ",
        "Line" : 35,
        "CharPositionInLine" : 40
      },
      "8" : {
        "Text" : " \n       Build the web application WAR file.\n    ",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "\n       Assembles the web applications WAR file.\n    ",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "\n       Builds the webapp distribution. Currently, it just moves the WAR file\n       to the output directory, not sure it if makes sense to wrap it with an extra ZIP file.\n    ",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "\n       Prepares resources the web applications WAR file. \"Build scripts \"extending\" this\n       script may want to add their own preparation steps (e.g. copy extra skins)\n       before they let this script assemble the complete WAR file.\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "\n       Compiles the main web application classes and copies log4j configuration.\n    ",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : " Log4j specific config ",
        "Line" : 116,
        "CharPositionInLine" : 35
      },
      "14" : {
        "Text" : "\n       Copies the default component suites. Can be disabled by \"extending\" build scripts.\n    ",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "\n       Copies the default linguistic resources. Can be disabled by \"extending\" build scripts.\n    ",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "\n       Copies \"source\" skin files to a work directory.\n    ",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "\n       Builds sprite images in the skins work directory.\n    ",
        "Line" : 168,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "\n       Builds sprite images in the skin source directory.\n    ",
        "Line" : 175,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "\n       Processes all the files required to run the web application from Eclipse.\n    ",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "\n       Substitutes variables in config.xml, jawr.properties and web.xml files.\n    ",
        "Line" : 188,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "\n       Substitutes variables in config.xml, jawr.properties and web.xml files and saves\n       the results to the classes working dir.\n    ",
        "Line" : 226,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "\n       Substitutes variables in config.xml, jawr.properties and web.xml files and saves\n       the results to the source dirs.\n    ",
        "Line" : 234,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "\n       Generates metadata files for webapp-specific document sources.\n    ",
        "Line" : 244,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "\n       Generates metadata files for webapp-specific document sources.\n    ",
        "Line" : 250,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "\n       Removes temporary files left after building the web application.\n    ",
        "Line" : 256,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "\n       Removes the WAR file and all temporary files.\n    ",
        "Line" : 264,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "\n       Helps to debug XSLT compilation problems. For some reason, the embedded Xalan\n       does not output any information about the reason why the stylesheet doesn't compile.\n    ",
        "Line" : 273,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 28
    },
    "build.xml" : {
      "ObjectId" : "f3abeb06f78ab9f0c18a2b034031db9af63e42d7",
      "LastModified" : "2018-06-21T09:47:19Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  Builds main components and applications of Carrot2 3.x.\n  Carrot2 Workbench is built using a dedicated script.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Basedir relative to this build file ",
        "Line" : 7,
        "CharPositionInLine" : 47
      },
      "2" : {
        "Text" : " Tmp dir ",
        "Line" : 14,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : " Directory with flattened lib files, to be visible in imported scripts ",
        "Line" : 17,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : " ant contrib ",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "5" : {
        "Text" : " Import local properties and version ",
        "Line" : 27,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : " Import other build scripts. ",
        "Line" : 33,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : " Derive version numbers for other components. ",
        "Line" : 44,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : " Source code and lib dirs ",
        "Line" : 48,
        "CharPositionInLine" : 36
      },
      "9" : {
        "Text" : " Output dirs ",
        "Line" : 56,
        "CharPositionInLine" : 23
      },
      "10" : {
        "Text" : " Java API distribution ",
        "Line" : 72,
        "CharPositionInLine" : 33
      },
      "11" : {
        "Text" : " Extra tools the build can use if available ",
        "Line" : 75,
        "CharPositionInLine" : 54
      },
      "12" : {
        "Text" : " Compilation presets. ",
        "Line" : 88,
        "CharPositionInLine" : 32
      },
      "13" : {
        "Text" : " Source files to compile for tests. ",
        "Line" : 95,
        "CharPositionInLine" : 46
      },
      "14" : {
        "Text" : " Core source files to compile for production ",
        "Line" : 104,
        "CharPositionInLine" : 55
      },
      "15" : {
        "Text" : " We'll be using Carrot2 internal Xalan for XSLTs ",
        "Line" : 109,
        "CharPositionInLine" : 59
      },
      "16" : {
        "Text" : " \n      Source files for coverage calculation. The auto-generated code is excluded from the \n      list. Also, if external API tests are disabled, the document source classes are\n      also excluded from coverage calculation.\n    ",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : " Excludes both JAR and LICENSE files ",
        "Line" : 150,
        "CharPositionInLine" : 47
      },
      "18" : {
        "Text" : " All JARs required by the core code ",
        "Line" : 199,
        "CharPositionInLine" : 46
      },
      "19" : {
        "Text" : " Extra classpath entries for unit tests ",
        "Line" : 212,
        "CharPositionInLine" : 50
      },
      "20" : {
        "Text" : " Prepend classpath with clover-ified classes, if available. ",
        "Line" : 217,
        "CharPositionInLine" : 72
      },
      "21" : {
        "Text" : " Path to the Carrot2 core JAR ",
        "Line" : 224,
        "CharPositionInLine" : 40
      },
      "22" : {
        "Text" : " Include our own compiled sources so that we can exclude some classes from javadoc\n         and still compile without warnings. ",
        "Line" : 235,
        "CharPositionInLine" : 49
      },
      "23" : {
        "Text" : " Include ANT's JAR for ANT tasks. ",
        "Line" : 238,
        "CharPositionInLine" : 46
      },
      "24" : {
        "Text" : " \n       Output cleanup.\n    ",
        "Line" : 249,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : " \n       Core.\n    ",
        "Line" : 256,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : " Compile the rest. ",
        "Line" : 259,
        "CharPositionInLine" : 31
      },
      "27" : {
        "Text" : " Tests. ",
        "Line" : 266,
        "CharPositionInLine" : 18
      },
      "28" : {
        "Text" : " FindBugs. ",
        "Line" : 277,
        "CharPositionInLine" : 21
      },
      "29" : {
        "Text" : " Anything to make javadoc run. ",
        "Line" : 362,
        "CharPositionInLine" : 47
      },
      "30" : {
        "Text" : "\n       Core resources.\n    ",
        "Line" : 374,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "\n       Test resources.\n    ",
        "Line" : 392,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : " \n       Unit tests.\n    ",
        "Line" : 413,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : " junit4 ",
        "Line" : 430,
        "CharPositionInLine" : 20
      },
      "34" : {
        "Text" : " defaults. ",
        "Line" : 440,
        "CharPositionInLine" : 23
      },
      "35" : {
        "Text" : " Values: number of cpus to use, 'max' to use all available cores or 'auto' for sensible \n         defaults depending on the number of cores. ",
        "Line" : 444,
        "CharPositionInLine" : 56
      },
      "36" : {
        "Text" : " Store execution times",
        "Line" : 473,
        "CharPositionInLine" : 42
      },
      "37" : {
        "Text" : " Pass any command-line properties that may alter tests' behavior. ",
        "Line" : 504,
        "CharPositionInLine" : 82
      },
      "38" : {
        "Text" : " \n       Code duplication detection.\n    ",
        "Line" : 520,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : " \n       FindBugs static analysis.\n    ",
        "Line" : 558,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : " Delete some classes we don't want to have analyzed ",
        "Line" : 569,
        "CharPositionInLine" : 64
      },
      "41" : {
        "Text" : " \n       Code coverage calculation.\n    ",
        "Line" : 597,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : " \n       JavaDoc generation.\n    ",
        "Line" : 642,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : " Unfortunately this needs to be given explicitly for doc-files to work... ",
        "Line" : 703,
        "CharPositionInLine" : 88
      },
      "44" : {
        "Text" : " Oracle only allows browsers (user-agent firewall restriction), so link to the docs, but keep the package-list offline. ",
        "Line" : 708,
        "CharPositionInLine" : 134
      },
      "45" : {
        "Text" : " Fallback to empty? ",
        "Line" : 778,
        "CharPositionInLine" : 32
      },
      "46" : {
        "Text" : " \n       Build core JAR.\n    ",
        "Line" : 787,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "\n        Carrot2 mini JAR, just core and algorithms. No extended support for Chinese and Arabic.\n    ",
        "Line" : 842,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : " selectors don't seem to work with zipfileset ",
        "Line" : 847,
        "CharPositionInLine" : 60
      },
      "49" : {
        "Text" : " Check if the basic clustering example runs with the mini distribution ",
        "Line" : 860,
        "CharPositionInLine" : 81
      },
      "50" : {
        "Text" : " \n               We add SimpleXML only to stop compiler from complaining about missing\n               annotation definitions. SimpleXML is not required to run basic clustering. \n            ",
        "Line" : 876,
        "CharPositionInLine" : 16
      },
      "51" : {
        "Text" : "\n      Builds examples.\n  ",
        "Line" : 902,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "\n       Builds API distribution: core JAR, dependencies, example source code.\n    ",
        "Line" : 907,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "\n       Distribution build.\n    ",
        "Line" : 1010,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "\n      Maven artefacts.\n    ",
        "Line" : 1053,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : " Try to compile the examples using maven. ",
        "Line" : 1056,
        "CharPositionInLine" : 54
      },
      "56" : {
        "Text" : "\n      Deploy Maven artefacts to SonaType (requires proper sonatype server config in ~/.m2/settings.xml!).\n    ",
        "Line" : 1064,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "\n      Deploy Maven artefacts to SonaType (requires proper sonatype server config in ~/.m2/settings.xml!).\n    ",
        "Line" : 1070,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : " \n      Builds the manual.\n    ",
        "Line" : 1076,
        "CharPositionInLine" : 8
      },
      "59" : {
        "Text" : " \n       Flattened lib directory.\n    ",
        "Line" : 1082,
        "CharPositionInLine" : 8
      },
      "60" : {
        "Text" : "\n      Compile and define custom ANT tasks.\n   ",
        "Line" : 1111,
        "CharPositionInLine" : 7
      },
      "61" : {
        "Text" : "\n      Workbench compilation section.\n  ",
        "Line" : 1116,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : " Copy source plugins and features to the build folder. ",
        "Line" : 1124,
        "CharPositionInLine" : 67
      },
      "63" : {
        "Text" : " Prepare verbose build info. ",
        "Line" : 1152,
        "CharPositionInLine" : 41
      },
      "64" : {
        "Text" : " CARROT-1141: For MacOS builds remove the extra Contents folder created to bypass PDE build issues,\n         fix permissions, relocate files so that the app is self-contained.\n    ",
        "Line" : 1234,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "\n      Source code management: license headers list and replace.\n    ",
        "Line" : 1270,
        "CharPositionInLine" : 8
      },
      "66" : {
        "Text" : " Order matters: first come, first served. ",
        "Line" : 1290,
        "CharPositionInLine" : 58
      },
      "67" : {
        "Text" : " Replace generated headers with a simple statement ",
        "Line" : 1293,
        "CharPositionInLine" : 67
      },
      "68" : {
        "Text" : " Replace empty headers with C2 license ",
        "Line" : 1299,
        "CharPositionInLine" : 55
      },
      "69" : {
        "Text" : "\n       Generate development files for Eclipse.\n   ",
        "Line" : 1314,
        "CharPositionInLine" : 7
      },
      "70" : {
        "Text" : "\n       Pre-commit check for developers\n  ",
        "Line" : 1319,
        "CharPositionInLine" : 6
      },
      "71" : {
        "Text" : "\n       Pre-release source code updates.\n    ",
        "Line" : 1324,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 72
    },
    "core/carrot2-util-text/build.xml" : {
      "ObjectId" : "6037d027dd6ea16dd8008e90d12ca8fdbc388f5c",
      "LastModified" : "2014-05-21T10:06:29Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "doc/build.xml" : {
      "ObjectId" : "39f2d1d8cee09f6cecd3e44ea07af245a3fa513b",
      "LastModified" : "2012-06-14T16:33:15Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  Internal build script for Carrot2 documentation. \n  Please use the 'doc' target from the main build script to build the documentation.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Base dir determined from the build file location ",
        "Line" : 6,
        "CharPositionInLine" : 60
      },
      "2" : {
        "Text" : " Import common macros ",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : " Output directory for the documentation ",
        "Line" : 13,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : " Manual dist file name base ",
        "Line" : 16,
        "CharPositionInLine" : 38
      },
      "5" : {
        "Text" : "\n       Builds Carrot2 Manual\n    ",
        "Line" : 21,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "\n       Builds the manual ZIP archive.\n    ",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "etc/maven/build.xml" : {
      "ObjectId" : "684c2d5b1a7d446fa3c56b57b99a923f81d4d2f5",
      "LastModified" : "2015-05-04T20:02:28Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "etc/maven/poms/core/pom.xml" : {
      "ObjectId" : "6b09e2535ab79ee8e249c160bdbdef15728d7d0d",
      "LastModified" : "2016-02-19T12:48:51Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "etc/maven/poms/mini/pom.xml" : {
      "ObjectId" : "9b9e74dc94bccf7006de101cb7ec0b6491b78436",
      "LastModified" : "2012-06-14T16:33:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Use full javadocs, not a mistake. ",
        "Line" : 65,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 1
    },
    "etc/maven/poms/pom.xml" : {
      "ObjectId" : "1520a70f51b2e9a7216a73281dcc1824fbd1eba0",
      "LastModified" : "2018-06-21T09:47:19Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " This must be an absolute path, otherwise gpg plugin will fail on linux machines. ",
        "Line" : 57,
        "CharPositionInLine" : 94
      },
      "1" : {
        "Text" : " Versions of dependencies. ",
        "Line" : 61,
        "CharPositionInLine" : 39
      },
      "2" : {
        "Text" : " GPG sign artefacts. ",
        "Line" : 191,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 3
    },
    "lib/org.carrot2.antlib/build.xml" : {
      "ObjectId" : "a33b242e9432ad44db852bde236b92344c0a9947",
      "LastModified" : "2012-06-14T16:33:15Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Base dir determined from the build file location ",
        "Line" : 4,
        "CharPositionInLine" : 62
      },
      "1" : {
        "Text" : " Invoked by build files into which this one is imported. ",
        "Line" : 8,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 2
    },
    "lib/org.carrot2.antlib/pom.xml" : {
      "ObjectId" : "e1fad7373fbba6513d7438545d9396b37e71ffdd",
      "LastModified" : "2015-05-04T20:02:28Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " We use SonaType for publishing artefacts. Parent POM makes things easier here. ",
        "Line" : 6,
        "CharPositionInLine" : 90
      },
      "1" : {
        "Text" : " Project info. ",
        "Line" : 13,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Global properties. ",
        "Line" : 35,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : " Dependencies. ",
        "Line" : 42,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : " Build tuning. ",
        "Line" : 57,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 5
    },
    "workbench/build-conf/build.xml" : {
      "ObjectId" : "7aa7854e6cbb4e5dfa1be0f4371708a5a31dbcc4",
      "LastModified" : "2012-06-14T16:33:15Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  Macros for PDE-build.\n  ",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "ANT" : 10,
    "MAVEN" : 6
  },
  "ElapsedTime" : 7843
}