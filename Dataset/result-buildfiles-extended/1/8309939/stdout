{
  "Repository" : "8309939",
  "Revision" : "HEAD",
  "ObjectId" : "ea0aeb35361bd2f22db8c4e333479ea2e27222c3",
  "CommitTime" : "2018-11-11T18:54:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "af6fbdbd28a1da21ffdef8900d99505dfbadfdd9",
      "LastModified" : "2018-10-05T16:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n# This MUST be the first line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n# project name\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n# don't use obscure build types, but only Debug and Release\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n# generate a compile_commands.json file (needed for ninja)\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n\n# make sure the user deliberately selects a  build type\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##\n\n# where supporting modules live\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##\n\n# version number\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# debug build - retrieve current project version from git\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# release build - use hard-coded version string\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "##\n\n# plugin API namespace and version\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##\n\n# cmake -D...=ON|OFF command line feature switches and their default values\n\n#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##\n\n# welcome message\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##\n\n# check for required packages and libraries\n\n#\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# with homebrew, libgettext is keg-only, i.e. not symlinked into\n\n# /usr/local, and it does not provide any pkg-config information of\n\n# its own; hence we have to locate it manually\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "##\n\n# compile flags and options\n\n#\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# default options\n\n#\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# debug builds\n\n#\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# release builds\n\n#\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# the css target is defined after astroid target has been defined\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# needed to find the generated build_config.hh\n\n# needed to find protobuf files\n",
        "Line" : 242,
        "CharPositionInLine" : 26
      },
      "20" : {
        "Text" : "## Build Web Extension\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Xcode needs to be explicitly told about the header files in order to\n\n# show them in the project and automatically display them in the\n\n# assitant editor\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "##\n\n# conditional compilation based on feature switches\n\n#\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##\n\n# pre-compiled style sheets (instead of dynamic at run-time)\n\n#\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Build man pages\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# preferred\n",
        "Line" : 403,
        "CharPositionInLine" : 29
      },
      "26" : {
        "Text" : "##\n\n# embedded editor\n\n#\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##\n\n# plugins\n\n#\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# with homebrew, libffi is keg-only, i.e. not symlinked into\n\n# /usr/local; hence we have to tell pkg-config where to look for\n\n# it\n",
        "Line" : 454,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# this performs a pkg_check_modules()\n",
        "Line" : 459,
        "CharPositionInLine" : 39
      },
      "30" : {
        "Text" : "#\n\n# GObject introspection\n\n#\n",
        "Line" : 462,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# magic happens here\n",
        "Line" : 482,
        "CharPositionInLine" : 50
      },
      "32" : {
        "Text" : "#\n\n# additional source files for astroid (plugin framework)\n\n#\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#\n\n# link astroid against libpeas\n\n#\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "#\n\n# build gir_main executable for introspection\n\n#\n",
        "Line" : 502,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "#\n\n# depenedecies for proper build order\n\n#\n",
        "Line" : 517,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "##\n\n# Installing stuff\n\n#\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Install man page\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# icons are installed in three locations\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "##\n\n# Tests\n\n#\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "cmake/FindGObjectIntrospection.cmake" : {
      "ObjectId" : "df3a89eb0c40a9803cdac2e4c908b14083d3a925",
      "LastModified" : "2018-08-29T09:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find gobject-introspection\n\n#\n\n# Once done this will define\n\n#\n\n#  INTROSPECTION_FOUND - system has gobject-introspection\n\n#  INTROSPECTION_SCANNER - the gobject-introspection scanner, g-ir-scanner\n\n#  INTROSPECTION_COMPILER - the gobject-introspection compiler, g-ir-compiler\n\n#  INTROSPECTION_GENERATE - the gobject-introspection generate, g-ir-generate\n\n#  INTROSPECTION_GIRDIR\n\n#  INTROSPECTION_TYPELIBDIR\n\n#  INTROSPECTION_CFLAGS\n\n#  INTROSPECTION_LIBS\n\n#\n\n# Copyright (C) 2010, Pino Toscano, <pino@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see LICENSE.md.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindNotmuch.cmake" : {
      "ObjectId" : "ae147e16b3455d3500b4e91ccdf6543aec1ec4cb",
      "LastModified" : "2018-08-29T09:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Notmuch\n\n# Once done, this will define\n\n#\n\n#  Notmuch_FOUND          - system has Notmuch\n\n#  Notmuch_VERSION        - the version of the Notmuch shared library\n\n#  Notmuch_INCLUDE_DIRS   - the Notmuch include directories\n\n#  Notmuch_LIBRARIES      - link these to use Notmuch\n\n#  Notmuch_GMIME_VERSION  - the GMime version notmuch was linked against\n\n#  Notmuch_INDEX_FILE_API - whether Notmuch has the notmuch_database_index_file() API\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find include directory\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find library diretcory\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# version information\n\n# (unfortunately cannott use libfind_version_header, because notmuch.h\n\n# defines separate macros for major, minor, and micro versions, and\n\n# without the double quotes)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set common output variables\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# will set Notmuch_FOUND, Notmuch_INCLUDE_DIRS and Notmuch_LIBRARIES\n",
        "Line" : 62,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# notmuch_database_index_file() API presence\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# GMime version notmuch was linked against\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/GObjectIntrospectionMacros.cmake" : {
      "ObjectId" : "277bb9bb8cdcfdbb445b068c70557c29fb21545f",
      "LastModified" : "2018-08-29T09:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2010, Pino Toscano, <pino@kde.org>\n\n#           (C) 2017, Alexander Adolf <alexander.adolf@condition-alpha.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying LICENSE.md.\n\n#\n\n# Sample use:\n\n#\n\n# include (FindGObjectIntrospection)   # this performs a pkg_check_modules()\n\n# if(INTROSPECTION_FOUND)\n\n#   include (GObjectIntrospectionMacros)\n\n#   set (GIR_NAME \"${PROJECT_NAME}-${PROJECT_VERSION}.gir\")\n\n#   set (${GIR_NAME}_NAMESPACE      ${PROJECT_NAME})\n\n#   set (${GIR_NAME}_VERSION        ${PROJECT_VERSION})\n\n#   set (${GIR_NAME}_INCLUDEPKGS    GObject-2.0)   # add more as needed\n\n#   set (${GIR_NAME}_PROGRAM        ${CMAKE_CURRENT_BINARY_DIR}/gir_main)\n\n#   set (${GIR_NAME}_FILES\n\n#     #\n\n#     # your source files here\n\n#     #\n\n#     )\n\n#   list ( APPEND INTROSPECTION_GIRS ${GIR_NAME} )\n\n#   set (INTROSPECTION_SCANNER_ARGS --warn-all)\n\n#   gir_add_introspections (INTROSPECTION_GIRS)\n\n#   #\n\n#   # define your gir_main target here\n\n#   #\n\n#   # must build gir_main first in order to be able to infer typelibs\n\n#   add_dependencies ( gir-typelibs gir_main )\n\n# endif()\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_custom_target(gir-girs)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_dependencies(gir-typelibs gir-girs)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Transform a string to something which can be referenced through a variable\n\n# without automake/make complaining, eg Gtk-2.0.gir -> Gtk_2_0_gir\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set(_gir_girs)\n\n# set(_gir_typelibs)\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Namespace and Version is either fetched from the gir filename\n\n# or the _NAMESPACE/_VERSION variable combo\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# _PROGRAM is an optional variable which needs it's own --program argument\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Variables which provide lists of things\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# FIXME: reuse the LIBTOOL variable from automake if it's set\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/InstallSymbolicLink.cmake" : {
      "ObjectId" : "0257ffc1279cbe6fa641e63fd4a71ab30ae3faaa",
      "LastModified" : "2018-08-29T09:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# shamelessly inspired by https://github.com/bro/cmake/blob/master/InstallSymlink.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/LibFindMacros.cmake" : {
      "ObjectId" : "3ef5844dd1e1805f0eeadd3b74b5abdd7e78195b",
      "LastModified" : "2018-08-29T09:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Version 2.2\n\n# Public Domain, originally written by Lasse Kärkkäinen <tronic>\n\n# Maintained at https://github.com/Tronic/cmake-modules\n\n# Please send your improvements as pull requests on Github.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find another package and make it a dependency of the current package.\n\n# This also automatically forwards the \"REQUIRED\" argument.\n\n# Usage: libfind_package(<prefix> <another package> [extra args to find_package])\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A simple wrapper to make pkg-config searches a bit easier.\n\n# Works the same as CMake's internal pkg_check_modules but is always quiet.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid useless copy&pasta by doing what most simple libraries do anyway:\n\n# pkg-config, find headers, find library.\n\n# Usage: libfind_pkg_detect(<prefix> <pkg-config args> FIND_PATH <name> [other args] FIND_LIBRARY <name> [other args])\n\n# E.g. libfind_pkg_detect(SDL2 sdl2 FIND_PATH SDL.h PATH_SUFFIXES SDL2 FIND_LIBRARY SDL2)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse arguments\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find library\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Extracts a version #define from a version.h file, output stored to <PREFIX>_VERSION.\n\n# Usage: libfind_version_header(Foobar foobar/version.h FOOBAR_VERSION_STR)\n\n# Fourth argument \"QUIET\" may be used for silently testing different define names.\n\n# This function does nothing if the version variable is already defined.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip processing if we already have a version or if the include dir was not found\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Process optional arguments\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Read the header and parse for version number\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# No regex match?\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Export the version string\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Skip processing if already processed during this configuration run\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Start with the assumption that the package was found\n",
        "Line" : 108,
        "CharPositionInLine" : 19
      },
      "15" : {
        "Text" : "# Did we find any files? Did we miss includes? These are for formatting better error messages.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Shorthands for some variables that we need often\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Lists of config option names (all, includes, libs)\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Process deps to add to \n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# The package seems to export option lists that we can use, woohoo!\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# If plural forms don't exist or they equal singular forms\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Singular forms can be used\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Oh no, we don't know the option names\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Include/library names separated by spaces (notice: not CMake lists)\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Process all includes and set found false if any are missing\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Process all libraries and set found false if any are missing\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Version checks\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# If all-OK, hide all config options, export variables, print status and exit\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Format messages for debug info and the type of error\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Fatal error out if REQUIRED\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Otherwise just print a nasty warning\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 31
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "59b7d99bf615e2ce3644de428bc54b811cc4f91f",
      "LastModified" : "2018-08-29T09:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n# Tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the tests\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 7
  },
  "ElapsedTime" : 1440
}