{
  "Repository" : "108199",
  "Revision" : "HEAD",
  "ObjectId" : "00d8220c4bed1d28ca4a80ec6e7a851f5062f929",
  "CommitTime" : "2019-03-10T10:55:35Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "12475d2a78ec7610bc854cc99f776146ce373c3a",
      "LastModified" : "2019-02-16T21:03:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No need for this path, just a workaround to make cmake check pass on all systems\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Just in case user installed RPMs from http://yum.postgresql.org/\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################\n\n# Detect available headers and set global compiler options\n\n#############################################################\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################\n\n# Find necessary libraries\n\n#############################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# first try to find the version\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############### Libraries are found now ########################\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############################################################\n\n# Build the library and executable file\n\n#############################################################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#############################################################\n\n# Build tests\n\n#############################################################\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#############################################################\n\n# Install\n\n#############################################################\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindLua.cmake" : {
      "ObjectId" : "1c24416459744ebfb6246ff9c27aa6b4abf2d4a0",
      "LastModified" : "2015-10-22T18:56:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLua\n\n# -------\n\n#\n\n#\n\n#\n\n# Locate Lua library This module defines\n\n#\n\n# ::\n\n#\n\n#   LUA_FOUND          - if false, do not try to link to Lua\n\n#   LUA_LIBRARIES      - both lua and lualib\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\n\n#   LUA_VERSION_STRING - the version of Lua found\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\n\n#\n\n#\n\n#\n\n# Note that the expected include convention is\n\n#\n\n# ::\n\n#\n\n#   #include \"lua.h\"\n\n#\n\n# and not\n\n#\n\n# ::\n\n#\n\n#   #include <lua/lua.h>\n\n#\n\n# This is because, the lua location is not standardized and may exist in\n\n# locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Copyright 2013 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Fink\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 107,
        "CharPositionInLine" : 13
      },
      "7" : {
        "Text" : "# Blastwave\n",
        "Line" : 108,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# At least 5.[012] have different ways to express the version\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/FindLuaJIT.cmake" : {
      "ObjectId" : "0d444b7891f6bd8c4afe19a1a20ee0534ea219aa",
      "LastModified" : "2018-10-22T19:13:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate LuaJIT library\n\n# This module defines\n\n#  LUAJIT_FOUND, if false, do not try to link to Lua\n\n#  LUAJIT_LIBRARIES\n\n#  LUAJIT_INCLUDE_DIR, where to find luajit.h\n\n#  LUAJIT_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Copied from default CMake FindLua51.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 17,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 18,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 19,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUAJIT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/FindOsmium.cmake" : {
      "ObjectId" : "9eaf7349e8f2363ff587c27e29e7f9842d5fc34c",
      "LastModified" : "2018-04-06T19:43:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  FindOsmium.cmake\n\n#\n\n#  Find the Libosmium headers and, optionally, several components needed\n\n#  for different Libosmium functions.\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Usage:\n\n#\n\n#    Copy this file somewhere into your project directory, where cmake can\n\n#    find it. Usually this will be a directory called \"cmake\" which you can\n\n#    add to the CMake module search path with the following line in your\n\n#    CMakeLists.txt:\n\n#\n\n#      list(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\n#\n\n#    Then add the following in your CMakeLists.txt:\n\n#\n\n#      find_package(Osmium [version] REQUIRED COMPONENTS <XXX>)\n\n#      include_directories(SYSTEM ${OSMIUM_INCLUDE_DIRS})\n\n#\n\n#    The version number is optional. If it is not set, any version of\n\n#    libosmium will do.\n\n#\n\n#    For the <XXX> substitute a space separated list of one or more of the\n\n#    following components:\n\n#\n\n#      pbf        - include libraries needed for PBF input and output\n\n#      xml        - include libraries needed for XML input and output\n\n#      io         - include libraries needed for any type of input/output\n\n#      geos       - include if you want to use any of the GEOS functions\n\n#      gdal       - include if you want to use any of the OGR functions\n\n#      proj       - include if you want to use any of the Proj.4 functions\n\n#      sparsehash - include if you use the sparsehash index\n\n#\n\n#    You can check for success with something like this:\n\n#\n\n#      if(NOT OSMIUM_FOUND)\n\n#          message(WARNING \"Libosmium not found!\\n\")\n\n#      endif()\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Variables:\n\n#\n\n#    OSMIUM_FOUND         - True if Osmium found.\n\n#    OSMIUM_INCLUDE_DIRS  - Where to find include files.\n\n#    OSMIUM_XML_LIBRARIES - Libraries needed for XML I/O.\n\n#    OSMIUM_PBF_LIBRARIES - Libraries needed for PBF I/O.\n\n#    OSMIUM_IO_LIBRARIES  - Libraries needed for XML or PBF I/O.\n\n#    OSMIUM_LIBRARIES     - All libraries Osmium uses somewhere.\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the list of directories where we look for osmium includes.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 62,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check libosmium version number\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  Check for optional components\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'io' is an alias for 'pbf' and 'xml'\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'ogr' is an alias for 'gdal'\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'pbf'\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'xml'\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'geos'\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'gdal' (alias 'ogr')\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'proj'\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'sparsehash'\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Find size of sparsetable::size_type. This does not work on older\n\n# CMake versions because they can do this check only in C, not in C++.\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Sparsetable::size_type must be at least 8 bytes (64bit), otherwise\n\n# OSM object IDs will not fit.\n",
        "Line" : 233,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  Check that all required libraries are available\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and the optional version check\n\n# and set OSMIUM_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  A function for setting the -pthread option in compilers/linkers\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  Add compiler flags\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disable warning C4068: \"unknown pragma\" because we want it to ignore\n\n# pragmas for other compilers.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Disable warning C4715: \"not all control paths return a value\" because\n\n# it generates too many false positives.\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Disable warning C4351: new behavior: elements of array '...' will be\n\n# default initialized. The new behaviour is correct and we don't support\n\n# old compilers anyway.\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Disable warning C4503: \"decorated name length exceeded, name was truncated\"\n\n# there are more than 150 of generated names in libosmium longer than 4096 symbols supported in MSVC\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# following only available from cmake 2.8.12:\n\n#   add_compile_options(-stdlib=libc++)\n\n# so using this instead:\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# This is a set of recommended warning options that can be added when compiling\n\n# libosmium code.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "cmake/FindProtozero.cmake" : {
      "ObjectId" : "ad16cabeb00e4a2d6cb381cf083491ba24ebeb6f",
      "LastModified" : "2018-04-06T19:43:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  FindProtozero.cmake\n\n#\n\n#  Find the protozero headers.\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Usage:\n\n#\n\n#    Copy this file somewhere into your project directory, where cmake can\n\n#    find it. Usually this will be a directory called \"cmake\" which you can\n\n#    add to the CMake module search path with the following line in your\n\n#    CMakeLists.txt:\n\n#\n\n#      list(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\n#\n\n#    Then add the following in your CMakeLists.txt:\n\n#\n\n#      find_package(Protozero [version] [REQUIRED])\n\n#      include_directories(SYSTEM ${PROTOZERO_INCLUDE_DIR})\n\n#\n\n#    The version number is optional. If it is not set, any version of\n\n#    protozero will do.\n\n#\n\n#      if(NOT PROTOZERO_FOUND)\n\n#          message(WARNING \"Protozero not found!\\n\")\n\n#      endif()\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Variables:\n\n#\n\n#    PROTOZERO_FOUND        - True if Protozero was found.\n\n#    PROTOZERO_INCLUDE_DIR  - Where to find include files.\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find include path\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check version number\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(PROTOZERO_INCLUDE_DIRS \"${PROTOZERO_INCLUDE_DIR}\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "7eff9158674c4fbb833d56f592621f53854b2b10",
      "LastModified" : "2019-02-25T22:59:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fixture for creating test tablespace under a pg_virtualenv\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these tests require LUA support\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 1677
}