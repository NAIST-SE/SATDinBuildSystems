{
  "Repository" : "3480562",
  "Revision" : "HEAD",
  "ObjectId" : "6259bc8fc29b8a8c88ddd0dbb49a1208a83f1ef9",
  "CommitTime" : "2014-06-25T13:55:13Z",
  "Files" : {
    "Sofa/CMakeLists.txt" : {
      "ObjectId" : "cea0487853ba53a92ca6654f7be64c95dfafa33e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# automatically use ccache if it is installed\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable the organisation in folders for generators that support\n\n# it. (E.g. some versions of Visual Studio have 'solution folders')\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# utils macros\n\n# paths\n\n# sofa build functions\n\n# user options\n",
        "Line" : 20,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : "# Generate config.h header\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "Sofa/applications/plugins/ARTrack/CMakeLists.txt" : {
      "ObjectId" : "01ad7aa9c67c73fdb99518d63241a9e313d3bd04",
      "LastModified" : "2014-03-05T13:33:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/CGALPlugin/CMakeLists.txt" : {
      "ObjectId" : "bdddbcb5e31a3ebe49955fb96d6371907af9d02c",
      "LastModified" : "2014-02-11T13:19:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#copy required CGAL dlls\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#dependency to FULL boost libraries....\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/ColladaSceneLoader/CMakeLists.txt" : {
      "ObjectId" : "54483e0cfd1e219fe903e47149353e7697b73e81",
      "LastModified" : "2014-03-19T09:53:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find assimp library & include directories...\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## assimp dll\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#todo add a test for assimp version >= 3\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Sofa/applications/plugins/Compliant/CMakeLists.txt" : {
      "ObjectId" : "9ee4dbbb78294c591de00154999268fc9c1b9c23",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#preconditioner/IncompleteCholeskyPreconditioner.h\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#preconditioner/IncompleteCholeskyPreconditioner.cpp\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# include python files\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if(WIN32)\n\n#\tinclude_directories(\"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Include\")\n\n#\tlink_directories(\"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Lib\")\n\n#else()\n\n#\tinclude_directories(\"/usr/include/suitesparse/\")\n\n#endif()\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# is this really useful?\n\n#if(NOT APPLE)\n\n#\tAddLinkerDependencies(amd lapack blas camd colamd cholmod)\n\n#endif()\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# WIN32: copy the needed dlls from the lib dir to the Sofa bin dir\n\n#if(WIN32)\n\n#\tfile(GLOB sharedObjects \"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Lib/*.dll\")\n\n#\tforeach(sharedObject ${sharedObjects})\n\n#\t\tfile(COPY ${sharedObject} DESTINATION \"${SOFA_BIN_DIR}\")\n\n#\tendforeach()\n\n#endif()\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#### BOOST ######\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# linking with boost-system is needed\n\n# that means an installed version of boost is mandatory (sadly)\n\n# I loved the header-only boost\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clock_gettime\n",
        "Line" : 199,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 9
    },
    "Sofa/applications/plugins/Compliant/Compliant_gui/CMakeLists.txt" : {
      "ObjectId" : "a9c032325ced660ebb6af258c8e7ad575f22820f",
      "LastModified" : "2014-01-03T16:33:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these header files do not need MOCcing\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/Compliant/Compliant_run/CMakeLists.txt" : {
      "ObjectId" : "815d544af6541c8a8014392c4fb3c8ee840d5315",
      "LastModified" : "2014-03-05T13:33:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/Compliant/Compliant_test/CMakeLists.txt" : {
      "ObjectId" : "2f22c6126f686382b9e86339a99919cfc6a7dc92",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    set(RC_FILES \"runSOFA.icns\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include python files\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# needed by python tests\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/applications/plugins/Compliant/Compliant_test/python/python.cmake" : {
      "ObjectId" : "35ed68f0f352d6cc6cfa7216db978ba1e27d4f60",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/Compliant/python/python.cmake" : {
      "ObjectId" : "2897849f4a9ab0acbde7daa080d743f414a9a5e5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/DEPRECATED/PhysicsBasedInteractiveModeler/CMakeLists.txt" : {
      "ObjectId" : "8ae96110cb703a1445f5359c1cdf3177d1500257",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TriangularMeshRefiner / SofaCGALPlugin\n",
        "Line" : 45,
        "CharPositionInLine" : 304
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/DEPRECATED/QtOgreViewer/CMakeLists.txt" : {
      "ObjectId" : "01084f354bdb66459dc68e1a85b6db6524d1e2da",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/DEPRECATED/SofaVRPNClient/CMakeLists.txt" : {
      "ObjectId" : "e519ecab565f813d1fc2cee6f253e9a0ad99b0f5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ContactWarning.h \n\n#ContactDisabler.h \n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#ContactWarning.cpp \n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#ContactDisabler.cpp \n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "Sofa/applications/plugins/DEPRECATED/frame/CMakeLists.txt" : {
      "ObjectId" : "032a5dbcc6a0bd9cfd96cc17d58d5659b5ab5f64",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TetrahedronFEMForceFieldWithExternalMaterial.h \n\n#TetrahedronFEMForceFieldWithExternalMaterial.inl\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#TetrahedronFEMForceFieldWithExternalMaterial.cpp\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#    list(APPEND HEADER_FILES \"HexaRemover.h\")\n\n#    list(APPEND HEADER_FILES \"HexaRemover.inl\")\n\n#    list(APPEND SOURCE_FILES \"HexaRemover.cpp\")\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Sofa/applications/plugins/EmptyCmakePlugin/CMakeLists.txt" : {
      "ObjectId" : "9f97e78a8aea63b8b1b6363700c30bc6315dc564",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/ExternalBehaviorModel/CMakeLists.txt" : {
      "ObjectId" : "745b33ec95466678b34175ffc5efc80d7cd9fc29",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/Flexible/CMakeLists.txt" : {
      "ObjectId" : "5ebc25da46b5856bb404632e339b7c782ec215f6",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#forceField/Flex    ibleTetrahedronFEMForceField.h\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#forceField/FlexibleTetrahedronFEMForceField.cpp\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/Flexible/Flexible_test/CMakeLists.txt" : {
      "ObjectId" : "98ca5c4b9e75476fe5c351f1b1ece23858fe9e74",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    set(RC_FILES \"runSOFA.icns\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Needed by python test\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/Flexible/Flexible_test/scenes/python/python.cmake" : {
      "ObjectId" : "a6e1f8cfa0e0a35f19eab5aab45fecbf0b90bfc0",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/Flexible/python/python.cmake" : {
      "ObjectId" : "870023506c4b273dd721ac6d8bdb923a7f9b7ad5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/Haption/CMakeLists.txt" : {
      "ObjectId" : "d894884529f8ce2ed0029eb713e6ef85e62cdadb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/InvertibleFVM/CMakeLists.txt" : {
      "ObjectId" : "8b02731775108e0dca7aa5b8bc6d1f3beec843ae",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/ManifoldTopologies/CMakeLists.txt" : {
      "ObjectId" : "fa62d652bf1e65c2cb25e6f5cb53fd1346aeee28",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/ManualMapping/CMakeLists.txt" : {
      "ObjectId" : "636558953c5d4f9160836bd7fc2c215d04568944",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/MeshSTEPLoader/CMakeLists.txt" : {
      "ObjectId" : "c30893ed5d63dbacb4eaa47cf781aab46761e192",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## OpenCascade\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#required for OpenCASCADE\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# copy dlls on Windows\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## OpenCascade third party\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "## OpenCascade core\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Sofa/applications/plugins/MultiThreading/CMakeLists.txt" : {
      "ObjectId" : "e6a741d841283f5b35ad6e41d58b53cfced61a32",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#src/Observer.h \n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#src/Observer.cpp \n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#list(APPEND HEADER_FILES \"src/ParallelForTask.h\")\n\n#list(APPEND SOURCE_FILES \"src/ParallelForTask.cpp\")\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "## uncomment this to use the intel threading building block library\n\n#set(SOFA_HAVE_TBB true)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Organize projects into sofa-asclepios folders\n\n#\n\n#SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)\n\n#SET_PROPERTY(TARGET ${PROJECT_NAME}\tPROPERTY FOLDER \"sofa-asclepios\")\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Sofa/applications/plugins/OptiTrackNatNet/CMakeLists.txt" : {
      "ObjectId" : "a056e31bf94e625f6f09bdea6802b87236676946",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/PersistentContact/CMakeLists.txt" : {
      "ObjectId" : "b2a63772bc45e6839e36e7fea04f551febe4f1ab",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/PluginExample/CMakeLists.txt" : {
      "ObjectId" : "bbec8c83bafa84a56137d9addddaec1046a67b2e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make mocced header files path from absolute to relative\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these header files do not need MOCcing\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/Registration/CMakeLists.txt" : {
      "ObjectId" : "9468cb24e93291a7cb62d3ac31d17f1e2a299f52",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SceneCreator/CMakeLists.txt" : {
      "ObjectId" : "902815d88d92ffbe7e96f4a26047a37918b471e9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/Sensable/CMakeLists.txt" : {
      "ObjectId" : "08a719b818196566eca923d1f976e5f355201d28",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SensableEmulation/CMakeLists.txt" : {
      "ObjectId" : "ccdbb3a58df169795239f8a9de01aabed3a211b6",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#NewOmniDriverEmu.h \n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#NewOmniDriverEmu.cpp \n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#IF(WIN32)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(THREADS_USE_PTHREADS_WIN32 true)\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#ENDIF()\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#find_package(Threads REQUIRED)\n\n#include_directories(${THREADS_PTHREADS_INCLUDE_DIR})\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Sofa/applications/plugins/SixenseHydra/CMakeLists.txt" : {
      "ObjectId" : "8025f19da839f1d174ddb4775f631b762f0ca81d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add Sixense SDK\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/SixenseHydra/cmake/FindSixense.cmake" : {
      "ObjectId" : "879b51ca4f0c3309a13ae935ffbd402facba067f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the Sixense SDK\n\n# ------------------------------------\n\n#\n\n# usage:\n\n# find_package(Sixense ...)\n\n#\n\n# searches in SIXENSE_ROOT and usual locations\n\n#\n\n# Sets SIXENSE_INCLUDE_DIR, SIXENSE_LIBRARY_STATIC and SIXENSE_LIBRARY_DYNAMIC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 24,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 25,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 26,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# user installation\n",
        "Line" : 29,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "#prefix is filename, case matters\n",
        "Line" : 72,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 6
    },
    "Sofa/applications/plugins/SofaCUDA/CMakeLists.txt" : {
      "ObjectId" : "287b72a86b403f78a036b65da7d8c40e813d8a5e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# quick and dirty fix for nvcc compatibility with -fno-partial-inlining flag\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#sofa/gpu/cuda/CudaTetrahedronTLEDForceField.inl\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#sofa/gpu/cuda/CudaHexahedronTLEDForceField.inl\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#Give current directory to nvcc compiler\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Make these compiler definition available to nvcc\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Get nvcc compiler to build the library\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#message(STATUS CUDA_SPARSE_LIBRARY=${CUDA_SPARSE_LIBRARY})\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "Sofa/applications/plugins/SofaCarving/CMakeLists.txt" : {
      "ObjectId" : "2a6ed099b7f407a177a144ccc8dcd1903f21f6d6",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaHAPI/CMakeLists.txt" : {
      "ObjectId" : "31861c32371257d77c02d192d31e82fc9097b665",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#copy required HAPI dlls\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#file(COPY \"${HAPI_DIR}/bin/HAPI_*.dll\" DESTINATION ${SOFA_BIN_DIR})\n\n#file(COPY \"${HAPI_DIR}/bin/H3DUtil_*.dll\" DESTINATION ${SOFA_BIN_DIR})\n\n#file(COPY \"${HAPI_DIR}/External/bin/pthreadVC2.dll\" DESTINATION ${SOFA_BIN_DIR})\n\n#file(COPY \"${HAPI_DIR}/External/bin/FreeImage.dll\" DESTINATION ${SOFA_BIN_DIR})\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# The variables set here must be set by the CMakeLists.txt that sets H3D_USE_DEPENDENCIES_ONLY to true.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "Sofa/applications/plugins/SofaOpenCL/CMakeLists.txt" : {
      "ObjectId" : "ec84f19d83c5a549e480dade58163ac9667a3be9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# taucs taucs_mt system-taucs)\n",
        "Line" : 127,
        "CharPositionInLine" : 106
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/SofaOpenCL/kernels/CMakeLists.txt" : {
      "ObjectId" : "018013c8581e60713ffbfd1d1aebfaafe7aec4f4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaOpenCL/oclRadixSort/CMakeLists.txt" : {
      "ObjectId" : "ab0260c6316e367d982d7bdfdfb6e70f76ec5f96",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaOpenCL/tools/CMakeLists.txt" : {
      "ObjectId" : "828e3029f6161e81d6407575648515dc718ba78f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaPML/CMakeLists.txt" : {
      "ObjectId" : "99e47ff819d01d5f330d4cfe9a0e0c9251235a08",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaPython/CMakeLists.txt" : {
      "ObjectId" : "9bf6492e5f0c7303bfe53c09f8ddd882a7d592e2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## plugin external dependencies\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# on MacOS you must use macport to use python SDK\n\n# standard FindPythonLibs script mess with macports and apple version\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# fixes compilation on 10.9, where python 2.7 is a system\n\n# framework\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# include python files\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Python's implementation deliberately breaks strict-aliasing rules, so we\n\n# compile with -fno-strict-aliasing to prevent the compiler from relying on\n\n# those rules to optimize the code.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Sofa/applications/plugins/SofaPython/SofaPython_test/CMakeLists.txt" : {
      "ObjectId" : "7f279a65a619839431e2755fecbdc2099935140e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    set(RC_FILES \"runSOFA.icns\")\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include python files\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# needed by python tests\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/applications/plugins/SofaPython/SofaPython_test/python/python.cmake" : {
      "ObjectId" : "7e237ccbb858fc182b71ca6b39888ba28304eee2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaPython/python/python.cmake" : {
      "ObjectId" : "841cea1fb3b33a202336350ed64e381455b40796",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaSimpleGUI/CMakeLists.txt" : {
      "ObjectId" : "6eb3a2c1cb819157ff2aaa72450dc3106c378c99",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaSimpleGUI/glutOnePick/CMakeLists.txt" : {
      "ObjectId" : "f8144ffe902e59cf4e0670cb8e2ae06516fbde7b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaSimpleGUI/qtQuickSofa/CMakeLists.txt" : {
      "ObjectId" : "992e46672dfcb5b035201f850fe52398f522b744",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# on Window, Qt packages need the glu32 lib full path, but they do not find it without help\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to use QT > 5.0\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# do not use \"set(CMAKE_AUTOMOC ON)\" since all the mocced files will be compiled by a single compilation unit leading to a \"out of heap space\" issue on MSVC\n",
        "Line" : 52,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 3
    },
    "Sofa/applications/plugins/SofaSimpleGUI/qtSofa/CMakeLists.txt" : {
      "ObjectId" : "fcd0efa44ae401ced750151515e2416e02e55743",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/SofaTest/CMakeLists.txt" : {
      "ObjectId" : "78ae2acd951073f7e0ee4e2abc026b23d741a5b9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include python files\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# TODO: shouldn't this be on for everyone ?\n\n# FF: it seems that it is not needed, and even problematic, on Linux (?)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/SofaTest/SofaTest_test/CMakeLists.txt" : {
      "ObjectId" : "9eeacf3a0f19c3cf3ca6d75610f56c30a03f3838",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    set(RC_FILES \"runSOFA.icns\")\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include python test files\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Define a macro to get the absolute path to a directory;\n\n# absolute paths are perfectly OK for test resources.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/applications/plugins/SofaTest/SofaTest_test/python_tests/python.cmake" : {
      "ObjectId" : "c9edb9f16a73901efcae0cbda35734c8665885a4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/SofaTest/python/python.cmake" : {
      "ObjectId" : "e113a0a52b7d5a018145e886d8fd0d9b672726c4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/THMPGSpatialHashing/CMakeLists.txt" : {
      "ObjectId" : "05884560e4e69e2115999e1c4c3d6af66a36b33a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(README_FILES Compliant.txt)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(WIN32)\n\n#\tinclude_directories(\"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Include\")\n\n#\tlink_directories(\"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Lib\")\n\n#else()\n\n#\tinclude_directories(\"/usr/include/suitesparse/\")\n\n#endif()\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#AddCompilerDefinitions(\"SOFA_BUILD_THMPGSpatialHashing\")\n\n#AddLinkerDependencies(SofaEigen2Solver SofaUserInteraction SofaComponentMisc SofaHelper SofaSimulationGraph)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# is this really useful?\n\n#if(NOT APPLE)\n\n#\tAddLinkerDependencies(amd lapack blas camd colamd cholmod)\n\n#endif()\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# WIN32: copy the needed dlls from the lib dir to the Sofa bin dir\n\n#if(WIN32)\n\n#\tfile(GLOB sharedObjects \"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Lib/*.dll\")\n\n#\tforeach(sharedObject ${sharedObjects})\n\n#\t\tfile(COPY ${sharedObject} DESTINATION \"${SOFA_BIN_DIR}\")\n\n#\tendforeach()\n\n#endif()\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#### BOOST ######\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# linking with boost-system is needed\n\n# that means an installed version of boost is mandatory (sadly)\n\n# I loved the header-only boost\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clock_gettime\n",
        "Line" : 63,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 8
    },
    "Sofa/applications/plugins/THMPGSpatialHashing/THMPGSpatialHashing_test/CMakeLists.txt" : {
      "ObjectId" : "50deaac580f78e8a35607487a390d752548315c3",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES})\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#AddLinkerDependencies(SofaTest_test)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/plugins/Voxelizer/CMakeLists.txt" : {
      "ObjectId" : "4f6cc616e9525a8e16c85f1a9a1f1ff27c2f5c50",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( SofaVoxelizerLibs REQUIRED)\n\n#include_directories(${SOFAVOXELIZER_INCLUDE_DIRS})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/Xitact/CMakeLists.txt" : {
      "ObjectId" : "9d97dbb67940d66b86df353b6205db2f3674da4e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/plugins/image/CMakeLists.txt" : {
      "ObjectId" : "61660d7f87eef239e1bb5a82a84bf36b069d7060",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AddLinkerDependencies(${OPENGL_LIBRARIES})\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/plugins/image/image_gui/CMakeLists.txt" : {
      "ObjectId" : "7dbad3a3fbbbc585d1b986b57de64953218faf19",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these header files need MOCcing\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# QImageMouseButtonsWidget.h\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# following files do not need MOCcing\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# QImageMouseButtonsWidget.cpp\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Sofa/applications/plugins/image/imagetoolbox/imagetoolbox.cmake" : {
      "ObjectId" : "ff8e4fdd653566b9ab91fc42edaeb40d169c9a02",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these header files need MOCcing\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these header files does not need MOCcing\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/projects/GenerateRigid/CMakeLists.txt" : {
      "ObjectId" : "606ccb46d29dbe08ac0198371ffdc9d30a1efddc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/Modeler/CMakeLists.txt" : {
      "ObjectId" : "53890aaa124bf64bc938b3ae4324ee4358970770",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/Modeler/exec/CMakeLists.txt" : {
      "ObjectId" : "87ef5a9214d153285a3e883ce7127a142a3ae68b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make resource files path from absolute to relative\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/applications/projects/Modeler/lib/CMakeLists.txt" : {
      "ObjectId" : "7dda9ef0517e0bd5a535569ade43d1328bcb4197",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SofaGuiCommon Qwt SofaBaseVisual SofaExporter SofaLoader SofaOpenglVisual SofaMiscForceField\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/applications/projects/SofaFlowVR/CMakeLists.txt" : {
      "ObjectId" : "0a72d082ab07cd53a0e668b39ea3b9d79e9ff4b2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/SofaPhysicsAPI/CMakeLists.txt" : {
      "ObjectId" : "db6f3c697b4e9ae2d6cdb2927651537b026eab69",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/generateDoc/CMakeLists.txt" : {
      "ObjectId" : "651924da3bc2b0341b8d9bb73cab5b0a9d086456",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/generateTypedefs/CMakeLists.txt" : {
      "ObjectId" : "9a0d613f9346b064c6928c5abd89f64c082946cc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/meshconv/CMakeLists.txt" : {
      "ObjectId" : "18b29f3ad1fc516008d91a657276ad3bec75d662",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/myCfExport/CMakeLists.txt" : {
      "ObjectId" : "81c58b50a240152542d825f8438811d5be3de18f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/runSofa/CMakeLists.txt" : {
      "ObjectId" : "94f45562dd7cc5227b257353328fde9cbaed6d40",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaBatch/CMakeLists.txt" : {
      "ObjectId" : "afcfb519210f8435a5d1f1f4fb309bf07da296e1",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaInfo/CMakeLists.txt" : {
      "ObjectId" : "9843a63d9c06e5ceed7ecc4662619d8dcd048cda",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaInitTimer/CMakeLists.txt" : {
      "ObjectId" : "39343e4e5be6ba6a896e3028f99d38ecc4be33ff",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaOPENCL/CMakeLists.txt" : {
      "ObjectId" : "40cf7bb4bbaa92110d88210df2895676463817ad",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaProjectExample/CMakeLists.txt" : {
      "ObjectId" : "d61f00d027bdb1cddec4ee636a7139ec721a99c5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaTypedefs/CMakeLists.txt" : {
      "ObjectId" : "c277e100d4f255062fab5002a6bede7b7ec1d133",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/sofaVerification/CMakeLists.txt" : {
      "ObjectId" : "50c9f9df3c4d655c197578b9f34e5fe4e8c3cd2c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/projects/xmlconvert-displayflags/CMakeLists.txt" : {
      "ObjectId" : "e628df7588e41d31c6e9ce949e51714e1664b48f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/sofa/gui/CMakeLists.txt" : {
      "ObjectId" : "b6d9a98df53f185dd563edde967237509d4bdb8a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/sofa/gui/SofaGuiCommon/CMakeLists.txt" : {
      "ObjectId" : "5b86e3a8198a72189571d39482a944a125c33ec4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/sofa/gui/SofaGuiMain/CMakeLists.txt" : {
      "ObjectId" : "e8a66247bec3ef38eae80f051300e3da4b061ada",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/sofa/gui/glut/CMakeLists.txt" : {
      "ObjectId" : "93d912fd61e1fd4644f53b484060ea1c2a13fa08",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/sofa/gui/qt/CMakeLists.txt" : {
      "ObjectId" : "7a2b763f641b3ac9e2871937087520df349dbe5c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \t\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# these header files do not need MOCcing\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/applications/sofa/gui/qt/viewer/qgl/CMakeLists.txt" : {
      "ObjectId" : "b5ff52989e5668d6c2818909e17a6835ebfb0c3a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/sofa/gui/qt/viewer/qt/CMakeLists.txt" : {
      "ObjectId" : "b5ff52989e5668d6c2818909e17a6835ebfb0c3a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/CMakeLists.txt" : {
      "ObjectId" : "67c268c01c6a9937c0b782c2eee1d7603bfc14eb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#RegisterProjects(\"ObjectCreator\" PATH \"${CMAKE_CURRENT_SOURCE_DIR}/objectCreator\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#RegisterProjects(\"OneParticleWithSofaTypedefs\" OPTION \"SOFA-TUTORIAL_ONE_PARTICLE_WITH_SOFA_TYPEDEFS\" COMPILE_DEFINITIONS \"SOFA_HAVE_TUTORIALS\" PATH \"${CMAKE_CURRENT_SOURCE_DIR}/oneParticleWithSofaTypedefs\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#RegisterProjects(\"AnatomyModelling\" OPTION \"SOFA-TUTORIAL_ANATOMY_MODELLING\" COMPILE_DEFINITIONS \"SOFA_HAVE_TUTORIALS\" PATH \"${CMAKE_CURRENT_SOURCE_DIR}/anatomyModelling\") # currently there is no CMakeLists.txt\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/applications/tutorials/chainHybrid/CMakeLists.txt" : {
      "ObjectId" : "3cbeee4b6ee3cde35e9d2824b3ba35ac294b577d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/compositeObject/CMakeLists.txt" : {
      "ObjectId" : "4d791c86231b4c334595ff8eeac11ae24eca9b4d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/houseOfCards/CMakeLists.txt" : {
      "ObjectId" : "bbb57694672581e01eadf2be736c73d467913b9f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/mixedPendulum/CMakeLists.txt" : {
      "ObjectId" : "afe057de2c80d32f9cb7b0bf92d63d41027a7ec7",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/oneParticle/CMakeLists.txt" : {
      "ObjectId" : "0cd132c6ed724b1a175cb67bbc2876b6c190b627",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/oneParticleWithSofaTypedefs/CMakeLists.txt" : {
      "ObjectId" : "2ca2b6ec04816ad5fcc18797cea3d8660bd53d60",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/applications/tutorials/oneTetrahedron/CMakeLists.txt" : {
      "ObjectId" : "0175d6d1dddb682ebfd5d5e697f4d08e1631ee63",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/cmake/Modules/CGAL_GeneratorSpecificSettings.cmake" : {
      "ObjectId" : "b73014a8fa5d443cba6d64ace5f4428dc3f6ad51",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From james Bigler, in the cmake users list.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Sofa/cmake/Modules/FindCGAL.cmake" : {
      "ObjectId" : "b71bbb1dfcd2117b08da6ac93ddb43f034eb8270",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The following module is based on FindVTK.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find a CGAL installation or binary tree.\n\n# The following variables are set if CGAL is found.  If CGAL is not\n\n# found, CGAL_FOUND is set to false.\n\n#\n\n#  CGAL_FOUND         - Set to true when CGAL is found.\n\n#  CGAL_USE_FILE      - CMake file to use CGAL.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Construct consitent error messages for use below.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get the system search path as a list.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Construct a set of paths relative to the system search path.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# Look for an installation or build tree.\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Look for an environment variable CGAL_DIR.\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Look in places relative to the system executable search path.\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Look in standard UNIX install locations.\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Read from the CMakeSetup registry entries.  It is likely that\n\n# CGAL will have been recently built.\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# try to find the paths manually...\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "Sofa/cmake/Modules/FindCUDASparse.cmake" : {
      "ObjectId" : "a9ae0601dd913d285575b0f8efb9efcc70cb8d9b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The script defines the following variables:\n\n#\n\n##############################################################################\n\n# Cutil library: CUDA_SPARSE_LIBRARY\n\n##############################################################################\n\n#\n\n#\n\n# CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA toolkit. As the sparse library is\n\n# part of the CUDA toolkit, this suffices to find the\n\n# library.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCUDASparse.cmake\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/cmake/Modules/FindGLEW.cmake" : {
      "ObjectId" : "7d170efc0d0a6c24ebd1e2c88e95dd7ec35aae22",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines the following variables:\n\n#  GLEW_INCLUDE_DIRS - include directories for GLEW\n\n#  GLEW_LIBRARIES - libraries to link against GLEW\n\n#  GLEW_FOUND - true if GLEW has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# quick and dirty fix fore some macs using macports\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#message(STATUS \"GLEW Lib found: GLEW_LIBRARIES=${GLEW_LIBRARIES} GLEW_INCLUDE_DIR=${GLEW_INCLUDE_DIR}\")\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Sofa/cmake/Modules/FindGMP.cmake" : {
      "ObjectId" : "74f5bcdd846bd64164bc2f3c7cd46f9f650dc550",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the GMP libraries\n\n# This module defines:\n\n#  GMP_FOUND             - system has GMP lib\n\n#  GMP_INCLUDE_DIR       - the GMP include directory\n\n#  GMP_LIBRARIES_DIR     - directory where the GMP libraries are located\n\n#  GMP_LIBRARIES         - Link these to use GMP\n\n#  GMP_IN_CGAL_AUXILIARY - TRUE if the GMP found is the one distributed with CGAL in the auxiliary folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: support MacOSX\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Attempt to load a user-defined configuration for GMP if couldn't be found\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "Sofa/cmake/Modules/FindH3DUtil.cmake" : {
      "ObjectId" : "adebf864b1da439ebb94021b9fddb5c76bcffcc8",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find H3DUtil\n\n# Find the native H3DUTIL headers and libraries.\n\n#\n\n# H3DUTIL_INCLUDE_DIR - where to find H3DUtil.h, etc.\n\n# H3DUTIL_LIBRARIES - List of libraries when using H3DUtil.\n\n# H3DUTIL_FOUND - True if H3DUtil found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#pthread is required for using the H3DUtil library\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Report the results.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Sofa/cmake/Modules/FindHAPI.cmake" : {
      "ObjectId" : "9be4a27b85a197dc46e02f7f3c140c58db20ecf5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find HAPI\n\n# Find the native HAPI headers and libraries.\n\n#\n\n#  HAPI_INCLUDE_DIR -  where to find HAPI.h, etc.\n\n#  HAPI_LIBRARIES    - List of libraries when using HAPI.\n\n#  HAPI_FOUND        - True if HAPI found.\n\n#  HAPI_DIR - where External files are found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Report the results.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Sofa/cmake/Modules/FindMPFR.cmake" : {
      "ObjectId" : "7ae23a4b5b079148c6c31e395d28f675b3cc6922",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR libraries\n\n# MPFR_FOUND - system has MPFR lib\n\n# MPFR_INCLUDE_DIR - the MPFR include directory\n\n# MPFR_LIBRARIES_DIR - Directory where the MPFR libraries are located\n\n# MPFR_LIBRARIES - the MPFR libraries\n\n# MPFR_IN_CGAL_AUXILIARY - TRUE if the MPFR found is the one distributed with CGAL in the auxiliary folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: support MacOSX\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Attempt to load a user-defined configuration for MPFR if couldn't be found\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "Sofa/cmake/Modules/FindOPENGL.cmake" : {
      "ObjectId" : "d45be4a5a15ffff14c51ecdc769aca417e13c135",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines the following variables:\n\n#  OPENGL_INCLUDE_DIRS - include directories for OPENGL\n\n#  OPENGL_LIBRARIES - libraries to link against OPENGL\n\n#  OPENGL_FOUND - true if OPENGL has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_library(OPENGL_gl_LIBRARY OpenGL DOC \"OpenGL lib for OSX\")\n\n#find_library(OPENGL_glu_LIBRARY AGL DOC \"AGL lib for OSX\")\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "#find_library(OPENGL_gl_LIBRARY NAMES opengl32 OpenGL GL MesaGL)\n\n#find_library(OPENGL_glu_LIBRARY NAMES opengl32 OpenGL GL MesaGL)\n",
        "Line" : 34,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "#message(STATUS \"OPENGL Lib found: ${OPENGL_LIBRARIES} ${OPENGL_INCLUDE_DIR}\")\n",
        "Line" : 40,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "Sofa/cmake/Modules/FindOpenCL.cmake" : {
      "ObjectId" : "b30bd1b8cbb5d98e3789f941ad6dbd7728525b53",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenCL\n\n# This module tries to find an OpenCL implementation on your system. It supports\n\n# AMD / ATI, Apple and NVIDIA implementations, but should work, too.\n\n#\n\n# To set manually the paths, define these environment variables:\n\n# OpenCL_INCPATH    - Include path (e.g. OpenCL_INCPATH=/opt/cuda/4.0/cuda/include)\n\n# OpenCL_LIBPATH    - Library path (e.h. OpenCL_LIBPATH=/usr/lib64/nvidia)\n\n#\n\n# Once done this will define\n\n#  OPENCL_FOUND        - system has OpenCL\n\n#  OPENCL_INCLUDE_DIRS  - the OpenCL include directory\n\n#  OPENCL_LIBRARIES    - link these to use OpenCL\n\n#\n\n# WIN32 should work, but is untested\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# need to convert path in the cmake style ?\n",
        "Line" : 43,
        "CharPositionInLine" : 52
      },
      "2" : {
        "Text" : "# On Win32 search relative to the library\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Unix style platforms\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# The AMD SDK currently does not place its headers\n\n# in /usr/include, therefore also search relative\n\n# to the library\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# This is often the same, so clean up\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "Sofa/cmake/Modules/FindOpenCascade.cmake" : {
      "ObjectId" : "d1a6c6d76af4c58f694ffa7624275dfea8b92f67",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenCascade\n\n# Find the OpenCascade headers and libraries.\n\n#\n\n#  OPENCASCADE_INCLUDE_DIR -  where to find BRep_Toolbox.hxx, etc.\n\n#  OPENCASCADE_LIBRARIES_DIR - where to find all the libraries\n\n#  OPENCASCADE_FOUND        - True if OpenCascade found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Search standard locations\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Report the results.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/cmake/Modules/FindOpenHaptics.cmake" : {
      "ObjectId" : "d1e78e095841c1c57f155b62854a826205e2bc60",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenHaptics\n\n# Find the native OPENHAPTICS headers and libraries.\n\n#\n\n#  OPENHAPTICS_INCLUDE_DIR -  where to find OpenHaptics.h, etc.\n\n#  OPENHAPTICS_UTIL_INCLUDE_DIR - where to find HDU/hdu.h, etc.\n\n#  OPENHAPTICS_LIBRARIES    - List of libraries when using OpenHaptics.\n\n#  OPENHAPTICS_FOUND        - True if OpenHaptics found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 34,
        "CharPositionInLine" : 67
      },
      "3" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 35,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 36,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 37,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# OpenHaptics 2.0\n\n# OpenHaptics 3.0\n",
        "Line" : 40,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : "# TODO: Add conditional checking for x64 system\n\n# Look for the library.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 58,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 59,
        "CharPositionInLine" : 53
      },
      "10" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 60,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 61,
        "CharPositionInLine" : 52
      },
      "12" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 62,
        "CharPositionInLine" : 66
      },
      "13" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 63,
        "CharPositionInLine" : 75
      },
      "14" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Report the results.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Sofa/cmake/Modules/FindOptiX.cmake" : {
      "ObjectId" : "8f93c447ad33ebf798325e99b8e895bec72736a4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The distribution contains both 32 and 64 bit libraries.  Adjust the library search path\n\n# based on the bit-ness of the build.  (i.e. 64: bin64, lib64; 32: bin, lib).\n\n# The Apple distribution does not contain a 64 bit version so it should not be set.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the libraries.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find_library(${name}_LIBRARY\n\n#  NAMES ${name}.${version} ${name}\n\n#  )\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#find_file(${name}_DLL\n\n#  NAMES ${name}.${version}.dll\n\n#  )\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Include\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check to make sure we found what we were looking for\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Macro for setting up dummy targets\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Import target \"optix\" for configuration \"Debug\"\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#IMPORTED_LINK_INTERFACE_LIBRARIES \"glu32;opengl32\"\n",
        "Line" : 94,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "#IMPORTED_LINK_INTERFACE_LIBRARIES \"glu32;opengl32\"\n",
        "Line" : 100,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# We don't have versioned filenames for now, and it may not even matter.\n\n#IMPORTED_SONAME \"${optix_soname}\"\n",
        "Line" : 102,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Unknown system, but at least try and provide the minimum required\n\n# information.\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Sets up a dummy target\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Since liboptix.1.dylib is built with an install name of @rpath, we need to\n\n# compile our samples with the rpath set to where optix exists.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# optixu and optix are in different paths.  Make sure there isn't an optixu next to\n\n# the optix library.\n",
        "Line" : 133,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 17
    },
    "Sofa/cmake/Modules/FindPTHREAD.cmake" : {
      "ObjectId" : "4a0aca28f26fdcf0c09af66effb3f3ce4a162601",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find pthread\n\n# Find the native PTHREAD headers and libraries.\n\n#\n\n#  PTHREAD_INCLUDE_DIR -  where to find pthread.h, etc.\n\n#  PTHREAD_LIBRARIES    - List of libraries when using pthread.\n\n#  PTHREAD_FOUND        - True if pthread found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Report the results.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Sofa/cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "288eed3b9aa6a0c74206795f321937f19d1aae32",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to find_package().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>]\n\n#                                           [HANDLE_COMPONENTS]\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# If the package supports components, use the HANDLE_COMPONENTS option to enable\n\n# handling them. In this case, find_package_handle_standard_args() will report\n\n# which components have been found and which are missing, and the <NAME>_FOUND\n\n# variable will be set to FALSE if any of the required components (i.e. not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call.  In this case VERSION_VAR will be set\n\n# to <NAME>_VERSION and the macro will automatically check whether the\n\n# Config module was found.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 129,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 240,
        "CharPositionInLine" : 50
      },
      "15" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 248,
        "CharPositionInLine" : 23
      },
      "16" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 259,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# print the result:\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "Sofa/cmake/Modules/FindSOFA.cmake" : {
      "ObjectId" : "171aecb29f35bda9adbca02b7ef2ee96750d96db",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This Finder allow to find SOFA files for build a project with it.\n\n# In order to use this cmake module, you have to call the find_package(SOFA) command in your CMakeLists.txt\n\n#\n\n# This module defines for use :\n\n# SOFA_LIBRARIES wich contain all LIBRARIES variables in absolute path of Sofa\n\n# SOFA_FOUND, if false, Sofa not found\n\n# SOFA_INCLUDE_DIRS, where to find all the headers\n\n#\n\n# $SOFA_DIR is the entry point of this find package.\n\n# $SOFA_DIR can be set by an environment variable path or in command line\n\n#\n\n# Header files are presumed to be included like\n\n# #include <sofa/defaulttype/Vec.h>\n\n# #include <sofa/defaulttype/Quat.h>\n\n#\n\n# To maintain this script, you just have to :\n\n#  * update if necessary the header file and path to search it to find the framwork/moules/application dirs\n\n#  * update if necessary the include dirs for extlibs\n\n#  * update if necessary name and cmake name of libraries in the corresponding section\n\n#  * update if necessary the paths to search the libs to the find_lib macro\n\n#\n\n# If you have some problem to include this cmake files in your CMake project, be sur you appended CMAKE_MODULE_PATH to the cmake dir :\n\n# list(APPEND CMAKE_MODULE_PATH \"${SOFA_DIR}/cmake\")\n\n#\n\n## TODO :\n\n# In order to have a more flexible FindSOFA.cmake, may be we can allow to use some additional CMAKE variables as input of this cmake module\n\n# to find other specific SOFA lib/include...\n\n#\n\n# Created by Jean-Christophe Lombardo and Jerome Esnault.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## ###########################################################################################\n\n## VERBOSITY SETTINGS\n\n## ###########################################################################################\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ###########################################################################################\n\n## DEFINE SOFA_DIR root path\n\n## ###########################################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Make sur the provided path is a cmake style path with unix /\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Already in cache, be silent\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## ###########################################################################################\n\n## FIND INCLUDE SOFA DIRS\n\n## ###########################################################################################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## ===================== SOFA_INCLUDE_FRAMEWORK_DIR\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#use a file .h looks like important file to find the path directory\n",
        "Line" : 80,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "## comment to allow CMake to search in system environment variables and\n\n## in cmake cache/environment/defined variables\n\n#NO_DEFAULT_PATH\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "## ===================== SOFA_INCLUDE_MODULES_DIR\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#use a file .h looks like important file to find the path directory\n",
        "Line" : 95,
        "CharPositionInLine" : 26
      },
      "11" : {
        "Text" : "## comment to allow CMake to search in system environment variables\n\n## and in cmake cache/environment/defined variables\n\n#NO_DEFAULT_PATH\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## ===================== SOFA_INCLUDE_APPLICATIONS_DIR\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#use a file .h looks like important file to find the path directory\n",
        "Line" : 110,
        "CharPositionInLine" : 23
      },
      "14" : {
        "Text" : "## comment to allow CMake to search in system environment variables and\n\n## in cmake cache/environment/defined variables\n\n#NO_DEFAULT_PATH\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "## ===================== SOFA_INCLUDE_OTHER_DIRS\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#${SOFA_INCLUDE_EXTLIBS}/qwt-5.2.0/src\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#    ${SOFA_INCLUDE_EXTLIBS}/SLC\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "## ###########################################################################################\n\n## FIND LIBRARIES\n\n##\n\n## SOFA group the components by functionality and maturity state.\n\n## 50 new groups are contained in 5 different categories:\n\n## BASE, COMMON, GENERAL, ADVANCED and MISC.\n\n##\n\n## 1- collect all library name to search in the SOFA_LIBS_NAME list splitted into 5 parts\n\n##    * the SOFA LIBS BASE LIST\n\n##    * the SOFA COMMON LIST\n\n##    * THE SOFA GENERAL LIST\n\n##    * THE SOFA ADVANCED LIST\n\n##    * THE SOFA MISC LIST\n\n## 2- for each library :\n\n##    * get it CMAKE_SOFA_LIB_NAME and it associate REAL_SOFA_LIB_NAME\n\n##    * find library and set SOFA_LIBRARIES\n\n## ###########################################################################################\n\n## Put the name of the library SOFA CORE to search and put it associate CMakeName\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#SofaGui             SOFA_LIB_GUI\n\n#SofaTree            SOFA_LIB_TREE\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#SofaModeler         SOFA_LIB_MODELER\n\n#SofaSimulation      SOFA_LIB_SIMULATION\n\n#SofaObjectCreator   SOFA_OBJECT_CREATOR\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#SofaGraph           SOFA_LIB_GRAPH\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "## Put the name of the library SOFA COMPONENT to search and put it associate CMakeName\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#SofaComponent             SOFA_LIB_COMPONENT\n\n#SofaComponentDev          SOFA_LIB_COMPONENT_DEV\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#SofaComponentMiscDev      SOFA_LIB_COMPONENT_MISC_DEV\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#SofaComponentAdvancedDev  SOFA_LIB_COMPONENT_ADVANCED_DEV\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "## Put the name of the library SOFA BASE to search and put it associate CMakeName\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Put the name of the library SOFA COMMON to search and put it associate CMakeName\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Put the name of the library SOFA GENERAL to search and put it associate CMakeName\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Put the name of the library SOFA ADVANCED to search and put it associate CMakeName\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#SofaAdvancedConstraint     SOFA_LIB_ADVANCED_CONSTRAINT\n\n#SofaAdvancedFem            SOFA_LIB_ADVANCED_FEM\n\n#SofaAdvancedInteraction    SOFA_LIB_ADVANCED_INTERACTION\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#SofaMjedFem                SOFA_LIB_MJED_FEM\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#SofaNonUniformFemDev       SOFA_LIB_NON_UNIFORM_FEM_DEV\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "## Put the name of the library SOFA MISC to search and put it associate CMakeName\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#SofaMiscCollisionDev      SOFA_LIB_MISC_COLLISION_DEV\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "#SofaMiscDev               SOFA_LIB_MISC_DEV\n\n#SofaMiscFemDev            SOFA_LIB_MISC_FEM_DEV\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#SofaMiscForcefieldDev     SOFA_LIB_MISC_FORCEFIELD_DEV\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#SofaMiscMappingDev        SOFA_LIB_MISC_MAPPING_DEV\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "#SofaMiscSolverDev         SOFA_LIB_MISC_SOLVER_DEV\n",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "#SofaMiscTopologyDev       SOFA_LIB_MISC_TOPOLOGY_DEV\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "## Put the name of the library EXT to search and put it associate CMakeName\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "## Collect all list of libs names together in one list\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# To use VERBOSE macro (print only if VAR or default VERBOSE_CMAKE is set to true\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#${SOFA_DIR}/bin\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# first default path the find_library command will use\n",
        "Line" : 382,
        "CharPositionInLine" : 52
      },
      "45" : {
        "Text" : "## Take the name of the library to found in the list[n],\n\n## found it full path and place it into the variable of the list[n+1]\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#because of the foreach expression to take namesLib by pair\n",
        "Line" : 387,
        "CharPositionInLine" : 37
      },
      "47" : {
        "Text" : "## Indices to display list in 3 parts\n",
        "Line" : 394,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "## Get the valueName of the searched library\n",
        "Line" : 426,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "## Get the variableName of the coresponding searched library\n",
        "Line" : 430,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "## Allow to select library\n\n#    option(SOFA_USE_${CMAKE_SOFA_LIB_NAME} \"Build ${CMAKE_SOFA_LIB_NAME}\" true)\n\n#    if(SOFA_USE_${CMAKE_SOFA_LIB_NAME})\n",
        "Line" : 434,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "## Use the MACRO defined above to find the library with it full path\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# SOFA provide all extlib it need\n",
        "Line" : 451,
        "CharPositionInLine" : 24
      },
      "53" : {
        "Text" : "## Add all libraries (release and then debug) find to one variable\n",
        "Line" : 460,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "#    endif(SOFA_USE_${CMAKE_SOFA_LIB_NAME})\n",
        "Line" : 470,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "## ###########################################################################################\n\n## FINALISE AND CHECK\n\n## ###########################################################################################\n\n## handle the QUIETLY and REQUIRED arguments and set SOFA_FOUND to TRUE if\n\n## all listed variables are TRUE\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#SOFA_LIB_SIMULATION\n\n#SOFA_LIB_COMPONENT\n",
        "Line" : 493,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "## ###########################################################################################\n\n## FIND SOFA DEFINES\n\n## ###########################################################################################\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "## get a list of lines\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "## Add \"-D\" for compatibility with CMake\n",
        "Line" : 509,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 60
    },
    "Sofa/cmake/Modules/FindThreads.cmake" : {
      "ObjectId" : "5d1e0cdb7682dbf08bcb1f810d762f9288b0d8ea",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Updated FindThreads.cmake that supports pthread-win32\n\n# Downloaded from http://www.vtk.org/Bug/bug_view_advanced_page.php?bug_id=6399\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - This module determines the thread library of the system.\n\n#\n\n# The following variables are set\n\n#  CMAKE_THREAD_LIBS_INIT     - the thread library\n\n#  CMAKE_USE_SPROC_INIT       - are we using sproc?\n\n#  CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?\n\n#  CMAKE_USE_PTHREADS_INIT    - are we using pthreads\n\n#  CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads\n\n#\n\n# If use of pthreads-win32 is desired, the following variables\n\n# can be set.\n\n#\n\n#  THREADS_USE_PTHREADS_WIN32 -\n\n#    Setting this to true searches for the pthreads-win32\n\n#    port (since CMake 2.8.0)\n\n#\n\n#  THREADS_PTHREADS_WIN32_EXCEPTION_SCHEME\n\n#      C  = no exceptions (default)\n\n#         (NOTE: This is the default scheme on most POSIX thread\n\n#          implementations and what you should probably be using)\n\n#      CE = C++ Exception Handling\n\n#      SE = Structure Exception Handling (MSVC only)\n\n#      (NOTE: Changing this option from the default may affect\n\n#       the portability of your application.  See pthreads-win32\n\n#       documentation for more details.)\n\n#\n\n#======================================================\n\n# Example usage where threading library\n\n# is provided by the system:\n\n#\n\n#   find_package(Threads REQUIRED)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo ${CMAKE_THREAD_LIBS_INIT})\n\n#\n\n# Example usage if pthreads-win32 is desired on Windows\n\n# or a system provided thread library:\n\n#\n\n#   set(THREADS_USE_PTHREADS_WIN32 true)\n\n#   find_package(Threads REQUIRED)\n\n#   include_directories(${THREADS_PTHREADS_INCLUDE_DIR})\n\n#\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo ${CMAKE_THREAD_LIBS_INIT})\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do we have sproc?\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We have sproc\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Assign the default scheme\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Validate the scheme specified by the user\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Determine the library filename\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Use the include path to help find the library if possible\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Do we have pthreads?\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\n\n# We have pthread.h\n\n# Let's check for the library now.\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Do we have -lpthreads\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Ok, how about -lpthread\n",
        "Line" : 139,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# On sun also check for -lthread\n",
        "Line" : 148,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# If we did not found -lpthread, -lpthread, or -lthread, look for -pthread\n",
        "Line" : 160,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Use libcma if it exists and can be used.  It provides more\n\n# symbols than the plain pthread library.  CMA threads\n\n# have actually been deprecated:\n\n#   http://docs.hp.com/en/B3920-90091/ch12s03.html#d0e11395\n\n#   http://docs.hp.com/en/947/d8.html\n\n# but we need to maintain compatibility here.\n\n# The CMAKE_HP_PTHREADS setting actually indicates whether CMA threads\n\n# are available.\n",
        "Line" : 210,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 15
    },
    "Sofa/cmake/Modules/find_lib.cmake" : {
      "ObjectId" : "52e63fc132c8d6f5de2b1d84ad29eb195610f419",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## CMAKE_DOCUMENTATION_START find_lib\n\n##\n\n##\\\\code\n\n##FIND_LIB( MY_LIBRARY_VARIABLE MY_LIBRARY_REAL_NAME  \\n\n\n##[PATHSLIST_DEBUG    path1 path2 ...]        \\n\n\n##[PATHSLIST_RELEASE  path1 path2 ...]        \\n\n\n##[VERBOSE var]                               \\n\n\n##          [DEBUG_POSTFIX string]                      \\n\n\n##          [RELEASE_POSTFIX string]                    \\n\n\n##          [FORCE_DEBUG]                               \\n\n\n##          [FORCE_RELEASE]                             \\n\n\n## )\n\n##\\\\endcode\n\n## Brief            : Macro to find a single library.   \\\\n\n\n## required         : ParseArgumentsMacro.   \\\\n\n\n## Param 1          : MY_LIBRARY_VARIABLE is the variable you use to contain the lib..   \\\\n\n\n##                      note1: \"${MYLIBRARY}_DEBUG\" is set with the \"${MYLIBRARYNAME}${CMAKE_DEBUG_POSTFIX}\" found.   \\\\n\n\n##                      note2:  \"${MYLIBRARY}\" is set with the \"${MYLIBRARYNAME}${CMAKE_RELEASE_POSTFIX}\" found.   \\\\n\n\n## Param 2          : MY_LIBRARY_REAL_NAME is the name of the library to find (without postfix).   \\\\n\n\n## Optional var 1: PATHSLIST_DEBUG paths     -> list of paths in order to find the debug lib.   \\\\n\n\n## Optional var 2: PATHSLIST_RELEASE paths   -> list of paths in order to find the release lib.   \\\\n\n\n## Optional var 3: VERBOSE var               -> is the variable which allow the printing messages infos.   \\\\n\n\n## Optional var 4: DEBUG_POSTFIX string      -> is default to \"d\".   \\\\n\n\n## Optional var 5: RELEASE_POSTFIX string    -> is default to empty \"\".   \\\\n\n\n## Optional flag 1: FORCE_DEBUG   -> If no DEBUG LIBRARY found, set the debug variable library to the release variable.   \\\\n\n\n## Optional flag 2: FORCE_RELEASE -> If no RELEASE LIBRARY found, set the release variable library to the debug variable.   \\\\n\n\n## Usage 1          : FIND_LIB( ${CMAKE_PROJECT_LIB_NAME} ${REAL_PROJECT_LIB_NAME} ).   \\\\n\n\n## full usage exemple:\n\n##\\\\code\n\n## FIND_LIB(${CMAKE_SOFA_LIB_NAME} ${REAL_SOFA_LIB_NAME}    \\n\n\n##         PATHSLIST_DEBUG                                  \\n\n\n##             ${SEARCH_LIB_PATHS}                          \\n\n\n##             ${PROJECT_DIR}/lib/Debug                     \\n\n\n##             ${PROJECT_DIR}/lib64/Debug                   \\n\n\n##         PATHSLIST_RELEASE                                \\n\n\n##             ${SEARCH_LIB_PATHS}                          \\n\n\n##             ${PROJECT_DIR}/lib/Release                   \\n\n\n##             ${PROJECT_DIR}/lib64/Release                 \\n\n\n##         VERBOSE          ${PROJECT_VERBOSE}              \\n\n\n##         DEBUG_POSTFIX    \"d\"                             \\n\n\n##         RELEASE_POSTFIX  \"\"                             \\n\n\n##         FORCE_DEBUG      true                            \\n\n\n##         FORCE_RELEASE    true                            \\n\n\n## )\n\n##\\\\endcode\n\n##\n\n##CMAKE_DOCUMENTATION_END\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remain args\n\n#message(\"FIND_LIB_UNPARSED_ARGUMENTS = ${FIND_LIB_UNPARSED_ARGUMENTS}\")\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# default VERBOSE\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# default FORCE_DEBUG\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# default FORCE_RELEASE\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# default DEBUG_POSTFIX\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# default RELEASE_POSTFIX\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# search order :\n\n#message(\"CMAKE_LIBRARY_PATH = ${CMAKE_LIBRARY_PATH}\")\n\n#message(\"CMAKE_SYSTEM_LIBRARY_PATH = ${CMAKE_SYSTEM_LIBRARY_PATH}\") # can be skip usging: NO_CMAKE_SYSTEM_PATH\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "## Find debug library\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "## Find release library\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "## Allow to use debug and release version :\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## If no DEBUG LIBRARY found, set the debug variable library to the release variable\n",
        "Line" : 132,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "## If no RELEASE LIBRARY found, set the release variable library to the debug variable\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 13
    },
    "Sofa/cmake/buildFlags.cmake" : {
      "ObjectId" : "c8955611ef0d105fdffc2000ea391f61144b231d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# release/debug\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## unless cmake is called with CMAKE_BUILD_TYPE=Debug, release build is forced\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(STATUS \"No build type selected, default to Release\")\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build flags\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#message(STATUS \"Building Debug\")\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#message(STATUS \"Building Release\")\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# in the case of CXX=\"ccache g++\"\n",
        "Line" : 16,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "#message(STATUS \"using CMAKE_CXX_COMPILER_ARG1=${CMAKE_CXX_COMPILER_ARG1_stripped} to detect g++ version...\")\n",
        "Line" : 18,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "#message(STATUS \"using CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} to detect g++ version...\")\n",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "#message(STATUS GCXX_VERSION=${GCXX_VERSION})\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#set(CXX_ARCH_FLAGS \"-march='native'\")\n",
        "Line" : 26,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# disable partial inlining under gcc 4.6\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#messsage(STATUS \"Building RelWithDebInfo\")\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#message(STATUS \"Building MinSizeRel\")\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# windows specific\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NDEBUG preprocessor macro\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NDEBUG and _DEBUG are automatically set in the default c/cxx flags of the right configurations\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# SOFA_DEBUG preprocessor macro\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Reminder: multi-configuration generators like Visual Studio and XCode do not use CMAKE_BUILD_TYPE,\n\n# as they generate all configurations in the project, not just one at a time!\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# OpenMP flags\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# SSE2 Flags on Win32\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Exception deactivation\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "Sofa/cmake/dependencies.cmake" : {
      "ObjectId" : "cec6351d00ac56029db175dc3fe0d4b36f43d7d2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# extlibs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# import a precompiled tinyxml library instead of the tinyxml project\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "## geometric tools\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# try to replace with : RegisterProjects\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Bullet\n\n# if(SOFA-EXTERNAL_BULLET)\n\n# add_subdirectory(\"${SOFA_EXTERNAL_BULLET_PATH}\")\n\n#         # try to replace with : RegisterProjects\n\n# endif()\n\n#RegisterProjects(\"LinearMath\" \"BulletCollisions\" \"BulletDynamics\" PATH \"${SOFA_EXTERNAL_BULLET_PATH}\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## google test\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# try to replace with :\n\n# RegisterProjects(\"gtest\" \"gtest_main\" PATH \"${SOFA_EXTLIBS_DIR}/gtest\")\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# framework\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# modules\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# applications\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## gui\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## projects\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#RegisterProjects(\"GenerateDoc\" OPTION SOFA-APPLICATION_GENERATE_DOC PATH \"${SOFA_APPLICATIONS_DIR}/projects/generateDoc\")\n\n#RegisterProjects(\"GenerateRigid\" OPTION SOFA-APPLICATION_GENERATE_RIGID PATH \"${SOFA_APPLICATIONS_DIR}/projects/GenerateRigid\")\n\n#RegisterProjects(\"GenerateTypedefs\" OPTION SOFA-APPLICATION_GENERATE_TYPEDEFS PATH \"${SOFA_APPLICATIONS_DIR}/projects/generateTypedefs\")\n\n#RegisterProjects(\"MeshConv\" OPTION SOFA-APPLICATION_MESH_CONV PATH \"${SOFA_APPLICATIONS_DIR}/projects/meshconv\")\n\n#RegisterProjects(\"RunSofa\" OPTION SOFA-APPLICATION_RUN_SOFA PATH \"${SOFA_APPLICATIONS_DIR}/projects/runSofa\")\n\n#RegisterProjects(\"SofaBatch\" OPTION SOFA-APPLICATION_SOFA_BATCH PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaBatch\")\n\n##RegisterProjects(\"SofaConfiguration\" OPTION SOFA-APPLICATION_SOFA_CONFIGURATION PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaConfiguration\") # not yet converted\" comment in the qmake scripts...\n\n#RegisterProjects(\"SofaModeler\" PATH \"${SOFA_APPLICATIONS_DIR}/projects/Modeler/lib\")\n\n#RegisterProjects(\"Modeler\" OPTION SOFA-APPLICATION_MODELER PATH \"${SOFA_APPLICATIONS_DIR}/projects/Modeler/exec\")\n\n#RegisterProjects(\"SofaFlowVR\" OPTION SOFA-APPLICATION_SOFA_FLOWVR COMPILE_DEFINITIONS SOFA_HAVE_FLOWVR PATH \"${SOFA_APPLICATIONS_DIR}/projects/SofaFlowVR\")\n\n#RegisterProjects(\"SofaInfo\" OPTION SOFA-APPLICATION_SOFA_INFO PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaInfo\")\n\n#RegisterProjects(\"SofaInitTimer\" OPTION SOFA-APPLICATION_SOFA_INIT_TIMER PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaInitTimer\")\n\n#RegisterProjects(\"SofaOpenCL\" OPTION SOFA-APPLICATION_SOFA_OPENCL COMPILE_DEFINITIONS SOFA_GPU_OPENCL PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaOPENCL\")\n\n#RegisterProjects(\"SofaTypedefs\" OPTION SOFA-APPLICATION_SOFA_TYPEDEFS PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaTypedefs\")\n\n#RegisterProjects(\"SofaVerification\" OPTION SOFA-APPLICATION_SOFA_VERIFICATION PATH \"${SOFA_APPLICATIONS_DIR}/projects/sofaVerification\")\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#add_subdirectory(\"${SOFA_APPLICATIONS_DIR}/projects/SofaPhysicsAPI\")    #Not sure how to have it add only when ! SOFA_NO_OPENGL\n\n#add_subdirectory(\"${SOFA_APPLICATIONS_DIR}/projects/sofaProjectExample\")\n\n#add_subdirectory(\"${SOFA_APPLICATIONS_DIR}/projects/xmlconvert-displayflags\")  #not actually declared in sofa-dependencies.prf\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## test\n\n#RegisterProjects(\"Standard_test\" OPTION SOFA-MISC_TESTS PATH \"${SOFA_APPLICATIONS_DIR}/projects/Standard_test\")\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## tutorials\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# retrieve dependencies and include directories (always do this after all your 'add_subdirectory')\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# copy external shared objects (.dll) to the Sofa bin directory (Windows only)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## common external dlls\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "## qt4 dlls\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "## qt5 dlls\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "## boost dlls\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# creating examples/Object and examples/Objects folder\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# copying default config files\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "Sofa/cmake/doxygen.cmake" : {
      "ObjectId" : "97c9627fb6eebd1cad5aefd81fa26659e8c0fee1",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# In this file, we create targets to generate doxygen documentation on\n\n# a per-project basis.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The idea is to have one documentation for each part of the framework\n\n# (core, helper...), each module, each plugin. etc.\n\n# Then, you can:\n\n# - use the 'doc-Foo' target to build the documentation for Foo\n\n#   (e.g doc-SofaCore, doc-SofaEngine, or doc-SofaPython)\n\n# - use the 'doc' target to build all the documentations, as well as a\n\n#   main documentation page that links to the others. (doc/SOFA/index.html)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# How it's done:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Doxygen has mechanisms that allow to link documentations together.\n\n# Here is the outline: when generating the documentation for projectA,\n\n# you can export the list of documented entities in a tag file. Then,\n\n# when generating the documentation for another project which uses\n\n# projectA, you can feed this tag file to doxygen. As a result,\n\n# symbols from projectA present in your documentation are linked to\n\n# their documentation in projectA.\n\n# (see http://www.stack.nl/~dimitri/doxygen/manual/external.html)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Here, we use this 'tag file' mechanism of doxygen and the dependency\n\n# tree of the projects to generate the documentation of the different\n\n# projects in a correct order, and link them together.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# First thing, we build the list of the projects for which we will\n\n# generate a doxygen documentation.\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Function: create a 'doc-${name}' target to build the documentation for ${input}\n\n# name: a name for the documentation (also used as the title)\n\n# input: source files or directories\n\n# dependencies: the names of the documentations that must be generated before this one\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Build the list of targets we depend on, and the list of corresponding tag files\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Generate a Doxyfile based on Doxyfile.in, with configure_file()\n\n# (if VAR is set, the string @VAR@ in Doxyfile.in will be replaced with ${VAR})\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# If this is not the main page, include the custom header with a link to the main page\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Create the 'doc-${name}' target, which calls doxygen with the Doxyfile we generated\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Put the target in a folder 'Documentation' (for IDEs)\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Create documentation targets for all the projects we choose to document\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Temporary workaround for modules, which are not organised by directory:\n\n# we extract the list of source files from the CMakeLists.txt files.\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Use configure_file() to generate the source for the main page of\n\n# the documentation, which lists all the other documentations.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Macro: create a list of links to other documentations,\n\n# based on the path of the projects\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Filter projects: keep only those whose path match 'pattern'\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Create the target for the main page\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# IDE Folder\n",
        "Line" : 158,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# Create the 'doc' target, to build every documentation\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# IDE Folder\n",
        "Line" : 168,
        "CharPositionInLine" : 67
      },
      "21" : {
        "Text" : "# Create a convenient shortcut to the main page\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 22
    },
    "Sofa/cmake/doxygen/CMakeLists.txt" : {
      "ObjectId" : "520ab6b52d2841903cc1c1c753c58506eef0d236",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/cmake/environment.cmake" : {
      "ObjectId" : "484fb0036ab7a5a50229149d0340f6de54d69461",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Path variables\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake modules path, for our FindXXX.cmake modules\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Misc\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## OS-specific\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# disable every pre-enabled modules\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Clear the internal cache variables that we regenerate each time\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# dependency database\n\n#\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 40
      },
      "7" : {
        "Text" : "## Output directories\n\n# This macro sets the output directory for each build type\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set the output directory for each target type\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Executables\n",
        "Line" : 67,
        "CharPositionInLine" : 53
      },
      "10" : {
        "Text" : "# Dynamic libraries\n",
        "Line" : 69,
        "CharPositionInLine" : 57
      },
      "11" : {
        "Text" : "# Dynamic libraries\n\n# Static libraries\n",
        "Line" : 71,
        "CharPositionInLine" : 57
      },
      "CommentCount" : 12
    },
    "Sofa/cmake/externals.cmake" : {
      "ObjectId" : "3a13de3764d34fc889b12007781c05d50b7193a6",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# lib dir\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include dirs\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generated files\n",
        "Line" : 22,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "## Boost\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## try to find the proper lib dir according to the current architecture (32 / 64 bit)\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "## if no lib dir has been found according to the current architecture, we assume the user built only the needed one and did not set an architecture prefix\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#if you compile BOOST yourself then the lib is appended to the name\n",
        "Line" : 77,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "#    message( \"Boost - lib path: \" ${Boost_LIBRARY_DIRS} \" - include path: \" ${Boost_INCLUDE_DIRS} )\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# packages and libraries\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## opengl / glew / glut\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# force remove glut path to be able to switch glut/freeglut\n",
        "Line" : 95,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "## GLU\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "## libpng\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#find_library(PNG_LIBRARIES \"png\")\n",
        "Line" : 161,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "## Zlib (SOFA-EXTERNAL_ZLIB)\n\n# Note: zlib has to be registered AFTER libpng, because zlib is part of PNG_LIBRARIES; this way,\n\n# GLOBAL_PROJECT_OPTION_COMPILERDEFINITIONS_zlib is set to SOFA_HAS_ZLIB (and not SOFA_HAVE_PNG)\n\n# (This is quite a ugly workaround, I agree)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# enable unit tests\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "Sofa/cmake/functions.cmake" : {
      "ObjectId" : "f0b2233145f49832f8a77794754b989d9614a3be",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Declare an option. Just as the standard 'option' command, it creates\n\n# a cache variable, but it also stores the list of options it created, as\n\n# well as their default values\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Reset option list\n",
        "Line" : 12,
        "CharPositionInLine" : 61
      },
      "2" : {
        "Text" : "# Write to a file the list of build options, declared with sofa_options(),\n\n# that are not any more set to their default values\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# group files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make relative path for a set of files\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# gather files\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# group)\n",
        "Line" : 92,
        "CharPositionInLine" : 51
      },
      "7" : {
        "Text" : "#source_group(\"${${group}}${currentDirectory}\" FILES ${currentFile})\n",
        "Line" : 98,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# generate mocced headers from Qt4 moccable headers\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# get include dirs\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#QT4_EXTRACT_OPTIONS(moc_files moc_options ${ARGN})\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# generate .h files from .ui files\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# it = foo.ui\n",
        "Line" : 124,
        "CharPositionInLine" : 28
      },
      "13" : {
        "Text" : "# basename = foo\n",
        "Line" : 125,
        "CharPositionInLine" : 55
      },
      "14" : {
        "Text" : "# infile = /absolute/path/to/foo.ui\n",
        "Line" : 126,
        "CharPositionInLine" : 54
      },
      "15" : {
        "Text" : "# RegisterProjects(<lib0> [lib1 [lib2 ...]] [OPTION <optionName>] [COMPILE_DEFINITIONS <compileDefinition0> [compileDefinition1 [compileDefinition2 ...]] [PATH <path>])\n\n# register a dependency in the dependency tree, used to be retrieved at the end of the project configuration\n\n# to add include directories from dependencies and to enable dependencies / plugins\n\n# libN is a list of library using the same OPTION to be enabled (opengl/glu for instance)\n\n# optionName is the name of the OPTION used to enable / disable the module (for instance SOFA-EXTERNAL_GLEW)\n\n# compiler definitions is the preprocessor macro that has to be globally setted if the project is enabled\n\n# path parameter is the path to the cmake project if any (may be needed to enable the project)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# libN parameters\n",
        "Line" : 181,
        "CharPositionInLine" : 31
      },
      "17" : {
        "Text" : "# OPTION parameter\n",
        "Line" : 183,
        "CharPositionInLine" : 36
      },
      "18" : {
        "Text" : "# NO_OPTION parameter\n",
        "Line" : 186,
        "CharPositionInLine" : 36
      },
      "19" : {
        "Text" : "# COMPILE_DEFINITIONS parameter\n",
        "Line" : 189,
        "CharPositionInLine" : 36
      },
      "20" : {
        "Text" : "# PATH parameter\n",
        "Line" : 191,
        "CharPositionInLine" : 36
      },
      "21" : {
        "Text" : "# too many arguments\n",
        "Line" : 194,
        "CharPositionInLine" : 36
      },
      "22" : {
        "Text" : "# if this flag is raised, it means this dependency is up-to-date regarding its dependencies and theirs include directories\n",
        "Line" : 202,
        "CharPositionInLine" : 72
      },
      "23" : {
        "Text" : "# *.cmake subproject are not allowed, we must use a CMakeLists.txt\n",
        "Line" : 216,
        "CharPositionInLine" : 44
      },
      "24" : {
        "Text" : "#message(\"== ${dependency} in ${SOFA_PROJECT_FOLDER}\")\n",
        "Line" : 232,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# AddCompilerDefinitionsFromProject(<dependency>)\n\n# retrieve the compiler defines set when the dependency has been registered (using RegisterProjects and not every compiler defines set when the dependency is being generated) and add it in the current compiler defines\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# # EnableProject(<projectName>)\n\n# # enable a project to be generated\n\n# # projectName is the name of a registered project\n\n# function(EnableProject projectName)\n\n#     if(NOT projectName STREQUAL \"\")\n\n#         #list(FIND GLOBAL_DEPENDENCIES ${projectName} index)\n\n#         #if(NOT index EQUAL -1)\n\n#         message(STATUS \" - ${projectName}: Enabled\")\n\n#         message(STATUS \"\")\n\n#         set(GLOBAL_PROJECT_ENABLED_${projectName} 1 CACHE INTERNAL \"${projectName} Enabled Status\" FORCE)\n\n#         #else()\n\n#         #message(AUTHOR_WARNING \"Trying to enable a non registered project: ${projectName}\")\n\n#         #endif()\n\n#     else()\n\n#         message(AUTHOR_WARNING \"EnableProject error: The project name is empty\")\n\n#     endif()\n\n# endfunction()\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#enable the project option\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# disable the project no option\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# RegisterProjectDependencies(<projectName>)\n\n# register a target and its dependencies\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# dependencies\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# remove cmake keywords from dependencies\n",
        "Line" : 295,
        "CharPositionInLine" : 76
      },
      "32" : {
        "Text" : "# retrieve compile definitions\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# if we manually added an optional project to be generated, we must set its option to ON and its no option to OFF\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# RetrieveDependencies()\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# treat the CMakeLists.txt like a Solution\n",
        "Line" : 325,
        "CharPositionInLine" : 34
      },
      "36" : {
        "Text" : "# register every CMakeLists.txt in the folder and in the DIRECT sub-folders (we do not go below the direct sub-folders !)\n",
        "Line" : 336,
        "CharPositionInLine" : 23
      },
      "37" : {
        "Text" : "# then gather CMakeLists in every direct sub-folders\n",
        "Line" : 344,
        "CharPositionInLine" : 24
      },
      "38" : {
        "Text" : "# ComputeDependencies(<projectName>)\n\n# compute project dependencies to enable needed plugins / dependencies and to add theirs include directories\n\n# <projectName> the project to compute\n\n# <forceEnable> if true : this dependency is needed in a project and we need to enable it even if the user disabled it\n\n#if false : this dependency is not needed for now and the user choose to disable, we skip it\n\n# <fromProject>for log purpose only, the name of the project needing the processed dependency\n\n# <offset>for log purpose only, add characters before outputting a line in the log (useful for tree visualization)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# check if the project is enabled or not\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# check if the project is a test, if this is the case but SOFA-MISC_TESTS is disabled we do not enable the project\n",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# process the project\n",
        "Line" : 405,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# process the project if it has not been processed yet\n",
        "Line" : 407,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# enable the needed disabled dependency\n",
        "Line" : 409,
        "CharPositionInLine" : 12
      },
      "44" : {
        "Text" : "# also register global compiler definitions - will be added to every projects at the end of the projects configuration\n\n#if(GLOBAL_PROJECT_OPTION_COMPILER_DEFINITIONS_${projectName})\n\n#set(GLOBAL_COMPILER_DEFINES ${GLOBAL_COMPILER_DEFINES} ${GLOBAL_PROJECT_OPTION_COMPILER_DEFINITIONS_${projectName}} CACHE INTERNAL \"Global Compiler Defines\" FORCE)\n\n#endif()\n",
        "Line" : 412,
        "CharPositionInLine" : 12
      },
      "45" : {
        "Text" : "# add the current project\n",
        "Line" : 417,
        "CharPositionInLine" : 12
      },
      "46" : {
        "Text" : "# TODO: if there is no path try a find_package / find_library\n",
        "Line" : 418,
        "CharPositionInLine" : 51
      },
      "47" : {
        "Text" : "# mark project as \"processed\", doing this now avoid dead-lock during recursion in case of circular dependency\n",
        "Line" : 429,
        "CharPositionInLine" : 12
      },
      "48" : {
        "Text" : "# retrieve its dependencies\n",
        "Line" : 432,
        "CharPositionInLine" : 12
      },
      "49" : {
        "Text" : "# and compute its compiler definitions\n",
        "Line" : 435,
        "CharPositionInLine" : 12
      },
      "50" : {
        "Text" : "#message(STATUS \"${offset} + ${projectName}\")\n",
        "Line" : 438,
        "CharPositionInLine" : 12
      },
      "51" : {
        "Text" : "#message(STATUS \"${offset} - ${projectName}\")\n",
        "Line" : 444,
        "CharPositionInLine" : 12
      },
      "52" : {
        "Text" : "# set the updated compiler definitions of the current project\n",
        "Line" : 446,
        "CharPositionInLine" : 12
      },
      "53" : {
        "Text" : "# retrieve include directories from the current project and its dependencies\n",
        "Line" : 458,
        "CharPositionInLine" : 12
      },
      "54" : {
        "Text" : "# set the updated include directories of the current project\n",
        "Line" : 467,
        "CharPositionInLine" : 12
      },
      "55" : {
        "Text" : "# AddCompilerDefinitions(compiler_definition0 [compiler_definition1 [...]])\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# AddCompilerFlags(compiler_flag0 [compiler_flag1 [...]])\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# AddSourceDependencies(source_dependency0 [source_dependency1 [...]])\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# AddLinkerDependencies(linker_dependency0 [linker_dependency1 [...]])\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# AddLinkerFlags(linker_flag0 [linker_flag1 [...]])\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Set SOFA_FORCE_RECONFIGURE to signal that CMake must be run again\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Reset flag\n",
        "Line" : 505,
        "CharPositionInLine" : 36
      },
      "62" : {
        "Text" : "# Print a warning message and store it. A summary of the warnings is printed at\n\n# the end of the configuration step with sofa_print_list()\n",
        "Line" : 507,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Clear warning list\n",
        "Line" : 513,
        "CharPositionInLine" : 35
      },
      "64" : {
        "Text" : "# Print an error message and store it. A summary of the errors is printed at\n\n# the end of the configuration step with sofa_print_list()\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Clear error list\n",
        "Line" : 521,
        "CharPositionInLine" : 33
      },
      "66" : {
        "Text" : "# Print a list of messages with a little bit of formatting\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Write to a file the list of compilation definitions\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Get the definitions for the first TARGET project,\n",
        "Line" : 559,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# and find the list of definitions which are common to every project\n",
        "Line" : 566,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# List, for each project, the definitions which are not in the common list\n",
        "Line" : 574,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Iteratively retrieve all the dependencies of 'project' and store them in 'out_dependency_list'\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Get these new_dependencies' own dependencies\n",
        "Line" : 620,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# But keep only the new ones\n",
        "Line" : 626,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 74
    },
    "Sofa/cmake/options.cmake" : {
      "ObjectId" : "4185230090567abdc01c9f832334a80d53e47042",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The option for any project in applications/ is OFF by default.\n\n# Here, we override this during the preconfiguration step for projects everybody uses.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CHG: disable as this breaks build of external applications\n\n# set(CMAKE_INSTALL_PREFIX \"${SOFA_BUILD_DIR}\" CACHE INTERNAL \"Sofa install path (not used yet)\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# extlibs\n\n##CGoGN\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## eigen\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## lua\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## metis\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## verdandi\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Qt\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# GLOB will fail with pathes containing backslashes.\n",
        "Line" : 48,
        "CharPositionInLine" : 45
      },
      "9" : {
        "Text" : "# check if the QTDIR contains a correct path\n",
        "Line" : 50,
        "CharPositionInLine" : 32
      },
      "10" : {
        "Text" : "### the ENV{QTDIR} MUST BE DEFINED in order to find Qt (giving a path in find_package does not work)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## boost\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## geometric tools\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# since the lib could be in the system path we cannot check the path with the EXISTS function\n",
        "Line" : 71,
        "CharPositionInLine" : 39
      },
      "14" : {
        "Text" : "# list(APPEND compilerDefines SOFA_HAVE_GEOMETRIC_TOOLS) # set this compiler defininition using RegisterProjectDependencies (to avoid the need of rebuilding everything if you change this option)\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "## tinyxml\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## bullet\n\n#set(BULLET_PATH \"${SOFA_EXTLIBS_DIR}/bullet-2.82-r2704\")\n\n#sofa_option(SOFA-EXTERNAL_BULLET_PATH PATH \"${BULLET_PATH}\" \"Bullet path, set to blank if you want to use the bullet you built on your system or set a path if you want to use a compiled bullet\")\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#sofa_option(SOFA-EXTERNAL_TINYXML_INCLUDE_DIR PATH \"\" \"For pre-compiled tinyxml: library where headers are available\")\n\n#sofa_option(SOFA-EXTERNAL_TINYXML_LIBRARY PATH \"\" \"For pre-compiled tinyxml: release-mode library name\")\n\n#sofa_option(SOFA-EXTERNAL_TINYXML_DEBUG_LIBRARY PATH \"\" \"For pre-compiled tinyxml: debug-mode library name\")\n\n#mark_as_advanced(SOFA-EXTERNAL_TINYXML_INCLUDE_DIR)\n\n#mark_as_advanced(SOFA-EXTERNAL_TINYXML_LIBRARY)\n\n#mark_as_advanced(SOFA-EXTERNAL_TINYXML_DEBUG_LIBRARY)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## CGoGN\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## zlib\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## libpng\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## freeglut\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## glew\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## ffmpeg\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## METIS\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## VERDANDI\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## LUA\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## CSPARSE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## FLOWVR\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## OPENCASCADE\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Miscellaneous features\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## no opengl\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## SOFA_NO_UPDATE_BBOX\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "## tutorials\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# The first ones are disabled by default because they depend on the SceneCreator plugin - Marc\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#sofa_option(SOFA-TUTORIAL_ONE_PARTICLE_WITH_SOFA_TYPEDEFS BOOL ${tutorial_default} \"Build the \\\"One Particle with sofa typedefs\\\" tutorial\")\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#sofa_option(SOFA-TUTORIAL_ANATOMY_MODELLING BOOL ${tutorial_default} \"Build the \\\"Anatomy Modelling\\\" tutorial\")\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "## framework\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# component\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# i don't know if we mark default components as advanced or not\n\n# it would enhance readability but thinking to look for\n\n# advanced options is not really obvious\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#mark_as_advanced(SOFA-LIB_COMPONENT_PARDISO_SOLVER)\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#mark_as_advanced(SOFA-LIB_COMPONENT_SPARSE_SOLVER)\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "#mark_as_advanced(SOFA-LIB_TAUCS_SOLVER)\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "#mark_as_advanced(SOFA-LIB_USER_INTERACTION)\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# simulation\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Qt GUI\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# GLUT GUI\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# unit tests\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# use external template\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# float / double or both\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# use OpenMP multithreading\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# OS-specific\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# we use SOFA-EXTERNAL_BOOST_PATH but don't have the full boost and thus can't compile the code this normally enables.\n",
        "Line" : 378,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# eigen - cpuid identification code does not exist on the platform, it's cleaner to disable it here.\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "##############\n\n#### CUDA ####\n\n##############\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#Option to activate double-precision support in CUDA (requires GT200+ GPU and -arch sm_13 flag)\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#Option to use IEEE 754-compliant floating point operations\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Option to get double-precision for sqrt/div...\n\n# (requires compute capability >= 2 and CUDA_VERSION > 3.0)\n\n# (with SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get IEEE 754-compliant floating point\n\n#  operations for addition and multiplication only)\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Option to activate cublas support in CUDA (requires SOFA_GPU_CUDA_DOUBLE)\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Option to activate CUDPP (for RadixSort)\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Option to activate THRUST (for RadixSort)\n\n# Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# GPU architecture for which CUDA code will be compiled.\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# TODO   activate it automatically\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# nvcc uses a \"host code compiler\" to compile CPU code, specified by CUDA_HOST_COMPILER.\n\n# With some versions of CMake, CUDA_HOST_COMPILER defaults to CMAKE_C_COMPILER,\n\n# but few host compilers are actually supported. Workarounds should go here.\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# in debug mode, enforce cuda to compile host code in debug (the same could be done for device code with -G)\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# in release mode, enforce optimizations for host code\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# plugins (auto-search)\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# dev-plugins (auto-search)\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# projects (auto-search)\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# dev-projects (auto-search)\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# configurable paths to use pre-compiled dependencies outside of the Sofa directory\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 71
    },
    "Sofa/cmake/postProject.cmake" : {
      "ObjectId" : "1918a2064cfd0bcb51f5975c80020e5510d23b74",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# group files (headers, sources, etc.)\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# if this project is a test, add the necessary include and lib\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# MSVC2012 has some troubles with the way gtest use the STL, this preprocessor macro fix this issue\n",
        "Line" : 28,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# include directories\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "## put includes inside a CACHE variable for further uses\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# compile definitions\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# compile flags\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# link dependencies\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# store dependencies for further uses\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#link flags\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# output name suffixes\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# if this project is a test, add it in the test group\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# set IDE project filter\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#message(\"${PROJECT_NAME} in ${GLOBAL_PROJECT_OPTION_FOLDER_${PROJECT_NAME}}\")\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 14
    },
    "Sofa/cmake/preProject.cmake" : {
      "ObjectId" : "6ba73ef71ba0a30c9a8c2eb16a9fbd32360dd267",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# retrieve and set project name\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# useful variables\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## internal\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# out of source build support\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Sofa/cmake/utils.cmake" : {
      "ObjectId" : "f4b09ce8f4c1dd65fc4446e468fc40d8957fe9a4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains miscellaneous small utils macros\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Intersect two lists\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Substract two lists\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove duplicates in list if non-empty\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set 'var' to TRUE if 'value' appears in the remaining arguments, otherwise unset 'var'\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Sofa/doc/src_examples/example1/example1.pro" : {
      "ObjectId" : "73cd42cec7793f73a589f015ec625f107eb2fe80",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Sofa/doc/src_examples/example2/example2.pro" : {
      "ObjectId" : "73cd42cec7793f73a589f015ec625f107eb2fe80",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Sofa/doc/src_examples/example3/example3.pro" : {
      "ObjectId" : "55d83603a9e256c6be1ebc5bb2c2148d497c8d66",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Sofa/doc/src_examples/example4/example4.pro" : {
      "ObjectId" : "eaac20eea3d2c5a2da20f7108f8d1ab394725ae9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Sofa/doc/src_examples/src_examples.pro" : {
      "ObjectId" : "41880fb1de78e482499ed0e29ce33ff54ce3232b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/ARTrack/CMakeLists.txt" : {
      "ObjectId" : "2514c73ef725ca51fce0e7efe6f73f5e19c9cb43",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/CGoGN/CMakeLists.txt" : {
      "ObjectId" : "b375207e93375dff23e0422e0d2f10af26899dbc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake_minimum_required(VERSION 2.8)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# project(CGoGN)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SET ( CMAKE_VERBOSE_MAKEFILE 1 )\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for shared or not shared\n\n# SET ( BUILD_SHARED_LIBS OFF CACHE BOOL \"if used all library are build as shared type (.so/.dylib/.dll)\" )\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SET ( WITH_ASSIMP ON CACHE BOOL \"build CGoGN with Assimp\" )\n\n# SET ( WITH_ZINRI ON CACHE BOOL \"build CGoGN with Zinri lib\" )\n\n# SET ( WITH_QT ON CACHE BOOL \"build CGoGN with Qt lib\" )\n\n# SET ( DESIRED_QT_VERSION \"4\" CACHE STRING \"4: QT4/ 5 not yet implemented\" )\n\n# SET ( DONOT_COMPILE_SANDBOX OFF CACHE BOOL \"do not compile the SandBox directory\" )\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for CGoGN MR\n\n# SET ( FORCE_MR \"0\" CACHE STRING \"0: normal mode / 1 multires mode\" )\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# #create one big lib\n\n# SET ( ONELIB OFF CACHE BOOL \"build CGoGN in one lib\" )\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# SET ( WITH_GLEWMX OFF CACHE BOOL \"use multi-contex GLEW\" )\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tADD_DEFINITIONS(${QT_DEFINITIONS})\n\n#        if(NOT SOFA-LIB_GUI_QGLVIEWER)\n\n#                message(FATAL_ERROR \"CgoGN with QT option activated need SOFA-LIB_GUI_QGLVIEWER to be enabled.\")\n\n#        endif()\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# find_package(QGLViewer REQUIRED)\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# define includes of external libs \n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# define libs for external libs\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# nl\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#IF(WIN32)\n\n#\tSET (CGoGN_EXT_INCLUDES ${CGoGN_EXT_INCLUDES} ${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Include)\n\n#\tfile(GLOB WIN32SUITESPARSELIBS \"${SOFA_EXTLIBS_DIR}/SuiteSparse/cholmod/Lib/*.dll\")\n\n#\tSET (CGoGN_EXT_LIBS ${CGoGN_EXT_LIBS} \n\n#\t\t\t\t\t\t${WIN32SUITESPARSELIBS})\n\n#ELSE(WIN32)\n\n#\tfind_package(SuiteSparse REQUIRED)\n\n#\tSET (CGoGN_EXT_INCLUDES ${CGoGN_EXT_INCLUDES} ${SUITESPARSE_INCLUDE_DIRS})\n\n#\tSET (CGoGN_EXT_LIBS ${CGoGN_EXT_LIBS} ${SUITESPARSE_LIBRARIES})\n\n#ENDIF(WIN32)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# IF(APPLE)APPLE\n\n# # attention a changer pour chercher la bonne version automatiquement\n\n# \tSET(CMAKE_OSX_SYSROOT \"/Developer/SDKs/MacOSX10.6.sdk\" CACHE STRING \"developer SDK\")\n\n# \tSET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-undefined -Wl,dynamic_lookup\")\n\n# \tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DMAC_OSX\")\n\n# \tSET(CMAKE_OSX_ARCHITECTURES x86_64)\n\n# \tSET (CGoGN_EXT_LIBS ${CGoGN_EXT_LIBS} \"-framework Foundation -framework cocoa\" )\n\n# ENDIF(APPLE)\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add_subdirectory(ThirdParty/OpenNL)\n\n# file(GLOB NL_H ThirdParty/OpenNL/src/NL/*.h)\n\n# file(COPY ${NL_H}\n\n# \t DESTINATION ${CGoGN_ROOT_DIR}/ThirdParty/include/NL)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# WARNING NO MORE RECURSE TO AVOID TAKING QT FILES\n",
        "Line" : 187,
        "CharPositionInLine" : 7
      },
      "17" : {
        "Text" : "#\tset(CMAKE_CONFIGURATION_TYPES \"Release Debug\" CACHE STRING \"Only Release or Debug\" FORCE)\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wclobbered -Wempty-body -Wignored-qualifiers -Wmissing-field-initializers -Wsign-compare -Wtype-limits -Wuninitialized -fPIC\")\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMake/CMakeLists.txt" : {
      "ObjectId" : "0412f919073ebaea2d6bdf53d4a8a8a07476928d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeLists.txt" : {
      "ObjectId" : "c8a1467c598300e5dcb246748797f8fcd87a676e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################################\n\n#      CMake version checks\n\n######################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# or NEW\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "######################################\n\n#              Project\n\n######################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET(GEEX_BUILD_PATH ${PROJECT_BINARY_DIR})\n\n#SET(BINARIES_RELATIVE_PATH /binaries/bin/)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#IF (WIN32)\n\n#    SET(LIBRARIES_RELATIVE_PATH /binaries/bin/)\n\n#ELSE(WIN32)\n\n#    SET(LIBRARIES_RELATIVE_PATH /binaries/lib/)\n\n#ENDIF(WIN32)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#IF(WIN32)\n\n#    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}${BINARIES_RELATIVE_PATH})\n\n#ELSE(WIN32)\n\n#    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}${LIBRARIES_RELATIVE_PATH})\n\n#ENDIF(WIN32)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}${BINARIES_RELATIVE_PATH})\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########################################\n\n# ADD HERE ADDITIONAL INCLUDE DIRECTORIES\n\n#########################################\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########################################\n\n# ADD HERE SUBDIRECTORIES\n\n#########################################\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# IF(BUILD_EXAMPLES)\n\n#     ADD_SUBDIRECTORY(examples)\n\n# ENDIF(BUILD_EXAMPLES)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeModules/FindCUDA.cmake" : {
      "ObjectId" : "7c28498d65ab90e67b0c7afb07956687a509af5a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Tools for building CUDA C files: libraries and build dependencies.\n\n# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,\n\n# and mac and should be reasonably up to date with CUDA C releases.\n\n#\n\n# This script makes use of the standard find_package arguments of <VERSION>,\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\n\n# was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix\n\n# cannot be determined by the location of nvcc in the system path and REQUIRED\n\n# is specified to find_package(). To use a different installed version of the\n\n# toolkit set the environment variable CUDA_BIN_PATH before running cmake\n\n# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)\n\n# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of\n\n# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be\n\n# relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default location. In\n\n# newer versions of the toolkit the cuda library is included with the graphics\n\n# driver- be sure that the driver version matches what is needed by the cuda\n\n# runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the script (in\n\n# alphebetical order).  Note that any of these flags can be changed multiple\n\n# times in the same directory before calling CUDA_ADD_EXECUTABLE,\n\n# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.\n\n#\n\n#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#     Note that making this different from the host code when generating object\n\n#     or C files from CUDA code just won't work, because size_t gets defined by\n\n#     nvcc in the generated source.  If you compile to PTX and then load the\n\n#     file yourself, you can mix bit sizes between device and host.\n\n#\n\n#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#  -- Set to ON if you want the custom build rule to be attached to the source\n\n#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#     targets.\n\n#\n\n#     This allows the user to build the target from the CUDA file; however, bad\n\n#     things can happen if the CUDA source file is added to multiple targets.\n\n#     When performing parallel builds it is possible for the custom build\n\n#     command to be run more than once and in parallel causing cryptic build\n\n#     errors.  VS runs the rules for every source file in the target, and a\n\n#     source can have only one rule no matter how many projects it is added to.\n\n#     When the rule is run from multiple targets race conditions can occur on\n\n#     the generated file.  Eventually everything will get built, but if the user\n\n#     is unaware of this behavior, there may be confusion.  It would be nice if\n\n#     this script could detect the reuse of source files across multiple targets\n\n#     and turn the option off for the user, but no good solution could be found.\n\n#\n\n#  CUDA_BUILD_CUBIN (Default OFF)\n\n#  -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#     Device mode. The output is parsed and register, shared memory usage is\n\n#     printed during build.\n\n#\n\n#  CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#     when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#  -- Set to the path you wish to have the generated files placed.  If it is\n\n#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#     Intermediate files will always be placed in\n\n#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#  CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#  -- Set to OFF for C compilation of host code.\n\n#\n\n#  CUDA_NVCC_FLAGS\n\n#  CUDA_NVCC_FLAGS_<CONFIG>\n\n#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#     semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#     host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#     generated host code match the rest of the system better.  Sometimes\n\n#     certain flags give nvcc problems, and this will help you turn the flag\n\n#     propagation off.  This does not affect the flags supplied directly to nvcc\n\n#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#     shared library compilation are not affected by this flag.\n\n#\n\n#  CUDA_VERBOSE_BUILD (Default OFF)\n\n#  -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#     using a Makefile generator the value defaults to VERBOSE (run make\n\n#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#     always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order):\n\n#\n\n#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#  -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#     you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#  -- Adds the cublas library to the target (can be any target).  Handles\n\n#     whether you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Creates an executable \"cuda_target\" which is made up of the files\n\n#     specified.  All of the non CUDA C files are compiled using the standard\n\n#     build rules specified by CMAKE and the cuda files are compiled to object\n\n#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#     added automatically to include_directories().  Standard CMake target calls\n\n#     can be used on the target after calling this macro\n\n#     (e.g. set_target_properties and target_link_libraries).\n\n#\n\n#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#  CUDA_BUILD_CLEAN_TARGET()\n\n#  -- Creates a convience target that deletes all the dependency files\n\n#     generated.  You should make clean after running this target to ensure the\n\n#     dependency files get regenerated.\n\n#\n\n#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                [OPTIONS ...] )\n\n#  -- Returns a list of generated files from the input source files to be used\n\n#     with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#  -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#  -- Sets the directories that should be passed to nvcc\n\n#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#     files.\n\n#\n\n#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#     function under the hood.\n\n#\n\n#     Given the list of files (file0 file1 ... fileN) this macro generates\n\n#     custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#     \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#     or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#     The arguments passed in after OPTIONS are extra command line options to\n\n#     give to nvcc.  You can also specify per configuration options by\n\n#     specifying the name of the configuration followed by the options.  General\n\n#     options must preceed configuration specific options.  Not all\n\n#     configurations need to be specified, only the ones provided will be used.\n\n#\n\n#        OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#        DEBUG -g\n\n#        RELEASE --use_fast_math\n\n#        RELWITHDEBINFO --use_fast_math;-g\n\n#        MINSIZEREL --use_fast_math\n\n#\n\n#     For certain configurations (namely VS generating object files with\n\n#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#     be produced for the given cuda file.  This is because when you add the\n\n#     cuda file to Visual Studio it knows that this file produces an object file\n\n#     and will link in the resulting object file automatically.\n\n#\n\n#     This script will also generate a separate cmake script that is used at\n\n#     build time to invoke nvcc.  This is for serveral reasons.\n\n#\n\n#       1. nvcc can return negative numbers as return values which confuses\n\n#       Visual Studio into thinking that the command succeeded.  The script now\n\n#       checks the error codes and produces errors when there was a problem.\n\n#\n\n#       2. nvcc has been known to not delete incomplete results when it\n\n#       encounters problems.  This confuses build systems into thinking the\n\n#       target was generated when in fact an unusable file exists.  The script\n\n#       now deletes the output files if there was an error.\n\n#\n\n#       3. By putting all the options that affect the build into a file and then\n\n#       make the build rule dependent on the file, the output files will be\n\n#       regenerated when the options change.\n\n#\n\n#     This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#     determine when to target the object compilation for a shared library.\n\n#     BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#     CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#     objects intended for shared libraries.  A preprocessor macro,\n\n#     <target_name>_EXPORTS is defined when a shared library compilation is\n\n#     detected.\n\n#\n\n#     Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n# The script defines the following variables:\n\n#\n\n#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#  CUDA_VERSION_MINOR    -- The minor version.\n\n#  CUDA_VERSION\n\n#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                           SDK.  This script will not directly support finding\n\n#                           specific libraries or headers, as that isn't\n\n#                           supported by NVIDIA.  If you want to change\n\n#                           libraries when the path changes see the\n\n#                           FindCUDA.cmake script for an example of how to clear\n\n#                           these variables.  There are also examples of how to\n\n#                           use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                           libraries, if you so choose (at your own risk).\n\n#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#  CUDA_LIBRARIES        -- Cuda RT library.\n\n#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                           implementation (alternative to:\n\n#                           CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                           implementation (alterative to:\n\n#                           CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#\n\n#\n\n#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND true\")\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#message(\"searching for ${f}\")\n",
        "Line" : 322,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 324,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Now search default paths\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Compute the version.\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\n\n# specified.  The presence of either of these options checks the version\n\n# string and signals if the version is acceptable or not.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 514,
        "CharPositionInLine" : 21
      },
      "48" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Add cuda library to the link line only if it is found.\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Search for cufft and cublas libraries.\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "########################\n\n# Look for the SDK stuff\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil32)\n\n# endif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n",
        "Line" : 623,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "##############################################################################\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 708,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 715,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 726,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 756,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependant upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Set up all the command line flags here, so that they can be overriden on a per target basis.\n",
        "Line" : 801,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 805,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Emulation.\n",
        "Line" : 807,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 810,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.\n",
        "Line" : 828,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Add nvcc flag for 64b Windows\n",
        "Line" : 832,
        "CharPositionInLine" : 6
      },
      "83" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 837,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 847,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Reset these variables\n",
        "Line" : 857,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 867,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# STATIC\n",
        "Line" : 876,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 882,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 884,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 890,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 899,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 902,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# nvcc chokes on -g3, so replace it with -g\n",
        "Line" : 906,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 916,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 923,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 928,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Determine output directory\n",
        "Line" : 940,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 947,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 950,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 953,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 957,
        "CharPositionInLine" : 6
      },
      "104" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 971,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 981,
        "CharPositionInLine" : 6
      },
      "106" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 985,
        "CharPositionInLine" : 31
      },
      "107" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 989,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 997,
        "CharPositionInLine" : 6
      },
      "109" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1000,
        "CharPositionInLine" : 6
      },
      "110" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1007,
        "CharPositionInLine" : 6
      },
      "111" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1015,
        "CharPositionInLine" : 6
      },
      "112" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1018,
        "CharPositionInLine" : 6
      },
      "113" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1035,
        "CharPositionInLine" : 6
      },
      "114" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1043,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1046,
        "CharPositionInLine" : 8
      },
      "116" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1050,
        "CharPositionInLine" : 8
      },
      "117" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1062,
        "CharPositionInLine" : 6
      },
      "118" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\n\n# will add our object file to the linker automatically for us.\n",
        "Line" : 1065,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\n",
        "Line" : 1071,
        "CharPositionInLine" : 8
      },
      "120" : {
        "Text" : "#message(\"Not adding ${generated_file}\")\n",
        "Line" : 1073,
        "CharPositionInLine" : 10
      },
      "121" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1082,
        "CharPositionInLine" : 6
      },
      "122" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1090,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1095,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1104,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1107,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# Add the library.\n",
        "Line" : 1112,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1122,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1132,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1141,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1143,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Add the library.\n",
        "Line" : 1146,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1156,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1166,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1175,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1184,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1191,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1201,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1227,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1233,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1244,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 144
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeModules/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7fce167c23ac70663c370d34a8809c4e2d0015ce",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeModules/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "2518c685250cf3c1b78779eae3c1946d3678d220",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 62,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 64,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# else (${entry} MATCHES \"^_\")\n",
        "Line" : 68,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# endif (${entry} MATCHES \"^_\")\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Registers\n",
        "Line" : 77,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Local memory\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Shared memory\n",
        "Line" : 89,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeModules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "fc5a9c0768bed0cc1b8e231f7f1f45a717ab6584",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Echo the command\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Run the command\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Delete the target file\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generate the code\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 28
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeModules/FindSuiteSparse.cmake" : {
      "ObjectId" : "fb2583c1ab22fe298d46acb20807c17318c28eeb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find SUITESPARSE\r\n\n# Once done this will define\r\n\n#  \r\n\n#  SUITESPARSE_FOUND            - system has SUITESPARSE\r\n\n#  SUITESPARSE_INCLUDE_DIRS     - the SUITESPARSE include directory\r\n\n#  SUITESPARSE_LIBRARIES        - Link these to use SUITESPARSE\r\n\n#  SUITESPARSE_SPQR_LIBRARY     - name of spqr library (necessary due to error in debian package)\r\n\n#  SUITESPARSE_SPQR_LIBRARY_DIR - name of spqr library (necessary due to error in debian package)\r\n\n#  SUITESPARSE_LIBRARY_DIR      - Library main directory containing suitesparse libs\r\n\n#  SUITESPARSE_LIBRARY_DIRS     - all Library directories containing suitesparse libs\r\n\n#  SUITESPARSE_SPQR_VALID       - automatic identification whether or not spqr package is installed correctly\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find cholmod part of the suitesparse library collection\r\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Add cholmod include directory to collection include directories\r\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# find path suitesparse library\r\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# if we found the library, add it to the defined libraries\r\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Add cholmod include directory to collection include directories\r\n",
        "Line" : 65,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# if we found the library, add it to the defined libraries\r\n",
        "Line" : 70,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#     list ( APPEND SUITESPARSE_LIBRARIES csparse)\r\n",
        "Line" : 79,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#     list ( APPEND SUITESPARSE_LIBRARIES spqr)\r\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Metis and spqr are optional\r\n",
        "Line" : 89,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 11
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/CMakeModules/FindSuperLU.cmake" : {
      "ObjectId" : "317b0a73c76b5c6f17616e21d5ce3b788bc1087c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Module that checks whether SuperLU is available and usable.\n\n# SuperLU must be a version released after the year 2005.\n\n#\n\n# Variables used by this module which you may want to set:\n\n# SUPERLU_PREFIX          Path list to search for SuperLU\n\n#\n\n# Sets the follwing variable:\n\n#\n\n# SUPERLU_FOUND           True if SuperLU available and usable.\n\n# SUPERLU_MIN_VERSION_4_3 True if SuperLU version >= 4.3.\n\n# SUPERLU_WITH_VERSION    Human readable string containing version information.\n\n# SUPERLU_INCLUDE_DIRS    Path to the SuperLU include dirs.\n\n# SUPERLU_LIBRARIES       Name to the SuperLU library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adds SuperLU flags to the targets\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# look for BLAS\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# look for header files, only at positions given by the user\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# look for header files, including default paths\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# look for library, only at positions given by the user\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# look for library files, including default paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# check version specific macros\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# we need if clauses here because variable is set variable-NOTFOUND\n\n# if the searches above were not successful\n\n# Without them CMake print errors like: \n\n# \"CMake Error: The following variables are used in this project, but they are set to NOTFOUND.\n\n# Please set them or make sure they are set and tested correctly in the CMake files:\"\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# check whether \"mem_usage_t.expansions\" was found in \"slu_ddefs.h\"\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# check whether version is at least 4.3\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if both headers and library are found, store results\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# log result\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# log errornous result\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set HAVE_SUPERLU for config.h\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Sofa/extlibs/CGoGN/ThirdParty/OpenNL/src/CMakeLists.txt" : {
      "ObjectId" : "1d60e7c7cb50a64ef1c319674476d4037937b85a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# extensions\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   SET(SUPERLU_INCS ${SUPERLU_HOME}/SRC)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# creation of the library\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/extlibs/CGoGN/ThirdParty/Zinri/CMakeLists.txt" : {
      "ObjectId" : "fb0b6683c012d1c199c13484eefc1bac8872c257",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/CGoGN/cmake_modules/FindDevIL.cmake" : {
      "ObjectId" : "ae0f97d7330d44725589d91846dedb6be4466aaa",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module locates the developer's image library.\n\n# http://openil.sourceforge.net/\n\n#\n\n# This module sets:\n\n# IL_LIBRARIES the name of the IL library. These include the full path to the core DevIL library. This one has to be linked into the application.\n\n# ILU_LIBRARIES the name of the ILU library. Again, the full path. This library is for filters and effects, not actual loading. It doesn't have to be linked if the functionality it provides is not used.\n\n# ILUT_LIBRARIES the name of the ILUT library. Full path. This part of the library interfaces with OpenGL. It is not strictly needed in applications.\n\n# IL_INCLUDE_DIR where to find the il.h, ilu.h and ilut.h files.\n\n# IL_FOUND this is set to TRUE if all the above variables were set. This will be set to false if ILU or ILUT are not found, even if they are not needed. In most systems, if one library is found all the others are as well. That's the way the DevIL developers release it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n# Copyright 2008 Christopher Harvey\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Add version support.\n\n# Tested under Linux and Windows (MSVC)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MESSAGE(\"IL_INCLUDE_DIR is ${IL_INCLUDE_DIR}\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#MESSAGE(\"IL_LIBRARIES is ${IL_LIBRARIES}\")\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#MESSAGE(\"ILUT_LIBRARIES is ${ILUT_LIBRARIES}\")\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"ILU_LIBRARIES is ${ILU_LIBRARIES}\")\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Sofa/extlibs/CGoGN/cmake_modules/FindGLEW.cmake" : {
      "ObjectId" : "033ca963d2bbb79c78d5e4391a3a49e19db0a846",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find GLEW\n\n# Find the GLEW includes and library\n\n#\n\n#  GLEW_INCLUDE_DIRS   - where to find glew.h, etc.\n\n#  GLEW_LIBRARIES      - List of libraries when using GLEW.\n\n#  GLEW_FOUND          - True if GLEW found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GLEW_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/extlibs/CGoGN/cmake_modules/FindQGLViewer.cmake" : {
      "ObjectId" : "8aa535990af5b36c03f11592f680b41df1a37935",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find QGLViewer\n\n# Once done this will define\n\n#\n\n#  QGLVIEWER_FOUND - system has QGLViewer\n\n#  QGLVIEWER_INCLUDE_DIR - the QGLViewer include directory\n\n#  QGLVIEWER_LIBRARIES - Link these to use QGLViewer\n\n#  QGLVIEWER_DEFINITIONS - Compiler switches required for using QGLViewer\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/CGoGN/cmake_modules/FindQwt.cmake" : {
      "ObjectId" : "b64011f96baa3cc441c8c19aae5c799552262b6b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Qwt\n\n# ~~~~~~~~\n\n# Copyright (c) 2010, Tim Sutton <tim at linfiniti.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Once run this will define: \n\n# \n\n# QWT_FOUND       = system has QWT lib\n\n# QWT_LIBRARY     = full path to the QWT library\n\n# QWT_INCLUDE_DIR = where to find headers \n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/CGoGN/cmake_modules/FindSuiteSparse.cmake" : {
      "ObjectId" : "e5fa579ede169e4aa824e06fe9bf1d1590f90ebf",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find SUITESPARSE\r\n\n# Once done this will define\r\n\n#  \r\n\n#  SUITESPARSE_FOUND            - system has SUITESPARSE\r\n\n#  SUITESPARSE_INCLUDE_DIRS     - the SUITESPARSE include directory\r\n\n#  SUITESPARSE_LIBRARIES        - Link these to use SUITESPARSE\r\n\n#  SUITESPARSE_SPQR_LIBRARY     - name of spqr library (necessary due to error in debian package)\r\n\n#  SUITESPARSE_SPQR_LIBRARY_DIR - name of spqr library (necessary due to error in debian package)\r\n\n#  SUITESPARSE_LIBRARY_DIR      - Library main directory containing suitesparse libs\r\n\n#  SUITESPARSE_LIBRARY_DIRS     - all Library directories containing suitesparse libs\r\n\n#  SUITESPARSE_SPQR_VALID       - automatic identification whether or not spqr package is installed correctly\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find cholmod part of the suitesparse library collection\r\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Add cholmod include directory to collection include directories\r\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# find path suitesparse library\r\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# if we found the library, add it to the defined libraries\r\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Add cholmod include directory to collection include directories\r\n",
        "Line" : 65,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# if we found the library, add it to the defined libraries\r\n",
        "Line" : 70,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#     list ( APPEND SUITESPARSE_LIBRARIES csparse)\r\n",
        "Line" : 79,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#     list ( APPEND SUITESPARSE_LIBRARIES spqr)\r\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Metis and spqr are optional\r\n",
        "Line" : 89,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 11
    },
    "Sofa/extlibs/CGoGN/doc/Makefile" : {
      "ObjectId" : "dfcef1f88f3ca9373f6ddeb7103f551db0f48147",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/LML/CMakeLists.txt" : {
      "ObjectId" : "6b52a64b12ea098ffacec2f8f60964b73b135ac9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/PML/CMakeLists.txt" : {
      "ObjectId" : "82cb0154083c96265f62d3d44a556a732a16575f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/csparse/CMakeLists.txt" : {
      "ObjectId" : "c6012e6ded75f0ed71c963dfa5f3d28bfa201374",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/eigen-3.2.1/CMakeLists.txt" : {
      "ObjectId" : "c9872dd6de78fc6efde2dbf3fc125e9cb03f9341",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# only take the librairy headers, not test headers and other stuff\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_library(${PROJECT_NAME} SHARED ${HEADER_FILES}) # it contains only headers but it is still generating an empty lib\n\n#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX) # otherwise cmake cannot recognize the language\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/CMakeLists.txt" : {
      "ObjectId" : "a92dd6f6cafd2206f8be1a50f1294e2ae49feb5a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "c326f374d9ee89c953dd9caefbfaffccb905511c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Cholesky/CMakeLists.txt" : {
      "ObjectId" : "d01488b41a826850277a918f555e3668167dd367",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/CholmodSupport/CMakeLists.txt" : {
      "ObjectId" : "814dfa61313847c0f33538e11c4ac4557ec3e32e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/CMakeLists.txt" : {
      "ObjectId" : "2346fc2bbca4d9bd699efc4c366afd7abd400e3c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/arch/AltiVec/CMakeLists.txt" : {
      "ObjectId" : "9f8d2e9c46765f4253d6877d040e5c2a90612086",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/arch/CMakeLists.txt" : {
      "ObjectId" : "8456dec1581554a4f7798ebe7d9d292369f21607",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/arch/Default/CMakeLists.txt" : {
      "ObjectId" : "339c091d156100d46f3acbc67ad205749d8f4b3d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/arch/NEON/CMakeLists.txt" : {
      "ObjectId" : "fd4d4af50cb46dac7e6b29ef8654e70528e1f3ca",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/arch/SSE/CMakeLists.txt" : {
      "ObjectId" : "46ea7cc623c62394c78425b15e100b84126b40a7",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/products/CMakeLists.txt" : {
      "ObjectId" : "21fc94ae38a5574289ae4e304ce087f3ed6897f0",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Core/util/CMakeLists.txt" : {
      "ObjectId" : "a1e2e521fc11124c92768621c4edf784bc10f51f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Eigen2Support/CMakeLists.txt" : {
      "ObjectId" : "7ae41b3cbe9c568f7efdaf45cd1a1ef874bf309b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Eigen2Support/Geometry/CMakeLists.txt" : {
      "ObjectId" : "c347a8f26228694dc67e0e89ff6d509152dac738",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Eigenvalues/CMakeLists.txt" : {
      "ObjectId" : "193e0268599516e2515318ed04eb6dda37b2dd59",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Geometry/CMakeLists.txt" : {
      "ObjectId" : "f8f728b84faf0e08d91fac04e2986260368b9063",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Geometry/arch/CMakeLists.txt" : {
      "ObjectId" : "1267a79c78767c43d11c529cc84468cbdd1052a2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Householder/CMakeLists.txt" : {
      "ObjectId" : "ce4937db061bbadb0357ccc45547b141761a70e3",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/IterativeLinearSolvers/CMakeLists.txt" : {
      "ObjectId" : "59ccc0072cc4ed78e6aa783bfab2486aac757fca",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/Jacobi/CMakeLists.txt" : {
      "ObjectId" : "490dac626439ade5e05baaba504689366db22e6d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/LU/CMakeLists.txt" : {
      "ObjectId" : "e0d8d78c1720abb27432f41aa2ace29ef3f3794f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/LU/arch/CMakeLists.txt" : {
      "ObjectId" : "f6b7ed9ecc3a25e3885c7fece60428481e51c696",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/MetisSupport/CMakeLists.txt" : {
      "ObjectId" : "2bad314163c5044265aa6ac14e3767308dd04ba6",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/OrderingMethods/CMakeLists.txt" : {
      "ObjectId" : "9f4bb275808257ac71d6c04d9c602ce5c0b5be8d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/PaStiXSupport/CMakeLists.txt" : {
      "ObjectId" : "28c657e9bcf7d3e0ecc800f6d5a11d54020b58cc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/PardisoSupport/CMakeLists.txt" : {
      "ObjectId" : "a097ab401920ea1b7068f790edcfcf9086b3038b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/QR/CMakeLists.txt" : {
      "ObjectId" : "96f43d7f5b30fa024b9bd2d9e3a5dacb9d401ecb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SPQRSupport/CMakeLists.txt" : {
      "ObjectId" : "4968beaf2c59bcec07fe1861b5d72cb4d6723a6d",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "55efc44b12970d5ec715393cb68cd061203ce941",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SparseCholesky/CMakeLists.txt" : {
      "ObjectId" : "375a59d7a577877313a1ff2a6bf1c8fac138768b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SparseCore/CMakeLists.txt" : {
      "ObjectId" : "d860452a65cb20850a12a120ab1fd3e3fd83dccc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SparseLU/CMakeLists.txt" : {
      "ObjectId" : "69729ee8961aa7d4ef514e9f890de0d29f12161f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SparseQR/CMakeLists.txt" : {
      "ObjectId" : "f9ddf2bdb75878292267c18697d9dedbd69a6611",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/StlSupport/CMakeLists.txt" : {
      "ObjectId" : "0f094f637acd51b0931e58a199c30f550beaa282",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/SuperLUSupport/CMakeLists.txt" : {
      "ObjectId" : "b28ebe5839cf5c664abdb44c186547507ce688d3",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/UmfPackSupport/CMakeLists.txt" : {
      "ObjectId" : "a57de00209d3bc746b050d1b8aa736bccc66f2bc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/misc/CMakeLists.txt" : {
      "ObjectId" : "a58ffb7457e06a7a69426a21a9d46d07a6a8ee91",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/Eigen/src/plugins/CMakeLists.txt" : {
      "ObjectId" : "1a1d3ffbd724d17e161c40c48ac56c8b1aeb2e1f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/CMakeLists.txt" : {
      "ObjectId" : "4fef40a86c6d17dd8cc792a5e4f9e8d65abcdf58",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 4,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/CMakeLists.txt" : {
      "ObjectId" : "e06f1238b4031701cc3560ca3fc416f152da5693",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/AutoDiff/CMakeLists.txt" : {
      "ObjectId" : "ad91fd9c4628cd921b2efedc59b093218dc34064",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/BVH/CMakeLists.txt" : {
      "ObjectId" : "b377d865cb1f9d2db01426f0b599929a4fa6458a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "f3180b52b64af01220b781afdd3447988e11e802",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/FFT/CMakeLists.txt" : {
      "ObjectId" : "edcffcb189c872b5339f345aa32d772cda3f8bf0",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/IterativeSolvers/CMakeLists.txt" : {
      "ObjectId" : "7986afc5ed4ecf09fa871c726a0c2ab1945e8559",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/KroneckerProduct/CMakeLists.txt" : {
      "ObjectId" : "4daefebee6f676c073f5ecacf9e8781aa5d673c2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/LevenbergMarquardt/CMakeLists.txt" : {
      "ObjectId" : "8513803ce9a47fc5e2de969d386da87dc966af09",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/MatrixFunctions/CMakeLists.txt" : {
      "ObjectId" : "cdde64d2cd45b59bee6b55d6590f2fcd7827d52c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/MoreVectorization/CMakeLists.txt" : {
      "ObjectId" : "1b887cc8e3447b27bb9d289274eeb1ee0b5e71e0",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/NonLinearOptimization/CMakeLists.txt" : {
      "ObjectId" : "9322ddadf0364cc12cd9a77fdf0b48e2cbe49f85",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/NumericalDiff/CMakeLists.txt" : {
      "ObjectId" : "1199aca2f7073703a946344a922e0adec1e22b3e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/Polynomials/CMakeLists.txt" : {
      "ObjectId" : "51f13f3cb91ea44bc113178d58ab26db47369d25",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "b40baf09210610f0c605ac4a3079700f9b447bd4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/Skyline/CMakeLists.txt" : {
      "ObjectId" : "3bf1b0dd46a7d1fa7cf90884e2284c0c06c4e8a5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/SparseExtra/CMakeLists.txt" : {
      "ObjectId" : "7ea32ca5e26bf653f5814ce780c63c078ee83e29",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/Eigen/src/Splines/CMakeLists.txt" : {
      "ObjectId" : "55c6271e96328c14e32ae6252521182e3051f713",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/doc/CMakeLists.txt" : {
      "ObjectId" : "9e9ab98007eb189f2625f7fdd3c232c2d3da4e3b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/doc/examples/CMakeLists.txt" : {
      "ObjectId" : "978f9afd8345931b4a38a0a1457c5660d9b3c323",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/doc/snippets/CMakeLists.txt" : {
      "ObjectId" : "4a41579330370ecb3cc5fc1e4680436a45fd1af6",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/extlibs/eigen-3.2.1/unsupported/test/CMakeLists.txt" : {
      "ObjectId" : "a94a3b5e57c0c8329503cd42f7c4295f298a8ae8",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this test seems to never have been successful on x87, so is considered to contain a FP-related bug.\n\n# see thread: \"non-linear optimization test summary\"\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/gtest/CMakeLists.txt" : {
      "ObjectId" : "980fcf60268aa04c5613076b8e58edaac85f639b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# option(gtest_build_tests \"Build all of gtest's own tests.\" OFF)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# option(gtest_build_samples \"Build gtest's sample programs.\" OFF)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 54,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "Sofa/extlibs/gtest/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "Sofa/extlibs/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "Sofa/extlibs/gtest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Sofa/extlibs/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Sofa/extlibs/libQGLViewer-2.4.0/QGLViewer/CMakeLists.txt" : {
      "ObjectId" : "29c1416dc18da391aa2fc6a9d45e20d0b249ea4b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# in order to be able to include generated files (ui and moc)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SOFA_QT4_WRAP_CPP(MOC_UI_FILES ${FORM_FILES})\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ToRelativePath(MOC_UI_FILES \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${MOC_UI_FILES}\")\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# these header files do not need MOCcing\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Sofa/extlibs/lua/CMakeLists.txt" : {
      "ObjectId" : "471d2074679893e27ed6f22a7d03ebf613ba3124",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## CONFIGURATION\n\n# Default configuration (we assume POSIX by default)\n\n# set ( SOFA-EXTERNAL_LUA_PATH \"SOFA-EXTERNAL_LUA_PATH\" CACHE STRING \"Environment variable to use as package.path.\" )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows systems\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Paths (Double escapes ne  option needed)\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Posix systems (incl. Cygwin)\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Apple and Linux specific\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## SETUP\n\n# Optional libraries\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup needed variables and libraries\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On POSIX Lua links to standard math library \"m\"\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Link to dynamic linker library \"dl\"\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Add readline\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add curses\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "## SOURCES\n\n# Generate luaconf.h\n\n#configure_file ( src/luaconf.h.in ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h )\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Sources and headers\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## BUILD\n\n# Create lua library\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#add_executable ( lua ${SRC_LUA} src/lua.rc )\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_executable ( luac ${SRC_CORE} ${SRC_LIB} ${SRC_LUAC} src/luac.rc )\n\n#add_executable ( luac ${SOURCE_FILES} ${SRC_LUAC} )\n\n#target_link_libraries ( luac ${LIBS} )\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# On windows a variant of the lua interpreter without console output needs to be built\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#install_executable ( lua luac )\n\n#install_library ( liblua )\n\n#install_data ( README.md )\n\n#install_lua_module ( strict etc/strict.lua )\n\n#install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h )\n\n#install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp)\n\n#install_doc ( doc/ )\n\n#install_foo ( etc/ )\n\n#install_test ( test/ )\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "Sofa/extlibs/lua/Makefile" : {
      "ObjectId" : "bd9515fd84dad9bfbbdb51bdce3f7a2cf6fb5b8b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "Sofa/extlibs/lua/cmake/FindLua.cmake" : {
      "ObjectId" : "7fb7ca3f4f9de67e22efade7d6827f3ecdef6a51",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua \n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "Sofa/extlibs/lua/cmake/FindReadline.cmake" : {
      "ObjectId" : "5401a9b4273fa11de9abcf5c94b3e78f2a73c303",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Readline\n\n# Once done this will define\n\n#  READLINE_FOUND - System has readline\n\n#  READLINE_INCLUDE_DIRS - The readline include directories\n\n#  READLINE_LIBRARIES - The libraries needed to use readline\n\n#  READLINE_DEFINITIONS - Compiler switches required for using readline\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/extlibs/lua/cmake/dist.cmake" : {
      "ObjectId" : "f0cda15bcd306ca2befc0607ec0fcd9f678d1155",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library.\n\n# Provides sane project defaults and macros common to LuaDist CMake builds.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Extract information from dist.info\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reads field `name` from dist.info string `DIST_INFO` into variable `var`.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#_parse_dist_field ( name DIST_NAME )\n\n#_parse_dist_field ( version DIST_VERSION )\n\n#_parse_dist_field ( license DIST_LICENSE )\n\n#_parse_dist_field ( author DIST_AUTHOR )\n\n#_parse_dist_field ( maintainer DIST_MAINTAINER )\n\n#_parse_dist_field ( url DIST_URL )\n\n#_parse_dist_field ( desc DIST_DESC )\n\n#message ( \"DIST_NAME: ${DIST_NAME}\")\n\n#message ( \"DIST_VERSION: ${DIST_VERSION}\")\n\n#message ( \"DIST_LICENSE: ${DIST_LICENSE}\")\n\n#message ( \"DIST_AUTHOR: ${DIST_AUTHOR}\")\n\n#message ( \"DIST_MAINTAINER: ${DIST_MAINTAINER}\")\n\n#message ( \"DIST_URL: ${DIST_URL}\")\n\n#message ( \"DIST_DESC: ${DIST_DESC}\")\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#message ( \"DIST_DEPENDS: ${DIST_DEPENDS}\")\n\n## 2DO: Parse DIST_DEPENDS and try to install Dependencies with automatically using externalproject_add\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)\n\n# Primary paths\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Secondary paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tweaks and other defaults\n\n# Setting CMAKE to use loose block and search for find modules in source directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In MSVC, prevent warnings that can occur when using standard libraries.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPath and relative linking\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## MACROS\n\n# Parser macro\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# install_executable ( executable_targets )\n\n# Installs any executables generated using \"add_executable\".\n\n# USE: install_executable ( lua )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# install_library ( library_targets )\n\n# Installs any libraries generated using \"add_library\" into apropriate places.\n\n# USE: install_library ( libexpat )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# helper function for various install_* functions, for PATTERN/REGEX args.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# install_header ( files/directories [INTO destination] )\n\n# Install a directories or files into header destination.\n\n# USE: install_header ( lua.h luaconf.h ) or install_header ( GL )\n\n# USE: install_header ( mylib.h INTO mylib )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# install_data ( files/directories [INTO destination] )\n\n# This installs additional data files or directories.\n\n# USE: install_data ( extra data.dat )\n\n# USE: install_data ( image1.png image2.png INTO images )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# INSTALL_DOC ( files/directories [INTO destination] )\n\n# This installs documentation content\n\n# USE: install_doc ( doc/ doc.pdf )\n\n# USE: install_doc ( index.html INTO html )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install_example ( files/directories [INTO destination]  )\n\n# This installs additional examples\n\n# USE: install_example ( examples/ exampleA )\n\n# USE: install_example ( super_example super_data INTO super)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# install_test ( files/directories [INTO destination] )\n\n# This installs tests and test files, DOES NOT EXECUTE TESTS\n\n# USE: install_test ( my_test data.sql )\n\n# USE: install_test ( feature_x_test INTO x )\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# install_foo ( files/directories [INTO destination] )\n\n# This installs optional or otherwise unneeded content\n\n# USE: install_foo ( etc/ example.doc )\n\n# USE: install_foo ( icon.png logo.png INTO icons)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## CTest defaults\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## CPack defaults\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "Sofa/extlibs/lua/cmake/lua.cmake" : {
      "ObjectId" : "a0f3e67d1f90d70496efbd5b13843a4896176d58",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library for Lua.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahos\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of (Lua module name, file path) pairs.\n\n# Used internally by add_lua_test.  Built by add_lua_module.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# utility function: appends path `path` to path `basepath`, properly\n\n# handling cases when `path` may be relative or absolute.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install_lua_executable ( target source )\n\n# Automatically generate a binary wrapper for lua application and install it\n\n# The wrapper and the source of the application will be placed into /bin\n\n# If the application source did not have .lua suffix then it will be added\n\n# USE: lua_executable ( sputnik src/sputnik.lua )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# _target is CMake-compatible target name for module (e.g. socket_core).\n\n# _module is relative path of target (e.g. socket/core),\n\n#   without extension (e.g. .lua/.so/.dll).\n\n# _MODULE_SRC is list of module source files (e.g. .lua and .c files).\n\n# _MODULE_NAMES is list of module names (e.g. socket.core).\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Lua source module\n",
        "Line" : 194,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : "# Lua C binary module\n",
        "Line" : 211,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "# add_lua_module\n\n# Builds a Lua source module into a destination locatable by Lua\n\n# require syntax.\n\n# Binary modules are also supported where this function takes sources and\n\n# libraries to compile separated by LINK keyword.\n\n# USE: add_lua_module ( socket.http src/http.lua )\n\n# USE2: add_lua_module ( mime.core src/mime.c )\n\n# USE3: add_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n\n# USE4: add_lua_module ( ssl.context ssl.core ALL_IN_ONE src/context.c src/ssl.c )\n\n#   This form builds an \"all-in-one\" module (e.g. ssl.so or ssl.dll containing\n\n#   both modules ssl.context and ssl.core).  The CMake target name will be\n\n#   ssl_all_in_one.\n\n# Also sets variable _module_path (relative path where module typically\n\n# would be installed).\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install_lua_module\n\n# This is the same as `add_lua_module` but also installs the module.\n\n# USE: install_lua_module ( socket.http src/http.lua )\n\n# USE2: install_lua_module ( mime.core src/mime.c )\n\n# USE3: install_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds string representing Lua table mapping Lua modules names to file\n\n# paths.  Used internally.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# avoids cmake complaint\n",
        "Line" : 268,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "# add_lua_test ( _testfile [ WORKING_DIRECTORY _working_dir ] )\n\n# Runs Lua script `_testfile` under CTest tester.\n\n# Optional named argument `WORKING_DIRECTORY` is current working directory to\n\n# run test under (defaults to ${CMAKE_CURRENT_BINARY_DIR}).\n\n# Both paths, if relative, are relative to ${CMAKE_CURRENT_SOURCE_DIR}.\n\n# Any modules previously defined with install_lua_module are automatically\n\n# preloaded (via package.preload) prior to running the test script.\n\n# Under LuaDist, set test=true in config.lua to enable testing.\n\n# USE: add_lua_test ( test/test1.lua [args...] [WORKING_DIRECTORY dir])\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Write wrapper script.\n\n# Note: One simple way to allow the script to find modules is\n\n# to just put them in package.preload.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# note: CMake 2.6 (unlike 2.8) lacks WORKING_DIRECTORY parameter.\n",
        "Line" : 328,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# see also http://gdcm.svn.sourceforge.net/viewvc/gdcm/Sandbox/CMakeModules/UsePythonTest.cmake\n\n# Note: ${CMAKE_CFG_INTDIR} is a command-line argument to allow proper\n\n# expansion by the native build tool.\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Converts Lua source file `_source` to binary string embedded in C source\n\n# file `_target`.  Optionally compiles Lua source to byte code (not available\n\n# under LuaJIT2, which doesn't have a bytecode loader).  Additionally, Lua\n\n# versions of bin2c [1] and luac [2] may be passed respectively as additional\n\n# arguments.\n\n#\n\n# [1] http://lua-users.org/wiki/BinToCee\n\n# [2] http://lua-users.org/wiki/LuaCompilerInLua\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Sofa/extlibs/lua/src/Makefile" : {
      "ObjectId" : "e4a3cd6108c219f19030e2fe48cefa3b3869936a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for building Lua\n\n# see ../INSTALL for installation instructions\n\n# see ../Makefile and luaconf.h for further customization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# convenience targets for popular platforms\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# use this on Mac OS X 10.3-\n\n#\t$(MAKE) all MYCFLAGS=-DLUA_USE_MACOSX\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Sofa/extlibs/metis-5.1.0/CMakeLists.txt" : {
      "ObjectId" : "21e1fd2e501c61afd12f77861618fa1139a1c103",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/metis-5.1.0/GKlib/GKlibSystem.cmake" : {
      "ObjectId" : "1ac3d540a81cdae5d236e79d2717e759dc918e82",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup options.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add compiler flags.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GCC opts.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GCC warnings.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sun insists on -xc99.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find OpenMP if it is requested.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add various definitions.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add various options\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check for features.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Custom check for TLS.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This if checks if that value is cached or not.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Finally set the official C flags.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find GKlib sources.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "Sofa/extlibs/metis-5.1.0/GKlib/test/CMakeLists.txt" : {
      "ObjectId" : "372b0e2f43a22ce8cb0aa35e5b04d498ec88aeb9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Where the header files reside\n\n#include_directories(../)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build program.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/extlibs/miniFlowVR/CMakeLists.txt" : {
      "ObjectId" : "2c09ad8c049580eef6735740ca4cc583e11c4296",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/newmat/CMakeLists.txt" : {
      "ObjectId" : "e77254b401e8d80dbdbe65fbd47099951e5a4126",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Sofa/extlibs/qwt-6.0.1/src/CMakeLists.txt" : {
      "ObjectId" : "5f7d775e381ed3ee9f08efacf1c7c87a330728a5",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Header files containing Q_OBJECT declarations\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Declare moccable files, and get a list of the files to be generated\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Convert absolute paths of moc-generated files to relative paths\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Sofa/extlibs/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "00624f02e83489d21a9a8105d2d55bf5540bc001",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/framework/framework_test/CMakeLists.txt" : {
      "ObjectId" : "3732f39891234a06ba10accf98e62bb275e56d55",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/framework/sofa/core/CMakeLists.txt" : {
      "ObjectId" : "4c909fbbd7e0ddcc90a076e6e7f38cc9c1c85b8f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/framework/sofa/defaulttype/CMakeLists.txt" : {
      "ObjectId" : "03a3f5d835106487e28a1f28551adfbf86a15d0c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#RigidInertia.h\t\n\n#RigidInertia.inl\t\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#SparseConstraintTypes.h\t\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#RigidInertia.cpp\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "Sofa/framework/sofa/helper/CMakeLists.txt" : {
      "ObjectId" : "a1b0bb532637d8b4567cfbddfd833bd03d3501b7",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows lib, used in system::FileSystem\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Sofa/modules/sofa/component/CMakeLists.txt" : {
      "ObjectId" : "e1122616cf62e7558c255b83fdb4822cef823140",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOT SOFA-MISC_NO_OPENGL\n",
        "Line" : 43,
        "CharPositionInLine" : 131
      },
      "1" : {
        "Text" : "# previous option was : SOFA-LIB_PARDISO_SOLVER\n",
        "Line" : 45,
        "CharPositionInLine" : 172
      },
      "2" : {
        "Text" : "#missing LIBS *= -lblas_win32_MT, etc..\n",
        "Line" : 54,
        "CharPositionInLine" : 128
      },
      "CommentCount" : 3
    },
    "Sofa/modules/sofa/component/SofaBaseAnimationLoop/CMakeLists.txt" : {
      "ObjectId" : "77dbfaf94504baaacf7b6f942e5e7c328416fbbf",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaBaseCollision/CMakeLists.txt" : {
      "ObjectId" : "bbc5dff67dafaa5269aefe484c073c0e4cc5fde4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaBaseLinearSolver/CMakeLists.txt" : {
      "ObjectId" : "51a4cf051b2d74ff8b0c74b47075f148c6c542cc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaBaseMechanics/CMakeLists.txt" : {
      "ObjectId" : "13b67eece6bbf2c93e40cd06dcb8ce262d968592",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaBaseTopology/CMakeLists.txt" : {
      "ObjectId" : "2b25ac6e29cfd2ac83ef61a50884902977d635ad",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaBaseVisual/CMakeLists.txt" : {
      "ObjectId" : "8790098dbf2d7485120760966a196db6f35adc3e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaBoundaryCondition/CMakeLists.txt" : {
      "ObjectId" : "d8f8808c47b6c8a1e162a88ae19ffe48c2038c3a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaComponentAdvanced/CMakeLists.txt" : {
      "ObjectId" : "b83851e749581d93384145b79e6ae67fdb3bd5ed",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaComponentBase/CMakeLists.txt" : {
      "ObjectId" : "45a6389caaa1aa448bfa5283ad7a822e51d889db",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaComponentCommon/CMakeLists.txt" : {
      "ObjectId" : "7e91a12c3b085303ec286b1549abd742363f4ccb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaComponentGeneral/CMakeLists.txt" : {
      "ObjectId" : "8a05ae59374c8d005bc44a395e3e8a512cebe74c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaComponentMain/CMakeLists.txt" : {
      "ObjectId" : "b97a1a1457a24a859581452ec3fd5c929961e5f9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaComponentMisc/CMakeLists.txt" : {
      "ObjectId" : "81391930fb5a260cab04bb50ebf03c7984866051",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaConstraint/CMakeLists.txt" : {
      "ObjectId" : "d8e64c160550ed9fe69d5d2d044c882670b04fc9",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaDeformable/CMakeLists.txt" : {
      "ObjectId" : "0042443de482a4d4c4eec28156c76ec21c6ad4cb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaDenseSolver/CMakeLists.txt" : {
      "ObjectId" : "aff6dee74b0bbf858355c724d0e7aae9978864e2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaEigen2Solver/CMakeLists.txt" : {
      "ObjectId" : "754772f29ef78e3c1bb99e7eb83c6f38ce3e2efa",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    ../linearsolver/EigenSparseSquareMatrix.h \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#eigen-unsupported??\n",
        "Line" : 30,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 2
    },
    "Sofa/modules/sofa/component/SofaEngine/CMakeLists.txt" : {
      "ObjectId" : "1a2bf82e94b784416b875ac880265cd86c271ede",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaEulerianFluid/CMakeLists.txt" : {
      "ObjectId" : "20b75a26ce433b3409ad12c6253abf1eb1abfdff",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaExplicitOdeSolver/CMakeLists.txt" : {
      "ObjectId" : "716edcda8402631f60bbd9e2ea791d2c469d74ab",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaExporter/CMakeLists.txt" : {
      "ObjectId" : "aced5d2099ccb7dbed3d2efce150f51dd7207e04",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaGraphComponent/CMakeLists.txt" : {
      "ObjectId" : "82667efa3cea366b68548e658cfab54eefbd4c2e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaHaptics/CMakeLists.txt" : {
      "ObjectId" : "057e896ee93c965d40c31c8abe410b2887eb0ca0",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#../controller/EnslavementForceFeedback.h \n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#../controller/EnslavementForceFeedback.cpp \n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Sofa/modules/sofa/component/SofaImplicitOdeSolver/CMakeLists.txt" : {
      "ObjectId" : "7193a27ad448b0c5ce0f13b8232b113f5272993b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaLoader/CMakeLists.txt" : {
      "ObjectId" : "2bbfddb82a54ebd80e05a6a412f7dfb4eaae2f82",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMeshCollision/CMakeLists.txt" : {
      "ObjectId" : "5c2900c50bdbae9b3888d90dda53613bec2718e3",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMisc/CMakeLists.txt" : {
      "ObjectId" : "74c46a470911402f02aad3f6bf828f017246157c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMiscCollision/CMakeLists.txt" : {
      "ObjectId" : "e0ef7eb234bf0770cb5231aa768f24747efa4398",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# eigen2solver\n",
        "Line" : 34,
        "CharPositionInLine" : 68
      },
      "1" : {
        "Text" : "# eigen2solver\n",
        "Line" : 35,
        "CharPositionInLine" : 70
      },
      "2" : {
        "Text" : "#if(SOFA-LIB_COMPONENT_EIGEN2_SOLVER)\n\n#\tlist(APPEND SOURCE_FILES \"../collision/TetrahedronBarycentricDistanceLMConstraintContact.cpp\")\n\n#\tlist(APPEND SOURCE_FILES \"../collision/BarycentricDistanceLMConstraintContact_DistanceGrid.cpp\")\n\n#endif()\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if(SOFA-LIB_COMPONENT_EIGEN2_SOLVER)\n\n#    AddLinkerDependencies(SofaEigen2Solver)\n\n#endif()\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Sofa/modules/sofa/component/SofaMiscEngine/CMakeLists.txt" : {
      "ObjectId" : "1570f3f2d96baa2ccc66c96a0ab22b40d631d707",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMiscFem/CMakeLists.txt" : {
      "ObjectId" : "abe151e88d41c67896257248d9cfee64dbb81a9f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMiscForceField/CMakeLists.txt" : {
      "ObjectId" : "4c0eeb10974d6782f148dd8074b63c8a9764952b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMiscMapping/CMakeLists.txt" : {
      "ObjectId" : "b33b447dfb9c401a04a03a03f8adfdddda0542a2",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMiscSolver/CMakeLists.txt" : {
      "ObjectId" : "945e5e499bf1bd5af95f501e758824d7e6502597",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaMiscTopology/CMakeLists.txt" : {
      "ObjectId" : "4e14352dac0beec61c9843484afe43dc434b512c",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaNonUniformFem/CMakeLists.txt" : {
      "ObjectId" : "3c051a9de960be95b15fb1e3e9dabd2626b5874b",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    ../forcefield/NonUniformHexahedronFEMForceFieldDensity.h \n\n#    ../forcefield/NonUniformHexahedronFEMForceFieldDensity.inl \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    ../forcefield/NonUniformHexahedronFEMForceFieldDensity.cpp \n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/modules/sofa/component/SofaObjectInteraction/CMakeLists.txt" : {
      "ObjectId" : "c6a2c871f22122900dbe24e7b31c04a7f986c1a4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaOpenglVisual/CMakeLists.txt" : {
      "ObjectId" : "192549128a49256a3ed0d8c1f2b0facc7e63abdb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaPardisoSolver/CMakeLists.txt" : {
      "ObjectId" : "477d5be7022d64442210aa86c96086128e90cecc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaPreconditioner/CMakeLists.txt" : {
      "ObjectId" : "7455976091638d6048f39f26158934a96ea8077e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaRigid/CMakeLists.txt" : {
      "ObjectId" : "909f349a75a7aea38a9ee16de3f74a065a231ed4",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaSimpleFem/CMakeLists.txt" : {
      "ObjectId" : "e1dc538ff0928ef0a3fc6e69638e0fd7ed6176ed",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaSparseSolver/CMakeLists.txt" : {
      "ObjectId" : "46d29df2d1ec72d8f74e8a3877ad67c49af85ac7",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaSphFluid/CMakeLists.txt" : {
      "ObjectId" : "0f3b1f2bc9a65f13b840c0ef388981d36486113a",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaTaucsSolver/CMakeLists.txt" : {
      "ObjectId" : "635895f30fa3d75e50f13822e1a008d6ccf92370",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if(SOFA-EXTERNAL_TAUCS_MT)\n\n#\tlist(APPEND HEADER_FILES \"linearsolver/SparseTAUCSLLtSolver.h\")\n\n#\n\n#\tlist(APPEND SOURCE_FILES \"linearsolver/SparseTAUCSLLtSolver.cpp\")\n\n#endif()\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(WIN32 OR SOFA-EXTERNAL_TAUCS_MT)\n\n#\tAddLinkerDependencies(metis)\n\n#endif()\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/modules/sofa/component/SofaTopologyMapping/CMakeLists.txt" : {
      "ObjectId" : "463e568e2f49679f4a8e23d80db866b65369847e",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaUserInteraction/CMakeLists.txt" : {
      "ObjectId" : "5dac32a8952e5b7953438f70207be53e1a0fb937",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    ../collision/AddFramePerformer.h\n\n#    ../collision/AddFramePerformer.inl\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    ../collision/AddFramePerformer.cpp\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Sofa/modules/sofa/component/SofaValidation/CMakeLists.txt" : {
      "ObjectId" : "6c90e74b698fdb9f071e5d0c74ea42ca7a17f7ba",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/component/SofaVolumetricData/CMakeLists.txt" : {
      "ObjectId" : "5478c7e76db6170a721431980423874a89316e8f",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/simulation/CMakeLists.txt" : {
      "ObjectId" : "68cd8f0c84f2a8f63229a57803f9f1c3eb0715ef",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/simulation/common/CMakeLists.txt" : {
      "ObjectId" : "eb3c62648c8302801dbb8a5b42f72365f23fbdfc",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/simulation/graph/CMakeLists.txt" : {
      "ObjectId" : "3d90ef88d9c3f08741b0a10c6a8aac2d2233eabb",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Sofa/modules/sofa/simulation/tree/CMakeLists.txt" : {
      "ObjectId" : "1a95e656e7e46b95a1df464ca9827dbd72cbb8c0",
      "LastModified" : "2014-06-24T09:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 278,
    "QMAKE" : 5,
    "MAKEFILE" : 5,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 8149
}