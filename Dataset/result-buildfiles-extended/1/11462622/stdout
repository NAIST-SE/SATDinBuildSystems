{
  "Repository" : "11462622",
  "Revision" : "HEAD",
  "ObjectId" : "97243fe20393c4be6a9654a5b6493f7f824ae160",
  "CommitTime" : "2015-02-27T12:52:01Z",
  "Files" : {
    "pom.xml" : {
      "ObjectId" : "91fed6beca23e29e55b2f747ac4a5144ee77c326",
      "LastModified" : "2015-02-19T14:31:42Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Maven build properties ",
        "Line" : 20,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : " Maven plugins versions ",
        "Line" : 25,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : " Libraries versions ",
        "Line" : 28,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : " Only unit tests are run by default. ",
        "Line" : 48,
        "CharPositionInLine" : 47
      },
      "4" : {
        "Text" : " Specifies the build profile id, which is used to find out the correct \n\t\t\t\t\tproperties file. This is not actually necessary for this example, but it \n\t\t\t\t\tcan be used for other purposes. ",
        "Line" : 61,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : " Spring profile to use ",
        "Line" : 62,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : " log configuration ",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "7" : {
        "Text" : " Specifies path to the properties file, which contains profile specific \n\t\t\t\t\t\tconfiguration. In this case, the configuration file is searched from config/ \n\t\t\t\t\t\tdirectory. ",
        "Line" : 71,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : " Placeholders found from files located in the configured resource \n\t\t\t\t\t\tdirectories are replaced with values found from the profile specific configuration \n\t\t\t\t\t\tfiles. ",
        "Line" : 77,
        "CharPositionInLine" : 17
      },
      "9" : {
        "Text" : " You can also include only specific files found from the configured \n\t\t\t\t\t\t\tdirectory or exclude files. This can be done by uncommenting following sections \n\t\t\t\t\t\t\tand adding the configuration under includes and excludes tags. ",
        "Line" : 83,
        "CharPositionInLine" : 74
      },
      "10" : {
        "Text" : " <includes> <include></include> </includes> <excludes> <exclude></exclude> \n\t\t\t\t\t\t\t</excludes> ",
        "Line" : 85,
        "CharPositionInLine" : 23
      },
      "11" : {
        "Text" : " Spring profile to use ",
        "Line" : 94,
        "CharPositionInLine" : 35
      },
      "12" : {
        "Text" : " log configuration ",
        "Line" : 96,
        "CharPositionInLine" : 31
      },
      "13" : {
        "Text" : " Specifies path to the properties file, which contains profile specific \n\t\t\t\t\t\tconfiguration. In this case, the configuration file is searched from config/ \n\t\t\t\t\t\tdirectory. ",
        "Line" : 104,
        "CharPositionInLine" : 21
      },
      "14" : {
        "Text" : " Placeholders found from files located in the configured resource \n\t\t\t\t\t\tdirectories are replaced with values found from the profile specific configuration \n\t\t\t\t\t\tfiles. ",
        "Line" : 110,
        "CharPositionInLine" : 17
      },
      "15" : {
        "Text" : " You can also include only specific files found from the configured \n\t\t\t\t\t\t\tdirectory or exclude files. This can be done by uncommenting following sections \n\t\t\t\t\t\t\tand adding the configuration under includes and excludes tags. ",
        "Line" : 116,
        "CharPositionInLine" : 74
      },
      "16" : {
        "Text" : " <includes> <include></include> </includes> <excludes> <exclude></exclude> \n\t\t\t\t\t\t\t</excludes> ",
        "Line" : 118,
        "CharPositionInLine" : 23
      },
      "17" : {
        "Text" : " Use this plugin to integrate the yeoman build into your maven build. ",
        "Line" : 122,
        "CharPositionInLine" : 83
      },
      "18" : {
        "Text" : " optional ",
        "Line" : 128,
        "CharPositionInLine" : 27
      },
      "19" : {
        "Text" : " optional: you don't really need execution ids,\n\t\t\t\t\t\t\t\t    but it looks nice in your build log. ",
        "Line" : 136,
        "CharPositionInLine" : 53
      },
      "20" : {
        "Text" : " optional: default phase is \"generate-resources\" ",
        "Line" : 141,
        "CharPositionInLine" : 69
      },
      "21" : {
        "Text" : " optional: default phase is \"generate-resources\" ",
        "Line" : 154,
        "CharPositionInLine" : 68
      },
      "22" : {
        "Text" : " optional: the default phase is \"generate-resources\" ",
        "Line" : 177,
        "CharPositionInLine" : 72
      },
      "23" : {
        "Text" : " optional: the default plase is \"test\". Some developers\n\t\t\t\t\t\t\t    choose to run karma in the \"integration-test\" phase. ",
        "Line" : 192,
        "CharPositionInLine" : 68
      },
      "24" : {
        "Text" : " optional: the default is \"karma.conf.js\" in your working directory ",
        "Line" : 196,
        "CharPositionInLine" : 91
      },
      "25" : {
        "Text" : " The Clean Plugin is used when you want to remove files generated \n\t\t\t\t\t\tat build-time in a project's directory. ",
        "Line" : 203,
        "CharPositionInLine" : 50
      },
      "26" : {
        "Text" : "\n                    ",
        "Line" : 222,
        "CharPositionInLine" : 24
      },
      "27" : {
        "Text" : " Used to locate the profile specific configuration file. ",
        "Line" : 295,
        "CharPositionInLine" : 69
      },
      "28" : {
        "Text" : " log configuration ",
        "Line" : 297,
        "CharPositionInLine" : 31
      },
      "29" : {
        "Text" : " Only integration tests are run. ",
        "Line" : 300,
        "CharPositionInLine" : 45
      },
      "30" : {
        "Text" : " Specifies path to the properties file, which contains profile specific \n\t\t\t\t\t\tconfiguration. In this case, the configuration file is searched from profiles/dev/ \n\t\t\t\t\t\tdirectory. ",
        "Line" : 308,
        "CharPositionInLine" : 21
      },
      "31" : {
        "Text" : " Placeholders found from files located in the configured resource \n\t\t\t\t\t\tdirectories are replaced with values found from the profile specific configuration \n\t\t\t\t\t\tfiles. ",
        "Line" : 314,
        "CharPositionInLine" : 17
      },
      "32" : {
        "Text" : " You can also include only specific files found from the configured \n\t\t\t\t\t\t\tdirectory or exclude files. This can be done by uncommenting following sections \n\t\t\t\t\t\t\tand adding the configuration under includes and excludes tags. ",
        "Line" : 320,
        "CharPositionInLine" : 74
      },
      "33" : {
        "Text" : " <includes> <include></include> </includes> <excludes> <exclude></exclude> \n\t\t\t\t\t\t\t</excludes> ",
        "Line" : 322,
        "CharPositionInLine" : 23
      },
      "34" : {
        "Text" : " Metrics ",
        "Line" : 336,
        "CharPositionInLine" : 19
      },
      "35" : {
        "Text" : " Jackson ",
        "Line" : 381,
        "CharPositionInLine" : 19
      },
      "36" : {
        "Text" : " Hikari ",
        "Line" : 408,
        "CharPositionInLine" : 18
      },
      "37" : {
        "Text" : " Commons ",
        "Line" : 421,
        "CharPositionInLine" : 19
      },
      "38" : {
        "Text" : " Inject ",
        "Line" : 433,
        "CharPositionInLine" : 18
      },
      "39" : {
        "Text" : " Joda ",
        "Line" : 440,
        "CharPositionInLine" : 16
      },
      "40" : {
        "Text" : " Mail ",
        "Line" : 456,
        "CharPositionInLine" : 16
      },
      "41" : {
        "Text" : " Hibernate ",
        "Line" : 463,
        "CharPositionInLine" : 21
      },
      "42" : {
        "Text" : " Liquibase ",
        "Line" : 483,
        "CharPositionInLine" : 21
      },
      "43" : {
        "Text" : " Spring ",
        "Line" : 511,
        "CharPositionInLine" : 18
      },
      "44" : {
        "Text" : " To build a war file that is both executable and deployable into an \n\t\t\t\texternal container you need to mark the embedded container dependencies as \n\t\t\t\t“provided” ",
        "Line" : 547,
        "CharPositionInLine" : 19
      },
      "45" : {
        "Text" : " Database dependencies ",
        "Line" : 572,
        "CharPositionInLine" : 33
      },
      "46" : {
        "Text" : " Test dependencies ",
        "Line" : 582,
        "CharPositionInLine" : 29
      },
      "47" : {
        "Text" : " To reduce biolerplate code: lombok ",
        "Line" : 602,
        "CharPositionInLine" : 46
      },
      "48" : {
        "Text" : " For event bus ",
        "Line" : 609,
        "CharPositionInLine" : 31
      },
      "49" : {
        "Text" : " For WebServices: Spring WS ",
        "Line" : 616,
        "CharPositionInLine" : 44
      },
      "50" : {
        "Text" : " The Resources Plugin handles the copying of project resources to \n\t\t\t\tthe output directory. There are two different kinds of resources: main resources \n\t\t\t\tand test resources. The difference is that the main resources are the resources \n\t\t\t\tassociated to the main source code while the test resources are associated \n\t\t\t\tto the test source code. ",
        "Line" : 690,
        "CharPositionInLine" : 33
      },
      "51" : {
        "Text" : " The Enforcer plugin provides goals to control certain environmental \n\t\t\t\tconstraints such as Maven version, JDK version and OS family along with many \n\t\t\t\tmore standard rules and user created rules. ",
        "Line" : 699,
        "CharPositionInLine" : 52
      },
      "52" : {
        "Text" : " We will use the Surefire Maven plugin to run our unit tests. ",
        "Line" : 727,
        "CharPositionInLine" : 73
      },
      "53" : {
        "Text" : " Force alphabetical order to have a reproducible build ",
        "Line" : 732,
        "CharPositionInLine" : 68
      },
      "54" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 734,
        "CharPositionInLine" : 80
      },
      "55" : {
        "Text" : " Excludes integration tests when unit tests are run. ß ",
        "Line" : 736,
        "CharPositionInLine" : 68
      },
      "56" : {
        "Text" : " This plugin contains various small independent goals to assist with \n\t\t\t\tthe Maven build lifecycle. ",
        "Line" : 743,
        "CharPositionInLine" : 35
      },
      "57" : {
        "Text" : " States that the plugin's add-test-source goal is executed at generate-test-sources \n\t\t\t\t\t\tphase. ",
        "Line" : 750,
        "CharPositionInLine" : 17
      },
      "58" : {
        "Text" : " Configures the source directory of integration tests. ",
        "Line" : 758,
        "CharPositionInLine" : 70
      },
      "59" : {
        "Text" : " The Failsafe Maven plugin is used to execute our integration tests. ",
        "Line" : 766,
        "CharPositionInLine" : 80
      },
      "60" : {
        "Text" : " States that both integration-test and verify goals of the Failsafe \n\t\t\t\t\t\tMaven plugin are executed. ",
        "Line" : 773,
        "CharPositionInLine" : 37
      },
      "61" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n\t\t\t\t\t\t\t\tproperty is true ",
        "Line" : 782,
        "CharPositionInLine" : 29
      },
      "62" : {
        "Text" : " The WAR Plugin is responsible for collecting all artifact dependencies, \n\t\t\t\tclasses and resources of the web application and packaging them into a web \n\t\t\t\tapplication archive. ",
        "Line" : 790,
        "CharPositionInLine" : 29
      },
      "63" : {
        "Text" : " The Eclipse Plugin is used to generate Eclipse IDE files (*.classpath, \n\t\t\t\t*.wtpmodules and the .settings folder) for use with a project. ",
        "Line" : 799,
        "CharPositionInLine" : 71
      },
      "64" : {
        "Text" : " SonarQube™ is an open source platform for Continuous Inspection of \n\t\t\t\tcode quality. The Maven Plugin triggers the code analyzers. ",
        "Line" : 809,
        "CharPositionInLine" : 68
      },
      "65" : {
        "Text" : " Provides spring-boot:run goal for Maven, so the application can be \n\t\t\t\teasily run without packaging. ",
        "Line" : 816,
        "CharPositionInLine" : 38
      },
      "66" : {
        "Text" : "\n                ",
        "Line" : 827,
        "CharPositionInLine" : 20
      },
      "67" : {
        "Text" : " To generate Java classes from the WSDL; this plugin will generate classes for the WSDL found at the\n                specified URL, putting those classes in the fk.wsdl package.\n            ",
        "Line" : 848,
        "CharPositionInLine" : 16
      },
      "68" : {
        "Text" : "This plugin's configuration is used to store Eclipse m2e settings \n\t\t\t\t\tonly. It has no influence on the Maven build itself. ",
        "Line" : 873,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 69
    }
  },
  "FileTypes" : {
    "MAVEN" : 1
  },
  "ElapsedTime" : 1350
}