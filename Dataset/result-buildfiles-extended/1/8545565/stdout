{
  "Repository" : "8545565",
  "Revision" : "HEAD",
  "ObjectId" : "939da035afd1de28c7f27c3aa1312380455a79ba",
  "CommitTime" : "2018-12-20T16:08:18Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "87cdf59502520bb0ce18e8767373f597d77f6000",
      "LastModified" : "2018-01-18T18:07:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a root level Makefile that is primarily used by the CI system to\n\n# trigger builds using Docker images (for anything involving non-standard\n\n# tools like OpenModelica).  The goal is that anybody should be able to use\n\n# this Makefile to build the book on any machine that has Docker installed\n\n# on it.\n\n#\n\n# N.B. - Any requires credentials are assumed to be provided by environment\n\n# variables and should *not* be provided here.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#docker pull $(BUILDER_IMAGE)\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# N.B. - This step can only be run by somebody who has access to the Xogeny private packages required to build the\n\n# API.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This target requires the DOCKER_* environment variables to be set\n\n# To see how to actually run the book server, see api/README.md\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This target requires the AWS_*_KEY environment variables to be set\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "docker/Makefile" : {
      "ObjectId" : "f597d18e9e9048766b5f6a683f16b773224f518f",
      "LastModified" : "2017-11-03T18:35:02Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "docker/gopath/src/xogeny/pubbook/Makefile" : {
      "ObjectId" : "1677756146a2bf9a69487ade1bf697c9408f9e49",
      "LastModified" : "2014-08-31T17:09:52Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "retired/Makefile" : {
      "ObjectId" : "b5469b5111355ac4cece7b99d87b76e566e39718",
      "LastModified" : "2013-10-14T14:01:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "text/Makefile" : {
      "ObjectId" : "bb81a84439ee4efd759c9475867db0ba89722a21",
      "LastModified" : "2017-11-14T20:39:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Variables for the SVG2PDF generation\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#IMAGEDIRS can be a list of directories that contain SVG files and are relative to the SOURCEDIR\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SVG to PDF conversion\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The following commands seemed to have problems but are kept for reference\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for the copying of the print versions we use awscli\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Internal variables.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Language definition\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For CI we don't want to rebuild the whole dependencies each time.\n\n# To enable the CI build do, e.g., `make CI_BUILD=1 pdf`\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This builds the material necessary to create the book\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This target builds all the simulation results\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This builds all the JS and JSON files.  Use this if your development\n\n# environment is setup to compile the JS files\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This downloads already compiled JS and JSON files.  Use this if you\n\n# do not have the ability to compile JS files locally\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This target builds all the simulation results and then pushes them\n\n# out to an S3 bucket for static hosting\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This target builds the PDF and the epub version and pushes them\n\n# out to an S3 bucket\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This target builds all the SVG images of icons\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#       If you have issues here, make sure you can import OMPython\n\n#       and OMPythonIDL into the default python interpreter (doing\n\n#       a `export PYTHONPATH=...` if necessary.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This creates links for the JS and JSON and puts the sitemap and robots\n\n# files where they need to be\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This builds the HTML and then runs a simple web server\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#server_de: dirhtml_de build_links\n\n#\t(cd build/dirhtml_de; python -m SimpleHTTPServer)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#server_fr: dirhtml_fr build_links\n\n#\t(cd build/dirhtml_fr; python -m SimpleHTTPServer)\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#server_it: dirhtml_it build_links\n\n#\t(cd build/dirhtml_it; python -m SimpleHTTPServer)\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#web_de: dirhtml_de build_links\n\n#\t(cd build/dirhtml_de; $(SYNC) * s3://$(S3BUCKET)/de/)\n\n#\t$(S3MODIFY)  -m text/css  s3://$(S3BUCKET)/de/_static/*.css\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#web_fr: dirhtml_fr build_links\n\n#\t(cd build/dirhtml_fr; $(SYNC) * s3://$(S3BUCKET)/fr/)\n\n#\t$(S3MODIFY)  -m text/css  s3://$(S3BUCKET)/fr/_static/*.css\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#web_it: dirhtml_it build_links\n\n#\t(cd build/dirhtml_it; $(SYNC) * s3://$(S3BUCKET)/it/)\n\n#\t$(S3MODIFY)  -m text/css  s3://$(S3BUCKET)/it/_static/*.css\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# make sure we have pristine index.rst\n",
        "Line" : 334,
        "CharPositionInLine" : 37
      },
      "28" : {
        "Text" : "# revert back to pristine index.rst\n",
        "Line" : 340,
        "CharPositionInLine" : 37
      },
      "29" : {
        "Text" : "# make sure we have pristine index.rst\n",
        "Line" : 351,
        "CharPositionInLine" : 37
      },
      "30" : {
        "Text" : "# revert back to pristine index.rst\n",
        "Line" : 357,
        "CharPositionInLine" : 37
      },
      "31" : {
        "Text" : "# make sure we have pristine index.rst\n",
        "Line" : 367,
        "CharPositionInLine" : 37
      },
      "32" : {
        "Text" : "# revert back to pristine index.rst\n",
        "Line" : 374,
        "CharPositionInLine" : 37
      },
      "33" : {
        "Text" : "#\t(cd $(BUILDDIR)/xelatex; sed -i '/\\usepackage\\[utf8\\]{inputenc}/d' ModelicaByExample.tex)\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\t(cd $(BUILDDIR)/latex-a4-cn; sed -i '/.DeclareUnicodeCharacter.*/d' ModelicaByExample.tex)\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\t(cd $(BUILDDIR)/xelatex; xelatex -shell-escape -interaction=batchmode  ModelicaByExample.tex; echo 'first pass')\n\n#\t(cd $(BUILDDIR)/xelatex; xelatex  -shell-escape -interaction=batchmode ModelicaByExample.tex; echo 'second pass')\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Arabic\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Chinese\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# German\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Spanish\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# French\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Italian\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Korean\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Portuguese (Brazilian)\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Pattern rule for converting SVG to PDF (and copying symlinks)\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Build a list of SVG files to convert to PDFs\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Make a rule to build the PDFs\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# upload the most time consuming deps so they can be used by CI build\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 48
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 1349
}