{
  "Repository" : "3541077",
  "Revision" : "HEAD",
  "ObjectId" : "cd4e5253578c06e26ce1fbed01f4638b7cc23cbf",
  "CommitTime" : "2019-03-20T03:54:27Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "51bffb01489c59db421fed3ff2deac535997b67a",
      "LastModified" : "2019-02-19T22:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for version number\n",
        "Line" : 8,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 1
    },
    "Makefile" : {
      "ObjectId" : "84982cdee3063727dc01936854a10aca67357f42",
      "LastModified" : "2019-03-20T03:54:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# If the defaults for LLVM_CONFIG are not right for your installation\n\n# create a Makefile.inc file and point LLVM_CONFIG at the llvm-config binary for your llvm distribution\n\n# If you want to enable cuda compiler support is enabled if the path specified by\n\n# CUDA_HOME exists\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Debian packages name llvm-config with a version number - list them here in preference order\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#luajit will be downloaded automatically (it's much smaller than llvm)\n\n#to override this, set LUAJIT_PREFIX to the home of an already installed luajit\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# same with clang\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#if clang is not installed in the same prefix as llvm\n\n#then use the clang in the caller's path\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The -E flag is BSD-specific. It is supported (though undocumented)\n\n# on certain newer versions of GNU Sed, but not all. Check for -E\n\n# support and otherwise fall back to the GNU Sed flag -r.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the following lines to Makefile.inc to switch to LuaJIT-2.1 beta releases\n\n#LUAJIT_VERSION_BASE =2.1\n\n#LUAJIT_VERSION_EXTRA =.0-beta2\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# by default, Terra includes only the pieces of the LLVM libraries it needs,\n\n#  but this can be a problem if third-party-libraries that also need LLVM are\n\n#  used - allow the user to request that some/all of the LLVM components be\n\n#  included and re-exported in their entirety\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# llvm sometimes requires ncurses and libz, check if they have the symbols, and add them if they do\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#makes luajit happy on osx 10.6 (otherwise luaL_newstate returns NULL)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#put any install-specific stuff in here\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# MACOSX_DEPLOYMENT_TARGET is a workaround for https://github.com/LuaJIT/LuaJIT/issues/484\n",
        "Line" : 213,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# extract needed LLVM objects based on a dummy linker invocation\n",
        "Line" : 222,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# include all luajit objects, since the entire lua interface is used in terra \n",
        "Line" : 224,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#rule for packaging lua code into a header file\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#run clang on a C file to extract the header search paths for this architecture\n\n#genclangpaths.lua find the path arguments and formats them into a C file that is included by the cwrapper\n\n#to configure the paths\t\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# dependency rules\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#if we are cleaning, then don't include dependencies (which would require the header files are built)\t\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18,
      "Errorlog" : "line 77:82 token recognition error at: '\\1'\nline 77:84 token recognition error at: '\\2'\n"
    },
    "cmake/Modules/BuildDirs.cmake" : {
      "ObjectId" : "7c54a75c2188a1d045efb9943fa021431bc6b95f",
      "LastModified" : "2018-11-20T18:41:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/ExtractLLVM.cmake" : {
      "ObjectId" : "54f460029d6897738e1ba8f7be781b73954e5ac9",
      "LastModified" : "2018-11-22T01:13:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some versions of LLVM produce broken CMake configurations, so\n\n# provide default definitions when this is the case.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# LLVM doesn't provide these as a list, so we have to make it ourselves.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# The official binary for 3.8 on macOS is buggy and lists LTO (a dynamic\n\n# library) even though LLVMLTO (a static library) is already on the list.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Don't link libraries, since we're using the extracted object files.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Don't extract individual object files.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# For now, statically link Clang.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Don't extract individual object files.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindClang.cmake" : {
      "ObjectId" : "2b7031a1c94bb9561e819d2f424e8dbbdd26cc88",
      "LastModified" : "2018-11-20T18:41:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adapted from: https://github.com/karelklic/canal/blob/master/FindClang.cmake\n\n# Find Clang\n\n#\n\n# It defines the following variables\n\n# CLANG_FOUND        - true if Clang is found\n\n# CLANG_INCLUDE_DIRS - list of Clang include directories\n\n# CLANG_RESOURCE_DIR - directory where Clang stores system libraries\n\n# CLANG_LIBRARIES    - list of Clang libraries\n\n# CLANG_EXECUTABLE   - Clang executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang shared library provides just the limited C interface, so it\n\n# can not be used.  We look for the static libraries.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/GetLuaJIT.cmake" : {
      "ObjectId" : "6360b054dc0d8ad4ea9a883b7e168168ab179251",
      "LastModified" : "2018-11-22T01:13:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Since we need the list of objects at configure time, best we can do\n\n# (without building LuaJIT right this very second) is to guess based\n\n# on the source files contained in the release tarball.\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Don't link libraries, since we're using the extracted object files.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Don't extract individual object files.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make a copy of the LuaJIT shared library into the local build and\n\n# install so that all the directory structures are consistent.\n\n# Note: Need to copy all symlinks (*.so.0 etc.).\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Don't extract individual object files.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/Modules/VersionNumber.cmake" : {
      "ObjectId" : "500ec7f4cbbe4ebfa64f642658c37350efd9e272",
      "LastModified" : "2019-02-19T22:29:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "msvc/Makefile" : {
      "ObjectId" : "debe80b7028441424df4e4470cb8237fd1258802",
      "LastModified" : "2018-11-22T01:13:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Edit these three paths to your \r\n\n# (1) LLVM install (should have bin/ include/ and lib/ directories)\r\n\n# (2) LuaJIT 2.0.5 download directory (does not need to be built)\r\n\n# (3) directory where you downloaded the Terra source\r\n\n# all paths must be ABSOLUTE\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set this if you want to enable CUDA.\r\n\n# CUDA_DIR=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.2\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Ideally, generate the clang/llvm lib list by reading all libs in the llvm/lib dir\r\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only tested for 3.5.2\r\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4,
      "Errorlog" : "line 9:11 token recognition error at: '\\P'\nline 9:20 token recognition error at: '\\l'\nline 9:35 token recognition error at: '\\b'\nline 9:41 token recognition error at: '\\i'\nline 21:13 token recognition error at: '\\P'\nline 21:22 token recognition error at: '\\L'\nline 25:12 token recognition error at: '\\P'\nline 35:36 token recognition error at: '\"$(CUDA_DIR)\\i'\nline 35:77 token recognition error at: '\\i'\nline 35:85 token recognition error at: '\"\\r\\n!ELSE\\r\\nCUDA_INCLUDES=\\r\\n!ENDIF\\r\\n\\r\\n!IFNDEF VS_MAJOR_VERSION\\r\\nVS_MAJOR_VERSION=14\\r\\n!ENDIF\\r\\n\\r\\n!IFNDEF VS_MINOR_VERSION\\r\\nVS_MINOR_VERSION=0\\r\\n!ENDIF\\r\\n\\r\\nVC_VERSION=$(VS_MAJOR_VERSION)$(VS_MINOR_VERSION)\\r\\n\\r\\nSRC = $(TERRA_DIR)\\s'\nline 51:20 token recognition error at: '\\b'\nline 56:19 token recognition error at: '\\s'\nline 56:23 token recognition error at: '\\l'\nline 59:19 token recognition error at: '\\s'\nline 59:23 token recognition error at: '\\l'\nline 62:19 token recognition error at: '\\s'\nline 62:23 token recognition error at: '\\l'\nline 65:19 token recognition error at: '\\s'\nline 65:23 token recognition error at: '\\l'\nline 88:19 token recognition error at: '\\s'\nline 88:23 token recognition error at: '\\l'\nline 91:20 token recognition error at: '\"$(LLVM_DIR)\\l'\nline 91:36 token recognition error at: '\"\\r\\n\\r\\n!IFNDEF CLANG_RESOURCE_DIRECTORY\\r\\nCLANG_RESOURCE_DIRECTORY=$(LLVM_DIR)\\l'\nline 94:40 token recognition error at: '\\c'\nline 97:21 token recognition error at: '\\l'\nline 97:39 token recognition error at: '\\l'\nline 97:55 token recognition error at: '\\l'\nline 97:74 token recognition error at: '\\l'\nline 97:93 token recognition error at: '\\l'\nline 97:112 token recognition error at: '\\l'\nline 97:330 token recognition error at: '\\l'\nline 101:22 token recognition error at: '\\s'\nline 101:26 token recognition error at: '\\l'\nline 104:26 token recognition error at: '\\s'\nline 104:73 token recognition error at: '\\i'\nline 104:101 token recognition error at: '\\i'\nline 104:124 token recognition error at: '\\m'\nline 108:25 token recognition error at: '\\b'\nline 110:30 token recognition error at: '\\i'\nline 110:44 token recognition error at: '\\l'\nline 110:65 token recognition error at: '\\s'\nline 110:69 token recognition error at: '\\l'\nline 111:17 token recognition error at: '\\s'\nline 113:32 token recognition error at: '\\i'\nline 114:35 token recognition error at: '\\i'\nline 115:36 token recognition error at: '\\i'\nline 116:36 token recognition error at: '\\i'\nline 118:28 token recognition error at: '\\s'\nline 118:46 token recognition error at: '\\c'\nline 118:84 token recognition error at: '\\s'\nline 118:102 token recognition error at: '\\c'\nline 118:145 token recognition error at: '\\i'\nline 118:159 token recognition error at: '\\l'\nline 119:27 token recognition error at: '\\s'\nline 121:21 token recognition error at: '\\s'\nline 121:41 token recognition error at: '\\s'\nline 122:21 token recognition error at: '\\c'\nline 122:42 token recognition error at: '\\c'\nline 123:21 token recognition error at: '\\a'\nline 123:39 token recognition error at: '\\a'\nline 125:8 token recognition error at: '\\c'\nline 125:39 token recognition error at: '\\g'\nline 127:14 token recognition error at: '\\g'\nline 127:38 token recognition error at: '\\c'\nline 127:63 token recognition error at: '\\b'\nline 127:67 token recognition error at: '\\c'\nline 129:8 token recognition error at: '\\i'\nline 129:47 token recognition error at: '\\g'\nline 131:14 token recognition error at: '\\g'\nline 131:46 token recognition error at: '\\i'\nline 131:159 token recognition error at: '\\l'\nline 135:28 token recognition error at: '\\c'\nline 135:50 token recognition error at: '\\i'\nline 135:99 token recognition error at: '\\s'\nline 135:117 token recognition error at: '\\c'\nline 139:20 token recognition error at: '\\b'\nline 140:34 token recognition error at: '\\b'\nline 140:65 token recognition error at: '\\b'\nline 141:34 token recognition error at: '\\l'\nline 141:65 token recognition error at: '\\l'\nline 142:24 token recognition error at: '\\b'\nline 144:18 token recognition error at: '\\l'\nline 146:28 token recognition error at: '\\x'\nline 146:32 token recognition error at: '\\M'\nline 148:20 token recognition error at: '\\b'\nline 148:56 token recognition error at: '\\b'\nline 148:77 token recognition error at: '\\m'\nline 150:19 token recognition error at: '\\s'\nline 150:23 token recognition error at: '\\l'\nline 150:41 token recognition error at: '\\b'\nline 151:19 token recognition error at: '\\s'\nline 151:23 token recognition error at: '\\l'\nline 151:41 token recognition error at: '\\l'\nline 152:6 token recognition error at: '\"$(REDIST)\\m'\nline 152:39 token recognition error at: '\" release\\b'\nline 153:33 token recognition error at: '\\m'\nline 153:55 token recognition error at: '\\m'\nline 153:60 token recognition error at: '\\e'\nline 153:64 token recognition error at: '\\g'\nline 153:86 token recognition error at: '\\m'\nline 153:91 token recognition error at: '\\e'\nline 153:95 token recognition error at: '\\g'\nline 153:130 token recognition error at: '\\l'\nline 153:158 token recognition error at: '\\s'\nline 153:162 token recognition error at: '\\l'\nline 156:7 token recognition error at: '\\b'\nline 156:22 token recognition error at: '\\b'\nline 156:35 token recognition error at: '\\b'\nline 156:62 token recognition error at: '\\b'\nline 156:87 token recognition error at: '\\l'\nline 156:112 token recognition error at: '\\b'\n"
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e90c85ea2fb9dd4fd61812427cd8e9f553f9dd14",
      "LastModified" : "2018-11-22T01:13:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n### Terra Generated Source Files\n\n###\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Find a portable way to do this.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This header isn't generated but needs to be relocated to fit the\n\n# build directory structure.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n### Terra Library\n\n###\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: Find portable ways to do all these\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# LLVM provides these as flags, so we have to put them here.\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIXME: Find portable ways to do all these\n",
        "Line" : 147,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "###\n\n### Terra Executable\n\n###\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes LuaJIT happy (otherwise luaL_newstate returns NULL). Has to be\n\n# set as a property otherwise target_link_libraries thinks the arguments\n\n# are libraries.\n",
        "Line" : 253,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 9
    },
    "tests/reference/Makefile" : {
      "ObjectId" : "ae81c627724c35810042f5f0aa52e5aaaad04da3",
      "LastModified" : "2018-11-20T18:41:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#FLAGS = -O3\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FLAGS = -O3 -I/opt/intel/composer_xe_2013.0.088/mkl/include\n\n#LIBS = -framework Accelerate\n\n#LIBS = -L/usr/local/atlasgccavx/lib -latlas -lcblas\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#LIBS = -L/opt/intel/composer_xe_2013.0.088/mkl/lib -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lm\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 7,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 1029
}