{
  "Repository" : "2481649",
  "Revision" : "HEAD",
  "ObjectId" : "6a697ad9b85fdca2c5924ca055b3beff4350be37",
  "CommitTime" : "2019-04-17T07:03:26Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "07675111344a8e381b800e584fdd22d50ad3ea36",
      "LastModified" : "2019-04-12T14:01:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#CFLAGS ?= -march=native -O3 -DNDEBUG -Wall -Wno-unused\n\n#CFLAGS ?= -march=native -O3 -Wall -Wextra -Wno-unused  -fsanitize=addre\n\n#CFLAGS ?= -g -Wall -Wextra -Wno-unused #-fsanitize=address\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-lgdal\n",
        "Line" : 5,
        "CharPositionInLine" : 47
      },
      "2" : {
        "Text" : "# END OF CORE PART, THE REST OF THIS FILE IS NOT ESSENTIAL\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# unit test (end-to-end)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# hack (compatibility flags for old compilers)\n\n#\n\n# The following conditional statement appends \"-std=gnu99\" to CFLAGS when the\n\n# compiler does not define __STDC_VERSION__.  The idea is that many older\n\n# compilers are able to compile standard C when given that option.\n\n# This hack seems to work for all versions of gcc, clang and icc.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exotic targets, not built by default\n\n# FTR: interactive tools, require X11 or freeglut\n\n# MSC: \"misc\" tools, or those requiring GSL\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# single, fat, busybox-like executable\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#$(BIN_FTR:bin/%=src/ftr/%.o)\n",
        "Line" : 79,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# some ftr executable, but compiled for the terminal backend\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# bureaucracy\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# non-standard file dependences\n\n# (this is needed because some .c files include other .c files directly)\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/Makefile" : {
      "ObjectId" : "e3a427fda38615c046f26b84290b920c9f608017",
      "LastModified" : "2017-06-16T15:15:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# user-editable configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# required libraries\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# variables\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# targets\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# dependencies (manual)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# bureaucracy\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# automatic generation of missing dependencies\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# hack for older compilers (adds gnu99 option to CFLAGS, if necessary)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/ftr/Makefile" : {
      "ObjectId" : "3617237ed242bf55f69171678a7e851ed0a27834",
      "LastModified" : "2018-01-19T20:21:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#CFLAGS ?= -g -fsanitize=address\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/misc/older/Makefile" : {
      "ObjectId" : "fb25c02f6cc7e7edf1bcf29b26c694cf0aa5f719",
      "LastModified" : "2017-06-07T16:22:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# compiler specific part (may be removed with minor damage)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The following conditional statement appends \"-std=gnu99\" to CFLAGS when the\n\n# compiler does not define __STDC_VERSION__.  The idea is that many older\n\n# compilers are able to compile standard C when given that option.\n\n# This hack seems to work for all versions of gcc, clang and icc.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# swap next two lines for libraw support\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# swap next two lines for libraw support\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ifndef OMIT_BLUR_MAIN\n\n#define MAIN_BLUR\n\n#endif\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: implement the following behavior without the touch or other ugly hacks\n\n#\n\n#bin/plambda: src/plambda.c src/iio.o\n\n#\t$(CC) $(CFLAGS) -o $@ $^ $(IIOFLAGS)\n\n#bin/plambda: src/plambda.o src/iio.o\n\n#\t$(CC) -o $@ $^ $(IIOFLAGS)\n\n#\n\n#src/plambda.o: src/random.c\n\n#\t@touch src/plambda.c\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/misc/older/views/centroid/Makefile" : {
      "ObjectId" : "aca5d2a3d0a48eb7a9537e44b42e14a9d7430b68",
      "LastModified" : "2017-06-07T16:22:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# NOTE: to change the optimization settings swap the following two lines\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/misc/older/views/elap2/Makefile" : {
      "ObjectId" : "45af74c524d32c058672becd11adaeadc7fbf5d6",
      "LastModified" : "2017-06-07T16:22:27Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/misc/older/views/imscript/Makefile" : {
      "ObjectId" : "7cc8b1e3d4b23d3c443872c507e2d8a821445fbe",
      "LastModified" : "2017-06-07T16:22:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# user-editable configuration (with reasonable defaults)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# required libraries\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# default target\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rules\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# bureaucracy\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# hacks\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/misc/older/views/imscript/src/Makefile" : {
      "ObjectId" : "47f27d70832256fcfc3148617bbf20fe974ad7ae",
      "LastModified" : "2017-06-07T16:22:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# user-editable configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# swap these two lines to change between debug and release (in vim= ddp)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set the following variables to \"yes\" to disable some dependences\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -- end of user-editable part\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# variables\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# default LDLIBS contains with everything\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if requested, remove image libraries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if requestesd, remove FFT-depending programs\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# augment flags with target-specific variables\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# rules\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# default rule (builds everything)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# rule to build all the individual executables\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# rule to build the \"iio\" library interface, linkable with -liio\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# rule to build a single executable \"im\" containing all the programs\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# automatic generation of dependencies\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# bureaucracy\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/misc/older/views/prokudin/Makefile" : {
      "ObjectId" : "0987d7a42931584ab146a741ad9dbff16141a94b",
      "LastModified" : "2017-06-07T16:22:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# NOTE: to change the optimization settings swap the following two lines\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 9
  },
  "ElapsedTime" : 1353
}