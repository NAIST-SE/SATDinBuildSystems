{
  "Repository" : "2411387",
  "Revision" : "HEAD",
  "ObjectId" : "d093d882b551d38c737d82a6de50d608278a83e9",
  "CommitTime" : "2019-02-15T23:51:22Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ba8e6075f789a9b24a5b41bdfe66de469aa148ab",
      "LastModified" : "2019-02-11T20:42:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Makefile" : {
      "ObjectId" : "6ed92407b7e0ac60b43a2cac8eb677048c749635",
      "LastModified" : "2018-12-28T11:55:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/thADDeus/android/build.xml" : {
      "ObjectId" : "b1009b434cea63c218b84179dcc7824a9bddca30",
      "LastModified" : "2014-08-08T13:02:25Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "external_libraries/CMakeLists.txt" : {
      "ObjectId" : "dde431d7cef2e4dfda906b3af6fca17a9b80090a",
      "LastModified" : "2019-02-12T21:25:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tlsf\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external_libraries/boost/libs/serialization/CMake/CMakeLists.txt" : {
      "ObjectId" : "e8ea0d0eb542f9d839606afd175e5decc92cd5d9",
      "LastModified" : "2016-05-03T15:59:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build control file for Serialization Library tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Compiler settings\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we use gcc to test for C++03 compatibility\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++98\")\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n# IDE settings\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# note: it seems that bjam builds both address models in any case\n\n# so we can defer this decision to the IDE just as we do for debug/release\n\n# so we'll not use this now\n\n# set(Boost_ADDRESS_MODEL 64 CACHE INTEGER \"32/64 bits\")\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\n\n# Locate Project Prerequisites \n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Boost\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# note: we're assuming that boost has been built with:\n\n# ./b2 —-layout=versioned toolset=clang-darwin link=static,shared variant=debug,release stage\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###########################\n\n# special notes for Xcode.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# these three should result in CMake setting the variables\n\n# Boost_SERIALIZATION_LIBRARY_DEBUG … to the correct values.  \n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# But my current version of CMake doesn't automatically set the library names\n\n# to point to the the libraries to be used.  The variables are created\n\n# but they are not initialized.  So be prepared to set these variables by hand.\n\n# If you want to use the static libraries - point to the boost libraries ending\n\n# in \".a\".  If you want to use the shared boost libraries - point to the libraries\n\n# ending in \".dylib\".\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# But wait - there's more.\n\n# if both lib.a and lib.dylib both exist in the library directory, Xcode will\n\n# automatically chose the *.dylib one - and there's nothing you can do to fix this.\n\n# So my recommendation is \n\n# a) to place the compiled libraries in two different directories\n\n#    - e.g. stage/lib-static/*.a and stage/lib-shared/*.dylib\n\n#    and set the CMake variable Boost_LIBRARY_DIR to point to one or the other\n\n# b) create two different CMake build directories - build-static and build-shared\n\n#    and switch between projects as desired.  I like to test both since\n\n#    there are things like dead code elimination and visibility which vary\n\n#    between the two environments.\n\n#\n\n#    caveat - as I write this, I've been unable to get the tests on the shared\n\n#    library to function. Problem is that one needs to either put the shared\n\n#    libraries in a special known place or set an environmental\n\n#    variable which points to the shared library directory.  I prefer the latter\n\n#    but I've been unable to figure out how to get Xcode to do on a global basis\n\n#    and it's not practical to do this for 247 test targets one at a time.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# c) The targets in the project will by default be built as universal 32/64 binaries\n\n#    I have yet to experiment with these yet so I just set the target to 64 bit.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# end special note for Xcode\n\n############################\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###########################\n\n# library builds\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ../src/basic_xml_grammar.ipp # doesn't show up in \"Source Files\" in Xcode\"'\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# end library build\n\n###########################\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###########################\n\n# test targets\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# serialization(test_dll_exported dll_polymorphic_derived2_lib)\n\n# serialization(test_dll_simple dll_a_lib)\n\n# compile test_dll_plugin.cpp\n\n# Running the following test requires that the test know the directory \n\n# in which the dll is stored. I don't know how to extract this from bjam\n\n# serialization(test_dll_plugin : : dll_polymorphic_derived2_lib)\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# end test targets\n\n####################\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "####################\n\n# add headers in IDE\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# for serialisation\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# for wserialization\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# end headers in IDE\n\n####################\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#####################\n\n# add test project to run misc tests\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# end test project\n\n#####################\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "platform/CMakeLists.txt" : {
      "ObjectId" : "5240e7cd6fc6e94b7955fb70cb3932d6f4da0333",
      "LastModified" : "2019-01-25T16:58:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/rtaudio/CMakeLists.txt" : {
      "ObjectId" : "c573ed16f608c3052f061f255359920c7a37ca3a",
      "LastModified" : "2019-02-11T20:42:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "a4ca512027e738c8a315eb2a1f22f84dcce45979",
      "LastModified" : "2019-02-11T20:42:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C99 doesn't allow to not declare a parameter name\n",
        "Line" : 43,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "2b7fffaa0331d956579e22b7849e7ceb5735dd3b",
      "LastModified" : "2019-02-11T20:42:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "1e5ff7b2191b412db571ff348ccd1ce431831581",
      "LastModified" : "2019-02-11T20:42:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# =============================================================================\n\n# Plugin directories\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# =============================================================================\n\n# methcla_tests\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# =============================================================================\n\n# methcla_engine_tests\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For Methcla/Utility/Macros.h\n",
        "Line" : 54,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 4
    },
    "tests/android/build.xml" : {
      "ObjectId" : "1e5191d8b386c82b002dc6056ea260730737c4ce",
      "LastModified" : "2019-01-25T16:58:13Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "tools/Makefile" : {
      "ObjectId" : "bed44b3a7b5aa0d88cd08a4f0327f04ab4790473",
      "LastModified" : "2019-01-25T16:58:13Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 8,
    "MAKEFILE" : 2,
    "ANT" : 2
  },
  "ElapsedTime" : 2800
}