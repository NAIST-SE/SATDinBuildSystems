{
  "Repository" : "27013334",
  "Revision" : "HEAD",
  "ObjectId" : "368c970c06008c6b56e59e3df19daf6e00022ad9",
  "CommitTime" : "2019-04-02T19:45:44Z",
  "Files" : {
    "JavaForLejos/build.xml" : {
      "ObjectId" : "0a1c54fd41d334f523fd8b9ee2d35cf01d3ebb60",
      "LastModified" : "2016-04-08T15:29:20Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " as described in the ant manual (http://ant.apache.org/manual/index.html), the scp task has a dependency\n\t     to the library jsch.jar 0.1.50 or later, to be retrieved from http://www.jcraft.com/jsch/index.html\n\t     and placed into the lib directory of your ant installation or in the lib folder of the ant installation\n\t     contained in your eclipse installation (path is similar to plugins\\org.apache.ant_1.9.4.v201504302020\\lib\n\t     If this doesn't work for whatsoever reason, you may manually copy (scp!) the jar to the ev3\n\t",
        "Line" : 23,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/OpenRobertaRobot/pom.xml" : {
      "ObjectId" : "48efd29c51791548d78ca9905af3e137dc9a40a4",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " this is actually the default ",
        "Line" : 141,
        "CharPositionInLine" : 43
      },
      "2" : {
        "Text" : " maybe you need to exclude compressed JS files ",
        "Line" : 143,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : " this is actually the default ",
        "Line" : 145,
        "CharPositionInLine" : 43
      },
      "4" : {
        "Text" : " include the desired reports ",
        "Line" : 152,
        "CharPositionInLine" : 44
      },
      "5" : {
        "Text" : "<report>jslint</report> ",
        "Line" : 153,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 6
    },
    "OpenRobertaParent/OpenRobertaServer/pom.xml" : {
      "ObjectId" : "77cc10fb03b7dd76523614287ecaa418fb02463d",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " https://mvnrepository.com/artifact/com.googlecode.owasp-java-html-sanitizer/owasp-java-html-sanitizer ",
        "Line" : 130,
        "CharPositionInLine" : 113
      },
      "2" : {
        "Text" : " Force alphabetical order to have a reproducible build ",
        "Line" : 276,
        "CharPositionInLine" : 70
      },
      "3" : {
        "Text" : " mvn site creates html test reports and code documentation ",
        "Line" : 305,
        "CharPositionInLine" : 68
      },
      "4" : {
        "Text" : " this is actually the default ",
        "Line" : 315,
        "CharPositionInLine" : 43
      },
      "5" : {
        "Text" : " maybe you need to exclude compressed JS files ",
        "Line" : 317,
        "CharPositionInLine" : 60
      },
      "6" : {
        "Text" : " this is actually the default ",
        "Line" : 319,
        "CharPositionInLine" : 43
      },
      "7" : {
        "Text" : " include the desired reports ",
        "Line" : 326,
        "CharPositionInLine" : 44
      },
      "8" : {
        "Text" : "<report>jslint</report> ",
        "Line" : 327,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 9
    },
    "OpenRobertaParent/RobotArdu/pom.xml" : {
      "ObjectId" : "2275fd11e1c9ec6dd94bb883a3d0a21b81c68075",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/hardware/sam/1.6.11/system/CMSIS/Examples/cmsis_example/gcc/Makefile" : {
      "ObjectId" : "2573603e3169c2e5624cdb140f72e255a21ed37e",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#         ATMEL Microcontroller Software Support \n\n# ----------------------------------------------------------------------------\n\n# Copyright (c) 2010, Atmel Corporation\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following condition is met:\n\n#\n\n# - Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the disclaimer below.\n\n#\n\n# Atmel's name may not be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL \"AS IS\" AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE\n\n# DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n\n# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n\n# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make inner variables\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# custom variables\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build macro\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# output test number information\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the incoming targets to global targets\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# define SAM series\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# output test number information\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/hardware/sam/1.6.11/system/CMSIS/Examples/cmsis_example/gcc_arm/Makefile" : {
      "ObjectId" : "2573603e3169c2e5624cdb140f72e255a21ed37e",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#         ATMEL Microcontroller Software Support \n\n# ----------------------------------------------------------------------------\n\n# Copyright (c) 2010, Atmel Corporation\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following condition is met:\n\n#\n\n# - Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the disclaimer below.\n\n#\n\n# Atmel's name may not be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL \"AS IS\" AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE\n\n# DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n\n# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n\n# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make inner variables\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# custom variables\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build macro\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# output test number information\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the incoming targets to global targets\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# define SAM series\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# output test number information\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/hardware/sam/1.6.11/system/CMSIS/Examples/cmsis_example/gcc_atmel/Makefile" : {
      "ObjectId" : "2573603e3169c2e5624cdb140f72e255a21ed37e",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#         ATMEL Microcontroller Software Support \n\n# ----------------------------------------------------------------------------\n\n# Copyright (c) 2010, Atmel Corporation\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following condition is met:\n\n#\n\n# - Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the disclaimer below.\n\n#\n\n# Atmel's name may not be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL \"AS IS\" AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE\n\n# DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n\n# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n\n# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make inner variables\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# custom variables\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build macro\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# output test number information\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the incoming targets to global targets\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# define SAM series\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# output test number information\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/hardware/sam/1.6.11/system/libsam/build_gcc/Makefile" : {
      "ObjectId" : "a04d3ca32fb7ace6c323e65f50c7006fcf91e2f5",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  Copyright (c) 2011 Arduino.  All right reserved.\n\n#\n\n#  This library is free software; you can redistribute it and/or\n\n#  modify it under the terms of the GNU Lesser General Public\n\n#  License as published by the Free Software Foundation; either\n\n#  version 2.1 of the License, or (at your option) any later version.\n\n#\n\n#  This library is distributed in the hope that it will be useful,\n\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the GNU Lesser General Public License for more details.\n\n#\n\n#  You should have received a copy of the GNU Lesser General Public\n\n#  License along with this library; if not, write to the Free Software\n\n#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Makefile for compiling libchip\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Rules\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libsam_sam3s4c_gcc_rel.a libsam_sam3u4e_gcc_rel.a libsam_sam3x8e_gcc_rel.a libsam_sam3x8h_gcc_rel.a\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/hardware/sam/1.6.11/variants/arduino_due_x/build_gcc/Makefile" : {
      "ObjectId" : "4332f3608004fd7a1cb3975e7d0a70890d097e32",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  Copyright (c) 2011 Arduino.  All right reserved.\n\n#\n\n#  This library is free software; you can redistribute it and/or\n\n#  modify it under the terms of the GNU Lesser General Public\n\n#  License as published by the Free Software Foundation; either\n\n#  version 2.1 of the License, or (at your option) any later version.\n\n#\n\n#  This library is distributed in the hope that it will be useful,\n\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the GNU Lesser General Public License for more details.\n\n#\n\n#  You should have received a copy of the GNU Lesser General Public\n\n#  License along with this library; if not, write to the Free Software\n\n#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Rules\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t@$(MAKE) $(SUBMAKE_OPTIONS) -f libvariant_arduino_due_x.mk\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t@$(MAKE) $(SUBMAKE_OPTIONS) -f libvariant_arduino_due_x.mk $@\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/hardware/samd/1.6.20/bootloaders/zero/Makefile" : {
      "ObjectId" : "1e5fad5e5c9aa4fad375c8e56a5d78f7fec606f7",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (c) 2015 Atmel Corporation/Thibaut VIARD.  All right reserved.\n\n# Copyright (c) 2015 Arduino LLC.  All right reserved.\n\n#\n\n# This library is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU Lesser General Public\n\n# License as published by the Free Software Foundation; either\n\n# version 2.1 of the License, or (at your option) any later version.\n\n#\n\n# This library is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the GNU Lesser General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU Lesser General Public\n\n# License along with this library; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Paths\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Are we using mingw/msys/msys2/cygwin?\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Tools\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Boards definitions\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Compiler options\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Linker options\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Source files and objects\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t@echo OS        = $(OS)\n\n#\t@echo SHELL     = $(SHELL)\n\n#\t@echo TERM      = $(TERM)\n\n#\t\"$(CC)\" -v\n\n#\tenv\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/Makefile" : {
      "ObjectId" : "9a694d8d5722bc90fcb4d8813f60b71b5ba45dec",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/cpp/Makefile" : {
      "ObjectId" : "294c09c7ded333bd1f4d4bd00f00a2a75232b3d7",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/fpin/Makefile" : {
      "ObjectId" : "ade8b0005fa4fbf80ef00b1af65228774c3e831e",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Must use -u _printf_float -u _scanf_float to use floating IO\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/fpout/Makefile" : {
      "ObjectId" : "9a8589e7b70c457645336430a40fe4553c4d54dc",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Must use -u _printf_float to use floating IO\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/minimum/Makefile" : {
      "ObjectId" : "2a30eaa62c30cfee7a624e4b4ccf85f90d71436d",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/multiram/Makefile" : {
      "ObjectId" : "70caa7eb05bb14943ff53d6b2a10407927549596",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/qemu/Makefile" : {
      "ObjectId" : "a96610591656b9fe320c829aaf6749fd2d5b15f9",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/retarget/Makefile" : {
      "ObjectId" : "579999abf9d3838246e9661d1072ab0ac47f4e52",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Need following option for LTO as LTO will treat retarget functions as\n\n# unused without following option\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/share/gcc-arm-none-eabi/samples/src/semihost/Makefile" : {
      "ObjectId" : "67b7658c491e13cbc50bd43e37047dbd55489ee9",
      "LastModified" : "2019-01-28T15:12:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/additional/sensebox/hardware/samd/1.2.1/libraries/Adafruit-GFX-Library/fontconvert/Makefile" : {
      "ObjectId" : "47f5a0e15a5a1587cd379507a1b5cfc8bbd9299f",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/atmega/Makefile" : {
      "ObjectId" : "efe92e62a068578c3b2a6d319d65628c29d7cce9",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x0f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 44:9 token recognition error at: '\"C:\\P'\nline 44:26 token recognition error at: '\\A'\nline 44:32 token recognition error at: '\\A'\nline 44:42 token recognition error at: '\\S'\nline 44:49 token recognition error at: '\\S'\nline 44:60 token recognition error at: '\"\\nSTK500-1 = $(STK500) -e -d$(MCU_TARGET) -pf -vf -if$(PROGRAM)_$(TARGET).hex \\\\n-lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt\\nSTK500-2 = $(STK500) -d$(MCU_TARGET) -ms -q -lCF -LCF -cUSB -I200kHz -s -wt\\n\\n\\nOBJ        = $(PROGRAM).o\\nOPTIMIZE   = -Os\\n\\nDEFS       =\\nLIBS       =\\n\\nCC         = avr-gcc\\n\\n# Override is only needed by avr-lib build system.\\n\\noverride CFLAGS        = -g -Wall $(OPTIMIZE) -mmcu=$(MCU_TARGET) -DF_CPU=$(AVR_FREQ) $(DEFS)\\noverride LDFLAGS       = -Wl,$(LDSECTION)\\n#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\\n\\nOBJCOPY        = avr-objcopy\\nOBJDUMP        = avr-objdump\\n\\nall:\\n\\nlilypad: TARGET = lilypad\\nlilypad: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: $(PROGRAM)_lilypad.hex\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\nlilypad_isp: HFUSE = DD\\nlilypad_isp: LFUSE = E2\\nlilypad_isp: EFUSE = 00\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=3'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\nlilypad_resonator_isp: HFUSE = DD\\nlilypad_resonator_isp: LFUSE = C6\\nlilypad_resonator_isp: EFUSE = 00\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro8: AVR_FREQ = 8000000L\\npro8: $(PROGRAM)_pro_8MHz.hex\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\npro8_isp: HFUSE = DD\\npro8_isp: LFUSE = C6\\npro8_isp: EFUSE = 00\\npro8_isp: isp\\n\\npro16: TARGET = pro_16MHz\\npro16: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro16: AVR_FREQ = 16000000L\\npro16: $(PROGRAM)_pro_16MHz.hex\\n\\npro16_isp: pro16\\npro16_isp: TARGET = pro_16MHz\\npro16_isp: HFUSE = DD\\npro16_isp: LFUSE = C6\\npro16_isp: EFUSE = 00\\npro16_isp: isp\\n\\npro20: TARGET = pro_20mhz\\npro20: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro20: AVR_FREQ = 20000000L\\npro20: $(PROGRAM)_pro_20mhz.hex\\n\\npro20_isp: pro20\\npro20_isp: TARGET = pro_20mhz\\npro20_isp: HFUSE = DD\\npro20_isp: LFUSE = C6\\npro20_isp: EFUSE = 00\\npro20_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1'\\ndiecimila: AVR_FREQ = 16000000L\\ndiecimila: $(PROGRAM)_diecimila.hex\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\ndiecimila_isp: HFUSE = DD\\ndiecimila_isp: LFUSE = FF\\ndiecimila_isp: EFUSE = 00\\ndiecimila_isp: isp\\n\\nng: TARGET = ng\\nng: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nng: AVR_FREQ = 16000000L\\nng: $(PROGRAM)_ng.hex\\n\\nng_isp: ng\\nng_isp: TARGET = ng\\nng_isp: HFUSE = DD\\nng_isp: LFUSE = FF\\nng_isp: EFUSE = 00\\nng_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600\\natmega328: AVR_FREQ = 16000000L\\natmega328: LDSECTION  = --section-start=.text=0x7800\\natmega328: $(PROGRAM)_atmega328.hex\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\natmega328_isp: HFUSE = DA\\natmega328_isp: LFUSE = FF\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\natmega328_notp: TARGET = atmega328_notp\\natmega328_notp: MCU_TARGET = atmega328\\natmega328_notp: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600\\natmega328_notp: AVR_FREQ = 16000000L\\natmega328_notp: LDSECTION  = --section-start=.text=0x7800\\natmega328_notp: $(PROGRAM)_atmega328_notp.hex\\n\\natmega328_notp_isp: atmega328_notp\\natmega328_notp_isp: TARGET = atmega328\\natmega328_notp_isp: MCU_TARGET = atmega328\\natmega328_notp_isp: HFUSE = DA\\natmega328_notp_isp: LFUSE = FF\\natmega328_notp_isp: EFUSE = 05\\natmega328_notp_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600 -DDOUBLE_SPEED\\natmega328_pro8: AVR_FREQ = 8000000L\\natmega328_pro8: LDSECTION  = --section-start=.text=0x7800\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\natmega328_pro8_isp: HFUSE = DA\\natmega328_pro8_isp: LFUSE = FF\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\nmega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' -DBAUD_RATE=57600\\nmega: AVR_FREQ = 16000000L\\nmega: LDSECTION  = --section-start=.text=0x1F000\\nmega: $(PROGRAM)_atmega1280.hex\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\nmega_isp: HFUSE = DA\\nmega_isp: LFUSE = FF\\nmega_isp: EFUSE = F5\\nmega_isp: isp\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O binary $< $@\\n\\t\\n\u0000'\n"
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/atmega8/Makefile" : {
      "ObjectId" : "9202b52355c8e678b579761c74e167618f68348e",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 2004-10-14\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the parameters for the UISP isp tool\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#DIRAVR = /usr/local/avr\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Override is only needed by avr-lib build system.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Rules for building the .text rom images\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/bt/Makefile" : {
      "ObjectId" : "6fe213eec848b6c889a5d84c4e6065b31f6577a8",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x0f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 44:9 token recognition error at: '\"C:\\P'\nline 44:26 token recognition error at: '\\A'\nline 44:32 token recognition error at: '\\A'\nline 44:42 token recognition error at: '\\S'\nline 44:49 token recognition error at: '\\S'\nline 44:60 token recognition error at: '\"\\nSTK500-1 = $(STK500) -e -d$(MCU_TARGET) -pf -vf -if$(PROGRAM)_$(TARGET).hex \\\\n-lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt\\nSTK500-2 = $(STK500) -d$(MCU_TARGET) -ms -q -lCF -LCF -cUSB -I200kHz -s -wt\\n\\n\\nOBJ        = $(PROGRAM).o\\nOPTIMIZE   = -O2\\n\\nDEFS       = \\nLIBS       =\\n\\nCC         = avr-gcc\\n\\n# Override is only needed by avr-lib build system.\\n\\noverride CFLAGS        = -g -Wall $(OPTIMIZE) -mmcu=$(MCU_TARGET) -DF_CPU=$(AVR_FREQ) $(DEFS)\\noverride LDFLAGS       = -Wl,$(LDSECTION)\\n#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\\n\\nOBJCOPY        = avr-objcopy\\nOBJDUMP        = avr-objdump\\n\\nall:\\n\\natmega328_bt: TARGET = atmega328_bt\\natmega328_bt: MCU_TARGET = atmega328p\\natmega328_bt: AVR_FREQ = 16000000L \\natmega328_bt: LDSECTION  = --section-start=.text=0x7000\\natmega328_bt: $(PROGRAM)_atmega328_bt.hex\\n\\natmega328_bt_isp: atmega328_bt\\natmega328_bt_isp: TARGET = atmega328_bt\\natmega328_bt_isp: MCU_TARGET = atmega328p\\natmega328_bt_isp: HFUSE = D8\\natmega328_bt_isp: LFUSE = FF\\natmega328_bt_isp: EFUSE = 05\\natmega328_bt_isp: isp\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O binary $< $@\\n\\t\\n\u0000'\n"
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/caterina-Arduino_Robot/Makefile" : {
      "ObjectId" : "00385e4539ca55231de27f1d1a924256b095089e",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\n\n#----------------------------------------------------------------------------\n\n# WinAVR Makefile Template written by Eric B. Weddington, J�rg Wunsch, et al.\n\n#  >> Modified for use with the LUFA project. <<\n\n#\n\n# Released to the Public Domain\n\n#\n\n# Additional material for this makefile was written by:\n\n# Peter Fleury\n\n# Tim Henigan\n\n# Colin O'Flynn\n\n# Reiner Patommel\n\n# Markus Pfaff\n\n# Sander Pool\n\n# Frederik Rouleau\n\n# Carlos Lamas\n\n# Dean Camera\n\n# Opendous Inc.\n\n# Denver Gingerich\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make doxygen = Generate DoxyGen documentation for the project (must have\n\n#                DoxyGen installed)\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging,\n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# USB vendor ID (VID)\n\n# reuse of this VID by others is forbidden by USB-IF\n\n# official Arduino LLC VID\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# USB product ID (PID)\n\n# official Leonardo PID\n\n# PID = 0x0036\n\n# official Micro PID\n\n# PID = 0x0037\n\n# official Arduino Robot Control Board PID\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# official Arduino Robot Motor Board PID\n\n# PID = 0x0039\n\n# official Esplora PID\n\n# PID = 0x003C\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MCU name\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target architecture (see library \"Board Types\" documentation).\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Target board (see library \"Board Types\" documentation, NONE for projects not requiring\n\n# LUFA board drivers). If USER is selected, put custom board drivers in a directory called\n\n# \"Board\" inside the application directory.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Processor frequency.\n\n#     This will define a symbol, F_CPU, in all source code files equal to the\n\n#     processor frequency in Hz. You can then use this symbol in your source code to\n\n#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done\n\n#     automatically to create a 32-bit value in your source code.\n\n#\n\n#     This will be an integer division of F_USB below, as it is sourced by\n\n#     F_USB after it has run through any CPU prescalers. Note that this value\n\n#     does not *change* the processor frequency - it should merely be updated to\n\n#     reflect the processor speed set externally so that the code can use accurate\n\n#     software delays.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Input clock frequency.\n\n#     This will define a symbol, F_USB, in all source code files equal to the\n\n#     input clock frequency (before any prescaling is performed) in Hz. This value may\n\n#     differ from F_CPU if prescaling is used on the latter, and is required as the\n\n#     raw input clock is fed directly to the PLL sections of the AVR for high speed\n\n#     clock generation for the USB and other AVR subsections. Do NOT tack on a 'UL'\n\n#     at the end, this will be done automatically to create a 32-bit value in your\n\n#     source code.\n\n#\n\n#     If no clock division is performed on the input clock inside the AVR (via the\n\n#     CPU clock adjust registers or the clock division fuses), this will be equal to F_CPU.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Starting byte address of the bootloader, as a byte address - computed via the formula\n\n#   BOOT_START = ((FLASH_SIZE_KB - BOOT_SECTION_SIZE_KB) * 1024)\n\n#\n\n# Note that the bootloader size and start address given in AVRStudio is in words and not\n\n# bytes, and so will need to be doubled to obtain the byte address needed by AVR-GCC.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Object files directory\n\n#     To put object files in current directory, use a dot (.), do NOT make\n\n#     this an empty or blank macro!\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Path to the LUFA library\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# LUFA library compile-time options and predefined tokens\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#LUFA_OPTS += -D NO_BLOCK_SUPPORT\n\n#LUFA_OPTS += -D NO_EEPROM_BYTE_SUPPORT\n\n#LUFA_OPTS += -D NO_FLASH_BYTE_SUPPORT\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create the LUFA source path variables by including the LUFA root makefile\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# List C++ source files here. (C dependencies are automatically generated.)\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n\n#     Even though the DOS/Win* filesystem matches both .s and .S the same,\n\n#     it will preserve the spelling of the filenames, and gcc itself does\n\n#     care about how the name is spelled on its command-line.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s].\n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Place -D or -U options here for C sources\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Place -D or -U options here for ASM sources\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Place -D or -U options here for C++ sources\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#CPPDEFS += -D__STDC_LIMIT_MACROS\n\n#CPPDEFS += -D__STDC_CONSTANT_MACROS\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#---------------- Compiler Options C ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#CFLAGS += -mshort-calls\n\n#CFLAGS += -fno-unit-at-a-time\n\n#CFLAGS += -Wundef\n\n#CFLAGS += -Wunreachable-code\n\n#CFLAGS += -Wsign-compare\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#---------------- Compiler Options C++ ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#CPPFLAGS += -mshort-calls\n\n#CPPFLAGS += -fno-unit-at-a-time\n\n#CPPFLAGS += -Wstrict-prototypes\n\n#CPPFLAGS += -Wunreachable-code\n\n#CPPFLAGS += -Wsign-compare\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#CPPFLAGS += $(CSTANDARD)\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -adhlns:   create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n\n#  -listing-cont-lines: Sets the maximum number of continuation lines of hex\n\n#       dump that will be displayed for a given single line of source input.\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# List any extra directories to look for libraries here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--section-start,.data=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#LDFLAGS += -T linker_script.x\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Programming hardware\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n\n#AVRDUDE_PROGRAMMER = avrispmkII\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\n\n# Note that this counter needs to be initialized first using -Yn,\n\n# see avrdude manual.\n\n#AVRDUDE_ERASE_COUNTER = -y\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude>\n\n# to submit bug reports.\n\n#AVRDUDE_VERBOSE = -v -v\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when\n\n#     avarice is running on a different computer.\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#============================================================================\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#AVRDUDE = /Applications/avrdude -C /Applications/avrdude.conf -B 1\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Define all object files.\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Default target.\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Change the build target to build a HEX file or a library.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#build: lib\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Display size of file.\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Program the device.\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set\n\n#     a breakpoint at main().\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Create library from object files.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Compile: create object files from C++ source files.\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Compile: create assembler files from C++ source files.\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Create object files directory\n",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 96
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/caterina-LilyPadUSB/Makefile" : {
      "ObjectId" : "0b5659a3c96e78aa026c28f1e24e341560a5d9ce",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\n\n#----------------------------------------------------------------------------\n\n# WinAVR Makefile Template written by Eric B. Weddington, J�rg Wunsch, et al.\n\n#  >> Modified for use with the LUFA project. <<\n\n#\n\n# Released to the Public Domain\n\n#\n\n# Additional material for this makefile was written by:\n\n# Peter Fleury\n\n# Tim Henigan\n\n# Colin O'Flynn\n\n# Reiner Patommel\n\n# Markus Pfaff\n\n# Sander Pool\n\n# Frederik Rouleau\n\n# Carlos Lamas\n\n# Dean Camera\n\n# Opendous Inc.\n\n# Denver Gingerich\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make doxygen = Generate DoxyGen documentation for the project (must have\n\n#                DoxyGen installed)\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging,\n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# USB vendor ID (VID)\n\n# official Arduino LLC VID = 0x2341\n\n# SparkFun VID = 0x1B4F\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# USB product ID (PID)\n\n# official Leonardo PID = 0x0036\n\n# SparkFun LilyPadUSB PID = 0x9207\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MCU name\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Target architecture (see library \"Board Types\" documentation).\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target board (see library \"Board Types\" documentation, NONE for projects not requiring\n\n# LUFA board drivers). If USER is selected, put custom board drivers in a directory called\n\n# \"Board\" inside the application directory.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Processor frequency.\n\n#     This will define a symbol, F_CPU, in all source code files equal to the\n\n#     processor frequency in Hz. You can then use this symbol in your source code to\n\n#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done\n\n#     automatically to create a 32-bit value in your source code.\n\n#\n\n#     This will be an integer division of F_USB below, as it is sourced by\n\n#     F_USB after it has run through any CPU prescalers. Note that this value\n\n#     does not *change* the processor frequency - it should merely be updated to\n\n#     reflect the processor speed set externally so that the code can use accurate\n\n#     software delays.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Input clock frequency.\n\n#     This will define a symbol, F_USB, in all source code files equal to the\n\n#     input clock frequency (before any prescaling is performed) in Hz. This value may\n\n#     differ from F_CPU if prescaling is used on the latter, and is required as the\n\n#     raw input clock is fed directly to the PLL sections of the AVR for high speed\n\n#     clock generation for the USB and other AVR subsections. Do NOT tack on a 'UL'\n\n#     at the end, this will be done automatically to create a 32-bit value in your\n\n#     source code.\n\n#\n\n#     If no clock division is performed on the input clock inside the AVR (via the\n\n#     CPU clock adjust registers or the clock division fuses), this will be equal to F_CPU.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Starting byte address of the bootloader, as a byte address - computed via the formula\n\n#   BOOT_START = ((FLASH_SIZE_KB - BOOT_SECTION_SIZE_KB) * 1024)\n\n#\n\n# Note that the bootloader size and start address given in AVRStudio is in words and not\n\n# bytes, and so will need to be doubled to obtain the byte address needed by AVR-GCC.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Object files directory\n\n#     To put object files in current directory, use a dot (.), do NOT make\n\n#     this an empty or blank macro!\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Path to the LUFA library\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# LUFA library compile-time options and predefined tokens\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#LUFA_OPTS += -D NO_BLOCK_SUPPORT\n\n#LUFA_OPTS += -D NO_EEPROM_BYTE_SUPPORT\n\n#LUFA_OPTS += -D NO_FLASH_BYTE_SUPPORT\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Create the LUFA source path variables by including the LUFA root makefile\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# List C++ source files here. (C dependencies are automatically generated.)\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n\n#     Even though the DOS/Win* filesystem matches both .s and .S the same,\n\n#     it will preserve the spelling of the filenames, and gcc itself does\n\n#     care about how the name is spelled on its command-line.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s].\n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Place -D or -U options here for C sources\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Place -D or -U options here for ASM sources\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Place -D or -U options here for C++ sources\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#CPPDEFS += -D__STDC_LIMIT_MACROS\n\n#CPPDEFS += -D__STDC_CONSTANT_MACROS\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#---------------- Compiler Options C ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#CFLAGS += -mshort-calls\n\n#CFLAGS += -fno-unit-at-a-time\n\n#CFLAGS += -Wundef\n\n#CFLAGS += -Wunreachable-code\n\n#CFLAGS += -Wsign-compare\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---------------- Compiler Options C++ ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#CPPFLAGS += -mshort-calls\n\n#CPPFLAGS += -fno-unit-at-a-time\n\n#CPPFLAGS += -Wstrict-prototypes\n\n#CPPFLAGS += -Wunreachable-code\n\n#CPPFLAGS += -Wsign-compare\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#CPPFLAGS += $(CSTANDARD)\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -adhlns:   create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n\n#  -listing-cont-lines: Sets the maximum number of continuation lines of hex\n\n#       dump that will be displayed for a given single line of source input.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# List any extra directories to look for libraries here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--section-start,.data=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#LDFLAGS += -T linker_script.x\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Programming hardware\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\n\n# Note that this counter needs to be initialized first using -Yn,\n\n# see avrdude manual.\n\n#AVRDUDE_ERASE_COUNTER = -y\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude>\n\n# to submit bug reports.\n\n#AVRDUDE_VERBOSE = -v -v\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when\n\n#     avarice is running on a different computer.\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#============================================================================\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Define all object files.\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Default target.\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Change the build target to build a HEX file or a library.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#build: lib\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Display size of file.\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Program the device.\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set\n\n#     a breakpoint at main().\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Create library from object files.\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Compile: create object files from C++ source files.\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Compile: create assembler files from C++ source files.\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 662,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Create object files directory\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 712,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 94
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/caterina/Makefile" : {
      "ObjectId" : "884e3040da7c13c8d98fa165c28384b21306b6e6",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\n\n#----------------------------------------------------------------------------\n\n# WinAVR Makefile Template written by Eric B. Weddington, J�rg Wunsch, et al.\n\n#  >> Modified for use with the LUFA project. <<\n\n#\n\n# Released to the Public Domain\n\n#\n\n# Additional material for this makefile was written by:\n\n# Peter Fleury\n\n# Tim Henigan\n\n# Colin O'Flynn\n\n# Reiner Patommel\n\n# Markus Pfaff\n\n# Sander Pool\n\n# Frederik Rouleau\n\n# Carlos Lamas\n\n# Dean Camera\n\n# Opendous Inc.\n\n# Denver Gingerich\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make doxygen = Generate DoxyGen documentation for the project (must have\n\n#                DoxyGen installed)\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging,\n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# USB vendor ID (VID)\n\n# reuse of this VID by others is forbidden by USB-IF\n\n# official Arduino LLC VID\n\n# VID = 0x2341\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# USB product ID (PID)\n\n# official Leonardo PID\n\n# PID = 0x0036\n\n# official Micro PID\n\n# PID = 0x0037\n\n# official Esplora PID\n\n# PID = 0x003C\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MCU name\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Target architecture (see library \"Board Types\" documentation).\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target board (see library \"Board Types\" documentation, NONE for projects not requiring\n\n# LUFA board drivers). If USER is selected, put custom board drivers in a directory called\n\n# \"Board\" inside the application directory.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Processor frequency.\n\n#     This will define a symbol, F_CPU, in all source code files equal to the\n\n#     processor frequency in Hz. You can then use this symbol in your source code to\n\n#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done\n\n#     automatically to create a 32-bit value in your source code.\n\n#\n\n#     This will be an integer division of F_USB below, as it is sourced by\n\n#     F_USB after it has run through any CPU prescalers. Note that this value\n\n#     does not *change* the processor frequency - it should merely be updated to\n\n#     reflect the processor speed set externally so that the code can use accurate\n\n#     software delays.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Input clock frequency.\n\n#     This will define a symbol, F_USB, in all source code files equal to the\n\n#     input clock frequency (before any prescaling is performed) in Hz. This value may\n\n#     differ from F_CPU if prescaling is used on the latter, and is required as the\n\n#     raw input clock is fed directly to the PLL sections of the AVR for high speed\n\n#     clock generation for the USB and other AVR subsections. Do NOT tack on a 'UL'\n\n#     at the end, this will be done automatically to create a 32-bit value in your\n\n#     source code.\n\n#\n\n#     If no clock division is performed on the input clock inside the AVR (via the\n\n#     CPU clock adjust registers or the clock division fuses), this will be equal to F_CPU.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Starting byte address of the bootloader, as a byte address - computed via the formula\n\n#   BOOT_START = ((FLASH_SIZE_KB - BOOT_SECTION_SIZE_KB) * 1024)\n\n#\n\n# Note that the bootloader size and start address given in AVRStudio is in words and not\n\n# bytes, and so will need to be doubled to obtain the byte address needed by AVR-GCC.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Object files directory\n\n#     To put object files in current directory, use a dot (.), do NOT make\n\n#     this an empty or blank macro!\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Path to the LUFA library\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# LUFA library compile-time options and predefined tokens\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#LUFA_OPTS += -D NO_BLOCK_SUPPORT\n\n#LUFA_OPTS += -D NO_EEPROM_BYTE_SUPPORT\n\n#LUFA_OPTS += -D NO_FLASH_BYTE_SUPPORT\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Create the LUFA source path variables by including the LUFA root makefile\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# List C++ source files here. (C dependencies are automatically generated.)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n\n#     Even though the DOS/Win* filesystem matches both .s and .S the same,\n\n#     it will preserve the spelling of the filenames, and gcc itself does\n\n#     care about how the name is spelled on its command-line.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s].\n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Place -D or -U options here for C sources\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Place -D or -U options here for ASM sources\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Place -D or -U options here for C++ sources\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#CPPDEFS += -D__STDC_LIMIT_MACROS\n\n#CPPDEFS += -D__STDC_CONSTANT_MACROS\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#---------------- Compiler Options C ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#CFLAGS += -mshort-calls\n\n#CFLAGS += -fno-unit-at-a-time\n\n#CFLAGS += -Wundef\n\n#CFLAGS += -Wunreachable-code\n\n#CFLAGS += -Wsign-compare\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---------------- Compiler Options C++ ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#CPPFLAGS += -mshort-calls\n\n#CPPFLAGS += -fno-unit-at-a-time\n\n#CPPFLAGS += -Wstrict-prototypes\n\n#CPPFLAGS += -Wunreachable-code\n\n#CPPFLAGS += -Wsign-compare\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#CPPFLAGS += $(CSTANDARD)\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -adhlns:   create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n\n#  -listing-cont-lines: Sets the maximum number of continuation lines of hex\n\n#       dump that will be displayed for a given single line of source input.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# List any extra directories to look for libraries here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--section-start,.data=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#LDFLAGS += -T linker_script.x\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Programming hardware\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\n\n# Note that this counter needs to be initialized first using -Yn,\n\n# see avrdude manual.\n\n#AVRDUDE_ERASE_COUNTER = -y\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude>\n\n# to submit bug reports.\n\n#AVRDUDE_VERBOSE = -v -v\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when\n\n#     avarice is running on a different computer.\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#============================================================================\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Define all object files.\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Default target.\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Change the build target to build a HEX file or a library.\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#build: lib\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Display size of file.\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Program the device.\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set\n\n#     a breakpoint at main().\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Create library from object files.\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Compile: create object files from C++ source files.\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Compile: create assembler files from C++ source files.\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Create object files directory\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 728,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 94
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/lilypad/src/Makefile" : {
      "ObjectId" : "394a88a94066b74a3e4ea7d2645d8beb2a5d1285",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Instructions\n\n#\n\n# To build the bootloader for the LilyPad:\n\n# make lily\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# enter the target CPU frequency\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x0f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Override is only needed by avr-lib build system.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/optiboot/Makefile" : {
      "ObjectId" : "f8d137de91096c3c86e23d438be5a66931f5daba",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The default behavior is to build using tools that are in the users\n\n# current path variables, but we can also build using an installed\n\n# Arduino user IDE setup, or the Arduino source tree.\n\n# Uncomment this next lines to build within the arduino environment,\n\n# using the arduino-included avrgcc toolset (mac and pc)\n\n# ENV ?= arduino\n\n# ENV ?= arduinodev\n\n# OS ?= macosx\n\n# OS ?= windows\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build environments\n\n# Start of some ugly makefile-isms to allow optiboot to be built\n\n# in several different environments.  See the README.TXT file for\n\n# details.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# default\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For Arduino, we assume that we're connected to the optiboot directory\n\n# included with the arduino distribution, which means that the full set\n\n# of avr-tools are \"right up there\" in standard places.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On windows, SOME of the tool paths will need to have backslashes instead\n\n# of forward slashes (because they use windows cmd.exe for execution instead\n\n# of a unix/mingw shell?)  We also have to ensure that a consistent shell\n\n# is used even if a unix shell is installed (ie as part of WINAVR)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Arduino IDE source code environment.  Use the unpacked compilers created\n\n# by the build (you'll need to do \"ant build\" first.)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# End of build environment code.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x2f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11,
      "Errorlog" : "line 104:9 token recognition error at: '\"C:\\P'\nline 104:26 token recognition error at: '\\A'\nline 104:32 token recognition error at: '\\A'\nline 104:42 token recognition error at: '\\S'\nline 104:49 token recognition error at: '\\S'\nline 182:65 token recognition error at: '\" for\\n# backward compatibility of makefile\\n#\\natmega168: TARGET = atmega168\\natmega168: MCU_TARGET = atmega168\\natmega168: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega168: AVR_FREQ = 16000000L \\natmega168: $(PROGRAM)_atmega168.hex\\natmega168: $(PROGRAM)_atmega168.lst\\n\\natmega168_isp: atmega168\\natmega168_isp: TARGET = atmega168\\n# 2.7V brownout\\natmega168_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega168_isp: LFUSE = FF\\n# 512 byte boot\\natmega168_isp: EFUSE = 04\\natmega168_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: MCU_TARGET = atmega168\\ndiecimila: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\ndiecimila: AVR_FREQ = 16000000L \\ndiecimila: $(PROGRAM)_diecimila.hex\\ndiecimila: $(PROGRAM)_diecimila.lst\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\n# 2.7V brownout\\ndiecimila_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\ndiecimila_isp: LFUSE = FF\\n# 512 byte boot\\ndiecimila_isp: EFUSE = 04\\ndiecimila_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega328: AVR_FREQ = 16000000L\\natmega328: LDSECTIONS  = -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\natmega328: $(PROGRAM)_atmega328.hex\\natmega328: $(PROGRAM)_atmega328.lst\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\natmega328_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega328_isp: LFUSE = FF\\n# 2.7V brownout\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\n# Sanguino has a minimum boot size of 1024 bytes, so enable extra functions\\n#\\nsanguino: TARGET = atmega644p\\nsanguino: MCU_TARGET = atmega644p\\nsanguino: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200' '-DBIGBOOT'\\nsanguino: AVR_FREQ = 16000000L\\nsanguino: LDSECTIONS  = -Wl,--section-start=.text=0xfc00\\nsanguino: $(PROGRAM)_atmega644p.hex\\nsanguino: $(PROGRAM)_atmega644p.lst\\n\\nsanguino_isp: sanguino\\nsanguino_isp: TARGET = atmega644p\\nsanguino_isp: MCU_TARGET = atmega644p\\n# 1024 byte boot\\nsanguino_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nsanguino_isp: LFUSE = FF\\n# 2.7V brownout\\nsanguino_isp: EFUSE = 05\\nsanguino_isp: isp\\n\\n# Mega has a minimum boot size of 1024 bytes, so enable extra functions\\n#mega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200' '-DBIGBOOT'\\nmega: AVR_FREQ = 16000000L\\nmega: LDSECTIONS  = -Wl,--section-start=.text=0x1fc00\\nmega: $(PROGRAM)_atmega1280.hex\\nmega: $(PROGRAM)_atmega1280.lst\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\n# 1024 byte boot\\nmega_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nmega_isp: LFUSE = FF\\n# 2.7V brownout\\nmega_isp: EFUSE = 05\\nmega_isp: isp\\n\\n# ATmega8\\n#\\natmega8: TARGET = atmega8\\natmega8: MCU_TARGET = atmega8\\natmega8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega8: AVR_FREQ = 16000000L \\natmega8: LDSECTIONS  = -Wl,--section-start=.text=0x1e00 -Wl,--section-start=.version=0x1ffe\\natmega8: $(PROGRAM)_atmega8.hex\\natmega8: $(PROGRAM)_atmega8.lst\\n\\natmega8_isp: atmega8\\natmega8_isp: TARGET = atmega8\\natmega8_isp: MCU_TARGET = atmega8\\n# SPIEN, CKOPT, Bootsize=512B\\natmega8_isp: HFUSE = CC\\n# 2.7V brownout, Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega8_isp: LFUSE = BF\\natmega8_isp: isp\\n\\n# ATmega88\\n#\\natmega88: TARGET = atmega88\\natmega88: MCU_TARGET = atmega88\\natmega88: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega88: AVR_FREQ = 16000000L \\natmega88: LDSECTIONS  = -Wl,--section-start=.text=0x1e00 -Wl,--section-start=.version=0x1ffe\\natmega88: $(PROGRAM)_atmega88.hex\\natmega88: $(PROGRAM)_atmega88.lst\\n\\natmega88_isp: atmega88\\natmega88_isp: TARGET = atmega88\\natmega88_isp: MCU_TARGET = atmega88\\n# 2.7V brownout\\natmega88_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natemga88_isp: LFUSE = FF\\n# 512 byte boot\\natmega88_isp: EFUSE = 04\\natmega88_isp: isp\\n\\n\\n# 8MHz clocked platforms\\n#\\n# These are capable of 115200 baud\\n#\\n\\nlilypad: TARGET = lilypad\\nlilypad: MCU_TARGET = atmega168\\nlilypad: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: $(PROGRAM)_lilypad.hex\\nlilypad: $(PROGRAM)_lilypad.lst\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\n# 2.7V brownout\\nlilypad_isp: HFUSE = DD\\n# Internal 8MHz osc (8MHz) Slow rising power\\nlilypad_isp: LFUSE = E2\\n# 512 byte boot\\nlilypad_isp: EFUSE = 04\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: MCU_TARGET = atmega168\\nlilypad_resonator: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.lst\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\n# 2.7V brownout\\nlilypad_resonator_isp: HFUSE = DD\\n# Full swing xtal (20MHz) 258CK/14CK+4.1ms\\nlilypad_resonator_isp: LFUSE = C6\\n# 512 byte boot\\nlilypad_resonator_isp: EFUSE = 04\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: MCU_TARGET = atmega168\\npro8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\npro8: AVR_FREQ = 8000000L\\npro8: $(PROGRAM)_pro_8MHz.hex\\npro8: $(PROGRAM)_pro_8MHz.lst\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\n# 2.7V brownout\\npro8_isp: HFUSE = DD\\n# Full swing xtal (20MHz) 258CK/14CK+4.1ms\\npro8_isp: LFUSE = C6\\n# 512 byte boot\\npro8_isp: EFUSE = 04\\npro8_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega328_pro8: AVR_FREQ = 8000000L\\natmega328_pro8: LDSECTIONS = -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.lst\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\natmega328_pro8_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega328_pro8_isp: LFUSE = FF\\n# 2.7V brownout\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\n# 1MHz clocked platforms\\n#\\n# These are capable of 9600 baud\\n#\\n\\nluminet: TARGET = luminet\\nluminet: MCU_TARGET = attiny84\\nluminet: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=9600'\\nluminet: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nluminet: AVR_FREQ = 1000000L\\nluminet: LDSECTIONS = -Wl,--section-start=.text=0x1d00 -Wl,--section-start=.version=0x1efe\\nluminet: $(PROGRAM)_luminet.hex\\nluminet: $(PROGRAM)_luminet.lst\\n\\nluminet_isp: luminet\\nluminet_isp: TARGET = luminet\\nluminet_isp: MCU_TARGET = attiny84\\n# Brownout disabled\\nluminet_isp: HFUSE = DF\\n# 1MHz internal oscillator, slowly rising power\\nluminet_isp: LFUSE = 62\\n# Self-programming enable\\nluminet_isp: EFUSE = FE\\nluminet_isp: isp\\n\\n#\\n# Generic build instructions\\n#\\n#\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\t$(SIZE) $@\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O binary $< $@\\n\u0000'\n"
    },
    "OpenRobertaParent/RobotArdu/resources/hardware/builtin/arduino/avr/bootloaders/stk500v2/Makefile" : {
      "ObjectId" : "5148cb0ba3674df2d0fbf4fee9567fdac64af2ee",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Makefile to compile and link stk500boot bootloader\n\n# Author: Peter Fleury\n\n# based on WinAVR Makefile Template written by Eric B. Weddington, J�rg Wunsch, et al.\n\n#\n\n# Adjust F_CPU below to the clock frequency in Mhz of your AVR target\n\n# Adjust BOOTLOADER_ADDRESS to your AVR target\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging, \n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n\n#\t<MLS> = Mark Sproul msproul-at-skychariot.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCU name\n\n#MCU = atmega128\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Processor frequency.\n\n#     This will define a symbol, F_CPU, in all source code files equal to the \n\n#     processor frequency. You can then use this symbol in your source code to \n\n#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done\n\n#     automatically to create a 32-bit value in your source code.\n\n#F_CPU = 16000000\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Bootloader\n\n# Please adjust if using a different AVR\n\n# 0x0e00*2=0x1C00 for ATmega8  512 words Boot Size\n\n# 0xFC00*2=0x1F800 for ATmega128  1024 words Boot Size\n\n# 0xF800*2=0x1F000 for ATmega1280\n\n# 0xF000*2=0x1E000 for ATmega1280\n\n#BOOTLOADER_ADDRESS = 1E000\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n\n#     Even though the DOS/Win* filesystem matches both .s and .S the same,\n\n#     it will preserve the spelling of the filenames, and gcc itself does\n\n#     care about how the name is spelled on its command-line.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s]. \n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Place -D or -U options here\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Place -I options here\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---------------- Compiler Options ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -ahlms:    create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--defsym=__heap_start=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#--------------- bootloader linker Options -------\n\n# BOOTLOADER_ADDRESS (=Start of Boot Loader section\n\n# in bytes - not words) is defined above.\n\n#LDFLAGS += -Wl,--section-start=.text=$(BOOTLOADER_ADDRESS) -nostartfiles -nodefaultlibs\n\n#LDFLAGS += -Wl,--section-start=.text=$(BOOTLOADER_ADDRESS) -nostartfiles\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Programming hardware: alf avr910 avrisp bascom bsd \n\n# dt006 pavr picoweb pony-stk200 sp12 stk200 stk500\n\n#\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# programmer connected to serial device\n",
        "Line" : 214,
        "CharPositionInLine" : 23
      },
      "33" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\n\n# Note that this counter needs to be initialized first using -Yn,\n\n# see avrdude manual.\n\n#AVRDUDE_ERASE_COUNTER = -y\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude> \n\n# to submit bug reports.\n\n#AVRDUDE_VERBOSE = -v -v\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when \n\n#     avarice is running on a different computer.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#============================================================================\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Define all object files.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "############################################################\n\n#\tMay 25,\t2010\t<MLS> Adding 1280 support\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "############################################################\n\n#\tJul 6,\t2010\t<MLS> Adding 2560 support\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "############################################################\n\n#Initial config on Amber128 board\n\n#\tavrdude: Device signature = 0x1e9702\n\n#\tavrdude: safemode: lfuse reads as 8F\n\n#\tavrdude: safemode: hfuse reads as CB\n\n#\tavrdude: safemode: efuse reads as FF\n\n#\tJul 17,\t2010\t<MLS> Adding 128 support\n\n############################################################\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#amber128: F_CPU = 16000000\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "############################################################\n\n#\tAug 23, 2010 \t<MLS> Adding atmega2561 support\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "############################################################\n\n#\tavrdude: Device signature = 0x1e9801\n\n#\tavrdude: safemode: lfuse reads as EC\n\n#\tavrdude: safemode: hfuse reads as 18\n\n#\tavrdude: safemode: efuse reads as FD\n\n#\tAug 23,\t2010\t<MLS> Adding cerebot 2560 @ 8mhz\n\n#avrdude -P usb -c usbtiny -p m2560 -v -U flash:w:/Arduino/WiringBootV2_upd1/stk500boot_v2_cerebotplus.hex \n\n############################################################\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "############################################################\n\n#\tAug 23, 2010 \t<MLS> Adding atmega2561 support\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Default target.\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#build:  hex eep lss sym\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Display size of file.\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Program the device.  \n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set \n\n#     a breakpoint at main().\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 79
    },
    "OpenRobertaParent/RobotArdu/resources/libraries/ArduinoSTL/src/abi/libgcc_eh/Makefile" : {
      "ObjectId" : "dede0614d97b09eff51bfe6d7000d569f0bb76e4",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/libraries/ArduinoSTL/src/abi/libsupc/Makefile" : {
      "ObjectId" : "dede0614d97b09eff51bfe6d7000d569f0bb76e4",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "OpenRobertaParent/RobotArdu/resources/libraries/Bob3/Makefile" : {
      "ObjectId" : "23571a896b2706e2fb2192eb9792631ef9710465",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##################\n\n# Compiler setup\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PREFIX =\n\n# GCC_VERSION=\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################\n\n# AVR compiler setup\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##################\n\n# Platforms\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##################\n\n# Math and printf\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##################\n\n# Platform\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##################\n\n# NIBObee Lib\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##################\n\n# Standard Flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##################\n\n# General Rules\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "OpenRobertaParent/RobotArdu/resources/libraries/Bob3/bob3/Makefile" : {
      "ObjectId" : "23571a896b2706e2fb2192eb9792631ef9710465",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##################\n\n# Compiler setup\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PREFIX =\n\n# GCC_VERSION=\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################\n\n# AVR compiler setup\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##################\n\n# Platforms\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##################\n\n# Math and printf\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##################\n\n# Platform\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##################\n\n# NIBObee Lib\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##################\n\n# Standard Flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##################\n\n# General Rules\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "OpenRobertaParent/RobotArdu/resources/libraries/MFRC522/Makefile" : {
      "ObjectId" : "1c737e055d3ae47369bd6af60626a328a7a1c53a",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for MFRC522 library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotEV3/pom.xml" : {
      "ObjectId" : "b68292ce426ba90dec926d738beaa03f7256d399",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/pom.xml" : {
      "ObjectId" : "348a371748818af7e610f5ef88427087380dea65",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed with this work for additional information regarding copyright ownership. Licensed\n\tunder the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n\tUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n\tOF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ",
        "Line" : 5,
        "CharPositionInLine" : 144
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/resources/libs2016/ble-nrf51822/source/supress-warnings.cmake" : {
      "ObjectId" : "60061399da44369aeb876d1daaf1c797a7de488d",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015 ARM Limited\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/resources/libs2016/mbed-classic/CMakeLists.txt" : {
      "ObjectId" : "2d72319d41689be08a88d1801e79b9c83591a787",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# mbed-2 yotta-compatible build system\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure necessary features are enabled:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# override compilation flags:\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the mbed.a library is built from two sets of source files + include\n\n# directories:\n\n#\n\n# MBED_COMMON_SOURCES: the source files that are the same for all targets,\n\n# these are easily found by globbing:\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# (always include the hal header directory, too)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# and MBED_TARGET_SOURCES: these depend on which target we are building for. To\n\n# find these we need to walk the directories in targets/, and wherever we see a\n\n# TARGET_<something> name, recurse only if <something> matches what we're\n\n# currently building for\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append this directory to the search path:\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add all source files in this directory to the sources list:\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# get a list of all subdirectories that we want to recurse into:\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# is this directory name a magic one?\n",
        "Line" : 41,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# target-magic: recurse if the MBED_LEGACY_TARGET_DEFINITIONS **list**\n\n# contains a matching value:\n",
        "Line" : 43,
        "CharPositionInLine" : 14
      },
      "11" : {
        "Text" : "# we could probably unroll the list into a single regex if\n\n# this is a performance problem:\n",
        "Line" : 46,
        "CharPositionInLine" : 18
      },
      "12" : {
        "Text" : "# toolchain-magic: (recurse if the MBED_LEGACY_TOOLCHAIN matches\n\n# this name)\n",
        "Line" : 54,
        "CharPositionInLine" : 14
      },
      "13" : {
        "Text" : "# not special: always recurse into this directory\n",
        "Line" : 60,
        "CharPositionInLine" : 14
      },
      "14" : {
        "Text" : "#message(\"matching_subdirs: ${matching_subdirs}\")\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# recurse:\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#message(\"found target sources: ${MBED_TARGET_SOURCES}\")\n\n#message(\"found target include dirs: ${MBED_TARGET_INCLUDE_DIRS}\")\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# unfortunately, for ARMCC, the startup code needs to be provided as an object\n\n# on the command line (not as part of an archive). To do this we override the\n\n# CMake add_executable command.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# we have to append any target-specific include dirs to the global include dirs\n\n# list, so that any indirect includes (e.g. via mbed.h) of files in those\n\n# directories will work:\n\n# (non-target-specific include dirs are listed in extraIncludes in module.json)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally, we can construct a library using the determined set of include paths\n\n# + source files. Note that the library name must match the name of the yotta\n\n# module (defined in module.json) for this module to link properly with other\n\n# yotta modules.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "OpenRobertaParent/RobotMbed/resources/libs2016/microbit-dal/source/CMakeLists.txt" : {
      "ObjectId" : "863b04445e5c287832eb826573bd010839c8443c",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is no longer auto-generated to make the repository builds with GCC\n\n# and ARMCC no matter what.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/resources/libs2016/nrf51-sdk/source/supress-warnings.cmake" : {
      "ObjectId" : "dd5a7baa40ffb688d478f5293366a8c51d3a1434",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015 ARM Limited\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/resources/libs2017/ble-nrf51822/source/supress-warnings.cmake" : {
      "ObjectId" : "60061399da44369aeb876d1daaf1c797a7de488d",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015 ARM Limited\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/resources/libs2017/mbed-classic/CMakeLists.txt" : {
      "ObjectId" : "2d72319d41689be08a88d1801e79b9c83591a787",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# mbed-2 yotta-compatible build system\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure necessary features are enabled:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# override compilation flags:\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the mbed.a library is built from two sets of source files + include\n\n# directories:\n\n#\n\n# MBED_COMMON_SOURCES: the source files that are the same for all targets,\n\n# these are easily found by globbing:\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# (always include the hal header directory, too)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# and MBED_TARGET_SOURCES: these depend on which target we are building for. To\n\n# find these we need to walk the directories in targets/, and wherever we see a\n\n# TARGET_<something> name, recurse only if <something> matches what we're\n\n# currently building for\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append this directory to the search path:\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add all source files in this directory to the sources list:\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# get a list of all subdirectories that we want to recurse into:\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# is this directory name a magic one?\n",
        "Line" : 41,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# target-magic: recurse if the MBED_LEGACY_TARGET_DEFINITIONS **list**\n\n# contains a matching value:\n",
        "Line" : 43,
        "CharPositionInLine" : 14
      },
      "11" : {
        "Text" : "# we could probably unroll the list into a single regex if\n\n# this is a performance problem:\n",
        "Line" : 46,
        "CharPositionInLine" : 18
      },
      "12" : {
        "Text" : "# toolchain-magic: (recurse if the MBED_LEGACY_TOOLCHAIN matches\n\n# this name)\n",
        "Line" : 54,
        "CharPositionInLine" : 14
      },
      "13" : {
        "Text" : "# not special: always recurse into this directory\n",
        "Line" : 60,
        "CharPositionInLine" : 14
      },
      "14" : {
        "Text" : "#message(\"matching_subdirs: ${matching_subdirs}\")\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# recurse:\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#message(\"found target sources: ${MBED_TARGET_SOURCES}\")\n\n#message(\"found target include dirs: ${MBED_TARGET_INCLUDE_DIRS}\")\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# unfortunately, for ARMCC, the startup code needs to be provided as an object\n\n# on the command line (not as part of an archive). To do this we override the\n\n# CMake add_executable command.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# we have to append any target-specific include dirs to the global include dirs\n\n# list, so that any indirect includes (e.g. via mbed.h) of files in those\n\n# directories will work:\n\n# (non-target-specific include dirs are listed in extraIncludes in module.json)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally, we can construct a library using the determined set of include paths\n\n# + source files. Note that the library name must match the name of the yotta\n\n# module (defined in module.json) for this module to link properly with other\n\n# yotta modules.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "OpenRobertaParent/RobotMbed/resources/libs2017/microbit-dal/source/CMakeLists.txt" : {
      "ObjectId" : "059b99cdcd74e8eb57bd2d0498be669ea531eebc",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is no longer auto-generated to make the repository builds with GCC\n\n# and ARMCC no matter what.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotMbed/resources/libs2017/nrf51-sdk/source/supress-warnings.cmake" : {
      "ObjectId" : "dd5a7baa40ffb688d478f5293366a8c51d3a1434",
      "LastModified" : "2019-03-26T13:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015 ARM Limited\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotNAO/pom.xml" : {
      "ObjectId" : "f02f1cdf52e5fdac259aaec3913c90fe723c7720",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotNXT/pom.xml" : {
      "ObjectId" : "0da8d850a4a3051a83ba96a4a2204e121609412c",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotRaspberryPi/pom.xml" : {
      "ObjectId" : "097c2c050c27bf2dfee4cdfef3539adc42c364da",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotVorwerk/pom.xml" : {
      "ObjectId" : "97a4ba784c7b2cb2c652ce70bbbf1fcb0a91ba3f",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/RobotWeDo/pom.xml" : {
      "ObjectId" : "2920498a34c67e66dc6366773183e59af25d4015",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n    with this work for additional information regarding copyright ownership. \n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not \n    use this file except in compliance with the License. You may obtain a copy \n    of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n    by applicable law or agreed to in writing, software distributed under the \n    License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n    OF ANY KIND, either express or implied. See the License for the specific \n    language governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 1
    },
    "OpenRobertaParent/WedoInterpreter/pom.xml" : {
      "ObjectId" : "cecca2ed8a5ad92b28b9f93f22b2d9a84c67e00d",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "OpenRobertaParent/pom.xml" : {
      "ObjectId" : "3bf620f46a899bf0fc7f7f60838d03132d3c0406",
      "LastModified" : "2019-04-02T19:45:44Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Copyright 2014, 2015 The Open Roberta project. See the NOTICE file distributed \n\twith this work for additional information regarding copyright ownership. \n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not \n\tuse this file except in compliance with the License. You may obtain a copy \n\tof the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n\tby applicable law or agreed to in writing, software distributed under the \n\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n\tOF ANY KIND, either express or implied. See the License for the specific \n\tlanguage governing permissions and limitations under the License. ",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " the server version history is a comma separated list of all versions INCLUDING the actual version. New to old (e.g. 2.1.0,2.0.0,1.9.9,1.9.7) ",
        "Line" : 23,
        "CharPositionInLine" : 158
      },
      "2" : {
        "Text" : " UNUSED functionality - the server SHOULD be compatible between(including) the following two versions of software deployed on the ROBOT ",
        "Line" : 25,
        "CharPositionInLine" : 152
      },
      "3" : {
        "Text" : " UNUSED from EV3 2.6.2+ ",
        "Line" : 46,
        "CharPositionInLine" : 87
      },
      "4" : {
        "Text" : " possible settings: TRACE DEBUG INFO WARN ERROR OFF ",
        "Line" : 48,
        "CharPositionInLine" : 90
      },
      "5" : {
        "Text" : " Force alphabetical order to have a reproducible build ",
        "Line" : 394,
        "CharPositionInLine" : 73
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 8,
    "MAKEFILE" : 30,
    "ANT" : 1,
    "MAVEN" : 12
  },
  "ElapsedTime" : 8153
}