{
  "Repository" : "11339361",
  "Revision" : "HEAD",
  "ObjectId" : "7acaac7a6d90451442a6811eaa5b87ada7446cff",
  "CommitTime" : "2019-04-13T01:31:20Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "af26dfe597d07c87e63a7edbe7756cd52119141a",
      "LastModified" : "2019-04-10T00:05:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Top-Level CmakeLists.txt\n\n# For GNUInstallDirs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Catkin doesn't support multiarch library path, \n\n# fix to \"lib\" if not set by user.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "####### local cmake modules #######\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################\n\n# VERSION\n\n#######################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "####### COMPILATION PARAMS #######\n\n# In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release:\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Hide the --enable-auto-import warning\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# GCC 4 required\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#The CDT Error Parser cannot handle error messages that span \n\n#more than one line, which is the default gcc behavior. \n\n#In order to force gcc to generate single line error messages with no line wrapping\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# [Eclipse] Automatic Discovery of Include directories (Optional, but handy) \n\n#SET(CMAKE_VERBOSE_MAKEFILE ON)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Other paths...\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For Mac ports\n",
        "Line" : 111,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "####### Build libraries as shared or static #######\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "####### OUTPUT DIR #######\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Avoid Visual Studio bin/Release and bin/Debug sub directories\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "####### INSTALL DIR #######\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "####### BUILD OPTIONS #######\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ANDROID_PREBUILD (early exit if true)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "####### DEPENDENCIES #######\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# fix libproj.so not found on Xenial\n",
        "Line" : 223,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# OpenMP (\"-fopenmp\" should be added for flann included in PCL)\n\n# the gcc-4.2.1 coming with MacOS X is not compatible with the OpenMP pragmas we use, so disabling OpenMP for it\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If Qt is here, the GUI will be built\n\n# look for Qt5 (if vtk>5 is installed) before Qt4\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# only for VTK 5\n",
        "Line" : 276,
        "CharPositionInLine" : 40
      },
      "22" : {
        "Text" : "# To avoid conflicts with boost signals/foreach and Qt macros\n",
        "Line" : 288,
        "CharPositionInLine" : 42
      },
      "23" : {
        "Text" : "# Explicitly link to OpenCL (in case of CUDA installed)\n",
        "Line" : 306,
        "CharPositionInLine" : 7
      },
      "24" : {
        "Text" : "# IF PCL depends on OpenNI2 (already found), ignore WITH_OPENNI2\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Force config mode to ignore PCL's findGTSAM.cmake file\n",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "## look for CUDA\n",
        "Line" : 385,
        "CharPositionInLine" : 7
      },
      "27" : {
        "Text" : "# OKVIS requires this specific version\n",
        "Line" : 473,
        "CharPositionInLine" : 48
      },
      "28" : {
        "Text" : "#LOAM requires c++14\n",
        "Line" : 513,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "#Newest versions require std11\n",
        "Line" : 534,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "####### OSX BUNDLE CMAKE_INSTALL_PREFIX #######\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Required when packaging, and set CMAKE_INSTALL_PREFIX to \"/\".\n",
        "Line" : 553,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# make sure CMAKE_INSTALL_PREFIX ends in /\n",
        "Line" : 560,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#If Qt is not here, no need to build a bundle\n",
        "Line" : 571,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "####### SOURCES (Projects) #######\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# CONF_DEPENDENCIES contains only dependencies not required by the headers\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#######################\n\n# Uninstall target, for \"make uninstall\"\n\n#######################\n",
        "Line" : 762,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "####\n\n# Setup RTABMapConfig.cmake\n\n####\n\n# Create the RTABMapConfig.cmake and RTABMapConfigVersion files\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ... for the build tree\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# ... for the install tree\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ... for both\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Install the RTABMapConfig.cmake and RTABMapConfigVersion.cmake\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "####\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "### Install package.xml for catkin\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#######################\n\n# CPACK (Packaging)\n\n#######################\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#SET(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_SOURCE_DIR}/Description.txt\")\n\n#SET(CPACK_RESOURCE_FILE_README \"${CMAKE_SOURCE_DIR}/README.txt\")\n",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#SET(CPACK_PACKAGE_INSTALL_DIRECTORY \"${PROJECT_NAME}${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}\")\n\n#SET(CPACK_PACKAGE_EXECUTABLES \"\")\n\n#SET(CPACK_SOURCE_PACKAGE_FILE_NAME \"${PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}\")\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#SET(CPACK_PACKAGE_ICON ${ICON_PATH})\n\n#SET(CPACK_NSIS_INSTALLED_ICON_NAME ${ICON_PATH})\n\n#SET(CPACK_NSIS_HELP_LINK \"http:\\\\\\\\\\\\\\\\www.${PROJECT_PREFIX}.googlecode.com\")\n\n#SET(CPACK_NSIS_URL_INFO_ABOUT \"http:\\\\\\\\\\\\\\\\www.${PROJECT_PREFIX}.googlecode.com\")\n",
        "Line" : 869,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Set the icon used for the Windows \"Add or Remove Programs\" tool.\n",
        "Line" : 875,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Desktop link (\"executableName\" \"linkName\")\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# The project is created as a bundle over the main app (see ./app/src).\n\n# Here we package only this bundle. Note that we set \n\n# CMAKE_INSTALL_PREFIX to \"/\" when packaging...\n",
        "Line" : 883,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# see comment above for the BUILD_SHARED_LIBS option on Windows\n",
        "Line" : 914,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# vim: set et ft=cmake fenc=utf-8 ff=unix sts=0 sw=2 ts=2 :\n",
        "Line" : 1190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "app/CMakeLists.txt" : {
      "ObjectId" : "182c4168cc44c303fb48795a44d06c4c75217978",
      "LastModified" : "2016-02-16T00:35:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "app/android/CMakeLists.txt" : {
      "ObjectId" : "10630b9b16d302f0fe044da1813f502eb0d37e40",
      "LastModified" : "2017-04-01T18:14:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######\n\n# Packaging\n\n######\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find android\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find ant\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  NativeRTABMap-apk-release\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "app/android/jni/CMakeLists.txt" : {
      "ObjectId" : "76a116fca136e0c536a2798a54ec18a7f6d3f512",
      "LastModified" : "2016-02-16T00:35:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# see ant.properties.in\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "app/src/CMakeLists.txt" : {
      "ObjectId" : "4b78105cc53f6c2eb242825619fd9acda53a63e2",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Qt Gui stuff ###\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#This will generate moc_* for Qt\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# rc.exe has problems with these defintions... commented!\r\n\n#add_definitions(${PCL_DEFINITIONS})\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure the compiler can find include files from our library.\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For Apple set the icns file containing icons\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set how it shows up in the Info.plist file\r\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# set where in the bundle to put the icns file\r\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# include the icns file in the target\r\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add exe icon resource\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# resource compilation for MinGW\r\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Add binary\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---------------------------\r\n\n# Installation stuff\r\n\n#--------------------------- \r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Install needed OpenNI sensor dll by copying directories from the OpenNI2 installation\r\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Mac OS X\r\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Install needed Qt plugins by copying directories from the qt installation\r\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\r\n\n# Exclude debug libraries\r\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#Qt5\r\n",
        "Line" : 151,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#MESSAGE(STATUS \"Qt5 plugin \\\"${plugin_loc}\\\" installed in \\\"${plugin_dest_dir}/plugins${plugin_type}\\\"\")\r\n",
        "Line" : 160,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "#MESSAGE(STATUS \"Qt5 plugin \\\"${plugin_loc}\\\" installed in \\\"${plugin_dest_dir}/plugins${plugin_type}\\\"\")\r\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# install a qt.conf file\r\n\n# this inserts some cmake code into the install script to write the file\r\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# directories to look for dependencies\r\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\r\n\n# The quotes are escaped and variables to use at install time have their $ escaped\r\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\r\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\r\n\n# over.\r\n\n# To find dependencies, cmake use \"otool\" on Apple and \"dumpbin\" on Windows (make sure you have one of them).\r\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 21
    },
    "cmake_modules/FindDC1394.cmake" : {
      "ObjectId" : "c026b7e17bab12ece25e2798f28641459727431c",
      "LastModified" : "2016-08-31T15:07:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find DC1394 alias libdc1394\n\n# This module finds an installed DC1394 package.\n\n#\n\n# It sets the following variables:\n\n#  DC1394_FOUND       - Set to false, or undefined, if DC1394 isn't found.\n\n#  DC1394_INCLUDE_DIRS - The DC1394 include directory.\n\n#  DC1394_LIBRARIES     - The DC1394 library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#On Mac OS X\n\n#if(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n\n#  set(DC1394_LIBRARIES ${DC1394_LIBRARIES} \"-framework CoreServices\")\n\n#endif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# show which DC1394 was found only if not quiet\n",
        "Line" : 23,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# fatal error if DC1394 is required but not found\n",
        "Line" : 28,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    },
    "cmake_modules/FindFlyCapture2.cmake" : {
      "ObjectId" : "092b87b4a76c32a4f042adc10bf8e19b963a0131",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FlyCapture2 \n\n# This module finds an installed FlyCapture2+Triclops stereo camera package. (Point Grey SDK)\n\n#\n\n# It sets the following variables:\n\n#  FlyCapture2_FOUND       - Set to false, or undefined, if FlyCapture2 isn't found.\n\n#  FlyCapture2_INCLUDE_DIRS - The FlyCapture2 include directory.\n\n#  FlyCapture2_LIBRARIES     - The FlyCapture2 library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FlyCapture2 SDK\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Triclops SDK\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# show which FlyCapture2 was found only if not quiet\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# fatal error if FlyCapture2 is required but not found\n",
        "Line" : 50,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "cmake_modules/FindFreenect.cmake" : {
      "ObjectId" : "8da5f4d84ce8902f645162e17598ef55af0d1987",
      "LastModified" : "2016-02-16T00:35:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Freenect alias libfreenect\n\n# This module finds an installed Freenect package.\n\n#\n\n# It sets the following variables:\n\n#  Freenect_FOUND       - Set to false, or undefined, if Freenect isn't found.\n\n#  Freenect_INCLUDE_DIRS - The Freenect include directory.\n\n#  Freenect_LIBRARIES     - The Freenect library to link against.\n\n#  Freenect_DASH_INCLUDES  - If includes have \"-\" instead of \"_\" in their names. New libfreenect has \"_\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which Freenect was found only if not quiet\n",
        "Line" : 26,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if Freenect is required but not found\n",
        "Line" : 32,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindG2O.cmake" : {
      "ObjectId" : "b5901b1a713fa524a9ee62f308d9c43af7c94fe3",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Pre-requisites: Look for csparse\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# chmold dependency\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# G2O: Find the header files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ifdef G2O_NUMBER_FORMAT_STR\n\n#define G2O_CPP11 // we assume that if G2O_NUMBER_FORMAT_STR is defined, this is the new g2o code with c++11 interface\n\n#endif\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Macro to unify finding both the debug and release versions of the\n\n# libraries; this is adapted from the rtabmap config\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the core elements\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the CLI library\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Find the pluggable solvers\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find the predefined types\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# G2O solvers declared found if we found at least one solver\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# G2O itself declared found if we found the core libraries and at least one solver\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake_modules/FindKinectSDK2.cmake" : {
      "ObjectId" : "2ba4534861a64258180ea06fbd20d2deaa97b59a",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindKinectSDK2\n\n# --------------\n\n#\n\n# Find Kinect for Windows SDK v2 (Kinect SDK v2) include dirs, library dirs, libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#    find_package( KinectSDK2 [REQUIRED] )\n\n#\n\n# Results for users are reported in following variables::\n\n#\n\n#    KinectSDK2_FOUND                - Return \"TRUE\" when Kinect SDK v2 found. Otherwise, Return \"FALSE\".\n\n#    KinectSDK2_INCLUDE_DIRS         - Kinect SDK v2 include directories. (${KinectSDK2_DIR}/inc)\n\n#    KinectSDK2_LIBRARY_DIRS         - Kinect SDK v2 library directories. (${KinectSDK2_DIR}/Lib/x86 or ${KinectSDK2_DIR}/Lib/x64)\n\n#    KinectSDK2_LIBRARIES            - Kinect SDK v2 library files. (${KinectSDK2_LIBRARY_DIRS}/Kinect20.lib (If check the box of any application festures, corresponding library will be added.))\n\n#    KinectSDK2_COMMANDS             - Copy commands of redist files for application functions of Kinect SDK v2. (If uncheck the box of all application features, this variable has defined empty command.)\n\n#\n\n# This module reads hints about search locations from following environment variables::\n\n#\n\n#    KINECTSDK20_DIR                 - Kinect SDK v2 root directory. (This environment variable has been set by installer of Kinect SDK v2.)\n\n#\n\n# CMake entries::\n\n#\n\n#    KinectSDK2_DIR                  - Kinect SDK v2 root directory. (Default $ENV{KINECTSDK20_DIR})\n\n#    KinectSDK2_FACE                 - Check the box when using Face or HDFace features. (Default uncheck)\n\n#    KinectSDK2_FUSION               - Check the box when using Fusion features. (Default uncheck)\n\n#    KinectSDK2_VGB                  - Check the box when using Visual Gesture Builder features. (Default uncheck)\n\n#\n\n# Example to find Kinect SDK v2::\n\n#\n\n#    cmake_minimum_required( VERSION 2.8 )\n\n#\n\n#    project( project )\n\n#    add_executable( project main.cpp )\n\n#    set_property( DIRECTORY PROPERTY VS_STARTUP_PROJECT \"project\" )\n\n#\n\n#    # Find package using this module.\n\n#    find_package( KinectSDK2 REQUIRED )\n\n#\n\n#    if(KinectSDK2_FOUND)\n\n#      # [C/C++]>[General]>[Additional Include Directories]\n\n#      include_directories( ${KinectSDK2_INCLUDE_DIRS} )\n\n#\n\n#      # [Linker]>[General]>[Additional Library Directories]\n\n#      link_directories( ${KinectSDK2_LIBRARY_DIRS} )\n\n#\n\n#      # [Linker]>[Input]>[Additional Dependencies]\n\n#      target_link_libraries( project ${KinectSDK2_LIBRARIES} )\n\n#\n\n#      # [Build Events]>[Post-Build Event]>[Command Line]\n\n#      add_custom_command( TARGET project POST_BUILD ${KinectSDK2_COMMANDS} )\n\n#    endif()\n\n#\n\n# =============================================================================\n\n#\n\n# Copyright (c) 2016 Tsukasa SUGIURA\n\n# Distributed under the MIT License.\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#\n\n# =============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##### Utility #####\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check Directory Macro\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check Files Macro\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Target Platform\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##### Find Kinect SDK v2 #####\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Found\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Options\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Root Directoty\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include Directories\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Library Directories\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Dependencies\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Custom Commands\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Empty Commands\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "cmake_modules/FindORB_SLAM2.cmake" : {
      "ObjectId" : "41be019441ede5f7b5369d679505d505f939b515",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ORB_SLAM2 \n\n#\n\n# It sets the following variables:\n\n#  ORB_SLAM2_FOUND         - Set to false, or undefined, if ORB_SLAM2 isn't found.\n\n#  ORB_SLAM2_INCLUDE_DIRS  - The ORB_SLAM2 include directory.\n\n#  ORB_SLAM2_LIBRARIES     - The ORB_SLAM2 library to link against.\n\n#\n\n#  Set ORB_SLAM2_ROOT_DIR environment variable as the path to ORB_SLAM2 root folder.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which ORB_SLAM2 was found only if not quiet\n",
        "Line" : 23,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if ORB_SLAM2 is required but not found\n",
        "Line" : 28,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindOpenNI2.cmake" : {
      "ObjectId" : "0698a3ee0b665147eda38221bf831155ddd7545c",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenNI2\n\n# This module finds an installed OpenNI2 package.\n\n#\n\n# It sets the following variables:\n\n#  OpenNI2_FOUND       - Set to false, or undefined, if OpenNI2 isn't found.\n\n#  OpenNI2_INCLUDE_DIRS - The OpenNI2 include directory.\n\n#  OpenNI2_LIBRARIES     - The OpenNI2 libraries to link against.\n\n#  OpenNI2_LIBRARY       - The OpenNI2 library alone.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which OpenNI2 was found only if not quiet\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if OpenNI2 is required but not found\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindPthreads.cmake" : {
      "ObjectId" : "85ee711bc9b4a62524ce3f40a6475934e2fc38f0",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Pthreads library\r\n\n# This module searches for the Pthreads library (including the\r\n\n# pthreads-win32 port).\r\n\n#\r\n\n# This module defines these variables:\r\n\n#\r\n\n#  PTHREADS_FOUND\r\n\n#      True if the Pthreads library was found\r\n\n#  PTHREADS_LIBRARY\r\n\n#      The location of the Pthreads library\r\n\n#  PTHREADS_INCLUDE_DIR\r\n\n#      The include path of the Pthreads library\r\n\n#  PTHREADS_DEFINITIONS\r\n\n#      Preprocessor definitions to define\r\n\n#\r\n\n# This module responds to the PTHREADS_EXCEPTION_SCHEME\r\n\n# variable on Win32 to allow the user to control the\r\n\n# library linked against.  The Pthreads-win32 port\r\n\n# provides the ability to link against a version of the\r\n\n# library with exception handling.  IT IS NOT RECOMMENDED\r\n\n# THAT YOU USE THIS because most POSIX thread implementations\r\n\n# do not support stack unwinding.\r\n\n#\r\n\n#  PTHREADS_EXCEPTION_SCHEME\r\n\n#      C  = no exceptions (default)\r\n\n#         (NOTE: This is the default scheme on most POSIX thread\r\n\n#          implementations and what you should probably be using)\r\n\n#      CE = C++ Exception Handling\r\n\n#      SE = Structure Exception Handling (MSVC only)\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# Define a default exception scheme to link against\r\n\n# and validate user choice.\r\n\n#\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assign default if needed\r\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Validate\r\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\r\n\n# Find the header file\r\n\n#\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\r\n\n# Find the library\r\n\n#\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unix / Cygwin / Apple\r\n",
        "Line" : 76,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 7
    },
    "cmake_modules/FindQVTK.cmake" : {
      "ObjectId" : "18ae5767a388d2ac2f24d22dea4b4a4e5b0e7829",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Find QVTK\n\n#\n\n# This sets the following variables:\n\n# QVTK_FOUND - True if QVTK was found.\n\n# QVTK_INCLUDE_DIR - Directory containing the QVTK include files.\n\n# QVTK_LIBRARY - QVTK library.\n\n# if QVTK_FOUND then QVTK_INCLUDE_DIR is appended to VTK_INCLUDE_DIRS and \n\n# QVTK_LIBRARY is appended to QVTK_LIBRARY_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindRealSense.cmake" : {
      "ObjectId" : "0767be7b12a77f0cbcedbd85f32caf74b3ed3fdc",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find librealsense (https://github.com/IntelRealSense/librealsense)\n\n#\n\n#  RealSense_ROOT_DIR environment variable can be set to find the library.\n\n#\n\n# It sets the following variables:\n\n#  RealSense_FOUND       - Set to false, or undefined, if RealSense isn't found.\n\n#  RealSenseSlam_FOUND    - Set to false, or undefined, if RealSense slam module isn't found.\n\n#  RealSense_INCLUDE_DIRS - The RealSense include directory.\n\n#  RealSense_LIBRARIES     - The RealSense library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use find_package( RealSense COMPONENTS slam ) to search for realsense slam library\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#RealSense library\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SLAM\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# show which RealSense was found only if not quiet\n",
        "Line" : 68,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# fatal error if RealSense is required but not found\n",
        "Line" : 73,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 6
    },
    "cmake_modules/FindRealSense2.cmake" : {
      "ObjectId" : "71fdd8698c324c63376a96e54ecae161156be6d1",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find librealsense (https://github.com/IntelRealSense/librealsense)\n\n#\n\n#  RealSense2_ROOT_DIR environment variable can be set to find the library.\n\n#\n\n# It sets the following variables:\n\n#  RealSense2_FOUND         - Set to false, or undefined, if RealSense2 isn't found.\n\n#  RealSense2_INCLUDE_DIRS  - The RealSense2 include directory.\n\n#  RealSense2_LIBRARIES     - The RealSense2 library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#RealSense library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compatibility with linux names\n",
        "Line" : 26,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# show which RealSense was found only if not quiet\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# fatal error if RealSense is required but not found\n",
        "Line" : 36,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "cmake_modules/FindSqlite3.cmake" : {
      "ObjectId" : "a5e5a10cf7a48bac5fccb0e0dcf4eeb13186285a",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Sqlite3\n\n# This module finds an installed Sqlite3 package.\n\n#\n\n# It sets the following variables:\n\n#  Sqlite3_FOUND       - Set to false, or undefined, if Sqlite3 isn't found.\n\n#  Sqlite3_INCLUDE_DIR - The Sqlite3 include directory.\n\n#  Sqlite3_LIBRARY     - The Sqlite3 library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which Sqlite3 was found only if not quiet\n",
        "Line" : 20,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if Sqlite3 is required but not found\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindTango.cmake" : {
      "ObjectId" : "fac3463fec56577688027aa6008877b64f9d8b8b",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tango\n\n# This module finds an installed Tango client C-API package.\n\n#\n\n# It sets the following variables:\n\n#  Tango_FOUND       - Set to false, or undefined, if Tango isn't found.\n\n#  Tango_INCLUDE_DIRS - The Tango include directory.\n\n#  Tango_LIBRARIES     - The Tango library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which Tango was found only if not quiet\n",
        "Line" : 21,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if Tango is required but not found\n",
        "Line" : 26,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake_modules/android.toolchain.cmake" : {
      "ObjectId" : "a04ed08fa7640402a99a7d296887f0e1fdfaf951",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r10d\n\n#  Requires cmake 2.6.3 or newer (2.8.9 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (and newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - ARMv5TE based CPU with software floating point operations\n\n#        \"armeabi-v7a\" - ARMv7 based devices with hardware FPU instructions\n\n#            this ABI target is used by default\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP\n\n#        \"x86\" - IA-32 instruction set\n\n#        \"mips\" - MIPS32 instruction set\n\n#\n\n#      64-bit ABIs for NDK r10 and newer:\n\n#        \"arm64-v8a\" - ARMv8 AArch64 instruction set\n\n#        \"x86_64\" - Intel64 instruction set (r1)\n\n#        \"mips64\" - MIPS64 instruction set (r6)\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#      Note: building for \"android-L\" requires explicit configuration.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r10c the possible values are:\n\n#\n\n#        * aarch64-linux-android-4.9\n\n#        * aarch64-linux-android-clang3.4\n\n#        * aarch64-linux-android-clang3.5\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-4.8\n\n#        * arm-linux-androideabi-4.9 (default)\n\n#        * arm-linux-androideabi-clang3.4\n\n#        * arm-linux-androideabi-clang3.5\n\n#        * mips64el-linux-android-4.9\n\n#        * mips64el-linux-android-clang3.4\n\n#        * mips64el-linux-android-clang3.5\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-4.8\n\n#        * mipsel-linux-android-4.9\n\n#        * mipsel-linux-android-clang3.4\n\n#        * mipsel-linux-android-clang3.5\n\n#        * x86-4.6\n\n#        * x86-4.8\n\n#        * x86-4.9\n\n#        * x86-clang3.4\n\n#        * x86-clang3.5\n\n#        * x86_64-4.9\n\n#        * x86_64-clang3.4\n\n#        * x86_64-clang3.5\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"armeabi-v6 with VFP\"\n\n#      (is forced to be ON) ABI.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS or ARM64_V8A or X86_64 or MIPS64\n\n#    will be set true, mutually exclusive. NEON option will be set true\n\n#    if VFP is set to NEON.\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable to suppress \"unused variable\" warning\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# inherit settings in recursive loads\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# walk up to try to find the config file\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# this one is important\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this one not so much\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# rpath makes low sense for Android\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NDK search paths\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# known ABIs\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# API level defaults\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 362,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# detect current host platform\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 401,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 405,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 419,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# remember found paths\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# try to detect change\n",
        "Line" : 447,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# android NDK layout\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 474,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 486,
        "CharPositionInLine" : 71
      },
      "24" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 491,
        "CharPositionInLine" : 71
      },
      "25" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 495,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 502,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#message(\"machine: !${__machine}!\\narch: !${__arch}!\\nversion: !${__version}!\\ntoolchain: !${__toolchain}!\\n\")\n",
        "Line" : 583,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 604,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 617,
        "CharPositionInLine" : 39
      },
      "32" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# choose target ABI\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# set target ABI options\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 706,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 734,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# choose toolchain\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# choose native API level\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# adjust API level\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# validate\n",
        "Line" : 812,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# remember target ABI\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 842,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 919,
        "CharPositionInLine" : 3
      },
      "46" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 929,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# clang\n",
        "Line" : 964,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 988,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# do nothing\n",
        "Line" : 994,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# before r7\n",
        "Line" : 1004,
        "CharPositionInLine" : 42
      },
      "51" : {
        "Text" : "# before r8d\n",
        "Line" : 1012,
        "CharPositionInLine" : 46
      },
      "52" : {
        "Text" : "# before r7\n",
        "Line" : 1017,
        "CharPositionInLine" : 42
      },
      "53" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1029,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1047,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1049,
        "CharPositionInLine" : 137
      },
      "56" : {
        "Text" : "# r7-r8\n",
        "Line" : 1051,
        "CharPositionInLine" : 110
      },
      "57" : {
        "Text" : "# before r7\n",
        "Line" : 1053,
        "CharPositionInLine" : 36
      },
      "58" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1073,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# TODO: check if .so file exists before the renaming\n",
        "Line" : 1076,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# ccache support\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1093,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1136,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1159,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1175,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1181,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1196,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# NDK flags\n",
        "Line" : 1203,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1220,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1247,
        "CharPositionInLine" : 62
      },
      "70" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1254,
        "CharPositionInLine" : 72
      },
      "71" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1257,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1268,
        "CharPositionInLine" : 91
      },
      "73" : {
        "Text" : "# STL\n",
        "Line" : 1283,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# C objects:\n",
        "Line" : 1294,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1312,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# before r7\n",
        "Line" : 1313,
        "CharPositionInLine" : 40
      },
      "77" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1314,
        "CharPositionInLine" : 1
      },
      "78" : {
        "Text" : "# linker flags\n",
        "Line" : 1334,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1338,
        "CharPositionInLine" : 1
      },
      "80" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1345,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# after r8b\n",
        "Line" : 1366,
        "CharPositionInLine" : 48
      },
      "82" : {
        "Text" : "# version 4.6\n",
        "Line" : 1374,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "# cache flags\n",
        "Line" : 1396,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1407,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# finish flags\n",
        "Line" : 1413,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# pie/pic\n",
        "Line" : 1430,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# configure rtti\n",
        "Line" : 1440,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1449,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1460,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1462,
        "CharPositionInLine" : 111
      },
      "91" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1465,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# setup output directories\n",
        "Line" : 1502,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1519,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1531,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1535,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1538,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1544,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1566,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1588,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1625,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1627,
        "CharPositionInLine" : 1
      },
      "102" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1629,
        "CharPositionInLine" : 37
      },
      "103" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1633,
        "CharPositionInLine" : 1
      },
      "104" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK : path to your NDK install\n\n#   NDK_CCACHE : path to your ccache executable\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   ARM64_V8A : TRUE for arm64-v8a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   X86_64 : TRUE if configured for x86_64\n\n#   MIPS : TRUE if configured for mips\n\n#   MIPS64 : TRUE if configured for mips64\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : from r5 to r10d; set only for NDK\n\n#   ANDROID_NDK_RELEASE_NUM : numeric ANDROID_NDK_RELEASE version (1000*major+minor)\n\n#   ANDROID_ARCH_NAME : \"arm\", \"x86\", \"mips\", \"arm64\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1638,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 105
    },
    "corelib/CMakeLists.txt" : {
      "ObjectId" : "1d6f03b459391b31b68d304f1a6b0e271d9f50cc",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "corelib/src/CMakeLists.txt" : {
      "ObjectId" : "2c32cd0a5793213fabe4ec37012709e2031f00ec",
      "LastModified" : "2019-04-10T00:05:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#clams stuff\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# to get includes in visual studio\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#before so that g2o includes are taken from ORB_SLAM2 directory before the official g2o one\n",
        "Line" : 448,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Make sure GTSAM is built with system Eigen, not the included one in its package\n",
        "Line" : 458,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# GTSAM should be built in STATIC on Windows to avoid \"error C2338: THIS_METHOD_IS_ONLY_FOR_1x1_EXPRESSIONS\" when building GTSAM\n",
        "Line" : 475,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Windows: Place static libs at the end\n",
        "Line" : 480,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "####################################\n\n# Generate resources files\n\n####################################\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#replace semicolons by spaces\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "####################################\n\n# Generate resources files END\n\n####################################\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make sure the compiler can find include files from our library.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add binary that is built from the source file \"main.cpp\".\n\n# The extension is automatically found.\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "examples/BOWMapping/CMakeLists.txt" : {
      "ObjectId" : "7fff03c7f98fc72b6a7dbe48cd581896815f7648",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# external build\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "2844e10367dd2e045da6ada0f522954b69732eeb",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Export/CMakeLists.txt" : {
      "ObjectId" : "2f34f891abcd4c56313e21101910f99cbb8a9233",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# external build\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "examples/NoEventsExample/CMakeLists.txt" : {
      "ObjectId" : "681faf8367efd0a0f966ba6a0c27840fc68b6b3b",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# external build\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Find Qt5 first\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "examples/RGBDMapping/CMakeLists.txt" : {
      "ObjectId" : "abeb92a595cb067e13672bbde1c2639142939588",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# external build\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Find Qt5 first\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# fix libproj.so not found on Xenial\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "examples/WifiMapping/CMakeLists.txt" : {
      "ObjectId" : "c6cec96ca6287b2c56ab0efc25fbe08a2e52cb2b",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# external build\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Find Qt5 first\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "guilib/CMakeLists.txt" : {
      "ObjectId" : "1d6f03b459391b31b68d304f1a6b0e271d9f50cc",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "guilib/src/CMakeLists.txt" : {
      "ObjectId" : "a5a037d41d70efa680fbc32f362cd89aebbd2732",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Qt Gui stuff ###\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# generate rules for building source files from the resources\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#Generate .h files from the .ui files\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#This will generate moc_* for Qt\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "### Qt Gui stuff  end###\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# to get includes in visual studio\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for qt ui generated in binary dir\n",
        "Line" : 128,
        "CharPositionInLine" : 29
      },
      "7" : {
        "Text" : "#include files\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# create a library from the source files\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Linking with Qt libraries\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "f63b2e11b4d59139305852bac5cdcaa65419ff87",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/Calibration/CMakeLists.txt" : {
      "ObjectId" : "8c1c87a9050acfc4d4b85deb9150544836213e5f",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/Camera/CMakeLists.txt" : {
      "ObjectId" : "83757766d15c26f053b1231638ee10a0ecb3ce66",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/CameraRGBD/CMakeLists.txt" : {
      "ObjectId" : "bcd3a89abda1ee36c888cf581be94488ac339f8d",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# visualization module required\n",
        "Line" : 3,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 1
    },
    "tools/ConsoleApp/CMakeLists.txt" : {
      "ObjectId" : "32d4387b3b29433f5c99e6e827f122f159547afb",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our library.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add binary called \"consoleApp\" that is built from the source file \"main.cpp\".\n\n# The extension is automatically found.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/DataRecorder/CMakeLists.txt" : {
      "ObjectId" : "d93af8a16e4d55f73b9e9c0604f92150cc950185",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/DatabaseViewer/CMakeLists.txt" : {
      "ObjectId" : "b04b2ed23e0140c466e0d19d18a4c75d4cafd942",
      "LastModified" : "2018-11-01T14:38:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/DetectMoreLoopClosures/CMakeLists.txt" : {
      "ObjectId" : "dc4ee47a44aa5fd4c40195f528d768d028dc0ad5",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/EpipolarGeometry/CMakeLists.txt" : {
      "ObjectId" : "6a2ae47a40695f4d33703e62769f5c479379d28a",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/EurocDataset/CMakeLists.txt" : {
      "ObjectId" : "3a3a34c11dc05b9462355c4a03039d5a8f65238c",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/ExtractObject/CMakeLists.txt" : {
      "ObjectId" : "e57bea58589fc10d26afed3c0d9d068c50367d31",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our library.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add binary called \"consoleApp\" that is built from the source file \"main.cpp\".\n\n# The extension is automatically found.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/ImagesJoiner/CMakeLists.txt" : {
      "ObjectId" : "c6979bfe71ca402b847e87a3bdc2aa8906118e41",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our library.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add binary called \"imagesJoiner\" that is built from the source file \"main.cpp\".\n\n# The extension is automatically found.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/KittiDataset/CMakeLists.txt" : {
      "ObjectId" : "6a3a9e1f0c1e9186549f46a6ac979ce013d09b30",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/OdometryViewer/CMakeLists.txt" : {
      "ObjectId" : "05733d36fe462d6809bfb6e38182e6d65d661cfa",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/Recovery/CMakeLists.txt" : {
      "ObjectId" : "137e0d208c6fdf2f21e650de9bc611e12b1babc8",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/Report/CMakeLists.txt" : {
      "ObjectId" : "9aa78341b3f45fc0c9d15a7755084ae0c6eef3f8",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/Reprocess/CMakeLists.txt" : {
      "ObjectId" : "7eee7db3ed3bd7333a0b7d7d8ff1d1edfbd91229",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/RgbdDataset/CMakeLists.txt" : {
      "ObjectId" : "85192ec3a4a2035d92add1c425af2a285ae44c5a",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inside rtabmap project (see below for external build)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/StereoEval/CMakeLists.txt" : {
      "ObjectId" : "2592ea97681967f9dbf80239bf7b57e5722eb27f",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/VocabularyComparison/CMakeLists.txt" : {
      "ObjectId" : "b5455c238e7331936d556225b3678210f873e415",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utilite/CMakeLists.txt" : {
      "ObjectId" : "61f80be1e62cc3a764096205983bcba5a3509b12",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utilite/resource_generator/CMakeLists.txt" : {
      "ObjectId" : "40489b1404d1e0149124a4cd3280b62820f8707c",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our library.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add binary called \"resource_tool\" that is built from the source file \"main.cpp\".\n\n# The extension is automatically found.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "utilite/src/CMakeLists.txt" : {
      "ObjectId" : "f174fc2a39ca43b5066306e7ae198bbd6b1d553f",
      "LastModified" : "2019-03-16T19:27:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our library.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 52
  },
  "ElapsedTime" : 3502
}