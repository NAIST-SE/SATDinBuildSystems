{
  "Repository" : "13989349",
  "Revision" : "HEAD",
  "ObjectId" : "bb7f6c18ed4f851059bf63630978356b5c9ac108",
  "CommitTime" : "2018-05-15T14:10:55Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "efb936ab9fae04efe2728002d3c11018a57d7eb7",
      "LastModified" : "2018-05-15T12:55:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fix MACOSX_RPATH.\n\n# Allow VERSION argument in project().\n",
        "Line" : 3,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# No longer implicitly dereference variables.\n",
        "Line" : 6,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# Always use Release variant of C++ runtime.\n\n# We don't want to provide Debug variants of all dependencies. Some default\n\n# flags set by CMake must be tweaked.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Do not allow unresolved symbols in shared library (default on linux)\n\n# unless sanitizer is used (sanity checks produce unresolved function calls)\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/ProjectLLVM.cmake" : {
      "ObjectId" : "5feee1abee6178a9f6ad5995d763253dff7b180e",
      "LastModified" : "2017-12-21T10:23:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configures LLVM dependency\n\n#\n\n# This function handles everything needed to setup LLVM project.\n\n# By default it downloads and builds LLVM from source.\n\n# In case LLVM_DIR variable is set it tries to use the pointed pre-built\n\n# LLVM package. LLVM_DIR should point LLVM's shared cmake files to be used\n\n# by find_package(... CONFIG) function.\n\n#\n\n# Creates a target representing all required LLVM libraries and include path.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To create a fake imported library later on we need to know the\n\n# location of some library\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Just get the first one. Usually there is only one.\n",
        "Line" : 20,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# Add some diagnostics to detect issues before building.\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# List of required LLVM libs.\n\n# Generated with `llvm-config --libs mcjit ipo x86codegen`\n\n# Only used here locally to setup the \"llvm\" imported target\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# System libs that LLVM depend on.\n\n# See `llvm-config --system-libs`\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Build directly to install dir to avoid copy.\n",
        "Line" : 66,
        "CharPositionInLine" : 49
      },
      "7" : {
        "Text" : "# Disable terminal color support\n\n# Disable compression support -- not needed at all\n",
        "Line" : 69,
        "CharPositionInLine" : 51
      },
      "8" : {
        "Text" : "# Must exists.\n",
        "Line" : 85,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# Pick one of the libraries to be the main one. It does not matter which one\n\n# but the imported target requires the IMPORTED_LOCATION property.\n",
        "Line" : 91,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Clang needs this to build LLVM. Weird that the GCC does not.\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Create the target representing\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "libevmjit/CMakeLists.txt" : {
      "ObjectId" : "36e871b0d89ee0d27a35ba82e702483a3baccb24",
      "LastModified" : "2018-04-04T15:34:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do not export symbols from dependies, mostly LLVM libs\n",
        "Line" : 29,
        "CharPositionInLine" : 87
      },
      "1" : {
        "Text" : "# Explicit dependency on llvm to download LLVM header files.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This section configures evmjit-standalone -- a static library containing\n\n# evmjit and all its static dependencies.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This function tries to get a list of all static library dependencies of\n\n# a target. It probably does not handle all cases to be generic, but works for\n\n# LLVM case.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Skip interface libraries.\n",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "# Here LIB is a full path to a (hopefuly static) library. We don't\n\n# want system libs (usually dynamic) here.\n",
        "Line" : 98,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# When building static lib add additional target evmjit-standalone --\n\n# an archive containing all LLVM dependencies in a single file.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# For platforms using ar a linker scripts is created and used to create\n\n# the standalone library.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Generate the linker script.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Execute the script.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# The \"thin\" library is also provided. It is smaller that the standalone one\n\n# but cannot be redistributed.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# FIXME: Looks it will be better to create evmjit-standalone as a library with costum steps instead of custom taget.\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Export the full path to evmjit-standalone library to be used in tests.\n\n# TODO: It would be easier if evmjit-standalone was a library target, but it\n\n#       works for now.\n",
        "Line" : 168,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 13
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "16d944e724946c7b5b1c5aca30af9cb08b8dcfb8",
      "LastModified" : "2018-04-04T15:34:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Library tests:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 4
  },
  "ElapsedTime" : 821
}