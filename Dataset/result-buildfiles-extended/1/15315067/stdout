{
  "Repository" : "15315067",
  "Revision" : "HEAD",
  "ObjectId" : "e7c0a0acb05eedad9ed37a72c1bdf2d658511b42",
  "CommitTime" : "2016-05-24T15:06:37Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6531008a60b7ae258911de9f319ead6323509037",
      "LastModified" : "2016-02-22T13:03:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for makefile based builds default to release builds\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Settings that can be tweaked by the user prior to building.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# select render api\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# these are required for all extlibs packages that use precompiled headers from nebula\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# select physics implementation\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#uuid lib\n",
        "Line" : 118,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "#libc\n",
        "Line" : 119,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "#lib for dynamic linkage\n",
        "Line" : 120,
        "CharPositionInLine" : 36
      },
      "8" : {
        "Text" : "# Linux specific code\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# help find the nidl files that live in the binary directory now\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "code/CMakeLists.txt" : {
      "ObjectId" : "f5eb1a1b56a283c958067023ea387586ddb81fc4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/addons/CMakeLists.txt" : {
      "ObjectId" : "dea83651ce82a0e3e820d8633f51490fad24cec4",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# audio2 (which is based on fmodex is deprecated)\n\n#ADD_SUBDIRECTORY(audio2)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#broken (needs old n2 math code)\n\n#ADD_SUBDIRECTORY(nebula2)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#broken, uses old render code\n\n#ADD_SUBDIRECTORY(vegetation)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#broken, uses bink, needs to be replaced with some ogg code from n2\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "code/addons/attic/physics/CMakeLists.txt" : {
      "ObjectId" : "f4796bd5ba918b03ff0feb446e50f08ca7c021df",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# physics (ode)\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/attic/physics_bullet/CMakeLists.txt" : {
      "ObjectId" : "d334a2fbf4b3e63162e0b1781f547a75d28c905c",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# physics (bullet)\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/attr/CMakeLists.txt" : {
      "ObjectId" : "cfc126c4e8ead6f96adc43313f31446c8a3f44ad",
      "LastModified" : "2015-04-13T13:52:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# attr\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/audio2/CMakeLists.txt" : {
      "ObjectId" : "2dbb24ad14b90fe5684c38621d0c644fb251c24a",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# audio2\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/db/CMakeLists.txt" : {
      "ObjectId" : "71fc9bdcaa5c0298c8a25896635a9133bcb4df4c",
      "LastModified" : "2015-04-13T13:52:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# db\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/dynui/CMakeLists.txt" : {
      "ObjectId" : "440bf0014d42f2fd843407b4f54d1427b6ccd215",
      "LastModified" : "2015-05-12T12:17:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# dynui addon\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/effects/CMakeLists.txt" : {
      "ObjectId" : "9bbe61e8dfba5934bd6a0cf1f011c061b6078944",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# effects\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/faudio/CMakeLists.txt" : {
      "ObjectId" : "a656bd6ae001e4307ddc5af67b4eaf7023e2a0ab",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# faudio\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/forest/CMakeLists.txt" : {
      "ObjectId" : "c3f24a4910f9a1c6c9b607e35806a5488466a2bc",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# forest\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/framecapture/CMakeLists.txt" : {
      "ObjectId" : "6bf82ec60992f982d259d7f5b753e09f72abce0a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# framecapture\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/godrays/CMakeLists.txt" : {
      "ObjectId" : "d953dc6530b4a15fb04faa69038c2d44a151d7c0",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# godrays\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/grid/CMakeLists.txt" : {
      "ObjectId" : "fbc4ed94773a055baa29a3622d7d8959c7932484",
      "LastModified" : "2015-04-13T13:52:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# grid\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/minimap/CMakeLists.txt" : {
      "ObjectId" : "b44406deee7e99fc1d15c7c1bb2556b9808356e4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# minimap\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/multiplayer/CMakeLists.txt" : {
      "ObjectId" : "e61cf3910986742dd008a50c7b3b5ca88c536c9f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# network\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/navigation/CMakeLists.txt" : {
      "ObjectId" : "2166999c4b2a49c952af53d45271a437f494e280",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# navigation\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/nebula2/CMakeLists.txt" : {
      "ObjectId" : "d7f1ab15199716d1ff0e038c6bf5fa9f073193d6",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# nebula2 addon\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/posteffect/CMakeLists.txt" : {
      "ObjectId" : "6d95d4e1f75db0a5f1dac8bd2569f65cd23d8abd",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# posteffect\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_DEPENDENCIES(posteffect graphicsfeature )\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/addons/qtfeature/CMakeLists.txt" : {
      "ObjectId" : "5c889f5867e04eef25d412b18c40fe295bc83a08",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# qt\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/remote/CMakeLists.txt" : {
      "ObjectId" : "db4155ca740d5366900d2f4bec60803789dadeb8",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# remote\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/scripting/CMakeLists.txt" : {
      "ObjectId" : "ffbc984d8e7f3fb6c05ebb7e7b1216ffc4b71617",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# scripting\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/sequencer/CMakeLists.txt" : {
      "ObjectId" : "5afcf28f243b113158fa9a6da8b5ba7841f81764",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# sequencer\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/silhouette/CMakeLists.txt" : {
      "ObjectId" : "443d2500e31b1f25b6c16339d406c6e4cdfdb7f4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# silhouette\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/ui/CMakeLists.txt" : {
      "ObjectId" : "2b0e5f00a6f191da7439966174316c8fe5cb3a7b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# ui\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/vegetation/CMakeLists.txt" : {
      "ObjectId" : "015b9673b66baee6974499cccbed3a4706c463be",
      "LastModified" : "2015-03-30T14:00:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# vegetation\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/vibration/CMakeLists.txt" : {
      "ObjectId" : "c3ac25248c0d27a0c588a7614e6c1f8771a63a1f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# vibration\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/addons/video/CMakeLists.txt" : {
      "ObjectId" : "01f6a741038a200fb14e89576ffdad2497fec7dd",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# video\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/application/CMakeLists.txt" : {
      "ObjectId" : "2139d6c150b15bab60378d6660221f52c67a63e6",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Application\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/application/graphicsfeature/CMakeLists.txt" : {
      "ObjectId" : "e02611c444569a493d66ed033dade13c628dd761",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# GraphicsFeature\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/application/physicsfeature/CMakeLists.txt" : {
      "ObjectId" : "2cc0f89817bce8396f765c6526f12cd2314636f8",
      "LastModified" : "2016-05-05T07:29:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# PhysicsFeature\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/application/scriptfeature/CMakeLists.txt" : {
      "ObjectId" : "34e6c69956635427881449edd5c1daa3d20aaa82",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# ScriptFeature\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/application/scriptingfeature/CMakeLists.txt" : {
      "ObjectId" : "93ec8f81ed65d2af0561f147f6960f0f23fb6bab",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# ScriptingFeature\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/application/stateobjectfeature/CMakeLists.txt" : {
      "ObjectId" : "050ed7fe2aa7fc72dd3ea4a53e998b1cb043580e",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# StateObjectFeature\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "197c14f8215cadf26c7a097003ab86098d4fa0b1",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# benchmarks\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/benchmarks/benchmarkaddon/CMakeLists.txt" : {
      "ObjectId" : "cf5f678ca16a5f5b66f7116722458d513c0046fe",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# benchmarkaddon\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/benchmarks/benchmarkbase/CMakeLists.txt" : {
      "ObjectId" : "5d502f8800d2a4c107e5ff90061feffa859c226a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Benchmarkbase\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/benchmarks/benchmarkfoundation/CMakeLists.txt" : {
      "ObjectId" : "e4bd1a82844da370c86bf310ee23e17f08f85834",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# benchmarkfoundation\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/CMakeLists.txt" : {
      "ObjectId" : "181ef226382fc18f3b3038c4b042f0e1cc466987",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# ExtLibs\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#DevIL\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#set(NVTT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/nvidia-texture-tools)\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "code/extlibs/Effects11/CMakeLists.txt" : {
      "ObjectId" : "5c82c6b3451efaefb2d51f3dd878a8e4fb5b7965",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# effect11\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/SOIL/CMakeLists.txt" : {
      "ObjectId" : "52e4f343b124d5af9d064f5fcd14612cb437abc0",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# SOIL\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FILE(GLOB HEAD \"original/*.h\")\n\n#FILE(GLOB SRC \"original/*.c\")\n\n#LIST(APPEND CODE ${HEAD} ${SRC})\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/extlibs/base64/CMakeLists.txt" : {
      "ObjectId" : "5aea7e8953f164222dc8652820453936ccef04d4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# base64\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/CMakeLists.txt" : {
      "ObjectId" : "d25b734fbfda52472a4fff3229eff5422de0bae8",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/CMakeLists.txt" : {
      "ObjectId" : "594c908c6131e7d4393fc6f93433d9cd099459be",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this line has to appear before 'PROJECT' in order to be able to disable incremental linking\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SET(CMAKE_BUILD_TYPE \"Debug\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MESSAGE(\"CMAKE_CXX_FLAGS_DEBUG=\"+${CMAKE_CXX_FLAGS_DEBUG})\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable\n",
        "Line" : 70,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable\n",
        "Line" : 125,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# \tSET(BUILD_NVIDIA_OPENCL_DEMOS OFF CACHE BOOL \"Build OpenCL demos for NVidia\" FORCE)\n\n# \tSET(BUILD_AMD_OPENCL_DEMOS OFF CACHE BOOL \"Build OpenCL demos for AMD\" FORCE)\n\n# \tSET(BUILD_INTEL_OPENCL_DEMOS OFF CACHE BOOL \"Build OpenCL demos for Intel (CPU)\" FORCE)\n\n# \tSET(BUILD_MINICL_OPENCL_DEMOS  OFF CACHE BOOL \"Build OpenCL demos for MiniCL (Generic CPU)\" FORCE)\n\n# \tSET(USE_DX11  OFF CACHE BOOL \"Use DirectX 11\" FORCE)\n\n# \tSET(USE_MULTITHREADED_BENCHMARK  OFF CACHE BOOL \"Use Multithreaded Benchmark\" FORCE)\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SET(CMAKE_EXE_LINKER_FLAGS_INIT    \"/STACK:10000000 /INCREMENTAL:NO\")\t\n\n#SET(CMAKE_EXE_LINKER_FLAGS    \"/STACK:10000000 /INCREMENTAL:NO\")\t\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#MESSAGE(\"MSVC_INCREMENTAL_YES_FLAG\"+${MSVC_INCREMENTAL_YES_FLAG})\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#MESSAGE(\"MSVC_INCREMENTAL_DEFAULT\"+${MSVC_INCREMENTAL_DEFAULT})\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\t\tSTRING(REPLACE \"INCREMENTAL:YES\" \"INCREMENTAL:NO\" replacementFlags2 ${CMAKE_EXE_LINKER_FLAGS}) \n\n#\t\tSET(CMAKE_EXE_LINKER_FLAGS ${replacementFlag2}) \n\n#\t\tSTRING(REPLACE \"INCREMENTAL:YES\" \"\" replacementFlags3 ${CMAKE_EXTRA_LINK_FLAGS}) \n\n#\t\tSET(CMAKE_EXTRA_LINK_FLAGS ${replacementFlag3}) \n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#We statically link to reduce dependancies\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# This is the shortcut to finding GLU, GLUT and OpenGL if they are properly installed on your system\n\n# This should be the case.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ADD_DEFINITIONS(-DBT_USE_FREEGLUT)\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#TODO add better GLUT detection for MinGW\n",
        "Line" : 332,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# This is added for linux. This should always work if everything is installed and working fine.\n",
        "Line" : 351,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#  \"Demos_ps3\")\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#Maya Dynamica plugin is moved to http://dynamica.googlecode.com\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#by default, don't enable the 'INSTALL' option for Xcode and MSVC projectfiles\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## the following are directories where stuff will be installed to\n",
        "Line" : 398,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "code/extlibs/bullet/bullet/Extras/CDTestFramework/AntTweakBar/src/Makefile" : {
      "ObjectId" : "140a6dc4f841d5c9d9fd8a42ed1d69936f545c1b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "####### Compiler, tools and options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---- LINUX\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---- Release\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---- Debug\n\n#CXXCFG   \t= -g -D_DEBUG\n\n#LFLAGS\t\t= \n\n#OUT_DIR\t= ../lib/debug\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#LIBS     \t= -L/usr/X11R6/lib -L. -lglfw -lGL -lGLU -lX11 -lXxf86vm -lXext -lpthread -lm\n\n#LIBS     \t= -L/usr/X11R6/lib -lGL -lX11 -lXxf86vm -lXext -lpthread -lm\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "####### Files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# name of the application:\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# source files without extension:\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build object list from source files\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "####### Build rules\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#first:\tdepend all\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# append dependencies to this Makefile\n\n#depend:\n\n#\t@echo \"==== Make dependencies =====\"\n\n#\tmakedepend -Y\n\n#\tmakedepend -a -Y -- $(CXXFLAGS) $(INCPATH) -- $(SRC_FILES) $(NO_STDERR)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "####### DEPENDENCIES\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "code/extlibs/bullet/bullet/Extras/CMakeLists.txt" : {
      "ObjectId" : "a92f6472084577cbe4a91fa6c0c30bd6a51cb619",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Maya Dynamica plugin is moved to http://dynamica.googlecode.com\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/Extras/ConvexDecomposition/CMakeLists.txt" : {
      "ObjectId" : "4bca03d2842c26b3d8fad00c05660b1ecb9085b4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N3 Related stuff\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/Extras/GIMPACTUtils/CMakeLists.txt" : {
      "ObjectId" : "5c9480a97911ae846687d6682ddbc94efb0d2aab",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/Extras/HACD/CMakeLists.txt" : {
      "ObjectId" : "bcdcb7ccf446f556b2752c0a05d129083e21df37",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N3 Related stuff\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#IF (BUILD_SHARED_LIBS)\n\n#  TARGET_LINK_LIBRARIES(HACD BulletCollision LinearMath)\n\n#ENDIF (BUILD_SHARED_LIBS)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "code/extlibs/bullet/bullet/Extras/Makefile.am" : {
      "ObjectId" : "f4cd5eac827c0718aadf50f087173ee7261a536d",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/BlenderSerialize/CMakeLists.txt" : {
      "ObjectId" : "5b74d7447d0f979f102c4a9247b9633e798737a4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/BulletFileLoader/CMakeLists.txt" : {
      "ObjectId" : "bc01b44cef2ae3e36f5e752f09388ecbe5791542",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 33,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/BulletWorldImporter/CMakeLists.txt" : {
      "ObjectId" : "8c4b8e3cf6a78d668d41bb7a6a474b8f37ad9938",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/BulletXmlWorldImporter/CMakeLists.txt" : {
      "ObjectId" : "c6a94f850243b3f5d26cd994cfa781bfb4035114",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/CMakeLists.txt" : {
      "ObjectId" : "68b1d19254fb1a14dff635a07c66b22634589110",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# makesdna and HeaderGenerator are for advanced use only\n\n# makesdna can re-generate the binary DNA representing the Bullet serialization structures\n\n# Be very careful modifying any of this, otherwise the .bullet format becomes incompatible\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/HeaderGenerator/CMakeLists.txt" : {
      "ObjectId" : "3791e209834a7d860fdb536af40bb36c0fe0d6d8",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/ReadBulletSample/CMakeLists.txt" : {
      "ObjectId" : "e819b9e5ec9f86e812110966925701708c891f2b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/Extras/Serialize/makesdna/CMakeLists.txt" : {
      "ObjectId" : "9f5d5c6837f982346358661aadbd5e4220b0bbe4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILE(GLOB INC_FILES ../*.h)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build makesdna executable\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Output BulletDNA.c\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build bf_dna library\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "code/extlibs/bullet/bullet/Extras/glui/CMakeLists.txt" : {
      "ObjectId" : "c2018a7855d30eebef1d0ea75111317ab9b38021",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is basically the overall name of the project in Visual Studio this is the name of the Solution File\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For every executable you have with a main method you should have an add_executable line below.\n\n# For every add executable line you should list every .cpp and .h file you have associated with that executable.  \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is the variable for Windows.  I use this to define the root of my directory structure.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# You shouldn't have to modify anything below this line \n\n########################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is the shortcut to finding GLU, GLUT and OpenGL if they are properly installed on your system\n\n# This should be the case.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the Windows code for which Opengl, and Glut are not properly installed\n\n# since I can't install them I must cheat and copy libraries around\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# LINK_DIRECTORIES(${GLUT_ROOT}\\\\lib)\n\n# IF (${GLUT_glut_LIBRARY} MATCHES \"GLUT_glut_LIBRARY-NOTFOUND\")\n\n#   LINK_LIBRARIES(${GLUT_ROOT}\\\\lib\\\\glut32 ${OPENGL_gl_LIBRARY} ${OPENGL_glU_LIBRARY})\n\n#   TARGET_LINK_LIBRARIES(table ${GLUT_ROOT}\\\\lib\\\\glut32)\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#\n\n#    ADD_CUSTOM_COMMAND(TARGET table POST_BUILD COMMAND copy ${GLUT_ROOT}\\\\lib\\\\glut32.dll ${GLUT_ROOT}\\\\bin\\\\vs2005\\\\Debug\n\n#                        COMMAND copy ${GLUT_ROOT}\\\\lib\\\\glut32.dll ${GLUT_ROOT}\\\\bin\\\\vs2003\\\\Debug \n\n#            COMMAND copy ${GLUT_ROOT}\\\\lib\\\\glut32.dll ${GLUT_ROOT}\\\\bin\\\\vs6\\\\Debug)\n\n#  ELSE (${GLUT_glut_LIBRARY} MATCHES \"GLUT_glut_LIBRARY-NOTFOUND\")\n\n#    LINK_LIBRARIES(${GLUT_glut_LIBRARY} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY}) \n\n#    TARGET_LINK_LIBRARIES(table ${GLUT_glut_LIBRARY})\n\n#  ENDIF(${GLUT_glut_LIBRARY} MATCHES \"GLUT_glut_LIBRARY-NOTFOUND\")\n\n#  TARGET_LINK_LIBRARIES(table ${OPENGL_gl_LIBRARY})\n\n#  TARGET_LINK_LIBRARIES(table ${OPENGL_glu_LIBRARY}) \n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is the lines for linux.  This should always work if everything is installed and working fine.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#  SET(CMAKE_BUILD_TYPE Debug)\n\n#  SET(CMAKE_CXX_FLAGS_DEBUG \"-g\")\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  TARGET_LINK_LIBRARIES(table ${GLUT_glut_LIBRARY} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})\n\n#  TARGET_LINK_LIBRARIES(checker ${GLUT_glut_LIBRARY} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "code/extlibs/bullet/bullet/Makefile.am" : {
      "ObjectId" : "a9b97a8e661124c92bb1aed8100eba0ba3ff3ea1",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/bullet.pc.cmake" : {
      "ObjectId" : "c5649d58d237e693539993bfe556cc6895dc8914",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/src/BulletCollision/CMakeLists.txt" : {
      "ObjectId" : "a53791021dfdff92201fdda16a78d7b405aee978",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N3 Related stuff\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 277,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    },
    "code/extlibs/bullet/bullet/src/BulletDynamics/CMakeLists.txt" : {
      "ObjectId" : "015b1549da8e73b62947c4cd3a38d821f735ca33",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N3 Related stuff\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 114,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/CMakeLists.txt" : {
      "ObjectId" : "24543c1938185665afb205c6ba68b6b76cd20087",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SPURS_PEGatherScatterTask/SpuPEGatherScatterTask.cpp\n\n#SpuPEGatherScatterTaskProcess.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#Some GPU related stuff, mainly CUDA and perhaps OpenCL\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#SPURS_PEGatherScatterTask/SpuPEGatherScatterTask.h\n\n#SpuPEGatherScatterTaskProcess.h\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#Some GPU related stuff, mainly CUDA and perhaps OpenCL\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# N3 Related stuff to get rid of warnings\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# N3 Related stuff\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\t\t\tIF(INSTALL_EXTRA_LIBS)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t\t\tENDIF (INSTALL_EXTRA_LIBS)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 129,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 11
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/CMakeLists.txt" : {
      "ObjectId" : "224a3e0a85143ca209312aa1a5ddba68b6d2b20a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/DX11/CMakeLists.txt" : {
      "ObjectId" : "e7492b542458a233de1145f751847df600694aea",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/AMD/CMakeLists.txt" : {
      "ObjectId" : "9826f63789830c0effb9a6750cf3925fdcdd4be6",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/Apple/CMakeLists.txt" : {
      "ObjectId" : "35dd4eb2dc00d37b0984e5f216ff106ea20f69d8",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/CMakeLists.txt" : {
      "ObjectId" : "cf9a0be288c222bc93494a63916489e90ef02a60",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/Intel/CMakeLists.txt" : {
      "ObjectId" : "9503a5f403afb57ee87fdbf82e0c8db738e3a50c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/MiniCL/CMakeLists.txt" : {
      "ObjectId" : "c7eeb551779beeddd1ce90fc29c9b8bccec9233c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# N3 Related stuff to get rid of warnings\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "code/extlibs/bullet/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/NVidia/CMakeLists.txt" : {
      "ObjectId" : "ea0406390e351eb34d97a6ed9f1e459586fb199a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/src/BulletSoftBody/CMakeLists.txt" : {
      "ObjectId" : "83e5a38e7e1a1ddbd2eb310109865d77f7e5e889",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SUBDIRS( Solvers )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# N3 Related stuff to get rid of warnings\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/src/CMakeLists.txt" : {
      "ObjectId" : "7c82cc446e0da51d369e08d525269458248d4eed",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Don't actually need to install any common files, the frameworks include everything\n",
        "Line" : 23,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "code/extlibs/bullet/bullet/src/LinearMath/CMakeLists.txt" : {
      "ObjectId" : "5ea3765d1f1711afd7b326885904a97e8227d917",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# normal n3 optimization flags kill bullet\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N3 Related stuff\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "code/extlibs/bullet/bullet/src/Makefile.am" : {
      "ObjectId" : "ec39e7a05080870d1166810d97f2ada2770840fb",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/bullet/bullet/src/MiniCL/CMakeLists.txt" : {
      "ObjectId" : "6d621098390e7f81c305aeb6aa1a148c6392c678",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MiniCL provides a small subset of OpenCL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N3 Related stuff to get rid of warnings\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#\t\t\tIF(INSTALL_EXTRA_LIBS)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\t\t\tENDIF (INSTALL_EXTRA_LIBS)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 67,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 6
    },
    "code/extlibs/cjson/CMakeLists.txt" : {
      "ObjectId" : "307fd364345df8a6fe881226ab4b6bae6f17919d",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# minimal cmake file for cJSON\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/libfreetype/CMakeLists.txt" : {
      "ObjectId" : "4222076860c7df04990891d79822bf73c21fda90",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# libfreetype\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/libfreetype/tools/ftrandom/Makefile" : {
      "ObjectId" : "2e619299cdfcdb13ec98282f200b013d60a002c3",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# TOP_DIR and OBJ_DIR should be set by the user to the right directories,\n\n# if necessary.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The setup below is for gcc on a Unix-like platform.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EOF\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/extlibs/libjpeg/CMakeLists.txt" : {
      "ObjectId" : "77e8ba8213bcf99c6271ca4be5fed50f60eb6fdc",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# libjpeg\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/libpng/CMakeLists.txt" : {
      "ObjectId" : "23a2f7efc4e752f0e3f7f55715eda6799bd0f14a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# libpng\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/libqimg/CMakeLists.txt" : {
      "ObjectId" : "17570d2ea93cf293ed55d06e1b698f42c77ba04c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# libqimg\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FILE(GLOB SRC \"ddsutil/*.cc\")\n\n#FILE(GLOB HEAD \"ddsutil/*.h\")\n\n#SOURCE_GROUP(\"ddsutil\" FILES ${SRC} ${HEAD})\n\n#LIST(APPEND SRCS ${SRC} ${HEAD})\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FILE(GLOB SRC \"tgautil/*.cc\")\n\n#FILE(GLOB HEAD \"tgautil/*.h\")\n\n#SOURCE_GROUP(\"tgautil\" FILES ${SRC} ${HEAD})\n\n#LIST(APPEND SRCS ${SRC} ${HEAD})\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/extlibs/librocket/CMakeLists.txt" : {
      "ObjectId" : "321b743e5b3d37c12f5e3418a668d30325bf800f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# librocket\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/lua/CMakeLists.txt" : {
      "ObjectId" : "7963fd0c032be8da9bb76685a3aa3adccd235381",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Lua\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/nvidia-texture-tools/CMakeLists.txt" : {
      "ObjectId" : "d70a682fe705e327a07d199ca482303419a3e753",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gnuwin32 paths:\r\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Set GLUT path:\r\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Set FreeImage path:\r\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# These files should only be installed when creating packages.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add packaging support\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NSIS options:\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "code/extlibs/nvidia-texture-tools/cmake/DetermineProcessor.cmake" : {
      "ObjectId" : "7db7a95b6062ffbb714e89e4a4ca293c4e2adcc4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Assume i586 by default.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#EXEC_PROGRAM(uname ARGS -p OUTPUT_VARIABLE NV_SYSTEM_PROCESSOR RETURN_VALUE val)\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#IF(\"${val}\" GREATER 0 OR NV_SYSTEM_PROCESSOR STREQUAL \"unknown\")\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#ENDIF(\"${val}\" GREATER 0 OR NV_SYSTEM_PROCESSOR STREQUAL \"unknown\")\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# processor may have double quote in the name, and that needs to be removed\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#~ \t# Get extended processor information from /proc/cpuinfo\n\n#~ \tIF(EXISTS \"/proc/cpuinfo\")\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#~ \t\tFILE(READ /proc/cpuinfo PROC_CPUINFO)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#~ \t\tSET(VENDOR_ID_RX \"vendor_id[ \\t]*:[ \\t]*([a-zA-Z]+)\\n\")\n\n#~ \t\tSTRING(REGEX MATCH \"${VENDOR_ID_RX}\" VENDOR_ID \"${PROC_CPUINFO}\")\n\n#~ \t\tSTRING(REGEX REPLACE \"${VENDOR_ID_RX}\" \"\\\\1\" VENDOR_ID \"${VENDOR_ID}\")\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#~ \t\tSET(CPU_FAMILY_RX \"cpu family[ \\t]*:[ \\t]*([0-9]+)\")\n\n#~ \t\tSTRING(REGEX MATCH \"${CPU_FAMILY_RX}\" CPU_FAMILY \"${PROC_CPUINFO}\")\n\n#~ \t\tSTRING(REGEX REPLACE \"${CPU_FAMILY_RX}\" \"\\\\1\" CPU_FAMILY \"${CPU_FAMILY}\")\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#~ \t\tSET(MODEL_RX \"model[ \\t]*:[ \\t]*([0-9]+)\")\n\n#~ \t\tSTRING(REGEX MATCH \"${MODEL_RX}\" MODEL \"${PROC_CPUINFO}\")\n\n#~ \t\tSTRING(REGEX REPLACE \"${MODEL_RX}\" \"\\\\1\" MODEL \"${MODEL}\")\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#~ \t\tSET(FLAGS_RX \"flags[ \\t]*:[ \\t]*([a-zA-Z0-9 _]+)\\n\")\n\n#~ \t\tSTRING(REGEX MATCH \"${FLAGS_RX}\" FLAGS \"${PROC_CPUINFO}\")\n\n#~ \t\tSTRING(REGEX REPLACE \"${FLAGS_RX}\" \"\\\\1\" FLAGS \"${FLAGS}\")\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#~ \t\t# Debug output.\n\n#~ \t\tIF(LINUX_CPUINFO)\n\n#~ \t\t\tMESSAGE(STATUS \"LinuxCPUInfo.cmake:\")\n\n#~ \t\t\tMESSAGE(STATUS \"VENDOR_ID : ${VENDOR_ID}\")\n\n#~ \t\t\tMESSAGE(STATUS \"CPU_FAMILY : ${CPU_FAMILY}\")\n\n#~ \t\t\tMESSAGE(STATUS \"MODEL : ${MODEL}\")\n\n#~ \t\t\tMESSAGE(STATUS \"FLAGS : ${FLAGS}\")\n\n#~ \t\tENDIF(LINUX_CPUINFO)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#~ \tENDIF(EXISTS \"/proc/cpuinfo\")\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#~\t\t# Information on how to decode CPU_FAMILY and MODEL:\n\n#~\t\t# http://balusc.xs4all.nl/srv/har-cpu-int-pm.php\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# It's not OK to trust $ENV{PROCESSOR_ARCHITECTURE}: its value depends on the type of executable being run,\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# so a 32-bit cmake (the default binary distribution) will always say \"x86\" regardless of the actual target.\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindCUDA.cmake" : {
      "ObjectId" : "37e074f8bc86554dd11dcdbb7d5c7c3ca0623ea0",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n#  For more information, please see: http://software.sci.utah.edu\n\n#\n\n#  The MIT License\n\n#\n\n#  Copyright (c) 2008-2009\n\n#  NVIDIA Corp.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  License for the specific language governing rights and limitations under\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\n\n#  copy of this software and associated documentation files (the \"Software\"),\n\n#  to deal in the Software without restriction, including without limitation\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n#  and/or sell copies of the Software, and to permit persons to whom the\n\n#  Software is furnished to do so, subject to the following conditions:\n\n#\n\n#  The above copyright notice and this permission notice shall be included\n\n#  in all copies or substantial portions of the Software.\n\n#\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#  DEALINGS IN THE SOFTWARE.\n\n#\n\n# This script locates the Nvidia Compute Unified Driver Architecture (CUDA)\n\n# tools. It should work on linux, windows, and mac and should be reasonably\n\n# up to date with cuda releases.\n\n#\n\n# This script makes use of the standard find_package arguments of <VERSION>,\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\n\n# was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the\n\n# prefix cannot be determined by the location of nvcc in the system path. To\n\n# use a different installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0\n\n# instead of the default /usr/local/cuda).\n\n#\n\n# Set CUDA_BUILD_EMULATION to ON for Emulation mode.  Defaults to OFF (device\n\n# mode).\n\n# _DEVICEEMU is defined when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n# Set CUDA_HOST_COMPILATION_CPP to OFF for C compilation of host code.\n\n# Default TRUE.\n\n#\n\n# Set CUDA_BUILD_CUBIN to \"ON\" or \"OFF\" to enable and extra compilation pass\n\n# with the -cubin option in Device mode. The output is parsed and register,\n\n# shared memory usage is printed during build. Default ON.\n\n#\n\n# Set CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE to ON if you want the custom build\n\n# rule to be attached to the source file in Visual Studio.  Defaults to ON.\n\n# Turn OFF if you add the same cuda file to multiple targets.\n\n#\n\n# This allows the user to build the target from the CUDA file, however bad\n\n# things can happen if the CUDA source file is added to multiple targets.  When\n\n# performing parallel builds it is possible for the custom build command to be\n\n# run more than once and in parallel causing cryptic build errors.  This is\n\n# because VS runs the rules for every source file in the target, and a source\n\n# can have only one rule no matter how many projects it is added to.  Therefore,\n\n# the rule assigned to the source file really only applies to one target you get\n\n# clashes when it is run from multiple targets.  Eventually everything will get\n\n# built, but if the user is unaware of this behavior, there may be confusion.\n\n# It would be nice if we could detect the reuse of source files across multiple\n\n# targets and turn the option off for the user, but no good solution could be\n\n# found.\n\n#\n\n# Set CUDA_64_BIT_DEVICE_CODE to ON to compile for 64 bit devices.  Defaults to\n\n# match host bit size.  Note that making this different than the host code when\n\n# generating C files from CUDA code just won't work, because size_t gets defined\n\n# by nvcc in the generated source.  If you compile to PTX and then load the file\n\n# yourself, you can mix bit sizes between device and host.\n\n#\n\n# Set CUDA_VERBOSE_BUILD to ON to see all the commands used when building the\n\n# CUDA file.  When using a Makefile generator the value defaults to VERBOSE (run\n\n# make VERBOSE=1 to see output).  You can override this by setting\n\n# CUDA_VERBOSE_BUILD to ON.\n\n#\n\n# Set CUDA_GENERATED_OUTPUT_DIR to the path you wish to have the generated files\n\n# placed.  If it is blank output files will be placed in\n\n# CMAKE_CURRENT_BINARY_DIR.  Intermediate files will always be placed in\n\n# CMAKE_CURRENT_BINARY_DIR.\n\n#\n\n# The script creates the following macros:\n\n# CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n# -- Sets the directories that should be passed to nvcc\n\n#    (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#    files.\n\n#\n\n# CUDA_ADD_LIBRARY( cuda_target file0 file1 ... [OPTIONS ...] )\n\n# -- Creates a shared library \"cuda_target\" which contains all of the source\n\n#    (*.c, *.cc, etc.) specified and all of the nvcc'ed .cu files specified.\n\n#    All of the specified source files and generated .cpp files are compiled\n\n#    using the standard CMake compiler, so the normal INCLUDE_DIRECTORIES,\n\n#    LINK_DIRECTORIES, and TARGET_LINK_LIBRARIES can be used to affect their\n\n#    build and link.  In addition CUDA_INCLUDE_DIRS is added automatically added\n\n#    to include_directories().\n\n#\n\n# CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ... [OPTIONS ...] )\n\n# -- Same as CUDA_ADD_LIBRARY except that an exectuable is created.\n\n#\n\n# CUDA_COMPILE( generated_files file0 file1 ... [OPTIONS ...] )\n\n# -- Returns a list of generated files from the input source files to be used\n\n#    with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n# CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n# -- Returns a list of PTX files generated from the input source files.\n\n#\n\n# CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                  [OPTIONS ...] )\n\n# -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#    CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this function\n\n#    under the hood.\n\n#\n\n#    Given the list of files (file0 file1 ... fileN) this macro generates custom\n\n#    commands that generate either PTX or linkable objects (use \"PTX\" or \"OBJ\"\n\n#    for the format argument to switch.  Files that don't end with .cu or have\n\n#    the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#    The arguments passed in after OPTIONS are extra command line options to\n\n#    give to NVCC.  You can also specify per configuration options by specifying\n\n#    the name of the configuration followed by the options.  General options\n\n#    must preceed configuration specific options.  Not all configurations need\n\n#    to be specified, only the ones provided will be used.\n\n#\n\n#       OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#       DEBUG -g\n\n#       RELEASE --use_fast_math\n\n#       RELWITHDEBINFO --use_fast_math;-g\n\n#       MINSIZEREL --use_fast_math\n\n#\n\n#    For certain configurations (namely VS generating object files with\n\n#    CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#    be produced for the given cuda file.  This is because when you add the cuda\n\n#    file to Visual Studio it knows that this file produces and will link in the\n\n#    resulting object file automatically.\n\n#\n\n#    This script will also generate a separate cmake script that is used at\n\n#    build time to invoke nvcc.  This is for serveral reasons.\n\n#\n\n#      1. nvcc can return negative numbers as return values which confuses\n\n#      Visual Studio into thinking that the command succeeded.  The script now\n\n#      checks the error codes and produces errors when there was a problem\n\n#\n\n#      2. nvcc has been known to not delete intermediate results when it\n\n#      encounters problems.  The build rules then don't complete, because there\n\n#      exists a partially written output file.  The script now deletes the\n\n#      output files if there was an error.\n\n#\n\n#      3. By putting all the options that affect the build into a file and then\n\n#      make the build rule dependent on the file, when the options change the\n\n#      output files will be regenerated.\n\n#\n\n# CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n# -- Adds the cufft library to the target.  Handles whether you are in emulation\n\n#    mode or not.\n\n#\n\n# CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n# -- Adds the cublas library to the target.  Handles whether you are in emulation\n\n#    mode or not.\n\n#\n\n# CUDA_BUILD_CLEAN_TARGET()\n\n# -- Creates a convience target that deletes all the dependency files generated.\n\n#    You should make clean after running this target to ensure the dependency\n\n#    files get regenerated.\n\n#\n\n# The script defines the following variables:\n\n#\n\n# ( Note CUDA_ADD_* macros setup cuda/cut library dependencies automatically.\n\n# These variables are only needed if a cuda API call must be made from code in\n\n# a outside library or executable. )\n\n#\n\n# CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n# CUDA_VERSION_MINOR    -- The minor version.\n\n# CUDA_VERSION\n\n# CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n# CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                          for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n# CUDA_LIBRARIES        -- Cuda RT library.\n\n# CUDA_CUT_INCLUDE_DIR  -- Include directory for cuda SDK headers (cutil.h).\n\n# CUDA_CUT_LIBRARIES    -- SDK libraries.\n\n# CUDA_NVCC_FLAGS       -- Additional NVCC command line arguments. NOTE:\n\n#                          multiple arguments must be semi-colon delimited\n\n#                          e.g. --compiler-options;-Wall\n\n# CUDA_NVCC_FLAGS_<CONFIG> -- Confugration specific flags for NVCC.\n\n# CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                          implementation (alternative to:\n\n#                          CUDA_ADD_CUFFT_TO_TARGET macro)\n\n# CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                          implementation (alterative to:\n\n#                          CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#\n\n#\n\n# The script now builds object files instead of generating C files.  In order to\n\n# facilitate this, the script now makes use of the CMAKE_{C,CXX}_FLAGS along\n\n# with their configuration dependent counterparts (i.e. CMAKE_C_FLAGS_DEBUG).\n\n# These flags are passed through nvcc to the native compiler.  In addition, on\n\n# some systems special flags are added for building objects intended for shared\n\n# libraries.  FindCUDA make use of the CMake variable BUILD_SHARED_LIBS to\n\n# determine if these flags should be used.  Please set this variable according\n\n# to how the objects are to be used before calling CUDA_ADD_LIBRARY.  A\n\n# preprocessor macro, <target_name>_EXPORTS is defined when BUILD_SHARED_LIBS is\n\n# defined.  In addition, flags passed into add_definitions with -D or /D are\n\n# passed along to nvcc.\n\n#\n\n# Files with the HEADER_FILE_ONLY property set will not be compiled.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain platforms,\n\n# or to use a cuda runtime not installed in the default location. In newer\n\n# versions of the toolkit the cuda library is included with the graphics\n\n# driver- be sure that the driver version matches what is needed by the cuda\n\n# runtime version.\n\n#\n\n# -- Abe Stephens SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n# -- James Bigler NVIDIA Corp\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if'.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND true\")\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#message(\"searching for ${f}\")\n",
        "Line" : 294,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup default variables\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Now search default paths\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 410,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Compute the version.\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\n\n# specified.  The presence of either of these options checks the version\n\n# string and signals if the version is acceptable or not.\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 470,
        "CharPositionInLine" : 21
      },
      "44" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 491,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Add cuda library to the link line only if it is found.\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Search for cufft and cublas libraries.\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "########################\n\n# Look for the SDK stuff\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_CUT_INCLUDE_DIR\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Now search system paths\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# CUDA_CUT_LIBRARIES\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# to get these confused, so we are setting the name based on the word size of\n\n# the build.\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# The new version of the sdk shows up in common/lib, but the old one is in lib\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Now search system paths\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "##############################################################################\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 646,
        "CharPositionInLine" : 8
      },
      "66" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 659,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 664,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependant upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 692,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Set up all the command line flags here, so that they can be overriden on a per target basis.\n",
        "Line" : 718,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 722,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# Emulation.\n",
        "Line" : 724,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 727,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.\n",
        "Line" : 745,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# Add nvcc flag for 64b Windows\n",
        "Line" : 749,
        "CharPositionInLine" : 6
      },
      "77" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 754,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 764,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n",
        "Line" : 766,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Reset these variables\n",
        "Line" : 774,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 784,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# If BUILD_SHARED_LIBS is true, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 786,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 792,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 795,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# nvcc chokes on -g3, so replace it with -g\n",
        "Line" : 798,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 805,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 811,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# Determine output directory\n",
        "Line" : 823,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 830,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 833,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 836,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 840,
        "CharPositionInLine" : 6
      },
      "93" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 854,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 864,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 868,
        "CharPositionInLine" : 31
      },
      "96" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 872,
        "CharPositionInLine" : 6
      },
      "97" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 880,
        "CharPositionInLine" : 6
      },
      "98" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 883,
        "CharPositionInLine" : 6
      },
      "99" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 890,
        "CharPositionInLine" : 6
      },
      "100" : {
        "Text" : "# Configure the build script\n",
        "Line" : 898,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 901,
        "CharPositionInLine" : 6
      },
      "102" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 918,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 926,
        "CharPositionInLine" : 6
      },
      "104" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 929,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 943,
        "CharPositionInLine" : 6
      },
      "106" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\n\n# will add our object file to the linker automatically for us.\n",
        "Line" : 946,
        "CharPositionInLine" : 6
      },
      "107" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\n",
        "Line" : 952,
        "CharPositionInLine" : 8
      },
      "108" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 962,
        "CharPositionInLine" : 6
      },
      "109" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 970,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 984,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 986,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# Add the library.\n",
        "Line" : 989,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 999,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1009,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1018,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1020,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Add the library.\n",
        "Line" : 1023,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1033,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1043,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1050,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1052,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1060,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1067,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1069,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1076,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1089,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1108,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1119,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 131
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindCg.cmake" : {
      "ObjectId" : "a80994605d51d850e63253dde165034c787f21e2",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find NVIDIA's Cg compiler, runtime libraries, and include path.\n\n# Once done this will define\n\n#\n\n# CG_FOUND =system has NVIDIA Cg and it can be used. \n\n# CG_INCLUDE_DIR = directory where cg.h resides\n\n# CG_LIBRARY = full path to libCg.so (Cg.DLL on win32)\n\n# CG_GL_LIBRARY = full path to libCgGL.so (CgGL.dll on win32)\n\n# CG_COMPILER = full path to cgc (cgc.exe on win32)\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On OSX default to using the framework version of Cg.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the include  dir\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Since we are using Cg framework, we must link to it.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Note, we use weak linking, so that it works even when Cg is not available.\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# When compiling 64-bit programs, the binaries and libs are in bin.x64 and lib.x64 directories,\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This will have only effect for 64bit versions of cmake, when running the default 32bit version\n\n# both ProgramFiles and ProgramFiles(x86) point to the same place in Win64\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Let's play safe in case we are cross compiling to 64 bit: for cgc it doesn't really matter\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 8
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindDirectX.cmake" : {
      "ObjectId" : "0177240eb70f877804830af6709b294a5d9fea20",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindFreeImage.cmake" : {
      "ObjectId" : "2e99508539c873e7014176165d5e64f27e1324bb",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the FreeImage library and include path.\n\n# Once done this will define\n\n#\n\n# FREEIMAGE_FOUND\n\n# FREEIMAGE_INCLUDE_PATH\n\n# FREEIMAGE_LIBRARY\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindGLEW.cmake" : {
      "ObjectId" : "540911fdac03a529f24daabcbb5748dcac6207e4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find GLEW library and include path.\n\n# Once done this will define\n\n#\n\n# GLEW_FOUND\n\n# GLEW_INCLUDE_PATH\n\n# GLEW_LIBRARY\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prefer the static library.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindMaya.cmake" : {
      "ObjectId" : "3599329ebac5abc75cdad326fbcfc70be0082b93",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Maya plugins can only be compiled with msvc\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Find maya version!\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# On linux, check gcc version.\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# OSX and Linux\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# TODO\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "code/extlibs/nvidia-texture-tools/cmake/FindOpenEXR.cmake" : {
      "ObjectId" : "776810c0e42edcb904ec4c58efcae81e951dafa4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find OpenEXR's libraries, and include path.\n\n# Once done this will define:\n\n#\n\n# OPENEXR_FOUND = OpenEXR found. \n\n# OPENEXR_INCLUDE_PATHS = OpenEXR include directories.\n\n# OPENEXR_LIBRARIES = libraries that are needed to use OpenEXR.\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MESSAGE(STATUS ${OPENEXR_IMATH_LIBRARY} ${OPENEXR_ILMIMF_LIBRARY} ${OPENEXR_IEX_LIBRARY} ${OPENEXR_HALF_LIBRARY} ${OPENEXR_ILMTHREAD_LIBRARY} ${ZLIB_LIBRARY})\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/extlibs/nvidia-texture-tools/cmake/OptimalOptions.cmake" : {
      "ObjectId" : "7f3e2a5a1ff4740d99eb1073d64efa617e0ff265",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set optimal options for gcc:\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=i686\")\n\n#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mfpmath=sse -mtune=i686 -msse3\")\n\n#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=pentium4\")\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=athlon64 -msse3\")\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ibook G4:\n\n#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=7450 -mtune=7450 -faltivec -maltivec -mabi=altivec -mpowerpc-gfxopt\")\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# G5\n\n#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=G5 -faltivec -maltivec -mabi=altivec -mpowerpc-gfxopt\")\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\tIF(DARWIN)\n\n#\t\tSET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk\")\n\n#\t\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk\")\n\n#\tENDIF(DARWIN)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# @@ Some of these might only be available in VC8.\n\n# Code generation flags.\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Optimization flags.\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Definitions.\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "code/extlibs/nvidia-texture-tools/cmake/make2cmake.cmake" : {
      "ObjectId" : "d0f0ca82e3cb94cfe040661b3391699c55ebb5c1",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  For more information, please see: http://software.sci.utah.edu\n\n#\n\n#  The MIT License\n\n#\n\n#  Copyright (c) 2007\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  License for the specific language governing rights and limitations under\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\n\n#  copy of this software and associated documentation files (the \"Software\"),\n\n#  to deal in the Software without restriction, including without limitation\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n#  and/or sell copies of the Software, and to permit persons to whom the\n\n#  Software is furnished to do so, subject to the following conditions:\n\n#\n\n#  The above copyright notice and this permission notice shall be included\n\n#  in all copies or substantial portions of the Software.\n\n#\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#  DEALINGS IN THE SOFTWARE.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make2cmake CMake Script\n\n# Abe Stephens and James Bigler\n\n# (c) 2007 Scientific Computing and Imaging Institute, University of Utah\n\n# Note that the REGEX expressions may need to be tweaked for different dependency generators.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "code/extlibs/nvidia-texture-tools/cmake/parse_cubin.cmake" : {
      "ObjectId" : "6b3d82a330dd93ee67607c4d0b8eada697ae999a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  For more information, please see: http://software.sci.utah.edu\n\n#\n\n#  The MIT License\n\n#\n\n#  Copyright (c) 2007\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  License for the specific language governing rights and limitations under\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\n\n#  copy of this software and associated documentation files (the \"Software\"),\n\n#  to deal in the Software without restriction, including without limitation\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n#  and/or sell copies of the Software, and to permit persons to whom the\n\n#  Software is furnished to do so, subject to the following conditions:\n\n#\n\n#  The above copyright notice and this permission notice shall be included\n\n#  in all copies or substantial portions of the Software.\n\n#\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#  DEALINGS IN THE SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# .cubin Parsing CMake Script\n\n# Abe Stephens\n\n# (c) 2007 Scientific Computing and Imaging Institute, University of Utah\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 55,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 57,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 58,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else (${entry} MATCHES \"^_\")\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "code/extlibs/nvidia-texture-tools/cmake/run_nvcc.cmake" : {
      "ObjectId" : "7246838077bf72e994fe9b2fede86a74cfc17132",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Echo the command\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Run the command\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Delete the target file\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Generate the code\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "code/extlibs/nvidia-texture-tools/extern/CMakeLists.txt" : {
      "ObjectId" : "41a5c55094fc3a510618d06e2273ee9a8188b06a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/nvidia-texture-tools/extern/poshlib/CMakeLists.txt" : {
      "ObjectId" : "562d23299437113f9b341ebe5e85645590eab652",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/nvidia-texture-tools/src/CMakeLists.txt" : {
      "ObjectId" : "89fbfed7784df7aff229db0940fb137b13a537aa",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenGL\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GLUT\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DirectX\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GLEW\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cg\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CUDA\n\n#FIND_PACKAGE(CUDA)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Maya\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FreeImage\n\n#INCLUDE(${NV_CMAKE_DIR}/FindFreeImage.cmake)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# JPEG\n\n#INCLUDE(FindJPEG)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# hardcode png to nebula project\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#hardcode jpeg to nebula project\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# PNG\n\n#INCLUDE(FindPNG)\t\n\n#IF(PNG_FOUND)\n\n#\tSET(HAVE_PNG ${PNG_FOUND} CACHE BOOL \"Set to TRUE if PNG is found, FALSE otherwise\")\n\n#\tMESSAGE(STATUS \"Looking for PNG - found\")\n\n#ELSE(PNG_FOUND)\n\n#\tMESSAGE(STATUS \"Looking for PNG - not found\")\n\n#ENDIF(PNG_FOUND)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TIFF\n\n#SET(TIFF_NAMES libtiff)\n\n#INCLUDE(FindTIFF)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# OpenEXR\n\n#INCLUDE(${NV_CMAKE_DIR}/FindOpenEXR.cmake)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# OpenMP\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Qt\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Threads\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# configuration file\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "code/extlibs/nvidia-texture-tools/src/bc6h/CMakeLists.txt" : {
      "ObjectId" : "4a175b721fa4fa4267545e70b59118592617b14c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/nvidia-texture-tools/src/bc7/CMakeLists.txt" : {
      "ObjectId" : "ee50ea36ed4ce67f9fb9603d9272ee8bba0fac4c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/nvidia-texture-tools/src/nvcore/CMakeLists.txt" : {
      "ObjectId" : "cd2f7b06e6ffe02fc56b4650f0ef4bad215c27e2",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# targets\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/nvidia-texture-tools/src/nvimage/CMakeLists.txt" : {
      "ObjectId" : "052a34ad4663a3a7e7fbe3bf40c7c4ec8baaf556",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#KtxFile.h KtxFile.cpp\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# targets\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/extlibs/nvidia-texture-tools/src/nvmath/CMakeLists.txt" : {
      "ObjectId" : "9118fabf64ad338a0a2506c4a54e65d023a540ce",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# targets\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/nvidia-texture-tools/src/nvthread/CMakeLists.txt" : {
      "ObjectId" : "814b6c9e25c75c1323830ba6ad729c6de8c3fb28",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# targets\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/nvidia-texture-tools/src/nvtt/CMakeLists.txt" : {
      "ObjectId" : "a8b74d6f2495de65cc0c22201559f28544f3e207",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TaskDispatcher.cpp\n",
        "Line" : 23,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "#ADD_SUBDIRECTORY(tools)\n\n#ADD_SUBDIRECTORY(tests)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/extlibs/nvidia-texture-tools/src/nvtt/squish/CMakeLists.txt" : {
      "ObjectId" : "49dc9661c3ed0363fe7970efe80b84895db9c866",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/extlibs/nvidia-texture-tools/src/nvtt/tests/CMakeLists.txt" : {
      "ObjectId" : "db3b936aadbc5e1883dd697d0c2d4f98b3566c98",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(\"/usr/include/ffmpeg/\")\n\n#ADD_EXECUTABLE(nvmpegenc tools/mpegenc.cpp tools/cmdline.h)\n\n#TARGET_LINK_LIBRARIES(nvmpegenc nvcore nvmath nvimage avcodec z)\n\n#INSTALL(TARGETS nvmpegenc DESTINATION bin)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/nvidia-texture-tools/src/nvtt/tools/CMakeLists.txt" : {
      "ObjectId" : "2dcb728f8683506aeca0eb96405e5ade83690cc5",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use gconftool-2 to install gnome thumbnailer\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#gconftool-2 --get-default-source\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# UI tools\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#QT4_ADD_RESOURCES(RCCS ui/configdialog.rc)\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#ADD_EXECUTABLE(nvtt-diag MACOSX_BUNDLE ${SRCS} ${UICS} ${MOCS})\n\n#TARGET_LINK_LIBRARIES(nvtt-diag ${LIBS})\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "code/extlibs/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "3b6e763fdc7c02eeb30c218a97ec7a5d640f081e",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Sqlite3\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/stackwalker/CMakeLists.txt" : {
      "ObjectId" : "ef3a2ca35755198162aef006d1234682c0e45e29",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# StackWalker\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "7c87fcf1e091239c8597bc6174b0e3def7d59914",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# TinyXML\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/extlibs/zlib/CMakeLists.txt" : {
      "ObjectId" : "fbd4dd1a14c0305503b81245f265c94a9150c415",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# ZLib\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/foundation/CMakeLists.txt" : {
      "ObjectId" : "069ae05954ee6a6b05a00262a29ba8a4d5cbd8d6",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Foundation\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/mayaplugin/CMakeLists.txt" : {
      "ObjectId" : "7c1f4df85fc281f073255f8f76ce4ebf6d1cef25",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Maya Plugin\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-- definition needed for maya to compile\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/qttoolkit/CMakeLists.txt" : {
      "ObjectId" : "3e55ac039510e29edefa8563ff7c4ce824ec1fca",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# QtToolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/batchexporter/CMakeLists.txt" : {
      "ObjectId" : "c7a1965d53ba92e8ad49f68fa537202738a27f14",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# batchexporter\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/qttoolkit/batchexporter2/CMakeLists.txt" : {
      "ObjectId" : "cd0ba170347e3b161093f768ee2e5e50a8aed160",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# batchexporter\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/qttoolkit/contentbrowser/CMakeLists.txt" : {
      "ObjectId" : "bbdcbb0752bf67422ddd78ce9cc581567eecab8e",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# contentbrowser\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/qttoolkit/importer/CMakeLists.txt" : {
      "ObjectId" : "efcd770af23c30268b2f713b5813dca080107181",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# importer\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/qttoolkit/leveleditor2/CMakeLists.txt" : {
      "ObjectId" : "0152cb51ae5b88ca21ee890856de7d625eab775a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Level Editor 2.0\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Message(${it})\n\n#\tSET_SOURCE_FILES_PROPERTIES(${it} PROPERTIES COMPILE_FLAGS /Y-)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "code/qttoolkit/nody/CMakeLists.txt" : {
      "ObjectId" : "e47d68acac8887f71b8d76def62adb8b9c5efa0d",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# nody\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/nody/core/CMakeLists.txt" : {
      "ObjectId" : "7f84e2f3e0bad5699df8826969d052378eb246e7",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# nody lib\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/nody/shady/CMakeLists.txt" : {
      "ObjectId" : "8d7a51861ffb1289c2aa87b0dbc38ef652bf5e54",
      "LastModified" : "2016-05-05T07:29:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# shady\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#build as library\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# remove main files from CMake\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "code/qttoolkit/particleconverter/CMakeLists.txt" : {
      "ObjectId" : "aa6000a3e31942fb0fa4e4ff1abf975b974eb388",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Surface Generator\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/projectwizard/CMakeLists.txt" : {
      "ObjectId" : "7d1151245c6fc3b5a2588633338bbeb13ef6a74b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# projectwizard\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "code/qttoolkit/qtaddons/CMakeLists.txt" : {
      "ObjectId" : "4bba431dd936c959c005f8e8642946c172525cf8",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# QtAddons\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/attributecontrollerwidget/CMakeLists.txt" : {
      "ObjectId" : "f5ebdcfacdda4065b7e00156e172f23bb319c1f2",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# attributecontrollerwidget\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/globalprobecontroller/CMakeLists.txt" : {
      "ObjectId" : "e6940baee3e039512443933c4e09cb5a5fa83f2b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# globalprobecontroller\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/miniexporter/CMakeLists.txt" : {
      "ObjectId" : "8a25be11d8a9352a37998a1bfef6d6e7fb2d110a",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# miniexporter\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/physicsmaterialeditor/CMakeLists.txt" : {
      "ObjectId" : "e4cb2749e1b43a199e3f659b4f7eba6d5f1d3050",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# physicsmaterialeditor\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/posteffectcontroller/CMakeLists.txt" : {
      "ObjectId" : "f0ed6edc8eb2118f2edf50c0c8db43a23598a092",
      "LastModified" : "2016-05-19T17:03:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# posteffectcontroller\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/remoteinterface/CMakeLists.txt" : {
      "ObjectId" : "356130775b41490dbf3af3aae3b7d18aea654def",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# remoteinterface\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/resourcebrowser/CMakeLists.txt" : {
      "ObjectId" : "d1cfdb0fc30ab29d0ef07be4a25549e6b60006d4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# resourcebrowser\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qtaddons/splash/CMakeLists.txt" : {
      "ObjectId" : "4821f4118629155a606f0e49b6ca528fbad6c0ed",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# splash\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/qttoolkit/qttools/CMakeLists.txt" : {
      "ObjectId" : "abbae47bcefc1ac58b87746dbb87c1e9b0d767b9",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# batchexporter\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n\n#STRING(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n\n#STRING(REPLACE \"/MANIFEST:NO\" \"\" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/qttoolkit/surfacegenerator/CMakeLists.txt" : {
      "ObjectId" : "88086b291ee1dbab56edc8f4ffea6b99eb5f322f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Surface Generator\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/render/CMakeLists.txt" : {
      "ObjectId" : "e07b46c707dd8fd82044b49c9cd1882f5a0e2dcc",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Render\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#materials/surfaceconstantinstance.cc\n\n#materials/surfaceconstantinstance.h\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#coregraphics/ogl4/glfwdisplaydevice.cc\n\n#coregraphics/ogl4/glfwdisplaydevice.h\n",
        "Line" : 458,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# temporarily use GLFW instead of win32displaydevice, so set this to false\n",
        "Line" : 497,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#\t${Render_files_input__xinput}\n",
        "Line" : 850,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "code/render/jobs/CMakeLists.txt" : {
      "ObjectId" : "fd7e863159e24c582edda8b55ada2add2b094570",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dont use precompiled headers for these (if you do, make sure to add the right precompiled header to the files as well)\n\n#IF(N_USE_PRECOMPILED_HEADERS)\n\n#    IF(NOT MSVC)\n\n#        N_SET_PCH(render_animjobsamplemix stdneb.h stdneb.cc ../)\n\n#        N_SET_PCH(render_animjobsample stdneb.h stdneb.cc ../)\n\n#        N_SET_PCH(render_charevalskeletonjob stdneb.h stdneb.cc ../)\n\n#        N_SET_PCH(render_particlejob stdneb.h stdneb.cc ../)\n\n#        N_SET_PCH(render_visibilityboxsystemjob stdneb.h stdneb.cc ../)\n\n#        N_SET_PCH(render_visibilityquadtreejob stdneb.h stdneb.cc ../)\n\n#    ENDIF()\n\n#ENDIF()\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/render/physics/CMakeLists.txt" : {
      "ObjectId" : "0679c80186780c89ea1fcbde69c8aa38f97bf956",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Physics\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#controller.h\n\n#controller.cc\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#vehicle.h\n\n#vehicle.cc\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#material.h\n\n#material.cc\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#base/basecontroller.h\n\n#base/basecontroller.cc\n\n#base/basevehicle.h\n\n#base/basevehicle.cc\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#base/basematerial.h\n\n#base/basematerial.cc\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# need to enable SIMD (2 means disabled, is the default) else there will be some linker error\n",
        "Line" : 307,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#FIXME fugly, need a real havok detection\n",
        "Line" : 330,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 8
    },
    "code/tests/CMakeLists.txt" : {
      "ObjectId" : "08311184bc2f97c2d979580f36c5c39e756f87b7",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Tests\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#faudiotestsimple\n\n#testscript\n\n#drasa3testui\n\n#forestviewer\n\n#inputtest\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#multiplayerconnectiontest\n\n#PS3 only?\n\n#spumathtest\n\n#stresstestvieweropenclose\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#texturestreamingtest_win32\n\n#viewerstresstest\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#bullet_collision_simple\n\n#bullet_dynamics_simple\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "code/tests/faudiotestsimple/CMakeLists.txt" : {
      "ObjectId" : "58d7e75b1354e6d53f70b0dc1876971a12a311a7",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/forestviewer/CMakeLists.txt" : {
      "ObjectId" : "df1b1be428389e2c50d83a0051dbc229e2ab9114",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/havok_helloworld/CMakeLists.txt" : {
      "ObjectId" : "42909a7e0d7d25a69d829b09cb90b0e1bd4f837f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Havok Hello-world application\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/havok_load_asset/CMakeLists.txt" : {
      "ObjectId" : "e20f7cefec2c62ace369c63396a64843d182a54b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Havok test application for loading an asset as a physics body\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/havok_player_test/CMakeLists.txt" : {
      "ObjectId" : "adaa650bfa0cd2349070ef17916cdfe93b2c2dc8",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Havok player-test\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/inputtest/CMakeLists.txt" : {
      "ObjectId" : "8536ba9c24d9974e07fb353e3192b71ebac805a4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/jobstest/CMakeLists.txt" : {
      "ObjectId" : "214bd21d88cdce823b3ed2b5b084061c49dd644d",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/mathtest/CMakeLists.txt" : {
      "ObjectId" : "3366e345405084634788e6e9c4492a34aba85043",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/multiplayerconnectiontest/CMakeLists.txt" : {
      "ObjectId" : "259be92497c66666c2c7fa1303af521d53283980",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/spumathtest/CMakeLists.txt" : {
      "ObjectId" : "1e118b01fe7003b00b7cfc2b7bce2801a41d9f39",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/stresstestvieweropenclose/CMakeLists.txt" : {
      "ObjectId" : "ff285546d5c518815336baecb2cd8ffa560a7bff",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testaddon/CMakeLists.txt" : {
      "ObjectId" : "781774b816c6966f86873703b632a20a9a1eda69",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testbase/CMakeLists.txt" : {
      "ObjectId" : "3d9bfca48119bf01bcb315b0d20f99b60d98df9b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testfoundation/CMakeLists.txt" : {
      "ObjectId" : "f411fb6f3b954dd1e0420c184ac84ad8c4b897a5",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testrender/CMakeLists.txt" : {
      "ObjectId" : "d7e2668b6b25c8a7f529aa36bf3e80ab21de5ace",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testscript/CMakeLists.txt" : {
      "ObjectId" : "a3868d93c28390b7e970bf8717e795d5a107c00f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testtoolkit/CMakeLists.txt" : {
      "ObjectId" : "635e12b54096365b0840da1a421e6cd622502c95",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/testwin32/CMakeLists.txt" : {
      "ObjectId" : "5be97ef7bb7aa21c675bba0e464bf902038aa135",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/viewerstresstest/CMakeLists.txt" : {
      "ObjectId" : "36d2e8229e8b4c55ba0db2b3ff341f7958d02560",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/zipstresstest/CMakeLists.txt" : {
      "ObjectId" : "b07d0bff0a8ebd891d34be7faf33724a1e96c577",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/tests/ziptest/CMakeLists.txt" : {
      "ObjectId" : "b4f2a4673e608328c9de6115cb1c81a466b2bd63",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/CMakeLists.txt" : {
      "ObjectId" : "71bb567328c58b0f10ef5799ea6db540a79b498f",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory(toolkitutil)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/toolkit/animconverter3/CMakeLists.txt" : {
      "ObjectId" : "a962d72d7493c9fdc23f81d6398514956f1cf175",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/archiver3/CMakeLists.txt" : {
      "ObjectId" : "1b2fa86922b8309553927a6646c3173c337b9693",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# archiver\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/assetbatcher/CMakeLists.txt" : {
      "ObjectId" : "365c5ac94b30a504a55e1ec31d37ab8268b29a7d",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# assetbatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/audiobatcher3/CMakeLists.txt" : {
      "ObjectId" : "c6ac3f69adbfb675c33937655824934c8aa008ff",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# audiobatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/binaryxmlconverter/CMakeLists.txt" : {
      "ObjectId" : "2b494148366975baa456245bed9e24e22f996962",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/buildclassregistryheader/CMakeLists.txt" : {
      "ObjectId" : "a6eac768e889b6e1eace7814af50a0161b210065",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/buildresdict3/CMakeLists.txt" : {
      "ObjectId" : "ea91ad884bcc8caeacb253264d8fafa3abbee77b",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/charxmltodb3/CMakeLists.txt" : {
      "ObjectId" : "63d9561c40918a6c8a3a4c25f28317164a0146d2",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/convertfbxtonax3/CMakeLists.txt" : {
      "ObjectId" : "c58cd24c0024aefaca86bcd06abe069c15642707",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/countlines3/CMakeLists.txt" : {
      "ObjectId" : "16427141141670df5f4d6fbaa8f297a9adb334f6",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/distributedjobservice/CMakeLists.txt" : {
      "ObjectId" : "a832d331acdd7c2aec5010954a61197073c28400",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/distributedtesttool/CMakeLists.txt" : {
      "ObjectId" : "2fc8d65625a8c2abec4562835179db28a5b14fb4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/editorfeatures/CMakeLists.txt" : {
      "ObjectId" : "7fd9fadc8e18c4b82c86e36f1851f4150ae3a0d5",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# editor managers\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/fbxbatcher3/CMakeLists.txt" : {
      "ObjectId" : "7b72754cad5b633270ae976444f6f15c097c07d9",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# fbxbatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/gamebatcher/CMakeLists.txt" : {
      "ObjectId" : "7bff07600e0eca777361168cba757ab431a398d4",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# gamebatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/gamebatcher3/CMakeLists.txt" : {
      "ObjectId" : "269b03a38586940094647a9a7e5ee8927e88beaa",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# gamebatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/genrandtable/CMakeLists.txt" : {
      "ObjectId" : "801481369c2058692771bc8fc374049c836513ca",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Tools\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/guibatcher3/CMakeLists.txt" : {
      "ObjectId" : "f920fcf087f7bdc0d834607af7f2b28a6406a615",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/idlcompiler/CMakeLists.txt" : {
      "ObjectId" : "607e43f9eb39b75bd56dd36119dc05fae566ddc7",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# idlc\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/levelviewer/CMakeLists.txt" : {
      "ObjectId" : "9a6fc12e32ef8e4b411df1ddacb406bfcc7b7fc3",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/modelbatcher3/CMakeLists.txt" : {
      "ObjectId" : "373c60f547a33059b314ebc67625c63deb5b7561",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# modelbatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/n2tableconverter/CMakeLists.txt" : {
      "ObjectId" : "29505038f0a6d0b932e83e8f397b1f002b2ce66c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/n3viewer/CMakeLists.txt" : {
      "ObjectId" : "18497fad4daa38440aaf0fe05c391a2ab1b1cb2c",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/nsc3/CMakeLists.txt" : {
      "ObjectId" : "a54695d5ed05c664cbeee587be2381cd1d9e2503",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/nsh3/CMakeLists.txt" : {
      "ObjectId" : "0c40a704b7e04836dddd41fc730833aba5853529",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Tools\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/sequenceconverter3/CMakeLists.txt" : {
      "ObjectId" : "32c370d689ef7c408dcd5e5998b33563aaf8a375",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/setup/CMakeLists.txt" : {
      "ObjectId" : "065d027800187088a16c13d4d5aac0585808d56d",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Setup\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/shaderbatcher/CMakeLists.txt" : {
      "ObjectId" : "c0e4627fc4aa5dc5934f5b8507064ef16711e9dd",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# shaderbatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/shaderbatcher3/CMakeLists.txt" : {
      "ObjectId" : "0e1e45d314092d883354054f46b072862d1942dd",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/shaderdesignerviewer/CMakeLists.txt" : {
      "ObjectId" : "34af593c306446034230440a149b2033e0f936da",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# shaderdesignerviewer\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/sm5compiler/CMakeLists.txt" : {
      "ObjectId" : "8075086c0f142537b93ff211b96d9ae6223d8b75",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Tools\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/suiconverter3/CMakeLists.txt" : {
      "ObjectId" : "c4d9a462da70f2e7454a6772cbffd667b6b29795",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/synctool3/CMakeLists.txt" : {
      "ObjectId" : "77b8d2bdfa10f14639c6e63ce51b50e846dc4391",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/texturebatcher3/CMakeLists.txt" : {
      "ObjectId" : "9d6ff5084028e4317c58a174be6833664d0c63ed",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Texturebatcher\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "code/toolkit/toolkitutil/CMakeLists.txt" : {
      "ObjectId" : "550ca5976c67ec0bc4a7bb604c0b805a106f2b01",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Toolkit\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libs/cmake/FindFBX.cmake" : {
      "ObjectId" : "94d08f2de5c8c1263d754093f1fffd965039cf93",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate FBX\n\n# This module defines:\n\n# FBX_INCLUDE_DIR, where to find the headers\n\n#\n\n# FBX_LIBRARY\n\n# FBX_FOUND\n\n#\n\n# $FBX_DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$FBX_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# do nothing\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# search for headers & debug/release libraries\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#no debug d suffix, search in debug folder only\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libs/cmake/FindFmodStudio.cmake" : {
      "ObjectId" : "ecb9c66a1b0dd3912a1fd07a31c85dd910f4e615",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate fmod studio api files\n\n# This module defines:\n\n# FMOD_INCLUDE_DIR, where to find the headers\n\n#\n\n# FMOD_LIBRARIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try registry\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libs/cmake/NebulaHelpers.cmake" : {
      "ObjectId" : "ac3485f37bb52c3ef4578e2a8c6ea9fe19b6a9d3",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nebula macros for cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# macro for nidl files\n\n#------------------------------------------------------------------------------\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# macro for qt projects\n\n#------------------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# helper for adding xml template files, blueprints and gui files to the project\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# template and other xml files\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# scripts\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# gui\n",
        "Line" : 162,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Sets up the default Nebula precompiled header for the given target.\n\n# param TargetName is the name of a target that should use precompiled headers.\n\n# See extlibs/tinyxml/CMakeLists.txt for an example.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#MESSAGE(\"${CMAKE_CXX_COMPILER} -DPCHCOMPILE ${_compiler_FLAGS} -x c++-header -o {_output} ${_source}\")\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Sets the subsystem linker option on WIN32, when the subsystem is set to\n\n# \"Windows\" the executable is expected to have a WinMain(), if \"Console\" is\n\n# defined the executable is expected to have a main().\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Option for enabling link time code generation in windows\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Sets up the default linker options for a Nebula executable.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Sets up the default compiler options for a Nebula library target or executable.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# C++ compiler\n",
        "Line" : 311,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "# C compiler (force compilation of .c files using C++ compiler)\n",
        "Line" : 324,
        "CharPositionInLine" : 24
      },
      "15" : {
        "Text" : "# C++ compiler\t\t\n",
        "Line" : 338,
        "CharPositionInLine" : 24
      },
      "16" : {
        "Text" : "# C compiler (force compilation of .c files using C++ compiler)\n",
        "Line" : 351,
        "CharPositionInLine" : 24
      },
      "17" : {
        "Text" : "# C compiler\n\n# remove multichar warning spewage\n",
        "Line" : 366,
        "CharPositionInLine" : 16
      },
      "18" : {
        "Text" : "# C++ compiler\n\n# remove multichar warning spewage\n",
        "Line" : 373,
        "CharPositionInLine" : 16
      },
      "19" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# copies of qt macros that add pch flags\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# get include dirs\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# pch hack.\n",
        "Line" : 397,
        "CharPositionInLine" : 49
      },
      "22" : {
        "Text" : "#  parse file for dependencies\n\n#  all files are absolute paths or relative to the location of the qrc file\n",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Since this cmake macro is doing the dependency scanning for these files,\n\n# let's make a configured file and add it as a dependency so cmake is run\n\n# again when dependencies need to be recomputed.\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# The .qrc file does not exist (yet). Let's add a dependency and hope\n\n# that it will be generated later\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# get include dirs\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# pch hack.\n",
        "Line" : 457,
        "CharPositionInLine" : 49
      },
      "27" : {
        "Text" : "#  parse file for dependencies\n\n#  all files are absolute paths or relative to the location of the qrc file\n",
        "Line" : 474,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Since this cmake macro is doing the dependency scanning for these files,\n\n# let's make a configured file and add it as a dependency so cmake is run\n\n# again when dependencies need to be recomputed.\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# The .qrc file does not exist (yet). Let's add a dependency and hope\n\n# that it will be generated later\n",
        "Line" : 493,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#SET(QT_QMAKE_EXECUTABLE /usr/bin/qmake)\n\n#SET(QT_MOC_EXECUTABLE /usr/bin/moc)\n\n#SET(QT_RCC_EXECUTABLE /usr/bin/rcc)\n\n#SET(QT_UIC_EXECUTABLE /usr/bin/uic)\n",
        "Line" : 507,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 31
    },
    "projects/CMakeLists.txt" : {
      "ObjectId" : "4ec8f9b9210616663bced4a01184fa2ce2ef5dea",
      "LastModified" : "2016-04-14T13:53:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 200,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 5099
}