{
  "Repository" : "25230883",
  "Revision" : "HEAD",
  "ObjectId" : "f7b1a4f2595d4db595eb501da46343aad5d50d29",
  "CommitTime" : "2019-04-17T20:48:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "572e464b09df882ffaf06f005c46284811de7f6c",
      "LastModified" : "2019-03-02T20:06:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# determine if this is top-level or embedded project\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default is release with debug info\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Setup CMake to run tests\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Directory where all (binary) tests will be located\n\n# Binary tests do not go to install directory by default\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# put static libraries first unless we want dynamic libraries\n",
        "Line" : 61,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# To remember the last configuration\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "######\n\n# WARNING: crab dependencies (apron and ldd) are currently compiled\n\n# statically regardless BUILD_CRAB_LIBS_SHARED.\n\n######\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So that executables outside the build tree can find later dynamic\n\n# libraries.  Even if CRAB_LIBS_TYPE=STATIC we could have a mix of\n\n# dynamic and static libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Mac OS X specific code\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# XXX: ldd is always compiled statically.\n\n# We add -fPIC flag so it can be linked with a shared library\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Mac OS X specific code\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# check for rt lib. Not needed on OSX.\n\n# find_library(RT_LIB NAMES rt)\n\n# if (NOT RT_LIB)\n\n#   set(RT_LIB \"\")\n\n# endif()\n\n# mark_as_advanced(RT_LIB)\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# XXX: needed if shared libraries\n\n# if (BUILD_CRAB_LIBS_SHARED)\n\n#   if (USE_APRON)\n\n#     if (CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n\n#       install(FILES ${APRON_LIBRARY} DESTINATION ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#     else ()\n\n#       install(FILES ${APRON_LIBRARY} DESTINATION lib)\n\n#     endif ()\n\n#   endif ()\n\n#   if (USE_LDD)\n\n#     if (CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n\n#       install(FILES ${LDD_LIBRARY} DESTINATION ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#     else ()\n\n#       install(FILES ${LDD_LIBRARY} DESTINATION lib)\n\n#     endif ()\n\n#   endif ()\n\n# endif ()\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# XXX: do not use add_definition for warning flags. add_definition is\n\n#      intended for -D...\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## XXX: propagate CRAB_LIBS and CRAB_INCLUDE_DIRS to parent\n",
        "Line" : 349,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "## crab config.h\n",
        "Line" : 353,
        "CharPositionInLine" : 7
      },
      "17" : {
        "Text" : "## This is ugly fix so that seahorn and crab-llvm can find elina's\n\n## shared libraries. It has to do with how CMAKE_INSTALL_RPATH is\n\n## handled by these tools.\n",
        "Line" : 403,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "cmake/FindApron.cmake" : {
      "ObjectId" : "47ddb17d75ec7e204a101bf144c7e9de0da2ef85",
      "LastModified" : "2017-04-07T22:25:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find Apron library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### XXX: we grab static libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "## octD is faster than octMPQ\n",
        "Line" : 14,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# find_library(Apron_Oct_Lib NAMES octMPQ PATHS ${APRON_ROOT}/lib)\n",
        "Line" : 16,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    },
    "cmake/FindCudd.cmake" : {
      "ObjectId" : "45e8e724a023ef8b9833de01e0ea7173d611f75c",
      "LastModified" : "2018-03-14T22:19:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Cudd\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_path(CUDD_INT_INCLUDE_DIR NAMES cuddInt.h PATHS ${CUDD_ROOT}/cudd)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Hack: In some linux systems, the library /lib64/libutil.so exists\n\n## but it has nothing to do with cudd. Even if we use NO_DEFAULT_PATH\n\n## when CUDD_ROOT is not defined CUDD_UTIL_LIBRARY can be set to the\n\n## wrong library.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindElina.cmake" : {
      "ObjectId" : "97ed49a00cf69b51c2d747a9b41c00c3bc15f546",
      "LastModified" : "2018-10-30T18:52:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find Elina library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### XXX: we grab static libraries\n\n# find_library(Elina_Poly_Lib NAMES liboptpoly.a PATHS ${ELINA_ROOT}/lib)\n\n# find_library(Elina_Opt_Oct_Lib NAMES liboptoct.a PATHS ${ELINA_ROOT}/lib)\n\n# find_library(Elina_Linearize_Lib NAMES libelinalinearize.a PATHS ${ELINA_ROOT}/lib)\n\n# find_library(Elina_Aux_Lib NAMES libelinaux.a PATHS ${ELINA_ROOT}/lib)\n\n# find_library(Elina_Opt_Zones_Lib NAMES liboptzones.a PATHS ${ELINA_ROOT}/lib)\n\n# find_library(Elina_Zonotope_Lib NAMES libzonotope.a PATHS ${ELINA_ROOT}/lib)      \n",
        "Line" : 11,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "### XXX: we grab dynamic libraries\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/FindGMP.cmake" : {
      "ObjectId" : "e96ad8425af244c5e2e31fed76f36b0e4e4885fa",
      "LastModified" : "2018-10-30T18:52:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindLdd.cmake" : {
      "ObjectId" : "514f275fc6de58faad501837c1826212c9ec1dfd",
      "LastModified" : "2018-10-30T18:52:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find LDD\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CUDD_ROOT ${LDD_ROOT}/cudd-2.4.2)\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#find_path(LDD_INCLUDE_DIR NAMES  ldd.h tvpi.h PATHS ${LDD_ROOT}/src/include)\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#find_library(LDD_TVPI_LIBRARY   NAMES tvpi   PATHS  ${LDD_ROOT}/src/tvpi)\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#find_library(LDD_LDD_LIBRARY   NAMES ldd   PATHS  ${LDD_ROOT}/src/ldd)\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/FindMPFR.cmake" : {
      "ObjectId" : "cf45833efdc9ec70c8d25541b25a6311702cbd28",
      "LastModified" : "2018-10-30T18:52:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR library\n\n# See http://www.mpfr.org/\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(MPFR 2.3.0)\n\n# to require version 2.3.0 to newer of MPFR.\n\n#\n\n# Once done this will define\n\n#\n\n#  MPFR_FOUND - system has MPFR lib with correct version\n\n#  MPFR_INCLUDES - the MPFR include directory\n\n#  MPFR_LIBRARIES - the MPFR library\n\n#  MPFR_VERSION - MPFR version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2010 Jitse Niesen, <jitse@maths.leeds.ac.uk>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MPFR_INCLUDES\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MPFR_FIND_VERSION to 1.0.0 if no minimum version is specified\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set MPFR_VERSION\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check whether found version exceeds minimum version\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set MPFR_LIBRARIES\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# message (STATUS \"MPFR version: ${MPFR_VERSION}\")\n\n# message (STATUS \"MPFR include: ${MPFR_INCLUDES}\")\n\n# message (STATUS \"MPFR library: ${MPFR_LIBRARIES}\")\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Epilogue\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindSSE.cmake" : {
      "ObjectId" : "17d2819aaab9ad47bdef8a0c1acf12f2bbf9cb1e",
      "LastModified" : "2018-10-30T18:52:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if SSE/AVX instructions are available on the machine where\n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# /proc/cpuinfo apparently omits sse3 :(\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# TODO\n",
        "Line" : 95,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# if(NOT SSE2_FOUND)\n\n#       MESSAGE(STATUS \"Could not find hardware support for SSE2 on this machine.\")\n\n# endif(NOT SSE2_FOUND)\n\n# if(NOT SSE3_FOUND)\n\n#       MESSAGE(STATUS \"Could not find hardware support for SSE3 on this machine.\")\n\n# endif(NOT SSE3_FOUND)\n\n# if(NOT SSSE3_FOUND)\n\n#       MESSAGE(STATUS \"Could not find hardware support for SSSE3 on this machine.\")\n\n# endif(NOT SSSE3_FOUND)\n\n# if(NOT SSE4_1_FOUND)\n\n#       MESSAGE(STATUS \"Could not find hardware support for SSE4.1 on this machine.\")\n\n# endif(NOT SSE4_1_FOUND)\n\n# if(NOT AVX_FOUND)\n\n#       MESSAGE(STATUS \"Could not find hardware support for AVX on this machine.\")\n\n# endif(NOT AVX_FOUND)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "external/Makefile" : {
      "ObjectId" : "d8a10cb8927cd33d7b511a307554be736acc142a",
      "LastModified" : "2019-02-05T22:16:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------#\n\n#                                  INSTRUCTIONS\n\n#------------------------------------------------------------------------------------#\n\n#  1. Type `make crab_install`\n\n#  2. Type `make all`\n\n#  3. Type `./domain` or `./analysis`\n\n#------------------------------------------------------------------------------------#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lookup paths for crab shared libraries\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/apron/Makefile" : {
      "ObjectId" : "3638ebe00ea90c061aec6c40c20ebdcdebfc5cf8",
      "LastModified" : "2019-02-05T22:16:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------#\n\n#                                  INSTRUCTIONS\n\n#------------------------------------------------------------------------------------#\n\n#  1. Type `make crab_install`\n\n#  2. Type `make all`\n\n#  3. Type `./domain` or `./analysis`\n\n#------------------------------------------------------------------------------------#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lookup paths for crab shared libraries\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/elina/Makefile" : {
      "ObjectId" : "335eea80a5811bfd4da792aacedf8372f405f1da",
      "LastModified" : "2019-03-02T20:06:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------#\n\n#                                  INSTRUCTIONS\n\n#------------------------------------------------------------------------------------#\n\n#  1. Type `make crab_install`\n\n#  2. Type `make all`\n\n#  3. Type `./domain` or `./analysis`\n\n#------------------------------------------------------------------------------------#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Elina shared libraries have extension .so even on mac\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Lookup paths for crab and elina shared libraries\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugly hack: add elina lib directory to rpath is not enough\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "include/crab/config.h.cmake" : {
      "ObjectId" : "fd32b8465697fbf101c33b143fa10ab6646f75b5",
      "LastModified" : "2019-03-02T20:06:58Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/** Define whether lin-ldd is available */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/** Define whether apron library is available */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/** Define whether elina library is available */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/** Define whether enable logging for debugging purposes */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "34db000bcb2400402c7fa4b2ac423da86ef59b1a",
      "LastModified" : "2018-10-30T18:52:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This is ugly fix so that seahorn and crab-llvm can find Crab if\n\n## dynamically linked. It has to do with how CMAKE_INSTALL_RPATH is\n\n## handled by these tools.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "aeda1b65cc81f3b3f54916bbc874a627e75f942f",
      "LastModified" : "2019-03-02T20:06:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create libraries that contain all the crab stuff\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Extract the filename without an extension (NAME_WE)\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#Add compile target\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#link with crab libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#move testing binaries into a ${TEST_DIR} directory\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Finally add it to test execution\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 10,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 1149
}