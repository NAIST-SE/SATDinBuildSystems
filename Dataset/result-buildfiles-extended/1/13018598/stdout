{
  "Repository" : "13018598",
  "Revision" : "HEAD",
  "ObjectId" : "4a0a48249566c9dbac6bf78fb4888a60ca85b28e",
  "CommitTime" : "2019-03-11T09:27:32Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7fa4f71c5c32ef104769fe63792b34936712863d",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# CMake top-level configuration of SLProject\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Register general cmake commands (set_policy, source_group_by_path, list_extract)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The FOLDER properties are needed in Visual Studio and XCode generated projects for nested folders\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Declare project\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set output directories\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "35cfc008d67d54c3b9c174a507895990d209f996",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/app-Demo-Node/CMakeLists.txt" : {
      "ObjectId" : "0a5ced01e911f181ec819e128e686c3ea7f511b1",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/app-Demo-Node/GLFW/CMakeLists.txt" : {
      "ObjectId" : "e5a3bae3379d59dea598243c372acaf6650def4d",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# CMake configuration for app-Demo-Node application\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/app-Demo-SLProject/CMakeLists.txt" : {
      "ObjectId" : "c6d32790b28983a0a6fe7bed41c778b26e3d8b5f",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/app-Demo-SLProject/GLFW/CMakeLists.txt" : {
      "ObjectId" : "ca06a2a4460114228542da1be3e044c02e8fdcb7",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# CMake configuration for app-Demo-SLProject application\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/app-Demo-SLProject/android/app/CMakeLists.txt" : {
      "ObjectId" : "0aedc8bd5e75f85dbf04038e7c4158ec24521586",
      "LastModified" : "2018-12-24T10:21:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For more information about using CMake with Android Studio, read the\n\n# documentation: https://d.android.com/studio/projects/add-native-code.html\n\n#find_package(OpenCV REQUIRED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy APK contents\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If you add new models you must delete ${CMAKE_CURRENT_LIST_DIR}/src/main/assets\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/app-Demo-SLProject/android/app/proguard-rules.pro" : {
      "ObjectId" : "45dc58a590cb45b0e593be5df3121c9fa250adc1",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /opt/android-sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/exercices/CMakeLists.txt" : {
      "ObjectId" : "ed205bb10df05e87544fb5e0faed1aab6a67717c",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/exercices/ch06_ColorCube/CMakeLists.txt" : {
      "ObjectId" : "430a0b705efcac81dd20728fad1e88b217a3f136",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise ch06_ColorCube\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/ch07_DiffuseCube/CMakeLists.txt" : {
      "ObjectId" : "f6f3df9f91c1c0dddf0a9cb2f8bff2d3ba16b640",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise ch07_DiffuseCube\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/ch09_TextureMapping/CMakeLists.txt" : {
      "ObjectId" : "b860bca57ae37eec692de078bf5698a14827c263",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise ch09_TextureMapping\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/ch09_TextureMapping_Java/build.xml" : {
      "ObjectId" : "2d97179f959826af9f2512c85b732aa4e1b10f04",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "apps/exercices/cv01_ChangeBrightnessAndContrast/CMakeLists.txt" : {
      "ObjectId" : "67f61257338f0dd207c7d349b66d14329e5dc3cb",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv01_ChangeBrightnessAndContrast\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv02_CalderonFilter/CMakeLists.txt" : {
      "ObjectId" : "ffd4e937cf8da83887f1a29b3be33b5c6b0d48fb",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv02_CalderonFilter\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv06_WarpTriangle/CMakeLists.txt" : {
      "ObjectId" : "e835fd6ddba04fbc413de3728c16079b2115edc4",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv06_WarpTriangle\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv07_MeshWarping/CMakeLists.txt" : {
      "ObjectId" : "1cdcf60f1925ef1eb82a8e1c2ca5ccd0752f33e5",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv07_MeshWarping\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv08_MeshMorphing/CMakeLists.txt" : {
      "ObjectId" : "f22d2b5a03cbc29aa1fd1b66254f929fdf1b668f",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv08_MeshMorphing\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv13_FaceTracking/CMakeLists.txt" : {
      "ObjectId" : "b55a8e104e317478b85377822848d2422fffe389",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv13_FaceTracking\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv13_FacialLandmarkDetection/CMakeLists.txt" : {
      "ObjectId" : "6de622afdc79f7ce7fd609c139bd2864d184e730",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv13_FacialLandmarkDetection\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv13_HeadPoseEstimation/CMakeLists.txt" : {
      "ObjectId" : "fc4acdbe722416a83f368eea77ac088c7e8a4e15",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv13_HeadPoseEstimation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/exercices/cv13_Snapchat2D/CMakeLists.txt" : {
      "ObjectId" : "a93c73529a611c5f5be643b15a17e9770e3f2d76",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake project definition for exercise cv13_Snapchat2D\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CompileOptions.cmake" : {
      "ObjectId" : "662ef2a6ce97a590d144863179c1399e160ca401",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# Platform and architecture setup\n\n# \n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get upper case system name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine architecture (32/64 bit)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(STATUS \"DEFAULT_COMPILE_DEFINITIONS ${DEFAULT_COMPILE_DEFINITIONS}\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MSVC compiler options\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Calling any one of the potentially unsafe methods in the Standard C++ Library\n\n# Calling any one of the potentially unsafe methods in the CRT Library\n",
        "Line" : 40,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "# MSVC compiler options\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -> build with multiple processes\n\n# -> warning level 3\n\n# -> disable warning: 'identifier': class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# -> disable warning: 'identifier': symbol will be dynamically initialized (implementation limitation)\n",
        "Line" : 50,
        "CharPositionInLine" : 22
      },
      "8" : {
        "Text" : "# -> whole program global optimization\n\n# -> buffer security check: no \n\n# -> whole program optimization: enable link-time code generation (disables Zi)\n\n# -> enable string pooling\n",
        "Line" : 56,
        "CharPositionInLine" : 22
      },
      "9" : {
        "Text" : "# No manual c++11 enable for MSVC as all supported MSVC versions for cmake-init have C++11 implicitly enabled (MSVC >=2013)\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# GCC and Clang compiler options\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Required for CMake < 3.1; should be removed if minimum required CMake version is raised.\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# MSVC compiler options\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# -> build with multiple processes\n\n# -> warning level 0 all off\n",
        "Line" : 117,
        "CharPositionInLine" : 22
      },
      "14" : {
        "Text" : "# -> whole program global optimization\n\n# -> buffer security check: no\n\n# -> whole program optimization: enable link-time code generation (disables Zi)\n\n# -> enable string pooling\n",
        "Line" : 122,
        "CharPositionInLine" : 22
      },
      "15" : {
        "Text" : "# No manual c++11 enable for MSVC as all supported MSVC versions for cmake-init have C++11 implicitly enabled (MSVC >=2013)\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# GCC and Clang compiler options\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# \n\n# Linker options\n\n# \n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Use pthreads on mingw and linux\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/Custom.cmake" : {
      "ObjectId" : "59dc3e6774b726dc5b9cfb62f95ea2ab1820d5ee",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set policy if policy is available\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define function \"source_group_by_path with three mandatory arguments (PARENT_PATH, REGEX, GROUP, ...)\n\n# to group source files in folders (e.g. for MSVC solutions).\n\n#\n\n# Example:\n\n# source_group_by_path(\"${CMAKE_CURRENT_SOURCE_DIR}/src\" \"\\\\\\\\.h$|\\\\\\\\.inl$|\\\\\\\\.cpp$|\\\\\\\\.c$|\\\\\\\\.ui$|\\\\\\\\.qrc$\" \"Source Files\" ${sources})\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Function that extract entries matching a given regex from a list.\n\n# ${OUTPUT} will store the list of matching filenames.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CustomCommands.cmake" : {
      "ObjectId" : "2d728b3bbaff6c4317ac2eb2d8d47dd5b1d2d7ba",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Custom cmake commands used in other cmake files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Set policy if policy is available\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Define function \"source_group_by_path with three mandatory arguments\n\n# (PARENT_PATH, REGEX, GROUP, ...) to group source files in folders\n\n# (e.g. for MSVC solutions).\n\n#\n\n# Example: source_group_by_path(\"${CMAKE_CURRENT_SOURCE_DIR}/src\" \"\\\\\\\\.h$|\\\\\\\\.inl$|\\\\\\\\.cpp$|\\\\\\\\.c$|\\\\\\\\.ui$|\\\\\\\\.qrc$\" \"Source Files\" ${sources})\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Function that extract entries matching a given regex from a list.\n\n# ${OUTPUT} will store the list of matching filenames.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message(STATUS \"adding 3rdpary library with name ${name} at location ${file}\")\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/DownloadPrebuilts.cmake" : {
      "ObjectId" : "5372cd7f6ac1b6bdae0cc426dbc5b2023b506ab5",
      "LastModified" : "2018-12-24T10:21:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# CMake options downloading and installing prebuilt libs\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \n\n# Download and install OpenCV from pallas.bfh.ch\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==============================================================================\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------\n",
        "Line" : 43,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : "# Set working dir for VS\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#-----------------------------\n",
        "Line" : 85,
        "CharPositionInLine" : 49
      },
      "6" : {
        "Text" : "# Download first for iOS\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Now download for MacOS\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#---------------------------\n",
        "Line" : 139,
        "CharPositionInLine" : 50
      },
      "9" : {
        "Text" : "#==============================================================================\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/PlatformLinkLibs.cmake" : {
      "ObjectId" : "cc43758951bf2b5b090654400c66d3ed2cd1d91b",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake configuration for platform specific link libraries for all projects\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "#-----------------------------\n",
        "Line" : 30,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : "#----------------------------\n",
        "Line" : 42,
        "CharPositionInLine" : 50
      },
      "5" : {
        "Text" : "#==============================================================================\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/SetGitBranchNameAndCommitID.cmake" : {
      "ObjectId" : "d7da258407bbbce00a69ca9b6cb3eee5fed501f0",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Get GIT branch name and commit id\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MESSAGE(STATUS \"GitBranch: ${GitBranch}\")\n",
        "Line" : 15,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "#MESSAGE(STATUS \"GitCommit: ${GitCommit}\")\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#MESSAGE(STATUS \"GitDate: ${GitDate}\")\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "externals/CMakeLists.txt" : {
      "ObjectId" : "297de532d8f818e81970c3d5719188d08d530641",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/lib-SLExternal/CMakeLists.txt" : {
      "ObjectId" : "93a8a75d62405fe0ac49df381078d37e0cabe2db",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# CMake configuration for lib-SLExternal\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==============================================================================\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : "#----------------------------\n",
        "Line" : 151,
        "CharPositionInLine" : 50
      },
      "5" : {
        "Text" : "#==============================================================================\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#==============================================================================\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--------------------------------\n",
        "Line" : 224,
        "CharPositionInLine" : 46
      },
      "8" : {
        "Text" : "#==============================================================================\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#SL_MEMLEAKDETECT\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "externals/lib-SLExternal/glew/CMakeLists.txt" : {
      "ObjectId" : "b17b42a0ab62c80b96663bd29aeca6a50dc776e5",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# All platforms need OpenGL\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Linux needs X11\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "externals/lib-SLExternal/glfw3/CMake/amd64-mingw32msvc.cmake" : {
      "ObjectId" : "705e251d3917f3787eca55aa3b3b0e303aee548f",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "externals/lib-SLExternal/glfw3/CMake/i586-mingw32msvc.cmake" : {
      "ObjectId" : "393ddbda3019706378b25bb3d1abb634a3936866",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "externals/lib-SLExternal/glfw3/CMake/i686-pc-mingw32.cmake" : {
      "ObjectId" : "9a46aef7b3457c8382fe16b3ad2e5a776f7f5f7d",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "externals/lib-SLExternal/glfw3/CMake/i686-w64-mingw32.cmake" : {
      "ObjectId" : "9bd60936de2ed08f365601fbbfe404adbb37853a",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "externals/lib-SLExternal/glfw3/CMake/modules/FindEGL.cmake" : {
      "ObjectId" : "83bb9e36b57855adee3cecf0319d106ab0d7db08",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find EGL\n\n#\n\n# EGL_INCLUDE_DIR\n\n# EGL_LIBRARY\n\n# EGL_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/glfw3/CMake/modules/FindGLESv1.cmake" : {
      "ObjectId" : "70d3eb9fcb34e2a9cb6af555b3b1699b92771515",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GLESv1\n\n#\n\n# GLESv1_INCLUDE_DIR\n\n# GLESv1_LIBRARY\n\n# GLESv1_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/glfw3/CMake/modules/FindGLESv2.cmake" : {
      "ObjectId" : "ff5ba954c6e44884603c5d1872bc74e09c20ef56",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GLESv2\n\n#\n\n# GLESv2_INCLUDE_DIR\n\n# GLESv2_LIBRARY\n\n# GLESv2_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/glfw3/CMake/modules/FindMir.cmake" : {
      "ObjectId" : "b1a495ba191db856c27e790cecd100a7288eeb89",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Mir on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   MIR_LIBRARIES   - Link these to use Wayland\n\n#   MIR_INCLUDE_DIR - Include directory for Wayland\n\n#\n\n# Copyright (c) 2014 Brandon Schaefer <brandon.schaefer@canonical.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/glfw3/CMake/modules/FindWayland.cmake" : {
      "ObjectId" : "f93218b8739e66a50678a4b6965231438b87692f",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Wayland on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   WAYLAND_FOUND       - True if Wayland is found\n\n#   WAYLAND_LIBRARIES   - Link these to use Wayland\n\n#   WAYLAND_INCLUDE_DIR - Include directory for Wayland\n\n#   WAYLAND_DEFINITIONS - Compiler flags for using Wayland\n\n#\n\n# In addition the following more fine grained variables will be defined:\n\n#\n\n#   WAYLAND_CLIENT_FOUND  WAYLAND_CLIENT_INCLUDE_DIR  WAYLAND_CLIENT_LIBRARIES\n\n#   WAYLAND_SERVER_FOUND  WAYLAND_SERVER_INCLUDE_DIR  WAYLAND_SERVER_LIBRARIES\n\n#   WAYLAND_EGL_FOUND     WAYLAND_EGL_INCLUDE_DIR     WAYLAND_EGL_LIBRARIES\n\n#\n\n# Copyright (c) 2013 Martin Gräßlin <mgraesslin@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In the cache already\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "externals/lib-SLExternal/glfw3/CMake/modules/FindXKBCommon.cmake" : {
      "ObjectId" : "0f571eeacb5cd91d4ef72a89a066142e5a6a0d0a",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find XKBCommon\n\n# Once done, this will define\n\n#\n\n#   XKBCOMMON_FOUND - System has XKBCommon\n\n#   XKBCOMMON_INCLUDE_DIRS - The XKBCommon include directories\n\n#   XKBCOMMON_LIBRARIES - The libraries needed to use XKBCommon\n\n#   XKBCOMMON_DEFINITIONS - Compiler switches required for using XKBCommon\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/glfw3/CMake/x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "84b2c701ec1d9e2ee0b72f3031cfccb4a81d205e",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "externals/lib-SLExternal/glfw3/CMakeLists.txt" : {
      "ObjectId" : "8f0d665095ba72468891e0fa8c4f3e81f45e9cc6",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Until all major package systems have moved to CMake 3,\n\n# we stick with the older INSTALL_NAME_DIR mechanism\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Set compiler specific flags\n\n#--------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable link-time exploit mitigation features enabled by default on MSVC\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Compatibility with data execution prevention (DEP)\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Compatibility with address space layout randomization (ASLR)\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Compatibility with 64-bit address space layout randomization (ASLR)\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n\n# win32_platform.h.  We define them here until a saner solution can be found\n\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Detect and select backend APIs\n\n#--------------------------------------------------------------------\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Find and add Unix math and time libraries\n\n#--------------------------------------------------------------------\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Win32 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use WGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use X11 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Check for XRandR (modern resolution switching and gamma control)\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check for Xinerama (legacy multi-monitor support)\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Check for XInput (high-resolution cursor motion)\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Backwards compatibility (bug in CMake 2.8.7)\n",
        "Line" : 293,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Check for Xf86VidMode (fallback gamma control)\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Backwards compatibility (see CMake bug 0006976)\n",
        "Line" : 308,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Check for Xkb (X keyboard extension)\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Check for Xcursor\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Wayland for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Mir for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use GLX for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use EGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Cocoa for window creation and NSOpenGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Export GLFW library dependencies\n\n#--------------------------------------------------------------------\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Choose library output name\n\n#--------------------------------------------------------------------\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# On Unix-like systems, shared libraries can use the soname system.\n",
        "Line" : 470,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Create generated files\n\n#--------------------------------------------------------------------\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add subdirectories\n\n#--------------------------------------------------------------------\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Install files other than the library\n\n# The library is installed by src/CMakeLists.txt\n\n#--------------------------------------------------------------------\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 541,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 34
    },
    "externals/lib-SLExternal/glfw3/examples/CMakeLists.txt" : {
      "ObjectId" : "16a25b0fdc26cb20c8edf2313c6f724703a286f0",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/glfw3/src/CMakeLists.txt" : {
      "ObjectId" : "77a8501f6cc9f197763e43688992d5828ea3709a",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, CMake doesn't know about .m\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The GLFW DLL needs a special compile-time macro and import library name\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Append -fno-common to the compile flags to work around a bug in\n\n# Apple's GCC\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "externals/lib-SLExternal/glfw3/tests/CMakeLists.txt" : {
      "ObjectId" : "bfc67d83d1c6bfaaedd54dbbe55d6db9a4087456",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "externals/lib-SLExternal/imgui/examples/vulkan_example/CMakeLists.txt" : {
      "ObjectId" : "d05b451631ecb246182fc92ab92c6ab8b7e48959",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GLFW\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set this to point to an up-to-date GLFW repo\n",
        "Line" : 12,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "# ImGui\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use vulkan headers from glfw:\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "externals/lib-SLExternal/oculus/oculus.pro" : {
      "ObjectId" : "dc1e1054bebff4fa2ab2c448f25fa2b65f651643",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n#  File:      oculus.pro\n\n#  Purpose:   QMake project definition file for the asset import library\n\n#  Author:    Marcus Hudritsch\n\n#  Date:      September 2012 (HS12)\n\n#  Copyright: Marcus Hudritsch, Switzerland\n\n#             THIS SOFTWARE IS PROVIDED FOR EDUCATIONAL PURPOSE ONLY AND\n\n#             WITHOUT ANY WARRANTIES WHETHER EXPRESSED OR IMPLIED.\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#define platform variable for folder name\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#define configuration variable for folder name\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#the last 3 source files are needed in both mac and windows\n\n#but the mac version fails if the source files dont define any symbols themselfes\n\n#files: (ovr_display.cpp, ovr_lockless.cpp, util_interface.cpp)\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "externals/lib-assimp/CMakeLists.txt" : {
      "ObjectId" : "14e57a307ed2f93027288ed40c365d7fbec7cfa9",
      "LastModified" : "2018-12-24T10:21:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake configuration for lib-assimp\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==============================================================================\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "externals/lib-assimp/code/CMakeLists.txt" : {
      "ObjectId" : "796711316c246caeda9dea7917c6485a13a41d8b",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Listing and grouping of all the source files.\n\n# 1) Set the file lists for each component\n\n# 2) Create a Source Group for each component, for IDE project orginization\n\n# 3) Add libassimp using the file lists (eliminates duplication of file names between\n\n#    source groups and library command)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VC2010 fixes\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assimp Files\n",
        "Line" : 633,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Model Support\n",
        "Line" : 640,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Third-party libraries\n",
        "Line" : 681,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Necessary to show the headers in the project when using the VC++ generator:\n",
        "Line" : 687,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Old precompiled header\n\n# (removed because the precompiled header is not updated when visual studio switch configuration which leads to failed compilation.\n\n# Moreover it's a drag to recompile assimp entirely each time a modification is made to one of the included header, which is definitely counter-productive.)\n",
        "Line" : 693,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#ADD_MSVC_PRECOMPILED_HEADER(\"AssimpPCH.h\" \"AssimpPCH.cpp\" assimp_src)\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# use full version \n",
        "Line" : 708,
        "CharPositionInLine" : 31
      },
      "9" : {
        "Text" : "# Build against external unzip, or add ../contrib/unzip so\n\n# assimp can #include \"unzip.h\"\n",
        "Line" : 716,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "externals/lib-assimp/contrib/zlib/CMakeLists.txt" : {
      "ObjectId" : "93d5f3c6dfc159bd743f21f15ac92c1c74c449e3",
      "LastModified" : "2018-10-23T08:19:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(INSTALL_BIN_DIR \"${CMAKE_INSTALL_PREFIX}/bin\" CACHE PATH \"Installation directory for executables\")\n\n#set(INSTALL_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE PATH \"Installation directory for libraries\")\n\n#set(INSTALL_INC_DIR \"${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"Installation directory for headers\")\n\n#set(INSTALL_MAN_DIR \"${CMAKE_INSTALL_PREFIX}/share/man\" CACHE PATH \"Installation directory for manual pages\")\n\n#set(INSTALL_PKGCONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/share/pkgconfig\" CACHE PATH \"Installation directory for pkgconfig (.pc) files\")\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# clear variable\n",
        "Line" : 47,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we're doing an out of source build and the user has a zconf.h\n\n# in their source tree...\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 129,
        "CharPositionInLine" : 23
      },
      "9" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "lib-SLProject/CMakeLists.txt" : {
      "ObjectId" : "58e693a6096b9ada6ff46b8b7f0e35b3e2465a65",
      "LastModified" : "2018-10-24T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# CMake congifuration for lib-SLProject\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------\n",
        "Line" : 209,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "#-----------------------------\n",
        "Line" : 216,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : "#==============================================================================\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 49,
    "QMAKE" : 2,
    "ANT" : 1
  },
  "ElapsedTime" : 3460
}