{
  "Repository" : "2483734",
  "Revision" : "HEAD",
  "ObjectId" : "0cf8f3c6ee6359f864ebcf5a13bd28d138d7da71",
  "CommitTime" : "2019-01-25T16:09:39Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0f343af9bb2b32f07ae43b7d7e7ab744465b8701",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#qt policy \n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# allow LOCATION to be used in build-targets we might change to $<TARGET_FILE> if we need a newer CMAKE version\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# default to finding shlibs relative to @rpath on MacOS\n",
        "Line" : 23,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#set(DESKVOX_VERSION_MAJOR 1)\n\n#set(DESKVOX_VERSION_MINOR 0)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set(PACKAGE_NAME DESKVOX)\n\n#set(PACKAGE_VERSION \"${DESKVOX_VERSION_MAJOR}.${DESKVOX_VERSION_MINOR}\")\n\n#set(PACKAGE_STRING \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\n\n#set(PACKAGE_BUGREPORT \"http://sourceforge.net/tracker/?group_id=131783&atid=722235\")\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#can't have quotes!!\n",
        "Line" : 42,
        "CharPositionInLine" : 58
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Options\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Override the default value specified in FindCUDA.cmake\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make this an option only if the variable has not otherwise been set. Allows\n\n# other CMake modules to override the default value defined here.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Make this an option only if the variable has not otherwise been set. Allows\n\n# other CMake modules to override the default value defined here.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Make this an option only if the variable has not otherwise been set. Allows\n\n# other CMake modules to override the default value defined here.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# All options referred to from DeskvoxHandleOptions have to be specified BEFORE this include,\n\n# otherwise options will not be correctly set on first cmake run\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Subdirectories\n\n#\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Additional install targets\n\n#\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Copy headers\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Copy shaders\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Copy headers\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Copy shaders\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Workaround for MSVS10 to avoid the Dialog Hell\n\n# FIXME: This could be removed with future version of CMake.\n\n#\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#if(MSVC_VERSION EQUAL 1600)\n\n#  set(DESKVOX_SLN_FILENAME \"${CMAKE_CURRENT_BINARY_DIR}/deskvox.sln\")\n\n#  if(EXISTS \"${DESKVOX_SLN_FILENAME}\")\n\n#    file(APPEND \"${DESKVOX_SLN_FILENAME}\" \"\\n# This should be regenerated!\\n\")\n\n#  endif()\n\n#endif()\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/FindBonjour.cmake" : {
      "ObjectId" : "f9b927d1567ba0fb6e712c21dc8f8ff06271018c",
      "LastModified" : "2013-07-31T09:46:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Bonjour \n\n# (See http://developer.apple.com/networking/bonjour/index.html)\n\n# By default available on MacOS X and on Linux via the Avahi package.\n\n# Check for libdns_sd\n\n#\n\n#  BONJOUR_INCLUDE_DIR - where to find dns_sd.h, etc.\n\n#  BONJOUR_LIBRARIES   - List of libraries when using ....\n\n#  BONJOUR_FOUND       - True if Bonjour libraries found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bonjour is built-in on MacOS X / iOS (i.e. available in libSystem)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The compatibility layer is needed for the Bonjour record management.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Also, the library is needed, as in Mac OS X. When found the compat\n\n# layer, also the other libraries must be in the same location.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/FindCg.cmake" : {
      "ObjectId" : "71cf91d0cbc5e4dcc8b5a0615a691f429ca14aaa",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find NVIDIA's Cg compiler, runtime libraries, and include path.\n\n# Once done this will define\n\n#\n\n# CG_FOUND =system has NVIDIA Cg and it can be used. \n\n# CG_INCLUDE_DIR = directory where cg.h resides\n\n# CG_LIBRARY = full path to libCg.so (Cg.DLL on win32)\n\n# CG_GL_LIBRARY = full path to libCgGL.so (CgGL.dll on win32)\n\n# CG_COMPILER = full path to cgc (cgc.exe on win32)\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On OSX default to using the framework version of Cg.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the include  dir\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Since we are using Cg framework, we must link to it.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Note, we use weak linking, so that it works even when Cg is not available.\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/FindFFMPEG.cmake" : {
      "ObjectId" : "921b2ecc1f1406c5d4119956d1a840037eded22b",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find FFMPEG\r\n\n# Once done this will define\r\n\n#  \r\n\n#  FFMPEG_FOUND\t\t - system has FFMPEG\r\n\n#  FFMPEG_SWSCALE_FOUND\t - FFMPEG also has SWSCALE\r\n\n#  FFMPEG_INCLUDE_DIRS\t - the include directories\r\n\n#  FFMPEG_LIBRARIES\t - link these to use FFMPEG\r\n\n#   \r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MESSAGE('FFMPEGDIR')\r\n\n#MESSAGE(${FFMPEGDIR})\r\n\n#MESSAGE(${FFMPEG_INCLUDE_DIRS})\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindFOX.cmake" : {
      "ObjectId" : "eb89c766f555c3f420ce4f56557d8b21b05eff64",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGLEW.cmake" : {
      "ObjectId" : "51f6965dc0724e8a2c97eac0b163400574b324fa",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGLUT.cmake" : {
      "ObjectId" : "a6dfcb5fbb4e88e73e83c34bf8e1844f57c896d6",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MacOS X Framework\n",
        "Line" : 30,
        "CharPositionInLine" : 9
      },
      "1" : {
        "Text" : "# Do not automatically link with glut or freeglut\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindJPEGTURBO.cmake" : {
      "ObjectId" : "6ceb46848b0add1e2b5256d7420bebd822a6b307",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindNORM.cmake" : {
      "ObjectId" : "42c2557f721ee1eaa23eb4ff0d6a81e41e59aca2",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# no default install path exists for NORM, so no standard paths given in here\n\n# NORM needs Protokit libraries, so FindModule for Protokit is called here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 20,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 21,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 22,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 5
    },
    "cmake/FindNifti.cmake" : {
      "ObjectId" : "11fa5a874d8c6e6540300ca49781d9edcc868df5",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPNG.cmake" : {
      "ObjectId" : "a1122652af4424c9a968f18fe13468929a45ef58",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPTHREAD.cmake" : {
      "ObjectId" : "588673679f4311bb7e0a03736353ecd79b16e15d",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindProtokit.cmake" : {
      "ObjectId" : "6a8a4cb59bfdd9a5b1188998531cacb58ef95a03",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# no default install path exists for protokit, so no standard paths given in here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 18,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 19,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 5
    },
    "cmake/FindPthreads.cmake" : {
      "ObjectId" : "1ae1e2cb8555078bd48d5c9d68538c8bc5e15905",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO:\n\n# Command line option -lpthread gets defined twice...\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSNAPPY.cmake" : {
      "ObjectId" : "76fb8d540334a50aa948e7f02d6e4192a26ef8bd",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindTeem.cmake" : {
      "ObjectId" : "8dc7dfc2a3d200ea98ce374026657d24f329ba77",
      "LastModified" : "2017-09-27T17:18:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindVisionaray.cmake" : {
      "ObjectId" : "5b0b79376a2a9bae899d5756b2f34ad4a4c04373",
      "LastModified" : "2019-01-25T16:09:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: sure?\n",
        "Line" : 10,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 1
    },
    "cmake/FindVolPack.cmake" : {
      "ObjectId" : "ea8c763a5de43cde2d370206189a8a26a6ffdaa5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find VolPack\n\n# Find the VolPack includes and library\n\n# This module defines\n\n#  VOLPACK_INCLUDE_DIR, where to find volpack.h\n\n#  VOLPACK_LIBRARIES, the libraries needed to use VolPack\n\n#  VOLPACK_FOUND, If false, do not try to use VolPack.\n\n# also defined, but not for general use are\n\n#  VOLPACK_LIBRARY, where to find the VolPack library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set VOLPACK_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Findcfitsio.cmake" : {
      "ObjectId" : "0bfbcaab0831b8a7f0ce4fe56ba7f79429d9ca5f",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindCfitsio.cmake - Find cfitsio library.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# CFITSIO_FOUND: TRUE iff cfitsio is found.\n\n# CFITSIO_INCLUDE_DIRS: Include directories for cfitsio.\n\n# CFITSIO_LIBRARIES: Libraries required to link cfitsio.\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# CFITSIO_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                            search for cfitsio includes, e.g: /home/include.\n\n# CFITSIO_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                            search for cfitsio libraries, e.g: /home/lib.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# CFITSIO_INCLUDE_DIR: Include directory for cfitsio, not including the\n\n#                      include directory of any dependencies.\n\n# CFITSIO_LIBRARY: cfitsio library, not including the libraries of any\n\n#                  dependencies.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Called if we failed to find cfitsio or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make results of search visible in the CMake GUI if cfitsio has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Mac OS X\n",
        "Line" : 61,
        "CharPositionInLine" : 30
      },
      "7" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 62,
        "CharPositionInLine" : 35
      },
      "8" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 67,
        "CharPositionInLine" : 26
      },
      "9" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Mark internally as found.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Only mark internal variables as advanced if we found cfitsio, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Qt4-5.cmake" : {
      "ObjectId" : "6168739eca7fe0ad7c1e6b92dceec33f85beb991",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/DeskvoxAddTarget.cmake" : {
      "ObjectId" : "05b8e12bf293bb1aa33ec74ea78ec0810d221c4b",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_link_libraries(libraries...)\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_cuda_compiles(outfiles, sources...)\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# __deskvox_process_sources(sources...)\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# __deskvox_set_target_postfixes(target)\n\n#\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_add_library(name, sources...)\n\n#\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Hide all symbols by default\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_add_plugin(name, sources...)\n\n#\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# __deskvox_add_executable(folder, name, sources...)\n\n#\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#__deskvox_set_target_postfixes(${name})\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_add_tool(name, sources...)\n\n#\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_add_test(name, sources...)\n\n#\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/modules/DeskvoxCPUID.cmake" : {
      "ObjectId" : "130ecff85aa8a351e22944bffd4df96e3733e393",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/DeskvoxConfig.cmake" : {
      "ObjectId" : "9d5581e7a232c00f375d257868e827b8f89a2ec6",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_replace_compiler_option(var, old, new)\n\n#\n\n# Replaces a compiler option or switch <old> in <var> by <new>\n\n# If <old> is not in <var>, appends <new> to <var>\n\n# Example:\n\n#\n\n#\tdeskvox_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-O2\")\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the option already is on the variable, don't add it:\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# include checks\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#check_include_file(dlfcn.h HAVE_DLFCN_H)\n\n#check_include_file(execinfo.h HAVE_EXECINFO_H)\n\n#check_include_file(stdint.h HAVE_STDINT_H)\n\n#check_include_file(pthread.h HAVE_PTHREAD_H)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# library checks\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#check_library_exists(pthread pthread_create \"\" HAVE_LIBPTHREAD)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# function checks\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# type checks\n\n#\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/DeskvoxHandleOptions.cmake" : {
      "ObjectId" : "c0b50d2dd8ee9ef4db42dbb2f60348a709a91180",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for interpreting the user defined DESKVOX_* options and\n\n# executing the appropriate CMake commands to realize the users' selections.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable warning:\n\n#\n\n# C4251: 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# C4275: non-DLL-interface classkey 'identifier' used as base for DLL-interface classkey 'identifier'\n\n# C4481: nonstandard extension used: override specifier 'keyword'\n\n# C4503: 'identifier' : decorated name length exceeded, name was truncated\n\n# C4512: 'class' : assignment operator could not be generated\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Promote to level 1 warnings:\n\n#\n\n# C4062: enumerator in switch of enum is not handled\n\n# C4146:unary minus operator applied to unsigned type, result still unsigned\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Promote to errors:\n\n#\n\n# C4238: Don't take address of temporaries\n\n# C4239: Don't bind temporaries to non-const references (Stephan's \"Evil Extension\")\n\n# C4288: For-loop scoping (this is the default)\n\n# C4346: Require \"typename\" where the standard requires it\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Disable -Wlong-long...\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/modules/DeskvoxUsePackage.cmake" : {
      "ObjectId" : "6f59b5995dd1716180a1d35463c0d12c747686a8",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# deskvox_use_package(name [INCDIRS include_directories...] [LIBS link_libraries...])\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# If no include directories are specified, check for\n\n# existing cmake variables in the following order:\n\n#\n\n#   name_INCLUDE_DIR,  NAME_INCLUDE_DIR,  name_INCLUDE_DIRS,  NAME_INCLUDE_DIRS\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# If no link libraries are specified, check for existing cmake\n\n# variables in the following order:\n\n#\n\n#   name_LIBRARIES,  NAME_LIBRARIES,  name_LIBRARY,  NAME_LIBRARY\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/compatibility/CMakeParseArguments.cmake" : {
      "ObjectId" : "7ce4c49ae5b0c5a4003d4a45a2da6e3cd38bbbff",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords> <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions for\n\n# parsing the arguments given to that macro or function.\n\n# It processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e. keywords which can be used when calling the macro without any value\n\n# following, like e.g. the OPTIONAL keyword of the install() command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g. DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this macro\n\n# which can be followed by more than one value, like e.g. the TARGETS or\n\n# FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.\n\n# These variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see whether\n\n# your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments as the\n\n# real install() command:\n\n#\n\n#   function(MY_INSTALL)\n\n#     set(options OPTIONAL FAST)\n\n#     set(oneValueArgs DESTINATION RENAME)\n\n#     set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#     cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN} )\n\n#     ...\n\n#\n\n# Assume my_install() has been called like this:\n\n#   my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the following\n\n# variables:\n\n#   MY_INSTALL_OPTIONAL = TRUE\n\n#   MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#   MY_INSTALL_DESTINATION = \"bin\"\n\n#   MY_INSTALL_RENAME = \"\" (was not used)\n\n#   MY_INSTALL_TARGETS = \"foo;bar\"\n\n#   MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#   MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n# You can the continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g. if directly after a one_value_keyword\n\n# another recognized keyword follows, this is interpreted as the beginning of\n\n# the new option.\n\n# E.g. my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION would\n\n# be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 100,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 101,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 102,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "virvo/CMakeLists.txt" : {
      "ObjectId" : "be4930f104c6059d586d596e8bc7bfe041b3432c",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/doc/Makefile" : {
      "ObjectId" : "9cf97307bb26fba0992ced831556ca819f7e513c",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Virvo's Doxygen documentation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "virvo/test/CMakeLists.txt" : {
      "ObjectId" : "0e2333976564b036fd9cd18bb394631aec4acd45",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/test/vvbonjour/CMakeLists.txt" : {
      "ObjectId" : "697979b1c5e932e417e2e1097f0b5e8d02268e8f",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/test/vvmulticast/CMakeLists.txt" : {
      "ObjectId" : "081012da877a119eaddd6cdd012aaa7e71a4f279",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/test/vvstopwatch/CMakeLists.txt" : {
      "ObjectId" : "b399c423c323d03bcd45ef8bdb296f67403dea2b",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/tools/CMakeLists.txt" : {
      "ObjectId" : "6d6d402c50c9328c12ae5b5b17f1dc73c62f6066",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/tools/vconv/CMakeLists.txt" : {
      "ObjectId" : "450b9efcb1762c898f23b839fbdd2d4ad17a4eaf",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/tools/vserver_asio/CMakeLists.txt" : {
      "ObjectId" : "2ab5cf13f7d86531a51b1f1156fe53e151cf50b0",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/tools/vview/CMakeLists.txt" : {
      "ObjectId" : "572eb2ce79edd385c7065e0220d9ad44d20f72dc",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package(GLUT_REQUIRED)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "virvo/tools/vview/vview.pro" : {
      "ObjectId" : "9ee0477bc02787459b96f77a11c25648dcef889f",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "### don't modify anything before this line ###\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### don't modify anything below this line ###\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "virvo/virvo/CMakeLists.txt" : {
      "ObjectId" : "f1d8f62b8cbb7c8c01d4eba1c4b4761b810bdabb",
      "LastModified" : "2019-01-25T16:09:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable Boost autolinking when compiling w/ msvc\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Create config file\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------------------------\n\n# Add virvo library\n\n#\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# vvcudarendertarget.inc\n\n# vvcudarendertarget-null.inc\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MSVC + CUDA: link with legacy stdio library\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "virvo/virvo/fileio/CMakeLists.txt" : {
      "ObjectId" : "0baf493e69898c993ee920ac278e3e384379d801",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/virvo/osg/CMakeLists.txt" : {
      "ObjectId" : "a60741801887f377241953bea852a0477e3bcb5f",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/virvo/rayrend/CMakeLists.txt" : {
      "ObjectId" : "74e7d2ac7b6f18438e5407e595f21f01b7541738",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Visionaray requires modern C++ language features\n\n# Try to compile a tiny program that includes some\n\n# Visionaray headers and see if we can compile them\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "virvo/virvo/rayrend/avx/CMakeLists.txt" : {
      "ObjectId" : "1e2462c5f8a0142ae8c2c6917630af52832a567e",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/virvo/rayrend/avx2/CMakeLists.txt" : {
      "ObjectId" : "43213c0966365d79ab193e443f189db3dfbacd04",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/virvo/rayrend/cuda/CMakeLists.txt" : {
      "ObjectId" : "eeecff32d9a73406f53e6b26fd08538802b0bd4f",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVC + CUDA: link with legacy stdio library\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "virvo/virvo/rayrend/fpu/CMakeLists.txt" : {
      "ObjectId" : "ab866f50cc36a9561b18a1523d3c20b43d6fd260",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/virvo/rayrend/sse2/CMakeLists.txt" : {
      "ObjectId" : "60b5409f0851d2f3ed67231bebccbedf9cf78800",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "virvo/virvo/rayrend/sse4_1/CMakeLists.txt" : {
      "ObjectId" : "a208f258506f940eed56fe75e7d1b335873bfcd7",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vox-desk-qt/CMakeLists.txt" : {
      "ObjectId" : "9044b46868f4d8fa6ea99c5c2b44f2a7373433b3",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vox-desk-qt/plugins/CMakeLists.txt" : {
      "ObjectId" : "f9be5572a14dcb88fd194b69532f3451d692ccdc",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vox-desk-qt/plugins/servermon/CMakeLists.txt" : {
      "ObjectId" : "176ddfbda3203874624289299606c3a5472c5c65",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# moc'd headers reside here\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vox-desk-qt/src/CMakeLists.txt" : {
      "ObjectId" : "c74f86bb5734aa3e55f138e1e7e21935aca9761f",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# moc'd headers reside here\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vox-desk/CMakeLists.txt" : {
      "ObjectId" : "febd4f0ab6f826fc669a9047b2c86fd7dc8c351d",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vox-desk/src/CMakeLists.txt" : {
      "ObjectId" : "99b8dbb44f7dbeae2371eab44c3e802c7e32efb9",
      "LastModified" : "2018-10-11T12:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## TODO:\n\n## public virvo headers should not include third-party library headers...\n\n##\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## silence glu(t) deprecation warnings on OS X Mavericks\n\n##\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# vvtranslines.cpp\n\n# vvtranslines.h\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 51,
    "QMAKE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1179
}