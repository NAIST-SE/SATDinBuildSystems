{
  "Repository" : "10307821",
  "Revision" : "HEAD",
  "ObjectId" : "3c5112558b0a988af21675995912fbb24854ae43",
  "CommitTime" : "2019-03-31T10:27:37Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "44d59166ebad50ddd111d1306934a2b99485081d",
      "LastModified" : "2019-02-10T21:45:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if serious proton dir is set.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set our optimization flags.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On gcc, we want some general optimalizations that improve speed a lot.\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# If we are compiling for a rasberry pi, we want to aggressively optimize for the CPU we are running on.\n\n# Note that this check only works if we are compiling directly on the pi, as it is a dirty way of checkif if we are on the pi.\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install resources, scripts, and packs to app bundle instead of system dir.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set RESOURCE_BASE_DIR on Unix so the built binary is able to find resources\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## ensure c++11 is used\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Setup SFML\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Setup OpenGl\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Some magical Win 32 stuff\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindSFML.cmake" : {
      "ObjectId" : "48873ef4adb47feee59d850709b86345b6177390",
      "LastModified" : "2015-07-18T13:35:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(SFML COMPONENTS graphics window system) // find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(SFML COMPONENTS ...)     // no specific version required\n\n#   find_package(SFML 2 COMPONENTS ...)   // any 2.x version\n\n#   find_package(SFML 2.4 COMPONENTS ...) // version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n\n# Since you have to link yourself all the SFML dependencies when you link it statically, the following\n\n# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\n\n# description below).\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n\n# to tell CMake where SFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n\n# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n\n# - SFML_FOUND:        true if all the required modules are found\n\n# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n\n# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SFML version is < 2.0\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 119,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 133,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\n",
        "Line" : 139,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 163,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 191,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\n",
        "Line" : 193,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\n",
        "Line" : 198,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\n",
        "Line" : 203,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of SFML libraries\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# No lookup in environment variables (PATH on Windows), as they may contain wrong library versions\n",
        "Line" : 243,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# sfml-system\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 255,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# sfml-network\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 272,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# sfml-window\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# find libraries\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# update the list\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# sfml-graphics\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# find libraries\n",
        "Line" : 313,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# update the list\n",
        "Line" : 317,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# sfml-audio\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# find libraries\n",
        "Line" : 326,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# update the list\n",
        "Line" : 334,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# handle errors\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# SFML version not ok\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# fatal error\n",
        "Line" : 355,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# error but continue\n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# handle success\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    }
  },
  "FileTypes" : {
    "CMAKE" : 2
  },
  "ElapsedTime" : 3298
}