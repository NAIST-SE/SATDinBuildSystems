{
  "Repository" : "4032670",
  "Revision" : "HEAD",
  "ObjectId" : "2c07df7b7a3a2cc74edee066f17c66459ddd2fe3",
  "CommitTime" : "2019-04-17T01:39:22Z",
  "Files" : {
    "dev/CMakeLists.txt" : {
      "ObjectId" : "061ba9d2b634a694184098f459d075d9b4a980cc",
      "LastModified" : "2019-04-16T23:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# source_group(Lobster FILES ${LOBSTER_SRCS})\n\n# source_group(External FILES ${EXTERNAL_SRCS})\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -fno-exceptions\n",
        "Line" : 61,
        "CharPositionInLine" : 60
      },
      "2" : {
        "Text" : "#set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT\")\n\n#set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "dev/android/build.xml" : {
      "ObjectId" : "b36a0f86e1f450d713a7d15d594a5d6e8d8641d0",
      "LastModified" : "2015-09-18T18:35:27Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "dev/emscripten/Makefile" : {
      "ObjectId" : "7502cbe3babdfc35b56f1002c8fe558b553903e4",
      "LastModified" : "2019-04-16T23:28:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Emscripten makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fast debug mode.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pure debug mode.\n\n#OPTLEVEL= -g4\n\n# Release / benchmark mode.\n\n#OPTLEVEL= -O2 -DNDEBUG\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# apparently exception catching is slow, but we need them for the moment.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add -s ASSERTIONS=2 when troubleshooting.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "dev/external/SDL/CMakeLists.txt" : {
      "ObjectId" : "e359460701c3a4f0fbc43b838203a7f6a0bdeac5",
      "LastModified" : "2017-12-15T01:56:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(FATAL_ERROR \"Prevented in-tree built. Please create a build directory outside of the SDL source code and call cmake from there\")\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# !!! FIXME: this should probably do \"MACOSX_RPATH ON\" as a target property\n\n# !!! FIXME:  for the SDL2 shared library (so you get an\n\n# !!! FIXME:  install_name (\"soname\") of \"@rpath/libSDL-whatever.dylib\"\n\n# !!! FIXME:  instead of \"/usr/local/lib/libSDL-whatever.dylib\"), but I'm\n\n# !!! FIXME:  punting for now and leaving the existing behavior. Until this\n\n# !!! FIXME:  properly resolved, this line silences a warning in CMake 3.0+.\n\n# !!! FIXME:  remove it and this comment entirely once the problem is\n\n# !!! FIXME:  properly resolved.\n\n#cmake_policy(SET CMP0042 OLD)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General settings\n\n# Edit include/SDL_version.h and change the version, then:\n\n#   SDL_MICRO_VERSION += 1;\n\n#   SDL_INTERFACE_AGE += 1;\n\n#   SDL_BINARY_AGE += 1;\n\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\n\n# if backwards compatibility has been broken,\n\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set defaults preventing destination file conflicts\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Calculate a libtool-like version number\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# General settings & flags\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for 64 or 32 bit\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Get the platform\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO: iOS?\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't mistake osx for unix\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# JavaScript does not yet have threading support, so disable pthreads when building for Emscripten.\n",
        "Line" : 139,
        "CharPositionInLine" : 40
      },
      "11" : {
        "Text" : "# Default option knobs\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Compiler info\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# VisualStudio 8.0+\n",
        "Line" : 162,
        "CharPositionInLine" : 34
      },
      "14" : {
        "Text" : "#set(CMAKE_C_FLAGS \"/ZI /WX- /\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Default flags, if not set otherwise\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Hackish, but does the trick on Win32\n",
        "Line" : 184,
        "CharPositionInLine" : 37
      },
      "17" : {
        "Text" : "# Make sure /RTC1 is disabled, otherwise it will use functions from the CRT\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Those are used for pkg-config and friends, so that the SDL2.pc, sdl2-config,\n\n# etc. are created correctly.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Emscripten toolchain has a nonempty default value for this, and the checks\n\n# in this file need to change that, so remember the original value, and\n\n# restore back to that afterwards. For check_function_exists() to work in\n\n# Emscripten, this value must be at its default value.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# We build SDL on cygwin without the UNIX emulation layer\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# General includes\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# All these ENABLED_BY_DEFAULT vars will default to ON if not specified, so\n\n#  you only need to have a platform override them if they are disabling.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set up default values for the currently supported set of subsystems:\n\n# Emscripten/Javascript does not have assembly support, a dynamic library\n\n# loading architecture, low-level CPU inspection or multithreading.\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#set_option(DEPENDENCY_TRACKING \"Use gcc -MMD -MT dependency tracking\" ON)\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\n\n# The options below are for compatibility to configure's default behaviour.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# General source files\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Do nada - use optimization settings to determine the assertion level\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Compiler option evaluation\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check for -Wall first, so later things can override pieces of it.\n",
        "Line" : 379,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# TODO: Those all seem to be quite GCC specific - needs to be\n\n# reworked for better compiler support\n",
        "Line" : 458,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# if only HAVE_ALTIVEC_H_HDR is set\n",
        "Line" : 597,
        "CharPositionInLine" : 31
      },
      "32" : {
        "Text" : "# TODO: SDL_cpuinfo.h needs to support the user's configuration wish\n\n# for MSVC - right now it is always activated\n",
        "Line" : 606,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# TODO:\n\n#else()\n\n#  if(USE_GCC OR USE_CLANG)\n\n#    list(APPEND EXTRA_CFLAGS \"-mno-sse\" \"-mno-sse2\" \"-mno-sse3\" \"-mno-mmx\")\n\n#  endif()\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define\n\n# anything.\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# needed for M_PI\n",
        "Line" : 649,
        "CharPositionInLine" : 41
      },
      "36" : {
        "Text" : "# TODO: refine the mprotect check\n",
        "Line" : 665,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Enable/disable various subsystems of the SDL library\n",
        "Line" : 721,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Haptic requires some private functions from the joystick subsystem.\n",
        "Line" : 734,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\n\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\n\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\n\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\n",
        "Line" : 744,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# General SDL subsystem options, valid for all platforms\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# CheckDummyAudio/CheckDiskAudio - valid for all platforms\n",
        "Line" : 751,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Relevant for Unix/Darwin only\n",
        "Line" : 767,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# SDL_spinlock.c Needs to be compiled in ARM mode.\n\n# There seems to be no better way currently to set the ARM mode.\n\n# see: https://issuetracker.google.com/issues/62264618\n\n# Another option would be to set ARM mode to all compiled files\n",
        "Line" : 787,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Core stuff\n",
        "Line" : 847,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#enable gles\n",
        "Line" : 854,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Platform-specific options and settings\n",
        "Line" : 885,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Hide noisy warnings that intend to aid mostly during initial stages of porting a new\n\n# project. Uncomment at will for verbose cross-compiling -I/../ path info.\n",
        "Line" : 887,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "#enable gles\n",
        "Line" : 930,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Need to check for Raspberry PI first and add platform specific compiler flags, otherwise the test for GLES fails!\n",
        "Line" : 969,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# seems to be BSD specific - limit the test to BSD only?\n",
        "Line" : 1055,
        "CharPositionInLine" : 20
      },
      "51" : {
        "Text" : "# Prevent codegen that would use the VC runtime libraries.\n",
        "Line" : 1136,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Check for DirectX\n",
        "Line" : 1143,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# xinput.h may need windows.h, but doesn't include it itself.\n",
        "Line" : 1156,
        "CharPositionInLine" : 6
      },
      "54" : {
        "Text" : "# TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\n",
        "Line" : 1187,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# requires SDL_LOADSO on Windows (IME, DX, etc.)\n",
        "Line" : 1221,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Libraries for Win32 native and MinGW\n",
        "Line" : 1264,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# TODO: in configure.in the check for timers is set on\n\n# cygwin | mingw32* - does this include mingw32CE?\n",
        "Line" : 1267,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# TODO: rework this all for proper MacOS X, iOS and Darwin support\n",
        "Line" : 1349,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# We always need these libs on macOS at the moment.\n\n# !!! FIXME: we need Carbon for some very old API calls in\n\n# !!! FIXME:  src/video/cocoa/SDL_cocoakeyboard.c, but we should figure out\n\n# !!! FIXME:  how to dump those.\n",
        "Line" : 1351,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Requires the darwin file implementation\n",
        "Line" : 1360,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# !!! FIXME: modern CMake doesn't need \"LANGUAGE C\" for Objective-C.\n",
        "Line" : 1364,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# !!! FIXME: why is COREVIDEO inside this if() block?\n",
        "Line" : 1367,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# !!! FIXME: modern CMake doesn't need \"LANGUAGE C\" for Objective-C.\n",
        "Line" : 1434,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Actually load the frameworks at the end so we don't duplicate include.\n",
        "Line" : 1440,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n",
        "Line" : 1470,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# TODO: Use FIND_PACKAGE(OpenGL) instead\n",
        "Line" : 1508,
        "CharPositionInLine" : 6
      },
      "67" : {
        "Text" : "# Dummies\n\n# configure.in does it differently:\n\n# if not have X\n\n#   if enable_X {  SDL_X_DISABLED = 1 }\n\n#   [add dummy sources]\n\n# so it always adds a dummy, without checking, if it was actually requested.\n\n# This leads to missing internal references on building, since the\n\n# src/X/*.c does not get included.\n",
        "Line" : 1524,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# results in unresolved symbols on OSX\n",
        "Line" : 1534,
        "CharPositionInLine" : 33
      },
      "69" : {
        "Text" : "# We always need to have threads and timers around\n",
        "Line" : 1556,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Append the -MMD -MT flags\n\n# if(DEPENDENCY_TRACKING)\n\n#   if(COMPILER_IS_GNUCC)\n\n#     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -MMD -MT \\$@\")\n\n#   endif()\n\n# endif()\n",
        "Line" : 1572,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Prepare the flags and remove duplicates\n",
        "Line" : 1582,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Compat helpers for the configuration files\n",
        "Line" : 1595,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# TODO: we need a Windows script, too\n",
        "Line" : 1597,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# Clean up the different lists\n",
        "Line" : 1620,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# MESSAGE(STATUS \"SDL_LIBS: ${SDL_LIBS}\")\n\n# MESSAGE(STATUS \"SDL_STATIC_LIBS: ${SDL_STATIC_LIBS}\")\n",
        "Line" : 1629,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "##### Info output #####\n",
        "Line" : 1642,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Longest option is VIDEO_X11_XSCREENSAVER = 22 characters\n\n# Get the padding\n",
        "Line" : 1659,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Ensure that the extra cflags are used at compile time\n",
        "Line" : 1685,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Always build SDLmain\n",
        "Line" : 1688,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Don't try to link with the default set of libraries.\n",
        "Line" : 1709,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# Note: Apparently, OUTPUT_NAME must really be unique; even when\n\n# CMAKE_IMPORT_LIBRARY_SUFFIX or the like are given. Otherwise\n\n# the static build may race with the import lib and one will get\n\n# clobbered, when the suffix is realized via subsequent rename.\n",
        "Line" : 1724,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# TODO: Win32 platforms keep the same suffix .lib for import and static\n\n# libraries - do we need to consider this?\n",
        "Line" : 1735,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "##### Installation targets #####\n",
        "Line" : 1742,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "##### Export files #####\n",
        "Line" : 1748,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# FreeBSD uses ${PREFIX}/libdata/pkgconfig\n",
        "Line" : 1798,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# TODO: what about the .spec file? Is it only needed for RPM creation?\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "##### Uninstall target #####\n",
        "Line" : 1809,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 88
    },
    "dev/external/SDL/cmake/macros.cmake" : {
      "ObjectId" : "96a7ce8b1406692acaf32a25d9c864da3f94cb45",
      "LastModified" : "2015-09-18T21:41:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "dev/external/SDL/cmake/sdlchecks.cmake" : {
      "ObjectId" : "e2e89a279c0d6d55715539e77bb1591a13f5c3b8",
      "LastModified" : "2017-09-24T19:16:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - JACK_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO\n",
        "Line" : 243,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Requires:\n\n# - LIBSAMPLERATE\n\n# Optional:\n\n# - LIBSAMPLERATE_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 498,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Requires:\n\n# - EGL\n\n# - PkgCheckModules\n\n# Optional:\n\n# - MIR_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Requires:\n\n# - EGL\n\n# - PkgCheckModules\n\n# Optional:\n\n# - WAYLAND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# We have to generate some protocol interface code for some various Wayland features.\n",
        "Line" : 626,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# We have to generate some protocol interface code for some unstable Wayland features.\n",
        "Line" : 682,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 725,
        "CharPositionInLine" : 14
      },
      "23" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 799,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Requires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 850,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# the android libc provides built-in support for pthreads, so no\n\n# additional linking or compile flags are necessary\n",
        "Line" : 860,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 870,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Run some tests\n",
        "Line" : 902,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 969,
        "CharPositionInLine" : 65
      },
      "32" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 986,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 1126,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Requires:\n\n# - EGL\n\n# - PkgCheckModules\n\n# Optional:\n\n# - KMSDRM_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 1156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "dev/external/SDL/include/SDL_config.h.cmake" : {
      "ObjectId" : "9befa422f10118315a276c83bb6990b5f2d1e638",
      "LastModified" : "2017-09-24T19:16:46Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2017 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable Vulkan support */",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system power support */",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Enable dynamic libsamplerate support */",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 2969
}