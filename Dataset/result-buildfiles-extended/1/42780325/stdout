{
  "Repository" : "42780325",
  "Revision" : "HEAD",
  "ObjectId" : "c0f576f5cb7b35893f62127cb7aec18f77a3bcc5",
  "CommitTime" : "2018-10-23T18:34:43Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4450761c38d3cf1d1d794712d08b9588e40b05f9",
      "LastModified" : "2018-10-23T18:34:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n# Set minimum version of CMake. Since command 'project' use\n\n# VERSION sub-option we need at least 3.0.\n\n# Note: If you use 2.6 or 2.4, God kills a kitten. Seriously.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####\n\n# Set variables:\n\n#   * PROJECT_NAME\n\n#   * PROJECT_VERSION\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####\n\n# Enables link_directories() treat paths relative\n\n# to the source dir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#####\n\n# Enables project() command manages VERSION variables.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#####\n\n# Change the default build type from Debug to Release, while still\n\n# supporting overriding the build type.\n\n#\n\n# The CACHE STRING logic here and elsewhere is needed to force CMake\n\n# to pay attention to the value of these variables.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "####\n\n# Define user options\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "####\n\n# Create the library target\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "####\n\n# Setup the optional dependencies\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Using cmake scripts and modules\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tiny-dnn provides a couple of multithreading solutions.\n\n# The user can specify to use Intel Threading Building Blocks (TBB)\n\n# or Open Multi-Processing (OpenMP) as a backend for multi threading\n\n# processing. In case that none of this libraries are required, tiny-dnn\n\n# will use the standard C++11 Thread support library.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find Intel Threading Building Blocks (TBB)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# In case that TBB is found we force to disable OpenMP since\n\n# tiny-dnn does not support mutiple multithreading backends.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#TODO: add definitions in configure\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# In case the user sets the flag USE_TBB to ON, the CMake build-tree\n\n# will require to find TBB in your system. Otherwise, the user can\n\n# set the paths to headers and libs by hand.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Find Open Multi-Processing (OpenMP)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# In case that OMP is found we force to disable Intel TBB since\n\n# tiny-dnn does not support mutiple multithreading backends.\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# In case the user sets the flag USE_OMP to ON, the CMake build-tree\n\n# will require to find OMP in your system. Otherwise, the user can\n\n# set the CMAKE_C_FLAGS and CMAKE_CXX_FLAGS by hand.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Find NNPACK: Acceleration package for neural networks on multi-core CPUs\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# In case the user sets the flag USE_NNPACK to ON, the CMake build-tree\n\n# will require to find NNPACK in your system. Otherwise, the user can\n\n# set the paths to headers and libs by hand.\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Find CBLAS: Acceleration package for linear algebra\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# In case the user sets the flag USE_CBLAS to ON, the CMake build-tree\n\n# will require to find CBLAS in your system.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Find Intel MKL: CBLAS implementation from Intel\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# In case the user sets the flag USE_INTEL_MKL to ON, the CMake build-tree\n\n# will require to find Intel MKL in your system. Otherwise, the user can\n\n# set the paths to headers and libs by hand.\n",
        "Line" : 188,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# in case that TBB and OMP are not enabled/found,\n\n# we enable standard C++11 multithread support.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#list(APPEND EXTRA_C_FLAGS -pthread)\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#add_definitions(-DCNN_HAVE_OPENCL)\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# In case the user sets the flag USE_OPENCL to ON, the CMake build-tree\n\n# will require to find OPENCL in your system. Otherwise, the user can\n\n# set the paths to headers and libs by hand.\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# In case the user sets the flag USE_LIBDNN to ON, the CMake build-tree\n\n# will require to find LibDNN in your system. Otherwise, the user can\n\n# set the paths to headers and libs by hand.\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "####\n\n# Setup the compiler options\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set c++ standard to c++14.\n\n# Note: not working on CMake 2.8. We assume that user has\n\n#       a compiler with C++14 support.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Unix\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# set Streaming SIMD Extension (SSE) instructions\n",
        "Line" : 257,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# set Advanced Vector Extensions (AVX)\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# set Advanced Vector Extensions 2 (AVX2)\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# include extra flags to the compiler\n\n# TODO: add info about those flags.\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# include specific flags for release and debug modes.\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# this is fine\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# prolly powerless with header-only project\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "####\n\n# Set compiler options\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#enable ASan\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "####\n\n# Write the config.h\n\n# TODO: replace for tiny_dnn/config.h\n\n# configure_file(cmake/Templates/tinydnn_config.h.in\n\n#               \"${PROJECT_BINARY_DIR}/tinydnn_config.h\")\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "####\n\n# Setup the cmake config files\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Set up install directories. INCLUDE_INSTALL_DIR and\n\n# CMAKECONFIG_INSTALL_DIR must not be absolute paths.\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# configure the library target\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# uninstall target\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Create *-targets.cmake file for build directory\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Install *-targets.cmake file\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Install config files\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Install headers\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Check if protobuf available\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Subdirectories for examples, testing and documentation\n\n# TODO: explain in brief about different examples, test and docs.\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "####\n\n# Configuration summary\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "526c70bcb075989b2aecb82309721bf28ffec85c",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#### Clang-tidy check\n\n#include(../cmake/clang-cxx-dev-tools.cmake)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/DownloadProject/CMakeLists.txt" : {
      "ObjectId" : "ec95ef8b2a042fb011cb48f82fb76ca7edef573e",
      "LastModified" : "2016-10-27T13:14:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prevent GoogleTest from overriding our compiler/linker options\n\n# when building with Visual Studio\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When using CMake 2.8.11 or later, header path dependencies\n\n# are automatically added to the gtest and gmock targets.\n\n# For earlier CMake versions, we have to explicitly add the\n\n# required directories to the header search path ourselves.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trivial example using gtest and gmock\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/DownloadProject/DownloadProject.cmake" : {
      "ObjectId" : "20999693161cd388fc37f00fca90b24fd7a42419",
      "LastModified" : "2016-10-27T13:14:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(download_project.cmake)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindINTELMKL.cmake" : {
      "ObjectId" : "2bc003f1515da0a4fd0ff944cf0f7167f3fe4cea",
      "LastModified" : "2018-10-23T18:34:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindNNPACK.cmake" : {
      "ObjectId" : "9177edc56d734e687849ee7413786429ccb21441",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindTBB.cmake" : {
      "ObjectId" : "0a1a5bb77ff2a603b808da11d23bbea883d6d1c3",
      "LastModified" : "2017-03-28T15:42:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The MIT License (MIT)\n\n#\n\n# Copyright (c) 2015 Justus Calvin\n\n# \n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n# \n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n# \n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# FindTBB\n\n# -------\n\n#\n\n# Find TBB include directories and libraries.\n\n#\n\n# Usage:\n\n#\n\n#  find_package(TBB [major[.minor]] [EXACT]\n\n#               [QUIET] [REQUIRED]\n\n#               [[COMPONENTS] [components...]]\n\n#               [OPTIONAL_COMPONENTS components...]) \n\n#\n\n# where the allowed components are tbbmalloc and tbb_preview. Users may modify \n\n# the behavior of this module with the following variables:\n\n#\n\n# * TBB_ROOT_DIR          - The base directory the of TBB installation.\n\n# * TBB_INCLUDE_DIR       - The directory that contains the TBB headers files.\n\n# * TBB_LIBRARY           - The directory that contains the TBB library files.\n\n# * TBB_<library>_LIBRARY - The path of the TBB the corresponding TBB library. \n\n#                           These libraries, if specified, override the \n\n#                           corresponding library search results, where <library>\n\n#                           may be tbb, tbb_debug, tbbmalloc, tbbmalloc_debug,\n\n#                           tbb_preview, or tbb_preview_debug.\n\n# * TBB_USE_DEBUG_BUILD   - The debug version of tbb libraries, if present, will\n\n#                           be used instead of the release version.\n\n#\n\n# Users may modify the behavior of this module with the following environment\n\n# variables:\n\n#\n\n# * TBB_INSTALL_DIR \n\n# * TBBROOT\n\n# * LIBRARY_PATH\n\n#\n\n# This module will set the following variables:\n\n#\n\n# * TBB_FOUND             - Set to false, or undefined, if we haven’t found, or\n\n#                           don’t want to use TBB.\n\n# * TBB_<component>_FOUND - If False, optional <component> part of TBB sytem is\n\n#                           not available.\n\n# * TBB_VERSION           - The full version string\n\n# * TBB_VERSION_MAJOR     - The major version\n\n# * TBB_VERSION_MINOR     - The minor version\n\n# * TBB_INTERFACE_VERSION - The interface version number defined in \n\n#                           tbb/tbb_stddef.h.\n\n# * TBB_<library>_LIBRARY_RELEASE - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n# * TBB_<library>_LIBRARY_DEGUG - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n#\n\n# The following varibles should be used to build and link with TBB:\n\n#\n\n# * TBB_INCLUDE_DIRS        - The include directory for TBB.\n\n# * TBB_LIBRARIES           - The libraries to link against to use TBB.\n\n# * TBB_LIBRARIES_RELEASE   - The release libraries to link against to use TBB.\n\n# * TBB_LIBRARIES_DEBUG     - The debug libraries to link against to use TBB.\n\n# * TBB_DEFINITIONS         - Definitions to use when compiling code that uses\n\n#                             TBB.\n\n# * TBB_DEFINITIONS_RELEASE - Definitions to use when compiling release code that\n\n#                             uses TBB.\n\n# * TBB_DEFINITIONS_DEBUG   - Definitions to use when compiling debug code that\n\n#                             uses TBB.\n\n#\n\n# This module will also create the \"tbb\" target that may be used when building\n\n# executables and libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################\n\n# Check the build type\n\n##################################\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##################################\n\n# Set the TBB search directories\n\n##################################\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Define search paths based on user input and environment variables\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Define the search directories based on the current platform\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the target architecture\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set the TBB search library path search suffix based on the version of VC\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add the library path search suffix for the VC independent version of TBB\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# OS X\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# TODO: Check to see which C++ library is being used by the compiler.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# The default C++ library on OS X 10.9 and later is libc++\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Linux\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO: Check compiler version to see the suffix should be <arch>/gcc4.1 or\n\n#       <arch>/gcc4.1. For now, assume that the compiler is more recent than\n\n#       gcc 4.4.x or later.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "##################################\n\n# Find the TBB include dir\n\n##################################\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "##################################\n\n# Set version strings\n\n##################################\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "##################################\n\n# Find TBB components\n\n##################################\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Find each component\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Search for the libraries\n",
        "Line" : 211,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Mark internal variables as advanced\n",
        "Line" : 238,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "##################################\n\n# Set compile flags and libraries\n\n##################################\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "##################################\n\n# Create targets\n\n##################################\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/Modules/cotire.cmake" : {
      "ObjectId" : "4afd7fa164364feb05c2a86c57b4ad4a0f628982",
      "LastModified" : "2017-05-08T15:00:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2016 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 441,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 452,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 454,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 472,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 484,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# platform specific flags\n",
        "Line" : 495,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# default include dirs\n",
        "Line" : 530,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 537,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 549,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# target include directories\n",
        "Line" : 561,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 573,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 581,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 677,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# target export define symbol\n",
        "Line" : 681,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 686,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# target compile definitions\n",
        "Line" : 695,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 704,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 713,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 729,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 970,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1014,
        "CharPositionInLine" : 3
      },
      "54" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1022,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1025,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# header is outside\n",
        "Line" : 1039,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1050,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# check header file extension\n",
        "Line" : 1060,
        "CharPositionInLine" : 1
      },
      "59" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1078,
        "CharPositionInLine" : 3
      },
      "61" : {
        "Text" : "# GCC like output\n",
        "Line" : 1087,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1103,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1106,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1108,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# then separate lines\n",
        "Line" : 1110,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1113,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1131,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# update stack\n",
        "Line" : 1141,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1157,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1159,
        "CharPositionInLine" : 5
      },
      "71" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1166,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1175,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1187,
        "CharPositionInLine" : 5
      },
      "74" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1225,
        "CharPositionInLine" : 1
      },
      "75" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1241,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1392,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# create empty log file\n",
        "Line" : 1433,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1449,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1486,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# append to list\n",
        "Line" : 1495,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1498,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1502,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# append to list\n",
        "Line" : 1507,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1513,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1520,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# append to list\n",
        "Line" : 1525,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1528,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1533,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "# append to list\n",
        "Line" : 1542,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1545,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1549,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# append to list\n",
        "Line" : 1554,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1560,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1579,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# append to list\n",
        "Line" : 1590,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1597,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1604,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# append to list\n",
        "Line" : 1613,
        "CharPositionInLine" : 3
      },
      "99" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1616,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1624,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# append to list\n",
        "Line" : 1636,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1643,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1650,
        "CharPositionInLine" : 3
      },
      "104" : {
        "Text" : "# append to list\n",
        "Line" : 1661,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1670,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1687,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# append to list\n",
        "Line" : 1695,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1708,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# append to list\n",
        "Line" : 1710,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1713,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1718,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# append to list\n",
        "Line" : 1723,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1726,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1730,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# append to list\n",
        "Line" : 1736,
        "CharPositionInLine" : 3
      },
      "117" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1739,
        "CharPositionInLine" : 3
      },
      "118" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1745,
        "CharPositionInLine" : 3
      },
      "119" : {
        "Text" : "# append to list\n",
        "Line" : 1753,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1759,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1766,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# append to list\n",
        "Line" : 1768,
        "CharPositionInLine" : 5
      },
      "123" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1771,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1776,
        "CharPositionInLine" : 3
      },
      "125" : {
        "Text" : "# append to list\n",
        "Line" : 1785,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1791,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1798,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# append to list\n",
        "Line" : 1800,
        "CharPositionInLine" : 5
      },
      "129" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1803,
        "CharPositionInLine" : 5
      },
      "130" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1840,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1856,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1860,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1867,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1870,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1909,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1928,
        "CharPositionInLine" : 1
      },
      "137" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1971,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1982,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1985,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2056,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2061,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2064,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2067,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2070,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2102,
        "CharPositionInLine" : 1
      },
      "146" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2106,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2111,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2128,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2141,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2166,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2171,
        "CharPositionInLine" : 3
      },
      "152" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2178,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2181,
        "CharPositionInLine" : 1
      },
      "154" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2186,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# generate target script file\n",
        "Line" : 2209,
        "CharPositionInLine" : 1
      },
      "156" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2214,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2228,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2237,
        "CharPositionInLine" : 3
      },
      "159" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2239,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2243,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2252,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2274,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2279,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2286,
        "CharPositionInLine" : 3
      },
      "165" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2292,
        "CharPositionInLine" : 3
      },
      "166" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2299,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2302,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2309,
        "CharPositionInLine" : 1
      },
      "169" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2316,
        "CharPositionInLine" : 1
      },
      "170" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2318,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2382,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2393,
        "CharPositionInLine" : 3
      },
      "173" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2404,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2412,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2416,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2420,
        "CharPositionInLine" : 3
      },
      "177" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2442,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2448,
        "CharPositionInLine" : 3
      },
      "179" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2457,
        "CharPositionInLine" : 3
      },
      "180" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2465,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2495,
        "CharPositionInLine" : 1
      },
      "182" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2513,
        "CharPositionInLine" : 1
      },
      "183" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2518,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2543,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2552,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2561,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2568,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2743,
        "CharPositionInLine" : 3
      },
      "189" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2747,
        "CharPositionInLine" : 3
      },
      "190" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2761,
        "CharPositionInLine" : 3
      },
      "191" : {
        "Text" : "# use all available cores\n",
        "Line" : 2781,
        "CharPositionInLine" : 3
      },
      "192" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2806,
        "CharPositionInLine" : 1
      },
      "193" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2813,
        "CharPositionInLine" : 1
      },
      "194" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2823,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2828,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2830,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2839,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2849,
        "CharPositionInLine" : 4
      },
      "199" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2856,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2860,
        "CharPositionInLine" : 1
      },
      "201" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2888,
        "CharPositionInLine" : 2
      },
      "202" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2893,
        "CharPositionInLine" : 4
      },
      "203" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2908,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2929,
        "CharPositionInLine" : 3
      },
      "205" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2937,
        "CharPositionInLine" : 3
      },
      "206" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2960,
        "CharPositionInLine" : 4
      },
      "207" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2972,
        "CharPositionInLine" : 1
      },
      "208" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2982,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2985,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2990,
        "CharPositionInLine" : 2
      },
      "211" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3000,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# generate unity target\n",
        "Line" : 3007,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# depend on original target's automoc target, if it exists\n",
        "Line" : 3014,
        "CharPositionInLine" : 2
      },
      "214" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 3020,
        "CharPositionInLine" : 3
      },
      "215" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3028,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3038,
        "CharPositionInLine" : 3
      },
      "217" : {
        "Text" : "# copy output name\n",
        "Line" : 3063,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3071,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# copy compile features\n",
        "Line" : 3083,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3088,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3096,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3107,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3110,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3116,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3132,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3140,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3145,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3169,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# resolve alias\n",
        "Line" : 3181,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3189,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3205,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3210,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3259,
        "CharPositionInLine" : 4
      },
      "234" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3321,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3408,
        "CharPositionInLine" : 1
      },
      "236" : {
        "Text" : "# include target script if available\n",
        "Line" : 3420,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3422,
        "CharPositionInLine" : 2
      },
      "238" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3438,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3458,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3461,
        "CharPositionInLine" : 3
      },
      "241" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3480,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3483,
        "CharPositionInLine" : 3
      },
      "243" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3551,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3554,
        "CharPositionInLine" : 3
      },
      "245" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3577,
        "CharPositionInLine" : 1
      },
      "246" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3614,
        "CharPositionInLine" : 3
      },
      "247" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3648,
        "CharPositionInLine" : 2
      },
      "248" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3662,
        "CharPositionInLine" : 3
      },
      "249" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3669,
        "CharPositionInLine" : 1
      },
      "250" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3722,
        "CharPositionInLine" : 1
      },
      "251" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3794,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3958,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 253
    },
    "cmake/clang-cxx-dev-tools.cmake" : {
      "ObjectId" : "f58099ec7e048b44e3512e793e60fa52102ca7ab",
      "LastModified" : "2017-07-22T17:50:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional target to perform clang-format/clang-tidy run\n\n# Requires clang-format and clang-tidy\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adding clang-format target if executable is found\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adding clang-tidy target if executable is found\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/protoc.cmake" : {
      "ObjectId" : "fe4b2675257523dc9887a9d518361de4ead7c194",
      "LastModified" : "2017-05-08T15:00:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to prepare caffe.pb.cc and caffe.pb.h\n\n#\n\n# - If we can't find Protobuf, do nothing.\n\n# - If we have Protobuf and already have caffe.pb.cc/h under io/caffe,\n\n#   we just set PROTO_CPP_AVAILABLE variable.\n\n# - If we have Protobuf and Protoc but haven't caffe.pb.cc/h,\n\n#   we'll add additional target to generate these files (generated_proto),\n\n#   and set PROTO_CPP_AVAILABLE AND PROTO_CPP_GENERATE variables.\n\n#\n\n#   Since protoc will be invoked at the compile time (not the configuration time),\n\n#   we must add add_dependencies(xxx generated_proto) line to ensure\n\n#   our target needs generated proto files to build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As of Ubuntu 14.04 protoc is no longer a part of libprotobuf-dev package\n\n# and should be installed separately as in: sudo apt-get install protobuf-compiler\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that this line doesn't invoke protoc at configure time\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# We need to invoke the copy after protoc compile finished\n",
        "Line" : 32,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "cmake/summary.cmake" : {
      "ObjectId" : "2b8f9dc04358d844e341ccd20e1d01184dc3f2d5",
      "LastModified" : "2018-10-23T18:34:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# TinyDNN status report function.\n\n# Automatically align right column and selects text based on condition.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Function merging lists of compiler flags to single string.\n\n# Usage:\n\n#   tinydnn_merge_flag_lists(out_variable <list1> [<list2>] [<list3>] ...)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "####\n\n# Prints accumulated tiny-dnn configuration summary\n\n# Usage:\n\n#   tinydnn_print_configuration_summary()\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "78f8e649ca439a465b77bb9e4fe598a3cc13dbd5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ========= Doxygen docs =========\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/Makefile" : {
      "ObjectId" : "a7e39f6e06cb3ac532d7f16bad47ea5b3e1a4d53",
      "LastModified" : "2017-05-08T15:00:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "092046a8c3f30a12f007b70e8a24a26a002c31f7",
      "LastModified" : "2018-10-21T10:12:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/caffe_converter/CMakeLists.txt" : {
      "ObjectId" : "1af142f5b6620f8d49004217690d9b9fd0cc8e35",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate CPP file for connexion between protobuf and tiny_dnn \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the executable (main cpp + protobuf generated caffe.pb.h/caffe.pb.cc )\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the include dir (binary for caffe.pb.h, protobuf and location of tiny-dnn source)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link with protobuf \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set C++11 mode \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "bee8d02fe8a7e09f4edf45e9b1772b393f2d5154",
      "LastModified" : "2018-08-27T08:31:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# workaround for https://gitlab.kitware.com/cmake/cmake/issues/8774\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Clang-tidy check\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1980
}