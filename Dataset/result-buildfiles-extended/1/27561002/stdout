{
  "Repository" : "27561002",
  "Revision" : "HEAD",
  "ObjectId" : "95bad6429b8b6a70d971e1985ab946cd2361d668",
  "CommitTime" : "2019-04-03T20:04:11Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "92f356fc29f91dcb1a9d0c778d3e9e628340097b",
      "LastModified" : "2018-12-09T09:17:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2016. Hans J. Johnson <hans-johnson@uiowa.edu>\n\n# Copyright 2017-2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Hans J. Johnson <hans-johnson@uiowa.edu>\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMP0012: if() recognizes numbers and booleans\n\n# CMP0028: :: in target names\n\n# CMP0042: MACOS_RPATH\n\n# CMP0048: allow VERSION in project()\n\n# CMP0051: list TARGET_OBJECTS in SOURCES property\n\n# CMP0054: no more de-referencing of \"expr\" in if() statements\n\n# CMP0057: if IN_LIST\n\n# CMP0074: XXX_ROOT variables for find_package(XXX)\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# 3.10 instead of 3.3 due to CUDA support\n",
        "Line" : 25,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# target_link_libraries mixed signatures\n",
        "Line" : 29,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# target_link_libraries mixed signatures\n",
        "Line" : 31,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# ==============================================================================\n\n# Internal helper variables\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ==============================================================================\n\n# Macro definitions\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==============================================================================\n\n# Get the version now, so that we can set it when creating the project\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# _full_version is of the form: v0.4.03-109-gf9c0f56-dirty\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# ==============================================================================\n\n# Create the BART project\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#==============================================================================\n\n# Options\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# NB: must be before compiler flags since we might enable CXX or CUDA\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#==============================================================================\n\n# Setup compiler flags\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# http://stackoverflow.com/questions/24840030/forcing-c99-in-cmake-to-use-for-loop-initial-declaration\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --- Provide good defaults for searching for packages (i.e. ismrmrd)\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# --- Mac specific setup options\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Look for MacPorts only as Homebrew users do not require any particular setup\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# ==============================================================================\n\n# Set compiler flags\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ==============================================================================\n\n# Find a BLAS-capable library\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "##======================================================================\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## ========== Process build_targets.mk\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Convert file contents into a CMake list (where each element in the list\n\n# is one line of the file)\n\n#\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Create a new variable called ${BLD_KEY}\n",
        "Line" : 236,
        "CharPositionInLine" : 55
      },
      "26" : {
        "Text" : "## message(STATUS \"KEY:${BLD_KEY}:    VALUE:${${BLD_KEY}}:\")\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# These files need to be compiled separately since they might contain\n\n# Python code\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# No need to add any include paths as the required code was copied into UTrace.cc from Siemens' IDEA framework\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# ------------------------------------\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Include recon libraries exported from the SDK CMake build\n",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Include Orchestra SDK build configuration\n",
        "Line" : 353,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# ------------------------------------\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Actually we do nothing here, Gagdetron will provide the vendor_log function\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# FIXME: need to check which libraries are actually required\n",
        "Line" : 389,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "## Generate combined programs\n\n#==============================================\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#==============================================\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# ensure that src/misc/misc.c will be compiled with logging backend support\n\n# but *ONLY* for the bartmain target\n",
        "Line" : 460,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#==============================================\n\n# TODO: Matlab code\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#==============================================\n\n# Testing code\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "##Testing broke in 2c8c1a27 when adding a test.\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "## Include integration testing\n\n#if(NOT BART_MEMONLY_CFL)\n\n#  add_subdirectory(tests)\n\n#endif()\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Packaging stuff (deb, rpm, windows installer)\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 49
    },
    "Makefile" : {
      "ObjectId" : "8139798f9dffd4d5840a6ac8815920b2e9eaae10",
      "LastModified" : "2019-04-01T08:33:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 2013-2015. The Regents of the University of California.\n\n# Copyright 2015-2018. Martin Uecker <martin.uecker@med.uni-goettingen.de>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we have a two stage Makefile\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# silent make\n\n#MAKEFLAGS += --silent\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# clear out all implicit rules and variables\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# use for parallel make\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# as the defaults changed on most Linux distributions\n\n# explicitly specify non-deterministic archives to not break make\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Paths\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Automatic dependency generation\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compilation flags\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# for symbols in backtraces\n",
        "Line" : 106,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# openblas\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cuda\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# acml\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# mkl\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# fftw\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Matlab\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ISMRM\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Main build targets are defined in build_targets.mk so that both CMake and Make can use the same definitions\n\n# set values for TBASE TFLP TNUM TRECO TCALIB TMRI TSIM TIO in build_targets.mk\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# clang\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# cuda\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# sm_20 no longer supported in CUDA 9\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#NVCCFLAGS = -Xcompiler -fPIC -Xcompiler -fopenmp -O3  -I$(srcdir)/\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# OpenMP\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# BLAS/LAPACK\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# png\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# fftw\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Matlab\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ISMRM\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Enable in-memory CFL files\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Only allow in-memory CFL files (ie. disable support for all other files)\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Logging backends\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# change for static linking\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# work around fortran problems with static linking\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Modules\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# sort BTARGETS after everything is included\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# special targets\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# implicit rules\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# we add the rm because intermediate files are not deleted\n\n# automatically for some reason\n\n# (but it produces errors for parallel builds for make all)\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\trm $(srcdir)/$@.o\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# linker script version - does not work on MacOS X\n\n#\t$(CC) $(LDFLAGS) -Wl,-Tutests/utests.ld $(CFLAGS) -o $@ $+ $(FFTW_L) $(CUDA_L) $(BLAS_L) -lm\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# automatic tests\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# system tests\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# unit tests\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# define space to faciliate running executables\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# MAKESTAGE\n",
        "Line" : 556,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# generate release tar balls (identical to github)\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# symbol table\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "cmake/BARTFindBLASlib.cmake" : {
      "ObjectId" : "ab7470ea1000c2df94d5c3e241f2763a5115e289",
      "LastModified" : "2018-08-20T12:14:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##==============================================================\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the user specifies LINALG_VENDOR, make sure we find what he wants\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## Switch based on the linear algebra optimized library to \n\n## use.  Note that the first library successfully found\n\n## will be used \n\n##\n\n## -*-*- Try with only a BLAS library first if BART_NO_LAPACKE is set\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## -*-*- Try AMD BLIS/libFlame next\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## -*-*- Try OpenBLAS next\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##\n\n## -*-*- Try ATLAS version next\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##\n\n## -*-*- Try Generic LAPACKE version Last\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#NOTE: By specifying Fortran here, linking to lapack becomes easier\n\n# See https://blog.kitware.com/fortran-for-cc-developers-made-easier-with-cmake/\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "## Only very new versions of LAPACK (> 3.5.0) have built in support\n\n## for cblas and lapacke.  This method is not very robust to older\n\n## versions of lapack that might be able to be supported.\n\n## It is know to work local builds\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Fix weird error when compiling on Mac...\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##\n\n## -*-*- Finally, set include_directories -*-*-*\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/FindATLAS.cmake" : {
      "ObjectId" : "3b5bb85c1257df0a2324b33b41b4870a19450877",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindATLAS\n\n# -------------\n\n#\n\n# Find ATLAS include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(ATLAS\n\n#     [REQUIRED]             # Fail with error if ATLAS is not found\n\n#     )\n\n#\n\n#   [OPTIONAL]  set(ATLAS_REQUIRE_THREADED [TRUE|FALSE]) to find threaded versions of the libraries\n\n#\n\n# This module defines::\n\n#\n\n#   ATLAS_FOUND            - set to true if the library is found\n\n#   ATLAS_INCLUDE_DIRS     - list of required include directories\n\n#   ATLAS_LIBRARIES        - list of libraries to be linked\n\n#   ATLAS_VERSION_MAJOR    - major version number\n\n#   ATLAS_VERSION_MINOR    - minor version number\n\n#   ATLAS_VERSION_PATCH    - patch version number\n\n#   ATLAS_VERSION_STRING   - version number as a string (ex: \"0.2.18\")\n\n#\n\n#\n\n# This module reads hints about search locations from variables\n\n# (either CMake variables or environment variables)::\n\n#\n\n#   ATLAS_ROOT             - Preferred installation prefix for ATLAS\n\n#   ATLAS_DIR              - Preferred installation prefix for ATLAS\n\n#\n\n#\n\n#   ATLAS::ATLAS           - Imported target for the ATLAS library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Copyright 2016 Hans J. Johnson <hans-johnson@uiowa.edu>\n\n# Copyright 2018 Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\")\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# ==============================================================================\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# homebrew on mac\n",
        "Line" : 55,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "#openSUSE 13.2 (Harlequin)\n\n#openSUSE 13.2 (Harlequin)\n\n#openSUSE 13.2 (Harlequin)\n\n#openSUSE 13.2 (Harlequin)\n",
        "Line" : 62,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "#openSUSE 13.2 (Harlequin)\n\n#openSUSE 13.2 (Harlequin)\n\n#openSUSE 13.2 (Harlequin)\n\n#openSUSE 13.2 (Harlequin)\n",
        "Line" : 67,
        "CharPositionInLine" : 17
      },
      "5" : {
        "Text" : "# ==============================================================================\n\n# Prepare some helper variables\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## First try to find ATLAS with NO_MODULE,\n\n## As of 20160706 version 0.2.18 there is limited cmake support for ATLAS\n\n## that is not as complete as this version, if found, use it\n\n## to identify the ATLAS_VERSION_STRING and improve searching.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use cmake conventional naming\n",
        "Line" : 98,
        "CharPositionInLine" : 23
      },
      "9" : {
        "Text" : "# ==============================================================================\n\n### First search for headers\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ==============================================================================\n\n### Second, search for libraries\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# WARNING: We may not be able to determine the version of some ATLAS\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ==============================================================================\n\n# Checks 'REQUIRED', 'QUIET' and versions.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#NOT MSVC\n",
        "Line" : 190,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/FindBOpenMP.cmake" : {
      "ObjectId" : "4324ff3f6b1d225d35cfeb15b4831b640bba345b",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Taken from https://github.com/Kitware/CMake for CMake 3.12\n\n#\n\n# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindBOpenMP\n\n# ----------\n\n#\n\n# Finds OpenMP support\n\n#\n\n# This module can be used to detect OpenMP support in a compiler.  If\n\n# the compiler supports OpenMP, the flags required to compile with\n\n# OpenMP support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support OpenMP.\n\n#\n\n# Variables\n\n# ^^^^^^^^^\n\n#\n\n# The module exposes the components ``C``, ``CXX``, and ``Fortran``.\n\n# Each of these controls the various languages to search OpenMP support for.\n\n#\n\n# Depending on the enabled components the following variables will be set:\n\n#\n\n# ``OpenMP_FOUND``\n\n#   Variable indicating that OpenMP flags for all requested languages have been found.\n\n#   If no components are specified, this is true if OpenMP settings for all enabled languages\n\n#   were detected.\n\n# ``OpenMP_VERSION``\n\n#   Minimal version of the OpenMP standard detected among the requested languages,\n\n#   or all enabled languages if no components were specified.\n\n#\n\n# This module will set the following variables per language in your\n\n# project, where ``<lang>`` is one of C, CXX, or Fortran:\n\n#\n\n# ``OpenMP_<lang>_FOUND``\n\n#   Variable indicating if OpenMP support for ``<lang>`` was detected.\n\n# ``OpenMP_<lang>_FLAGS``\n\n#   OpenMP compiler flags for ``<lang>``, separated by spaces.\n\n#\n\n# For linking with OpenMP code written in ``<lang>``, the following\n\n# variables are provided:\n\n#\n\n# ``OpenMP_<lang>_LIB_NAMES``\n\n#   :ref:`;-list <CMake Language Lists>` of libraries for OpenMP programs for ``<lang>``.\n\n# ``OpenMP_<libname>_LIBRARY``\n\n#   Location of the individual libraries needed for OpenMP support in ``<lang>``.\n\n# ``OpenMP_<lang>_LIBRARIES``\n\n#   A list of libraries needed to link with OpenMP code written in ``<lang>``.\n\n#\n\n# Additionally, the module provides :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``OpenMP::OpenMP_<lang>``\n\n#   Target for using OpenMP from ``<lang>``.\n\n#\n\n# Specifically for Fortran, the module sets the following variables:\n\n#\n\n# ``OpenMP_Fortran_HAVE_OMPLIB_HEADER``\n\n#   Boolean indicating if OpenMP is accessible through ``omp_lib.h``.\n\n# ``OpenMP_Fortran_HAVE_OMPLIB_MODULE``\n\n#   Boolean indicating if OpenMP is accessible through the ``omp_lib`` Fortran module.\n\n#\n\n# The module will also try to provide the OpenMP version variables:\n\n#\n\n# ``OpenMP_<lang>_SPEC_DATE``\n\n#   Date of the OpenMP specification implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION_MAJOR``\n\n#   Major version of OpenMP implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION_MINOR``\n\n#   Minor version of OpenMP implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION``\n\n#   OpenMP version implemented by the ``<lang>`` compiler.\n\n#\n\n# The specification date is formatted as given in the OpenMP standard:\n\n# ``yyyymm`` where ``yyyy`` and ``mm`` represents the year and month of\n\n# the OpenMP specification implemented by the ``<lang>`` compiler.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cray compiler activate OpenMP with -h omp, which is enabled by default.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# If we know the correct flags, use those\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Fall back to reasonable default tries otherwise\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# string(APPEND BOPENMP_FLAGS_TEST \" ${BOpenMP_VERBOSE_COMPILE_OPTIONS}\")\n",
        "Line" : 180,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "cmake/FindBPython.cmake" : {
      "ObjectId" : "fc2ca325d9cf8b3ac3a2d125ced3ce88590f3186",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\n# FindBPython\n# ----------\n\n# Find Python interpreter, compiler and development environment (include\n# directories and libraries).\n\n# Three components are supported:\n\n# * ``Interpreter``: search for Python interpreter.\n# * ``Compiler``: search for Python compiler. Only offered by IronPython.\n# * ``Development``: search for development artifacts (include directories and\n#   libraries).\n\n# If no ``COMPONENTS`` is specified, ``Interpreter`` is assumed.\n\n# To ensure consistent versions between components ``Interpreter``, ``Compiler``\n# and ``Development``, specify all components at the same time::\n\n#   find_package (BPython COMPONENTS Interpreter Development)\n\n# This module looks preferably for version 3 of Python. If not found, version 2\n# is searched.\n# To manage concurrent versions 3 and 2 of Python, use :module:`FindBPython3` and\n# :module:`FindBPython2` modules rather than this one.\n\n# Imported Targets\n# ^^^^^^^^^^^^^^^^\n\n# This module defines the following :ref:`Imported Targets <Imported Targets>`:\n\n# ``Python::Interpreter``\n#   Python interpreter. Target defined if component ``Interpreter`` is found.\n# ``Python::Compiler``\n#   Python compiler. Target defined if component ``Compiler`` is found.\n# ``Python::Python``\n#   Python library. Target defined if component ``Development`` is found.\n\n# Result Variables\n# ^^^^^^^^^^^^^^^^\n\n# This module will set the following variables in your project\n# (see :ref:`Standard Variable Names <CMake Developer Standard Variable Names>`):\n\n# ``Python_FOUND``\n#   System has the Python requested components.\n# ``Python_Interpreter_FOUND``\n#   System has the Python interpreter.\n# ``Python_EXECUTABLE``\n#   Path to the Python interpreter.\n# ``Python_INTERPRETER_ID``\n#   A short string unique to the interpreter. Possible values include:\n#     * Python\n#     * ActivePython\n#     * Anaconda\n#     * Canopy\n#     * IronPython\n# ``Python_STDLIB``\n#   Standard platform independent installation directory.\n\n#   Information returned by\n#   ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=True)``.\n# ``Python_STDARCH``\n#   Standard platform dependent installation directory.\n\n#   Information returned by\n#   ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=True)``.\n# ``Python_SITELIB``\n#   Third-party platform independent installation directory.\n\n#   Information returned by\n#   ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=False)``.\n# ``Python_SITEARCH``\n#   Third-party platform dependent installation directory.\n\n#   Information returned by\n#   ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=False)``.\n# ``Python_Compiler_FOUND``\n#   System has the Python compiler.\n# ``Python_COMPILER``\n#   Path to the Python compiler. Only offered by IronPython.\n# ``Python_COMPILER_ID``\n#   A short string unique to the compiler. Possible values include:\n#     * IronPython\n# ``Python_Development_FOUND``\n#   System has the Python development artifacts.\n# ``Python_INCLUDE_DIRS``\n#   The Python include directories.\n# ``Python_LIBRARIES``\n#   The Python libraries.\n# ``Python_LIBRARY_DIRS``\n#   The Python library directories.\n# ``Python_RUNTIME_LIBRARY_DIRS``\n#   The Python runtime library directories.\n# ``Python_VERSION``\n#   Python version.\n# ``Python_VERSION_MAJOR``\n#   Python major version.\n# ``Python_VERSION_MINOR``\n#   Python minor version.\n# ``Python_VERSION_PATCH``\n#   Python patch version.\n\n# Hints\n# ^^^^^\n\n# ``Python_ROOT_DIR``\n#   Define the root directory of a Python installation.\n\n# ``Python_USE_STATIC_LIBS``\n#   * If not defined, search for shared libraries and static libraries in that\n#     order.\n#   * If set to TRUE, search **only** for static libraries.\n#   * If set to FALSE, search **only** for shared libraries.\n\n# Commands\n# ^^^^^^^^\n\n# This module defines the command ``Python_add_library`` which have the same\n# semantic as :command:`add_library` but take care of Python module naming rules\n# (only applied if library is of type ``MODULE``) and add dependency to target\n# ``Python::Python``::\n\n#   Python_add_library (my_module MODULE src1.cpp)\n\n# If library type is not specified, ``MODULE`` is assumed.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# iterate over versions in quiet and NOT required modes to avoid multiple\n\n# \"Found\" messages and prematurally failure.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# clean-up some CACHE variables to ensure look-up restart from scratch\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# call again validation command to get \"Found\" or error message\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/FindCUDAlibs.cmake" : {
      "ObjectId" : "e4efc1993f8717d1e597934123acac474dd76ec1",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDAlibs\n\n# -------------\n\n#\n\n# Find CUDA include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(CUDAlibs\n\n#     [REQUIRED]             # Fail with error if LAPACKE is not found\n\n#     [COMPONENTS <comp>...] # List of components to look for\n\n#     )                      # Not specifying any components is equivalent to\n\n#                              looking for the BASIC libraries\n\n#\n\n# Valid names for COMPONENTS libraries are::\n\n#\n\n#   ALL         - Find all libraries\n\n#   BASIC       - Equivalent to CUDART;CUBLAS;CUFFT\n\n#\n\n#   CUDART      - CUDA RT library\n\n#   CUBLAS      - CUDA BLAS library\n\n#   CUFFT       - CUDA FFT library\n\n#   CUFFTW      - CUDA FFTW library\n\n#   CUPTI       - CUDA Profiling Tools Interface library.\n\n#   CURAND      - CUDA Random Number Generation library.\n\n#   CUSOLVER    - CUDA Direct Solver library.\n\n#   CUSPARSE    - CUDA Sparse Matrix library.\n\n#   NPP         - NVIDIA Performance Primitives lib.\n\n#   NPPC        - NVIDIA Performance Primitives lib (core).\n\n#   NPPI        - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPIAL      - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPICC      - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPICOM     - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPIDEI     - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPIF       - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPIG       - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPIM       - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPIST      - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPISU      - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPITC      - NVIDIA Performance Primitives lib (image processing).\n\n#   NPPS        - NVIDIA Performance Primitives lib (signal processing).\n\n#   NVBLAS      - NVIDIA BLAS library\n\n#\n\n#  Not specifying COMPONENTS is identical to choosing ALL\n\n#\n\n# This module reads hints about search locations from variables\n\n# (either CMake variables or environment variables)::\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR\n\n#   CUDA_ROOT\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are defined if required::\n\n#\n\n#   CUDAlibs::CUDART         - Imported target for the CUDA RT library\n\n#   CUDAlibs::CUBLAS         - Imported target for the CUDA cublas library\n\n#   CUDAlibs::CUFFT          - Imported target for the CUDA cufft library\n\n#   CUDAlibs::CUFFTW         - Imported target for the CUDA cufftw library\n\n#   CUDAlibs::CUPTI          - Imported target for the CUDA cupti library\n\n#   CUDAlibs::CURAND         - Imported target for the CUDA curand library\n\n#   CUDAlibs::CUSOLVER       - Imported target for the CUDA cusolver library\n\n#   CUDAlibs::CUSPARSE       - Imported target for the CUDA cusparse library\n\n#   CUDAlibs::NPP            - Imported target for the CUDA npp library\n\n#   CUDAlibs::NPPC           - Imported target for the CUDA nppc library\n\n#   CUDAlibs::NPPI           - Imported target for the CUDA nppi library\n\n#   CUDAlibs::NPPIAL         - Imported target for the CUDA nppial library\n\n#   CUDAlibs::NPPICC         - Imported target for the CUDA nppicc library\n\n#   CUDAlibs::NPPICOM        - Imported target for the CUDA nppicom library\n\n#   CUDAlibs::NPPIDEI        - Imported target for the CUDA nppidei library\n\n#   CUDAlibs::NPPIF          - Imported target for the CUDA nppif library\n\n#   CUDAlibs::NPPIG          - Imported target for the CUDA nppig library\n\n#   CUDAlibs::NPPIM          - Imported target for the CUDA nppim library\n\n#   CUDAlibs::NPPIST         - Imported target for the CUDA nppist library\n\n#   CUDAlibs::NPPISU         - Imported target for the CUDA nppisu library\n\n#   CUDAlibs::NPPITC         - Imported target for the CUDA nppitc library\n\n#   CUDAlibs::NPPS           - Imported target for the CUDA npps library\n\n#   CUDAlibs::NVBLAS         - Imported target for the CUDA nvblas library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Copyright 2018 Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\")\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# ==============================================================================\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# Prepare some helper variables\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# List dependent libraries for relevant targets\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Inspired by FindBoost.cmake\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ------------------------------------------------------------------------\n",
        "Line" : 231,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/FindFFTW.cmake" : {
      "ObjectId" : "f2270194b56ee98a82c7f9a2373cafb372acdd8f",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindFFTW\n\n# -------------\n\n#\n\n# Find FFTW3 include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [REQUIRED]             # Fail with error if FFTW is not found\n\n#     [VERSION [2,3]]        # Version of FFTW to look for (only considers major version)\n\n#     [COMPONENTS <libs>...] # List of libraries to look for\n\n#     )\n\n#\n\n# Valid names for COMPONENTS libraries are::\n\n#\n\n#   ALL                      - Find all libraries\n\n#   FFTW                     - Find a FFTW (double) library\n\n#   FFTW_MT                  - Find a FFTW multi-threaded (double) library\n\n#   FFTWF                    - Find a FFTW (single) library\n\n#   FFTWF_MT                 - Find a FFTW multi-threaded (single) library\n\n#\n\n#  Not specifying COMPONENTS is identical to choosing ALL\n\n#\n\n# This module defines::\n\n#\n\n#   FFTW_FOUND            - True if headers and requested libraries were found\n\n#   FFTW_VERSION          - Version of the FFTW libraries\n\n#   FFTW_INCLUDE_DIRS     - FFTW include directories\n\n#   FFTW_LIBRARIES        - FFTW component libraries to be linked\n\n#\n\n#\n\n# This module reads hints about search locations from variables\n\n# (either CMake variables or environment variables)::\n\n#\n\n#   FFTW_ROOT             - Preferred installation prefix for FFTW\n\n#   FFTW_DIR              - Preferred installation prefix for FFTW\n\n#\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   FFTW::FFTW            - Imported target for the FFTW (double) library\n\n#   FFTW::FFTW_MT         - Imported target for the FFTW multi-thread (double) library\n\n#   FFTW::FFTWF           - Imported target for the FFTW (single) library\n\n#   FFTW::FFTWF_MT        - Imported target for the FFTW multi-thread (single) library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Copyright 2018 Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\")\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# ==============================================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# homebrew on mac\n",
        "Line" : 67,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# Prepare some helper variables\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If necessary, look for the header file as well\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure that all components are in capitals\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## FFTW can be compiled and subsequently linked against\n\n## various data types.\n\n## There is a single set of include files, and then muttiple libraries,\n\n## One for each type.  I.e. libfftw.a-->double, libfftwf.a-->float\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Inspired by FindBoost.cmake\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/FindLAPACKE.cmake" : {
      "ObjectId" : "5c25767835c834b4245966d83d0145ac213a5561",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLAPACKE\n\n# -------------\n\n#\n\n# Find LAPACKE include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(LAPACKE\n\n#     [REQUIRED]             # Fail with error if LAPACKE is not found\n\n#     [COMPONENTS <libs>...] # List of libraries to look for\n\n#     )\n\n#\n\n# Valid names for COMPONENTS libraries are::\n\n#\n\n#   ALL                      - Find all libraries\n\n#   LAPACKE_H                - Find the lapacke.h header file\n\n#   LAPACKE                  - Find a LAPACKE library\n\n#   LAPACK                   - Find a LAPACK library\n\n#   CBLAS                    - Find a CBLAS library\n\n#   BLAS                     - Find a BLAS library\n\n#\n\n#  Not specifying COMPONENTS is identical to choosing ALL\n\n#\n\n# This module defines::\n\n#\n\n#   LAPACKE_FOUND            - True if headers and requested libraries were found\n\n#   LAPACKE_INCLUDE_DIRS     - LAPACKE include directories\n\n#   LAPACKE_LIBRARIES        - LAPACKE component libraries to be linked\n\n#\n\n#\n\n# This module reads hints about search locations from variables\n\n# (either CMake variables or environment variables)::\n\n#\n\n#   LAPACKE_ROOT             - Preferred installation prefix for LAPACKE\n\n#   LAPACKE_DIR              - Preferred installation prefix for LAPACKE\n\n#\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   LAPACKE::LAPACKE         - Imported target for the LAPACKE library\n\n#   LAPACKE::LAPACK          - Imported target for the LAPACK library\n\n#   LAPACKE::CBLAS           - Imported target for the CBLAS library\n\n#   LAPACKE::BLAS            - Imported target for the BLAS library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Copyright 2018 Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\")\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# ==============================================================================\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# homebrew on mac\n",
        "Line" : 65,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# Prepare some helper variables\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If necessary, look for the header file as well\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure that all components are in capitals\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#NOT MSVC\n",
        "Line" : 196,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Inspired by FindBoost.cmake\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/FindMatlab.cmake" : {
      "ObjectId" : "afabbb324de9d86c72c0314fc17b5f167b7841dd",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - this module looks for Matlab\n\n# Defines:\n\n#  MATLAB_INCLUDE_DIR: include path for mex.h, engine.h\n\n#  MATLAB_LIBRARIES:   required libraries: libmex, etc\n\n#  MATLAB_MEX_LIBRARY: path to libmex.lib\n\n#  MATLAB_MX_LIBRARY:  path to libmx.lib\n\n#  MATLAB_MAT_LIBRARY:  path to libmat.lib # added\n\n#  MATLAB_ENG_LIBRARY: path to libeng.lib\n\n#  MATLAB_ROOT: path to Matlab's root directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is part of Gerardus\n\n#\n\n# This is a derivative work of file FindMatlab.cmake released with\n\n# CMake v2.8, because the original seems to be a bit outdated and\n\n# doesn't work with my Windows XP and Visual Studio 10 install\n\n#\n\n# (Note that the original file does work for Ubuntu Natty)\n\n#\n\n# Author: Ramon Casero <rcasero@gmail.com>, Tom Doel\n\n# Version: 0.2.3\n\n# $Rev$\n\n# $Date$\n\n#\n\n# The original file was copied from an Ubuntu Linux install\n\n# /usr/share/cmake-2.8/Modules/FindMatlab.cmake\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Search for a version of Matlab available, starting from the most modern one to older versions\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Directory name depending on whether the Windows architecture is 32\n\n# bit or 64 bit\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Note: For some wierd reason this variable is undefined in my system...\n",
        "Line" : 56,
        "CharPositionInLine" : 29
      },
      "6" : {
        "Text" : "# Folder where the MEX libraries are, depending of the Windows compiler\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Assume people are generally using Visual Studio 7.1,\n\n# if using 7.0 need to link to: ../extern/lib/${WINDIR}/microsoft/msvc70\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# set(MATLAB_LIBRARIES_DIR \"${MATLAB_ROOT}/extern/lib/${WINDIR}/microsoft/msvc70\")\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Assume people are generally using Borland 5.4,\n\n# if using 7.0 need to link to: ../extern/lib/${WINDIR}/microsoft/msvc70\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# set(MATLAB_LIBRARIES_DIR \"${MATLAB_ROOT}/extern/lib/${WINDIR}/microsoft/bcc50\")\n\n# set(MATLAB_LIBRARIES_DIR \"${MATLAB_ROOT}/extern/lib/${WINDIR}/microsoft/bcc51\")\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# If the compiler is Visual Studio, but not any of the specific\n\n# versions above, we try our luck with the microsoft directory\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If this is a Mac and the attempts to find MATLAB_ROOT have so far failed,\n\n# we look in the applications folder\n",
        "Line" : 92,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Search for a version of Matlab available, starting from the most modern one to older versions\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "## Search for matlab\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Check if this is a Mac\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#Get default mex extentension\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "## Remove the mex prefix to find the platform name\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Get path to the MEX libraries\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Get path to the include directory\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This is common to UNIX and Win32:\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#####################\n\n#####################\n\n# Provide a macro to build the mex files from\n\n# within CMake\n\n#####################\n\n# BuildMex.cmake\n\n# \\author Kent Williams norman-k-williams@uiowa.edu\n\n# \\author Hans J. Johnson hans-johnson@uiowa.edu\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# BuildMex -- arguments\n\n# MEXNAME = root of mex library name\n\n# TARGETDIR = location for the mex library files to be created\n\n# SOURCE = list of source files\n\n# LIBRARIES = libraries needed to link mex library\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# message(\"MEXNAME=${BuildMex_MEXNAME} SOURCE=${BuildMex_SOURCE} LIBRARIES=${BuildMex_LIBRARIES}\")\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cmake/FindOpenBLAS.cmake" : {
      "ObjectId" : "d327deb9b5620b4f2504f7e7d70d98f80b0bf41d",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenBLAS\n\n# -------------\n\n#\n\n# Find OpenBLAS include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(OpenBLAS\n\n#     [REQUIRED]             # Fail with error if OpenBLAS is not found\n\n#     )\n\n#\n\n#\n\n# This module defines::\n\n#\n\n#   OpenBLAS_FOUND            - set to true if the library is found\n\n#   OpenBLAS_INCLUDE_DIRS     - list of required include directories\n\n#   OpenBLAS_LIBRARIES        - list of libraries to be linked\n\n#   OpenBLAS_HAS_PARALLEL_LIBRARIES - determine if there are parallel libraries compiled\n\n#   OpenBLAS_PARALLEL_LIBRARIES - list of libraries for parallel implementations\n\n#   OpenBLAS_VERSION_MAJOR    - major version number\n\n#   OpenBLAS_VERSION_MINOR    - minor version number\n\n#   OpenBLAS_VERSION_PATCH    - patch version number\n\n#   OpenBLAS_VERSION_STRING   - version number as a string (ex: \"0.2.18\")\n\n#\n\n#\n\n# This module reads hints about search locations from variables\n\n# (either CMake variables or environment variables)::\n\n#\n\n#   OpenBLAS_ROOT             - Preferred installation prefix for OpenBLAS\n\n#   OpenBLAS_DIR              - (for compatibility purposes)\n\n#\n\n#\n\n#   OpenBLAS::OpenBLAS        - Imported target for the OpenBLAS library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Copyright 2016 Hans J. Johnson <hans-johnson@uiowa.edu>\n\n# Copyright 2018 Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\")\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# ==============================================================================\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# homebrew on mac\n",
        "Line" : 56,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# Prepare some helper variables\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## First try to find OpenBLAS with NO_MODULE,\n\n## As of 20160706 version 0.2.18 there is limited cmake support for OpenBLAS\n\n## that is not as complete as this version, if found, use it\n\n## to identify the OpenBLAS_VERSION_STRING and improve searching.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use cmake conventional naming\n",
        "Line" : 89,
        "CharPositionInLine" : 26
      },
      "7" : {
        "Text" : "# ==============================================================================\n\n### First search for headers\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==============================================================================\n\n### Second, search for libraries\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make sure we find lapacke.h\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "## Find the named parallel version of openblas\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# WARNING: We may not be able to determine the version of some OpenBLAS\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ==============================================================================\n\n# Checks 'REQUIRED', 'QUIET' and versions.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#NOT MSVC\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindPythonSupport.cmake" : {
      "ObjectId" : "c80b4329039a738cc271876af7f68bd420a3afd2",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# This file is a \"template\" file used by various FindPython modules.\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Initial configuration\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# helper commands\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# executable found do not have version in name\n\n# ensure major version is OK\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# interpreter not usable or has wrong major version\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# In this case, interpreter must have same architecture as environment\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# interpreter not usable or has wrong architecture\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# look at runtime part on systems supporting it\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# MSYS has a special syntax for runtime libraries\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# If major version is specified, it must be the same as internal major version\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# handle components\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set versions to search\n\n## default: search any version\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add all compatible versions\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Anaconda distribution: define which architectures can be used\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# In this case, search only for 64bit or 32bit\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# architecture unknown, search for both 64bit and 32bit\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# IronPython support\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# In this case, search only for 64bit or 32bit\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# architecture unknown, search for natural interpreter\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Apple frameworks handling\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Save CMAKE_FIND_FRAMEWORK\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# To avoid picking up the system elements pre-maturely.\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# first step, search for the interpreter\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# look-up for various versions and locations\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# try using HINTS\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# try using registry\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# try in standard paths\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# try more generic names\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# retrieve exact version of executable found\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Interpreter is not usable\n",
        "Line" : 313,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Use interpreter version for future searches to ensure consistency\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# retrieve interpreter identity\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# try to get a more precise ID\n",
        "Line" : 340,
        "CharPositionInLine" : 10
      },
      "34" : {
        "Text" : "# retrieve various package installation directories\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# second step, search for compiler (IronPython)\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# IronPython specific artifacts\n\n# If IronPython interpreter is found, use its path\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# try using root dir and registry\n",
        "Line" : 394,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# try in standard paths\n",
        "Line" : 406,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# retrieve python environment version from compiler\n",
        "Line" : 411,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# set public version information\n",
        "Line" : 430,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# compiler not usable\n",
        "Line" : 437,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# Compiler must be compatible with interpreter\n",
        "Line" : 445,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Use compiler version for future searches to ensure consistency\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# third step, search for the development artifacts\n\n## Development environment is not compatible with IronPython interpreter\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 482,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# if python interpreter is found, use its location and version to ensure consistency\n\n# between interpreter and development environment\n",
        "Line" : 494,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# try to use pythonX.Y-config tool\n",
        "Line" : 513,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# retrieve root install directory\n",
        "Line" : 529,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# python-config is not usable\n",
        "Line" : 536,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# retrieve library\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# retrieve library directory\n",
        "Line" : 549,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "# retrieve library name\n",
        "Line" : 553,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# retrieve runtime library\n",
        "Line" : 565,
        "CharPositionInLine" : 6
      },
      "54" : {
        "Text" : "# retrieve include directory\n",
        "Line" : 578,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# retrieve include directory\n",
        "Line" : 585,
        "CharPositionInLine" : 6
      },
      "56" : {
        "Text" : "# Rely on HINTS and standard paths if config tool failed to locate artifacts\n",
        "Line" : 602,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# search first in known locations\n",
        "Line" : 609,
        "CharPositionInLine" : 6
      },
      "58" : {
        "Text" : "# search in all default paths\n",
        "Line" : 631,
        "CharPositionInLine" : 6
      },
      "59" : {
        "Text" : "# retrieve runtime library\n",
        "Line" : 645,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# search for debug library\n",
        "Line" : 665,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# use library location as a hint\n",
        "Line" : 667,
        "CharPositionInLine" : 10
      },
      "62" : {
        "Text" : "# search first in known locations\n",
        "Line" : 675,
        "CharPositionInLine" : 10
      },
      "63" : {
        "Text" : "# search in all default paths\n",
        "Line" : 687,
        "CharPositionInLine" : 10
      },
      "64" : {
        "Text" : "# Don't search for include dir until library location is known\n",
        "Line" : 707,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# Use the library's install prefix as a hint\n",
        "Line" : 712,
        "CharPositionInLine" : 12
      },
      "66" : {
        "Text" : "# assume library is in a directory under root\n",
        "Line" : 720,
        "CharPositionInLine" : 14
      },
      "67" : {
        "Text" : "# search header file in standard locations\n",
        "Line" : 751,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# retrieve version from header file\n",
        "Line" : 757,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# set public version information\n",
        "Line" : 768,
        "CharPositionInLine" : 6
      },
      "70" : {
        "Text" : "# define public variables\n",
        "Line" : 776,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# development environment must be compatible with interpreter/compiler\n",
        "Line" : 808,
        "CharPositionInLine" : 6
      },
      "72" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 817,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# final validation\n",
        "Line" : 823,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Create imported targets and helper functions\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# System manage shared libraries in two parts: import and runtime\n",
        "Line" : 873,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# extend link information with dependent libraries\n",
        "Line" : 907,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# remove elements relative to python library itself\n",
        "Line" : 915,
        "CharPositionInLine" : 6
      },
      "78" : {
        "Text" : "#\n\n# PYTHON_ADD_LIBRARY (<name> [STATIC|SHARED|MODULE] src1 src2 ... srcN)\n\n# It is used to build modules for python.\n\n#\n",
        "Line" : 925,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# customize library name to follow module name rules\n",
        "Line" : 942,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# final clean-up\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Restore CMAKE_FIND_FRAMEWORK\n",
        "Line" : 955,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 82
    },
    "cmake/FindlibFlame.cmake" : {
      "ObjectId" : "fc3d97ffc507160dd1c89ad4669d0fe9a8c5d44f",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindlibFlame\n\n# -------------\n\n#\n\n# Find libFlame include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(libFlame\n\n#     [REQUIRED]             # Fail with error if libFlame is not found\n\n#     )\n\n#\n\n# This module defines::\n\n#\n\n#   libFlame_FOUND            - True if headers and requested libraries were found\n\n#   libFlame_INCLUDE_DIRS     - libFlame include directories\n\n#   libFlame_LIBRARIES        - libFlame component libraries to be linked\n\n#\n\n#\n\n# This module reads hints about search locations from variables\n\n# (either CMake variables or environment variables)::\n\n#\n\n#   libFlame_ROOT             - Preferred installation prefix\n\n#   libFlame_DIR              - Preferred installation prefix\n\n#\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   libFlame::libFlame        - Target for specific component dependency\n\n#                               (shared or static library)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Copyright 2018 Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\")\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# ==============================================================================\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for CMake > 2.8.11 we should really use DIRECTORY\n",
        "Line" : 64,
        "CharPositionInLine" : 70
      },
      "3" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----------------------------------------------------------------------------\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## For debugging\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/bart_configure_add_header.cmake" : {
      "ObjectId" : "7f6facb950d4ffc10cf4d3c422a3b8206c73c5a1",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/bart_install.cmake" : {
      "ObjectId" : "58b7f2faa8b53f2ca27eeb0cf43d796f6bb2f477",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install the documentation\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install the header files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Separate if users want minimalistic installation\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install all of the targets (except bartmain)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install bartmain separately to allow installation only of bartmain\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==============================================================================\n\n# Now take care of exporting all the information for inclusion in other CMake\n\n# projects\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Write a CMake file with information about the version of BART being compiled\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Write a CMake config file\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Install the config, configversion and custom find modules\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Write a CMake file with all the targets information\n\n# (not for installing, but for external project to import targets from the\n\n#  current build tree)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Install the general CMake target file\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Install the CMake target file for embedding\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Register BART in user package directory\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ==============================================================================\n\n# Add a few convenience targets\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/bart_macros.cmake" : {
      "ObjectId" : "98eb7cec559a9b7de39b0dac63a6414427fde626",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extract the version number based on version.txt or similar formatted file\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# BART Makefile depends on a GCC flag to add an extra include directive from\n\n# the command line: -include src/main.h, which essentially results in\n\n# '#include \"src/main.h\" being added at the top of each file being compiled.\n\n# However, since this is not portable (GCC/Clang use -include, MSVC /FI, Intel\n\n# does not suppport it), we use a slightly different approach here.\n\n# Instead, we simply create a copy of the file with the added line at the top\n\n# at *build* time. We also make sure that if the original file should be\n\n# modified, CMake would automatically re-generate it.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We need to add a protected ';' after each element here as it will be\n\n# interpreted when CMake prepares the command line arguments below\n\n# In addition, we also need to escape quotes\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find a compatible compiler flag from a series of list of possible flags\n\n# For each list of whitespace separated compiler flags passed in argument, this\n\n# function will append or save the compatible flags in ${var_prefix}_c and\n\n# ${var_prefix}_cxx (if C++ is enabled)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Drop the first character (most likely either '-' or '/')\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Drop the first character (most likely either '-' or '/')\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "cmake/bart_options.cmake" : {
      "ObjectId" : "d4fa7e99c6d498aa90a18211dbb31c9eb1052890",
      "LastModified" : "2018-10-06T15:08:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##- TODO option(BART_SLINK \"Provide SLINK support\" OFF)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## if you can find ISMRMRD by default, then default configuration is ON\n",
        "Line" : 19,
        "CharPositionInLine" : 35
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# manually add the pthread library in case one is using static fftw libraries...\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# remove the threaded library when not using threads\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# --------------------------------------\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Actually, CMake >= 3.8 supports CUDA natively, but at least on my machine,\n\n# the command line generated by CMake 3.8.X & 3.9.X contains\n\n# -isystem /usr/include which causes the compilation to fail.\n\n# So... only use the new feature for CMake >= 3.10\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# set(CUDA_NVCC_FLAGS \"-DUSE_CUDA;-Xcompiler;-fPIC;-Xcompiler;-fopenmp;-O3;-arch=sm_20;-m64;-ccbin ${CMAKE_C_COMPILER}\")\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# was introduced in CMake 3.9\n",
        "Line" : 287,
        "CharPositionInLine" : 46
      },
      "25" : {
        "Text" : "# was introduced in CMake 3.9\n",
        "Line" : 293,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# NOT USE_CUDA\n",
        "Line" : 323,
        "CharPositionInLine" : 7
      },
      "27" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Actually CMake 3.9 should be enough for OpenMP::OpenMP support,\n\n# however, until CMake 3.11 we might get problems with the\n\n# INTERFACE_COMPILE_OPTIONS property if we are compiling with\n\n# CMake's native CUDA compilation\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# BOpenMP is FindOpenMP.cmake from 3.12\n",
        "Line" : 346,
        "CharPositionInLine" : 35
      },
      "30" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "cmake/bart_python.cmake" : {
      "ObjectId" : "f8bef98c6952a50376101b952d9e5de06b408e46",
      "LastModified" : "2018-10-06T15:08:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Interpreter only required to find site-lib directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/uninstall.cmake" : {
      "ObjectId" : "764e44ae5d6d05ea3199be9ca22d9727e6f476e1",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Based on EigenUnintall.cmake\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "packaging/CPackConfig.cmake" : {
      "ObjectId" : "dbdc9b48ad44a3a1db5ae94716866a2cc8051d17",
      "LastModified" : "2018-09-06T15:27:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n#\n\n# Inspired by https://github.com/kracejic/cleanCppProject\n\n# Copyright (c) 2018 Kracejic\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n# ==============================================================================\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate .txt license file for CPack (PackageMaker requires a file extension)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set human names to exetuables\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------\n\n# Windows specific\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# NSIS windows installer\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Note: There is a bug in NSI that does not handle full unix paths\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#       properly.\n\n#       Make sure there is at least one set of four (4) backlasshes.\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Icon of the installer\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Configure file with right path, place the result to PROJECT_BINARY_DIR.\n\n# When ${PROJECT_BINARY_DIR}/bart.icon.rc is added to an executable\n\n# it will have icon specified in bart.icon.in.rc\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#---------------------------------------------------------------------------\n\n# Apple specific\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#---------------------------------------------------------------------------\n\n# Linux specific\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# if(NOT BART_NO_LAPACKE)\n\n#   set(CPACK_RPM_PACKAGE_REQUIRES\n\n#     \"${CPACK_RPM_PACKAGE_REQUIRES}, liblapacke\")\n\n# endif()\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# exclude folders which clash with default ones\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# set(CPACK_DEBIAN_COMPRESSION_TYPE \"xz\")\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# FIXME: should really be something like libfftw3-3\n",
        "Line" : 147,
        "CharPositionInLine" : 63
      },
      "17" : {
        "Text" : "# FIXME: should really be something like libpng16\n",
        "Line" : 150,
        "CharPositionInLine" : 48
      },
      "18" : {
        "Text" : "# if(NOT BART_NO_LAPACKE)\n\n#   set(CPACK_DEBIAN_PACKAGE_DEPENDS\n\n# \t\"${CPACK_DEBIAN_PACKAGE_DEPENDS}, liblapacke\")\n\n# endif()\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Icon and app shortcut for Linux systems\n\n# Note: .desktop file must have same name as executable\n\n# install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/bart.desktop\n\n#     DESTINATION share/applications/\n\n#     PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n\n#     )\n\n# install(FILES ${PROJECT_SOURCE_DIR}/packaging/bart.png\n\n#     DESTINATION share/icons/hicolor/256x256/apps/\n\n#     PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n\n#     )\n\n# install(FILES ${PROJECT_SOURCE_DIR}/packaging/bart.png\n\n#     DESTINATION share/icons/gnome/256x256/apps/\n\n#     PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n\n#     )\n\n# License file\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# set package icon\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "1715d6c2407cc3368e2da4df36a9377e4bad8307",
      "LastModified" : "2018-12-09T09:17:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Generate a pair of randomly named directories\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# string(RANDOM LENGTH 4 ALPHABET \"0123456789\" _random)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# Main helper variables\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n\n# This macro parses a XXX.mk file and extracts its tests and related commands\n\n#\n\n# Each call to this macro appends a new group to the _test_groups list\n\n# For each group XXX, a variable _test_list_XXX is created to store the names\n\n# of the tests present in that group.\n\n# For each test TTT in group XXX, a variable TEST_XXX_TTT contains the list of\n\n# commands to execute for that particular test\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# First get name of the group and add it to the global list\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Read the file\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# The following algorithm is relying on the fact that we first encounter a line\n\n# with the test name (of the form tests/test-name:) and then a series of\n\n# tab-indented lines that start with $(TOOLDIR)/some-command + arguments\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Look for $(TOOLDIR) to find out if a line is a command or not\n",
        "Line" : 56,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Try to grab the test name\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Got the name -> remove tests/ from the beginning of the string\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Add this test to the list of test for this group\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# First chars are TAB + $ -> command part of a test\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Separate line by whitespace\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Starts with \"\\t$(TOOLDIR)\" => it's the name of the command\n",
        "Line" : 77,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# Contains $(TESTS_OUT) => path to an input file in data diretory\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# If we were called with some extra arguments, apply an extra processing\n\n# step to the command before adding it to the list\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Cleanup string and add it to the list of commands for the current test\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Reset current test name if we encounter anything else\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# This macro parses a XXX.mk file and extracts the commands that generate some\n\n# test data\n\n#\n\n# Each call to this macro may append some name XXX to the list of data files\n\n# (_test_list_data). If a new test data file is found, then the command needed\n\n# to generate the file is saved in the _data_XXX_cmd variable and the path to\n\n# the file in the _data_XXX_file variable.\n\n# Also, if the generation of the current data file is dependent on another one,\n\n# the variable _data_XXX_deps will contain the file that needs to be created\n\n# first.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# First read the file\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Found a name line -> extract the name and add it to the list of names\n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Got a command line -> parse it and save the command\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# If the line contains $(TESTS_OUT) we have a dependency\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Modify the command to have the correct path\n",
        "Line" : 152,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# Cleanup the dependency name and save it\n",
        "Line" : 154,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "# Cleanup command line and then save it\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Propery set the name of the data file and save it\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# This macro processes the list of test data files to be generated and creates\n\n# custom commands to generate them.\n\n#\n\n# We simply iterate over the list of data files, grab the required information\n\n# and then generate a file to create the CMake custom command\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Set relevant helper variables\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Generate the file...\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# ...and include it\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# While we're at it also keep a list of all the test data files\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# This macro processes the list of tests for a particular group and generates\n\n# a CMake script file in order to execute them\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# First, create a custom target to execute all the test in the group\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Then iterate over all the tests in the group\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Skip GPU-related test if we did not compile with CUDA support\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Build the CMake script file content\n",
        "Line" : 211,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Set environment variables before calling the command if required\n",
        "Line" : 217,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# For each command in the test, we make a call execute_process()\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Finally, we write the file...\n",
        "Line" : 233,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# ...and create a target to execute it.\n",
        "Line" : 235,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# ==============================================================================\n\n# Macro to handle some special cases\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ==============================================================================\n\n# Macros to manually add some tests (ie. not based on some *.mk file)\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Now that we have all our macros, we simply iterate over all the XXX.mk files\n\n# in the folder, while skipping some incompatible tests\n\n#   - join: calls commands like `seq 1 300` which may not work if not on Linux\n\n#   - estdelay: one call to `$(TOOLDIR)/estdelay` in the middle of another\n\n#               command -> impossible to do with the current approach\n\n#\n\n# NB: the GPU-only tests are already ignored when parsing the tests file\n\n#     since they all contain the \"gpu\" string in their name\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Do nothing\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# ==============================================================================\n\n# Finally add conveniene targets to launch all tests\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 48
    },
    "tests/pyBART.cmake" : {
      "ObjectId" : "4960311c993c83f3ff275255b2ab3e036da8f35a",
      "LastModified" : "2018-12-09T09:17:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018. Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n\n# All rights reserved. Use of this source code is governed by\n\n# a BSD-style license which can be found in the LICENSE file.\n\n# \\author Damien Nguyen <damien.nguyen@alumni.epfl.ch>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 21,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1158
}