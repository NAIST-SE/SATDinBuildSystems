{
  "Repository" : "101350",
  "Revision" : "HEAD",
  "ObjectId" : "75bed69328ab826f98f9065764ba4ef6c12513e0",
  "CommitTime" : "2019-04-14T21:00:53Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "31ec89de8af41935def8677d603ec11026f8f317",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure CCache if available\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix warning with Ninja and cotire (see https://github.com/sakra/cotire/issues/81)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_VERBOSE_MAKEFILE ON)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Using C and CXX because GLEW is C\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compiler detection\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compiler configuration\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Mac OS X specific configuration. In theory must be done before the PROJECT directive, but that doesn't actually work.\n\n# These settings are ignored on other platforms\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Library configuration\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Required wxWidgets version\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generate debug symbols even for Release; we build a stripped pdb in Release mode, see TrenchBroomApp.cmake\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Workaround for false positives on macOS\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Xcode requires these flags to allow debugging\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Xcode should treat the library header files as system headers\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set debug mode directives\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Should be changed to use per directory CMakeList.txt and ADD_SUBDIRECTORY\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/CheckRepositoryStatus.cmake" : {
      "ObjectId" : "61bd222d8ca05d611f2da78f68b406e80df54708",
      "LastModified" : "2014-05-03T17:21:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Common.cmake" : {
      "ObjectId" : "11cdb2672cd32e7a875ff7b8ca9a63cdb63fd125",
      "LastModified" : "2019-02-12T09:22:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unfortunately, Xcode still compiles OBJECT libraries as static libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure dependencies if building a shared library.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create the cmake script for generating the version information\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Need to find git first because GenerateVersion.cmake.in accesses the GIT_EXECUTABLE variable it populates.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CppCheck.cmake" : {
      "ObjectId" : "25297b430988772dceab9f08c7af56301c9f4da8",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FreeImage.cmake" : {
      "ObjectId" : "0769e150a446d4ec6dca675ae1841f98ad309531",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the FreeImage library and include path.\n\n# Once done this will define\n\n#\n\n# FREEIMAGE_FOUND\n\n# FREEIMAGE_INCLUDE_PATH\n\n# FREEIMAGE_LIBRARY\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We want to link freeimage statically and not dynamically on OS X\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/FreeType.cmake" : {
      "ObjectId" : "c53a3ccc63c71cd3f3d2d22c0185ee39b1bd5e01",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Must set the path manually because otherwise it will find a 64bit only freetype lib that comes with OS X\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "cmake/GMock.cmake" : {
      "ObjectId" : "2c6b375d8a06db620dc90c0e563445a5395fc1b4",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suppress all warnings in 3rd party code\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/GTest.cmake" : {
      "ObjectId" : "31b9cf5d6cc9d912d6062b0efd4c9733e0457849",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suppress all warnings in 3rd party code\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/GenerateManual.cmake" : {
      "ObjectId" : "141a5276f3f87d347e86924228ded916f78f2598",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate help documents\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy the images as well\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Glew.cmake" : {
      "ObjectId" : "79f30ada9de08031ebef28de85fddbd06d01ee51",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suppress all warnings in 3rd party code\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindwxWidgetsTB.cmake" : {
      "ObjectId" : "3d56740f94e0b2e932cba68d2d22c2facb9cce74",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find a wxWidgets (a.k.a., wxWindows) installation.\r\n\n# This module finds if wxWidgets is installed and selects a default\r\n\n# configuration to use. wxWidgets is a modular library. To specify the\r\n\n# modules that you will use, you need to name them as components to\r\n\n# the package:\r\n\n#\r\n\n# find_package(wxWidgets COMPONENTS core base ...)\r\n\n#\r\n\n# There are two search branches: a windows style and a unix style. For\r\n\n# windows, the following variables are searched for and set to\r\n\n# defaults in case of multiple choices. Change them if the defaults\r\n\n# are not desired (i.e., these are the only variables you should\r\n\n# change to select a configuration):\r\n\n#\r\n\n#  wxWidgets_ROOT_DIR      - Base wxWidgets directory\r\n\n#                            (e.g., C:/wxWidgets-2.6.3).\r\n\n#  wxWidgets_LIB_DIR       - Path to wxWidgets libraries\r\n\n#                            (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).\r\n\n#  wxWidgets_CONFIGURATION - Configuration to use\r\n\n#                            (e.g., msw, mswd, mswu, mswunivud, etc.)\r\n\n#  wxWidgets_EXCLUDE_COMMON_LIBRARIES\r\n\n#                          - Set to TRUE to exclude linking of\r\n\n#                            commonly required libs (e.g., png tiff\r\n\n#                            jpeg zlib regex expat).\r\n\n#\r\n\n# For unix style it uses the wx-config utility. You can select between\r\n\n# debug/release, unicode/ansi, universal/non-universal, and\r\n\n# static/shared in the QtDialog or ccmake interfaces by turning ON/OFF\r\n\n# the following variables:\r\n\n#\r\n\n#  wxWidgets_USE_DEBUG\r\n\n#  wxWidgets_USE_UNICODE\r\n\n#  wxWidgets_USE_UNIVERSAL\r\n\n#  wxWidgets_USE_STATIC\r\n\n#\r\n\n# There is also a wxWidgets_CONFIG_OPTIONS variable for all other\r\n\n# options that need to be passed to the wx-config utility. For\r\n\n# example, to use the base toolkit found in the /usr/local path, set\r\n\n# the variable (before calling the FIND_PACKAGE command) as such:\r\n\n#\r\n\n#  set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)\r\n\n#\r\n\n# The following are set after the configuration is done for both\r\n\n# windows and unix style:\r\n\n#\r\n\n#  wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.\r\n\n#  wxWidgets_INCLUDE_DIRS     - Include directories for WIN32\r\n\n#                               i.e., where to find \"wx/wx.h\" and\r\n\n#                               \"wx/setup.h\"; possibly empty for unices.\r\n\n#  wxWidgets_LIBRARIES        - Path to the wxWidgets libraries.\r\n\n#  wxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for\r\n\n#                               rpath on UNIX. Typically an empty string\r\n\n#                               in WIN32 environment.\r\n\n#  wxWidgets_DEFINITIONS      - Contains defines required to compile/link\r\n\n#                               against WX, e.g. WXUSINGDLL\r\n\n#  wxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link\r\n\n#                               against WX debug builds, e.g. __WXDEBUG__\r\n\n#  wxWidgets_CXX_FLAGS        - Include dirs and compiler flags for\r\n\n#                               unices, empty on WIN32. Essentially\r\n\n#                               \"`wx-config --cxxflags`\".\r\n\n#  wxWidgets_USE_FILE         - Convenience include file.\r\n\n#\r\n\n# Sample usage:\r\n\n#   # Note that for MinGW users the order of libs is important!\r\n\n#   find_package(wxWidgets COMPONENTS net gl core base)\r\n\n#   if(wxWidgets_FOUND)\r\n\n#     include(${wxWidgets_USE_FILE})\r\n\n#     # and for each of your dependent executable/library targets:\r\n\n#     target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\r\n\n#   endif()\r\n\n#\r\n\n# If wxWidgets is required (i.e., not an optional part):\r\n\n#   find_package(wxWidgets REQUIRED net gl core base)\r\n\n#   include(${wxWidgets_USE_FILE})\r\n\n#   # and for each of your dependent executable/library targets:\r\n\n#   target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2004-2009 Kitware, Inc.\r\n\n# Copyright 2007-2009 Miguel A. Figueroa-Villanueva <miguelf at ieee dot org>\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# FIXME: check this and provide a correct sample usage...\r\n\n#        Remember to connect back to the upper text.\r\n\n# Sample usage with monolithic wx build:\r\n\n#\r\n\n#   find_package(wxWidgets COMPONENTS mono)\r\n\n#   ...\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\r\n\n#\r\n\n# This module has been tested on the WIN32 platform with wxWidgets\r\n\n# 2.6.2, 2.6.3, and 2.5.3. However, it has been designed to\r\n\n# easily extend support to all possible builds, e.g., static/shared,\r\n\n# debug/release, unicode, universal, multilib/monolithic, etc..\r\n\n#\r\n\n# If you want to use the module and your build type is not supported\r\n\n# out-of-the-box, please contact me to exchange information on how\r\n\n# your system is setup and I'll try to add support for it.\r\n\n#\r\n\n# AUTHOR\r\n\n#\r\n\n# Miguel A. Figueroa-Villanueva (miguelf at ieee dot org).\r\n\n# Jan Woetzel (jw at mip.informatik.uni-kiel.de).\r\n\n#\r\n\n# Based on previous works of:\r\n\n# Jan Woetzel (FindwxWindows.cmake),\r\n\n# Jorgen Bodde and Jerry Fath (FindwxWin.cmake).\r\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO/ideas\r\n\n#\r\n\n# (1) Option/Setting to use all available wx libs\r\n\n# In contrast to expert developer who lists the\r\n\n# minimal set of required libs in wxWidgets_USE_LIBS\r\n\n# there is the newbie user:\r\n\n#   - who just wants to link against WX with more 'magic'\r\n\n#   - doesn't know the internal structure of WX or how it was built,\r\n\n#     in particular if it is monolithic or not\r\n\n#   - want to link against all available WX libs\r\n\n# Basically, the intent here is to mimic what wx-config would do by\r\n\n# default (i.e., `wx-config --libs`).\r\n\n#\r\n\n# Possible solution:\r\n\n#   Add a reserved keyword \"std\" that initializes to what wx-config\r\n\n# would default to. If the user has not set the wxWidgets_USE_LIBS,\r\n\n# default to \"std\" instead of \"base core\" as it is now. To implement\r\n\n# \"std\" will basically boil down to a FOR_EACH lib-FOUND, but maybe\r\n\n# checking whether a minimal set was found.\r\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIXME: This and all the DBG_MSG calls should be removed after the\r\n\n# module stabilizes.\r\n\n#\r\n\n# Helper macro to control the debugging output globally. There are\r\n\n# two versions for controlling how verbose your output should be.\r\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    message(STATUS \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\r\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    message(STATUS \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\r\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Clear return values in case the module is loaded more than once.\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Using SYSTEM with INCLUDE_DIRECTORIES in conjunction with wxWidgets on\r\n\n# the Mac produces compiler errors. Set wxWidgets_INCLUDE_DIRS_NO_SYSTEM\r\n\n# to prevent UsewxWidgets.cmake from using SYSTEM.\r\n\n#\r\n\n# See cmake mailing list discussions for more info:\r\n\n#   http://www.cmake.org/pipermail/cmake/2008-April/021115.html\r\n\n#   http://www.cmake.org/pipermail/cmake/2008-April/021146.html\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if(APPLE OR CMAKE_CXX_PLATFORM_ID MATCHES \"OpenBSD\")\r\n\n# set(wxWidgets_INCLUDE_DIRS_NO_SYSTEM 1)\r\n\n# endif()\r\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DEPRECATED: This is a patch to support the DEPRECATED use of\r\n\n# wxWidgets_USE_LIBS.\r\n\n#\r\n\n# If wxWidgets_USE_LIBS is set:\r\n\n# - if using <components>, then override wxWidgets_USE_LIBS\r\n\n# - else set wxWidgets_FIND_COMPONENTS to wxWidgets_USE_LIBS\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the convenience use file if available.\r\n\n#\r\n\n# Get dir of this file which may reside in:\r\n\n# - CMAKE_MAKE_ROOT/Modules on CMake installation\r\n\n# - CMAKE_MODULE_PATH if user prefers his own specialized version\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Prefer an existing customized version, but the user might override\r\n\n# the FindwxWidgets module and not the UsewxWidgets one.\r\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#=====================================================================\r\n\n#=====================================================================\r\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#=====================================================================\r\n\n# WIN32_FIND_STYLE\r\n\n#=====================================================================\r\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Useful common wx libs needed by almost all components.\r\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# DEPRECATED: Use find_package(wxWidgets COMPONENTS mono) instead.\r\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# this is default\r\n",
        "Line" : 224,
        "CharPositionInLine" : 47
      },
      "19" : {
        "Text" : "# Add the common (usually required libs) unless\r\n\n# wxWidgets_EXCLUDE_COMMON_LIBRARIES has been set.\r\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# WIN32: Helper MACROS\r\n\n#-------------------------------------------------------------------\r\n\n#\r\n\n# Get filename components for a configuration. For example,\r\n\n#   if _CONFIGURATION = mswunivud, then _UNV=univ, _UCD=u _DBG=d\r\n\n#   if _CONFIGURATION = mswu,      then _UNV=\"\",   _UCD=u _DBG=\"\"\r\n\n#\r\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#\r\n\n# Find libraries associated to a configuration.\r\n\n#\r\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# FIXME: What if both regex libs are available. regex should be\r\n\n# found outside the loop and only wx${LIB}${_UCD}${_DBG}.\r\n\n# Find wxWidgets common libraries.\r\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# for regex\r\n",
        "Line" : 266,
        "CharPositionInLine" : 31
      },
      "24" : {
        "Text" : "# Find wxWidgets multilib base libraries.\r\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Find wxWidgets monolithic library.\r\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Find wxWidgets multilib libraries.\r\n",
        "Line" : 319,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#\r\n\n# Clear all library paths, so that FIND_LIBRARY refinds them.\r\n\n#\r\n\n# Clear a lib, reset its found flag, and mark as advanced.\r\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Clear all debug or release library paths (arguments are \"d\" or \"\").\r\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Clear wxWidgets common libraries.\r\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Clear wxWidgets multilib base libraries.\r\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Clear wxWidgets monolithic library.\r\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Clear wxWidgets multilib libraries.\r\n",
        "Line" : 363,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Clear all wxWidgets debug libraries.\r\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Clear all wxWidgets release libraries.\r\n",
        "Line" : 373,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#\r\n\n# Set the wxWidgets_LIBRARIES variable.\r\n\n# Also, Sets output variable wxWidgets_FOUND to FALSE if it fails.\r\n\n#\r\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# WIN32: Start actual work.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Look for an installation tree.\r\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# WX 2.6.x\r\n",
        "Line" : 434,
        "CharPositionInLine" : 123
      },
      "39" : {
        "Text" : "# If wxWidgets_ROOT_DIR changed, clear lib dir.\r\n",
        "Line" : 485,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Select one default tree inside the already determined wx tree.\r\n\n# Prefer static/shared order usually consistent with build\r\n\n# settings.\r\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Set WX_LIB_DIR_PREFIX using the value of CMAKE_VS_PLATFORM_TOOLSET\r\n\n# e.g. CMAKE_VS_PLATFORM_TOOLSET of \"v140_xp\"\r\n\n# would set WX_LIB_DIR_PREFIX to \"vc140\"\r\n",
        "Line" : 500,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# prefer shared\r\n",
        "Line" : 518,
        "CharPositionInLine" : 54
      },
      "43" : {
        "Text" : "# prefer static\r\n",
        "Line" : 535,
        "CharPositionInLine" : 54
      },
      "44" : {
        "Text" : "# If wxWidgets_LIB_DIR changed, clear all libraries.\r\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# If building shared libs, define WXUSINGDLL to use dllimport.\r\n",
        "Line" : 550,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# Search for available configuration types.\r\n",
        "Line" : 556,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# If the selected configuration wasn't found force the default\r\n\n# one. Otherwise, use it but still force a refresh for\r\n\n# updating the doc string with the current list of available\r\n\n# configurations.\r\n",
        "Line" : 570,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# If release config selected, and both release/debug exist.\r\n",
        "Line" : 582,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# If the option exists (already in cache), force it false.\r\n",
        "Line" : 588,
        "CharPositionInLine" : 10
      },
      "50" : {
        "Text" : "# Get configuration parameters from the name.\r\n",
        "Line" : 596,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# Set wxWidgets lib setup include directory.\r\n",
        "Line" : 599,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# Set wxWidgets main include directory.\r\n",
        "Line" : 608,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# Find wxWidgets libraries.\r\n",
        "Line" : 616,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# Settings for requested libs (i.e., include dir, libraries, etc.).\r\n",
        "Line" : 622,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# Add necessary definitions for unicode builds\r\n",
        "Line" : 625,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# Add necessary definitions for debug builds\r\n",
        "Line" : 630,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "#=====================================================================\r\n\n# UNIX_FIND_STYLE\r\n\n#=====================================================================\r\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#-----------------------------------------------------------------\r\n\n# UNIX: Helper MACROS\r\n\n#-----------------------------------------------------------------\r\n\n#\r\n\n# Set the default values based on \"wx-config --selected-config\".\r\n\n#\r\n",
        "Line" : 642,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#\r\n\n# Query a boolean configuration option to determine if the system\r\n\n# has both builds available. If so, provide the selection option\r\n\n# to the user.\r\n\n#\r\n",
        "Line" : 672,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# If option exists (already in cache), force to available one.\r\n",
        "Line" : 697,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "#\r\n\n# Set wxWidgets_SELECT_OPTIONS to wx-config options for selecting\r\n\n# among multiple builds.\r\n\n#\r\n",
        "Line" : 708,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "#-----------------------------------------------------------------\r\n\n# UNIX: Start actual work.\r\n\n#-----------------------------------------------------------------\r\n\n# Support cross-compiling, only search in the target platform.\r\n",
        "Line" : 726,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# get defaults based on \"wx-config --selected-config\"\r\n",
        "Line" : 743,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# for each option: if both builds are available, provide option\r\n",
        "Line" : 746,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# process selection to set wxWidgets_SELECT_OPTIONS\r\n",
        "Line" : 752,
        "CharPositionInLine" : 6
      },
      "66" : {
        "Text" : "# run the wx-config program to get cxxflags\r\n",
        "Line" : 756,
        "CharPositionInLine" : 6
      },
      "67" : {
        "Text" : "# parse definitions from cxxflags;\r\n\n#   drop -D* from CXXFLAGS and the -D prefix\r\n",
        "Line" : 770,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "# parse include dirs from cxxflags; drop -I prefix\r\n",
        "Line" : 781,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# run the wx-config program to get the libs\r\n\n# - NOTE: wx-config doesn't verify that the libs requested exist\r\n\n#         it just produces the names. Maybe a TRY_COMPILE would\r\n\n#         be useful here...\r\n",
        "Line" : 799,
        "CharPositionInLine" : 6
      },
      "70" : {
        "Text" : "# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)\r\n",
        "Line" : 822,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "#=====================================================================\r\n\n# Neither UNIX_FIND_STYLE, nor WIN32_FIND_STYLE\r\n\n#=====================================================================\r\n",
        "Line" : 837,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Debug output:\r\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#=====================================================================\r\n\n#=====================================================================\r\n",
        "Line" : 880,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Maintain consistency with all other variables.\r\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#=====================================================================\r\n\n# Macros for use in wxWidgets apps.\r\n\n# - This module will not fail to find wxWidgets based on the code\r\n\n#   below. Hence, it's required to check for validity of:\r\n\n#\r\n\n# wxWidgets_wxrc_EXECUTABLE\r\n\n#=====================================================================\r\n",
        "Line" : 887,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Resource file compiler.\r\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#\r\n\n# WX_SPLIT_ARGUMENTS_ON(<keyword> <left> <right> <arg1> <arg2> ...)\r\n\n#\r\n\n# Sets <left> and <right> to contain arguments to the left and right,\r\n\n# respectively, of <keyword>.\r\n\n#\r\n\n# Example usage:\r\n\n#  function(WXWIDGETS_ADD_RESOURCES outfiles)\r\n\n#    WX_SPLIT_ARGUMENTS_ON(OPTIONS wxrc_files wxrc_options ${ARGN})\r\n\n#    ...\r\n\n#  endfunction()\r\n\n#\r\n\n#  WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o file.C)\r\n\n#\r\n\n# NOTE: This is a generic piece of code that should be renamed to\r\n\n# SPLIT_ARGUMENTS_ON and put in a file serving the same purpose as\r\n\n# FindPackageStandardArgs.cmake. At the time of this writing\r\n\n# FindQt4.cmake has a QT4_EXTRACT_OPTIONS, which I basically copied\r\n\n# here a bit more generalized. So, there are already two find modules\r\n\n# using this approach.\r\n\n#\r\n",
        "Line" : 900,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# FIXME: Document that the input variables will be cleared.\r\n\n#list(APPEND ${_leftvar}  \"\")\r\n\n#list(APPEND ${_rightvar} \"\")\r\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "#\r\n\n# WX_GET_DEPENDENCIES_FROM_XML(\r\n\n#   <depends>\r\n\n#   <match_pattern>\r\n\n#   <clean_pattern>\r\n\n#   <xml_contents>\r\n\n#   <depends_path>\r\n\n#   )\r\n\n#\r\n\n# FIXME: Add documentation here...\r\n\n#\r\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# make the file have an absolute path\r\n",
        "Line" : 972,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# append file to dependency list\r\n",
        "Line" : 977,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "#\r\n\n# WXWIDGETS_ADD_RESOURCES(<sources> <xrc_files>\r\n\n#                         OPTIONS <options> [NO_CPP_CODE])\r\n\n#\r\n\n# Adds a custom command for resource file compilation of the\r\n\n# <xrc_files> and appends the output files to <sources>.\r\n\n#\r\n\n# Example usages:\r\n\n#   WXWIDGETS_ADD_RESOURCES(sources xrc/main_frame.xrc)\r\n\n#   WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o altname.cxx)\r\n\n#\r\n",
        "Line" : 984,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Parse files for dependencies.\r\n",
        "Line" : 998,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# All files have absolute paths or paths relative to the location\r\n\n# of the rc file.\r\n",
        "Line" : 1007,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# get bitmap/bitmap2 files\r\n",
        "Line" : 1011,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# get url files\r\n",
        "Line" : 1020,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# get wxIcon files\r\n",
        "Line" : 1029,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "#\r\n\n# Parse options.\r\n\n#\r\n\n# If NO_CPP_CODE option specified, then produce .xrs file rather\r\n\n# than a .cpp file (i.e., don't add the default --cpp-code option).\r\n",
        "Line" : 1039,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# wxrc's default output filename for cpp code.\r\n",
        "Line" : 1047,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# wxrc's default output filename for xrs file.\r\n",
        "Line" : 1051,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Get output name for use in ADD_CUSTOM_COMMAND.\r\n\n# - short option scanning\r\n",
        "Line" : 1055,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "#list(REMOVE_AT rc_options ${index} ${filename_index})\r\n",
        "Line" : 1061,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# - long option scanning\r\n",
        "Line" : 1063,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "#string(REGEX REPLACE \"--output=[^;]*;?\" \"\" rc_options \"${rc_options}\")\r\n\n#string(REGEX REPLACE \";$\" \"\" rc_options \"${rc_options}\")\r\n",
        "Line" : 1068,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# Add generated header to output file list.\r\n",
        "Line" : 1080,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Add generated file to output file list.\r\n",
        "Line" : 1092,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 97
    },
    "cmake/Modules/UsewxWidgets.cmake" : {
      "ObjectId" : "0dd4d5a6b0280555411b8d7c1c721ba3eccb6240",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Convenience include for using wxWidgets library.\n\n# Determines if wxWidgets was FOUND and sets the appropriate libs, incdirs,\n\n# flags, etc. INCLUDE_DIRECTORIES and LINK_DIRECTORIES are called.\n\n#\n\n# USAGE\n\n#  # Note that for MinGW users the order of libs is important!\n\n#  find_package(wxWidgets REQUIRED net gl core base)\n\n#  include(${wxWidgets_USE_FILE})\n\n#  # and for each of your dependent executable/library targets:\n\n#  target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\n\n#\n\n# DEPRECATED\n\n#  LINK_LIBRARIES is not called in favor of adding dependencies per target.\n\n#\n\n# AUTHOR\n\n#  Jan Woetzel <jw -at- mip.informatik.uni-kiel.de>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2006      Jan Woetzel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# debug message and logging.\n\n# comment these out for distribution\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  set(LOGFILE \"${PROJECT_BINARY_DIR}/CMakeOutput.log\")\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#  file(APPEND ${LOGFILE} \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}):   ${_MSG}\\n\")\n\n#  message(STATUS \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DEPRECATED JW\n\n# just for backward compatibility: add deps to all targets\n\n# library projects better use advanced find_package(wxWidgets) directly.\n\n#if(wxWidgets_LIBRARIES)\n\n#  link_libraries(${wxWidgets_LIBRARIES})\n\n#  # BUG: str too long:  MSG(\"wxWidgets_LIBRARIES=${wxWidgets_LIBRARIES}\")\n\n#  if(LOGFILE)\n\n#    file(APPEND ${LOGFILE} \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}):   ${wxWidgets_LIBRARIES}\\n\")\n\n#  endif()\n\n#endif()\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/StackWalker.cmake" : {
      "ObjectId" : "b3e1957ecb6f362aa9e49569262fac29f5d4f4d7",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TransformKeyboardShortcuts.cmake" : {
      "ObjectId" : "d7e67f19442f4b91b5d4e1f708bc1f1f3daa8c6c",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TrenchBroomApp.cmake" : {
      "ObjectId" : "cd6e221b90b81b2daa7d832823e45f45037e7627",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Collect the source files for compilation.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OS X app bundle configuration, must happen before the executable is added\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure icons\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Configure button bitmaps etc.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Configure game resources\n\n# Collect all game resources\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Set correct locations for game files\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Collect all untested game resources\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Set correct locations for untested game files\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Configure shaders\n\n# Collect all shaders\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Configure manual files\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Set up resource compilation for Windows\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CONFIGURE_FILE(\"${APP_SOURCE_DIR}/TrenchBroom.rc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/TrenchBroom.rc\" @ONLY)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Configure variables that are substituted into the plist\n\n# Set CFBundleExecutable\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set CFBundleName, which controls the application menu label\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Set CFBundleShortVersionString to \"2.0.0\". This is displayed in the Finder and Spotlight.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Set CFBundleVersion to the git describe output. Apple docs say it should be \"three non-negative, period-separated integers with the first integer being greater than zero\"\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set the path to the plist template\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Configure the XCode generator project\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Copy some Windows-specific resources\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Copy Windows icons to target dir\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Copy DLLs to app directory\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Copy application and window icons to resources directory\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Generate a small stripped PDB for release builds so we get stack traces with symbols\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Properly link to OpenGL libraries on Unix-like systems\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# make executable name conventional lowercase on linux\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Set up the resources and DLLs for the executable\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Copy button images to resources directory\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Copy fonts to resources directory\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Copy game files to resources directory\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Copy untested game files to resources directory\n",
        "Line" : 195,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Copy shader files to resources directory\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Copy manual files to resource directory\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Common CPack configuration\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Platform specific CPack configuration\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# SET(CMAKE_INSTALLL_DEBUG_LIBRARIES OFF)\n\n# INCLUDE(InstallRequiredSystemLibraries)\n",
        "Line" : 240,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Copy wxWidgets DLLs to app directory (not actually related to CPack but uses the WIN_LIB_WX_* variables from above)\n",
        "Line" : 257,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Copy PDB files (msvc debug symbols)\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Get paths to wxwidgets debug symbols\n",
        "Line" : 266,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# add architecture to filename\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# generate deb and rpm packages\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# configure install scripts\n",
        "Line" : 331,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# add files\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# deb package specifics\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# rpm package specifics\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# prevents stripping of debug symbols during rpmbuild\n",
        "Line" : 363,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 45
    },
    "cmake/TrenchBroomTest.cmake" : {
      "ObjectId" : "63d4a25d368f07ac7bdefde700bf177c5ef84453",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate a small stripped PDB for release builds so we get stack traces with symbols\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Properly link to OpenGL libraries on Unix-like systems\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy some Windows-specific resources\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Clear all fixtures\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Copy test fixtures\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy benchmark fixtures\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "06e3aa5982bc71cd02a178478a37e233db678075",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set Debug information format\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Set some warnings\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/miniz.cmake" : {
      "ObjectId" : "f1bc4ac16fbc0e862294e51e7409c74eb4f6682b",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suppress all warnings in 3rd party code\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# miniz.c uses `#include  \"miniz.h\"`, but we've moved the header to lib/include/miniz\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/tinyxml2.cmake" : {
      "ObjectId" : "72d7c8193b44aaca22277ab9e036605ef988e9b8",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suppress all warnings in 3rd party code\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tinyxml2.c uses `#include  \"tinyxml2.h\"`, but we've moved the header to lib/include/tinyxml2\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/vecmath.cmake" : {
      "ObjectId" : "4cf07043d1c8db4b16a41de7f9fb657617b4fdcc",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SET_XCODE_ATTRIBUTES(vecmath)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/wxWidgets.cmake" : {
      "ObjectId" : "db3634243277146b1335e4513e928059a2b35a46",
      "LastModified" : "2019-03-23T17:59:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check version\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove QuickTime framework on OS X; it's not needed and produces a linker warning\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 21
  },
  "ElapsedTime" : 5869
}