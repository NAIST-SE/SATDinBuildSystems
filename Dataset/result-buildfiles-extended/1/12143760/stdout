{
  "Repository" : "12143760",
  "Revision" : "HEAD",
  "ObjectId" : "c84e22ab4ca345436baa0650aa10a681b4309eeb",
  "CommitTime" : "2019-04-12T08:55:19Z",
  "Files" : {
    "examples/gridViewExample/proguard-rules.pro" : {
      "ObjectId" : "ca55feb4493adc64f10b19708a135be0d5e7c98a",
      "LastModified" : "2017-09-18T16:35:12Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/moduleExample/app/proguard-rules.pro" : {
      "ObjectId" : "200fdffd5818b59b764bb4afec6203e2dd0563bf",
      "LastModified" : "2017-09-18T16:35:12Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /usr/local/Cellar/android-sdk/22.6.2/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/multiprocessExample/proguard-rules.pro" : {
      "ObjectId" : "8456b3daec547bed64e8e25fe3703ce938d0dbda",
      "LastModified" : "2017-11-01T08:55:25Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /home/cc/.android-sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/secureTokenAndroidKeyStore/proguard-rules.pro" : {
      "ObjectId" : "740907a636b2a6f11a61f14d52ba83b4a05e32b7",
      "LastModified" : "2017-11-01T08:55:25Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/Nabil/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "realm/kotlin-extensions/proguard-rules.pro" : {
      "ObjectId" : "64bf447535a0560ba75bb13541e548f7b89ab1bb",
      "LastModified" : "2017-12-01T18:33:15Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /usr/local/opt/android-sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "realm/realm-library/proguard-rules-build-common.pro" : {
      "ObjectId" : "b5ca18e12adf1ca8c25f5fac73ac15787fe84d9e",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Common proguard configuration for building the Base and ObjectServer variants\n\n# Note: This is for _building the Realm library, not for consuming it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "realm/realm-library/proguard-rules-build-objectServer.pro" : {
      "ObjectId" : "09a9d548f61878af5dc2a58226b8a3ca538880bc",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Proguard configuration specific for building the ObjectServer variant.\n\n# Note: This is for _building the Realm library, not for consuming it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "realm/realm-library/proguard-rules-consumer-base.pro" : {
      "ObjectId" : "5054eff9299e01c4e5e91d099623b41d041f8138",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# It's OK not to exist SyncObjectServerFacade in base library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "realm/realm-library/proguard-rules-consumer-common.pro" : {
      "ObjectId" : "fb972bb24561683ce5144cc4e65f8829de1d9c79",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "realm/realm-library/proguard-rules-consumer-objectServer.pro" : {
      "ObjectId" : "d4b249abb80cb8ce06b1ed965a2611090c082970",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "realm/realm-library/src/main/cpp/CMake/RealmCore.cmake" : {
      "ObjectId" : "bedbba6b6b7a56ca14244f4c8fc8656968a6b4b0",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n#\n\n# Copyright 2017 Realm Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n\n###########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create directories that are included in INTERFACE_INCLUDE_DIRECTORIES, as CMake requires they exist at\n\n# configure time, when they'd otherwise not be created until we download and extract core.\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Add the sync released as the library.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link to core/sync debug lib for debug build if it is debug build and linking with debug core is enabled.\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Configure import realm core lib\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# -latomic is not set by default for mips and armv5.\n\n# See https://code.google.com/p/android/issues/detail?id=182094\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Sync static library\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Workaround for old core's funny ABI nicknames\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Add core/sync libraries. Set the core_source_path to build core from source.\n\n# FIXME: Build from sync source is not supported yet.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "realm/realm-library/src/main/cpp/CMakeLists.txt" : {
      "ObjectId" : "70311a5dc4e8fb75ecec6679e0a85b2539f77ca0",
      "LastModified" : "2019-03-20T09:08:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n#\n\n# Copyright 2017 Realm Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n\n###########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find javah\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate compile_commands.json\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initialize common compile & link flags.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setup lcache\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set flag build_SYNC\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Format strings used to represent build parameters: Variant and Type\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generate JNI header files. Each build has its own JNI header in its build_dir/jni_include.\n\n# WARNING: The classes_PATH is not part the public API offered by the Android Gradle Plugin\n\n# so it might change without warning when upgrading the plugin.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# /./ is the workaround for the problem that AS cannot find the jni headers.\n\n# See https://github.com/googlesamples/android-ndk/issues/319\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Download openssl lib\n\n#string(TOLOWER \"${CMAKE_BUILD_TYPE}\" openssl_build_TYPE)\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# FIXME Read the openssl version from core when the core/sync release has that information.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# build application's shared lib\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Hack the memmove bug on Samsung device.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#FIXME uninitialized is reported by query_expression.hpp:1070\n\n#      d.init(ValueBase::m_from_link_list, ValueBase::m_values, D{});\n\n#FIXME maybe-uninitialized is reported by table_view.cpp:272:15:\n\n#     'best.m_nanoseconds' was declared here\n\n#     -Wno-missing-field-initializers disable in object store as well.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# There might be an issue with -Os of ndk gcc 4.9. It will hang the encryption related tests.\n\n# And this issue doesn't seem to impact the core compiling.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-ggdb doesn't play well with -flto\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set link flags\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# JNI source files\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Those source file are only needed for sync.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Object Store source files\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Sync needed Object Store files\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Strip the release so files and backup the unstripped versions\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "realm/realm-library/src/main/cpp/android.toolchain.cmake" : {
      "ObjectId" : "86046dfa457c45792bd7c30485b647ade66fc733",
      "LastModified" : "2018-03-14T23:43:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r10d\n\n#  Requires cmake 2.6.3 or newer (2.8.9 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (and newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - ARMv5TE based CPU with software floating point operations\n\n#        \"armeabi-v7a\" - ARMv7 based devices with hardware FPU instructions\n\n#            this ABI target is used by default\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP\n\n#        \"x86\" - IA-32 instruction set\n\n#        \"mips\" - MIPS32 instruction set\n\n#\n\n#      64-bit ABIs for NDK r10 and newer:\n\n#        \"arm64-v8a\" - ARMv8 AArch64 instruction set\n\n#        \"x86_64\" - Intel64 instruction set (r1)\n\n#        \"mips64\" - MIPS64 instruction set (r6)\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-9 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#      Note: building for \"android-L\" requires explicit configuration.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r10c the possible values are:\n\n#\n\n#        * aarch64-linux-android-4.9\n\n#        * aarch64-linux-android-clang3.4\n\n#        * aarch64-linux-android-clang3.5\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-4.8\n\n#        * arm-linux-androideabi-4.9 (default)\n\n#        * arm-linux-androideabi-clang3.4\n\n#        * arm-linux-androideabi-clang3.5\n\n#        * mips64el-linux-android-4.9\n\n#        * mips64el-linux-android-clang3.4\n\n#        * mips64el-linux-android-clang3.5\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-4.8\n\n#        * mipsel-linux-android-4.9\n\n#        * mipsel-linux-android-clang3.4\n\n#        * mipsel-linux-android-clang3.5\n\n#        * x86-4.6\n\n#        * x86-4.8\n\n#        * x86-4.9\n\n#        * x86-clang3.4\n\n#        * x86-clang3.5\n\n#        * x86_64-4.9\n\n#        * x86_64-clang3.4\n\n#        * x86_64-clang3.5\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"armeabi-v6 with VFP\"\n\n#      (is forced to be ON) ABI.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS or ARM64_V8A or X86_64 or MIPS64\n\n#    will be set true, mutually exclusive. NEON option will be set true\n\n#    if VFP is set to NEON.\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME:\n\n# This is copied from https://dl.google.com/android/repository/cmake-3.4.2909474-linux-x86_64.zip\n\n# because of the android.toolchain.cmake shipped with Android SDK CMake 3.6 doesn't work with our\n\n# JNI build currently (lack of lto linking support.). Two modifications are made to avoid warnings\n\n# with CMake 3.6 -- disable CMAKE_FORCE_CXX_COMPILER & CMAKE_FORCE_C_COMPILER.\n\n# This file should be removed and use the one from Android SDK cmake package when it supports lto.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 197,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# touch toolchain variable to suppress \"unused variable\" warning\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# inherit settings in recursive loads\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this one is important\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this one not so much\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# rpath makes low sense for Android\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NDK search paths\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# known ABIs\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# API level defaults\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# detect current host platform\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 393,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 397,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 411,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# remember found paths\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# try to detect change\n",
        "Line" : 439,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# android NDK layout\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 466,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 478,
        "CharPositionInLine" : 71
      },
      "24" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 483,
        "CharPositionInLine" : 71
      },
      "25" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 487,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 494,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#message(\"machine: !${__machine}!\\narch: !${__arch}!\\nversion: !${__version}!\\ntoolchain: !${__toolchain}!\\n\")\n",
        "Line" : 575,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 596,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 609,
        "CharPositionInLine" : 39
      },
      "32" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# choose target ABI\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# set target ABI options\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 698,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 726,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# choose toolchain\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# choose native API level\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# adjust API level\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# validate\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# remember target ABI\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 902,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 911,
        "CharPositionInLine" : 3
      },
      "46" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 921,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# clang\n",
        "Line" : 956,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 980,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# do nothing\n",
        "Line" : 986,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# before r7\n",
        "Line" : 996,
        "CharPositionInLine" : 42
      },
      "51" : {
        "Text" : "# before r8d\n",
        "Line" : 1004,
        "CharPositionInLine" : 46
      },
      "52" : {
        "Text" : "# before r7\n",
        "Line" : 1009,
        "CharPositionInLine" : 42
      },
      "53" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1021,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1039,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1041,
        "CharPositionInLine" : 137
      },
      "56" : {
        "Text" : "# r7-r8\n",
        "Line" : 1043,
        "CharPositionInLine" : 110
      },
      "57" : {
        "Text" : "# before r7\n",
        "Line" : 1045,
        "CharPositionInLine" : 36
      },
      "58" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1065,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# TODO: check if .so file exists before the renaming\n",
        "Line" : 1068,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# ccache support\n",
        "Line" : 1072,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1085,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Use gcc-ar if we have it for better LTO support.\n",
        "Line" : 1109,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1133,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# CMAKE_FORCE_C_COMPILER( \"${CMAKE_C_COMPILER}\" GNU )\n",
        "Line" : 1135,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# CMAKE_FORCE_CXX_COMPILER( \"${CMAKE_CXX_COMPILER}\" GNU )\n",
        "Line" : 1147,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1156,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1172,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1178,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# NDK flags\n",
        "Line" : 1200,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1217,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1244,
        "CharPositionInLine" : 62
      },
      "73" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1251,
        "CharPositionInLine" : 72
      },
      "74" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1254,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1265,
        "CharPositionInLine" : 91
      },
      "76" : {
        "Text" : "# STL\n",
        "Line" : 1280,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# C objects:\n",
        "Line" : 1291,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1309,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# before r7\n",
        "Line" : 1310,
        "CharPositionInLine" : 40
      },
      "80" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1311,
        "CharPositionInLine" : 1
      },
      "81" : {
        "Text" : "# linker flags\n",
        "Line" : 1331,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1335,
        "CharPositionInLine" : 1
      },
      "83" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1342,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# after r8b\n",
        "Line" : 1363,
        "CharPositionInLine" : 48
      },
      "85" : {
        "Text" : "# version 4.6\n",
        "Line" : 1371,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "# cache flags\n",
        "Line" : 1393,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1404,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# finish flags\n",
        "Line" : 1410,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# pie/pic\n",
        "Line" : 1427,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# configure rtti\n",
        "Line" : 1437,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1446,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1457,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1459,
        "CharPositionInLine" : 111
      },
      "94" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1462,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# setup output directories\n",
        "Line" : 1499,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1516,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1528,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1532,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1535,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1541,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1563,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1585,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1622,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1624,
        "CharPositionInLine" : 1
      },
      "105" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1626,
        "CharPositionInLine" : 37
      },
      "106" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1630,
        "CharPositionInLine" : 1
      },
      "107" : {
        "Text" : "# Variables need by cmAndroidGradleBuild to generate android_gradle_build.json\n",
        "Line" : 1634,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK : path to your NDK install\n\n#   NDK_CCACHE : path to your ccache executable\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   ARM64_V8A : TRUE for arm64-v8a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   X86_64 : TRUE if configured for x86_64\n\n#   MIPS : TRUE if configured for mips\n\n#   MIPS64 : TRUE if configured for mips64\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : from r5 to r10d; set only for NDK\n\n#   ANDROID_NDK_RELEASE_NUM : numeric ANDROID_NDK_RELEASE version (1000*major+minor)\n\n#   ANDROID_ARCH_NAME : \"arm\", \"x86\", \"mips\", \"arm64\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1638,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 109
    }
  },
  "FileTypes" : {
    "CMAKE" : 3,
    "QMAKE" : 10
  },
  "ElapsedTime" : 4469
}