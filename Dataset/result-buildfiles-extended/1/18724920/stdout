{
  "Repository" : "18724920",
  "Revision" : "HEAD",
  "ObjectId" : "018170835e354949c25024ad9d4c6e4e419be6b8",
  "CommitTime" : "2019-01-15T13:41:31Z",
  "Files" : {
    "docs/Makefile" : {
      "ObjectId" : "765261624df44ce95fd05642505f1d5b91eaded5",
      "LastModified" : "2016-09-22T14:55:48Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "{{cookiecutter.project_slug}}/Makefile" : {
      "ObjectId" : "8e7c3f09c2092ae2fe09418c04b84d42807c9d87",
      "LastModified" : "2018-11-13T13:32:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Command variables\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Helper functions to display messagse\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2,
      "Errorlog" : "line 37:18 token recognition error at: '\"\\0'\nline 37:33 token recognition error at: '\\0'\nline 38:18 token recognition error at: '\\0'\nline 38:32 token recognition error at: '\\0'\nline 87:127 token recognition error at: '\" | ./manage.py shell\\n\\nupdate: update_pip update_node_modules\\n\\nupdate_pip:\\n\\t$(call ECHO_BLUE,Installing Python requirements)\\n\\t@echo '------------------------------'\\n\\t( \\\\n\\t\\t. $(VIRTUALENV_NAME)/bin/activate; \\\\n\\t\\t $(PIP_INSTALL_CMD) -r requirements.txt; \\\\n\\t)\\n\\nupdate_node_modules:\\n\\t$(call ECHO_BLUE,Install static dependencies)\\n\\t@echo '---------------------------'\\n\\tnpm install --prefix ./pages/static/\\n\\ntest:\\n# Run the test cases\\n\\t( \\\\n\\t\\t. $(VIRTUALENV_NAME)/bin/activate; \\\\n\\t\\t$(MANAGE_CMD) test; \\\\n\\t)\\n\\nfunc_test:\\n# Run the test cases\\n\\t( \\\\n\\t\\t. $(VIRTUALENV_NAME)/bin/activate; \\\\n\\t\\t$(MANAGE_CMD) test functional_tests; \\\\n\\t)\\n\\nstatic_site:\\n# Static Site generation\\n\\t$(call ECHO_BLUE,Generating Static Site)\\n\\t$(MANAGE_CMD) build\\n\\t$(MANAGE_CMD) collectstatic\\n\\trsync -av static static_build/\\n\\nnode_modules:\\n# Install Node modules\\n\\tnpm install --prefix ./pages/static/\\n\\ncompress_images:\\n# Minify Images in media\\n\\tgrunt imagemin\\n\\npre_task:\\n\\t$(call ECHO_BLUE, Provision the $(DEPLOY_ENV) server )\\n\\t(\\\\n\\t\\tcd ansible; \\\\n\\t\\t$(PLAYBOOK) -i $(DEPLOY_ENV) pre_task.yml; \\\\n\\t)\\n\\ndeploy_user:\\n\\t$(call ECHO_BLUE, Create the deploy user for based $(DEPLOY_ENV) )\\n\\t(\\\\n\\t\\tcd ansible; \\\\n\\t\\t$(PLAYBOOK) -i $(DEPLOY_ENV) provision.yml --tags user; \\\\n\\t)\\n\\nprovision:\\n\\t$(call ECHO_BLUE, Provision the $(DEPLOY_ENV) server )\\n\\t(\\\\n\\t\\tcd ansible; \\\\n\\t\\t$(PLAYBOOK) -i $(DEPLOY_ENV) provision.yml --skip-tags user; \\\\n\\t)\\n\\ndeploy:\\n\\t$(call ECHO_BLUE, deploy changes to the $(DEPLOY_ENV) server )\\n\\t(\\\\n\\t\\tcd ansible; \\\\n\\t\\t$(PLAYBOOK) -i $(DEPLOY_ENV) deploy.yml;  \\\\n\\t)\\n\\nlivereload:\\n\\t$(call ECHO_BLUE,Starting server with livereload)\\n\\t@echo '---------------------------'\\n\\t$(MANAGE_CMD) livereload\\n\\nclean:\\n# Remove all *.pyc, .DS_Store and temp files from the project\\n\\t$(call ECHO_BLUE,removing .pyc files...)\\n\\t@find . -name '*.pyc' -exec rm -f {} \\;\\n\\t$(call ECHO_BLUE,removing static files...)\\n\\t@rm -rf $(PROJECT_NAME)/_static/\\n\\t$(call ECHO_BLUE,removing temp files...)\\n\\t@rm -rf $(PROJECT_NAME)/_tmp/\\n\\t$(call ECHO_BLUE,removing .DS_Store files...)\\n\\t@find . -name '.DS_Store' -exec rm {} \\;\\n\\nshell:\\n# Run a local shell for debugging\\n\\t( \\\\n\\t\\t. $(VIRTUALENV_NAME)/bin/activate; \\\\n\\t\\t$(MANAGE_CMD) shell; \\\\n\\t)\\n\u0000'\n"
    },
    "{{cookiecutter.project_slug}}/docs/Makefile" : {
      "ObjectId" : "a5d4ea96ed3b88c3b9c877be329a43ed57ef6e16",
      "LastModified" : "2016-09-22T14:55:48Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 1197
}