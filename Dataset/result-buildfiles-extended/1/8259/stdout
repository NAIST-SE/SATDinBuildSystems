{
  "Repository" : "8259",
  "Revision" : "HEAD",
  "ObjectId" : "986d178bc260db701d85b24f0b306dac812759ca",
  "CommitTime" : "2019-04-15T18:21:19Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "8a4eca47a175fd12d75e768413df70ccf6c6a35d",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Please note this also sets the default for the CUDA C++ version; see the comment below.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Force CUDA C++ standard to be the same as the C++ standard used.\n\n#\n\n# Now, CMake is unaligned with reality on standard versions: https://gitlab.kitware.com/cmake/cmake/issues/18597\n\n# which means that using standard CMake methods, it's impossible to actually sync the CXX and CUDA versions for pre-11\n\n# versions of C++; CUDA accepts 98 but translates that to 03, while CXX doesn't accept 03 (and doesn't translate that to 03).\n\n# In case this gives You, dear user, any trouble, please escalate the above CMake bug, so we can support reality properly.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# There's a ton of these in the TBB backend, even though the code is correct.\n\n# TODO: silence these warnings in code instead\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# TODO Enable /Wall\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Disabled loss-of-data conversion warnings.\n\n# TODO Re-enable.\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Suppress numeric conversion-to-bool warnings.\n\n# TODO Re-enable.\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Disable warning about applying unary operator- to unsigned type.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# In GCC 4.4, the CUDA backend's kernel launch templates cause\n\n# impossible-to-decipher \"'<anonymous>' is used uninitialized in this\n\n# function\" warnings, so we disable uninitialized variable warnings.\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This isn't available until GCC 4.3, and misfires on TMP code until\n\n# GCC 4.5.\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# GCC 7.3 complains about name mangling changes due to `noexcept`\n\n# becoming part of the type system; we don't care.\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# thrust::complex can't really be made trivially copyable in pre-11.\n\n# Disable a warning about a non-trivially-copyable type being memmoved that was added to GCC 8.\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# xlC and Clang warn about unused parameters in uninstantiated templates.\n\n# This causes xlC to choke on the OMP backend, which is mostly #ifdef'd out\n\n# (and thus has unused parameters) when you aren't using it.\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# -Wunneeded-internal-declaration misfires in the unit test framework\n\n# on older versions of Clang.\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For every public header, build a translation unit containing `#include <header>`\n\n# to let the compiler try to figure out warnings in that header if it is not otherwise\n\n# included in tests, and also to verify if the headers are modular enough.\n\n# .inl files are not globbed for, because they are not supposed to be used as public\n\n# entrypoints.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Get all .h files...\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ...then remove all system specific headers...\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ...then add all headers specific to the selected host and device systems back again...\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ...and remove all the detail headers (also removing the detail headers from the selected systems).\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# List of headers that aren't implemented for all backends, but are implemented for CUDA.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List of headers that aren't implemented for all backends, but are implemented for CPP.\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# List of headers that aren't implemented for all backends, but are implemented for TBB.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# List of headers that aren't implemented for all backends, but are implemented for OMP.\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# List of all partially implemented headers.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This header is partially implemented on _some_ backends...\n",
        "Line" : 337,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# ...but not on the selected one.\n",
        "Line" : 339,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Handle tests.\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# When CUDA is disabled, explain to CMake that testframework.cu is actually a C++ file.\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# List of tests that aren't implemented for all backends, but are implemented for CUDA.\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# List of tests that aren't implemented for all backends, but are implemented for CPP.\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# List of tests that aren't implemented for all backends, but are implemented for TBB.\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# List of tests that aren't implemented for all backends, but are implemented for OMP.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# List of all partially implemented tests.\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Temporarily disable until NVBug 2492786 is fixed.\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# TODO: Per-test flags.\n",
        "Line" : 449,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# This test is partially implemented on _some_ backends...\n",
        "Line" : 462,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# ...but not on the selected one.\n",
        "Line" : 464,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# Test files are generally .cu; if CUDA is not enabled, CMake doesn't know what to\n\n# do with them. But since they are pretty much just C++, we can compile them with\n\n# non-nvcc C++ compilers... but we need to tell CMake that they are, in fact, just C++.\n",
        "Line" : 473,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# THRUST_TEST_CREATION_ADDITIONAL is actually a CMake keyword (sometimes).\n",
        "Line" : 485,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# THRUST_TEST_CREATION_ADDITIONAL is actually a CMake keyword (sometimes).\n",
        "Line" : 512,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Handle examples.\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# TODO: Per-example flags.\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Example files are generally .cu; if CUDA is not enabled, CMake doesn't know what to\n\n# do with them. But since they are pretty much just C++, we can compile them with\n\n# non-nvcc C++ compilers... but we need to tell CMake that they are, in fact, just C++.\n",
        "Line" : 601,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 42
    },
    "Makefile" : {
      "ObjectId" : "12f9d964c9f284f9389e10234ccc3557de8f8198",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.\n\n#\n\n# NOTICE TO USER:\n\n#\n\n# This source code is subject to NVIDIA ownership rights under U.S. and\n\n# international Copyright laws.\n\n#\n\n# This software and the information contained herein is being provided\n\n# under the terms and conditions of a Source Code License Agreement.\n\n#\n\n# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE\n\n# CODE FOR ANY PURPOSE.  IT IS PROVIDED \"AS IS\" WITHOUT EXPRESS OR\n\n# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH\n\n# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.\n\n# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL,\n\n# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n\n# OF USE, DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n\n# OR OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION WITH THE USE\n\n# OR PERFORMANCE OF THIS SOURCE CODE.\n\n#\n\n# U.S. Government End Users.   This source code is a \"commercial item\" as\n\n# that term is defined at  48 C.F.R. 2.101 (OCT 1995), consisting  of\n\n# \"commercial computer  software\"  and \"commercial computer software\n\n# documentation\" as such terms are  used in 48 C.F.R. 12.212 (SEPT 1995)\n\n# and is provided to the U.S. Government only as a commercial end item.\n\n# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through\n\n# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the\n\n# source code with only those rights set forth herein.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Makefile for building Thrust unit test driver\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force C++11 mode. NVCC will ignore it if the host compiler doesn't support it.\n\n#export CXX_STD = c++11\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use these environment variables to control what gets built:\n\n#\n\n#   TEST_ALL\n\n#   TEST_UNITTESTS\n\n#   TEST_EXAMPLES\n\n#   TEST_BENCH\n\n#   TEST_OTHER\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# copy existing projects\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# empty PROJECTS\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# populate PROJECTS with unit tests.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Once PROJECTS is populated with unit tests, re-add the previous projects.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Copy existing projects.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Empty PROJECTS.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Populate PROJECTS with examples.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Once PROJECTS is populated with examples, re-add the previous projects.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Print host compiler version.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# PGI\n",
        "Line" : 136,
        "CharPositionInLine" : 24
      },
      "14" : {
        "Text" : "# XLC\n",
        "Line" : 139,
        "CharPositionInLine" : 24
      },
      "15" : {
        "Text" : "# GCC, ICC or Clang AKA the sane ones.\n",
        "Line" : 141,
        "CharPositionInLine" : 24
      },
      "16" : {
        "Text" : "# MSVC\n",
        "Line" : 145,
        "CharPositionInLine" : 24
      },
      "17" : {
        "Text" : "# cl.exe run without any options will print its version info and exit.\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# QNX's GCC complains if QNX_HOST and QNX_TARGET aren't defined in the\n\n# environment.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#### CCBIN         : $(CCBIN))\n\n#### CCBIN VERSION : $(shell $(CCBIN_ENVIRONMENT) $(CCBIN) $(VERSION_FLAG)))\n\n#### CXX_STD       : $(CXX_STD))\n",
        "Line" : 157,
        "CharPositionInLine" : 7
      },
      "20" : {
        "Text" : "# XXX Deprecated, remove.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/AppendOptionIfAvailable.cmake" : {
      "ObjectId" : "8df9f4a330eec141c393b16bdf63a394415e14f3",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "87df0be8e81db100c73850fc0757fd1e34001c2b",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nCheckCXXCompilerFlag\n------------------------\n\nCheck whether the CXX compiler supports a given flag.\n\n.. command:: check_cxx_compiler_flag\n\n  ::\n\n    check_cxx_compiler_flag(<flag> <var>)\n\n  Check that the ``<flag>`` is accepted by the compiler without\n  a diagnostic.  Stores the result in an internal cache entry\n  named ``<var>``.\n\nThis command temporarily sets the ``CMAKE_REQUIRED_DEFINITIONS`` variable\nand calls the ``check_cxx_source_compiles`` macro from the\n:module:`CheckCXXSourceCompiles` module.  See documentation of that\nmodule for a listing of variables that can otherwise modify the build.\n\nA positive result from this check indicates only that the compiler did not\nissue a diagnostic message when given the flag.  Whether the flag has any\neffect or even a specific one is beyond the scope of this module.\n\n.. note::\n  Since the :command:`try_compile` command forwards flags from variables\n  like :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>`, unknown flags\n  in such variables may cause a false negative for this check.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normalize locale during test compilation.\n",
        "Line" : 43,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 51,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# GNU\n",
        "Line" : 52,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 5
    },
    "cmake/CheckCXXSourceCompiles.cmake" : {
      "ObjectId" : "38e915c2751278ed8d913b7512748d7bb8d5703f",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nCheckCXXSourceCompiles\n----------------------\n\nCheck if given C++ source compiles and links into an executable.\n\n.. command:: check_cxx_source_compiles\n\n  ::\n\n    check_cxx_source_compiles(code resultVar [FAIL_REGEX regex1 [regex2...]])\n\n  Check that the source supplied in ``code`` can be compiled as a C++ source\n  file and linked as an executable (so it must contain at least a ``main()``\n  function). The result will be stored in the internal cache variable specified\n  by ``resultVar``, with a boolean true value for success and boolean false for\n  failure. If ``FAIL_REGEX`` is provided, then failure is determined by\n  checking if anything in the output matches any of the specified regular\n  expressions.\n\n  The underlying check is performed by the :command:`try_compile` command. The\n  compile and link commands can be influenced by setting any of the following\n  variables prior to calling ``check_cxx_source_compiles()``:\n\n  ``CMAKE_REQUIRED_FLAGS``\n    Additional flags to pass to the compiler. Note that the contents of\n    :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` and its associated\n    configuration-specific variable are automatically added to the compiler\n    command before the contents of ``CMAKE_REQUIRED_FLAGS``.\n\n  ``CMAKE_REQUIRED_DEFINITIONS``\n    A :ref:`;-list <CMake Language Lists>` of compiler definitions of the form\n    ``-DFOO`` or ``-DFOO=bar``. A definition for the name specified by\n    ``resultVar`` will also be added automatically.\n\n  ``CMAKE_REQUIRED_INCLUDES``\n    A :ref:`;-list <CMake Language Lists>` of header search paths to pass to\n    the compiler. These will be the only header search paths used by\n    ``try_compile()``, i.e. the contents of the :prop_dir:`INCLUDE_DIRECTORIES`\n    directory property will be ignored.\n\n  ``CMAKE_REQUIRED_LIBRARIES``\n    A :ref:`;-list <CMake Language Lists>` of libraries to add to the link\n    command. These can be the name of system libraries or they can be\n    :ref:`Imported Targets <Imported Targets>` (see :command:`try_compile` for\n    further details).\n\n  ``CMAKE_REQUIRED_QUIET``\n    If this variable evaluates to a boolean true value, all status messages\n    associated with the check will be suppressed.\n\n  The check is only performed once, with the result cached in the variable\n  named by ``resultVar``. Every subsequent CMake run will re-use this cached\n  value rather than performing the check again, even if the ``code`` changes.\n  In order to force the check to be re-evaluated, the variable named by\n  ``resultVar`` must be manually removed from the cache.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/common_variables.cmake" : {
      "ObjectId" : "2ff72eb53feb96508b3ac85c73960af27895fd19",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/run_example.cmake" : {
      "ObjectId" : "d51152d1e261d37fe198639ed61fad6bcc2d1242",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/run_test.cmake" : {
      "ObjectId" : "0d03129f0160c7918126d3cda7fccf66d2cc43d2",
      "LastModified" : "2019-03-01T03:11:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 7,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2604
}