{
  "Repository" : "10625291",
  "Revision" : "HEAD",
  "ObjectId" : "9ca834be0fe4773a069243d89661f0500f71cbff",
  "CommitTime" : "2019-03-07T20:03:10Z",
  "Files" : {
    "src/libtermkey/Makefile" : {
      "ObjectId" : "bfbc044801ade8b37d779c2d9ca4b5fcd27a33c5",
      "LastModified" : "2019-03-07T20:03:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#man/}.gz; \\\n\tdone\n",
        "Line" : 125,
        "CharPositionInLine" : 39
      },
      "1" : {
        "Text" : "#man/}.gz; \\\n\tdone\n",
        "Line" : 128,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 2
    },
    "src/libuv/CMakeLists.txt" : {
      "ObjectId" : "5dc61eb825a2c509579ce2625ee42879f56ffc81",
      "LastModified" : "2019-02-22T20:06:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: determine CMAKE_SYSTEM_NAME on OS/390.  Currently assumes \"OS/390\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Android has pthread as part of its c library, not as a separate\n\n# libpthread.so.\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Now for some gibbering horrors from beyond the stars...\n",
        "Line" : 372,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/libuv/Makefile.am" : {
      "ObjectId" : "7e49d8ad0bee168eaa99357300bbf9d83a4abadf",
      "LastModified" : "2019-02-22T20:06:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013, Ben Noordhuis <info@bnoordhuis.nl>\n\n#\n\n# Permission to use, copy, modify, and/or distribute this software for any\n\n# purpose with or without fee is hereby granted, provided that the above\n\n# copyright notice and this permission notice appear in all copies.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Can't be turned into a CC_CHECK_CFLAGS in configure.ac, it makes compilers\n\n# on other platforms complain that the argument is unused during compilation.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# WINNT\n",
        "Line" : 90,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# WINNT\n",
        "Line" : 115,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Can't be turned into a CC_CHECK_CFLAGS in configure.ac, it makes compilers\n\n# on other platforms complain that the argument is unused during compilation.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/libvterm/Makefile" : {
      "ObjectId" : "683175d292a89692007c42d5513c3f61e1368d75",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# DIST CUT\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/luajit/Makefile" : {
      "ObjectId" : "ecce9ec5f3fa8c81b19769d837552b2110213b84",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT top level Makefile for installation. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Note: src/Makefile has many more configurable options.\n\n#\n\n# ##### This Makefile is NOT useful for Windows! #####\n\n# For MSVC, please follow the instructions given in src/msvcbuild.bat.\n\n# For MinGW and Cygwin, cd to src and run make with the Makefile there.\n\n#\n\n# Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#\n\n# Change the installation path as needed. This automatically adjusts\n\n# the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/luajit/src/Makefile" : {
      "ObjectId" : "24e8c0e0e6580d100c21a23b3ae69fcd64bd5420",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= $(DEFAULT_CC) -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86 only: it's recommended to compile at least for i686. Better yet,\n\n# compile for an architecture that has SSE2, too (-msse -msse2).\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to generate debug information:\n\n#CCDEBUG= -g\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Static mode creates a static library and a statically linked luajit.\n\n#BUILDMODE= static\n\n#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT\n\n#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n##############################################################################\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. This option cannot be enabled on x64, since realloc usually\n\n# doesn't return addresses in the right address range.\n\n# OTOH this option is mandatory for Valgrind's memcheck tool on x64 and\n\n# the only way to get useful results from it for all other architectures.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##############################################################################\n\n# Host system detection.\n\n##############################################################################\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##############################################################################\n\n# Target system detection.\n\n##############################################################################\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 511,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#Q=\n\n#E= @:\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24,
      "Errorlog" : "line 535:19 token recognition error at: '\\m'\nline 536:19 token recognition error at: '\\b'\nline 589:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 590:29 token recognition error at: '\\1'\nline 591:24 token recognition error at: '\\S'\nline 592:22 token recognition error at: '\\S'\nline 593:21 token recognition error at: '\\S'\nline 688:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    },
    "src/luarocks/Makefile" : {
      "ObjectId" : "ae308a672a1ee8043c979dfc9c7987b0c8b78798",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0,
      "Errorlog" : "line 15:42 token recognition error at: '\\1'\nline 15:53 token recognition error at: '\\1'\nline 15:55 token recognition error at: '\\1'\n"
    },
    "src/luv/CMakeLists.txt" : {
      "ObjectId" : "50239fd10718283422144baa2da1851508cae7e6",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# faster evaluation of variable references\n",
        "Line" : 4,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# execute_process(COMMAND which luajit OUTPUT_VARIABLE LUAJIT)\n\n# set(CMAKE_SHARED_MODULE_CREATE_C_FLAGS\n\n#   \"${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -bundle_loader ${LUAJIT}\"\n\n# )\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# replace /MD to /MT to avoid link msvcr*.dll\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/luv/Makefile" : {
      "ObjectId" : "ec85f4099cd76185982c59c54d78561d2a53f0c0",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/luv/cmake/Modules/FindLibuv.cmake" : {
      "ObjectId" : "7b098480cc03cf344eb1f00c28d6c0638becab15",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n#  Copyright 2016 The Luvit Authors. All Rights Reserved.\n\n#\n\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n#  you may not use this file except in compliance with the License.\n\n#  You may obtain a copy of the License at\n\n#\n\n#      http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n#  Unless required by applicable law or agreed to in writing, software\n\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n#  See the License for the specific language governing permissions and\n\n#  limitations under the License.\n\n#=============================================================================\n\n# Locate libuv library\n\n# This module defines\n\n#  LIBUV_FOUND, if false, do not try to link to libuv\n\n#  LIBUV_LIBRARIES\n\n#  LIBUV_INCLUDE_DIR, where to find uv.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/luv/cmake/Modules/FindLuaJIT.cmake" : {
      "ObjectId" : "fedcc3288a62f883b3b43d66fa0b86f29ec056ef",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Copyright 2013 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# We use code from the CMake project to detect the Lua version.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Locate LuaJIT library\n\n# This module defines\n\n#  LUAJIT_FOUND, if false, do not try to link to Lua JIT\n\n#  LUAJIT_LIBRARIES\n\n#  LUAJIT_INCLUDE_DIR, where to find lua.h\n\n#\n\n# Additionally it defines the Lua API/ABI version:\n\n#  LUA_VERSION_STRING - the version of Lua found\n\n#  LUA_VERSION_MAJOR  - the major version of Lua\n\n#  LUA_VERSION_MINOR  - the minor version of Lua\n\n#  LUA_VERSION_PATCH  - the patch version of Lua\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# At least 5.[012] have different ways to express the version\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/luv/deps/lua.cmake" : {
      "ObjectId" : "4a820d07a3aa43a944d2853ebe4ef53b0226818c",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Modfied from luajit.cmake\n\n# Added LUA_ADD_EXECUTABLE Ryan Phillips <ryan at trolocsis.com>\n\n# This CMakeLists.txt has been first taken from LuaDist\n\n# Copyright (C) 2007-2011 LuaDist.\n\n# Created by Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# Debugged and (now seriously) modified by Ronan Collobert, for Torch7\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#project(Lua53 C)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ugly warnings\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Various includes\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## SOURCES\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## GENERATE\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# to say that \"it is OK that the obj-files do not exist before build time\"\n",
        "Line" : 155,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 7
    },
    "src/luv/deps/luajit.cmake" : {
      "ObjectId" : "2de05720ddb25185da0c09e240f585933d1c7d1e",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Added LUA_ADD_EXECUTABLE Ryan Phillips <ryan at trolocsis.com>\n\n# This CMakeLists.txt has been first taken from LuaDist\n\n# Copyright (C) 2007-2011 LuaDist.\n\n# Created by Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# Debugged and (now seriously) modified by Ronan Collobert, for Torch7\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#project(LuaJIT C ASM)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ugly warnings\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Various includes\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# LuaJIT specific\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "######\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## SOURCES\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## GENERATE\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## COMPILE\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# this is an object file\n",
        "Line" : 397,
        "CharPositionInLine" : 29
      },
      "10" : {
        "Text" : "# to say that \"it is OK that the obj-files do not exist before build time\"\n",
        "Line" : 398,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 11
    },
    "src/luv/deps/uv.cmake" : {
      "ObjectId" : "9bfbabe76fbe27cbe101c725b73044aa3c3af406",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Modifications\n\n## Copyright 2014 The Luvit Authors. All Rights Reserved.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Original Copyright\n\n# Copyright (c) 2014 David Capello\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining\n\n# a copy of this software and associated documentation files (the\n\n# \"Software\"), to deal in the Software without restriction, including\n\n# without limitation the rights to use, copy, modify, merge, publish,\n\n# distribute, sublicense, and/or sell copies of the Software, and to\n\n# permit persons to whom the Software is furnished to do so, subject to\n\n# the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\n# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Freebsd\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## OpenBSD\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Linux\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## SunOS\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Darwin\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/msgpack/CMakeLists.txt" : {
      "ObjectId" : "8d3c50deeba58973f9dad292d5ec99e720e7428c",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add alias for subdirectories\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# MEMORYCHECK_COMMAND_OPTIONS needs to place prior to CTEST_MEMORYCHECK_COMMAND\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Doxygen\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/msgpack/Files.cmake" : {
      "ObjectId" : "90ae2acc8886277351f8aab0d4470fc8750e1e2a",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/example/CMakeLists.txt" : {
      "ObjectId" : "ea3c7db2e7fa6259dea26e3ff9ac358c0d8e9656",
      "LastModified" : "2017-06-17T20:28:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/example/boost/CMakeLists.txt" : {
      "ObjectId" : "cf7f4f86e34b7e0f68d63c1cdbe81798d7ab90dd",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/example/c/CMakeLists.txt" : {
      "ObjectId" : "363d5c11f01610cf8f883142e5748e3feff7203f",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/example/cpp03/CMakeLists.txt" : {
      "ObjectId" : "4af7f6d1a9820fa1215a252b89a02fb0b637acef",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/example/cpp11/CMakeLists.txt" : {
      "ObjectId" : "c932a60356355a7ed8961ee23db902cbfcaccd79",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/example/x3/CMakeLists.txt" : {
      "ObjectId" : "05725fb11ee72655d47d0d118e54bb97daed2e5a",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/msgpack/test/CMakeLists.txt" : {
      "ObjectId" : "797d7005faead1cedb89de6176b5bb731d22d738",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fuzzers are cpp11 only\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "src/unibilium/Makefile" : {
      "ObjectId" : "65fa7edd2b6d7aeb3a66b27fafa858ba5f6eb4c1",
      "LastModified" : "2018-05-20T20:05:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# I am implementation $LT_REVISION of binary interface $LT_CURRENT, which is\n\n# a superset of all interfaces back to $LT_CURRENT - $LT_AGE.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 49:54 token recognition error at: '\\d'\n"
    }
  },
  "FileTypes" : {
    "CMAKE" : 16,
    "MAKEFILE" : 7,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2243
}