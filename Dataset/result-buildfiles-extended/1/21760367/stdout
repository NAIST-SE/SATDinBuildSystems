{
  "Repository" : "21760367",
  "Revision" : "HEAD",
  "ObjectId" : "4dedc68b2374e5d2379bbbc0414afc371555a671",
  "CommitTime" : "2018-08-15T15:46:48Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0a1a9d23d21d2bdf37f5afe16e0fe726b322d312",
      "LastModified" : "2018-08-15T15:45:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add to path in order to pick up the FindXXX.cmake files included in this project\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This project depends on ROOT\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Perform some setup standard to STAR experiment environment\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "StGenericVertexMaker/macros/Makefile" : {
      "ObjectId" : "06c76c169cce8aa05cdbc0dc23a7802774bb8f2f",
      "LastModified" : "2009-12-03T17:34:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#DEBUG  =-g -O \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#laptop: CFLAGS   = -Wall $(DEBUG) $(DEFINES) -ansi -I /Applications/root/include/\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#laptop: RootLibDir  =/Applications/root/lib/\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-lCint -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix  -lm -ldl -rdynamic \n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# access to target:  $@\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "StSecondaryVertexMaker/doc/Makefile" : {
      "ObjectId" : "b7ef387817b0bc85a3cb9395b8cf23a5990a6b8c",
      "LastModified" : "2003-05-07T13:18:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# PSNUP\t\t= /usr/local/bin/psnup -2 -pletter -d -b10\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindROOT.cmake" : {
      "ObjectId" : "e0d6894815a32b8897fe08180ea7b8a5762179a8",
      "LastModified" : "2018-08-15T15:45:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds ROOT instalation\n\n# This module sets up ROOT information\n\n# It defines:\n\n# ROOT_FOUND          If the ROOT is found\n\n# ROOT_INCLUDE_DIR    PATH to the include directory\n\n# ROOT_INCLUDE_DIRS   PATH to the include directories (not cached)\n\n# ROOT_LIBRARIES      Most common libraries\n\n# ROOT_<name>_LIBRARY Full path to the library <name>\n\n# ROOT_LIBRARY_DIR    PATH to the library directory\n\n# ROOT_DEFINITIONS    Compiler definitions\n\n# ROOT_CXX_FLAGS      Compiler flags to used by client packages\n\n# ROOT_C_FLAGS        Compiler flags to used by client packages\n\n#\n\n# Updated by K. Smith (ksmith37@nd.edu) to properly handle\n\n#  dependencies in ROOT_GENERATE_DICTIONARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function ROOT_GENERATE_DICTIONARY( dictionary\n\n#                                    header1 header2 ...\n\n#                                    LINKDEF linkdef1 ...\n\n#                                    OPTIONS opt1...)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Is this header a globbing expression?\n",
        "Line" : 101,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# skip LinkDefs from globbing result\n",
        "Line" : 104,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "#---Get LinkDef.h file------------------------------------\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#---call rootcint------------------------------------------\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function REFLEX_GENERATE_DICTIONARY(dictionary\n\n#                                     header1 header2 ...\n\n#                                     SELECTION selectionfile ...\n\n#                                     OPTIONS opt1...)\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#---Get Selection file------------------------------------\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#---Get preprocessor definitions--------------------------\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#---Nanes and others---------------------------------------\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#set(gccxmlopts \"--gccxmlopt=\\'--gccxml-cxxflags -m64 \\'\")\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#set(rootmapname ${dictionary}Dict.rootmap)\n\n#set(rootmapopts --rootmap=${rootmapname} --rootmap-lib=${libprefix}${dictionary}Dict)\n\n#---Check GCCXML and get path-----------------------------\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---Actual command----------------------------------------\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#\n\n# function ROOT_GENERATE_LINKDEF( header_linkdef HEADERS header1 header2 ...)\n\n#\n\n# Generates a basic LinkDef header (header_linkdef) by parsing the user provided\n\n# header files with standard linux utilities such as grep, awk, and sed.\n\n#\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Create the list of header files with ClassDef macros\n",
        "Line" : 216,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# skip LinkDefs from globbing result\n",
        "Line" : 224,
        "CharPositionInLine" : 35
      },
      "20" : {
        "Text" : "# Build a list of user_headers to use in dictionary generation\n",
        "Line" : 228,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Create and write contents to LinkDef file\n",
        "Line" : 251,
        "CharPositionInLine" : 3
      },
      "22" : {
        "Text" : "#\n\n# function ROOT_GENERATE_LINKDEF( user_base_file_name HEADERS header1 header2 ...)\n\n#\n\n# A high level wrapper around the above function to simplify user calls\n\n#\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cmake/FindSTAR.cmake" : {
      "ObjectId" : "368d1f68e9a940f3e198f56857964d0589eb4493",
      "LastModified" : "2018-08-15T15:45:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find star soft include directories and libraries\n\n#\n\n#  STAR_FOUND\n\n#  STAR_INCLUDE_DIRS\n\n#  STAR_LIBRARIES\n\n#  STAR_LIBRARY_DIRS\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make use of the $STAR_HOST_SYS evironment variable. If it is set use it as the\n\n# typical STAR installation prefix\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These paths should point to where the STAR soft is installed\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# The following is just a workaround for the STAR code design\n\n# disrespecting the file hierarchy in the installed directory\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Set STAR_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/StarCommon.cmake" : {
      "ObjectId" : "c8c2515f09166f236dfd1fa5b8879560eec82566",
      "LastModified" : "2018-08-15T15:45:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Load this cmake file only once\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default build shared libraries but allow the user to change if desired\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Special treatment of linker options for MacOS X to get a linux-like behavior for gcc\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define common STAR_ and CMAKE_ variables used to build the STAR code\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -D_UCMLOGGER_ required by StStarLogger\n\n# -DNEW_DAQ_READER required by StTofHitMaker\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove dependency of \"install\" target on \"all\" target. This allows to\n\n# build and install individual libraries\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make use of the $STAR_HOST_SYS evironment variable. If it is set use it as the\n\n# typical STAR installation prefix\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# library built from StarVMC/Geometry\n",
        "Line" : 55,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : "# library built from StarVMC/Geometry\n",
        "Line" : 60,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : "# requires subdir processing\n\n# blacklisted in cons\n\n# missing from lib/\n\n# requires qt4/include/QtGui\n\n# fortran error\n\n# blacklisted in cons\n",
        "Line" : 65,
        "CharPositionInLine" : 27
      },
      "10" : {
        "Text" : "# needs FindFastJet.cmake\n\n# blacklisted due to error in fortran code\n\n# blacklisted in cons\n\n# missing from lib/\n",
        "Line" : 72,
        "CharPositionInLine" : 27
      },
      "11" : {
        "Text" : "#\n\n# Generates a list of header files from which a ROOT dictionary can be created for\n\n# a given subdirectory `star_lib_dir`. The list is put into the `headers_for_dict`\n\n# variable that is returned to the parent scope. Only *.h and *.hh files\n\n# are selected while any LinkDef files are ignored.\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Get all header files in 'star_lib_dir'\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Create an empty list\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# star_lib_dir_headers should containd absolute paths to globed headers\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Skip LinkDef files from globbing result\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#\n\n# Generates ${star_lib_dir}_LinkDef.h and ${star_lib_dir}_DictInc.h header files\n\n# used in ROOT dictionary generation by rootcint/rootcling. Only header files\n\n# passed in LINKDEF_HEADERS argument are used. The user can optionally pass an\n\n# existing LinkDef file in LINKDEF argument to be incorporated in the generated\n\n# ${star_lib_dir}_LinkDef.h\n\n#\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set default name for LinkDef file\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Pass both files to get_likdef.sh as -o arguments\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Generate the above files to be used in dictionary generation by ROOT\n",
        "Line" : 136,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "#\n\n# Generates a ROOT dictionary for `star_lib_dir` in ${STAR_SRC}.\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Search for default LinkDef if not specified\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Get the first LinkDef from the list\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# If the user provided header files use them in addition to automatically\n\n# collected ones.\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# This is a hack for the call to this function from STAR_ADD_LIBRARY_GEOMETRY() where the\n\n# headers are generated at runtime and cannot be globbed. So, we can specify them by hand.\n",
        "Line" : 167,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Generate a basic LinkDef file and, if available, merge with the one\n\n# provided by the user\n",
        "Line" : 173,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Prepare include directories to be used during ROOT dictionary generation.\n\n# These directories are tied to the `star_lib_name` target via the\n\n# INCLUDE_DIRECTORIES property.\n",
        "Line" : 177,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Generate ROOT dictionary using the *_LinkDef.h and *_DictInc.h files\n",
        "Line" : 183,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "#\n\n# Adds a target to build a library from all source files (*.cxx, *.cc, and *.cpp)\n\n# recursively found in the specified subdirectory `star_lib_dir`. It is possible\n\n# to EXCLUDE some files matching an optional pattern.\n\n#\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Get first optional unnamed parameter\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Deal with sources\n",
        "Line" : 211,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# XXX The hardcoded .cxx extension below should be defined by cmake?\n",
        "Line" : 238,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Output the library to the respecitve subdirectory in the binary directory\n",
        "Line" : 241,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Generate the _dict.cxx file for the library\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# Starting cmake 3.6 one can simply use list( FILTER ... )\n\n#list( FILTER sources EXCLUDE REGEX \"${ARG_EXCLUDE}\" )\n",
        "Line" : 268,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Return list of regex'es to exclude from globbed paths for target `star_lib_name`\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Builds a list of subdirectories with complete path found in the\n\n# 'directories'\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Include the parent directory in the list\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#\n\n# From the path provided by the user (`star_lib_dir`) extracts the library\n\n# target name (`lib_name`), an absolute path to the library source code\n\n# (`path_abs`), and the corresponding output path where the generated or built\n\n# code can be placed (`path_out`). The input path `star_lib_dir` can be either\n\n# absolute or relative to ${STAR_SRC}\n\n#\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# First check that the path exists\n",
        "Line" : 368,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# special cases\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# Flattens the hierarchy of header files found in select subdirectories in\n\n# `${STAR_SRC}` by copying them to `destination_dir` at the same level\n\n#\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Collect files from some subdirectiries\n",
        "Line" : 426,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "#\n\n# Creates ROOT TGeo geometries from xml files\n\n#\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Change the name of the library/target and output directory if an\n\n# optional unnamed parameter is provided by the user\n",
        "Line" : 453,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# Create a string by replacing ; with gcc compiler options\n",
        "Line" : 489,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# Special treatment required for the aggregate geometry file\n",
        "Line" : 492,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# Generate the _dict.cxx file for the library\n",
        "Line" : 503,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# Get relative path for the generated headers to be used at installation\n\n# stage\n",
        "Line" : 508,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "#\n\n# Creates a library from fortran sources without doing any preprocessing\n\n#\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Change the name of the library/target and output directory if an\n\n# optional unnamed parameter is provided by the user\n",
        "Line" : 525,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# Builds a ${star_lib_name}_Tables library from ${star_lib_dir}/idl/*.idl files\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Build customized library StGenericVertexMakerNoSti based on StGenericVertexMaker\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Output the library to the respecitve subdirectory in the binary directory\n",
        "Line" : 597,
        "CharPositionInLine" : 1
      },
      "54" : {
        "Text" : "# Generate ROOT dictionary using the *_LinkDef.h and *_DictInc.h files\n",
        "Line" : 608,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# Generate source from idl files\n",
        "Line" : 623,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# For the file and variable names we closely follow the convention in mgr/Conscript-standard\n",
        "Line" : 656,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# For the file and variable names we closely follow the convention in mgr/Conscript-standard\n",
        "Line" : 700,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 58
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 787
}