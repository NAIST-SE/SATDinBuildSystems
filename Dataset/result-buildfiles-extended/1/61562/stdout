{
  "Repository" : "61562",
  "Revision" : "HEAD",
  "ObjectId" : "37a40fefe194ec7f6e9d1257f3bb3517b0a168bc",
  "CommitTime" : "2015-09-23T05:00:57Z",
  "Files" : {
    "Assets/CMakeLists.txt" : {
      "ObjectId" : "38de0465d1f70489d8fcd93c150418dd505e380f",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Assets/Default asset pack/CMakeLists.txt" : {
      "ObjectId" : "97275a554fa6d7be0580301a8555e770d7d0ac43",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO: actually build the pak file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Assets/Templates/C++/Linux/Makefile" : {
      "ObjectId" : "7bb1f453f5fffcf122973fc5c52cc259a3c8c9a6",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Assets/Templates/CMakeLists.txt" : {
      "ObjectId" : "de77b29a234269cd09430033d405974ab3b487b7",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Bindings/CMakeLists.txt" : {
      "ObjectId" : "26b1ee8137e18b24bece74d5d0677f5164186608",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Bindings/Contents/LUA/CMakeLists.txt" : {
      "ObjectId" : "9b5f75d841e0b03f6ba0bdd736d1cfa0b779cdd8",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(POLYCODE_BUILD_SHARED)\n\n#    ADD_LIBRARY(PolycodeLua SHARED ${polycodeLua_SRCS} ${polycodeLua_HDRS})\n\n#    TARGET_LINK_LIBRARIES(PolycodeLua Polycore ${LUA_LIBRARY})\n\n#ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install headers\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install libraries\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n\n#        INSTALL(TARGETS PolycodeLua_dynamic\n\n#            DESTINATION ${POLYCODE_RELEASE_DIR}/Framework/Modules/lib)\n\n#    ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Bindings/Scripts/create_lua_library/CMakeLists.txt" : {
      "ObjectId" : "002fa1363e61d323320e9c1d7cbd7b15d5acd617",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Bindings/Scripts/create_lua_library/Makefile" : {
      "ObjectId" : "c48b5d19f42f36be728ee0d05723adf44e15e0c2",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "CMake/ExternalAssimp.cmake" : {
      "ObjectId" : "4ec7d48bba971bc621dcf3efe9d228e32a70e619",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work around a compiler crash building assimp on Mac\r\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "CMake/ExternalBox2D.cmake" : {
      "ObjectId" : "154e3ca71d9ac7c45f8efdd1535497bfbcfa72d9",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needs fpic to link in shared lib on Linux\r\n\n#IF(CMAKE_COMPILER_IS_GNUCXX)\r\n\n#    SET(box2d_CXX_ARGS -DCMAKE_CXX_FLAGS=-fPIC)\r\n\n#ENDIF(CMAKE_COMPILER_IS_GNUCXX)\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Box2D's source isn't in the top level directory so add a dummy file to set cmake right\r\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "CMake/ExternalBullet.cmake" : {
      "ObjectId" : "28890880817a8c0c39ac52076d13ee4c8af8f58f",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(CMAKE_COMPILER_IS_GNUCXX)\r\n\n#    # Needs fpic to link in shared lib on Linux with GCC\r\n\n#    LIST(APPEND bullet_CMAKE_ARGS -DCMAKE_CXX_FLAGS=-fPIC)\r\n\n#ENDIF(CMAKE_COMPILER_IS_GNUCXX)\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalFreetype.cmake" : {
      "ObjectId" : "61b5b6b087f68a44840f4e4a7c997a7838615a75",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version of freetype\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalGLExt.cmake" : {
      "ObjectId" : "423606d3d783f7ff603587a78ab9d77a88430a1d",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# download some headers missing from Windows\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalLibArchive.cmake" : {
      "ObjectId" : "3636dbe2820a24ec616136269ab31fd1b90e2646",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalLua51.cmake" : {
      "ObjectId" : "ff2a6323c6743bfe023d86af64feff9714c78d52",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalOggVorbis.cmake" : {
      "ObjectId" : "2c78339ab04c731b402674944537be2561659110",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version of libogg, libvorbis and libvorbisfile\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Kludge: Shouldn't be necessary if FIND_LIBRARY were working on mingw.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to find libogg\r\n",
        "Line" : 48,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 3
    },
    "CMake/ExternalOpenAL.cmake" : {
      "ObjectId" : "cc7e7cddf0bff73ad47b55ce81c051a93e9da198",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalPNG.cmake" : {
      "ObjectId" : "ddc7f4cce88df8c8ad11b040629ddba3cf2be0dc",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version of zlib and libpng\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Kludge: Shouldn't be necessary if FIND_LIBRARY were working on mingw.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to find zlib\r\n",
        "Line" : 49,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 3
    },
    "CMake/ExternalPhysFS.cmake" : {
      "ObjectId" : "6d43270907ec495f0aadb5e6af1be40cca75450a",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build a local version\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/ExternalWGLExt.cmake" : {
      "ObjectId" : "252a5e524cf1de2d045355296c46c0113e67e74a",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# download some headers missing from Windows\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindAssimp.cmake" : {
      "ObjectId" : "8809b9cc70cd74ef2965d91078dee9ddde7c716a",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on http://freya3d.org/browser/CMakeFind/FindAssimp.cmake\r\n\n# Based on http://www.daimi.au.dk/~cgd/code/extensions/Assimp/FindAssimp.cmake\r\n\n# - Try to find Assimp\r\n\n# Once done this will define\r\n\n#\r\n\n#  ASSIMP_FOUND - system has Assimp\r\n\n#  ASSIMP_INCLUDE_DIR - the Assimp include directory\r\n\n#  ASSIMP_LIBRARY - Link these to use Assimp\r\n\n#  ASSIMP_LIBRARIES\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindBox2D.cmake" : {
      "ObjectId" : "c97ed983966f3281fcc8912bdbbf9bd7464dfc06",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Box2D library \n\n# This module defines \n\n# BOX2D_LIBRARY, the name of the library to link against \n\n# BOX2D_FOUND, if false, do not try to link to Box2D\n\n# BOX2D_INCLUDE_DIR, where to find Box2D headers \n\n# \n\n# Created by Sven-Hendrik Haase. Based on the FindZLIB.cmake module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 25,
        "CharPositionInLine" : 61
      },
      "3" : {
        "Text" : "# Per-recommendation\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BOX2D_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMake/FindBullet.cmake" : {
      "ObjectId" : "62ed690f965fe9f42fd3624fcc064d74fa2cbb9c",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Bullet\n\n# Once done this will define\n\n#\n\n#  BULLET_FOUND - system has bullet\n\n#  BULLET_INCLUDE_DIR - the bullet include directory\n\n#  BULLET_LIBRARIES - Link these to use Collada DOM\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -------\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# show the BULLET_INCLUDE_DIR and BULLET_LIBRARIES variables only in the advanced view\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindFreenect.cmake" : {
      "ObjectId" : "8ed5d306200e4323b96e9ae2ee73c276a0f66cf1",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on http://freya3d.org/browser/CMakeFind/FindFreenect.cmake\r\n\n# Based on http://www.daimi.au.dk/~cgd/code/extensions/Freenect/FindFreenect.cmake\r\n\n# - Try to find Freenect\r\n\n# Once done this will define\r\n\n#\r\n\n#  FREENECT_FOUND - system has Freenect\r\n\n#  FREENECT_INCLUDE_DIR - the Freenect include directory\r\n\n#  FREENECT_LIBRARY - Link these to use Freenect\r\n\n#  FREENECT_LIBRARIES\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindLibArchive.cmake" : {
      "ObjectId" : "b589ec4d62cc1c025a678a6959030ce853bbe508",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  LIBARCHIVE_FOUND - system has Libarchive\r\n\n#  LIBARCHIVE_INCLUDE_DIR - the Libarchive include directory\r\n\n#  LIBARCHIVE_LIBRARY - Link these to use Libarchive\r\n\n#  LIBARCHIVE_LIBRARIES\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindLua.cmake" : {
      "ObjectId" : "5d05e679b92a0e5279771220ae8f66ac6299d624",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# >= 1600\n",
        "Line" : 11,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# >= 1500\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# >= 1400\n",
        "Line" : 15,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# >= 1300\n",
        "Line" : 17,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# >= 1200\n",
        "Line" : 19,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# First search for d-suffixed libs\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 86,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "CMake/FindOgg.cmake" : {
      "ObjectId" : "a0b1c89cf9dafd6bce07cf2763c10d5cca242de0",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from http://code.google.com/p/osgaudio/source/browse/trunk/CMakeModules/FindOGG.cmake\n\n# Locate OGG\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\n\n#\n\n# $OGGDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$OGGDIR\n\n# used in building OGG.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# >= 1600\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# >= 1500\n",
        "Line" : 18,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# >= 1400\n",
        "Line" : 20,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# >= 1300\n",
        "Line" : 22,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# >= 1200\n",
        "Line" : 24,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# First search for d-suffixed libs\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 91,
        "CharPositionInLine" : 39
      },
      "9" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/FindPNG.cmake" : {
      "ObjectId" : "34ef18b453b007e93a078157f1072ee5c1be5844",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PNG_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindPythonModule.cmake" : {
      "ObjectId" : "a024118ba116fed8ecb37cf5b0e2a6f630d4c619",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find if a Python module is installed\n\n# Found at http://www.cmake.org/pipermail/cmake/2011-January/041666.html\n\n# To use do: find_python_module(PyQt4 REQUIRED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A module's location is usually a directory, but for binary modules\n\n# it's a .so file.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/FindSDL.cmake" : {
      "ObjectId" : "6098b8c75ecdab7b56483a81bbdc3c43647bd5bc",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from http://code.google.com/p/osgaudio/source/browse/trunk/CMakeModules/FindVorbis.cmake\n\n# Locate Vorbis\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building Vorbis.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 22,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindVorbis.cmake" : {
      "ObjectId" : "44d00a46d9be2353867f86dbb0658ced03b86243",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from http://code.google.com/p/osgaudio/source/browse/trunk/CMakeModules/FindVorbis.cmake\n\n# Locate Vorbis\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\n\n#\n\n# $VORBISDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$VORBISDIR\n\n# used in building Vorbis.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# >= 1600\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# >= 1500\n",
        "Line" : 18,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# >= 1400\n",
        "Line" : 20,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# >= 1300\n",
        "Line" : 22,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# >= 1200\n",
        "Line" : 24,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# First search for d-suffixed libs\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 87,
        "CharPositionInLine" : 45
      },
      "9" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/FindVorbisFile.cmake" : {
      "ObjectId" : "3425eb59e9e6d3229a2a0181521dd44ecbd018a1",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from http://code.google.com/p/osgaudio/source/browse/trunk/CMakeModules/FindVorbisFile.cmake\r\n\n# Locate VorbisFile\r\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\r\n\n#\r\n\n# $VORBISDIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$VORBISDIR\r\n\n# used in building Vorbis.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# >= 1600\r\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# >= 1500\r\n",
        "Line" : 18,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# >= 1400\r\n",
        "Line" : 20,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# >= 1300\r\n",
        "Line" : 22,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# >= 1200\r\n",
        "Line" : 24,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# First search for d-suffixed libs\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\r\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\r\n",
        "Line" : 91,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/PolycodeDependencies.cmake" : {
      "ObjectId" : "68874d719b5b1efca12674a99a7382b368b04c00",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the required dependency libraries to use the polycode static library.\n\n#\n\n# Required variables by this cmake file:\n\n# ${POLYCODE_CMAKE_DIR} points to the directory with all of polycode's cmake scripts(including this one)\n\n# ${POLYCODE_RELEASE_DIR} points to the directory where the binares are produced to(Polycode/Release/${SYSTEM_NAME}) by default\n\n#\n\n# Sets ${POLYCODE_DEPENDENCY_LIBS} to something you can pass to TARGET_LINK_LIBRARIES\n\n# It will use the \"debug\" and \"optimized\" cmake keywords, so it will not work for anything other than TARGET_LINK_LIBRARIES\n\n#\n\n#\n\n# Uses INCLUDE_DIRECTORIES AND LINK_DIRECTORIES to add the necessary directories for the given links/includes to work.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Add apple support\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "CMake/PolycodeIncludes.cmake" : {
      "ObjectId" : "d103638b85e0cd63fde011d0e4f311887c5fa559",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# platform specific defines and include directories for win and sdl\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use SDL on non-Apple unixes\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Set up common include directories\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/assimp.cmake" : {
      "ObjectId" : "f19b01fa3081ab5a26b6e15c52fe7b0e11315ab5",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Listing and grouping of all the source files for use with IDE project\r\n\n# generators.\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Necessary to show the headers in the project when using the VC++ generator:\r\n",
        "Line" : 717,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "CMake/libogg.cmake" : {
      "ObjectId" : "983c2885dda2578bfcb8fa9cb38653fd139767ae",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt to build static libogg for Polycode\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CMAKE_BUILD_TYPE \"Debug\")\r\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# to distinguish between debug and release lib\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libogg expects configure to be called on linux to\r\n\n# generate config_types.h\r\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Hopefully if the libogg version changes, so does this file\r\n",
        "Line" : 33,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# so configure_types.h will be regenerated.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 14
      },
      "6" : {
        "Text" : "#ADD_LIBRARY(libogg_dynamic SHARED ${libogg_SRCS} ${libogg_HDRS})\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#SET_TARGET_PROPERTIES(libogg_dynamic #libogg_static \r\n\n#    PROPERTIES OUTPUT_NAME libogg)\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#libogg_dynamic\r\n",
        "Line" : 45,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 9
    },
    "CMake/libvorbis.cmake" : {
      "ObjectId" : "eef4bf9850ca763d531065c4f1f2da07bbea114c",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt to build static libvorbis and libvorbisfile for Polycode\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CMAKE_BUILD_TYPE \"Debug\")\r\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# to distinguish between debug and release lib\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ADD_LIBRARY(libvorbis_dynamic SHARED ${libvorbis_SRCS} ${libvorbis_HDRS} ${vorbis_public_HDRS})\r\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#TARGET_LINK_LIBRARIES(libvorbis_dynamic ${OGG_LIBRARY})\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ADD_LIBRARY(libvorbisfile_dynamic SHARED lib/vorbisfile.c include/vorbis/vorbisfile.h)\r\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#TARGET_LINK_LIBRARIES(libvorbisfile_dynamic libvorbis_dynamic ${OGG_LIBRARY})\r\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#SET_TARGET_PROPERTIES(libvorbis_dynamic #libvorbis_static\r\n\n#    PROPERTIES OUTPUT_NAME libvorbis)\r\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#SET_TARGET_PROPERTIES(libvorbisfile_dynamic #libvorbisfile_static \r\n\n#    PROPERTIES OUTPUT_NAME libvorbisfile)\r\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#libvorbis_dynamic\r\n",
        "Line" : 124,
        "CharPositionInLine" : 14
      },
      "10" : {
        "Text" : "#libvorbisfile_dynamic\r\n",
        "Line" : 125,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 11
    },
    "CMake/lua51.cmake" : {
      "ObjectId" : "aa94e6ed009f0c008f678668761e22f21fae83db",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CMAKE_BUILD_TYPE \"Debug\")\r\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# to distinguish between debug and release lib\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We only want a static lib\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/openal.cmake" : {
      "ObjectId" : "15891eca4370ec291f2aeb3c793b7a5ffd81d3f2",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build file list for OpenAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify Pentium 2 instruction set, so TAS intrinsics will be inlined instead of becoming linker errors\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Add definitions, compiler switches, etc.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ???\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Set visibility/export options if available\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Yes GCC, really don't accept visibility modes you don't support\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Some systems need libm for some of the following math functions to work\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check for the dlopen API (for dynamicly loading backend libs)\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check if we have Windows headers\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We need pthreads outside of Windows\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Some systems need pthread_np.h to get recursive mutexes\n",
        "Line" : 363,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# _GNU_SOURCE is needed on some systems for extra attributes, and\n\n# _REENTRANT is needed for libc thread-safety\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check for a 64-bit type\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Windows needs winmm for timeGetTime, even if the backend is disabled\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Default backends, always available\n",
        "Line" : 433,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# Check ALSA backend\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check OSS backend\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check Solaris backend\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Check SndIO backend\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Check for MMDevApi backend\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Check DSound/MMSystem backend\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Check PortAudio backend\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check PulseAudio backend\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Check CoreAudio backend\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Some versions of OSX may need the AudioToolbox framework. Add it if\n\n# it's found.\n",
        "Line" : 625,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Check for OpenSL (Android) backend\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Optionally enable the Wave Writer backend\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is always available\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Might be able to use earlier versions, but these definitely work\n",
        "Line" : 670,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Needed for openal.pc.in\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# End configuration\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Build a library\n",
        "Line" : 696,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Add an install target here\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Install alsoft.conf configuration file\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "CMake/physfs.cmake" : {
      "ObjectId" : "83441e52bb1a601a46ee5ecc48f1dd76ce6d6fde",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PhysicsFS; a portable, flexible file i/o abstraction.\n\n# Copyright (C) 2007  Ryan C. Gordon.\n\n#\n\n# Please see the file LICENSE.txt in the source's root directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Increment this if/when we break backwards compatibility.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# I hate that they define \"WIN32\" ... we're about to move to Win64...I hope!\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Bleh, let's do it for \"APPLE\" too.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#INCLUDE_DIRECTORIES(platform)\n\n#INCLUDE_DIRECTORIES(archivers)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fallback to older OS X on PowerPC to support wider range of systems...\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Need these everywhere...\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Add some gcc-specific command lines.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Always build with debug symbols...you can strip it later.\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Stupid BeOS generates warnings in the system headers.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Not supported on several operating systems at this time.\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# VS.NET 8.0 got really really anal about strcpy, etc, which even if we\n\n#  cleaned up our code, zlib, etc still use...so disable the warning.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Basic chunks of source code ...\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We add this explicitly, since we don't want CMake to think this\n\n#  is a C++ project unless we're on BeOS.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Almost everything is \"compiled\" here, but things that don't apply to the\n\n#  build are #ifdef'd out. This is to make it easy to embed PhysicsFS into\n\n#  another project or bring up a new build system: just compile all the source\n\n#  code and #define the things you want.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# platform layers ...\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# !!! FIXME\n\n#  AC_DEFINE([PHYSFS_HAVE_LLSEEK], 1, [define if we have llseek])\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Archivers ...\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# !!! FIXME: rename to 7z.c?\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# See if some archiver required zlib, and see about using system version.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Kludge: Shouldn't be necessary if FIND_LIBRARY were working on mingw.\n",
        "Line" : 253,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# CMake FAQ says I need this...\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# end of CMakeLists.txt ...\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "CMake/zlib.cmake" : {
      "ObjectId" : "78ead009db22024d853d127cf0743b7365355ac6",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear variable\n",
        "Line" : 48,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we're doing an out of source build and the user has a zconf.h\n\n# in their source tree...\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 129,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 178,
        "CharPositionInLine" : 5
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "CMakeLists.txt" : {
      "ObjectId" : "a12811810a20b9b5ddef3129135b96be962ac351",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(APPLE OR WIN32)\n\n#    SET(build_player OFF)\n\n#ELSE()\n\n#    SET(build_player OFF)\n\n#ENDIF()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for what components to build\n\n#OPTION(POLYCODE_BUILD_SHARED \"Build Polycode shared libraries\" OFF)\n\n#OPTION(POLYCODE_BUILD_STATIC \"Build Polycode static libraries\" ON)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some non-standard CMake modules\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set default externals install location\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Process subdirectories\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install assets and dependencies\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Core/Contents/CMakeLists.txt" : {
      "ObjectId" : "1841b887a4c6957b6429bb79311c68d539d8d9df",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set up common includes\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: iPhone\n\n#    Include/PolyiPhoneCore.h\n\n#    Include/Poly_iPhone.h\n\n#    Source/PolyiPhoneCore.cpp\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: PolyGLES1\n\n#   Include/PolyGLES1Renderer.h\n\n#   Include/PolyGLES1Texture.h\n\n#   Source/PolyGLES1Renderer.cpp\n\n#   Source/PolyGLES1Texture.cpp\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# platform specific\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    SET(EXTRA_LIBS \"-framework Cocoa\")\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#IF(POLYCODE_BUILD_SHARED)\n\n#    ADD_LIBRARY(Polycore_dynamic SHARED ${polycore_SRCS} ${polycore_HDRS})\n\n#    TARGET_LINK_LIBRARIES(Polycore_dynamic\n\n#        ${OPENGL_LIBRARIES}\n\n#        ${OPENAL_LIBRARY}\n\n#        ${PNG_LIBRARIES}\n\n#        ${FREETYPE_LIBRARIES}\n\n#        ${PHYSFS_LIBRARY}\n\n#        ${OGG_LIBRARIES}\n\n#        ${VORBIS_LIBRARIES}\n\n#        ${VORBISFILE_LIBRARIES}\n\n#        ${SDL_LIBRARY}\n\n#        ${EXTRA_LIBS})\n\n#ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# On linux, check for x11\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: Allow to set X11 path manually instead of using pkg-config\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# install headers\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# install libraries\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#   IF(POLYCODE_BUILD_SHARED)\n\n#       INSTALL(TARGETS Polycore_dynamic EXPORT Polycore-targets\n\n#           DESTINATION ${POLYCODE_RELEASE_DIR}/Framework/Core/lib)\n\n#   ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#    IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#    ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# install core libs for player\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n\n#        INSTALL(TARGETS Polycore_dynamic DESTINATION ${POLYCODE_RELEASE_DIR}/Player)\n\n#    END(POLYCODE_BUILD_SHARED)\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#    INSTALL(DIRECTORY ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/bin/ \n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#       DESTINATION ${POLYCODE_RELEASE_DIR}/Player)\n",
        "Line" : 285,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 19
    },
    "Dependencies/CMakeLists.txt" : {
      "ObjectId" : "0649d33767a4a35beec4ca5ddf95a36525200d61",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 2.8.5 needed for full URL support, 2.8.8 now needed for new Xcode support\r\n",
        "Line" : 1,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : "# Install directories\r\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some non-standard CMake modules\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Download and build all dependencies on Windows and Mac, for Linux recommend using prebuilt packages\r\n\n#IF(APPLE OR WIN32)\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ELSE()\r\n\n#    SET(common_deps OFF)\r\n\n#ENDIF()\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Options for what components should be downloaded and built\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# glext.h is sometimes missing\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# wglext.h is needed on windows\r\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#FIND_PACKAGE(PhysFS)\r\n\n#IF(PHYSFS_FOUND)\r\n\n#    SET(internal_PHYSFS OFF)\r\n\n#ELSE(PHYSFS_FOUND)\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#ENDIF(PHYSFS_FOUND)\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#FIND_PACKAGE(Freetype)\r\n\n#IF(FREETYPE_FOUND)\r\n\n#    SET(internal_FREETYPE OFF)\r\n\n#ELSE(FREETYPE_FOUND)\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#ENDIF(FREETYPE_FOUND)\r\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#FIND_PACKAGE(PNG)\r\n\n#IF(PNG_FOUND)\r\n\n#    SET(internal_PNG OFF)\r\n\n#ELSE(PNG_FOUND)\r\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#ENDIF(PNG_FOUND)\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#FIND_PACKAGE(VorbisFile)\r\n\n#IF(VORBISFILE_FOUND)\r\n\n#    SET(internal_VORBISFILE OFF)\r\n\n#ELSE(VORBISFILE_FOUND)\r\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#ENDIF(VORBISFILE_FOUND)\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#FIND_PACKAGE(Lua51)\r\n\n#IF(LUA51_FOUND)\r\n\n#    SET(internal_LUA OFF)\r\n\n#ELSE(LUA51_FOUND)\r\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#ENDIF(LUA51_FOUND)\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#FIND_PACKAGE(Box2D)\r\n\n#IF(BOX2D_FOUND)\r\n\n#    SET(internal_BOX2D OFF)\r\n\n#ELSE(BOX2D_FOUND)\r\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#ENDIF(BOX2D_FOUND)\r\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#FIND_PACKAGE(Bullet)\r\n\n#IF(BULLET_FOUND)\r\n\n#    SET(internal_BULLET OFF)\r\n\n#ELSE(BULLET_FOUND)\r\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#ENDIF(BULLET_FOUND)\r\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#FIND_PACKAGE(Assimp)\r\n\n#IF(ASSIMP_FOUND)\r\n\n#    SET(internal_ASSIMP OFF)\r\n\n#ELSE(ASSIMP_FOUND)\r\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#ENDIF(ASSIMP_FOUND)\r\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Use SDL on non-Apple unixes\r\n\n#IF(UNIX AND NOT APPLE)\r\n\n#    FIND_PACKAGE(SDL REQUIRED)\r\n\n#ENDIF(UNIX AND NOT APPLE)\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Get missing GL headers for Windows\r\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "Documentation/CMakeLists.txt" : {
      "ObjectId" : "6c571e809a009ea5def99dee0a9939453032f824",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate the given output file(empty file), to keep track of whether we need to rebuild.\n",
        "Line" : 18,
        "CharPositionInLine" : 70
      },
      "CommentCount" : 1
    },
    "Documentation/Lua/scripts/CMakeLists.txt" : {
      "ObjectId" : "93c8b2a64bff16f6351642329d1d736f97fe913c",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate the given output file(empty file), to keep track of whether we need to rebuild.\n",
        "Line" : 10,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 1
    },
    "Examples/C++/Build/Linux/Makefile" : {
      "ObjectId" : "24b0c040a6020c18f26da3d1a74a188ada86c0e6",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Examples/C++/Resources/Makefile" : {
      "ObjectId" : "6de8217c101cc183a28b9aa62b8854b80dc29dae",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "IDE/Build/Linux/Makefile" : {
      "ObjectId" : "b13f9677eeed41813e59fa52efb390fe07f0d632",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "IDE/Contents/CMakeLists.txt" : {
      "ObjectId" : "d19f9d5f43ae805dff4a04aa922210b9f2b98129",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMakeLists.txt is a cross-platform alternative to the $Polycode/IDE/Build/$OS\n\n# build systems. \n\n#\n\n# It also demonstrates how Polycode projects other than the IDE can be built.\n\n# First a few variables need to be set:\n\n# * POLYCODE_ROOT_DIR\n\n# * POLYCODE_RELEASE_DIR\n\n# * POLYCODE_CMAKE_DIR\n\n# * CMAKE_INSTALL_PREFIX\n\n# Then we can simply include ${POLYCODE_CMAKE_DIR}/PolycodeDependencies.cmake\n\n# After that, ${POLYCODE_DEPENDENCY_LIBS} will be set to the paths of our required\n\n# link libraries, which we can simply add to our IDE project with TARGET_LINK_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# WIN32 makes it build a GUI application on windows(no effect on other platforms)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install resources etc. after the build is finished\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "Modules/Bindings/2DPhysics/CMakeLists.txt" : {
      "ObjectId" : "bfda2a298671844679e54223a8b8c14eaffd7a33",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install headers\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Modules/Bindings/3DPhysics/CMakeLists.txt" : {
      "ObjectId" : "6ec7a8c06d133cfd1c3cbd22d8c6e489367a4db0",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install headers\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Modules/Bindings/CMakeLists.txt" : {
      "ObjectId" : "85a32060bcb2050d0ea4bb0cc764c7a4ad43b5a5",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note that FindBullet requires CMake >= 2.8.4 to find Bullet >= 2.77 \n\n# due to Bullet's header install directory location changing.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Modules/Bindings/UI/CMakeLists.txt" : {
      "ObjectId" : "b0d64b982375fa17fc0d66cd1f5c14b4d79e1f1c",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install headers\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Modules/Contents/2DPhysics/CMakeLists.txt" : {
      "ObjectId" : "0e96fa4d6abb3489f6409b28ca185a4453156d84",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(POLYCODE_BUILD_SHARED)\n\n#ADD_LIBRARY(Polycode2DPhysics SHARED ${polycode2DPhysics_SRCS} ${polycode2DPhysics_HDRS})\n\n#TARGET_LINK_LIBRARIES(Polycode2DPhysics ${BOX2D_LIBRARIES})\n\n#IF(APPLE)\n\n#    TARGET_LINK_LIBRARIES(Polycode2DPhysics\n\n#        Polycore\n\n#        ${OPENGL_LIBRARIES}\n\n#        ${OPENAL_LIBRARY}\n\n#        ${PNG_LIBRARIES}\n\n#        ${FREETYPE_LIBRARIES}\n\n#        ${PHYSFS_LIBRARY}\n\n#        ${VORBISFILE_LIBRARY}\n\n#        \"-framework Cocoa\")\n\n#ENDIF(APPLE)\n\n#ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install headers\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install libraries\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    ENDIF(POLYCODE_BUILD_SHARED)\n\n#    IF(POLYCODE_BUILD_STATIC)\n\n#        INSTALL(TARGETS Polycode2DPhysics_static DESTINATION ${POLYCODE_RELEASE_DIR}/Framework/Modules/lib)\n\n#    ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Modules/Contents/3DPhysics/CMakeLists.txt" : {
      "ObjectId" : "6199fb1d79692e96a7ba240aaf1adaa2415bf437",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(POLYCODE_BUILD_SHARED)\n\n#ADD_LIBRARY(Polycode3DPhysics SHARED ${polycode3DPhysics_SRCS} ${polycode3DPhysics_HDRS})\n\n#TARGET_LINK_LIBRARIES(Polycode3DPhysics ${BULLET_LIBRARIES})\n\n#IF(APPLE)\n\n#    TARGET_LINK_LIBRARIES(Polycode3DPhysics\n\n#        Polycore\n\n#        ${OPENGL_LIBRARIES}\n\n#        ${OPENAL_LIBRARY}\n\n#        ${PNG_LIBRARIES}\n\n#        ${FREETYPE_LIBRARIES}\n\n#        ${PHYSFS_LIBRARY}\n\n#        ${VORBISFILE_LIBRARY}\n\n#        \"-framework Cocoa\")\n\n#ENDIF(APPLE)\n\n#ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install headers\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install libraries\n",
        "Line" : 52,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    ENDIF()\n\n#    IF(POLYCODE_BUILD_STATIC)\n\n#        INSTALL(TARGETS Polycode3DPhysics_static \n\n#            DESTINATION ${POLYCODE_RELEASE_DIR}/Framework/Modules/lib)\n\n#    ENDIF()\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Modules/Contents/CMakeLists.txt" : {
      "ObjectId" : "71326234a22f97b56cad647b5aa2d9b86b0be038",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note that FindBullet requires CMake >= 2.8.4 to find Bullet >= 2.77 \n\n# due to Bullet's header install directory location changing.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Modules/Contents/Kinect/CMakeLists.txt" : {
      "ObjectId" : "e9eb393b8bed5e420d0a79d0cd78e2219a430b32",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(POLYCODE_BUILD_SHARED)\n\n#ADD_LIBRARY(PolycodeKinect SHARED ${polycodeKinect_SRCS} ${polycodeKinect_HDRS})\n\n#TARGET_LINK_LIBRARIES(PolycodeKinect ${BOX2D_LIBRARIES})\n\n#IF(APPLE)\n\n#    TARGET_LINK_LIBRARIES(PolycodeKinect\n\n#        Polycore\n\n#        ${OPENGL_LIBRARIES}\n\n#        ${OPENAL_LIBRARY}\n\n#        ${PNG_LIBRARIES}\n\n#        ${FREETYPE_LIBRARIES}\n\n#        ${PHYSFS_LIBRARY}\n\n#        ${VORBISFILE_LIBRARY}\n\n#        \"-framework Cocoa\")\n\n#ENDIF(APPLE)\n\n#ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install headers\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install libraries\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    ENDIF(POLYCODE_BUILD_SHARED)\n\n#    IF(POLYCODE_BUILD_STATIC)\n\n#        INSTALL(TARGETS PolycodeKinect_static DESTINATION ${POLYCODE_RELEASE_DIR}/Framework/Modules/lib)\n\n#    ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Modules/Contents/TUIO/CMakeLists.txt" : {
      "ObjectId" : "eed7c659fbc5c1c1d8a31272ef8d0a3a1d88e14b",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install headers\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# install libraries\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Modules/Contents/UI/CMakeLists.txt" : {
      "ObjectId" : "dd54cb7156a05581a7376874bb399c1cf59400c1",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install headers\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# install libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Player/Build/Linux/Makefile" : {
      "ObjectId" : "2bbf1624f6f73ee16eaa6d25817bf4a3294e1028",
      "LastModified" : "2015-06-24T20:24:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Player/Contents/CMakeLists.txt" : {
      "ObjectId" : "a555ba6af6c41583f0b6b58bf84ce35977677f7d",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed for LuaJIT\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n\n#        ADD_EXECUTABLE(PolycodePlayer MACOSX_BUNDLE ${polycodeplayer_SRCS} ${polycodeplayer_HDRS})\n\n#        TARGET_LINK_LIBRARIES(PolycodePlayer Polycore PolycodeLua ${LUA_LIBRARY})\n\n#    ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Standalone/CMakeLists.txt" : {
      "ObjectId" : "4acbc117bebccc4a019b28df3fb6917254fe11e2",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Toolchain-mingw32.cmake" : {
      "ObjectId" : "2a3320fb07b69fb944649825097d67381244b645",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located, please replace /path/to/Polycode with the absolute path to your polycode installation\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Paste the below into the relevant cmake files.\n\n#set(CMAKE_CXX_FLAGS \"-D_WINDOWS -D_MINGW -D_WIN32 -DWIN32 -D__MINGW__\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Tools/Contents/CMakeLists.txt" : {
      "ObjectId" : "9cca392a490e6da3d3432645f4bfe8e07fafc2d7",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tools/Contents/polybuild/CMakeLists.txt" : {
      "ObjectId" : "1d8b9deef359551250f7b413a076b3e72fb88f89",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tools/Contents/polyimport/CMakeLists.txt" : {
      "ObjectId" : "57a155abf25412784c460222e415b794695b948e",
      "LastModified" : "2015-06-13T18:48:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(POLYCODE_BUILD_SHARED)\n\n#    ADD_EXECUTABLE(polyimport_dynamic Source/polyimport.cpp Include/polyimport.h)\n\n#    TARGET_LINK_LIBRARIES(polyimport_dynamic Polycore_dynamic ${ASSIMP_LIBRARIES})\n\n#ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install exes\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#    IF(POLYCODE_BUILD_SHARED)\n\n#        INSTALL(TARGETS polyimport DESTINATION ${POLYCODE_RELEASE_DIR}/Framework/Tools)\n\n#    ENDIF(POLYCODE_BUILD_SHARED)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    IF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    ENDIF(POLYCODE_BUILD_STATIC)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "CMAKE" : 61,
    "MAKEFILE" : 6
  },
  "ElapsedTime" : 4043
}