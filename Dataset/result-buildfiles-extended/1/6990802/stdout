{
  "Repository" : "6990802",
  "Revision" : "HEAD",
  "ObjectId" : "f626940f05915a3ba559fad296c551f94e9f0d9f",
  "CommitTime" : "2019-04-03T17:04:03Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "18b53729b63baf84a56acdc7f7272cfcc644ad4b",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disallow in-source builds\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Prepend module search path\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use our modules and utility functions\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use GNU install dirs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Request C++11 standard\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# MAC specific variable\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n#\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# ROOT\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# gitinfo.cc\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# main dictionaries\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find the header files that have uncommented ClassDef lines\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Boost\n\n#\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Find Geant4 package, activating all available UI and Vis drivers by default\n\n# You can set WITH_GEANT4_UIVIS to OFF via the command line or ccmake/cmake-gui\n\n# to build a batch mode only executable\n\n#\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup Geant4 include directories and compile definitions\n\n# Setup include directory for this project\n\n#\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# HepMC (optional)\n\n#\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Pythia6 (optional)\n\n#\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Compiler flags\n\n#\n\n# Set compiler flags to the set given by ROOT set\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# FIXME: The following will at some point all disappear (yeah yeah, soon)\n\n# Ignore shadowing of CLHEP 1-letter units with 1-letter local variables\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Ignore missing field initializers in structs\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Ignore unused parameters in many geant4 functions\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Ignore warning of struct initialization { } for gcc < 5.0 (after that it is ignored internally)\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Now add the standard WALL and WEXTRA sets\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Finally print what we use\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# main library\n\n#\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# executables\n\n#\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Copy all scripts to the build directory, i.e. the directory in which we\n\n# build remoll. This is so that we can run the executable directly because it\n\n# relies on these scripts being in the current working directory.\n\n#\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Templates\n\n#\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Download field maps subdirectory\n\n#\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install cmake config file\n\n#\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# uninstall\n\n#\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "analysis/CMakeLists.txt" : {
      "ObjectId" : "6990353f44607bbe5c26d67de080615b6b75d89c",
      "LastModified" : "2018-11-24T19:37:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "analysis/hallRad/CMakeLists.txt" : {
      "ObjectId" : "5be9afbef051e5cf42a70a6ad85713babffd7f91",
      "LastModified" : "2018-11-22T07:36:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default install path is the source directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use GNU install dirs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# generate dictionaries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# path to dictionary to generate\n\n# list of classes to process\n\n# ROOT linkDef file\n",
        "Line" : 35,
        "CharPositionInLine" : 40
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n# NB: headers are included so they will show up in IDEs\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n\n#----------------------------------------------------------------------------\n\n# Generate dictionaries as well (so we can write objects to ROOT files\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "analysis/pe/CMakeLists.txt" : {
      "ObjectId" : "29fd2ccaf821cad7bc293e6c0af0f7d8e8f3a118",
      "LastModified" : "2018-11-22T07:36:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default install path is the source directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use GNU install dirs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# generate dictionaries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# path to dictionary to generate\n\n# list of classes to process\n\n# ROOT linkDef file\n",
        "Line" : 35,
        "CharPositionInLine" : 35
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n# NB: headers are included so they will show up in IDEs\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n\n#----------------------------------------------------------------------------\n\n# Generate dictionaries as well (so we can write objects to ROOT files\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "analysis/pruneTreeEnvelope/CMakeLists.txt" : {
      "ObjectId" : "5e8088064a041aee5fa188403dc0814be898e3c9",
      "LastModified" : "2018-11-22T07:56:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default install path is the source directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use GNU install dirs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# generate dictionaries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# path to dictionary to generate\n\n# list of classes to process\n\n# ROOT linkDef file\n",
        "Line" : 35,
        "CharPositionInLine" : 50
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n# NB: headers are included so they will show up in IDEs\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n\n#----------------------------------------------------------------------------\n\n# Generate dictionaries as well (so we can write objects to ROOT files\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "analysis/rad_dose/CMakeLists.txt" : {
      "ObjectId" : "44a27f79b39ceb74cca439aee1ee1c7dee429d48",
      "LastModified" : "2018-11-22T08:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default install path is the source directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use GNU install dirs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# generate dictionaries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# path to dictionary to generate\n\n# list of classes to process\n\n# ROOT linkDef file\n",
        "Line" : 35,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n# NB: headers are included so they will show up in IDEs\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n\n#----------------------------------------------------------------------------\n\n# Generate dictionaries as well (so we can write objects to ROOT files\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "analysis/reader/CMakeLists.txt" : {
      "ObjectId" : "b138375cf62e20745993ad84e99fb04a2a3f65df",
      "LastModified" : "2018-11-24T19:37:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default install path is the source directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use GNU install dirs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# generate dictionaries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# path to dictionary to generate\n\n# list of classes to process\n\n# ROOT linkDef file\n",
        "Line" : 35,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n# NB: headers are included so they will show up in IDEs\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n\n#----------------------------------------------------------------------------\n\n# Generate dictionaries as well (so we can write objects to ROOT files\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/modules/BuildType.cmake" : {
      "ObjectId" : "df901327d0409b7ea93021e129a2200404a3e003",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/modules/CMakeEnv.cmake" : {
      "ObjectId" : "24d275be54d17a34e77581a5c68b17cf4f5c6cca",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake settings and utility functions for projects\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Set default build type to RelWithDebInfo\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Build options\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Project-specific build flags\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Useful shorthands\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#============================================================================\n\n# Remove duplicates from space-separated list of items\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Get list of definitions for given target as list of -DXXX\n\n# (needed for generating ROOT dictionaries)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Set project's CXX level if no \"-std=xxx\" flag given in CXX_FLAGS\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Set our CXX flags plus \"_suggested_flags\" without any -IXXX options\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Configuration dependent options. Avoid ugly generator expressions\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Set warning flags according to given argument(s)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Print build configuration details (build type, project-wde compiler flags)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Support for keeping track of dependencies loaded via our FindXXX scripts\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Dependencies already found\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Commands to write to Config.cmake\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/modules/CMakeGitInfo.cmake" : {
      "ObjectId" : "1c542beea58b96b3c66b0d897d862762dabf0a89",
      "LastModified" : "2019-02-19T03:23:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Source: https://github.com/andrew-hardin/cmake-git-version-tracking\n\n# Original license: MIT License\n\n# Current license: MIT License\n\n#\n\n# This file defines the functions and targets needed to monitor\n\n# the state of a git repo. If the state changes (e.g. a commit is made),\n\n# then a file gets reconfigured.\n\n#\n\n# The behavior of this script can be modified by defining any of these variables:\n\n#\n\n#   PRE_CONFIGURE_FILE (REQUIRED)\n\n#   -- The path to the file that'll be configured.\n\n#\n\n#   POST_CONFIGURE_FILE (REQUIRED)\n\n#   -- The path to the configured PRE_CONFIGURE_FILE.\n\n#\n\n#   GIT_STATE_FILE (OPTIONAL)\n\n#   -- The path to the file used to store the previous build's git state.\n\n#      Defaults to the current binary directory.\n\n#\n\n#   GIT_WORKING_DIR (OPTIONAL)\n\n#   -- The directory from which git commands will be run.\n\n#      Defaults to the directory with the top level CMakeLists.txt.\n\n#\n\n#   GIT_EXECUTABLE (OPTIONAL)\n\n#   -- The path to the git executable. It'll automatically be set if the\n\n#      user doesn't supply a path.\n\n#\n\n# Script design:\n\n#   - This script was designed similar to a Python application\n\n#     with a Main() function. I wanted to keep it compact to\n\n#     simplify \"copy + paste\" usage.\n\n#\n\n#   - This script is made to operate in two CMake contexts:\n\n#       1. Configure time context (when build files are created).\n\n#       2. Build time context (called via CMake -P)\n\n#     If you see something odd (e.g. the NOT DEFINED clauses),\n\n#     consider that it can run in one of two contexts.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Short hand for converting paths to absolute.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check that a required variable is set.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check that an optional variable is set, or, set it to a default value.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check the optional git variable.\n\n# If it's not set, we'll try to find it using the CMake packaging system.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Function: GitStateChangedAction\n\n# Description: this function is executed when the state of the git\n\n#              repo changes (e.g. a commit is made).\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set variables by index, then configure the file w/ these variables defined.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Function: GetGitState\n\n# Description: gets the current state of the git repo.\n\n# Args:\n\n#   _working_dir (in)  string; the directory from which git commands will be executed.\n\n#   _state       (out) list; a collection of variables representing the state of the\n\n#                            repository (e.g. commit SHA).\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Get the hash for HEAD.\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Get whether or not the working tree is dirty.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Get last commit log message\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get geant4 version string\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Get ROOT version string\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Return a list of our variables to the parent scope.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Function: CheckGit\n\n# Description: check if the git repo has changed. If so, update the state file.\n\n# Args:\n\n#   _working_dir    (in)  string; the directory from which git commands will be ran.\n\n#   _state_changed (out)    bool; whether or no the state of the repo has changed.\n\n#   _state         (out)    list; the repository state as a list (e.g. commit SHA).\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get the current state of the repo.\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set the output _state variable.\n\n# (Passing by reference in CMake is awkward...)\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Check if the state has changed compared to the backup on disk.\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# State didn't change.\n",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# The state has changed.\n\n# We need to update the state file on disk.\n\n# Future builds will compare their state to this file.\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Function: SetupGitMonitoring\n\n# Description: this function sets up custom commands that make the build system\n\n#              check the state of git before every build. If the state has\n\n#              changed, then a file is configured.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Function: Main\n\n# Description: primary entry-point to the script. Functions are selected based\n\n#              on whether it's configure or build time.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check if the repo has changed.\n\n# If so, run the change action.\n",
        "Line" : 244,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Executes at configure time.\n",
        "Line" : 254,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# And off we go...\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake/modules/CMakeMacroParseArguments.cmake" : {
      "ObjectId" : "7ce4c49ae5b0c5a4003d4a45a2da6e3cd38bbbff",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords> <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions for\n\n# parsing the arguments given to that macro or function.\n\n# It processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e. keywords which can be used when calling the macro without any value\n\n# following, like e.g. the OPTIONAL keyword of the install() command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g. DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this macro\n\n# which can be followed by more than one value, like e.g. the TARGETS or\n\n# FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.\n\n# These variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see whether\n\n# your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments as the\n\n# real install() command:\n\n#\n\n#   function(MY_INSTALL)\n\n#     set(options OPTIONAL FAST)\n\n#     set(oneValueArgs DESTINATION RENAME)\n\n#     set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#     cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN} )\n\n#     ...\n\n#\n\n# Assume my_install() has been called like this:\n\n#   my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the following\n\n# variables:\n\n#   MY_INSTALL_OPTIONAL = TRUE\n\n#   MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#   MY_INSTALL_DESTINATION = \"bin\"\n\n#   MY_INSTALL_RENAME = \"\" (was not used)\n\n#   MY_INSTALL_TARGETS = \"foo;bar\"\n\n#   MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#   MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n# You can the continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g. if directly after a one_value_keyword\n\n# another recognized keyword follows, this is interpreted as the beginning of\n\n# the new option.\n\n# E.g. my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION would\n\n# be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 100,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 101,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 102,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/modules/FindROOT.cmake" : {
      "ObjectId" : "b5eab412cc5bb29de08f3e2af0a14d886fcb25b4",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find ROOT installation. We supply or own search module because\n\n#\n\n# (a) ROOT 5 does not provide a CMake configuration module, and we still\n\n#     want to support ROOT 5 for the moment; and\n\n# (b) ROOT 6's ROOTConfig.cmake is a bit too heavy for our purposes.\n\n#\n\n# Among other things, ROOT 6's ROOTConfig-targets.cmake, which\n\n# is invoked by ROOTConfig.cmake, requires all components to be present,\n\n# which clashes with partial RPM installs from EPEL on RHEL. Using ROOT's\n\n# CMake configuration always requires users to install all components built\n\n# by the packager, even those that are never needed. We don't want that.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only execute this if not already done\n\n# (spawning a bunch of root-config processes is quite slow)\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find root-config either in $CMAKE_PREFIX_PATH/bin, $ROOTSYS/bin, if defined,\n\n# or in $PATH.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#message( STATUS \"ROOTSYS = ${ROOTSYS}\" )\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Remove include directories from compiler flags; they are handled separately\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We need some of these variables as ;-lists\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get list of ROOT's core libraries from the output of \"root-config --libs\"\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Find absolute paths to the core libraries plus any requested components\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If any requested components are remaining, they weren't found above,\n\n# so report a warning or an error\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# BUILD_ROOT_DICTIONARY(dictionary\n\n#                       LINKDEF <theLinkDef.h>\n\n#                       [ TARGETS <target> [ <target> ... ]\n\n#                       [ INCLUDEDIRS <dir> [ <dir ... ]\n\n#                       [ OPTIONS [ <options> ]\n\n#                       [ PCMNAME <pcmname> ]\n\n#                       <header> [ <header> ... ] )\n\n#\n\n# Build ROOT dictionary for ROOT 5 and 6\n\n#\n\n# Arguments:\n\n#   dictionary:    dictionary base name (required). Output file will be\n\n#                  ${dictionary}Dict.cxx\n\n#   LINKDEF:       name of LinkDef.h file (required)\n\n#   TARGETS:       CMake targets from which to get -I arguments and -D definitions\n\n#   INCLUDEDIRS:   paths to use for -I arguments\n\n#   OPTIONS:       additional options for rootcling/rootcint\n\n#   PCMNAME:       base name of PCM file (ROOT 6 only). Defaults to ${dictionary}.\n\n#                  Output will be lib${pcmname}_rdict.pcm.\n\n#\n\n# Creates a custom target ${dictionary}_ROOTDICT.\n\n# With ROOT 6, also installs the PCM file in ${CMAKE_INSTALL_LIBDIR}\n\n#\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Compile definitions and include directories from the given target(s)\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Add any explicitly specified include directories\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# ROOT6\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# ROOT5\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "cmake/modules/PrefixDir.cmake" : {
      "ObjectId" : "ea7db82affc0435b7e767acb3f374e03b5181ccf",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default install path is the source directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/scripts/RemollConfig.cmake" : {
      "ObjectId" : "e60a62adc5e4e779aec6b8d0f84c8fdf5a278103",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find remoll library\n\n# This module sets up remoll information\n\n# It defines:\n\n# REMOLL_FOUND               If the remoll is found\n\n# REMOLL_INCLUDE_DIR         PATH to the include directory\n\n# REMOLL_LIBRARY_DIR         PATH to the library directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/scripts/RemollUseFile.cmake" : {
      "ObjectId" : "fb8f39a4cbabe364f4ad28562b0ee005c438a5f5",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "generators/aniol/Makefile" : {
      "ObjectId" : "9c514dd05706f83332b28cfb6625da599a623e44",
      "LastModified" : "2019-02-18T18:14:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "generators/halld/bggen/Makefile" : {
      "ObjectId" : "6dd418dd6b169ce548d27d18726ee74810294a46",
      "LastModified" : "2016-08-01T16:32:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "generators/halld/bggen/code/CMakeLists.txt" : {
      "ObjectId" : "f8e7d30d8fbd2dc6a870d8606b62e720918dd513",
      "LastModified" : "2017-02-24T15:34:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gfortran\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ifort (untested)\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# g77\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# unknown\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# cernlib\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# include directory\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# source files\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# object library\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# static library\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# shared library\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# executable\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "generators/halld/bggen/code/Makefile" : {
      "ObjectId" : "e6964e4ecb9e22f55f3a2b9467a0fb065cd547f0",
      "LastModified" : "2016-08-01T16:32:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Pythia generates too many warnings. Supress these by\n\n# removing the -Wall compiler flag for FORTRAN\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mac OS X 10.5 seems to have a picky linker that spits out\n\n# tons of warnings about \"can't find atom for N_GSYM stabs\"\n\n# for each of the cernlib routines.\n\n# I can't find much on the web about it and don't recall\n\n# anyone else using 10.5 complaining. No such warnings seem to\n\n# exist for pure C++ code with no FORTRAN. The fix is\n\n# therefore to supress all warnings for HDGeant, but only\n\n# for this specific platform/OS since a global solution\n\n# applied through BMS core files would supress warnings\n\n# uneccessarily.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "generators/halld/bggen/paw/CMakeLists.txt" : {
      "ObjectId" : "14754375408cc14c5fb3eaa890a3b49870ac745a",
      "LastModified" : "2017-02-24T20:21:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gfortran\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ifort (untested)\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# g77\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# unknown\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# cernlib\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# executable\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "generators/halld/bggen/paw/Makefile" : {
      "ObjectId" : "8f37e892eb3bed703fb9139ae08c464764b2baf3",
      "LastModified" : "2016-08-01T16:32:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CERNLIBS= -L $(CERN_ROOT)/lib -lpawlib -lgraflib -lgrafX11  -lpacklib -lkernlib -lmathlib\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#$(CERNLIBS)\n",
        "Line" : 15,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 2178
}