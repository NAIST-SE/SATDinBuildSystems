{
  "Repository" : "5591",
  "Revision" : "HEAD",
  "ObjectId" : "be0f5653f1fa4a9f147a48fbd3d863350ead7350",
  "CommitTime" : "2019-04-10T13:35:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4deefa4fb2f1fc2aafe96aeefd229f6cd99ce64e",
      "LastModified" : "2019-03-21T10:19:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set this early, so it's available. AIX gets weird, man.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify a preferred location for binary lookup that will be prioritized over PATH.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Allow searching in boxen installed homebrew directories\n\n# http://stackoverflow.com/questions/1487752/how-do-i-instruct-cmake-to-look-for-libraries-installed-by-macports\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# We look for curl early, because whether or not we link to the leatherman curl library\n\n# is dependant on whether or not we find curl on the system.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Now that we have leatherman, we can pulll in its options file, which\n\n# we need for finding all our other libraries.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We use program_options, system, filesystem, date_time, and regex directly. Testing uses thread and chrono.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# date_time and regex need threads on some platforms, and find_package Boost only includes\n\n# pthreads if you require the Boost.Thread component.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Display a summary of the features\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set RPATH if not installing to a system library directory\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Pull in common cflags setting from leatherman\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Enable DEP/ASLR switches on windows versions\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Add cpplint and cppcheck targets\n\n#\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Pull in helper macros for working with leatherman libraries\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add test executables for unit testing\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Install the man page\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/FindBLKID.cmake" : {
      "ObjectId" : "32634e58464a5823408f2d4cf2d99a6559693abe",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCPPHOCON.cmake" : {
      "ObjectId" : "00ba8bd5c5bd45e8559258af24bd7d6b9356f680",
      "LastModified" : "2016-07-21T17:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindDependency.cmake" : {
      "ObjectId" : "0eca66e9d2509ea199097bd72af6c140637d27f4",
      "LastModified" : "2016-07-21T17:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A function for finding dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup the include path hint\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Setup the library path hint\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Handle the find_package arguments\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Set the output variables in the parent's scope\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Include dirs\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Libraries\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Get the library name\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Add a define for the found package\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Advanced options for not cluttering the cmake UIs\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "cmake/FindOPENSSL.cmake" : {
      "ObjectId" : "400d6c24ab278cc8c33ce80f6265280710c5f136",
      "LastModified" : "2016-07-21T17:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindRuby.cmake" : {
      "ObjectId" : "4f57d619e400b3aaa638c077856511e503d37e02",
      "LastModified" : "2016-07-21T17:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindRuby\n\n# --------\n\n#\n\n# Find Ruby\n\n#\n\n# This module finds if Ruby is installed and determines where the\n\n# include files and libraries are.  Ruby 1.8, 1.9, 2.0 and 2.1 are\n\n# supported.\n\n#\n\n# The minimum required version of Ruby can be specified using the\n\n# standard syntax, e.g.  find_package(Ruby 1.8)\n\n#\n\n# It also determines what the name of the library is.  This code sets\n\n# the following variables:\n\n#\n\n# ``RUBY_EXECUTABLE``\n\n#   full path to the ruby binary\n\n# ``RUBY_INCLUDE_DIRS``\n\n#   include dirs to be used when using the ruby library\n\n# ``RUBY_LIBRARY``\n\n#   full path to the ruby library\n\n# ``RUBY_VERSION``\n\n#   the version of ruby which was found, e.g. \"1.8.7\"\n\n# ``RUBY_FOUND``\n\n#   set to true if ruby ws found successfully\n\n#\n\n# Also:\n\n#\n\n# ``RUBY_INCLUDE_PATH``\n\n#   same as RUBY_INCLUDE_DIRS, only provided for compatibility reasons, don't use it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2008-2009 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#   RUBY_ARCHDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"archdir\"@:>@)'`\n\n#   RUBY_SITEARCHDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"sitearchdir\"@:>@)'`\n\n#   RUBY_SITEDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"sitelibdir\"@:>@)'`\n\n#   RUBY_LIBDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"libdir\"@:>@)'`\n\n#   RUBY_LIBRUBYARG=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"LIBRUBYARG_SHARED\"@:>@)'`\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# uncomment the following line to get debug output for this file\n\n# set(_RUBY_DEBUG_OUTPUT TRUE)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the list of possible names of the ruby executable depending\n\n# on which version of ruby is required\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if 1.9 is required, don't look for ruby18 and ruby1.8, default to version 1.8\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we can't construct that if only major version is given\n",
        "Line" : 63,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# if we want a version below 1.9, also look for ruby 1.8\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# query the ruby version\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# query the different directories\n",
        "Line" : 108,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# site_ruby\n",
        "Line" : 116,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# vendor_ruby available ?\n",
        "Line" : 120,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# save the results in the cache so we don't have to run ruby the next time again\n",
        "Line" : 129,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# In case RUBY_EXECUTABLE could not be executed (e.g. cross compiling)\n\n# try to detect which version we found. This is not too good.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# by default assume 1.8.0\n",
        "Line" : 165,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# check whether we found 1.9.x\n",
        "Line" : 169,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# check whether we found 2.0.x\n",
        "Line" : 174,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# check whether we found 2.1.x\n",
        "Line" : 179,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# if ruby > 1.8 is required or if ruby > 1.8 was found, search for the config.h dir\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Determine the list of possible names for the ruby library\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Set some variables for compatibility with previous version of this file\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/FindWHEREAMI.cmake" : {
      "ObjectId" : "cf43904917ac22bbf3b81b3e4455a36c28b86166",
      "LastModified" : "2017-08-31T00:28:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindYAMLCPP.cmake" : {
      "ObjectId" : "87bb097d5bec10f044d5b4a5af74935e48b5b9c2",
      "LastModified" : "2017-08-31T00:28:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exe/CMakeLists.txt" : {
      "ObjectId" : "ef1cf1bda3849fc268229c90325fd4fa06a926f3",
      "LastModified" : "2017-08-31T00:28:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set compiler-specific flags\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the libfacter headers\n",
        "Line" : 12,
        "CharPositionInLine" : 15
      },
      "2" : {
        "Text" : "# fix until Leatherman switches to private dependencies\n",
        "Line" : 36,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 3
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "ce9b6c77d3ff1ee84351c4ac7f415c0eecbdf8d4",
      "LastModified" : "2018-08-22T18:09:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get the HEAD SHA1 commit message\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a file containing the above version numbers\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate a .gemspec file based on the above version numbers\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set compiler-specific flags\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the common (platform-independent) sources\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the POSIX sources if on a POSIX platform\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the platform-specific sources\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The GetPerformanceInfo symbol has moved around a lot between Windows versions;\n\n# these options tie it to the backwards-compatible version.\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# javah does not atomically write the header file, so parallel builds can\n\n# read it before it finishes writing if not careful.\n\n# JDK versions after 9 don't provide javah. Use javac in these cases\n",
        "Line" : 286,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Anything that depends on facter-jruby wants both the jar AND the completely written header.\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Set include directories\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the library target without a prefix (name already has the 'lib') and use '.so' for all platforms (Ruby extension file extension)\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# On AIX we need to be built such that we are \"dynamically\n\n# loadable\". This also means specifying an entry point, which for\n\n# a ruby module should be our ruby init fn.\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Static libraries should come before shared libraries, or you can end up\n\n# with some really annoying link errors. However, we can configure whether\n\n# Boost and Leatherman are linked statically or dynamically.\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If Leatherman is shared, Boost should come first because\n\n# it's static, or the order doesn't matter.\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# If Leatherman is static, it should come first as it depends\n\n# on Boost.\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Link in additional libraries\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Always generate spec_helper.rb, as they might be used in packaging\n\n# and testing on another machine.\n\n# Generate a file for ruby testing\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Unfortunately the default DLEXT for most rubies on OSX is \"bundle\"\n\n# Ruby calls dlopen for the extension, which doesn't care if the \"bundle\" really is a dylib\n\n# Therefore, workaround this by symlinking \"libfacter.bundle\" to \"libfacter.so\"\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Disable actually installing facter.rb if Ruby is not present and RUBY_LIB_INSTALL not specified.\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 20
    },
    "lib/tests/CMakeLists.txt" : {
      "ObjectId" : "d43543addd46b45c74b866f9583c254350487678",
      "LastModified" : "2018-09-27T21:04:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the common (platform-independent) sources\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set compiler-specific flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the ruby tests if there's a ruby installed\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the POSIX sources if on a POSIX platform\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the platform-specific sources\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On Windows with GCC 5.2, Boost.System emits warnings that aren't correctly\n\n# suppressed by pragmas. Explicitly skip them.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Generate a file containing the path to the fixtures\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "locales/CMakeLists.txt" : {
      "ObjectId" : "e4628a4e7ddeb5a4a8f945dc8cae6bfbe8dab441",
      "LastModified" : "2017-08-31T00:28:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 4620
}