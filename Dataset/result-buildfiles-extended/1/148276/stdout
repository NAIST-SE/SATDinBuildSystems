{
  "Repository" : "148276",
  "Revision" : "HEAD",
  "ObjectId" : "af32a14fc17780225db77f4ae607bec4047897e4",
  "CommitTime" : "2019-04-05T01:11:39Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "518c198988efc6edc9ea0909e3ddb4e72d53daaa",
      "LastModified" : "2018-11-10T14:15:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This usage of CMake requires at least version 2.4 (checks are made to determine what to use when certain versions lack functions)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the project as C++ primarily, but have C enabled for the checks required later\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Detect the version of CMake for the later conditional checks\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Detect is we are using CMake 2.6 or better, these versions include functions that require less work than CMake 2.4 does\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Also detect if we are using CMake 2.4.8 or better, the FIND sub-command of list() is nonexistent in earlier versions\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Also detect if we are using CMake 2.4.4 or better, the CheckCXXCompilerFlag module and SORT sub-command of list() are nonexistent in earlier versions\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ALSO detect if we are using CMake 2.4.2 or better, the APPEND sub-command of list() is nonexistent in earlier versions\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Override the module include path to include our directory, for our Anope.cmake, as well as we are using our own version of the NSIS template\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Force the locale to C for later uses of things like gcc so the messages come up in English, not the user's default language\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Start with empty defaults for library and include directories, to be used by GNU compilers only\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check that we aren't running on an ancient broken GCC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If we are using a GNU compiler (have to use CXX because it seems to fail on C), we will be able to determine it's default paths for libraries and includes\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# First look for the compiler's default library directories\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Find only the part after \"libraries: \"\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Replace the colons in the list with semicolons (only when not on MinGW, which uses semicolons already), and if on MinGW, just copy the line\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Iterate through the libraries\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Check if the first character is an equal sign, and skip that library directory as it is (I believe) the primary default and shows up later in the list anyways\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# If the directory had no = in front of it, make sure it's absolute and add it to the list of default library directories\n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Remove duplicate entries from the list\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Create a temporary file to test for the default include directories\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Next, we look for the compiler's default include directories\n\n# Run the command to find the default include directories\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Remove the empty file, it is no longer needed\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Convert the new lines to semicolons\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Temporary variable saying if we are in the search list or not\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Iterate through the lines\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# If the line has the following on it, the next lines will contain directory names\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# If the line has the following on it, we hit the end of the list\n",
        "Line" : 138,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# If we are within the block between the above two lines...\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Get everything but the first character of the line\n",
        "Line" : 144,
        "CharPositionInLine" : 10
      },
      "29" : {
        "Text" : "# For systems like Mac OS X, look for include paths that say \" (framework directory)\" at the end of them and strip that off\n",
        "Line" : 148,
        "CharPositionInLine" : 10
      },
      "30" : {
        "Text" : "# Convert the path to an absolute one, just in case it wasn't\n",
        "Line" : 150,
        "CharPositionInLine" : 10
      },
      "31" : {
        "Text" : "# Add that directory to the list of default include directories\n",
        "Line" : 152,
        "CharPositionInLine" : 10
      },
      "32" : {
        "Text" : "# Remove duplicate entries from the list\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# If we are using Visual Studio, locate the path of the Windows Server 2008 SDK or Windows Server 2003 Platform SDK, depending on which is installed\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# If the path comes up as \"/registry\" from any of these, the path wasn't found, otherwise, we'll set WSDK_PATH to the corresponding path\n\n# Look for the 2008 SDK under HKLM first\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# If not found, look for the 2003 SDK under HKLM\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If not found, look for the 2008 SDK under HKCU\n",
        "Line" : 173,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# If not found, look for the 2003 SDK under HKCU\n",
        "Line" : 176,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# The SDK was never found, set the path to nothing\n",
        "Line" : 179,
        "CharPositionInLine" : 10
      },
      "39" : {
        "Text" : "# If the user specifies -DCMAKE_BUILD_TYPE on the command line, take their definition\n\n# and dump it in the cache along with proper documentation, otherwise set CMAKE_BUILD_TYPE\n\n# to Debug\n\n# Only do this if not using Visual Studio\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# If running under MinGW, we have to force the resource compiler settings (hopefully this will be fixed in a later version of CMake)\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Include the checking functions used later in this CMakeLists.txt\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# If extra include directories were specified, tell cmake about them.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# If extra library directories were specified, tell cmake about them.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Find gettext\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Use the following directories as includes\n\n# Note that it is important the binary include directory comes before the\n\n# source include directory so the precompiled headers work correctly.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Pass on REPRODUCIBLE_BUILD\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# If using Windows, always add the _WIN32 define\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# And include the windows specific folder for our anope_windows.h\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# If using Visual Studio, set the C++ flags accordingly\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Remove the default exception handling flags, also remove default warning level flag\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Set the compile flags to have warnings on the max setting (but disable a few annoying ones), exception handling turned on, the proper defines\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Otherwise, we're not using Visual Studio\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Set the compile flags to have all warnings on (including shadowed variables)\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# If on a *nix system, also set the compile flags to remove GNU extensions (favor ISO C++) as well as reject non-ISO C++ code, also remove all leading underscores in exported symbols (only on GNU compiler)\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# If we aren't on a *nix system, we are using MinGW\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Also, if we are building under MinGW, add another define for MinGW\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# If CMake has found that the given system requires a special library for dl* calls, include it with the linker flags\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Under MinGW, the -shared flag isn't properly set in the module-specific linker flags, add it from the C flags for shared libraries\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Under Windows, we set the executable name for Anope to be anope\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Under *nix, we set the executable name for Anope to be services\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# If we are not using Visual Studio, we'll run the following checks\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Check if the C++ compiler can accept the -pipe flag, and add it to the compile flags if it works\n",
        "Line" : 307,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If using CMake 2.4.4 or better, we can use check_cxx_compiler_flag\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# If using CMake 2.4.3 or older, we will use check_cxx_accepts_flags instead\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# If the flag was accepted, add it to the list of flags\n",
        "Line" : 315,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# The following are additional library checks, they are not required for Windows\n",
        "Line" : 320,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# Check if socket is within the socket library (if the library exists), and add it to the linker flags if needed\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Check if inet_addr is within the nsl library (if the library exists), and add it to the linker flags if needed\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Check if pthread_create is within the pthread library (if the library exists), and add it to the linker flags if needed\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# If DEFUMASK wasn't passed to CMake, set a default depending on if RUNGROUP was passed in or not\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Set the DEBUG_BUILD for sysconf.h\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Check for the existence of the following include files\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Check for the existence of the following functions\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Strip the leading and trailing spaces from the compile flags\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Strip the leading and trailing spaces from the linker flags\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Search for the following programs\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# If a INSTDIR was passed in to CMake, use it as the install prefix, otherwise set the default install prefix to the services directory under the user's home directory\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Set default paths for various directories if not already defined\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Version number processing\n\n# Find all lines in src/version.sh that start with VERSION_\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Iterate through the strings found\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Depends on CMP0007 OLD\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Default build version to 0\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Only change the build number if version.h exists\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Attempt to read the build number from include/version.h\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Get the length of the string\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# Subtract 22 from the string's length\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Extract the value from the string\n",
        "Line" : 443,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Set VERSION_BUILD correctly\n",
        "Line" : 445,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# Set the version variables based on what was found above\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Only do the following for Windows\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Generate the win32.rc file using the above variables\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Add the initial files to ignore which will be ignored regardless of if you are building in-source or out-of-source\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Add the files we don't want the periods converted for\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# If the two directories are the same, we are building in-source, thus we need to ignore more files from the build\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Add the files that need their periods converted\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Add the files we don't want the periods converted for\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# If using Visual Studio, add these files as well\n",
        "Line" : 473,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# Go into the following directories and run their CMakeLists.txt as well\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# Get the filename of the Anope binary, to use later\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# At install time, create the following additional directories\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# On non-Windows platforms, if RUNGROUP is set, change the permissions of the below directories, as well as the group of the data directory\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# On Windows platforms, install extra files\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# Package any DLLs in src/win/\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Only process the CPack section if we have CPack\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# Various options for CPack\n",
        "Line" : 518,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# The following doesn't actually do anything. :(\n\n#set(CPACK_RESOURCE_FILE_README \"${Anope_SOURCE_DIR}/docs/README\")\n\n# The following is primarily for NSIS\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# By default, do not warn when built on machines using only VS Express:\n",
        "Line" : 530,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# Also for Windows, include installing the MSVCRT library\n",
        "Line" : 534,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# The following doesn't work, but a bug report has been filed about it\n\n#set(CPACK_CREATE_DESKTOP_LINK_${SERVICES_BINARY} TRUE)\n",
        "Line" : 546,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 110
    },
    "cmake/Anope.cmake" : {
      "ObjectId" : "f93384cc0594e7aa1033c896c2f11f83dfc65546",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# strip_string(<input string> <output string>)\n\n#\n\n# A macro to handle stripping the leading and trailing spaces from a string,\n\n#   uses string(STRIP) if using CMake 2.6.x or better, otherwise uses\n\n#   string(REGEX REPLACE).\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For CMake 2.6.x or better, we can just use the STRIP sub-command of string()\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# For CMake 2.4.x, we will have to use the REGEX REPLACE sub-command of string() instead\n\n# First check if the input string is empty or not\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Determine if the string is entirely empty or not\n",
        "Line" : 18,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# We detect if there is any leading whitespace and remove any if there is\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Next we detect if there is any trailing whitespace and remove any if there is\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "###############################################################################\n\n# append_to_list(<list> <args>...)\n\n#\n\n# A macro to handle appending to lists, uses list(APPEND) if using CMake 2.4.2\n\n#   or better, otherwise uses set() instead.\n\n###############################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# For CMake 2.4.2 or better, we can just use the APPEND sub-command of list()\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# For CMake 2.4.x before 2.4.2, we have to do this manually use set() instead\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "###############################################################################\n\n# find_in_list(<list> <value> <output variable>)\n\n#\n\n# A macro to handle searching within a list, will store the result in the\n\n#   given <output variable>, uses list(FIND) if using CMake 2.6.x or better\n\n#   (or CMake 2.4.8 or better), otherwise it iterates through the list to find\n\n#   the item.\n\n###############################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For CMake 2.4.8 or better, we can use the FIND sub-command of list()\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# For CMake 2.4.x before 2.4.8, we have to do this ourselves (NOTE: This is very slow due to a lack of break() as well)\n\n# Firstly we set the position to -1 indicating nothing found, we also use a temporary position\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Iterate through the list\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the item we are looking at is the item we are trying to find, set that we've found the item\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Increase the position value by 1\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Set the given FOUND variable to the result\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "###############################################################################\n\n# remove_list_duplicates(<list>)\n\n#\n\n# A macro to handle removing duplicates from a list, uses\n\n#   list(REMOVE_DUPLICATES) if using CMake 2.6.x or better, otherwise it uses\n\n#   a slower method of creating a temporary list and only adding to it when\n\n#   a duplicate item hasn't been found.\n\n###############################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# For CMake 2.6.x or better, this can be done automatically\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# For CMake 2.4.x, we have to do this ourselves, firstly we'll clear a temporary list\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Iterate through the old list\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Check if the item is in the new list\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# If the item was not found, append it to the list\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Replace the old list with the new list\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "###############################################################################\n\n# remove_item_from_list(<list> <value>)\n\n#\n\n# A macro to handle removing a value from a list, uses list(REMOVE_ITEM) in\n\n#   both cases, but can remove the value itself using CMake 2.4.2 or better,\n\n#   while older versions use a slower method of iterating the list to find the\n\n#   index of the value to remove.\n\n###############################################################################\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# For CMake 2.4.2 or better, this can be done automatically\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# For CMake 2.4.x before 2.4.2, we have to do this ourselves, firstly we set the index and a variable to indicate if the item was found\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Iterate through the old list\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# If the item hasn't been found yet, but the current item is the same, remove it\n",
        "Line" : 138,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Increase the index value by 1\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "###############################################################################\n\n# sort_list(<list>)\n\n#\n\n# A macro to handle sorting a list, uses list(SORT) if using CMake 2.4.4 or\n\n#   better, otherwise it uses a slower method of creating a temporary list and\n\n#   adding elements in alphabetical order.\n\n###############################################################################\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# For CMake 2.4.4 or better, this can be done automatically\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# For CMake 2.4.x before 2.4.4, we have to do this ourselves, firstly we'll create a teporary list\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Iterate through the old list\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Temporary index position for the new list, as well as temporary value to store if the item was ever found\n",
        "Line" : 167,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Iterate through the new list\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Compare the items, only if nothing was found before\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Increase the index value by 1\n",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# If the item was never found, just append it to the end\n",
        "Line" : 182,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Replace the old list with the new list\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "###############################################################################\n\n# read_from_file(<filename> <regex> <output variable>)\n\n#\n\n# A macro to handle reading specific lines from a file, uses file(STRINGS) if\n\n#   using CMake 2.6.x or better, otherwise we read in the entire file and\n\n#   perform a string(REGEX MATCH) on each line of the file instead.  This\n\n#   macro can also be used to read in all the lines of a file if REGEX is set\n\n#   to \"\".\n\n###############################################################################\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# For CMake 2.6.x or better, we can just use the STRINGS sub-command to get the lines that match the given regular expression (if one is given, otherwise get all lines)\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# For CMake 2.4.x, we need to do this manually, firstly we read the file in\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Next we replace all newlines with semicolons\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# For no regular expression, just set the result to all the lines\n",
        "Line" : 215,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Clear the result list\n",
        "Line" : 218,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Iterate through all the lines of the file\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# Check for a match against the given regular expression\n",
        "Line" : 222,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# If we had a match, append the match to the list\n",
        "Line" : 224,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# Set the given STRINGS variable to the result\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "###############################################################################\n\n# extract_include_filename(<line> <output variable> [<optional output variable of quote type>])\n\n#\n\n# This macro will take a #include line and extract the filename.\n\n###############################################################################\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Strip the leading and trailing spaces from the include line\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Make sure to only do the following if there is a string\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Extract the filename including the quotes or angle brackets\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# If an optional 3rd argument is given, we'll store if the quote style was quoted or angle bracketed\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Now remove the quotes or angle brackets\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Set the filename to the the given variable\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "###############################################################################\n\n# find_includes(<source filename> <output variable>)\n\n#\n\n# This macro will search through a file for #include lines, regardless of\n\n#   whitespace, but only returns the lines that are valid for the current\n\n#   platform CMake is running on.\n\n###############################################################################\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Read all lines from the file that start with #, regardless of whitespace before the #\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Set that any #include lines found are valid, and create temporary variables for the last found #ifdef/#ifndef\n",
        "Line" : 275,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Create an empty include list\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Iterate through all the # lines\n",
        "Line" : 281,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Search for #ifdef, #ifndef, #else, #endif, and #include\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# If we found a #ifdef on the line, extract the data after the #ifdef and set if the lines after it are valid based on the variables in CMake\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Extract the define\n",
        "Line" : 291,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# Replace _WIN32 with WIN32, so we can check if the WIN32 variable of CMake is set instead of _WIN32\n",
        "Line" : 293,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# Set the last define to this one, and set the last check to true, so when #else is encountered, we can do an opposing check\n",
        "Line" : 297,
        "CharPositionInLine" : 6
      },
      "66" : {
        "Text" : "# If the define is true (it either exists or is a non-false result), the lines following will be checked, otherwise they will be skipped\n",
        "Line" : 300,
        "CharPositionInLine" : 6
      },
      "67" : {
        "Text" : "# If we found a #ifndef on the line, the same thing as #ifdef is done, except with the checks in the opposite direction\n",
        "Line" : 307,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# Extract the define\n",
        "Line" : 309,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# Replace _WIN32 with WIN32, so we can check if the WIN32 variable of CMake is set instead of _WIN32\n",
        "Line" : 311,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# Set the last define to this one, and set the last check to false, so when #else is encountered, we can do an opposing check\n",
        "Line" : 315,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# If the define is not true (it either doesn't exists or is a false result), the lines following will be checked, otherwise they will be skipped\n",
        "Line" : 318,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "# If we found a #else on the line, we check the last define in the opposite direction\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# When LAST_CHECK is true, we were inside a #ifdef, now act as if we are entering a #ifndef section by doing an opposing check\n",
        "Line" : 327,
        "CharPositionInLine" : 10
      },
      "74" : {
        "Text" : "# When LAST_CHECK is false, we were inside a #ifndef, now act as if we are entering a #ifdef section by doing an opposing check\n",
        "Line" : 334,
        "CharPositionInLine" : 10
      },
      "75" : {
        "Text" : "# If we found a #endif on the line, we'll assume everything following the line is valid until we meet another one of the above lines\n",
        "Line" : 343,
        "CharPositionInLine" : 10
      },
      "76" : {
        "Text" : "# If we found a #include on the line, add the entire line to the list of includes unless the line isn't valid\n",
        "Line" : 347,
        "CharPositionInLine" : 12
      },
      "77" : {
        "Text" : "###############################################################################\n\n# calculate_depends(<source filename> [<optional output variable for includes>])\n\n#\n\n# This macro is used in most of the src (sub)directories to calculate the\n\n#   header file dependencies for the given source file.\n\n###############################################################################\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Temporarily set that we didn't get a 3rd argument before we actually check if we did get one or not\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Check for a third argument\n",
        "Line" : 370,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Find all the lines in the given source file that have any form of #include on them, regardless of whitespace, but only if they are valid for the platform we are on\n",
        "Line" : 374,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Reset the list of headers to empty\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Iterate through the strings containing #include (if any)\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# Extract the filename from the #include line\n",
        "Line" : 380,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# The following checks will only be done if there was a request for angle includes to be checked\n",
        "Line" : 383,
        "CharPositionInLine" : 6
      },
      "85" : {
        "Text" : "# Find the path of the include file\n",
        "Line" : 385,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "# If the include file was found, add it's path to the list of include paths, but only if it doesn't already exist and isn't in the defaults for the compiler\n",
        "Line" : 391,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "# This used to be find_in_list, but it was changed to this loop to do a find on each default include directory, this fixes Mac OS X trying to get it's framework directories in here\n",
        "Line" : 393,
        "CharPositionInLine" : 10
      },
      "88" : {
        "Text" : "# XXX\n",
        "Line" : 409,
        "CharPositionInLine" : 10
      },
      "89" : {
        "Text" : "###############################################################################\n\n# calculate_libraries(<source filename> <output variable for linker flags> <output variable for extra depends>)\n\n#\n\n# This macro is used in most of the module (sub)directories to calculate the\n\n#   library dependencies for the given source file.\n\n###############################################################################\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Set up a temporary LDFLAGS for this file\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Reset extra dependencies\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Reset library paths\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Reset libraries\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Check to see if there are any lines matching: /* RequiredLibraries: [something] */\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# Iterate through those lines\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Strip off the /* RequiredLibraries: and */ from the line\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Replace all commas with semicolons\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Iterate through the libraries given\n",
        "Line" : 446,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Locate the library to see if it exists\n",
        "Line" : 448,
        "CharPositionInLine" : 6
      },
      "100" : {
        "Text" : "# If the library was found, we will add it to the linker flags\n",
        "Line" : 455,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "# Get the path only of the library, to add it to linker flags\n",
        "Line" : 457,
        "CharPositionInLine" : 8
      },
      "102" : {
        "Text" : "# For Visual Studio, instead of editing the linker flags, we'll add the library to a separate list of extra dependencies\n",
        "Line" : 460,
        "CharPositionInLine" : 10
      },
      "103" : {
        "Text" : "# For all others, add the library paths and libraries\n",
        "Line" : 463,
        "CharPositionInLine" : 10
      },
      "104" : {
        "Text" : "# In the case of the library not being found, we fatally error so CMake stops trying to generate\n",
        "Line" : 468,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# Remove duplicates from the library paths\n",
        "Line" : 473,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Remove diplicates from the libraries\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Iterate through library paths and add them to the linker flags\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Iterate through libraries and add them to the linker flags\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "###############################################################################\n\n# check_functions(<source filename> <output variable set to TRUE on success>)\n\n#\n\n# This macro is used in most of the module (sub)directories to calculate the\n\n#   fcuntion dependencies for the given source file.\n\n###############################################################################\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# Default to true\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Check to see if there are any lines matching: /* RequiredFunctions: [something] */\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Iterate through those lines\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# Strip off the /* RequiredFunctions: and */ from the line\n",
        "Line" : 509,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Replace all commas with semicolons\n",
        "Line" : 511,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "# Iterate through the functions given\n",
        "Line" : 513,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "# Check if the function exists\n",
        "Line" : 515,
        "CharPositionInLine" : 6
      },
      "117" : {
        "Text" : "# If we don't have the function warn the user and set SUCCESS to FALSE\n",
        "Line" : 517,
        "CharPositionInLine" : 6
      },
      "118" : {
        "Text" : "###############################################################################\n\n# add_to_cpack_ignored_files(<item> [TRUE])\n\n#\n\n# A macro to update the environment variable CPACK_IGNORED_FILES which\n\n#   contains a list of files for CPack to ignore. If the optional 2nd argument\n\n#   of TRUE is given, periods will be converted to \\\\. for CPack.\n\n###############################################################################\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# Temporary copy of the orignal item\n",
        "Line" : 534,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# If we have 2+ arguments, assume that the second one was something like TRUE (doesn't matter really) and convert periods so they will be \\\\. for CPack\n",
        "Line" : 536,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# If the environment variable is already defined, just tack the item to the end\n",
        "Line" : 540,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Otherwise set the environment variable to the item\n",
        "Line" : 543,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 123
    },
    "cmake/FindGettext.cmake" : {
      "ObjectId" : "975294d217796ed57114de878e34b3499f926cdd",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the header files, libs, and executables for gettext\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If we found everything we need set variables correctly for lang/CMakeLists.txt to use\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ReadFile.cmake" : {
      "ObjectId" : "be60f1fa7be0bf08f360a6e5d1cee36db30405b7",
      "LastModified" : "2010-07-16T02:55:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is external to the read_from_file macro in Anope.cmake in order to\n\n# get around a possible memory leak in older versions of CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "8bb635dcf788f3a80bda9adbd5282b0058472140",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only install example.chk and example.conf from this directory\n\n# NOTE: I would've had this just find all files in the directory, but that would include files not needed (like this file)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "082b1da0e03a545341ebf5519154b9fd9e923c26",
      "LastModified" : "2012-05-07T01:43:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We only need to install these docs on Windows as most Windows installations will be binary, not source\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only install given files from this directory\n\n# NOTE: I would've had this just find all files in the directory, but that would include files not needed (like this file)\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add README.txt to list of files for CPack to ignore\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "1a96d711156179ac7dc09474ea8e2ccc7dce5051",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set version.cpp to use C++ as well as set its compile flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate version executable to modify version.h, setting it's linker flags as well\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Modify version.h from the above executable, with dependencies to version.cpp\n\n# and all of the source files in the main build\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add version to list of files for CPack to ignore\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Extract the filename from the #include line\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Add a custom target to the above file\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "include/sysconf.h.cmake" : {
      "ObjectId" : "5f0e275c3755fa10e9995f10ebadb8dd05c8a2cd",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "language/CMakeLists.txt" : {
      "ObjectId" : "577e132a3c114d70729f3cb307a3b4a52d992e8e",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only do this if gettext is installed\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get all of the .po files\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Get the domain for this language file\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Get the language for this language file\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get the .mo file name\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Add the .mo file to a list for use later with add_custom_target\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Run msgfmt on the language file, depends on the .po file\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Add to cpack ignored files if not on Windows.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Install the new language file\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Generate languages, depends on the mo files\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "modules/CMakeLists.txt" : {
      "ObjectId" : "7894b8c114261d088fca0ea0c164d1c4867edbc4",
      "LastModified" : "2017-01-17T04:03:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If using Windows, add the MODULE_COMPILE define\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert the real source file extension to have a .so extension\n",
        "Line" : 24,
        "CharPositionInLine" : 10
      },
      "2" : {
        "Text" : "# Temporary variable for the current source's include directories\n",
        "Line" : 26,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# Calculate the header file dependencies for the given source file\n",
        "Line" : 28,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# If there were some extra include directories, add them to the list\n",
        "Line" : 30,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Reset linker flags\n",
        "Line" : 35,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# Reset extra dependencies\n",
        "Line" : 37,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# Calculate the library dependencies for the given source file\n",
        "Line" : 39,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Reset has_function\n",
        "Line" : 41,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Check the function dependencies for the given source file\n",
        "Line" : 43,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Only continue if this module has all of the required functions\n",
        "Line" : 45,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# For Visual Studio only, include win32_memory static library, required to override Visual Studio's overrides of the new/delete operators\n",
        "Line" : 47,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Generate the module and set its linker flags, also set it to depend on the main Anope executable to be built beforehand\n",
        "Line" : 53,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Windows requires this because it's weird\n",
        "Line" : 55,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# For Windows only, have the module link to the export library of Anope as well as wsock32 and Ws2_32 libraries (most of the modules probably don't need this, but this is to be on the safe side), also set its version\n",
        "Line" : 67,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# Set the module to be installed to the module directory under the data directory\n",
        "Line" : 76,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# Set all the files to use C++ as well as set their compile flags (use the module-specific compile flags, though)\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Iterate through the source files in the subdirectory\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Temporary variable for the current source's include directories\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Calculate the header file dependencies for the given source file\n",
        "Line" : 102,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# If there were some extra include directories, add them to the list\n",
        "Line" : 104,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Reset linker flags\n",
        "Line" : 109,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Reset extra dependencies\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# Calculate the library dependencies for the given source file\n",
        "Line" : 113,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Check the function dependencies for the given source file\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Append this source file's linker flags to the subdirectoy's linker flags, if there are any to append\n",
        "Line" : 118,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Continue if library and function requirements are met\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Remove duplicates from the linker flags\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Remove duplicates from the extra dependencies\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# For Visual Studio only, include win32_memory static library, required to override Visual Studio's overrides of the new/delete operators\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Generate the module and set it's linker flags, also set it to depend on the main Anope executable to be built beforehand\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# For Windows only, have the module link to the export library of Anope as well as wsock32 and Ws2_32 libraries (most of the modules probably don't need this, but this is to be on the safe side), also set it's version\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Set the module to be installed to the module directory under the data directory\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 33
    },
    "modules/extra/CMakeLists.txt" : {
      "ObjectId" : "6c50f860548882476e78e7e318f986b80b918c38",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is here to prevent the building of the extras directory.\n\n# Users who want to build the contents of this directory should copy\n\n# or symlink files out of it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/extra/stats/irc2sql/CMakeLists.txt" : {
      "ObjectId" : "781f0ef1f5437fdc1c044d05a63f1bc8f3c0c6c9",
      "LastModified" : "2017-01-17T04:03:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/third/language/CMakeLists.txt" : {
      "ObjectId" : "85278f5be2bb8d572f70d698e46a82b1564d14ca",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only do this if gettext is installed\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get all of the .po files\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Get the domain for this language file\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Get the language for this language file\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get the .mo file name\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Add the .mo file to a list for use later with add_custom_target\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Run msgfmt on the language file, depends on the .po file\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Add to cpack ignored files if not on Windows.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Install the new language file\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Generate languages, depends on the mo files\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "modules/webcpanel/CMakeLists.txt" : {
      "ObjectId" : "ea5a03b358ae9009dae304573d162bbe2ac1ef7e",
      "LastModified" : "2017-01-17T04:03:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b390d164b89a74d02badea3aabba70e5276d1157",
      "LastModified" : "2015-08-13T00:26:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find all the *.cpp files within the current source directory, and sort the list\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set all the files to use C++ as well as set their compile flags (use the module-specific compile flags, though)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create an empty list to store extra include directories\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Iterate through all the source files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Temporary variable for the current source's include directories\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Calculate the header file dependencies for the given source file\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If there were some extra include directories, add them to the list\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If there were extra include directories, remove the duplicates and add the directories to the include path\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Under Windows, we also include a resource file to the build\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make sure that the resource file is seen as an RC file to be compiled with a resource compiler, not a C++ compiler\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add the resource file to the list of sources\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For MinGW, we have to change the compile flags\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If any sort of debugging is being enabled, add a _DEBUG define to the flags for the resource compiler\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# For anything else, assumingly Visual Studio at this point, use a different set of compile flags\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# If compiling with Visual Studio, create a static library out of win32/win32_memory.cpp to be included with everything else, needed to override its override of new/delete operators\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# https://sourceware.org/bugzilla/show_bug.cgi?id=12633\n",
        "Line" : 77,
        "CharPositionInLine" : 34
      },
      "16" : {
        "Text" : "# Generate the Anope executable and set it's linker flags, also set it to export it's symbols even though it's not a module\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# On Windows, also link Anope to the wsock32 and Ws2_32 library, as well as set the version\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Building the Anope executable requires the version.h header to be generated\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Also require the language files if we have gettext\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Get the filename of the Anope executable as it is in on this system\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add the Anope executable to the list of files for CPack to ignore\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Generate sysconf.h from the earlier configuration\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Go into the following directories and run their CMakeLists.txt as well\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set Anope to be installed to the bin directory\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "3e00b981d38863933e6abb793fc55c3a860ee53f",
      "LastModified" : "2017-01-17T04:03:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find all the *.cpp files within the current source directory, and sort the list\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set all the files to use C++ as well as set their compile flags\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Iterate through all the source files\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert the source file extension to have no extension\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Calculate the header file dependencies for the given source file\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Only continue if this file isn't skipped\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Generate the executable and set its linker flags, also set it to depend on the main Anope executable to be built beforehand\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Only for Windows, set anopesmtp to require the wsock32 library\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Set the executable to be installed to the bin directory under the main directory\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add the executable to the list of files for CPack to ignore\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# If not on Windows, generate anoperc and install it along with mydbgen\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# On non-Windows platforms, if RUNGROUP is set, change the permissions of the tools directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/win32/win32.rc.cmake" : {
      "ObjectId" : "80035e709748ad87f3c34163d75b090a967781c2",
      "LastModified" : "2019-01-01T16:43:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include \"resource.h\"\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#define APSTUDIO_READONLY_SYMBOLS\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#define APSTUDIO_HIDDEN_SYMBOLS\n\n#include <windows.h>\n\n#undef APSTUDIO_HIDDEN_SYMBOLS\n\n#include \"resource.h\"\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#undef APSTUDIO_READONLY_SYMBOLS\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)\n\n#ifdef _WIN32\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#pragma code_page(1252)\n\n#endif //_WIN32\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#ifndef _MAC\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#ifndef MINGW\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#endif\n\n#ifdef _DEBUG\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#else\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#endif\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#endif    // !_MAC\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#endif    // English (U.S.) resources\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#ifndef APSTUDIO_INVOKED\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#endif    // not APSTUDIO_INVOKED\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "CMAKE" : 16,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 3475
}