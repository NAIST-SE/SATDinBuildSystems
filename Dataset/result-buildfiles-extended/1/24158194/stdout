{
  "Repository" : "24158194",
  "Revision" : "HEAD",
  "ObjectId" : "4509e8efbb64637df26e5d072a289b57d600b5ec",
  "CommitTime" : "2019-04-17T13:50:08Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "56e58f3320a33a71c48ccc4ed28ab143956d7314",
      "LastModified" : "2019-03-26T14:30:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set cmake_policies\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# project name and version should be set after cmake_policy CMP0048\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup cccache.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Let's find our dependencies\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Figure out what compiler and system are we using\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include utils\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create license.h from LICENSE.txt and template\n\n# Converting to char array is required due to MSVC's string size limit.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/EthBuildInfo.cmake" : {
      "ObjectId" : "b87d29f544037c205a69faae48f1b43b7b7c8447",
      "LastModified" : "2018-07-27T07:41:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set build platform; to be written to BuildInfo.h\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#cmake build type may be not speCified when using msvc\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Generate header file containing useful build information\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/EthCcache.cmake" : {
      "ObjectId" : "9410cbcde7f1f73424b33e00e3508a3743f9f5a0",
      "LastModified" : "2017-09-20T14:39:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup ccache.\n\n#\n\n# The ccache is auto-enabled if the tool is found.\n\n# To disable set -DCCACHE=OFF option.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Change ccache config to meet cotire requirements.\n",
        "Line" : 10,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cmake/EthCheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "c6ed35b4e230ba9fdb54e9faa7dcbffefd166cde",
      "LastModified" : "2017-09-26T20:00:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds CXX compiler flag if the flag is supported by the compiler.\n\n#\n\n# This is effectively a combination of CMake's check_cxx_compiler_flag()\n\n# and add_compile_options():\n\n#\n\n#    if(check_cxx_compiler_flag(flag))\n\n#        add_compile_options(flag)\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove leading - or / from the flag name.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If the optional argument passed, store the result there.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/EthCompilerSettings.cmake" : {
      "ObjectId" : "60ebe88634fbcebab98161b1763a258f08f2b66c",
      "LastModified" : "2019-02-07T19:48:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# EthCompilerSettings.cmake\n\n#\n\n# CMake file for cpp-ethereum project which specifies our compiler settings\n\n# for each supported platform and build configuration.\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# Copyright (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang seeks to be command-line compatible with GCC as much as possible, so\n\n# most of our compiler settings are common between GCC and Clang.\n\n#\n\n# These settings then end up spanning all POSIX platforms (Linux, OS X, BSD, etc)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enables all the warnings about constructions that some users consider questionable,\n\n# and that are easy to avoid.  Also enable some extra warning flags that are not\n\n# enabled by -Wall.   Finally, treat at warnings-as-errors, which forces developers\n\n# to fix warnings as they arise, so they don't accumulate \"to be fixed later\".\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Configuration-specific compiler settings.\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Additional GCC-specific compiler settings.\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Check that we've got GCC 4.7 or newer.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Additional Clang-specific compiler settings.\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Set stack size to 32MB - by default Apple's clang defines a stack size of 8MB.\n\n# Normally 16MB is enough to run all tests, but it will exceed the stack, if -DSANITIZE=address is used.\n",
        "Line" : 54,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Some Linux-specific Clang settings.  We don't want these for OS X.\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO - Is this even necessary?  Why?\n\n# See http://stackoverflow.com/questions/19774778/when-is-it-necessary-to-use-use-the-flag-stdlib-libstdc.\n",
        "Line" : 62,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Tell Boost that we're using Clang's libc++.   Not sure exactly why we need to do.\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# Use fancy colors in the compiler diagnostics\n",
        "Line" : 69,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# See \"How to silence unused command line argument error with clang without disabling it?\"\n\n# When using -Werror with clang, it transforms \"warning: argument unused during compilation\" messages\n\n# into errors, which makes sense.\n\n# http://stackoverflow.com/questions/21617158/how-to-silence-unused-command-line-argument-error-with-clang-without-disabling-i\n",
        "Line" : 72,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Leave only exported symbols as public and aggressively remove others\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# Optimisation level\n",
        "Line" : 81,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# Re-enable exception catching (optimisations above -O1 disable it)\n",
        "Line" : 83,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# Remove any code related to exit (such as atexit)\n",
        "Line" : 85,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# Remove any code related to filesystem access\n",
        "Line" : 87,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# Remove variables even if it needs to be duplicated (can improve speed at the cost of size)\n",
        "Line" : 89,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# Allow memory growth, but disable some optimisations\n",
        "Line" : 91,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "# Disable eval()\n",
        "Line" : 93,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# Disable greedy exception catcher\n",
        "Line" : 95,
        "CharPositionInLine" : 3
      },
      "22" : {
        "Text" : "# Abort if linking results in any undefined symbols\n\n# Note: this is on by default in the CMake Emscripten module which we aren't using\n",
        "Line" : 97,
        "CharPositionInLine" : 3
      },
      "23" : {
        "Text" : "# Disallow deprecated emscripten build options.\n",
        "Line" : 100,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "# Export the Emscripten-generated auxiliary methods which are needed by solc-js.\n\n# Which methods of libsolc itself are exported is specified in libsolc/CMakeLists.txt.\n",
        "Line" : 102,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# Do not build as a WebAssembly target - we need an asm.js output.\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "# The major alternative compiler to GCC/Clang is Microsoft's Visual C++ compiler, only available on Windows.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# enable parallel compilation\n",
        "Line" : 113,
        "CharPositionInLine" : 34
      },
      "28" : {
        "Text" : "# specify Exception Handling Model in msvc\n",
        "Line" : 114,
        "CharPositionInLine" : 33
      },
      "29" : {
        "Text" : "# enable warnings-as-errors\n",
        "Line" : 115,
        "CharPositionInLine" : 31
      },
      "30" : {
        "Text" : "# disable unknown pragma warning (4068)\n\n# disable unsafe function warning (4996)\n\n# disable decorated name length exceeded, name was truncated (4503)\n\n# disable conversion from 'size_t' to 'type', possible loss of data (4267)\n\n# disable qualifier applied to function type has no meaning; ignored (4180)\n\n# disable C++ exception specification ignored except to indicate a function is not __declspec(nothrow) (4290)\n\n# disable conversion from 'type1' to 'type2', possible loss of data (4244)\n\n# disable forcing value to bool 'true' or 'false' (performance warning) (4800)\n",
        "Line" : 116,
        "CharPositionInLine" : 34
      },
      "31" : {
        "Text" : "# declare Windows Vista API requirement\n",
        "Line" : 124,
        "CharPositionInLine" : 45
      },
      "32" : {
        "Text" : "# undefine windows.h MAX && MIN macros cause it cause conflicts with std::min && std::max functions\n",
        "Line" : 125,
        "CharPositionInLine" : 37
      },
      "33" : {
        "Text" : "# enable utf-8 encoding (solves warning 4819)\n",
        "Line" : 126,
        "CharPositionInLine" : 33
      },
      "34" : {
        "Text" : "# disable empty object file warning\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# warning LNK4075: ignoring '/EDITANDCONTINUE' due to '/SAFESEH' specification\n\n# warning LNK4099: pdb was not found with lib\n\n# stack size 16MB\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# If you don't have GCC, Clang or VC++ then you are on your own.  Good luck!\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Code coverage support.\n\n# Copied from Cable:\n\n# https://github.com/ethereum/cable/blob/v0.2.4/CableCompilerSettings.cmake#L118-L132\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Set the linker flags first, they are required to properly test the compiler flag.\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# SMT Solvers integration\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "cmake/EthDependencies.cmake" : {
      "ObjectId" : "477a604d6dd853c9f0cb6f779e78f43e7466d2cd",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all dependencies that are not directly included in the cpp-ethereum distribution are defined here\n\n# for this to work, download the dependency via the cmake script in extdep or install them manually!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# by defining CMAKE_PREFIX_PATH variable, cmake will look for dependencies first in our own repository before looking in system paths like /usr/local/ ...\n\n# this must be set to point to the same directory as $ETH_DEPENDENCY_INSTALL_DIR in /extdep directory\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Old location for deps.\n",
        "Line" : 28,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : "# New location for deps.\n",
        "Line" : 29,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : "# LLVM shared cmake files.\n",
        "Line" : 30,
        "CharPositionInLine" : 37
      },
      "5" : {
        "Text" : "# custom cmake scripts\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## use multithreaded boost libraries, with -mt suffix\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/EthOptions.cmake" : {
      "ObjectId" : "68d6cb04505fabf7f291a8cbeba3e9a8b9966e9a",
      "LastModified" : "2019-01-23T16:30:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# features\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# components\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Define a matching property name of each of the \"features\".\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/EthPolicy.cmake" : {
      "ObjectId" : "4e29898cb838b372270e20ceba252e0d65f79997",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# it must be a macro cause policies have scopes\n\n# http://www.cmake.org/cmake/help/v3.0/command/cmake_policy.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link_directories() treats paths relative to the source dir.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Avoid warnings in CMake 3.0.2:\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# allow VERSION argument in project()\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# do not interpret if() arguments as variables!\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/EthToolchains.cmake" : {
      "ObjectId" : "a4263b7df2b62d4a6eaf52a450a30ca00936a8b6",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use default toolchain file if none is provided.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/EthUtils.cmake" : {
      "ObjectId" : "a473abcb7e85ed3500f2a8c2a5ea24508a4bdb56",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# renames the file if it is different from its destination\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindCLN.cmake" : {
      "ObjectId" : "0b574ab9f7cb2d20042e0ece6209a2f81b311931",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCVC4.cmake" : {
      "ObjectId" : "887b907b8320c04b06a25dbb1ad23741126b319f",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CVC4 may depend on either CLN or GMP.\n\n# We can assume that the one it requires is present on the system,\n\n# so we quietly try to find both and link against them, if they are\n\n# present.\n",
        "Line" : 7,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "cmake/FindGMP.cmake" : {
      "ObjectId" : "c3a0265429b80847418c83e8c92c9f3a2cf510ce",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindZ3.cmake" : {
      "ObjectId" : "bdd8ce72ff0ff39e435e274687b42fd65bc84535",
      "LastModified" : "2019-02-07T19:48:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/jsoncpp.cmake" : {
      "ObjectId" : "4ca8581dcb77908c96d7f68eca172b13464bbd5c",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Investigate why this breaks some emscripten builds and\n\n# check whether this can be removed after updating the emscripten\n\n# versions used in the CI runs.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not include all flags in CMAKE_CXX_FLAGS for emscripten,\n\n# but only use -std=c++14. Using all flags causes build failures\n\n# at the moment.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Build static lib but suitable to be included in a shared lib.\n",
        "Line" : 40,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# Create jsoncpp imported library\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Must exist.\n",
        "Line" : 51,
        "CharPositionInLine" : 45
      },
      "CommentCount" : 5
    },
    "cmake/scripts/buildinfo.cmake" : {
      "ObjectId" : "3fb6beb2b7872aa2bd2a0d17392a4ea2dc1bfa4f",
      "LastModified" : "2019-01-16T10:21:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generates BuildInfo.h\n\n#\n\n# this module expects\n\n# ETH_SOURCE_DIR - main CMAKE_SOURCE_DIR\n\n# ETH_DST_DIR - main CMAKE_BINARY_DIR\n\n# ETH_BUILD_TYPE\n\n# ETH_BUILD_PLATFORM\n\n#\n\n# example usage:\n\n# cmake -DETH_SOURCE_DIR=. -DETH_DST_DIR=build -DETH_BUILD_TYPE=Debug -DETH_BUILD_PLATFORM=Darwin.appleclang -P scripts/buildinfo.cmake\n\n#\n\n# Its main output variables are SOL_VERSION_BUILDINFO and SOL_VERSION_PRERELEASE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Logic here: If prerelease.txt exists but is empty, it is a non-pre release.\n\n# If it does not exist, create our own prerelease string\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/toolchains/cxx17.cmake" : {
      "ObjectId" : "04a865ebd6c54661f595aa12ddad91ef5cd89c1d",
      "LastModified" : "2019-02-07T19:48:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Require C++17.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/toolchains/default.cmake" : {
      "ObjectId" : "baf859b70387f1760cef7636b438cd1a687c22e6",
      "LastModified" : "2019-02-07T19:48:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Require C++14.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/toolchains/emscripten.cmake" : {
      "ObjectId" : "6c29074f337d2d4c671ba862561a8558e60f6ce2",
      "LastModified" : "2019-02-07T19:48:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/toolchains/libfuzzer.cmake" : {
      "ObjectId" : "86d45d304a3ff6253766d5bc63c35eeebf3f21b7",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Require libfuzzer specific flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/Makefile" : {
      "ObjectId" : "3cc98f6990a0ced2187c44f8d3d24bb333f53638",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libdevcore/CMakeLists.txt" : {
      "ObjectId" : "b92cb5db549207038af7c1062c976e6684bd1054",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libevmasm/CMakeLists.txt" : {
      "ObjectId" : "426799385a2e6804eb6b7c80f856cc8619995656",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "liblangutil/CMakeLists.txt" : {
      "ObjectId" : "1c3d5a05e8f9dd9bde812977cf09ce8e50943e30",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Solidity Commons Library (Solidity related sharing bits between libsolidity and libyul)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "liblll/CMakeLists.txt" : {
      "ObjectId" : "c529461b165dd5fa2941ea746d3194789dd4205e",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libsolc/CMakeLists.txt" : {
      "ObjectId" : "7fb4aa0507d4215640ed1713a11e61ca5c3b6135",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Specify which functions to export in soljson.js.\n\n# Note that additional Emscripten-generated methods needed by solc-js are\n\n# defined to be exported in cmake/EthCompilerSettings.cmake.\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "libsolidity/CMakeLists.txt" : {
      "ObjectId" : "75efc9614f97ebc7a2e1c078ae88cdd8489728ee",
      "LastModified" : "2019-04-17T09:04:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Until we have a clear separation, libyul has to be included here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libyul/CMakeLists.txt" : {
      "ObjectId" : "ab0f53c97775f4b3bde06ff10dc5220b04e5a191",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lllc/CMakeLists.txt" : {
      "ObjectId" : "d6538ee29d57fbd160a7bfc27c6e3ac3c583d109",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Produce lllc as statically linked binary (includes C/C++ standard libraries)\n\n# This is not supported on macOS, see\n\n# https://developer.apple.com/library/content/qa/qa1118/_index.html.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "scripts/install_deps.cmake" : {
      "ObjectId" : "0cb0ed6211b22532296b615888a8b03cad7cd453",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Packs installed package binaries and headers into an archive.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To create an archive without addicional top level directory\n\n# (like package-X.Y.Z) we need to know all top level files/dirs.\n\n# Usually it is just \"win64\" dir.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Downloads the source code of the package and unpacks it to dedicated 'src'\n\n# dir. Also creates 'build' and 'install' dir to be used by a build script.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Export names and dirs to be used by a package-specific build script.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "solc/CMakeLists.txt" : {
      "ObjectId" : "d9b12a063f1c3fd0a98d31f175e83f3d7857de29",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Produce solc as statically linked binary (includes C/C++ standard libraries)\n\n# This is not supported on macOS, see\n\n# https://developer.apple.com/library/content/qa/qa1118/_index.html.\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "acc43b68d60e3bf0e4117a25c6180b365141cc72",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/tools/CMakeLists.txt" : {
      "ObjectId" : "2cc31170f1509356d425cc7a1d1451d3a2fb2e09",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/tools/ossfuzz/CMakeLists.txt" : {
      "ObjectId" : "74787f5fd25b3f928cd755f6747d9c9fbf330525",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#[[FuzzingEngine.a is provided by oss-fuzz's Dockerized build environment]]",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/tools/yulInterpreter/CMakeLists.txt" : {
      "ObjectId" : "52fe0e3c6a593a522859485de08f16d0cb357d41",
      "LastModified" : "2019-04-03T09:03:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 34,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 3940
}