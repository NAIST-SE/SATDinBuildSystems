{
  "Repository" : "4203787",
  "Revision" : "HEAD",
  "ObjectId" : "4f21ff275c639de4b92f039868c1a637a8e43f49",
  "CommitTime" : "2016-12-29T10:44:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "607eb005495a3371f4f7362ba4098391d30ccaf5",
      "LastModified" : "2016-10-27T00:57:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Produce a warning if XP support will be missing.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support cross compiling\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Recursive function to place PK3 archive source files into a hierarchy of source file in the IDE\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Assort source files into folders in the IDE\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Create list of all files in this folder\n",
        "Line" : 36,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# If there are subfolders, recurse into them\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Exclude folder from list of source files\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Recurse deeper into the filesystem folder tree\n",
        "Line" : 43,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Assign IDE group for current top-level source files\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Simplify pk3 building, add_pk3(filename srcdirectory)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# message(STATUS \"Creating build rule for PK3 ${PK3_NAME} ${PK3_DIR}\")\n\n# Generate target name. Just use \"pk3\" for main pk3 target.\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Create a list of source files for this PK3, for use in the IDE\n\n# Phase 1: Create a list of all source files for this PK3 archive, except \n\n#  for a couple of strife image file names that confuse CMake.\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Exclude from the source list some gzdoom .png files with brackets in the\n\n# file names here, because they confuse CMake.\n\n# This only affects the list of source files shown in the IDE.\n\n# It does not actually remove the files from the PK3 archive.\n\n# First replace that toxic bracket character with something we can handle\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# All source files at all levels\n",
        "Line" : 81,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# Exclude those quarantined source file source file names that once had a bracket\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# message(STATUS \"Ignoring PK3 file name containing brackets \"${PK3_SRC})\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# Phase 2: Create the PK3 build rule, including the source file list for the IDE\n\n# Touch the zipdir executable here so that the pk3s are forced to\n\n# rebuild each time since their dependency has \"changed.\"\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Phase 3: Assign source files to a nice folder structure in the IDE\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Phase 4: Add the resulting PK3 to the install target.\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Macro for building libraries without debugging information\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Allow the user to use ZDOOM_OUTPUT_DIR as a single release point.\n\n# Use zdoom, zdoomd, zdoom64, and zdoomd64 for the binary names\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Replacement variables for a possible long list of C/C++ compilers compatible with GCC\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# GME\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Eliminate unreferenced functions and data\n\n# Perform identical COMDAT folding\n",
        "Line" : 168,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# String pooling\n\n# Function-level linking\n\n# Disable run-time type information\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# SSE2 option (to allow x87 in 32 bit and disallow extended feature sets which have not yet been checked for precision)\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# On Visual C++ 2012 and later SSE2 is the default, so we need to switch it off explicitly\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Avoid CRT DLL dependancies in release builds, optionally generate assembly output for checking crash locations.\n",
        "Line" : 192,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Debug allocations in debug builds\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Disable warnings for unsecure CRT functions from VC8+\n",
        "Line" : 204,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# The CMake configurations set /GR and /MD by default, which conflict with our settings.\n",
        "Line" : 209,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# If we're compiling with a custom GCC on the Mac (which we know since g++-4.2 doesn't support C++11) statically link libgcc.\n",
        "Line" : 225,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Fast math flags, required by some subprojects\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Avoid installing zlib alongside zdoom\n",
        "Line" : 264,
        "CharPositionInLine" : 30
      },
      "34" : {
        "Text" : "# Install the entire docs directory in the distributed zip package\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "CleanDirectoryList.cmake" : {
      "ObjectId" : "58b8963f9ee3ae27493c8bda68909692b59f4994",
      "LastModified" : "2013-10-11T00:40:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Removes duplicate entries and non-directories from a provided list\n\n#\n\n#  clean_directory_list(<listvar> [<additional list items>...])\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# combine variable's current value with additional list items\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Initial list cleaning\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Grab the absolute path of each actual directory\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Clean up the output list now\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# return _out\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "CreateLaunchers.cmake" : {
      "ObjectId" : "bd2b3e47346184fea804a376416c350d91a9af8f",
      "LastModified" : "2015-04-24T07:21:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Create launchers to set working directory, env. vars, etc.\n\n#\n\n#  include(CreateLaunchers) - to make these available\n\n#  guess_runtime_library_dirs(<outputvarname> [<extralibrary> ...])\n\n#  create_default_target_launcher(<targetname>\n\n#    [ARGS <args...>]\n\n#    [FORWARD_ARGS]\n\n#    [RUNTIME_LIBRARY_DIRS <dir...>]\n\n#    [WORKING_DIRECTORY <dir>]\n\n#    [ENVIRONMENT <VAR=value> [<VAR=value>...]])\n\n#\n\n#  create_target_launcher(<targetname>\n\n#    [ARGS <args...>]\n\n#    [FORWARD_ARGS]\n\n#    [RUNTIME_LIBRARY_DIRS <dir...>]\n\n#    [WORKING_DIRECTORY <dir>]\n\n#    [ENVIRONMENT <VAR=value> [<VAR=value>...]])\n\n#\n\n#  create_generic_launcher(<launchername>\n\n#    [RUNTIME_LIBRARY_DIRS <dir...>]\n\n#    [WORKING_DIRECTORY <dir>]\n\n#    [ENVIRONMENT <VAR=value> [<VAR=value>...]])\n\n#    - sets GENERIC_LAUNCHER_COMMAND and GENERIC_LAUNCHER_FAIL_REGULAR_EXPRESSION\n\n#\n\n# Requires these CMake modules:\n\n#  ListFilter\n\n#  ProgramFilesGlob\n\n#  CleanDirectoryList\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find user and system name\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# 2010 or newer\n",
        "Line" : 80,
        "CharPositionInLine" : 57
      },
      "4" : {
        "Text" : "# Turn into a list of native paths\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#    get_filename_component(_targetname \"${_target}\" NAME)\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Multi-config generator - multiple launchers\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Single-config generator - single launcher\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Start off with the link directories of the calling listfile's directory\n",
        "Line" : 315,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Add additional libraries passed to the function\n",
        "Line" : 318,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Now, build a list of potential dll directories\n",
        "Line" : 324,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Add the libdir itself\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Look also in libdir/../bin since the dll might not be with the lib\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Only keep the valid, unique directories\n",
        "Line" : 335,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Return _dlldirs\n",
        "Line" : 338,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 15
    },
    "FindFluidSynth.cmake" : {
      "ObjectId" : "7d5cb6a8ede8650431a88c44d7041c98f2cbcba6",
      "LastModified" : "2013-10-11T00:40:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find fluidsynth\n\n# Find the native fluidsynth includes and library\n\n#\n\n#  FLUIDSYNTH_INCLUDE_DIR - where to find fluidsynth.h\n\n#  FLUIDSYNTH_LIBRARIES   - List of libraries when using fluidsynth.\n\n#  FLUIDSYNTH_FOUND       - True if fluidsynth found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FLUIDSYNTH_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "FindMPG123.cmake" : {
      "ObjectId" : "a9b6dd8b220290795b70cdd4fe8327929dc57b1a",
      "LastModified" : "2015-04-24T15:42:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mpg123\n\n# Find the native mpg123 includes and library\n\n#\n\n#  MPG123_INCLUDE_DIR - where to find mpg123.h\n\n#  MPG123_LIBRARIES   - List of libraries when using mpg123.\n\n#  MPG123_FOUND       - True if mpg123 found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# MARK_AS_ADVANCED(MPG123_LIBRARIES MPG123_INCLUDE_DIR)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MPG123_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "FindSDL2.cmake" : {
      "ObjectId" : "614426cccfc58d71d1dfb6f144e1ba23307378a3",
      "LastModified" : "2015-04-24T15:42:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 83,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 84,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "FindSndFile.cmake" : {
      "ObjectId" : "ab66fc5c2d6e5e090de6bc7491e684c123c8cbbc",
      "LastModified" : "2015-04-24T15:42:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find SndFile\n\n# Once done this will define\n\n#\n\n#  SNDFILE_FOUND - system has SndFile\n\n#  SNDFILE_INCLUDE_DIRS - the SndFile include directory\n\n#  SNDFILE_LIBRARIES - Link these to use SndFile\n\n#\n\n#  Copyright © 2006  Wengo\n\n#  Copyright © 2009 Guillaume Martres\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SNDFILE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# show the SNDFILE_INCLUDE_DIRS and SNDFILE_LIBRARIES variables only in the advanced view\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bzip2/CMakeLists.txt" : {
      "ObjectId" : "6ff9a217242705134c817d6ab40a8b9a93dba7d8",
      "LastModified" : "2016-02-06T04:16:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dumb/CMakeLists.txt" : {
      "ObjectId" : "85e052209b9ae513ceca67aca134ab40871f11f1",
      "LastModified" : "2016-02-27T22:49:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable fast flag for dumb\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dumb/cmake/CMakeLists.txt" : {
      "ObjectId" : "6cafa7219f344e08c3d608a6844f7c6bf24352ca",
      "LastModified" : "2016-02-06T04:16:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the dylib install name path is set on OSX so you can include dumb in app bundles\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dumb/prj/dumb/dumb.pro" : {
      "ObjectId" : "9244ce4bd3b6b7dc87608ca7d0aa6b75d7910cc2",
      "LastModified" : "2016-02-06T04:16:53Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------\n\n#\n\n# Project created by QtCreator 2012-12-22T16:33:53\n\n#\n\n#-------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "game-music-emu/CMakeLists.txt" : {
      "ObjectId" : "0af4f24d8ecceb87d7ca405c58f49ffdfe63951f",
      "LastModified" : "2016-12-20T15:29:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project definition file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When version is changed, also change the one in gme/gme.h to match\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 2.6+ always assumes FATAL_ERROR, but 2.4 and below don't.\n\n# Of course, 2.4 might work, in which case you're welcome to drop\n\n# down the requirement, but I can't test that.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# I don't plan on debugging this, so make it a release build.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable fast flag for GME\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Default emulators to build (all of them! ;)\n\n# [ZDoom] No options, enable all of them by default.\n\n#if (NOT DEFINED USE_GME_AY)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#endif()\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if (NOT DEFINED USE_GME_GBS)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#endif()\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#if (NOT DEFINED USE_GME_GYM)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#endif()\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#if (NOT DEFINED USE_GME_HES)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#endif()\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#if (NOT DEFINED USE_GME_KSS)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#endif()\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#if (NOT DEFINED USE_GME_NSF)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#endif()\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#if (NOT DEFINED USE_GME_NSFE)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#endif()\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#if (NOT DEFINED USE_GME_SAP)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#endif()\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#if (NOT DEFINED USE_GME_SPC)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#endif()\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#if (NOT DEFINED USE_GME_VGM)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#endif()\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#if (USE_GME_NSFE AND NOT USE_GME_NSF)\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# MESSAGE(\" -- NSFE support requires NSF, enabling NSF support. --\")\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#endif()\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# [ZDoom] Set always to OFF.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check for GCC \"visibility\" support.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# get the gcc version\n",
        "Line" : 90,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# gcc <4.1 had poor support for symbol visibility\n",
        "Line" : 94,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# GCC >= 4.2 also correctly supports making inline members have hidden\n\n# visibility by default.\n",
        "Line" : 100,
        "CharPositionInLine" : 9
      },
      "33" : {
        "Text" : "# test visibility\n",
        "Line" : 106,
        "CharPositionInLine" : 11
      },
      "34" : {
        "Text" : "# Cache this result\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Shared library defined here\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# EXCLUDE_FROM_ALL adds build rules but keeps it out of default build\n\n# [ZDoom] Not needed.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "game-music-emu/gme/CMakeLists.txt" : {
      "ObjectId" : "8d710709f7ea586cf45ac7bc53ff9db6e901b55f",
      "LastModified" : "2016-12-18T10:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of source files required by libgme and any emulators\n\n# This is not 100% accurate (Fir_Resampler for instance) but\n\n# you'll be OK.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ay_Apu is very popular around here\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# so is Ym2612_Emu\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# But none are as popular as Sms_Apu\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ay_Apu.cpp included earlier\n",
        "Line" : 40,
        "CharPositionInLine" : 14
      },
      "5" : {
        "Text" : "# Sms_Apu.cpp included earlier\n\n# Ym2612_Emu.cpp included earlier\n",
        "Line" : 57,
        "CharPositionInLine" : 14
      },
      "6" : {
        "Text" : "# Ay_Apu.cpp included earlier\n\n# Sms_Apu.cpp included earlier\n",
        "Line" : 73,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# Sms_Apu.cpp included earlier\n\n# Ym2612_Emu.cpp included earlier\n",
        "Line" : 119,
        "CharPositionInLine" : 14
      },
      "8" : {
        "Text" : "# These headers are part of the generic gme interface.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Run during cmake phase, so this is available during make\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# [ZDoom] Not needed.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# On some platforms we may need to change headers or whatnot based on whether\n\n# we're building the library or merely using the library. The following is\n\n# only defined when building the library to allow us to tell which is which.\n\n#add_definitions(-DBLARGG_BUILD_DLL)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For the gme_types.h\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add library to be compiled.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The version is the release.  The \"soversion\" is the API version.  As long\n\n# as only build fixes are performed (i.e. no backwards-incompatible changes\n\n# to the API), the SOVERSION should be the same even when bumping up VERSION.\n\n# The way gme.h is designed, SOVERSION should very rarely be bumped, if ever.\n\n# Hopefully the API can stay compatible with old versions.\n\n# [ZDoom] Not needed.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DLL platforms\n\n# DLL platforms\n",
        "Line" : 163,
        "CharPositionInLine" : 45
      },
      "CommentCount" : 16
    },
    "gdtoa/CMakeLists.txt" : {
      "ObjectId" : "a0b76e0c337bc0f3e4234613ae0e240e9e8aade9",
      "LastModified" : "2016-02-27T22:49:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable warnings for << operator precedence (4554) and\n\n# unreferenced labels (4102) from VC\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "jpeg-6b/CMakeLists.txt" : {
      "ObjectId" : "c14dccacabd1f697ae9a2e05497ae5a28befcc48",
      "LastModified" : "2016-02-06T04:16:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lzma/CMakeLists.txt" : {
      "ObjectId" : "3948ea2eebe09a84183a43c3f7155ed32c8e39b4",
      "LastModified" : "2016-02-06T04:16:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "output_sdl/CMakeLists.txt" : {
      "ObjectId" : "323d941494566b162197ce619e90590534fae3cd",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only usable with FMOD Ex\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "precompiled_headers.cmake" : {
      "ObjectId" : "0130c153393a4e5afd84c021ff66247a3a997685",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Christoph Heindl 2010\n\n# Precompiled Headers Demo\n\n# http://cheind.wordpress.com\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Instructs the MSVC toolset to use the precompiled header PRECOMPILED_HEADER\n\n# for each source file given in the collection named by SOURCE_VARIABLE_NAME.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate precompiled header translation unit\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Update properties of source files to use the precompiled header.\n\n# Additionally, force the inclusion of the precompiled header at beginning of each source file.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Finally, update the source file collection to contain the precompiled header translation unit\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "aca24181f98be8577cd9c23f53ac69f976b0ef5c",
      "LastModified" : "2016-12-09T11:21:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# At least some versions of Xcode fail if you strip with the linker\n\n# instead of the separate strip utility.\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# You can either use \"make install\" on the FMOD distribution to put it\n\n# in standard system locations, or you can unpack the FMOD distribution\n\n# in the root of the zdoom tree. e.g.:\n\n# zdoom\n\n#   docs\n\n#   fmodapi<version>linux[64] -or simply- fmod\n\n#   jpeg-6b\n\n#   ...\n\n# The recommended method is to put it in the zdoom tree, since its\n\n# headers are unversioned. Especially now that we can't work properly\n\n# with anything newer than 4.26.xx, you probably don't want to use\n\n# a system-wide version.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Construct version numbers for searching for the FMOD library on Linux.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FMOD Ex version 4.44 unified 32-bit and 64-bit linux packages into one.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This next one is for Randy.\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Modern versions of the Windows SDK include d3d9.h. Unfortunately,\n\n# CMake cannot find this file via find_path, so we check for it using\n\n# CHECK_INCLUDE_FILE.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Modern versions of the Windows SDK include xinput.h. Unfortunately,\n\n# CMake cannot find this file via find_path, so we check for it using\n\n# CHECK_INCLUDE_FILES. windows.h must be included before xinput.h.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Modern versions of the Windows SDK include dinput8.lib. Unfortunately,\n\n# CMake cannot find these libraries via find_library.\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# If we got this far, assume dinput8.lib is in the system library path.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Modern versions of the Windows SDK do NOT include dxguid.lib. Its contents\n\n# were moved to dinput8.lib.\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Prevent inclusion of fp.h and FixMath.h from Carbon framework\n\n# Declarations from these files are not used but cause the following conflicts:\n\n#  - redefinition of 'FixedToFloat' and 'FloatToFixed' macros\n\n#  - redefinition of 'pi' as different kind of symbol\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Use GTK+ for the IWAD picker, if available.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Non-Windows version also needs SDL except native OS X backend\n",
        "Line" : 243,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Search for FMOD include files\n",
        "Line" : 279,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# FMOD Ex didn't hide xiph symbols in the past (not applicable to Win32 since symbols are hidden by default there).\n",
        "Line" : 307,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Decide on the name of the FMOD library we want to use.\n",
        "Line" : 318,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Search for FMOD library\n",
        "Line" : 331,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Search for libSndFile\n",
        "Line" : 360,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Search for libmpg123\n",
        "Line" : 364,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Search for FluidSynth\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Decide on SSE setup\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# with global use of SSE 2 we do not need special handling for selected files\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# SSE only matters on 32-bit targets. We check compiler flags to know if we can do it.\n",
        "Line" : 379,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Set up flags for GCC\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# On OS X frame pointers are required for exception handling, at least with Clang\n",
        "Line" : 423,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Use the highest C++ standard available since VS2015 compiles with C++14\n\n# but we only require C++11.  The recommended way to do this in CMake is to\n\n# probably to use target_compile_features, but I don't feel like maintaining\n\n# a list of features we use.\n",
        "Line" : 442,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# With standard Apple tools -stdlib=libc++ needs to be specified in order to get\n\n# C++11 support using SDKs 10.7 and 10.8.\n",
        "Line" : 466,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Remove extra warnings when using the official DirectX headers.\n\n# Also, TDM-GCC 4.4.0 no longer accepts glibc-style printf formats as valid,\n\n# which is a royal pain. The previous version I had been using was fine with them.\n",
        "Line" : 473,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Check for functions that may or may not exist.\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Fix stat in v140_xp (broken in RTM and Update 1 so far)\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Flags\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Update gitinfo.h\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Libraries ZDoom needs\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Start defining source files for ZDoom\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Project files should be aware of the header files. We can GLOB these since\n\n# there's generally a new cpp for every header so this file will get changed\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# These files will be flagged as \"headers\" so that they appear in project files\n\n# without being compiled.\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# This is disabled for now because I cannot find a way to give the .pch file a different name.\n\n# Visual C++ 2015 seems hell-bent of only allowing one .pch file with the same name as the executable.\n\n#enable_precompiled_headers( g_pch2.h FASTMATH_PCH_SOURCES )\n",
        "Line" : 803,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Enable fast math for some sources\n",
        "Line" : 807,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# [BL] Solaris requires these to be explicitly linked.\n",
        "Line" : 1114,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# Due to some quirks, we need to do this in this order\n",
        "Line" : 1138,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# RUNTIME_OUTPUT_DIRECTORY does not exist in CMake 2.4.\n\n# Linux distributions are slow to adopt 2.6. :(\n",
        "Line" : 1140,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# GCC misoptimizes this file\n",
        "Line" : 1192,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Need to enable intrinsics for this file.\n",
        "Line" : 1196,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Fix fmod link so that it can be found in the app bundle.\n",
        "Line" : 1214,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 44
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "8a97243bb86593e195c86459ea89b9dbcb2aa26e",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/fixrtext/CMakeLists.txt" : {
      "ObjectId" : "7485425007e4e705044f9909d42d1e8f7e253f51",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/lemon/CMakeLists.txt" : {
      "ObjectId" : "e092cf6e92c9e92e590b3469762f975754d6c2a7",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Lemon wants lempar.c in its directory\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/re2c/CMakeLists.txt" : {
      "ObjectId" : "b362a3b843b9b5539c4cd228bf5d2ca93704b5dc",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runtime type information is required and don't complain about uint32_t to bool conversions\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "tools/updaterevision/CMakeLists.txt" : {
      "ObjectId" : "db99ab812e74f282f9c553d9db0b143de88b154a",
      "LastModified" : "2016-11-23T13:39:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VC 8+ adds a manifest automatically to the executable. We need to\n\n# merge ours with it.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tools/zipdir/CMakeLists.txt" : {
      "ObjectId" : "6a36b2cb5ddf1003a7e57cbb660c5fadf237cce6",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "wadsrc/CMakeLists.txt" : {
      "ObjectId" : "4e661e7dddbd1913040af2b1cb6172a37ef657e7",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "zlib/CMakeLists.txt" : {
      "ObjectId" : "52542bbaaa7aeb6fc33fb1831408327dd02f980f",
      "LastModified" : "2016-08-28T02:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear variable\n",
        "Line" : 46,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#if(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n\n#    # If we're doing an out of source build and the user has a zconf.h\n\n#    # in their source tree...\n\n#    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h)\n\n#        message(FATAL_ERROR\n\n#            \"You must remove ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h \"\n\n#            \"from the source tree.  This file is included with zlib \"\n\n#            \"but CMake generates this file for you automatically \"\n\n#            \"in the build directory.\")\n\n#  endif()\n\n#endif()\n\n#\n\n#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein\n\n#               ${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)\n\n#include_directories(${CMAKE_CURRENT_BINARY_DIR})\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#   gzclose.c\n\n#   gzlib.c\n\n#   gzread.c\n\n#   gzwrite.c\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#   win32/zlib1.rc\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#============================================================================\n\n# Example binaries\n\n#============================================================================\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_executable(example example.c)\n\n#target_link_libraries(example ${ZLIBNAME})\n\n#add_test(example example)\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#add_executable(minigzip minigzip.c)\n\n#target_link_libraries(minigzip ${ZLIBNAME})\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#if(HAVE_OFF64_T)\n\n#    add_executable(example64 example.c)\n\n#    target_link_libraries(example64 ${ZLIBNAME})\n\n#    set_target_properties(example64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n\n#    add_test(example64 example64)\n\n#\n\n#    add_executable(minigzip64 minigzip.c)\n\n#    target_link_libraries(minigzip64 ${ZLIBNAME})\n\n#    set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n\n#endif()\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    }
  },
  "FileTypes" : {
    "CMAKE" : 26,
    "QMAKE" : 1
  },
  "ElapsedTime" : 4527
}