{
  "Repository" : "4450471",
  "Revision" : "HEAD",
  "ObjectId" : "2b5975ecf12bc00c8f615b630b9918a33b7bd70d",
  "CommitTime" : "2017-06-25T00:11:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f404c002e1bc2120a28fffcb6b16218240af58c9",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set modules directory\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set log domain\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# #################### #\n\n# DEPENDENCIES SECTION #\n\n# #################### #\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find git\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Update version from Git?\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine version from Git\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Required for building with Visual Studio\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Auto-determine architecture\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include code coverage build type\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Search for glib with pkg-config\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find OpenCL\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find optional executables for creating docs\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ################ #\n\n# COMPILER OPTIONS #\n\n# ################ #\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Compiler options for GCC/Clang\n\n# -Wno-comment because of comment within comment in OpenCL headers\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Avoid including MinGW dll dependency\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Definitions for release builds\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Disable assertions on release builds\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Disable assertions (e.g. g_return_if_fail) on minimum size release builds\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Disable checks on minimum size release builds\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# ################################### #\n\n# OPTIONALLY USE LOCAL OPENCL HEADERS #\n\n# ################################### #\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Use provided OpenCL headers or system OpenCL headers?\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Not for Apple, which handles these headers differently\n",
        "Line" : 75,
        "CharPositionInLine" : 15
      },
      "22" : {
        "Text" : "# ########################### #\n\n# SET LIBRARY INCLUDE FOLDERS #\n\n# ########################### #\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# GLib headers\n\n# OpenCL headers\n\n# Library headers\n\n# Aggregate library header\n",
        "Line" : 99,
        "CharPositionInLine" : 38
      },
      "24" : {
        "Text" : "# ###################### #\n\n# DEFINE INSTALL FOLDERS #\n\n# ###################### #\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ########################### #\n\n# BUILD DOCUMENTATION SECTION #\n\n# ########################### #\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Doc build is enabled\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Set doc generation directory\n",
        "Line" : 151,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Document generation options\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Exclude tests from documentation?\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# Add tests path to doc exclude path\n",
        "Line" : 173,
        "CharPositionInLine" : 3
      },
      "32" : {
        "Text" : "# Set doxygen document generation options\n",
        "Line" : 179,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Document install options\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# If git is found, set document file version filter to last\n\n# commit where file was changed\n",
        "Line" : 218,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Linux/OSX options\n",
        "Line" : 225,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Create links to OpenCL API when OpenCL functions are mentioned?\n\n# This is slow and requires Bash and other command-line utilties\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Create those links\n",
        "Line" : 233,
        "CharPositionInLine" : 3
      },
      "38" : {
        "Text" : "# Copy and configure doxigen configuration file\n",
        "Line" : 240,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# Add a build docs target\n",
        "Line" : 244,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Generate PDF from latex files\n",
        "Line" : 256,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Post-process man pages created by Doxygen\n",
        "Line" : 265,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Add documentation installation target (if the docs have been built)\n",
        "Line" : 272,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# No doc builds\n",
        "Line" : 291,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Add doc target which warns that some document build dependencies\n\n# are missing\n",
        "Line" : 294,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# ############### #\n\n# PROCESS SUBDIRS #\n\n# ############### #\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Add src folder\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Add tests folder\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Add scripts folder\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# ################# #\n\n# PACKAGING SECTION #\n\n# ################# #\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# pkg-config support\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# build a CPack driven installer package\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Determine architecture\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Generic packaging settings\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Windows packaging settings\n",
        "Line" : 350,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# OSX packaging settings\n\n# Use defaults\n",
        "Line" : 355,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# Linux packaging settings\n",
        "Line" : 358,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 57
    },
    "cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "a0b0ef5269ef3cba688e16b06e9dd167a6dcf1ed",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# CHECK VALID COMPILER\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 127,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 131,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Setup target\n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Run tests\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 163,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 174,
        "CharPositionInLine" : 9
      },
      "17" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 178,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 191,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 197,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 22
    },
    "cmake/Modules/FindOpenCL.cmake" : {
      "ObjectId" : "dce9d92efa216a4abc465b07faf6fc04722139d1",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenCL\n\n# ----------\n\n#\n\n# Try to find OpenCL\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``OpenCL::OpenCL``, if\n\n# OpenCL has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables::\n\n#\n\n#   OpenCL_FOUND          - True if OpenCL was found\n\n#   OpenCL_INCLUDE_DIRS   - include directories for OpenCL\n\n#   OpenCL_LIBRARIES      - link against this library to use OpenCL\n\n#   OpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)\n\n#   OpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation\n\n#   OpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation\n\n#\n\n# The module will also define two cache variables::\n\n#\n\n#   OpenCL_INCLUDE_DIR    - the OpenCL include directory\n\n#   OpenCL_LIBRARY        - the path to the OpenCL library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014-2016 Matthaeus G. Chajdas\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/Findcf4ocl2.cmake" : {
      "ObjectId" : "2914e7c41d4b36d589e98d6f92d1c5e7f8735797",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find cf4ocl2\n\n# Once done, this will define\n\n#\n\n#  CF4OCL2_FOUND - system has cf4ocl2\n\n#  CF4OCL2_INCLUDE_DIRS - the cf4ocl2 include directories\n\n#  CF4OCL2_LIBRARIES - link these to use cf4ocl2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include dir\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/GetVersionFromGitTag.cmake" : {
      "ObjectId" : "1c6604cf39f93891eb07df77f57e4af813f09ee0",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This cmake module sets the project version and partial version\n\n# variables by analysing the git tag and commit history. It expects git\n\n# tags defined with semantic versioning 2.0.0 (http://semver.org/).\n\n#\n\n# The module expects the PROJECT_NAME variable to be set, and recognizes\n\n# the GIT_FOUND, GIT_EXECUTABLE and VERSION_UPDATE_FROM_GIT variables.\n\n# If Git is found and VERSION_UPDATE_FROM_GIT is set to boolean TRUE,\n\n# the project version will be updated using information fetched from the\n\n# most recent git tag and commit. Otherwise, the module will try to read\n\n# a VERSION file containing the full and partial versions. The module\n\n# will update this file each time the project version is updated.\n\n#\n\n# Once done, this module will define the following variables:\n\n#\n\n# ${PROJECT_NAME}_VERSION_STRING - Version string without metadata\n\n# such as \"v2.0.0\" or \"v1.2.41-beta.1\". This should correspond to the\n\n# most recent git tag.\n\n# ${PROJECT_NAME}_VERSION_STRING_FULL - Version string with metadata\n\n# such as \"v2.0.0+3.a23fbc\" or \"v1.3.1-alpha.2+4.9c4fd1\"\n\n# ${PROJECT_NAME}_VERSION_STRING_FINAL - Equal to ${PROJECT_NAME}_VERSION_STRING\n\n# for tagged commits, or to ${PROJECT_NAME}_VERSION_STRING_FULL otherwise\n\n# ${PROJECT_NAME}_VERSION - Same as ${PROJECT_NAME}_VERSION_STRING,\n\n# without the preceding 'v', e.g. \"2.0.0\" or \"1.2.41-beta.1\"\n\n# ${PROJECT_NAME}_VERSION_MAJOR - Major version integer (e.g. 2 in v2.3.1-RC.2+21.ef12c8)\n\n# ${PROJECT_NAME}_VERSION_MINOR - Minor version integer (e.g. 3 in v2.3.1-RC.2+21.ef12c8)\n\n# ${PROJECT_NAME}_VERSION_PATCH - Patch version integer (e.g. 1 in v2.3.1-RC.2+21.ef12c8)\n\n# ${PROJECT_NAME}_VERSION_TWEAK - Tweak version string (e.g. \"RC.2\" in v2.3.1-RC.2+21.ef12c8)\n\n# ${PROJECT_NAME}_VERSION_AHEAD - How many commits ahead of last tag (e.g. 21 in v2.3.1-RC.2+21.ef12c8)\n\n# ${PROJECT_NAME}_VERSION_GIT_SHA - The git sha1 of the most recent commit (e.g. the \"ef12c8\" in v2.3.1-RC.2+21.ef12c8)\n\n#\n\n# This module is public domain, use it as it fits you best.\n\n#\n\n# Author: Nuno Fachada\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if git is found...\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get last tag from git\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#How many commits since last tag\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Get current commit SHA from git\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Get partial versions into a list\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Set the version numbers\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# The tweak part is optional, so check if the list contains it\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Unset the list\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Set full project version string\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Save version to file (which will be used when Git is not available\n\n# or VERSION_UPDATE_FROM_GIT is disabled)\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Git not available, get version from file\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set partial versions\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set project version (without the preceding 'v')\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set \"final\" version, depending if this is currently a tagged commit\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For tagged commits use regular major.minor.patch-tweak string\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Otherwise use full string indicating SHA, etc.\n",
        "Line" : 131,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 17
    },
    "cmake/Modules/TargetArch.cmake" : {
      "ObjectId" : "ae58fe4ed620f3de55383757ba7c8f36ad8766e3",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is based on code by Jake Petroules, available here:\n\n# https://github.com/petroules/solar-cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "38e7d0ba98d786db1f583030c6640e8f1ef7e6cb",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Available scripts\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where to install scripts\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "67d339e0bde34b886eafa51365cf6cfcd2ff73b1",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Library, examples and utilities are included in the ALL target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/examples/CMakeLists.txt" : {
      "ObjectId" : "66e8925e743104f1202ded019e5ef92d7de18635",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build examples?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Stop processing if examples are not to be built\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# How to stringify kernels\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Examples without OpenCL kernel code\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Examples to be configured with OpenCL kernel code\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify location of stb headers for PNG load/save\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configure examples using OpenCL kernel code\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Kernel stringification\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Hex stringification, cross-platform but ugly\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Load kernel code into string\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Escape hex character codes to be recognized as such within C source\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Pad string with double quotes\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Text stringification, better looking but requires awk and sed\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Execute stringification script\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Configure example\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Add target for current example\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Add a target for examples without OpenCL kernel code\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The stb_image.h included in image_filter throws some warnings,\n\n# this avoids them.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add a target which builds all samples\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "src/lib/CMakeLists.txt" : {
      "ObjectId" : "3fc90dcd8e4738e1fe194fdac78ab796276b61ba",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources required for building library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Special debug mode for logging lifetime (new/destroy) of wrapper objects\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup the configuration header\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy aggregate header for compilation purposes\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Copy headers for compilation purposes\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate export header and copy it to the includes folder\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Specify dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This target is just an alias for cf4ocl\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set library version\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Install library\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Install aggregate header\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Install headers\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/utils/CMakeLists.txt" : {
      "ObjectId" : "2711d594352682a5dbe406f1de3b3072ce166515",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build utils?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Stop processing if utils are not to be built\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List of utilities\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Device information\n\n# Kernel compiler\n",
        "Line" : 11,
        "CharPositionInLine" : 14
      },
      "4" : {
        "Text" : "# Add a target for each utility\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set utils version\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# How to install utils\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add a target which builds all utilities\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "5067912e0d694676bb32a40cff9be5a041c59ee2",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build tests?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Stop processing if tests are not to be built\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find BATS for testing utilities and examples\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allow the user to specify which device to use in generic device tests\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add test folders\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure helper script to perform all tests in all available devices\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/examples/CMakeLists.txt" : {
      "ObjectId" : "2212cfa37f27ea6334ad2a9c8456ac57553cd584",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure BATS file with locations of example binaries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add automated ctest tests for utils, requires BATS\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/lib/CMakeLists.txt" : {
      "ObjectId" : "0ab29499d25492fdfdf7ab3d1c6f09bef79329c6",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set tests log domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove disabling of assertions and checks for release builds\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library code files to be tested\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Put test kernel in a string to insert into test.h\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure include file for tests\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify location of configured include file for tests\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set of tests which only work with the OpenCL stub\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set of tests which work with either the OpenCL stub or a real OpenCL\n\n# implementation\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Complete set of tests\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add subdir to build OpenCL stub lib\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Static cf4ocl library for tests, will use the OpenCL stub\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Dependencies for the static cf4ocl library for tests\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Use OpenCL stub when possible?\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Determine general properties for tests which can either use the OpenCL\n\n# stub or a real OpenCL implementation\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set properties for tests which can either use the OpenCL stub\n\n# or a real OpenCL implementation\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set properties for tests which can only use the OpenCL stub\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add a target for each test\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add test to ctest\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Add a target which builds all tests\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Code coverage configuration (only for coverage builds)\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Name for custom target.\n\n# Name of the test driver executable that runs the tests.\n\n# Name of output directory.\n",
        "Line" : 92,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 21
    },
    "tests/lib/ocl_stub/CMakeLists.txt" : {
      "ObjectId" : "aef958dc634b4820b7d209646df7381631ac2b5b",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources required for building OpenCL stub library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Dependencies for the OpenCL stub library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/utils/CMakeLists.txt" : {
      "ObjectId" : "909c5938034a0620077d1406656c091fc090473c",
      "LastModified" : "2017-06-24T23:09:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure BATS file with locations of executables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add automated ctest tests for utils, requires BATS\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 16
  },
  "ElapsedTime" : 1180
}