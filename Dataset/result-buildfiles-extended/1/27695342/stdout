{
  "Repository" : "27695342",
  "Revision" : "HEAD",
  "ObjectId" : "62b2e27fd461faf31b6ebdcc21ebbf69aa9c4e0f",
  "CommitTime" : "2019-04-09T20:58:29Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "81d3cc0a35f37cc5fabc271f07ed8e726197d061",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use a toolchain file if any for Embedded\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we want this to be able to run clang-tidy\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/AppleConfiguration.cmake" : {
      "ObjectId" : "f90aef33bb6e178d14e0779e784e4bbe22dff8fb",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/BreakpadSymbols.cmake" : {
      "ObjectId" : "c8972628833da1fa04be853bde4c5df4a11343ca",
      "LastModified" : "2015-12-08T15:32:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/CPackConfiguration.cmake" : {
      "ObjectId" : "1edd8c2bd2900c535eeded85f60300eb4034c7aa",
      "LastModified" : "2016-07-19T19:23:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/ClangTidy.cmake" : {
      "ObjectId" : "727f4e20893e335635fdd12d74b8f8b1a08d9f6c",
      "LastModified" : "2016-04-05T11:42:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/CompilerFlags.cmake" : {
      "ObjectId" : "b31a22c3c10386cd87ca9cc51ffe73145f15b8d7",
      "LastModified" : "2016-07-19T19:23:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVC goes totally bananas if we pass it -Wall\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Flags only for external libs\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# release link flags\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/CompleteBundle.cmake" : {
      "ObjectId" : "07ab4b3c95369d6a961fd8d6e22700686bc46b35",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/DependencyConfiguration.cmake" : {
      "ObjectId" : "1c99082cff9d67dc42d1306efb09534b144db116",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/FetchDependencies.cmake" : {
      "ObjectId" : "a699b4cb494910aa3dcb7f61c3e36d9a84b8eb13",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file(COPY ${DEPENDENCY_CACHE_DIR}/${FILENAME} ${DST_FILENAME})\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindBreakpad.cmake" : {
      "ObjectId" : "043d49fa9c0d7122e57f274748715b2c6e9e971b",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# CMake module to search for the mpv libraries.\n\n#\n\n# WARNING: This module is experimental work in progress.\n\n#\n\n# Based one FindVLC.cmake by:\n\n# Copyright (c) 2011 Michael Jansen <info@michael-jansen.biz>\n\n# Modified by Tobias Hieta <tobias@hieta.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n### Global Configuration Section\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n### BREAKPAD uses pkgconfig.\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n### Look for the include files.\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Unused for BREAKPAD but anyway\n",
        "Line" : 36,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "#\n\n### Look for the libraries (BREAKPAD)\n\n#\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unused for BREAKPAD but anyway\n",
        "Line" : 50,
        "CharPositionInLine" : 36
      },
      "7" : {
        "Text" : "#\n\n### Check if everything was found and if the version is sufficient.\n\n#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/FindCEC.cmake" : {
      "ObjectId" : "53d36d50c4dd29f8aaf0d88f268ee2ca5f5d6d93",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindDL.cmake" : {
      "ObjectId" : "866d07fb96a9a3b5b5966511e25c9247e3d0b887",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - find where dlopen and friends are located.\n\n# DL_FOUND - system has dynamic linking interface available\n\n# DL_INCLUDE_DIR - where dlfcn.h is located.\n\n# DL_LIBRARIES - libraries needed to use dlopen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If dlopen can be found without linking in dl then dlopen is part\n\n# of libc, so don't need to link extra libs.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindGLES2.cmake" : {
      "ObjectId" : "d643e8ad296ae3529101e1a248675d2101f4fad2",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012, Guillermo A. Amaral B. (gamaral) <g@maral.me>.\n\n# All rights reserved.\n\n#\n\n# This file is part of Marshmallow Game Engine.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n#    1. Redistributions of source code must retain the above copyright notice,\n\n#       this list of conditions and the following disclaimer.\n\n#\n\n#    2. Redistributions in binary form must reproduce the above copyright\n\n#       notice, this list of conditions and the following disclaimer in the\n\n#       documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n\n# EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# The views and conclusions contained in the software and documentation are\n\n# those of the authors and should not be interpreted as representing official\n\n# policies, either expressed or implied, of the project as a whole.\n\n#\n\n###############################################################################\n\n# Find GLES2\n\n###############################################################################\n\n#\n\n#  GLES2_FOUND\n\n#  GLES2_INCLUDE_DIR\n\n#  GLES2_LIBRARY\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindICU.cmake" : {
      "ObjectId" : "c246bb69deb52cfc3fd94162d60bb9d4fa571c50",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module can find the International Components for Unicode (ICU) Library\n\n#\n\n# Requirements:\n\n# - CMake >= 2.8.3 (for new version of find_package_handle_standard_args)\n\n#\n\n# The following variables will be defined for your use:\n\n#   - ICU_FOUND             : were all of your specified components found (include dependencies)?\n\n#   - ICU_INCLUDE_DIRS      : ICU include directory\n\n#   - ICU_LIBRARIES         : ICU libraries\n\n#   - ICU_VERSION           : complete version of ICU (x.y.z)\n\n#   - ICU_MAJOR_VERSION     : major version of ICU\n\n#   - ICU_MINOR_VERSION     : minor version of ICU\n\n#   - ICU_PATCH_VERSION     : patch version of ICU\n\n#   - ICU_<COMPONENT>_FOUND : were <COMPONENT> found? (FALSE for non specified component if it is not a dependency)\n\n#\n\n# For windows or non standard installation, define ICU_ROOT variable to point to the root installation of ICU. Two ways:\n\n#   - run cmake with -DICU_ROOT=<PATH>\n\n#   - define an environment variable with the same name before running cmake\n\n# With cmake-gui, before pressing \"Configure\":\n\n#   1) Press \"Add Entry\" button\n\n#   2) Add a new entry defined as:\n\n#     - Name: ICU_ROOT\n\n#     - Type: choose PATH in the selection list\n\n#     - Press \"...\" button and select the root installation of ICU\n\n#\n\n# Example Usage:\n\n#\n\n#   1. Copy this file in the root of your project source directory\n\n#   2. Then, tell CMake to search this non-standard module in your project directory by adding to your CMakeLists.txt:\n\n#     set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\n#   3. Finally call find_package() once, here are some examples to pick from\n\n#\n\n#   Require ICU 4.4 or later\n\n#     find_package(ICU 4.4 REQUIRED)\n\n#\n\n#   if(ICU_FOUND)\n\n#      include_directories(${ICU_INCLUDE_DIRS})\n\n#      add_executable(myapp myapp.c)\n\n#      target_link_libraries(myapp ${ICU_LIBRARIES})\n\n#   endif(ICU_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright (c) 2011-2013, julp\n\n#\n\n# Distributed under the OSI-approved BSD License\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#=============================================================================\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########## Private ##########\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefix for all ICU relative public variables\n",
        "Line" : 53,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Prefix for all ICU relative internal variables\n",
        "Line" : 56,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Prefix for all pkg-config relative internal variables\n",
        "Line" : 59,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# <icu component name> <library name 1> ... <library name N>\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Common and Data libraries\n\n# Internationalization library\n\n# Stream and I/O Library\n\n# Layout library\n\n# Paragraph Layout library\n",
        "Line" : 97,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "########## Public ##########\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# may be done in the icu_declare_component macro\n",
        "Line" : 115,
        "CharPositionInLine" : 85
      },
      "10" : {
        "Text" : "# Check components\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# uc required at least\n",
        "Line" : 119,
        "CharPositionInLine" : 45
      },
      "12" : {
        "Text" : "# Includes\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########## <part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# ICU >= 4\n",
        "Line" : 142,
        "CharPositionInLine" : 72
      },
      "15" : {
        "Text" : "# ICU [2;4[\n",
        "Line" : 144,
        "CharPositionInLine" : 77
      },
      "16" : {
        "Text" : "# ICU [1.4;2[\n",
        "Line" : 146,
        "CharPositionInLine" : 75
      },
      "17" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 148,
        "CharPositionInLine" : 67
      },
      "18" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 154,
        "CharPositionInLine" : 105
      },
      "19" : {
        "Text" : "# [1.3;1.4[ as #define ICU_VERSION \"3\" (no patch version, ie all 1.3.X versions will be detected as 1.3.0)\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n# Since version 4.9.1, ICU release version numbering was totaly changed, see:\n\n# - http://site.icu-project.org/download/49\n\n# - http://userguide.icu-project.org/design#TOC-Version-Numbers-in-ICU\n\n#\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# ICU [1.4;1.8[\n",
        "Line" : 168,
        "CharPositionInLine" : 125
      },
      "22" : {
        "Text" : "# [1.4;1.8[ as #define U_ICU_VERSION \"1.4.1.2\" but it seems that some 1.4.1(?:\\.\\d)? have releasing error and appears as 1.4.0\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# copy CMAKE_MATCH_1, no longer valid on the following if\n",
        "Line" : 170,
        "CharPositionInLine" : 67
      },
      "24" : {
        "Text" : "########## </part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Check dependencies (implies pkg-config)\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check libraries\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# both not found\n",
        "Line" : 229,
        "CharPositionInLine" : 160
      },
      "28" : {
        "Text" : "# one or both found\n",
        "Line" : 232,
        "CharPositionInLine" : 162
      },
      "29" : {
        "Text" : "# release not found => we are in debug\n",
        "Line" : 234,
        "CharPositionInLine" : 89
      },
      "30" : {
        "Text" : "# debug not found => we are in release\n",
        "Line" : 236,
        "CharPositionInLine" : 91
      },
      "31" : {
        "Text" : "# both found\n",
        "Line" : 238,
        "CharPositionInLine" : 19
      },
      "32" : {
        "Text" : "# Try to find out compiler flags\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Check find_package arguments\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# IN (args)\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# OUT\n\n# Found\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Flags\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Linking\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Version\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "CMakeModules/FindIconv.cmake" : {
      "ObjectId" : "24cdae340dc72073c8481b34feb513d0cd35d696",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Iconv \n\n# Once done this will define \n\n# \n\n#  ICONV_FOUND - system has Iconv \n\n#  ICONV_INCLUDE_DIR - the Iconv include directory \n\n#  ICONV_LIBRARIES - Link these to use Iconv \n\n#  ICONV_SECOND_ARGUMENT_IS_CONST - the second argument for iconv() is const\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindMPV.cmake" : {
      "ObjectId" : "85e8f3bb5ac127a99aacaa25e857e51d71a6c137",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# CMake module to search for the mpv libraries.\n\n#\n\n# WARNING: This module is experimental work in progress.\n\n#\n\n# Based one FindVLC.cmake by:\n\n# Copyright (c) 2011 Michael Jansen <info@michael-jansen.biz>\n\n# Modified by Tobias Hieta <tobias@hieta.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n### Global Configuration Section\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n### MPV uses pkgconfig.\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n### Look for the include files.\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Unused for MPV but anyway\n",
        "Line" : 36,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "#\n\n### Look for the libraries\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unused for MPV but anyway\n",
        "Line" : 54,
        "CharPositionInLine" : 29
      },
      "7" : {
        "Text" : "#\n\n### Check if everything was found and if the version is sufficient.\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/FindSDL2.cmake" : {
      "ObjectId" : "9c8a3bdc093a698dbceea959a1bf74c4e5f3a1e8",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# CMake module to search for the SDL libraries.\n\n#\n\n# WARNING: This module is experimental work in progress.\n\n#\n\n# Based one FindVLC.cmake by:\n\n# Copyright (c) 2011 Michael Jansen <info@michael-jansen.biz>\n\n# Modified by Tobias Hieta <tobias@hieta.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n### Global Configuration Section\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n### SDL uses pkgconfig.\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n### Look for the include files.\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Unused for SDL but anyway\n",
        "Line" : 36,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "#\n\n### Look for the libraries (SDL and SDLsore)\n\n#\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unused for SDL but anyway\n",
        "Line" : 50,
        "CharPositionInLine" : 32
      },
      "7" : {
        "Text" : "#\n\n### Check if everything was found and if the version is sufficient.\n\n#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "1bf0230088768cb8d053883c3fda8b319414782e",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "CMakeModules/InputConfiguration.cmake" : {
      "ObjectId" : "c51db523a68ca8eeed3db1f29ba121afa75a96b8",
      "LastModified" : "2018-02-07T19:38:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#      find_package(Iconv)\n\n#      list(APPEND SDL2_LIBRARY ${ICONV_LIBRARIES})\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/InstallLinuxDesktopFile.cmake" : {
      "ObjectId" : "063eb86c13855d267105cf48ad74807e669167ac",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/LinuxConfiguration.cmake" : {
      "ObjectId" : "e7d51b1ad59be3a0b389e5c01a109592bc1d4b70",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/NameConfiguration.cmake" : {
      "ObjectId" : "dda3da1c88666bb489b24602600b94746d3fda99",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Name of the output binary, defaults are only used on Linux\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/PlayerConfiguration.cmake" : {
      "ObjectId" : "b830b3ff7f96772ac3fbfe4b331195015c58a9bf",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We want OpenGL or OpenGLES2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/QtConfiguration.cmake" : {
      "ObjectId" : "599b422ffee0ba608f3e114508ce0df0fae78fdb",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Write qt.conf in the Qt depends directory so that the Qt tools can find QML files\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# look for the config files in the QtConfigRoot defined above\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# look for the actual package\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "CMakeModules/VersionConfiguration.cmake" : {
      "ObjectId" : "ad914f8c7e38366bc3029496d48204da3cc5c6ab",
      "LastModified" : "2019-04-09T20:58:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get the current date.\n\n# include(WebClientVariables)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get git revision version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the build number if available\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/WebClient.cmake" : {
      "ObjectId" : "be98ffbea49e4f245c4a83beebc5bc55a491add6",
      "LastModified" : "2019-04-09T20:47:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the line to edit when you bump the web-client.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/Win32Configuration.cmake" : {
      "ObjectId" : "12abe1f429778d1bcdc20784489bd891e0a714b0",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/WindowsInstaller.cmake" : {
      "ObjectId" : "28a1358361658357de01570045d01723b8b7f612",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/utils.cmake" : {
      "ObjectId" : "0b129e94c44b72fcd774b77b08374e299a2cc5c2",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we read the LOCATION from the target instead of using a generator\n\n# here since add_custom_command doesn't support generator expresessions\n\n# in the output field, and this is still cleaner than hardcoding the path\n\n# of the output binary.\n\n#  \n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#############################################################\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################\n\n# function to collect all the sources from sub-directories\n\n# into a single list\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# make absolute paths\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# add it to the global list.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "## ---------------------------------------------------------------------\n\n##\n\n## Copyright (C) 2012 - 2014 by the deal.II authors\n\n##\n\n## This file is part of the deal.II library.\n\n##\n\n## The deal.II library is free software; you can use it, redistribute\n\n## it, and/or modify it under the terms of the GNU Lesser General\n\n## Public License as published by the Free Software Foundation; either\n\n## version 2.1 of the License, or (at your option) any later version.\n\n## The full text of the license can be found in the file LICENSE at\n\n## the top level of the deal.II distribution.\n\n##\n\n## ---------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Tests whether the cxx compiler understands a flag.\n\n# If so, add it to 'variable'.\n\n#\n\n# Usage:\n\n#     ENABLE_IF_SUPPORTED(variable flag)\n\n#\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Clang is too conservative when reporting unsupported compiler flags.\n\n# Therefore, we promote all warnings for an unsupported compiler flag to\n\n# actual errors with the -Werror switch:\n\n#\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\n\n# Gcc does not emit a warning if testing -Wno-... flags which leads to\n\n# false positive detection. Unfortunately it later warns that an unknown\n\n# warning option is used if another warning is emitted in the same\n\n# compilation unit.\n\n# Therefore we invert the test for -Wno-... flags:\n\n#\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#\n\n# Tests whether it is possible to compile and link a dummy program with a\n\n# given flag.\n\n# If so, add it to variable.\n\n#\n\n# Usage:\n\n#     ENABLE_IF_LINKS(variable flag)\n\n#\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#############################################################\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#############################################################\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "external/CMakeLists.txt" : {
      "ObjectId" : "95316ed4387ba9a155af0e2c4fb75cf6da7b24cd",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/HIDRemote/CMakeLists.txt" : {
      "ObjectId" : "1cffeb1f254e0ddef1610a2e12426dcb287a01c9",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/SPMediaKeyTap/CMakeLists.txt" : {
      "ObjectId" : "f076fb1744017245a8c814dd963468c14f459cf6",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPMediaKeyTap uses some deprecated methods, no need to fix that right now, so let's supress the warnings.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/letsmove/CMakeLists.txt" : {
      "ObjectId" : "0e376120f9b49fefd8b6f90d9df1e5b3d0393aa2",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/plistparser/CMakeLists.txt" : {
      "ObjectId" : "871679a677ab7584fd7bf396c23dbd6bb9d1b724",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/qhttp/CMakeLists.txt" : {
      "ObjectId" : "ccc5152e737212e254984c45c0976914d0f3dfc0",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/qslog/CMakeLists.txt" : {
      "ObjectId" : "ae0f52d1613634b235b67e452fa9ccca94b12691",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "373ff7ac843400e4670cb7b4b93d4646dd9919fe",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake issue: breakpad-client.pc adds this, but cmake discards it\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Set some Objective-C flags.\n\n# We need to force the Language to C instead of C++\n\n# and also make sure that we use ARC\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# generate resources.qrc from directory tree listings\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# copy the qt.conf so that when running PMP from a debugger it finds the plugins and QML files\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FindZLIB doesn't find this. (It might be possible to fix the minizip build\n\n# to not require this.)\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/breakpad/CMakeLists.txt" : {
      "ObjectId" : "03deec06c681a8fb0eb2f5af65cbfb09b990739b",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# requires Linux kernel and glibc\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "e881e222d31ef389b1f967c8d4e1586b58d91b90",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/display/CMakeLists.txt" : {
      "ObjectId" : "fb284f4b3453e79d7ed2a20ac9c9d974a972f76e",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/display/dummy/CMakeLists.txt" : {
      "ObjectId" : "b0e41b992199b9cd7ecd9e05a7de09f43c077af9",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/display/osx/CMakeLists.txt" : {
      "ObjectId" : "d88261a8febdcb70984c6366928b32db43c46554",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/display/rpi/CMakeLists.txt" : {
      "ObjectId" : "f46472cfd67ce6e123b13928116eddfe88ad93dc",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/display/win/CMakeLists.txt" : {
      "ObjectId" : "a8b7e3d5a3f8877fe5b8d63397611f4b390bcc0a",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/display/x11/CMakeLists.txt" : {
      "ObjectId" : "55ac163ed0f07c20af0de6f4601b883f7c2cbd4c",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/input/CMakeLists.txt" : {
      "ObjectId" : "2a9475c42e209e0e8cbd1eba59ed343807f768da",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/input/apple/CMakeLists.txt" : {
      "ObjectId" : "34eeff89962b9459e4ceb85f3d41a1c957ca4939",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/player/CMakeLists.txt" : {
      "ObjectId" : "c75f497467d0c85d3ce048e8b7fcb1063338147b",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/RPI_jpeg/RPI_jpeg.pro" : {
      "ObjectId" : "f3bc45faec77590d9f540502bc15d4c609ed587c",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------\n\n#\n\n# Project created by QtCreator 2015-05-29T20:58:57\n\n#\n\n#-------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/power/CMakeLists.txt" : {
      "ObjectId" : "d40d9da4c356ecf581730be04270bb217d017c6e",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/remote/CMakeLists.txt" : {
      "ObjectId" : "cd21d513983f56cfbed91127140f114b0a59de75",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/server/CMakeLists.txt" : {
      "ObjectId" : "493d7a9a2b2d3ab7c70aba019380c8f97c3bac42",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/settings/CMakeLists.txt" : {
      "ObjectId" : "6cdb928e5c0819538b0da7ce88c9b211930c9509",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shared/CMakeLists.txt" : {
      "ObjectId" : "a268db888284d480abab66ff4f8c173e543980e0",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/system/CMakeLists.txt" : {
      "ObjectId" : "4edd725cc959f670b5cf856968edde9b469dc47a",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/system/openelec/CMakeLists.txt" : {
      "ObjectId" : "feca04818f1318bd7222dbc616ed99eeeda12d72",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "3e7960bd49c6666e3f76472bc66b5193c31b9801",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(socket-client)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tools/helper/CMakeLists.txt" : {
      "ObjectId" : "318f7f5681d2dcfac0af3592f0d990b69e7366b4",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/socket-client/CMakeLists.txt" : {
      "ObjectId" : "f4f211e221fe9dc4d9db28c75fad10a4d676baa3",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ui/CMakeLists.txt" : {
      "ObjectId" : "74e9a90f3147f9d88ab52d8f732af12bc1ce8066",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/utils/CMakeLists.txt" : {
      "ObjectId" : "3bb49e51cbe9bbe143231bb85234cfc29033243c",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/utils/osx/CMakeLists.txt" : {
      "ObjectId" : "e533a89d1ff05f2f7a41807537f181388ba46d01",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/utils/win/CMakeLists.txt" : {
      "ObjectId" : "bd1b7d9bad6e51a8335604ab7d1f1ffdc8d7c119",
      "LastModified" : "2018-05-07T16:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 62,
    "QMAKE" : 1
  },
  "ElapsedTime" : 1756
}