{
  "Repository" : "806576",
  "Revision" : "HEAD",
  "ObjectId" : "7850657f6bfbd38cf0ac6838588444a8cdbdfe90",
  "CommitTime" : "2019-04-18T16:53:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "145740dde15c3ddc196e1c593257eb98143d2965",
      "LastModified" : "2019-04-16T16:36:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Rspamd - rapid antispam system\n\n#\n\n# Cmake configuration file\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################# INITIAL SECTION #############################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Keep two digits all the time\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default for SysV Init\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############################# OPTIONS SECTION #############################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For utf8 API\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Build optimized code for following CPU (default i386)\n\n#SET(CPU_TUNE               \"i686\")\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Now CMAKE_INSTALL_PREFIX is a base prefix for everything\n\n# CONFDIR - for configuration\n\n# LOCAL_CONFDIR - for local configuration\n\n# MANDIR - for manual pages\n\n# RUNDIR - for runtime files\n\n# DBDIR - for static files\n\n# LOGDIR - for log files\n\n# EXAMPLESDIR - for examples files\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set libdir\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set includedir\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Dirty hack for cmake\n",
        "Line" : 177,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# remove -Wl,-Bdynamic\n",
        "Line" : 178,
        "CharPositionInLine" : 43
      },
      "12" : {
        "Text" : "# remove -fPIC\n",
        "Line" : 180,
        "CharPositionInLine" : 43
      },
      "13" : {
        "Text" : "# remove -rdynamic\n",
        "Line" : 182,
        "CharPositionInLine" : 43
      },
      "14" : {
        "Text" : "############################# INCLUDE SECTION #############################################\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "############################# MACRO SECTION #############################################\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find lua installation\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find lua libraries\n",
        "Line" : 210,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Process required package by using FindPackage and calling for INCLUDE_DIRECTORIES and\n\n# setting list of required libraries\n\n# Usage:\n\n# ProcessPackage(VAR [OPTIONAL] [ROOT path] [INCLUDE path]\n\n#\t[LIBRARY path] [INCLUDE_SUFFIXES path1 path2 ...] [LIB_SUFFIXES path1 path2 ...]\n\n#\t[MODULES module1 module2 ...])\n\n# params:\n\n# OPTIONAL - do not fail if a package has not been found\n\n# ROOT - defines root directory for a package\n\n# INCLUDE - name of the include file to check\n\n# LIBRARY - name of the library to check\n\n# INCLUDE_SUFFIXES - list of include suffixes (relative to ROOT)\n\n# LIB_SUFFIXES - list of library suffixes\n\n# MODULES - modules to search using pkg_config\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Handle other CFLAGS and LDFLAGS\n",
        "Line" : 395,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Try some more heuristic\n",
        "Line" : 406,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# We need to apply heuristic to find the real dir name\n",
        "Line" : 432,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "############################# CONFIG SECTION #############################################\n\n# Initial set\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prefer local include dirs to system ones\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#Stored in the binary dir\n",
        "Line" : 511,
        "CharPositionInLine" : 28
      },
      "25" : {
        "Text" : "# Platform specific configuration\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Find util library\n",
        "Line" : 528,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Workaround with architecture specific includes\n\n#IF(IS_DIRECTORY \"/usr/include/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu/\")\n\n#\tINCLUDE_DIRECTORIES(\"/usr/include/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu/\")\n\n#\tLIST(APPEND CMAKE_REQUIRED_INCLUDES \"/usr/include/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu/\")\n\n#ENDIF(IS_DIRECTORY \"/usr/include/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu/\")\n",
        "Line" : 559,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Ugly hack, but FindOpenSSL on Solaris does not link with libcrypto\n",
        "Line" : 596,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Now find libraries and headers\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#ProcessPackage(LUAJIT luajit)\n",
        "Line" : 605,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "#Check for openssl (required for dkim)\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Google performance tools\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Process with warn flags\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# GCC 6 specific\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# GCC 7 specific\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#IF(SUPPORT_PEDANTIC_FLAG)\n\n#\tSET(CMAKE_C_WARN_FLAGS \"${CMAKE_C_WARN_FLAGS} -pedantic\")\n\n#ENDIF(SUPPORT_PEDANTIC_FLAG)\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Optimization flags\n",
        "Line" : 812,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Check platform specific includes\n",
        "Line" : 858,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# OSX specific\n",
        "Line" : 917,
        "CharPositionInLine" : 56
      },
      "40" : {
        "Text" : "# Check platform API\n",
        "Line" : 919,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Check macros\n",
        "Line" : 969,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Some PCRE implementations are lacking of pcre_jit_exec fast path\n",
        "Line" : 1018,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Some hack for libevent 2.0\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Check asm pause instruction\n",
        "Line" : 1101,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# In linux, we need to mount /run/shm to test which could be unavailable\n\n# on a build system. On the other hand, we know that linux has stupid\n\n# but compatible shmem support, so we assume this macro as true\n",
        "Line" : 1144,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# Check queue.h compatibility\n",
        "Line" : 1192,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Try to find libcurl\n",
        "Line" : 1209,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "################################ SUBDIRS SECTION ###########################\n",
        "Line" : 1223,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "############################ TARGETS SECTION ###############################\n",
        "Line" : 1295,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "##################### INSTALLATION ##########################################\n",
        "Line" : 1301,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Binaries\n",
        "Line" : 1303,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Configs\n",
        "Line" : 1305,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Install configs only if they are unchanged\n",
        "Line" : 1313,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Lua plugins\n",
        "Line" : 1336,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Install TLD list\n",
        "Line" : 1347,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Install languages data\n",
        "Line" : 1351,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Lua config\n",
        "Line" : 1359,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Lua libs\n",
        "Line" : 1368,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Install lua fun library\n",
        "Line" : 1377,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# systemd unit\n",
        "Line" : 1388,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Manual pages\n",
        "Line" : 1393,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Utils\n",
        "Line" : 1398,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Install webui\n",
        "Line" : 1401,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# PVS Studio\n",
        "Line" : 1420,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "FindArch.cmake" : {
      "ObjectId" : "2772892482dbf3c2ea93bc1658b0f3eaf708a887",
      "LastModified" : "2015-12-20T21:23:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "FindRagel.cmake" : {
      "ObjectId" : "a058b7fb1936f433988aa9d834f213117a88968d",
      "LastModified" : "2016-06-14T21:40:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Ragel executable and provides macros to generate custom build rules\n\n# The module defines the following variables:\n\n#\n\n#  RAGEL_EXECUTABLE - path to the ragel program\n\n#  RAGEL_VERSION - version of ragel\n\n#  RAGEL_FOUND - true if the program was found\n\n#\n\n# If ragel is found, the module defines the macros:\n\n#\n\n#  RAGEL_TARGET(<Name> INPUTS <inputs> OUTPUT <output>\n\n#              [COMPILE_FLAGS <string>] [DEPENDS <depends>])\n\n#\n\n# which will create  a custom rule to generate a state machine. <RagelInp> is\n\n# the path to a Ragel file. <CodeOutput> is the name of the source file\n\n# generated by ragel. If  COMPILE_FLAGS option is specified, the next\n\n# parameter is  added in the ragel  command line.\n\n#\n\n# The macro defines a set of variables:\n\n#  RAGEL_${Name}_DEFINED       - true is the macro ran successfully\n\n#  RAGEL_${Name}_INPUT         - The input source file, an alias for <RagelInp>\n\n#  RAGEL_${Name}_OUTPUT_SOURCE - The source file generated by ragel\n\n#  RAGEL_${Name}_OUTPUT_HEADER - The header file generated by ragel\n\n#  RAGEL_${Name}_OUTPUTS       - The sources files generated by ragel\n\n#  RAGEL_${Name}_COMPILE_FLAGS - Options used in the ragel command line\n\n#\n\n#  ====================================================================\n\n#  Example:\n\n#\n\n#   find_package(RAGEL) # or e.g.: find_package(RAGEL 6.6 REQUIRED)\n\n#   RAGEL_TARGET(MyMachine machine.rl ${CMAKE_CURRENT_BINARY_DIR}/machine.cc)\n\n#   add_executable(Foo main.cc ${RAGEL_MyMachine_OUTPUTS})\n\n#  ====================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 2014-02-09, Georg Sauthoff <mail@georg.so>\n\n#\n\n# I don't think that these few lines are even copyrightable material,\n\n# but I am fine with using the BSD/MIT/GPL license on it ...\n\n#\n\n# I've used following references:\n\n# http://www.cmake.org/cmake/help/v2.8.12/cmake.html\n\n# /usr/share/cmake/Modules/FindFLEX.cmake\n\n# /usr/share/cmake/Modules/FindBISON.cmake\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# uses some features which are not available in 2.6\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#============================================================\n\n# RAGEL_TARGET (public macro)\n\n#============================================================\n\n#\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# use this include when module file is located under /usr/share/cmake/Modules\n\n#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n\n# use this include when module file is located in build tree\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "PVS-Studio.cmake" : {
      "ObjectId" : "6001f3337c1bcba8b317f4fb1c0518b28bc72e30",
      "LastModified" : "2019-03-13T15:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 2006-2008 (c) Viva64.com Team\n\n# 2008-2018 (c) OOO \"Program Verification Systems\"\n\n#\n\n# Version 12\n\n# Apache 2.0 license\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This code runs at build time.\n\n# It executes pvs-studio-analyzer and propagates its return value.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# A workaround for macOS frameworks (e.g. QtWidgets.framework)\n\n# You can test this workaround on this project: https://github.com/easyaspi314/MidiEditor/tree/gba\n",
        "Line" : 23,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# A workaround to support implicit dependencies for ninja generators.\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# https://public.kitware.com/Bug/print_bug_page.php?bug_id=14353\n\n# https://public.kitware.com/Bug/file/5436/expand_command.cmake\n\n#\n\n# It is a workaround to expand generator expressions.\n",
        "Line" : 192,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# pvs_studio_add_target\n\n# Target options:\n\n# ALL                           add PVS-Studio target to default build (default: off)\n\n# TARGET target                 name of analysis target (default: pvs)\n\n# ANALYZE targets...            targets to analyze\n\n# RECURSIVE                     analyze target's dependencies (requires CMake 3.5+)\n\n# COMPILE_COMMANDS              use compile_commands.json instead of targets (specified by the 'ANALYZE' option) to determine files for analysis\n\n#                               (set CMAKE_EXPORT_COMPILE_COMMANDS, available only for Makefile and Ninja generators)\n\n#\n\n# Output options:\n\n# OUTPUT                        prints report to stdout\n\n# LOG path                      path to report (default: ${CMAKE_CURRENT_BINARY_DIR}/PVS-Studio.log)\n\n# FORMAT format                 format of report\n\n# MODE mode                     analyzers/levels filter (default: GA:1,2)\n\n# HIDE_HELP                     do not print help message\n\n#\n\n# Analyzer options:\n\n# PLATFORM name                 linux32/linux64 (default: linux64)\n\n# PREPROCESSOR name             preprocessor type: gcc/clang (default: auto detected)\n\n# LICENSE path                  path to PVS-Studio.lic (default: ~/.config/PVS-Studio/PVS-Studio.lic)\n\n# CONFIG path                   path to PVS-Studio.cfg\n\n# CFG_TEXT text                 embedded PVS-Studio.cfg\n\n# KEEP_COMBINED_PLOG            do not delete combined plog file *.pvs.raw for further processing with plog-converter\n\n#\n\n# Misc options:\n\n# DEPENDS targets..             additional target dependencies\n\n# SOURCES path...               list of source files to analyze\n\n# BIN path                      path to pvs-studio-analyzer (Unix) or CompilerCommandsAnalyzer.exe (Windows)\n\n# CONVERTER path                path to plog-converter (Unix) or HtmlGenerator.exe (Windows)\n\n# C_FLAGS flags...              additional C_FLAGS\n\n# CXX_FLAGS flags...            additional CXX_FLAGS\n\n# ARGS args...                  additional pvs-studio-analyzer/CompilerCommandsAnalyzer.exe flags\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# A workaround to add implicit dependencies of source files from include directories\n",
        "Line" : 545,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "clang-plugin/CMakeLists.txt" : {
      "ObjectId" : "62a1d68f51f4fcb59e31ec3a066cbc6ba08857a0",
      "LastModified" : "2019-03-13T15:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang plugin for static analysis\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# LLVM Debian/Ubuntu nightly packages: http://llvm.org/apt/\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# LLVM MacPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# LLVM Homebrew\n",
        "Line" : 16,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# LLVM Homebrew/versions\n",
        "Line" : 18,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# FreeBSD ports versions\n",
        "Line" : 20,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# LLVM Debian/Ubuntu nightly packages: http://llvm.org/apt/\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# LLVM MacPorts\n",
        "Line" : 28,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# LLVM Homebrew\n",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# LLVM Homebrew/versions\n",
        "Line" : 32,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# FreeBSD ports versions\n",
        "Line" : 34,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "#Windows package from http://llvm.org/releases/\n",
        "Line" : 41,
        "CharPositionInLine" : 39
      },
      "12" : {
        "Text" : "#Windows package from http://llvm.org/releases/\n",
        "Line" : 45,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 13
    },
    "clang-plugin/FindLLVM.cmake" : {
      "ObjectId" : "8da444d52e120c3e7ca9b0de6608dc95d1075518",
      "LastModified" : "2019-03-13T15:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===------------------------------------------------------------------------===#\n\n#\n\n#                     The KLEE Symbolic Virtual Machine\n\n#\n\n# This file is distributed under the University of Illinois Open Source\n\n# License. See LICENSE.TXT for details.\n\n#\n\n#===------------------------------------------------------------------------===#\n\n#\n\n# This file provides multiple methods to detect LLVM.\n\n#\n\n# * llvm-config executable. This method is portable across LLVM build systems\n\n# (i.e. works if LLVM was built with autoconf/Makefile or with CMake).\n\n#\n\n# * find_package(LLVM CONFIG). This method only works if LLVM was built with\n\n# CMake or with LLVM >= 3.5 when built with the autoconf/Makefile build system\n\n# This method relies on the `LLVMConfig.cmake` file generated to be generated\n\n# by LLVM's build system.\n\n#\n\n#===------------------------------------------------------------------------===#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide function to map LLVM components to libraries.\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# HACK: This information is not exported so just pretend its OFF for now.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use the llvm-config binary to get the information needed.\n\n# Try to detect it in the user's environment. The user can\n\n# force a particular binary by passing `-DLLVM_CONFIG_BINARY=/path/to/llvm-config`\n\n# to CMake.\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get LLVM version\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Try x.y.z patern\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# try x.y pattern\n",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Filter out -I flags by only looking for -D flags.\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Note we don't rely on `llvm-config --build-mode` because\n\n# that seems broken when LLVM is built with CMake.\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Filter out -D flags by only looking for -I flags.\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Provide function to map LLVM components to libraries.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Now find the system libs that are needed.\n",
        "Line" : 161,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# For LLVM 3.4 and older system libraries\n\n# appeared in the output of `--ldflags`.\n",
        "Line" : 163,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# TODO: Filter out `-L<path>` flag.\n",
        "Line" : 166,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Create an imported target for each LLVM library\n\n# if it doesn't already exist. We need to do this\n\n# so we can tell CMake that these libraries depend\n\n# on the necessary libraries so that CMake\n\n# can get the link order right.\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# a bug in llvm-config from LLVM 3.9\n",
        "Line" : 180,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# DEBUG: message(STATUS \"Creating imported target \\\"${target_name}\\\"\" \" for \\\"${llvm_lib}\\\"\")\n",
        "Line" : 188,
        "CharPositionInLine" : 16
      },
      "17" : {
        "Text" : "# Create an imported target for the library\n",
        "Line" : 195,
        "CharPositionInLine" : 16
      },
      "18" : {
        "Text" : "# Now state the dependencies of the created imported targets which we\n\n# assume to be for each imported target the libraries which appear after\n\n# the library in `{_llvm_libs_list}` and then finally the system libs.\n\n# It is **essential** that we do this otherwise CMake will get the\n\n# link order of the imported targets wrong.\n",
        "Line" : 203,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# DEBUG: message(STATUS \"Adding deps for target ${llvm_target_lib}\")\n\n# Find position in `targets_to_return`\n",
        "Line" : 212,
        "CharPositionInLine" : 16
      },
      "20" : {
        "Text" : "# Get the target for this index\n",
        "Line" : 221,
        "CharPositionInLine" : 24
      },
      "21" : {
        "Text" : "# DEBUG: message(STATUS \"${llvm_target_libs} depends on ${target_for_index}\")\n",
        "Line" : 223,
        "CharPositionInLine" : 24
      },
      "22" : {
        "Text" : "# Now finally add the system library dependencies. These must be last.\n",
        "Line" : 229,
        "CharPositionInLine" : 16
      },
      "23" : {
        "Text" : "# Filter out `-DNEBUG` from LLVM_DEFINITIONS.  The caller can use\n\n# `LLVM_ENABLE_ASSERTIONS` to decide how to set their defines.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Skip\n",
        "Line" : 245,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 25
    },
    "contrib/aho-corasick/CMakeLists.txt" : {
      "ObjectId" : "93c51a14615731449375c0c6eb7d250983b7780e",
      "LastModified" : "2019-03-13T15:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/cdb/CMakeLists.txt" : {
      "ObjectId" : "6b5b676dc897251dc5d5f6afe1134eea2c9d77c3",
      "LastModified" : "2019-03-13T15:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CDB support makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/fpconv/CMakeLists.txt" : {
      "ObjectId" : "0d27dbb7f6c540b7869892f134167afacb5bbbd9",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/hiredis/CMakeLists.txt" : {
      "ObjectId" : "f8b233996eb220dcc501010f5f79253e8ae716f6",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/http-parser/CMakeLists.txt" : {
      "ObjectId" : "499c85e932175600368c89e4c48f2be393b731a4",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lc-btrie/CMakeLists.txt" : {
      "ObjectId" : "b520bda862540edc7028e6806e1fb5cf80c1b1e9",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libottery/CMakeLists.txt" : {
      "ObjectId" : "4a6ee31db50544a118ab9168555402704571e801",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/librdns/CMakeLists.txt" : {
      "ObjectId" : "a5733e60f13386ef8ac0db185892dc6562cd45a6",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libucl/CMakeLists.txt" : {
      "ObjectId" : "cda8091161b3dc2924963aaa1cf266bfd9b2e5cc",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/linenoise/CMakeLists.txt" : {
      "ObjectId" : "8fc9ff843d2a50c8195db6aa88d6360835e8acbf",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-lpeg/CMakeLists.txt" : {
      "ObjectId" : "2362aac9cd5e69ccb6e71d5f3a099ee584c2a21d",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/decisiontree/CMakeLists.txt" : {
      "ObjectId" : "b94b4deb234b54f5f499755c9923109ec94cb583",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Torch packages supposes libraries prefix is \"lib\"\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/lua-torch/nn/CMakeLists.txt" : {
      "ObjectId" : "cebddfbfc4a0da38140cd34d5788d74894b0dce3",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/nn/lib/CMakeLists.txt" : {
      "ObjectId" : "de04595f6b0d7c69eaeafaa8a85864c200b4ee90",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/nn/lib/THNN/CMakeLists.txt" : {
      "ObjectId" : "57f9e2e193a639371d903536550008a4122f7ba7",
      "LastModified" : "2019-04-06T11:38:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Flags\n\n# When using MSVC\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we want to respect the standard, and we are bored of those **** .\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "### Torch packages supposes libraries prefix is \"lib\"\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/lua-torch/optim/CMakeLists.txt" : {
      "ObjectId" : "b1c13e7011b6ca038e1a524f1385ce47e0144488",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/paths/CMakeLists.txt" : {
      "ObjectId" : "c578b66e99f705cadc2e93845936173ebe5177d2",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# When using MSVC\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we want to respect the standard, and we are bored of those **** .\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "contrib/lua-torch/torch7/CMakeLists.txt" : {
      "ObjectId" : "cb73f609609e7b9009a490c5cf63644b3f5dbb2a",
      "LastModified" : "2019-04-06T11:38:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Includes\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Torch libraries\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Necessary do generate wrapper\n\n#ADD_TORCH_WRAP(tensormathwrap TensorMath.lua)\n\n#ADD_TORCH_WRAP(randomwrap random.lua)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/lua-torch/torch7/cmake/TorchExports.cmake" : {
      "ObjectId" : "f47fd6f59d67881162078f8c976ec32e9c0f5fe1",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/torch7/cmake/TorchPackage.cmake" : {
      "ObjectId" : "846b263a41a6910cb487bc36f595610052504160",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### C/C++ sources\n\n# As per CMake doc, macro arguments are not variables, so simple test syntax not working\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "### Torch packages supposes libraries prefix is \"lib\"\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "### lua sources\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "contrib/lua-torch/torch7/cmake/TorchPaths.cmake" : {
      "ObjectId" : "70c7a4fb8375e5f7c4698e4c3831b43119434b97",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# workaround another annoying cmake bug\n\n# http://public.kitware.com/Bug/view.php?id=14462\n\n# https://awesome.naquadah.org/bugs/index.php?do=details&task_id=869\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/lua-torch/torch7/cmake/TorchPathsInit.cmake" : {
      "ObjectId" : "42f8ffb3f0c098f366fed21d675f61e00142fe97",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(Torch_INSTALL_DOK \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_DOK_SUBDIR}\")\n\n#SET(Torch_INSTALL_HTML \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_HTML_SUBDIR}\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(Torch_INSTALL_LUA_PKG_PATH \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_LUA_PKG_PATH_SUBDIR}\")\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SET(Torch_INSTALL_LUAROCKS_SYSCONF \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_LUAROCKS_SYSCONF_SUBDIR}\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# reverse relative path to prefix (ridbus is the palindrom of subdir)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "contrib/lua-torch/torch7/cmake/TorchWrap.cmake" : {
      "ObjectId" : "b367b240245a03d2921635f892c7cd8c9bce8622",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/torch7/lib/CMakeLists.txt" : {
      "ObjectId" : "d6a0e2c9c088d65b9c3ec3502cdbb4c098c79d67",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/torch7/lib/TH/CMakeLists.txt" : {
      "ObjectId" : "f7e0bf9bb329dcea438f14abd86748adf244b659",
      "LastModified" : "2019-04-06T11:38:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid some cmake warnings\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n##### flags section\n\n######################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC now supports C99 since VS2013/VS2015, however the standard version switch is not provided yet\n\n# SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /std:c99\")\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# enable gnu99 and not c99 because we use\n\n# gnu extensions like posix_memalign\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# respect the standard\n",
        "Line" : 22,
        "CharPositionInLine" : 49
      },
      "5" : {
        "Text" : "# prevent Unknown CMake command \"check_function_exists\".\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OpenMP support?\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ARM specific flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for a cpuid intrinsic\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# checks SSE, AVX and AVX2\n",
        "Line" : 95,
        "CharPositionInLine" : 18
      },
      "10" : {
        "Text" : "# we dont set -mavx and -mavx2 flags globally, but only for specific files\n\n# however, we want to enable the AVX codepaths, so we still need to\n\n# add USE_AVX and USE_AVX2 macro defines\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################################################################\n\n##### sources section\n\n######################################################################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# IF ANY SIMD FOUND\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# IF AVX FOUND\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#######################################################################\n\n##### build section\n\n######################################################################\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# https://github.com/libgit2/libgit2/issues/2128#issuecomment-35649830\n",
        "Line" : 249,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Is __thread supported?\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "contrib/lua-torch/torch7/lib/TH/cmake/FindARM.cmake" : {
      "ObjectId" : "2dcb2a24f208b56c1184736fceb96861b6ce0864",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the processor is an ARM and if Neon instruction are available on the machine where\n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#neon instruction can be found on the majority part of modern ARM processor\n",
        "Line" : 7,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# on ARMv8, neon is inherit and instead listed as 'asimd' in /proc/cpuinfo\n",
        "Line" : 16,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#Find the processor type (for now OMAP3 or OMAP4)\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#Find the processor type (for now OMAP3 or OMAP4)\n",
        "Line" : 34,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#neon instruction can be found on the majority part of modern ARM processor\n",
        "Line" : 47,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# TODO\n",
        "Line" : 57,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 7
    },
    "contrib/lua-torch/torch7/lib/TH/cmake/FindBLAS.cmake" : {
      "ObjectId" : "1f254d231c5afa72af1399598cf273d032120612",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find BLAS library\n\n# This module finds an installed fortran library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface is found.\n\n#  BLAS_INFO - name of the detected BLAS library.\n\n#  BLAS_F2C - set to true if following the f2c return convention\n\n#  BLAS_LIBRARIES - list of libraries to link against to use BLAS\n\n#  BLAS_INCLUDE_DIR - include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing is BLAS was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Old FindBlas\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to NOTFOUND.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Intel MKL?\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Determine if blas was compiled with the f2c conventions\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# epilogue\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Do nothing is BLAS was found before\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "contrib/lua-torch/torch7/lib/TH/cmake/FindLAPACK.cmake" : {
      "ObjectId" : "9eca0730fc2683dfe0963dc49a1e054564abec71",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface is found\n\n#  LAPACK_LIBRARIES - list of libraries (using full path name) for LAPACK\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: I do not think it is a good idea to mixup different BLAS/LAPACK versions\n\n# Hence, this script wants to find a Lapack library matching your Blas library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Old search lapack script\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Intel MKL\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# OpenBlas\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# GotoBlas\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ACML\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Accelerate\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# vecLib\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "contrib/lua-torch/torch7/lib/TH/cmake/FindMKL.cmake" : {
      "ObjectId" : "08b4509853d5298ddf13aaa09a97846189e17216",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find INTEL MKL library\n\n#\n\n# This module finds the Intel Mkl libraries.\n\n#\n\n# This module sets the following variables:\n\n#  MKL_FOUND - set to true if a library implementing the CBLAS interface is found\n\n#  MKL_VERSION - best guess\n\n#  MKL_INCLUDE_DIR - path to include dir.\n\n#  MKL_LIBRARIES - list of libraries for base mkl\n\n#  MKL_LAPACK_LIBRARIES - list of libraries to add for lapack\n\n#  MKL_SCALAPACK_LIBRARIES - list of libraries to add for scalapack\n\n#  MKL_SOLVER_LIBRARIES - list of libraries to add for the solvers\n\n#  MKL_CDFT_LIBRARIES - list of libraries to add for the solvers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Includes\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Intel Compiler Suite\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Checks\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Kernel libraries dynamically loaded\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Paths\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try linking multiple libs\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This macro checks for the existence of the combination of libraries given by _list.\n\n# If the combination is found, this macro whether we can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# start checking\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Fin\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Check for version 10/11\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for older versions\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Include files\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Other libraries\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# LibIRC: intel compiler always links this;\n\n# gcc does not; but mkl kernels sometimes need it.\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Final\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Standard termination\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "contrib/lua-torch/torch7/lib/TH/cmake/FindSSE.cmake" : {
      "ObjectId" : "a14abe8d4c0692f5a535b95e55f7dec5b5dff54b",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/lua-torch/torch7/lib/luaT/CMakeLists.txt" : {
      "ObjectId" : "518c407f21de95ed292c119e150815c24379a865",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid some cmake warnings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# note: must be done before defining target\n",
        "Line" : 5,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# must be done after ;)\n",
        "Line" : 11,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 3
    },
    "contrib/snowball/CMakeLists.txt" : {
      "ObjectId" : "8674e2d88a7539424d7394c0fa506f7bf10203f4",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# End of configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#LIBSTEMMER_UTF8_SOURCES = libstemmer/libstemmer_utf8.c\n\n#LIBSTEMMER_HEADERS = include/libstemmer.h libstemmer/modules.h libstemmer/modules_utf8.h\n\n#LIBSTEMMER_EXTRA = libstemmer/modules.txt libstemmer/modules_utf8.txt libstemmer/libstemmer_c.in\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/t1ha/CMakeLists.txt" : {
      "ObjectId" : "491010ff959b0697aee65c5069da7005c69ec817",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/xxhash/CMakeLists.txt" : {
      "ObjectId" : "8caf319e4f604c6cd9327f0f4565184bc87d5fc7",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/zstd/CMakeLists.txt" : {
      "ObjectId" : "2cccee0c170b0cb31fc67a1196c9448967e057d0",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/Makefile" : {
      "ObjectId" : "e77bca045772c933a0958f54812b9635206195fb",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A simple makefile to generate documentation from .md using pandoc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "freebsd/cmake/PkgCreate.cmake" : {
      "ObjectId" : "547e8c967396e7b46b555c007ed07d9f9223ca0e",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PkgCreate creates FreeBSD package for cmake\n\n# USAGE : ADD_FREEBSD_PACKAGE ( PKG_TARGET_NAME [DESCRIPTION] )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let's create a directory to call 'make install DESTDIR=...' into:\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Calling \"make install DESTDIR=${FREEBSD_DIR}\"\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# removing control, so its (re)generated each time we need to build the package\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# the final target:\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "f755779e6925b5bba2c3bb98e975eedfb10895bb",
      "LastModified" : "2019-04-06T11:38:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate unique string for this build\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle even old cmake\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Handle even old cmake\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#IF(NOT EXISTS \"modules.c\")\n\n#\t_AddModulesForced(${MLIST} ${WLIST})\n\n#ELSE(NOT EXISTS \"modules.c\")\n\n#\tFILE(STRINGS \"modules.c\" FILE_ID_RAW REGEX \"^/.*[a-zA-Z0-9]+.*/$\")\n\n#\tSTRING(REGEX MATCH \"[a-zA-Z0-9]+\" FILE_ID \"${FILE_ID_RAW}\")\n\n#\tIF(NOT FILE_ID STREQUAL MODULES_ID)\n\n#\t\tMESSAGE(\"Regenerate modules info\")\n\n#\t\t_AddModulesForced(${MLIST} ${WLIST})\n\n#\tENDIF(NOT FILE_ID STREQUAL MODULES_ID)\n\n#ENDIF(NOT EXISTS \"modules.c\")\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Rspamd core components\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "######################### LINK SECTION ###############################\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/client/CMakeLists.txt" : {
      "ObjectId" : "4e1225ae35a26d0ba5ef759d0bc982b2214fc140",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Librspamdclient\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# rspamc\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/libcryptobox/AsmOp.cmake" : {
      "ObjectId" : "bcf9d996a74397ee4a4781fe963f7996dd74b140",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check for assembler option specified\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libcryptobox/AsmOpt.cmake" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libcryptobox/CMakeLists.txt" : {
      "ObjectId" : "82a477a8adf298acd86f665ce68ad1c92596d32f",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For now we support only x86_64 architecture with optimizations\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle broken compilers, sigh...\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "src/libmime/CMakeLists.txt" : {
      "ObjectId" : "81d75d382780e6e75e47b9b6cb9211d4da903be9",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Librspamd mime\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libserver/CMakeLists.txt" : {
      "ObjectId" : "ccedbcdb39b098550507837d882289bb28f9f20d",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Librspamdserver\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Librspamd-server\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/libstat/CMakeLists.txt" : {
      "ObjectId" : "1019a99256294e6d9137e234992a39992549912b",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Librspamdserver\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libutil/CMakeLists.txt" : {
      "ObjectId" : "f86d650f020d181351e1d71e70f1086f56f4bba2",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Librspamd-util\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rspamdutil\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/lua/CMakeLists.txt" : {
      "ObjectId" : "0df179c52a2091b1254b9bf5d550959995049c59",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Lua support makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/rspamadm/CMakeLists.txt" : {
      "ObjectId" : "5be38aa2873d3e4028e644836d8c1a38a10972b9",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "10f0a19da866fefe99ee3b96c7a833aa7ef4bbff",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Also add dependencies for convenience\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "036365439375d74561de44f402fde0c00a082430",
      "LastModified" : "2019-04-06T11:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Redirector\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 55,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 3315
}