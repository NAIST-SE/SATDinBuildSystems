{
  "Repository" : "8293306",
  "Revision" : "HEAD",
  "ObjectId" : "2f5b556896ed45be0eb644b10005b8efe643929f",
  "CommitTime" : "2018-08-19T10:05:13Z",
  "Files" : {
    "docs/Makefile" : {
      "ObjectId" : "c4a63671ccbe565555bce2158edc0fc49c6d4912",
      "LastModified" : "2009-08-22T20:22:41Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Process DocBook to HTML\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This makefile is a bit obfuscated so that it works correctly on both\n\n# BSD and GNU make. Some parts apply to one version of make and not the\n\n# other; these are marked by comments.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The \"all\" target shouldn't be up here, but the trickery below defines\n\n# what looks like a rule to GNU make, and so we need to define the actual\n\n# default target before it.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use a GNU make \"define\" command, that looks like a harmless dummy rule\n\n# to BSD make, to hide parts of the Makefile from GNU make.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# seen by GNU make, not by BSD make\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# seen by BSD make, not by GNU make\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# neither .endif nor endef can be followed by a colon; each creates\n\n# warnings or errors in one or other version of make. we need some\n\n# magic to make them both work. Luckily, .endfor ignores the colon.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# $^ gives all sources on GNU make, and nothing on BSD make\n\n# $> gives all sources on BSD make, and nothing on GNU make\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# On BSD make, $> contains all sources and $^ is empty \n\n# On GNU make, $^ contains all sources and $> is empty\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# $^ gives all sources on GNU make, and nothing on BSD make\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# GNU make\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# GNU make\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# GNU make\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# GNU make\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# GNU make\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# BSD make: the final colon (:) is required to make the .for and .endfor\n\n# lines valid in GNU make. It creates (different) dummy rules in GNU and\n\n# BSD make. Both dummy rules are harmless.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "infrastructure/cmake/CMakeLists.txt" : {
      "ObjectId" : "5116e7ffa0e84adf73ad3f8749f4ac19117641ff",
      "LastModified" : "2018-04-01T20:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support Unix Makefiles and Ninja\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# We need to substitute TARGET_PERL in test/bbackupd/testfiles/bbackupd.conf, so define it\n\n# as a variable before running configure_file().\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If BOXBACKUP_VERSION is defined when running CMake (as the AppVeyor config does), use it\n\n# as-is, since it contains the full version number, branch, and platform (Win32/Win64):\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove CPACK_SYSTEM_NAME from the default CPACK_PACKAGE_NAME, because it's already\n\n# included in the CPACK_PACKAGE_VERSION:\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Work out the current Box version (requires Perl) and update lib/common/BoxVersion.h,\n\n# but only if it has changed, to avoid unnecessary complete rebuilds due to timestamps.\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Parsing Makefile.extra files in CMake script is a pain, so the relevant rules for\n\n# code-generating Perl scripts are hard-coded here.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We are replacing QDBM's normal build system, and we only want to include\n\n# the modules that we actually need, to avoid warnings about duplicate\n\n# definitions, and potential conflicts with Box Backup code in future, so\n\n# we specify the C files to compile in explicitly.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Rename the output executable from bin_bbackupd(.exe) to bbackupd(.exe):\n",
        "Line" : 234,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Use a custom post-build command instead of install(...) to install\n\n# binaries ready for running tests, because we don't want \"make install\" to\n\n# do this too, and absolute-path installations break the CPack generators.\n",
        "Line" : 238,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# For \"make install\" and CPack generators:\n",
        "Line" : 247,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Use a custom post-build command instead of install(...) to install\n\n# binaries ready for running tests, because we don't want \"make install\" to\n\n# do this too, and absolute-path installations break the CPack generators.\n",
        "Line" : 264,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# It helps with debugging if the test depends on another step which\n\n# prepares the target directory, and is always out of date.\n",
        "Line" : 299,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# message(STATUS \"add link library to '${module_name}': '${dependency}'\")\n",
        "Line" : 327,
        "CharPositionInLine" : 5
      },
      "13" : {
        "Text" : "# We can't make a binary depend on another binary, so we need to\n\n# add the dependency's directory directly to our include path.\n",
        "Line" : 331,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# We can't do anything conditional on CMAKE_BUILD_TYPE because that's not valid for multi-configuration\n\n# generators such as MSVC. We need to use a generator expression instead.\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Detect platform features and write BoxConfig.h.in. Reuse code from\n\n# infrastructure/m4/boxbackup_tests.m4 where possible\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# On Windows we want to statically link zlib to make debugging and distribution easier,\n\n# but FindZLIB.cmake doesn't offer that as an option, so we have to go through some\n\n# contortions to \"find\" the correct library. ZLIB_ROOT is required in this case.\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We must link against zlibstaticD if this is a debug build, otherwise\n\n# we have a C runtime mismatch (/MD versus /MDd) and the application\n\n# crashes at runtime.\n",
        "Line" : 393,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Link to OpenSSL\n\n# Workaround for incorrect library suffixes searched by FindOpenSSL:\n\n# https://gitlab.kitware.com/cmake/cmake/issues/17604\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Link to PCRE\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# You must use pkg-config. PCRE_ROOT is not used except on Win32.\n",
        "Line" : 455,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Get the values of all directories added to the INCLUDE_DIRECTORIES property\n\n# by include_directory() statements, and save it in CMAKE_REQUIRED_INCLUDES\n\n# which check_include_files() uses to set the include file search path:\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# message(STATUS \"CMAKE_REQUIRED_INCLUDES=${CMAKE_REQUIRED_INCLUDES}\")\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Save the original BoxConfig.cmake.h so that we can move it back later,\n\n# and not need to recompile everything.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# http://stackoverflow.com/questions/5272781/what-is-common-way-to-split-string-into-list-with-cmake\n",
        "Line" : 498,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# http://stackoverflow.com/questions/5272781/what-is-common-way-to-split-string-into-list-with-cmake\n",
        "Line" : 509,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "# http://stackoverflow.com/questions/5272781/what-is-common-way-to-split-string-into-list-with-cmake\n",
        "Line" : 520,
        "CharPositionInLine" : 3
      },
      "27" : {
        "Text" : "# http://stackoverflow.com/questions/5272781/what-is-common-way-to-split-string-into-list-with-cmake\n",
        "Line" : 536,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "# Build an intermediate version of BoxConfig.cmake.h for use in the following tests.\n",
        "Line" : 587,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# PCRE is required, so unconditionally define this:\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Emulate ax_check_mount_point.m4\n\n# These checks are run by multi-line M4 commands which are harder to parse/fake using\n\n# regexps above, so we hard-code them here:\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Emulate ax_random_device.m4\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Build an intermediate version of BoxConfig.cmake.h for use in the following tests:\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Emulate ax_func_syscall.m4: Autoconf's AC_CHECK_FUNC (which we emulate above,\n\n# using check_function_exists) defines the function when testing for its\n\n# presence, so HAVE___SYSCALL will be true even if __syscall has no definition\n\n# in the system libraries, and this is precisely the case that we want to test\n\n# for, so now we test whether a test program compiles with no explicit\n\n# definition (only the system headers) and if that fails, we set\n\n# HAVE___SYSCALL_NEED_DEFN to 1.\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Build an intermediate version of BoxConfig.cmake.h for use in the following tests:\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Build the final version of BoxConfig.cmake.h, as a temporary file.\n",
        "Line" : 806,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Move the original back into place, and then replace it with the\n\n# temporary one if different (which will force a rebuild of everything).\n",
        "Line" : 809,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Tell QDBM not to build itself as a DLL, because we want to link statically to it.\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Silence some less-useful warnings\n",
        "Line" : 821,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Define the location of the Perl executable, needed by testbackupstorefix\n",
        "Line" : 827,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Configure test timeouts:\n\n# I've set the timeout to 4 times as long as it took to run on a particular run on Appveyor:\n\n# https://ci.appveyor.com/project/qris/boxbackup/build/job/xm10itascygtu93j\n",
        "Line" : 832,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "infrastructure/cmake/FindReadline.cmake" : {
      "ObjectId" : "3ba4d21da7a0b45a2eeeb274e6d3a4672f73df19",
      "LastModified" : "2016-10-01T19:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# https://github.com/bro/cmake/blob/master/FindReadline.cmake\n\n#\n\n# Copyright (c) 1995-2015, The Regents of the University of California\n\n# through the Lawrence Berkeley National Laboratory and the\n\n# International Computer Science Institute. All rights reserved.\n\n# \n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n# \n\n# (1) Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# \n\n# (2) Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n# \n\n# (3) Neither the name of the University of California, Lawrence Berkeley\n\n#     National Laboratory, U.S. Dept. of Energy, International Computer\n\n#     Science Institute, nor the names of contributors may be used to endorse\n\n#     or promote products derived from this software without specific prior\n\n#     written permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n# \n\n# Note that some files in the distribution may carry their own copyright\n\n# notices.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find readline include dirs and libraries \n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Readline)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Readline_ROOT_DIR         Set this variable to the root installation of\n\n#                            readline if the module has problems finding the\n\n#                            proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  READLINE_FOUND            System has readline, include and lib dirs found\n\n#  Readline_INCLUDE_DIR      The readline include directories. \n\n#  Readline_LIBRARY          The readline library.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "infrastructure/cmake/windows/CMakeLists.txt" : {
      "ObjectId" : "49a1ea4d43e95da0f928dab290122616f6cf90c4",
      "LastModified" : "2018-01-02T21:13:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Automate the process of downloading, building and \"installing\" dependencies on Windows,\n\n# as used by AppVeyor.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Version of zlib to download, build, and compile Box Backup against:\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Hash of zlib-${ZLIB_VERSION}.tar.gz, to be verified after download:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Version of OpenSSL to download, build, and compile Box Backup against:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Hash of openssl-${OPENSSL_VERSION}.tar.gz, to be verified after download:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Version of PCRE to download, build, and compile Box Backup against:\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Hash of pcre-${PCRE_VERSION}.tar.gz, to be verified after download:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Version of Boost to download, unpack, and compile Box Backup against:\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Hash of the Boost download file, to be verified after download:\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We need to build both versions, debug and release, because cmake requires both to be\n\n# present to generate its multi-configuration project files for Visual Studio/MSBuild.\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Run tests before install, but don't make the main target depend on them, so that\n\n# we don't have to run them whenever we build manually on Windows.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# You would expect us to use nt.mak to compile a static library here, but mk1mf.pl uses the /MT[d]\n\n# CRT in that case, which is incompatible with our dynamic runtime, /MD[d]. It seems that the libs\n\n# built by ntdll.mak, which are compiled with /MD[d], are full libraries and not import libs,\n\n# so we can link statically against them and still get a dynamic runtime.\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Temporarily use SVN repo until the PCRE_STATIC issue in 8.40 is fixed:\n\n# https://vcs.pcre.org/pcre?view=revision&revision=1677\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# We need to build both versions, debug and release, because cmake requires both to be\n\n# present to generate its multi-configuration project files for Visual Studio/MSBuild.\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# DOWNLOAD_NO_PROGRESS 1\n\n# Disable automatic updating (untarring) as it's slow and not necessary\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 15
    },
    "test/win32/Makefile" : {
      "ObjectId" : "1212bc6f11b2b3e27b28249f15ff908901448272",
      "LastModified" : "2016-10-01T19:44:48Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 3,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2064
}