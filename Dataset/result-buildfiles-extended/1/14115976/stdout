{
  "Repository" : "14115976",
  "Revision" : "HEAD",
  "ObjectId" : "b22d878870de913dc15c46b3f2c35ee90d7689b2",
  "CommitTime" : "2019-03-24T11:32:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f5da2f40d7cbd99444e3c818f853fec7ba902d81",
      "LastModified" : "2019-03-24T11:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n## DOCTEST\n\n################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use a special hidden version of the header which directly includes the 2 parts - proper reporting of file/line locations during dev\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# add a custom target that assembles the single header when any of the parts are touched\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# hack to support building on XCode 6 and 7 - propagate the definition to everything\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################\n\n## TESTS/EXAMPLES/HELPERS\n\n################################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for code coverage we want exactly one binary to be produced and exercised\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################################################################################\n\n## PACKAGE SUPPORT\n\n################################################################################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/all_features/CMakeLists.txt" : {
      "ObjectId" : "2202648648fd0de71e4e59fbcb3097f5a525b3ce",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n## BUILD ALL EXAMPLE SOURCES INTO A SINGLE BINARY AND EXECUTE TESTS ON EACH FILE\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add the executable\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# easy way to fix test coverage - disable colors and crash handling\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# omit the version and the num test cases skipped from the summary - this way the output will change less often\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add per-file tests\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add this separately since it shouldn't have output compared to reference output - due to concurrency\n\n# not adding it for MinGW since it crashes when using mingw-w64-x86_64-8.1.0-release-posix-seh-rt_v6-rev0\n\n# (also disabled for old XCode builds on travis where there is no thread_local support and this is defined in the build matrix)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# duration: there is no output anyway\n",
        "Line" : 48,
        "CharPositionInLine" : 92
      },
      "7" : {
        "Text" : "# add this separately since the file has a non-straightforward path\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# queries\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# just to exercise the output option\n",
        "Line" : 57,
        "CharPositionInLine" : 71
      },
      "10" : {
        "Text" : "# options\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# print all binary asserts - for getAssertString()\n",
        "Line" : 64,
        "CharPositionInLine" : 69
      },
      "12" : {
        "Text" : "# abort after 2 assert fails and parse a negative\n\n# run a range\n",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "13" : {
        "Text" : "# should filter out all\n",
        "Line" : 67,
        "CharPositionInLine" : 59
      },
      "14" : {
        "Text" : "# should filter out all + print skipped\n",
        "Line" : 68,
        "CharPositionInLine" : 84
      },
      "15" : {
        "Text" : "# enter a specific subcase - sc1\n",
        "Line" : 69,
        "CharPositionInLine" : 88
      },
      "16" : {
        "Text" : "# exclude everything for no output\n",
        "Line" : 72,
        "CharPositionInLine" : 80
      },
      "17" : {
        "Text" : "################################################################################\n\n## VARIATION OF THE BUILD WITH DOCTEST DISABLED - SHOULD STILL COMPILE\n\n################################################################################\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# do not continue with the disabled example\n",
        "Line" : 79,
        "CharPositionInLine" : 13
      },
      "19" : {
        "Text" : "# TODO: think about fixing these in a different way! - see issue #61 or commit 6b61e8aa3818c5ea100cedc1bb48a60ea10df6e8\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# unreferenced local function has been removed\n\n# unreferenced formal parameter\n\n# local variable is initialized but not referenced\n",
        "Line" : 90,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 21
    },
    "examples/exe_with_static_libs/CMakeLists.txt" : {
      "ObjectId" : "c89621deb3573474707ddeef0dd86708295027b3",
      "LastModified" : "2019-03-02T19:08:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create object libraries instead of static libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# object libraries cannot \"link\" to any target so this is how we get the INTERFACE include directories of the doctest target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# alternatively we could create static libraries and use \"doctest_force_link_static_lib_in_target\"\n\n#add_library(lib_1 STATIC lib_1_src1.cpp lib_1_src2.cpp)\n\n#add_library(lib_2 STATIC lib_2_src.cpp)\n\n#add_executable(exe_with_static_libs main.cpp)\n\n#target_link_libraries(exe_with_static_libs lib_1)\n\n#target_link_libraries(exe_with_static_libs lib_2)\n\n#include(doctest_force_link_static_lib_in_target.cmake)\n\n#doctest_force_link_static_lib_in_target(exe_with_static_libs lib_1)\n\n#doctest_force_link_static_lib_in_target(exe_with_static_libs lib_2)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# group them together in a single folder inside IDEs\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/exe_with_static_libs/doctest_force_link_static_lib_in_target.cmake" : {
      "ObjectId" : "11925511faf78b776018d63fd5fe73759148ec95",
      "LastModified" : "2017-05-15T21:22:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# includes the file to the source with compiler flags\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get old flags\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# update flags\n",
        "Line" : 18,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# this is the magic function - forces every object file from the library to be linked into the target (dll or executable)\n\n# it doesn't work in 2 scenarios:\n\n# - either the target or the library uses a precompiled header - see the end of this issue for details: https://github.com/onqtam/doctest/issues/21\n\n# - either the target or the library is an imported target (pre-built) and not built within the current cmake tree\n\n# Alternatives:\n\n# - use CMake object libraries instead of static libraries - >> THIS IS ACTUALLY PREFERRED << to all this CMake trickery\n\n# - checkout these 2 repositories:\n\n#   - https://github.com/pthom/cmake_registertest\n\n#   - https://github.com/pthom/doctest_registerlibrary\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check if the library has generated dummy headers\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# figure out the paths and names of the dummy headers - should be in the build folder for the target\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# 'BINARY_DIR' target property unsupported before CMake 3.4 ...\n",
        "Line" : 47,
        "CharPositionInLine" : 54
      },
      "7" : {
        "Text" : "# create a dummy header for each source file, include a dummy function in it and include it in the source file\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# create the master dummy header\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# forward declare the dummy functions in the master dummy header\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# call the dummy functions in the master dummy header\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# set the dummy header property so we don't recreate the dummy headers the next time this macro is called for this library\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# if no library has been force linked to this target\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# add the library as force linked to this target\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# if this particular library hasn't been force linked to this target\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# add this library to the list of force linked libraries for this target\n",
        "Line" : 113,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# a utility function to create an executable for a static library with tests - as requested by https://github.com/pthom\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "examples/executable_dll_and_plugin/CMakeLists.txt" : {
      "ObjectId" : "31b5ed2fa13dc0904bbd2c23187f5a2486d2b541",
      "LastModified" : "2019-03-24T08:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# have the executable depend on the plugin so it gets built as well when building/starting only the executable\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# group them together in a single folder inside IDEs\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/installed_doctest_cmake/dll/CMakeLists.txt" : {
      "ObjectId" : "3fd9325c41d329a0c806149563a8a29ec1395ba2",
      "LastModified" : "2019-03-24T08:55:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/installed_doctest_cmake/executable/CMakeLists.txt" : {
      "ObjectId" : "6182a8a49d1bcf94019d3649e4be92f2bfbb8e22",
      "LastModified" : "2019-03-24T08:55:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/cmake/assemble_single_header.cmake" : {
      "ObjectId" : "980975491e1888d696612ddcfab809178425587f",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/cmake/common.cmake" : {
      "ObjectId" : "f8ad753fa8adc4c95b7cad1dfc4cc974cae07824",
      "LastModified" : "2019-03-24T08:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cache this for use inside of the function\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# construct the command that will be called by the exec_test.cmake script\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# append the argument for removing paths from filenames in the output so tests give the same output everywhere\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# append the argument for substituting source line numbers with 0 in the output so tests give the same output when lines change a bit\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# append the argument for ignoring the exit code of the test programs because some are intended to have failing tests\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# append the argument for using the same line format in the output - so gcc/non-gcc builds have the same output\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# a custom version of add_test() to suite my needs\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# no way to silence it in the expression decomposition macros: _Pragma() in macros doesn't work for the c++ front-end of g++\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55578\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69543\n\n# Also the warning is completely worthless nowadays - http://stackoverflow.com/questions/14016993\n\n#add_compiler_flags(-Waggregate-return)\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# needed for ccache integration on travis\n",
        "Line" : 151,
        "CharPositionInLine" : 63
      },
      "9" : {
        "Text" : "# for post c++14 updates in MSVC\n\n# force standard conformance - this is the better flag than /Za\n",
        "Line" : 155,
        "CharPositionInLine" : 39
      },
      "10" : {
        "Text" : "# turns on warnings from levels 1 through 4 which are off by default - https://msdn.microsoft.com/en-us/library/23k5d385.aspx\n",
        "Line" : 158,
        "CharPositionInLine" : 30
      },
      "11" : {
        "Text" : "# unreferenced inline function has been removed\n\n# SEH related\n\n# function not inlined\n\n# function 'x' selected for automatic inline expansion\n",
        "Line" : 161,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# invalid compiler warnings - https://msdn.microsoft.com/en-us/library/t7ab6xtd.aspx\n\n# invalid compiler warnings - https://msdn.microsoft.com/en-us/library/tacee08d.aspx\n",
        "Line" : 166,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "#/wd4820 # padding in structs\n\n#/wd4625 # copy constructor was implicitly defined as deleted\n\n#/wd4626 # assignment operator was implicitly defined as deleted\n\n#/wd5027 # move assignment operator was implicitly defined as deleted\n\n#/wd5026 # move constructor was implicitly defined as deleted\n\n#/wd4623 # default constructor was implicitly defined as deleted\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 14
    },
    "scripts/cmake/exec_test.cmake" : {
      "ObjectId" : "5dce94b65dbc52d6c3569e218352ee35f8ce97ec",
      "LastModified" : "2019-03-24T08:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Arguments:\n\n# - COMMAND: the command to run with all it's arguments\n\n# - TEST_MODE: NORMAL/VALGRIND/COLLECT/COMPARE\n\n# - TEST_OUTPUT_FILE: the file to/from which to write/read the output of the test\n\n# - TEST_TEMP_FILE: the temp file for the current test output used in COMPARE mode \n\n# To run something through this script use cmake like this:\n\n# cmake -DCOMMAND=path/to/my.exe -arg1 -arg2 -DTEST_MODE=VALGRIND -P path/to/exec_test.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(\"COMMAND: ${COMMAND}\")\n\n#message(\"TEST_MODE: ${TEST_MODE}\")\n\n#message(\"TEST_OUTPUT_FILE: ${TEST_OUTPUT_FILE}\")\n\n#message(\"TEST_TEMP_FILE: ${TEST_TEMP_FILE}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# fix line endings\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# fix line endings\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# file(READ ${TEST_OUTPUT_FILE} orig)\n\n# file(READ ${TEST_TEMP_FILE} temp)\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# message(\"==========================================================================\")\n\n# message(\"== CONTENTS OF ${TEST_OUTPUT_FILE}\")\n\n# message(\"==========================================================================\")\n\n# message(\"${orig}\")\n\n# message(\"==========================================================================\")\n\n# message(\"== CONTENTS OF ${TEST_TEMP_FILE}\")\n\n# message(\"==========================================================================\")\n\n# message(\"${temp}\")\n\n# message(\"==========================================================================\")\n\n# message(\"== CONTENTS END\")\n\n# message(\"==========================================================================\")\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "scripts/how_stuff_works/CMakeLists.txt" : {
      "ObjectId" : "308b212746bf77afbb89393435c3950c7c34531d",
      "LastModified" : "2017-05-15T21:22:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/playground/CMakeLists.txt" : {
      "ObjectId" : "38a258d03ce0ace4d7d2bbc77a39f48929abacbb",
      "LastModified" : "2019-03-24T08:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_custom_command(TARGET playground POST_BUILD COMMAND $<TARGET_FILE:${PROJECT_NAME}>)\n\n#add_custom_command(TARGET playground POST_BUILD COMMAND ctest -C $<CONFIGURATION> --output-on-failure)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 1417
}