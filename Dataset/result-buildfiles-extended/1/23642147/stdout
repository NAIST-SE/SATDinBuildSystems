{
  "Repository" : "23642147",
  "Revision" : "HEAD",
  "ObjectId" : "28523ff1ff33f18eaf8b04cc4e0f308826e1861a",
  "CommitTime" : "2018-03-17T03:13:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ac727930470063d0155ab6fccd4032c1f97e4350",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake_policy(SET CMP0022 NEW)\n\n#cmake_policy(SET CMP0023 NEW)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Project and semantic versioning.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# One variable that determines whether the current cmake process is being run\n\n# with the main Caffe2 library. This is useful for building modules - if\n\n# modules are built with the main Caffe2 library then one does not need to do\n\n# find caffe2 in the cmake script. One can usually guard it in some way like\n\n#    if (NOT CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO)\n\n#      find_package(Caffe2 REQUIRED)\n\n#    endif()\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Options.\n\n# Note to developers: if you add an option below, make sure you also add it to\n\n# cmake/Summary.cmake so that the summary prints out the option values.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CMake scripts + modules\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ CMake build directories\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Misc checks to cope with various compiler modes\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# External projects\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO: merge the following 3 files into cmake/public/utils.cmake.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set default build type\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ Dependencies\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Whitelist file if whitelist is specified\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ Set link flag, handle additional deps for gcc 4.8 and above\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ Build flags\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Eigen fails to build with some versions, so convert this to a warning\n\n# Details at http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1459\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Prefix path to Caffe2 headers.\n\n# If a directory containing installed Caffe2 headers was inadvertently\n\n# added to the list of include directories, prefixing\n\n# PROJECT_SOURCE_DIR means this source tree always takes precedence.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Prefix path to generated Caffe2 headers.\n\n# These need to take precedence over their empty counterparts located\n\n# in PROJECT_SOURCE_DIR.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ Old caffe protobuf.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ---[ Main build\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Documentation Option\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# check if Doxygen is installed\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# ---[ CMake related files\n\n# Uninistall option.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ---[ Make configuration files for cmake to allow dependent libraries\n\n# easier access to Caffe2.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO: check if we should include other cuda dependency libraries\n\n# to the interface as well.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Note(jiayq): when building static libraries, all PRIVATE dependencies\n\n# will also become interface libraries, and as a result if there are any\n\n# dependency libraries that are not exported, the following install export\n\n# script will fail. As a result, we will only provide the targets cmake\n\n# files for shared lib installation. For more info, read:\n\n# https://cmake.org/pipermail/cmake/2016-May/063400.html\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ---[ Modules\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ---[ Binaries\n\n# Binaries will be built after the Caffe2 main libraries and the modules\n\n# are built. For the binaries, they will be linked to the Caffe2 main\n\n# libraries, as well as all the modules that are built with Caffe2 (the ones\n\n# built in the previous Modules section above).\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "Makefile" : {
      "ObjectId" : "13755ce544c6e003392a6ac7b70e56aed3c2aec6",
      "LastModified" : "2017-04-25T00:17:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This makefile does nothing but delegating the actual building to cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This will remove ALL build folders.\n",
        "Line" : 15,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 2
    },
    "binaries/CMakeLists.txt" : {
      "ObjectId" : "dafabe2c29a1ede67647cb15242ec7458fca1cfb",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Core overhead benchmark\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# ---[ tutorials\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe/proto/CMakeLists.txt" : {
      "ObjectId" : "558c224f3cd8a967cd4cbada7722bf5c951c1b58",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/CMakeLists.txt" : {
      "ObjectId" : "a6bb12d41a60ec9ba82990e7fad92907dd1cf075",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Declare source file lists\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Add respective subdirectories\n\n# Note: the folders that are being commented out have not been properly\n\n# addressed yet.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_subdirectory(experiments) # note, we may remove this folder at some point\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(test) # todo: use caffe2_gtest_main instead of gtest_main because we will need to call GlobalInit\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Advanced: if we have white list specified, we will do intersections for all\n\n# main lib srcs.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Debug messages - if you want to get a list of source files, enable the\n\n# following.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Generate and install header files.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Write the macros file.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Installing the header files\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ List of libraries to link with\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Compile exposed libraries.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ CUDA library.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# A hack to deal with cuda library dependencies and modern CMake: the\n\n# CUDA_ADD_LIBRARY includes a target_link_libraries, and as a result,\n\n# one cannot use PUBLIC/PRIVATE/INTERFACE for the target anymore. This\n\n# hack adds the PRIVATE keywords to CUDA_LIBRARIES so we can deal with\n\n# it. We will then manually add the cudart library as interface libs.\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# ---[ Test binaries.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# For tests, some of the test code actually directly call the dependent\n\n# libraries even if they are not part of the public dependency libs. As a\n\n# result, we will explicitly link the test against the Caffe2 dependency\n\n# libs.\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Python site-packages\n\n# Get canonical directory for python site packages (relative to install\n\n# location).  It varys from system to system.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# ---[ Options.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Python extension suffix\n\n# Try to get from python through sysconfig.get_env_var('EXT_SUFFIX') first,\n\n# fallback to \".pyd\" if windows and \".so\" for all others.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# ---[ Python.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# If we are building under windows, we will copy the file from\n\n# build/caffe2/python/{Debug,Release}/caffe2_pybind11_state.pyd\n\n# to its parent folder so that we can do in-build execution.\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Finally, Copy all python files to build directory\n\n# Generate and create all needed __init__.py files, if they aren't already\n\n# present in the current source tree.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Create a custom target that copies all python files.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# ninja fails when the command line is too long so we split\n\n# the target into several. This would be beneficial for VS also\n\n# since it build targets in parallel but not custom commands\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# get_filename_component(name_we ${python_src} NAME_WE)\n",
        "Line" : 240,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Install commands\n\n# Pick up static python files\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Caffe proto files\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Caffe2 proto files\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Finally, set the Caffe2_MAIN_LIBS variable in the parent scope.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "caffe2/contrib/CMakeLists.txt" : {
      "ObjectId" : "ae0e5b2ab04d6851e4d7bea1b85edaf7b8c3d582",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finally pass the src lists back to the parent\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe2/contrib/aten/CMakeLists.txt" : {
      "ObjectId" : "29a0f6660e64e50c6b20c675d0efa719a96c3751",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/cuda-convnet2/cudaconv3/Makefile" : {
      "ObjectId" : "3d16e28bbbdaf3518c41275ca5e44565a29af18d",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# Copyright 1993-2012 NVIDIA Corporation.  All rights reserved.\n\n#\n\n# NOTICE TO USER:   \n\n#\n\n# This source code is subject to NVIDIA ownership rights under U.S. and \n\n# international Copyright laws.  \n\n#\n\n# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE \n\n# CODE FOR ANY PURPOSE.  IT IS PROVIDED \"AS IS\" WITHOUT EXPRESS OR \n\n# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH \n\n# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF \n\n# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.   \n\n# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, \n\n# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS \n\n# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE \n\n# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE \n\n# OR PERFORMANCE OF THIS SOURCE CODE.  \n\n#\n\n# U.S. Government End Users.  This source code is a \"commercial item\" as \n\n# that term is defined at 48 C.F.R. 2.101 (OCT 1995), consisting  of \n\n# \"commercial computer software\" and \"commercial computer software \n\n# documentation\" as such terms are used in 48 C.F.R. 12.212 (SEPT 1995) \n\n# and is provided to the U.S. Government only as a commercial end item.  \n\n# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through \n\n# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the \n\n# source code with only those rights set forth herein.\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of the CUDA Toolkit binaries and libraries\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common binaries\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CUDA code generation flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debug build flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add profiler output\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########## USER STUFF ###########\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################\n\n# Set up target and object files\n\n################################################################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Target rules\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/contrib/cuda-convnet2/cudaconvnet/Makefile" : {
      "ObjectId" : "2e1c1e7c70a64d997ba4447623bf60c3f859b17a",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# Copyright 1993-2012 NVIDIA Corporation.  All rights reserved.\n\n#\n\n# NOTICE TO USER:   \n\n#\n\n# This source code is subject to NVIDIA ownership rights under U.S. and \n\n# international Copyright laws.  \n\n#\n\n# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE \n\n# CODE FOR ANY PURPOSE.  IT IS PROVIDED \"AS IS\" WITHOUT EXPRESS OR \n\n# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH \n\n# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF \n\n# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.   \n\n# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, \n\n# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS \n\n# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE \n\n# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE \n\n# OR PERFORMANCE OF THIS SOURCE CODE.  \n\n#\n\n# U.S. Government End Users.  This source code is a \"commercial item\" as \n\n# that term is defined at 48 C.F.R. 2.101 (OCT 1995), consisting  of \n\n# \"commercial computer software\" and \"commercial computer software \n\n# documentation\" as such terms are used in 48 C.F.R. 12.212 (SEPT 1995) \n\n# and is provided to the U.S. Government only as a commercial end item.  \n\n# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through \n\n# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the \n\n# source code with only those rights set forth herein.\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of the CUDA Toolkit binaries and libraries\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common binaries\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CUDA code generation flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debug build flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add profiler output\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########## USER STUFF ###########\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################\n\n# Set up target and object files\n\n################################################################################\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Target rules\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/contrib/cuda-convnet2/make-data/pyext/Makefile" : {
      "ObjectId" : "7b7ae566102a8279d9905636b97f6060797189ce",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 2014 Google Inc. All rights reserved.\n\n# \n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n# \n\n#    http://www.apache.org/licenses/LICENSE-2.0\n\n# \n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/contrib/cuda-convnet2/nvmatrix/Makefile" : {
      "ObjectId" : "81b8dd4d4c2774ab2bb8dac348ce7f6881e04eb6",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# Copyright 1993-2012 NVIDIA Corporation.  All rights reserved.\n\n#\n\n# NOTICE TO USER:   \n\n#\n\n# This source code is subject to NVIDIA ownership rights under U.S. and \n\n# international Copyright laws.  \n\n#\n\n# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE \n\n# CODE FOR ANY PURPOSE.  IT IS PROVIDED \"AS IS\" WITHOUT EXPRESS OR \n\n# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH \n\n# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF \n\n# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.   \n\n# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL, \n\n# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS \n\n# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE \n\n# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE \n\n# OR PERFORMANCE OF THIS SOURCE CODE.  \n\n#\n\n# U.S. Government End Users.  This source code is a \"commercial item\" as \n\n# that term is defined at 48 C.F.R. 2.101 (OCT 1995), consisting  of \n\n# \"commercial computer software\" and \"commercial computer software \n\n# documentation\" as such terms are used in 48 C.F.R. 12.212 (SEPT 1995) \n\n# and is provided to the U.S. Government only as a commercial end item.  \n\n# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through \n\n# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the \n\n# source code with only those rights set forth herein.\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of the CUDA Toolkit binaries and libraries\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common binaries\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CUDA code generation flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debug build flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add profiler output\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########## USER STUFF ###########\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################\n\n# Set up target and object files\n\n################################################################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Target rules\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/contrib/cuda-convnet2/util/Makefile" : {
      "ObjectId" : "55aba16ce2e872e0a222c16a1afb226140d8d799",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 2014 Google Inc. All rights reserved.\n\n# \n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n# \n\n#    http://www.apache.org/licenses/LICENSE-2.0\n\n# \n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/contrib/gloo/CMakeLists.txt" : {
      "ObjectId" : "ff77e32a43a920a0a126ab624e70f3410455284f",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/nccl/CMakeLists.txt" : {
      "ObjectId" : "b2a0f9cebcc302ef57d75a972d153a2fc512eb96",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/nervana/CMakeLists.txt" : {
      "ObjectId" : "074ffb6675b70b1cdfeed57c5fde46df19048d47",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/prof/CMakeLists.txt" : {
      "ObjectId" : "a8960ba170b944279e87e639fe4f4a3a2edaaa3f",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/script/CMakeLists.txt" : {
      "ObjectId" : "dd16e992bebf991314f4bf613872c2c83042429a",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/contrib/shm_mutex/CMakeLists.txt" : {
      "ObjectId" : "3fd2e69b22307a2c442c01c3b65384382b4decb0",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/core/CMakeLists.txt" : {
      "ObjectId" : "dd16e992bebf991314f4bf613872c2c83042429a",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/cuda_rtc/CMakeLists.txt" : {
      "ObjectId" : "6bb289b79d72001731da477dc7a38801075b1831",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/db/CMakeLists.txt" : {
      "ObjectId" : "e96d6b79165a0b23479a512b21748a9128288ed8",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common files that are always going to be included.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DB specific files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/distributed/CMakeLists.txt" : {
      "ObjectId" : "41373ef2d503b5e62006b2651c808ce6c4728f7f",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common files that are always going to be included.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/image/CMakeLists.txt" : {
      "ObjectId" : "d6d4b621b4f994bc48a565cbe4950b5637858262",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "caffe2/mkl/CMakeLists.txt" : {
      "ObjectId" : "1b92eb07be4f4727aa98eabf16a95ca1a7203501",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ---[ CPU test files - currently none but just to be safe\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "caffe2/mobile/CMakeLists.txt" : {
      "ObjectId" : "de20a2780498acd24cbab9d7f327293f8d25a6b8",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/mobile/contrib/CMakeLists.txt" : {
      "ObjectId" : "29a35812bc4ecf5e5b8bfdb105840c3fa19ab651",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finally pass the src lists back to the parent\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe2/mobile/contrib/arm-compute/CMakeLists.txt" : {
      "ObjectId" : "f064601978aa573592dd2b9dc9996c562dd39fd2",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/arm-compute/core/CMakeLists.txt" : {
      "ObjectId" : "dbc170e14ec3de522021707a9135c6d644ba4be8",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/arm-compute/operators/CMakeLists.txt" : {
      "ObjectId" : "dbc170e14ec3de522021707a9135c6d644ba4be8",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/arm-compute/test/CMakeLists.txt" : {
      "ObjectId" : "480846c965cb32d466bf65d6549ea9edf790048d",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/ios/CMakeLists.txt" : {
      "ObjectId" : "36a87f87511b3daaa5650f391b472ce3eb75f8c5",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: figure out conflict between contrib/nnpack/nnpack_ops.cc and mobile_nnpack.cc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Basic ios srcs.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# \"${CMAKE_CURRENT_SOURCE_DIR}/mobile_nnpack.cc\"\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# metal/mpscnn files\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "caffe2/mobile/contrib/ios/mpscnn/CMakeLists.txt" : {
      "ObjectId" : "f426e41904f9eec7995d6943d7122cbc865c3edd",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# exclude test files\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "caffe2/mobile/contrib/libopencl-stub/Makefile" : {
      "ObjectId" : "c578003d8cac1bea41d699b539e242bd6bb3063d",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/nnapi/CMakeLists.txt" : {
      "ObjectId" : "403bbb8983e8198cf795e445b9559e1585ae6682",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/opengl/CMakeLists.txt" : {
      "ObjectId" : "f23de75d153a13635ae2a808ca780a8bce795a69",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/opengl/android/CMakeLists.txt" : {
      "ObjectId" : "9fe208528052b2880376e4824c454f371d3a6033",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/opengl/core/CMakeLists.txt" : {
      "ObjectId" : "dbc170e14ec3de522021707a9135c6d644ba4be8",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/opengl/ios/CMakeLists.txt" : {
      "ObjectId" : "88019616a686cf4dfccaae023647a6bac15b0602",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/opengl/operators/CMakeLists.txt" : {
      "ObjectId" : "dbc170e14ec3de522021707a9135c6d644ba4be8",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/snpe/CMakeLists.txt" : {
      "ObjectId" : "1f95801a81ddaea84a078ab06b1a6db72a48989e",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mpi/CMakeLists.txt" : {
      "ObjectId" : "796b8f7450df192ebd29041d4e430de31f251f8d",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: properly compile this together with python.\n\n# \"${CMAKE_CURRENT_SOURCE_DIR}/mpi_python.cc\"\n",
        "Line" : 5,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# pass up to calling script\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "caffe2/observers/CMakeLists.txt" : {
      "ObjectId" : "9d0b01ed535002fdefdfa4251150b56ada52e92f",
      "LastModified" : "2018-03-06T22:45:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "caffe2/onnx/CMakeLists.txt" : {
      "ObjectId" : "14864dfe06fd80ba0b8ec81d348ebd07c4f99393",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/operators/CMakeLists.txt" : {
      "ObjectId" : "ad8852c955061d977519b2b08af3feda5fb6f2bc",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n\n# ------[ cuDNN\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "caffe2/perfkernels/CMakeLists.txt" : {
      "ObjectId" : "a69d6b3a1cbe6ab214db5b91a3b93137de83c1a8",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# exclude avx and avx2 srcs from common_srcs\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We will always build common srcs.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We will only build the perf kernel files if the compiler supports avx2\n\n# extensions.\n\n# Currently MSVC seems to have a symbol not found error while linking (related\n\n# to source file order?). As a result we will currently disable the perfkernel\n\n# in msvc.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO(jiayq): currently, we only implement the very base files for the\n\n# perfkernels. This is because to implement avx and avx2 files, we actually\n\n# need to set up different compilation units and this is a bit more involving\n\n# in terms of CMakefile changes. This is a stop-gap solution until we get a\n\n# more proper implementation.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "caffe2/proto/CMakeLists.txt" : {
      "ObjectId" : "aeb64a0f2b7d64fd84f219a8038fbbe5d374eeec",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/python/CMakeLists.txt" : {
      "ObjectId" : "6119e63e0565e2a242288272545297c8f0e95bd2",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ GPU files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/queue/CMakeLists.txt" : {
      "ObjectId" : "dd16e992bebf991314f4bf613872c2c83042429a",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/sgd/CMakeLists.txt" : {
      "ObjectId" : "dd16e992bebf991314f4bf613872c2c83042429a",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "caffe2/share/CMakeLists.txt" : {
      "ObjectId" : "73fd22b0821d7023db6f26d2d94902c562996a24",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There is a linking issue that happens in some of the Windows builds.\n\n# TODO(Yangqing): after the module redesing, enable this back.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe2/share/contrib/CMakeLists.txt" : {
      "ObjectId" : "a8db5c0a174010194762225094347e2a8e7ac304",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/share/contrib/nnpack/CMakeLists.txt" : {
      "ObjectId" : "90356ad995334e70e2fbd7474cfee0ae6afd6bd1",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/share/contrib/zstd/CMakeLists.txt" : {
      "ObjectId" : "dbc170e14ec3de522021707a9135c6d644ba4be8",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/transforms/CMakeLists.txt" : {
      "ObjectId" : "48e61ec4f064e8b9e229d5dbbd032bb9b476193f",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Get non-tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# exclude test files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Get tests\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "caffe2/utils/CMakeLists.txt" : {
      "ObjectId" : "157c09c6ff6736eafae1fb9b80547df773a3a4bf",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ threadpool/pthreadpool* is a local modification of the NNPACK\n\n# pthreadpool with a very similar interface. Neither NNPACK, nor this\n\n# thread pool supports Windows.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ Printing stack traces requires dladdr\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "caffe2/video/CMakeLists.txt" : {
      "ObjectId" : "a54fb8ca72ec9a4f3f471a47ce2134c20bd8a18a",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/BuildVariables.cmake" : {
      "ObjectId" : "89edb63b599eef455326a67658cb7fc3a2946625",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Declare variables that we are going to use across the Caffe2 build.\n\n# This file defines common, Caffe2-wide variables that we use to collect\n\n# source files and other things. Each variable is annotated with their\n\n# intended uses.\n\n# Note that adding and / or deleting these variables usually involves\n\n# changing the whole build system, so make sure you send a PR early if you\n\n# want to change them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Caffe2_{CPU,GPU}_SRCS is the list that will have all the related source\n\n# files for CPU and GPU respectively. They will be filled with the\n\n# CMakeLists.txt files under each folder respectively.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Caffe2_{CPU,GPU}_TEST_SRCS is the list that will have all the related source\n\n# files for CPU and GPU tests respectively.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Caffe2_MAIN_LIBS is a list of the libraries that a dependent library should\n\n# depend on when it links against Caffe2.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Lists for Caffe2 dependency libraries, for CPU and CUDA respectively.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This variable contains dependency libraries of Caffe2 which requires whole\n\n# symbol linkage. One example is the onnx lib where we need all its schema \n\n# symbols. However, if the lib is whole linked in caffe2 lib, we don't want \n\n# it to be linked in binaries that will link caffe2 lib. Because if caffe2 lib\n\n# is built as dynamic library, it will result in two copied of symbols of \n\n# Caffe2_DEPENDENCY_WHOLE_LINK_LIBS existing in caffe2.so and the binary, which\n\n# will cause issues. Therefore Caffe2_DEPENDENCY_WHOLE_LINK_LIBS will only\n\n# be linked by caffe2 lib. \n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Lists for Caffe2 public dependency libraries. These libraries will be\n\n# transitive to any libraries that depends on Caffe2.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List of modules that is built as part of the main Caffe2 build. For all\n\n# binary targets, such as Python and native binaries, they will be linked\n\n# automatically with these modules.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "3d76657952bd3bd68a72631495b983411b9b284e",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Custom Protobuf\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Threads\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ protobuf\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ git: used to generate git build string.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ BLAS\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Eigen is header-only and we do not have any dependent libraries\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Directory where NNPACK and cpuinfo will download and build all dependencies\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ NNPACK\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ NNPACK is being built together with Caffe2: explicitly specify dependency\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# ---[ Caffe2 uses cpuinfo library in the thread pool\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We build static version of cpuinfo but link\n\n# them into a shared library for Caffe2, so they need PIC.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ---[ gflags\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ Google-glog\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ Googletest and benchmark\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We will build gtest as static libs and embed it directly into the binary.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For gtest, we will simply embed it into our test binaries, so we won't\n\n# need to install it.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# We currently don't need gmock right now.\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# For Windows, we will check the runtime used is correctly passed in.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# We will not need to test benchmark lib itself.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# We will not need to install benchmark since we link it statically.\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Recover the build shared libs option.\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# ---[ LMDB\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ---[ LevelDB\n\n# ---[ Snappy\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ---[ NUMA\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ---[ ZMQ\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ---[ Redis\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ---[ OpenCV\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# OpenCV 3\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# OpenCV 2\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# ---[ FFMPEG\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# ---[ EIGEN\n\n# Due to license considerations, we will only use the MPL2 parts of Eigen.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# ---[ Python + Numpy\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Observers are required in the python build\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# ---[ pybind11\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ---[ MPI\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ---[ OpenMP\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ---[ Android specific ones\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ---[ CUDA\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# A helper variable recording the list of Caffe2 dependent librareis\n\n# caffe2::cudart is dealt with separately, due to CUDA_ADD_LIBRARY\n\n# design reason (it adds CUDA_LIBRARIES itself).\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# ---[ NCCL\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ---[ CUB\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Temporarily override variables to avoid building Gloo tests/benchmarks\n",
        "Line" : 412,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# Here is a little bit hacky. We have to put PROJECT_BINARY_DIR in front\n\n# of PROJECT_SOURCE_DIR with/without conda system. The reason is that\n\n# gloo generates a new config.h in the binary diretory.\n",
        "Line" : 418,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Add explicit dependency if NCCL is built from third_party.\n\n# Without dependency, make -jN with N>1 can fail if the NCCL build\n\n# hasn't finished when CUDA targets are linked.\n",
        "Line" : 426,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Pick the right dependency depending on USE_CUDA\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# ---[ profiling\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# ---[ ARM Compute Library: check compatibility.\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# 32-bit ARM (armv7, armv7-a, armv7l, etc)\n",
        "Line" : 469,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# 64-bit ARM\n",
        "Line" : 472,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# ---[ ARM Compute Library: build the target.\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# ---[ Onnx\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# We will build onnx as static libs and embed it directly into the binary.\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Recover the build shared libs option.\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "cmake/External/nccl.cmake" : {
      "ObjectId" : "5725c1cc95f4c61358b4f1d83ef6a1222b3f0985",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# try the system-wide nccl first\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# build directory\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# we build nccl statically, but want to link it into the caffe shared library\n\n# this requires position-independent code\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The following old-style variables are set so that other libs, such as Gloo,\n\n# can still use it.\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/External/nnpack.cmake" : {
      "ObjectId" : "988e8c335fd59082733ce03f875ea1400b6ba3ac",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# try any external nnpack first\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Custom build rules to build nnpack, if external dependency is not found \n\n##############################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# (1) MSVC - unsupported \n\n##############################################################################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# (2) Anything but x86, x86-64, ARM, ARM64 - unsupported\n\n##############################################################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# (3) Android, iOS, Linux, macOS - supported\n\n##############################################################################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Directories for NNPACK dependencies submoduled in Caffe2\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# We build static versions of nnpack and pthreadpool but link\n\n# them into a shared library for Caffe2, so they need PIC.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "##############################################################################\n\n# (4) Catch-all: not supported.\n\n##############################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/MiscCheck.cmake" : {
      "ObjectId" : "ce18bb095747158a5497c1a19c5a1a2490f0477f",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ If running on Ubuntu, check system version and compiler version.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Check if the data type long and int32_t/int64_t overlap.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Check if std::exception_ptr is supported.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Check for NUMA support\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Check if we want to turn off deprecated warning due to glog.\n\n# Note(jiayq): on ubuntu 14.04, the default glog install uses ext/hash_set that\n\n# is being deprecated. As a result, we will test if this is the environment we\n\n# are building under. If yes, we will turn off deprecation warning for a\n\n# cleaner build output.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Check if the compiler has AVX/AVX2 support. We only check AVX2.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Currently MSVC seems to have a symbol not found error while linking (related\n\n# to source file order?). As a result we will currently disable the perfkernel\n\n# in msvc.\n\n# Also see CMakeLists.txt under caffe2/perfkernels.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ If we are using msvc, set no warning flags\n\n# Note(jiayq): if you are going to add a warning flag, check if this is\n\n# totally necessary, and only add when you see fit. If it is needed due to\n\n# a third party library (like Protobuf), mention it in the comment as\n\n# \"THIRD_PARTY_NAME related\"\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##########################################\n\n# Protobuf related. Cannot remove.\n\n# This is directly copied from\n\n#     https://github.com/google/protobuf/blob/master/cmake/README.md\n\n##########################################\n",
        "Line" : 152,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# 'expression' : signed/unsigned mismatch\n\n# (3): switch with default but no case.\n\n# unary minus operator applied to unsigned type, result still unsigned\n\n# Conversion from 'type1' to 'type2', possible loss of data.\n\n# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# Conversion from 'size_t' to 'type', possible loss of data.\n\n# 'identifier' : truncation from 'type1' to 'type2'\n\n# 'this' : used in base member initializer list\n\n# (1): no definition for inline function. Protobuf related.\n\n# No suitable definition provided for explicit template instantiation request\n\n# 'type' : forcing value to bool 'true' or 'false' (performance warning)\n\n# 'function': was declared deprecated\n",
        "Line" : 157,
        "CharPositionInLine" : 14
      },
      "10" : {
        "Text" : "##########################################\n\n# Third party related. Cannot remove.\n\n##########################################\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# (1): inline used twice. google benchmark related.\n\n# (1): decorated name length exceeded, name was truncated.\n\n#      Eigen related.\n\n# (3): check operator precedence for possible error.\n\n# Eigen related.\n\n# (1): Unsafe mix of types in gtest/gtest.h. Gtest related.\n",
        "Line" : 172,
        "CharPositionInLine" : 14
      },
      "12" : {
        "Text" : "##########################################\n\n# These are directly Caffe2 related. However, several are covered by\n\n# protobuf now. We leave them here for documentation purposes only.\n\n##########################################\n\n#/wd4018 # (3): Signed/unsigned mismatch. We've used it in many places\n\n#        #      of the code and it would be hard to correct all.\n\n#/wd4244 # (2/3/4): Possible loss of precision. Various cases where we\n\n#        #      implicitly cast TIndex to int etc. Need cleaning.\n\n#/wd4267 # (3): Conversion of size_t to smaller type. Same as 4244.\n\n#/wd4996 # (3): Use of deprecated POSIX functions. Since we develop\n\n#        #      mainly on Linux, this is ignored.\n",
        "Line" : 178,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# (1): inconsistent dll linkage. This is related to the\n\n#      caffe2 FLAGS_* definition using dllimport in header and\n\n#      dllexport in cc file. The strategy is copied from gflags.\n",
        "Line" : 189,
        "CharPositionInLine" : 14
      },
      "14" : {
        "Text" : "# Exception handing for compiler warining C4530, see\n\n# https://msdn.microsoft.com/en-us/library/2axwkyt4.aspx\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ---[ If we are building on ios, or building with opengl support, we will\n\n# enable -mfpu=neon-fp16 for iOS Metal build. For Android, this fpu setting\n\n# is going to be done with android-cmake by setting\n\n#     -DANDROID_ABI=\"armeabi-v7a with NEON FP16\"\n\n# in the build command.\n\n# Also, we will turn off deprecated-declarations\n\n# due to protobuf.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ If we are building with ACL, we will enable neon-fp16.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# 32-bit ARM (armv7, armv7-a, armv7l, etc)\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Compilers for 32-bit ARM need extra flags to enable NEON-FP16\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# ---[ If we use asan, turn on the flags.\n\n# TODO: This only works with new style gcc and clang (not the old -faddress-sanitizer).\n\n# Change if necessary on old platforms.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ---[ Create CAFFE2_BUILD_SHARED_LIBS for macros.h.in usage.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ---[ Check if we will need to include the local Modules_CUDA_fix folder.\n\n# Add your conditions here if needed.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We know that VS2017 needs the new FindCUDA functionality, so we will\n\n# simply enable it for the whole Windows build.\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 23
    },
    "cmake/Modules/FindAtlas.cmake" : {
      "ObjectId" : "9c665a47bd58040c5fbce118ac13ee0ede7aac16",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Atlas (and Lapack) libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Atlas_ROOT_DIR:            Base directory where all Atlas components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  Atlas_FOUND\n\n#  Atlas_INCLUDE_DIRS\n\n#  Atlas_LIBRARIES\n\n#  Atlas_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindBenchmark.cmake" : {
      "ObjectId" : "e6420a5eced83f995ef74b5e419692d011bbfd20",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Google Benchmark library and headers.\n\n#  Benchmark_FOUND        - system has benchmark lib\n\n#  Benchmark_INCLUDE_DIRS - the benchmark include directory\n\n#  Benchmark_LIBRARIES    - libraries needed to use benchmark\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCUB.cmake" : {
      "ObjectId" : "8a68d7cf43265917425add5b5a19837527dd6b53",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the CUB library and headers.\n\n#  CUB_FOUND        - system has CUB\n\n#  CUB_INCLUDE_DIRS - the CUB include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindFFmpeg.cmake" : {
      "ObjectId" : "ac5f3acd7fd5958587314d36b69a8a63f6bb32e2",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ffmpeg libraries\n\n#     (libavcodec, libavformat, libavutil, libswscale)\n\n# Once done this will define\n\n#\n\n# FFMPEG_FOUND - system has ffmpeg or libav\n\n# FFMPEG_INCLUDE_DIR - the ffmpeg include directory\n\n# FFMPEG_LIBRARIES - Link these to use ffmpeg\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGloo.cmake" : {
      "ObjectId" : "1816dd8774581c50dc1a3100f11c7c9463316cfb",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Gloo library and headers.\n\n#  Gloo_FOUND        - system has Gloo lib\n\n#  Gloo_INCLUDE_DIRS - the Gloo include directory\n\n#  Gloo_LIBRARIES    - libraries needed to use Gloo\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use the CUDA library depending on the Gloo_USE_CUDA variable\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# else try to use the CUDA library if found\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindHiredis.cmake" : {
      "ObjectId" : "b9cb69b69a8db78c6ce4ca2fc573e7bb1b365f6d",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Hiredis libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  HIREDIS_ROOT_DIR:    Base directory where all Hiredis components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  HIREDIS_FOUND\n\n#  Hiredis_INCLUDE_DIR\n\n#  Hiredis_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLAPACK.cmake" : {
      "ObjectId" : "9641c45d196d69bf3b0cea7191bcb55a2252d2da",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface is found\n\n#  LAPACK_LIBRARIES - list of libraries (using full path name) for LAPACK\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: I do not think it is a good idea to mixup different BLAS/LAPACK versions\n\n# Hence, this script wants to find a Lapack library matching your Blas library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Old search lapack script\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Intel MKL\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# OpenBlas\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# GotoBlas\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ACML\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Accelerate\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# vecLib\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Modules/FindLMDB.cmake" : {
      "ObjectId" : "2f0adb1b6d608025480a0b19130e0f68af43888a",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the LMBD libraries and headers\n\n#  LMDB_FOUND - system has LMDB lib\n\n#  LMDB_INCLUDE_DIR - the LMDB include directory\n\n#  LMDB_LIBRARIES - Libraries needed to use LMDB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCWD based on FindGMP by:\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adapted from FindCWD by:\n\n# Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>\n\n# Aug 31, 2013\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLevelDB.cmake" : {
      "ObjectId" : "320c246b5549cb2d2be2498814935cc29293109c",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LevelDB\n\n#\n\n#  LevelDB_INCLUDES  - List of LevelDB includes\n\n#  LevelDB_LIBRARIES - List of libraries when using LevelDB.\n\n#  LevelDB_FOUND     - True if LevelDB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# caffe_clear_vars(__line __version_lines)\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindMKL.cmake" : {
      "ObjectId" : "c8e27768e180fba13d6947a99dd6a05075b7c7a5",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the MKL libraries\r\n\n#\r\n\n# Options:\r\n\n#\r\n\n#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\r\n\n#   MKL_USE_STATIC_LIBS             : use static libraries\r\n\n#   MKL_MULTI_THREADED              : use multi-threading\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n#   MKL_FOUND            : True mkl is found\r\n\n#   MKL_INCLUDE_DIR      : unclude directory\r\n\n#   MKL_LIBRARIES        : the libraries to link against.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Options\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Root folders\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Find include dir\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Find libraries\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindMatlabMex.cmake" : {
      "ObjectId" : "28ae65e7cbbae0a28768323dcdd4d6984fca5643",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module looks for MatlabMex compiler\n\n# Defines variables:\n\n#    Matlab_DIR    - Matlab root dir\n\n#    Matlab_mex    - path to mex compiler\n\n#    Matlab_mexext - path to mexext\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress `readlink` warning if `which` returned nothing\n",
        "Line" : 29,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindNCCL.cmake" : {
      "ObjectId" : "afcbb4b539d3ff504302725b57b4f2adffe3f1f0",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the nccl libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  NCCL_ROOT_DIR: Base directory where all NCCL components are found\n\n#  NCCL_INCLUDE_DIR: Directory where NCCL header is found\n\n#  NCCL_LIB_DIR: Directory where NCCL library is found\n\n#\n\n# The following are set after configuration is done:\n\n#  NCCL_FOUND\n\n#  NCCL_INCLUDE_DIRS\n\n#  NCCL_LIBRARIES\n\n#\n\n# The path hints include CUDA_TOOLKIT_ROOT_DIR seeing as some folks\n\n# install NCCL in the same location as the CUDA toolkit.\n\n# See https://github.com/caffe2/caffe2/issues/1601\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNNPACK.cmake" : {
      "ObjectId" : "6a9fff3ac0688004d996626584e74993246b9534",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find NNPACK\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  NNPACK_ROOT_DIR:            Base directory where all NNPACK components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  NNPACK_FOUND\n\n#  NNPACK_INCLUDE_DIRS\n\n#  NNPACK_LIBRARIES\n\n#  NNPACK_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNumPy.cmake" : {
      "ObjectId" : "a671494cababa39534b4ac1a8d506bbaba76d8b6",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n#  NUMPY_FOUND               - was NumPy found\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\n\n#  NUMPY_INCLUDE_DIR         - path to the NumPy include files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNuma.cmake" : {
      "ObjectId" : "63fbe9014c160454bcf284e286100eae4c11b698",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Numa libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  NUMA_ROOT_DIR:    Base directory where all Numa components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  NUMA_FOUND\n\n#  Numa_INCLUDE_DIR\n\n#  Numa_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindOpenBLAS.cmake" : {
      "ObjectId" : "70574ab95b0f07b58b25071b5f274cd1cf0311bb",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindRocksDB.cmake" : {
      "ObjectId" : "e33bcce2f85faddd987511222a2076ce31ab26bb",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the RocksDB libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  ROCKSDB_ROOT_DIR:    Base directory where all RocksDB components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  ROCKSDB_FOUND\n\n#  RocksDB_INCLUDE_DIR\n\n#  RocksDB_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindSnappy.cmake" : {
      "ObjectId" : "77fd32b85a710cd4ca6ef5862109d07c8bc4efc5",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Snappy libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  SNAPPY_ROOT_DIR:    Base directory where all Snappy components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  SNAPPY_FOUND\n\n#  Snappy_INCLUDE_DIR\n\n#  Snappy_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindZMQ.cmake" : {
      "ObjectId" : "5522190f50f2516d8cd3db57c5cf66e2f032f003",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the ZMQ libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  ZMQ_ROOT_DIR:    Base directory where all ZMQ components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  ZMQ_FOUND\n\n#  ZMQ_INCLUDE_DIR\n\n#  ZMQ_LIBRARIES\n\n#  ZMQ_VERSION_MAJOR \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/Findpybind11.cmake" : {
      "ObjectId" : "056ed1eab0475f25041d4f836e0f39d0fd11d814",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the pybind11 library and headers.\n\n#  pybind11_FOUND        - system has pybind11\n\n#  pybind11_INCLUDE_DIRS - the pybind11 include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindvecLib.cmake" : {
      "ObjectId" : "460433673626320a366d9c8bd76d9c412094947d",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the vecLib libraries as part of Accelerate.framework or as standalon framework\n\n#\n\n# The following are set after configuration is done:\n\n#  VECLIB_FOUND\n\n#  vecLib_INCLUDE_DIR\n\n#  vecLib_LINKER_LIBS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules_CUDA_fix/FindCUDA.cmake" : {
      "ObjectId" : "8a46192d5be7ff1aa9f3b467e90f1ca2bdd0500b",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# .. note::\n\n#\n\n#   The FindCUDA module has been superseded by first-class support\n\n#   for the CUDA language in CMake.  It is no longer necessary to\n\n#   use this module or call ``find_package(CUDA)``.  This module\n\n#   now exists only for compatibility with projects that have not\n\n#   been ported.\n\n#\n\n#   Instead, list ``CUDA`` among the languages named in the top-level\n\n#   call to the :command:`project` command, or call the\n\n#   :command:`enable_language` command with ``CUDA``.\n\n#   Then one can add CUDA (``.cu``) sources to programs directly\n\n#   in calls to :command:`add_library` and :command:`add_executable`.\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on Linux,\n\n# Windows, and macOS and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard :command:`find_package` arguments of\n\n# ``<VERSION>``, ``REQUIRED`` and ``QUIET``.  ``CUDA_FOUND`` will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify ``CUDA_TOOLKIT_ROOT_DIR`` if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and ``REQUIRED`` is specified to :command:`find_package`.  To use\n\n# a different installed version of the toolkit set the environment variable\n\n# ``CUDA_BIN_PATH`` before running cmake (e.g.\n\n# ``CUDA_BIN_PATH=/usr/local/cuda1.0`` instead of the default\n\n# ``/usr/local/cuda``) or set ``CUDA_TOOLKIT_ROOT_DIR`` after configuring.  If\n\n# you change the value of ``CUDA_TOOLKIT_ROOT_DIR``, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set ``CUDA_TOOLKIT_ROOT_DIR`` manually on certain\n\n# platforms, or to use a CUDA runtime not installed in the default\n\n# location.  In newer versions of the toolkit the CUDA library is\n\n# included with the graphics driver -- be sure that the driver version\n\n# matches what is needed by the CUDA runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# ``CUDA_ADD_EXECUTABLE``, ``CUDA_ADD_LIBRARY``, ``CUDA_COMPILE``,\n\n# ``CUDA_COMPILE_PTX``, ``CUDA_COMPILE_FATBIN``, ``CUDA_COMPILE_CUBIN``\n\n# or ``CUDA_WRAP_SRCS``::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_LINK_LIBRARIES_KEYWORD (Default \"\")\n\n#    -- The <PRIVATE|PUBLIC|INTERFACE> keyword to use for internal\n\n#       target_link_libraries calls. The default is to use no keyword which\n\n#       uses the old \"plain\" form of target_link_libraries. Note that is matters\n\n#       because whatever is used inside the FindCUDA module must also be used\n\n#       outside - the two forms of target_link_libraries cannot be mixed.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets,\n\n#      the host compiler is constructed with one or more visual studio macros\n\n#      such as $(VCInstallDir), that expands out to the path when\n\n#      the command is run from withing VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\n\n#                             Required for separable compilation.\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5 - 8.0.\n\n#   CUDA_nppial_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicom_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppidei_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppif_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppig_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppim_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppist_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppisu_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppitc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 451,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 463,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 472,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 474,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 476,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 481,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 486,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 492,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 551,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Single config generators like Makefiles or Ninja don't usually have\n\n# CMAKE_CONFIGURATION_TYPES defined (but note that it can be defined if set by\n\n# projects or developers). Even CMAKE_BUILD_TYPE might not be defined for\n\n# single config generators (and should not be defined for multi-config\n\n# generators). To ensure we get a complete superset of all possible\n\n# configurations, we combine CMAKE_CONFIGURATION_TYPES, CMAKE_BUILD_TYPE and\n\n# all of the standard configurations, then weed out duplicates with\n\n# list(REMOVE_DUPLICATES). Looping over the unique set then ensures we have\n\n# each configuration-specific set of nvcc flags defined and marked as advanced.\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 615,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 617,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 663,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\n",
        "Line" : 675,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 685,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 702,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 705,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 708,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 722,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 732,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 740,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compute the version.\n",
        "Line" : 754,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 761,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 767,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 772,
        "CharPositionInLine" : 21
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 795,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 799,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 811,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 829,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 832,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 846,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 866,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 872,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 889,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 898,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 904,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 911,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 921,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 929,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 938,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 955,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 962,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In CUDA 9.0 NPP was nppi was removed\n",
        "Line" : 975,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# In CUDA 5.5 NPP was split into 3 separate libraries.\n",
        "Line" : 990,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 999,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 1011,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 1023,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1035,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 1037,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1050,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 1056,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 1062,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1077,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1108,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "##############################################################################\n",
        "Line" : 1117,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1123,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1147,
        "CharPositionInLine" : 8
      },
      "96" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1154,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1160,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1165,
        "CharPositionInLine" : 8
      },
      "99" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1176,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1195,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1221,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1225,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1236,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1239,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1241,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1243,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1245,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1248,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1254,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1257,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1275,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1277,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1287,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1291,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Emulation.\n",
        "Line" : 1293,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1296,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# various macros from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# _CUDA_MSVC_HOST_COMPILER\n",
        "Line" : 1322,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1332,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1342,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1345,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1354,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1359,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1364,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1374,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1377,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# STATIC\n",
        "Line" : 1383,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1389,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1391,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1397,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1406,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1409,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1413,
        "CharPositionInLine" : 6
      },
      "134" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1433,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1439,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1444,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1456,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1459,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1462,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1464,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1471,
        "CharPositionInLine" : 6
      },
      "142" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1494,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1502,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1515,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1533,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1544,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1548,
        "CharPositionInLine" : 31
      },
      "148" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1552,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1564,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1567,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1574,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1582,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1589,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1606,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1619,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1622,
        "CharPositionInLine" : 8
      },
      "157" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1626,
        "CharPositionInLine" : 8
      },
      "158" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1640,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1645,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1653,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1668,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1674,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1686,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1692,
        "CharPositionInLine" : 27
      },
      "165" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1697,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1705,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1709,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1717,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1722,
        "CharPositionInLine" : 6
      },
      "170" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1732,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1739,
        "CharPositionInLine" : 4
      },
      "172" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1744,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1750,
        "CharPositionInLine" : 6
      },
      "174" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1784,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1793,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1796,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1801,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Add the library.\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1812,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1827,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1837,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1846,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1848,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1851,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# Add the library.\n",
        "Line" : 1855,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1862,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1871,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1881,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 1887,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1898,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1901,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1909,
        "CharPositionInLine" : 0
      },
      "193" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1918,
        "CharPositionInLine" : 0
      },
      "194" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1927,
        "CharPositionInLine" : 0
      },
      "195" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1936,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1946,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1959,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1972,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1978,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1989,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 201
    },
    "cmake/Modules_CUDA_fix/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "580f24a400d8c5662ec572c4631db9e3e47645d9",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Extra output\n\n#\n\n# input_file:FILEPATH=<>   Path to dependency file in makefile format\n\n#\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/Modules_CUDA_fix/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/Modules_CUDA_fix/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "6fc2439ad8d47846e27dfac976e2d078c7887562",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 64,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 66,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 67,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 71,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 74,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 77,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 78,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in lua quotes see #16510 ).\n",
        "Line" : 79,
        "CharPositionInLine" : 75
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 80,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 81,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Note that this will remove all occurrences of -G.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invocation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Generate the code\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 53
    },
    "cmake/Modules_CUDA_fix/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "b604a179043d992717adb6ceeff60a4a14d327b7",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 187,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 191,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cmake/Modules_CUDA_fix/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "67f6bd6f2bcd1a0313078a28a07cc584df7b885b",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindPackageHandleStandardArgs\n-----------------------------\n\nThis module provides a function intended to be used in :ref:`Find Modules`\nimplementing :command:`find_package(<PackageName>)` calls.  It handles the\n``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.\nIt also sets the ``<PackageName>_FOUND`` variable.  The package is\nconsidered found if all variables listed contain valid results, e.g.\nvalid filepaths.\n\n.. command:: find_package_handle_standard_args\n\n  There are two signatures::\n\n    find_package_handle_standard_args(<PackageName>\n      (DEFAULT_MSG|<custom-failure-message>)\n      <required-var>...\n      )\n\n    find_package_handle_standard_args(<PackageName>\n      [FOUND_VAR <result-var>]\n      [REQUIRED_VARS <required-var>...]\n      [VERSION_VAR <version-var>]\n      [HANDLE_COMPONENTS]\n      [CONFIG_MODE]\n      [FAIL_MESSAGE <custom-failure-message>]\n      )\n\n  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all\n  the variables ``<required-var>...`` are valid and any optional\n  constraints are satisfied, and ``FALSE`` otherwise.  A success or\n  failure message may be displayed based on the results and on\n  whether the ``REQUIRED`` and/or ``QUIET`` option was given to\n  the :command:`find_package` call.\n\n  The options are:\n\n  ``(DEFAULT_MSG|<custom-failure-message>)``\n    In the simple signature this specifies the failure message.\n    Use ``DEFAULT_MSG`` to ask for a default message to be computed\n    (recommended).  Not valid in the full signature.\n\n  ``FOUND_VAR <result-var>``\n    Obsolete.  Specifies either ``<PackageName>_FOUND`` or\n    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only\n    for compatibility with older versions of CMake and is now ignored.\n    Result variables of both names are always set for compatibility.\n\n  ``REQUIRED_VARS <required-var>...``\n    Specify the variables which are required for this package.\n    These may be named in the generated failure message asking the\n    user to set the missing variable values.  Therefore these should\n    typically be cache entries such as ``FOO_LIBRARY`` and not output\n    variables like ``FOO_LIBRARIES``.\n\n  ``VERSION_VAR <version-var>``\n    Specify the name of a variable that holds the version of the package\n    that has been found.  This version will be checked against the\n    (potentially) specified required version given to the\n    :command:`find_package` call, including its ``EXACT`` option.\n    The default messages include information about the required\n    version and the version which has been actually found, both\n    if the version is ok or not.\n\n  ``HANDLE_COMPONENTS``\n    Enable handling of package components.  In this case, the command\n    will report which components have been found and which are missing,\n    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``\n    if any of the required components (i.e. not the ones listed after\n    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are\n    missing.\n\n  ``CONFIG_MODE``\n    Specify that the calling find module is a wrapper around a\n    call to ``find_package(<PackageName> NO_MODULE)``.  This implies\n    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command\n    will automatically check whether the package configuration file\n    was found.\n\n  ``FAIL_MESSAGE <custom-failure-message>``\n    Specify a custom failure message instead of using the default\n    generated message.  Not recommended.\n\nExample for the simple signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\nThe ``LibXml2`` package is considered to be found if both\n``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.\nThen also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found\nand ``REQUIRED`` was used, it fails with a\n:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was\nused or not.  If it is found, success will be reported, including\nthe content of the first ``<required-var>``.  On repeated CMake runs,\nthe same message will not be printed again.\n\nExample for the full signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibArchive\n    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n    VERSION_VAR LibArchive_VERSION)\n\nIn this case, the ``LibArchive`` package is considered to be found if\nboth ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.\nAlso the version of ``LibArchive`` will be checked by using the version\ncontained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,\nthe default messages will be printed.\n\nAnother example for the full signature:\n\n.. code-block:: cmake\n\n  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n  find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\nIn this case, a ``FindAutmoc4.cmake`` module wraps a call to\n``find_package(Automoc4 NO_MODULE)`` and adds an additional search\ndirectory for ``automoc4``.  Then the call to\n``find_package_handle_standard_args`` produces a proper success/failure\nmessage.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set up the arguments for `cmake_parse_arguments`.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check whether we are in 'simple' or 'extended' mode:\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# component handling\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# version handling:\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# exact version required\n",
        "Line" : 298,
        "CharPositionInLine" : 44
      },
      "17" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 304,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 334,
        "CharPositionInLine" : 17
      },
      "21" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 345,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Check with DEFINED as the found version may be 0.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# print the result:\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cmake/Modules_CUDA_fix/FindPackageMessage.cmake" : {
      "ObjectId" : "6821cee4f77a9d84c74f2c140870a2163ae5a5f0",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/ProtoBuf.cmake" : {
      "ObjectId" : "db4d659df16211af0aa0fb0bfadfd3218b63f29f",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Google Protocol Buffers library and compilers and extends\n\n# the standard cmake script with version and python generation support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Protobuf generated files triggers a deprecated atomic operation warning\n\n# so we turn it off here.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# If we are building Caffe2 as shared libs, we will also build protobuf as\n\n# shared libs.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# We will make sure that protobuf and caffe2 uses the same msvc runtime.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Protobuf \"namespaced\" target is only added post protobuf 3.5.1. As a\n\n# result, for older versions, we will manually add alias.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Main entry for protobuf. If we are building on Android, iOS or we have hard\n\n# coded BUILD_CUSTOM_PROTOBUF, we will hard code the use of custom protobuf\n\n# in the submodule.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unfortunately, new protobuf does not support libprotoc and protoc\n\n# cross-compilation so we will need to exclude it.\n\n# The problem of using EXCLUDE_FROM_ALL is that one is not going to be able\n\n# to run cmake install. A proper solution has to be implemented by protobuf\n\n# since we derive our cmake files from there.\n\n# TODO(jiayq): change this once https://github.com/google/protobuf/pull/3878\n\n# merges.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# TODO(jiayq): enable this in the future, when Jenkins Mac support is\n\n# properly set up with protobuf installs.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# message(FATAL_ERROR\n\n#     \"Protobuf cannot be found. Caffe2 will have to build with libprotobuf. \"\n\n#     \"Please set the proper paths so that I can find protobuf correctly.\")\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO: enable using lite protobuf.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Protobuf generated files use <> as inclusion path, so following normal\n\n# convention we will use SYSTEM inclusion path.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If Protobuf_VERSION is known (true in most cases, false if we are building\n\n# local protobuf), then we will add a protobuf version check in\n\n# Caffe2Config.cmake.in.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Figure out which protoc to use.\n\n# If CAFFE2_CUSTOM_PROTOC_EXECUTABLE is set, we assume the user knows\n\n# what they're doing and we blindly use the specified protoc. This\n\n# is typically the case when cross-compiling where protoc must be\n\n# compiled for the host architecture and libprotobuf must be\n\n# compiled for the target architecture.\n\n# If CAFFE2_CUSTOM_PROTOC_EXECUTABLE is NOT set, we use the protoc\n\n# target that is built as part of including the protobuf project.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################################################\n\n# Modification of standard 'protobuf_generate_cpp()' with output dir parameter and python support\n\n# Usage:\n\n#   caffe2_protobuf_generate_cpp_py(<srcs_var> <hdrs_var> <python_var> <proto_files>)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Note: the following depends on PROTOBUF_PROTOC_EXECUTABLE. This\n\n# is done to make sure protoc is built before attempting to\n\n# generate sources if we're using protoc from the third_party\n\n# directory and are building it as part of the Caffe2 build. If\n\n# points to an existing path, it is a no-op.\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "cmake/Summary.cmake" : {
      "ObjectId" : "ee4488a29fecb1eacf9a9604fdb9e584c36ae5cf",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prints accumulated Caffe2 configuration summary\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "61156accf142d9c5cfc592bb6f8695a219eecf46",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Exclude and prepend functionalities\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Clears variables from list\n\n# Usage:\n\n#   caffe_clear_vars(<variables_list>)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Prints list element per line\n\n# Usage:\n\n#   caffe_print_list(<list>)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Reads set of version defines from the header file\n\n# Usage:\n\n#   caffe_parse_header(<file> <define1> <define2> <define3> ..)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Reads single version define from the header file and parses it\n\n# Usage:\n\n#   caffe_parse_header_single_define(<library_name> <file> <define_name>)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "##############################################################################\n\n# Helper function to automatically generate __init__.py files where python\n\n# sources reside but there are no __init__.py present.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Since the _pb2.py files are yet to be created, we will need to manually\n\n# add them to the list.\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# message(STATUS \"Generate \" ${tmp}/__init__.py)\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "###\n\n# Removes common indentation from a block of text to produce code suitable for\n\n# setting to `python -c`, or using with pycmd. This allows multiline code to be\n\n# nested nicely in the surrounding code structure.\n\n#\n\n# This function respsects PYTHON_EXECUTABLE if it defined, otherwise it uses\n\n# `python` and hopes for the best. An error will be thrown if it is not found.\n\n#\n\n# Args:\n\n#     outvar : variable that will hold the stdout of the python command\n\n#     text   : text to remove indentation from\n\n#\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Use PYTHON_EXECUTABLE if it is defined, otherwise default to python\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Use echo to pipe the text to python's stdinput. This prevents us from\n\n# needing to worry about any sort of special escaping.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Remove supurflous newlines (artifacts of print)\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "###\n\n# Helper function to run `python -c \"<cmd>\"` and capture the results of stdout\n\n#\n\n# Runs a python command and populates an outvar with the result of stdout.\n\n# Common indentation in the text of `cmd` is removed before the command is\n\n# executed, so the caller does not need to worry about indentation issues.\n\n#\n\n# This function respsects PYTHON_EXECUTABLE if it defined, otherwise it uses\n\n# `python` and hopes for the best. An error will be thrown if it is not found.\n\n#\n\n# Args:\n\n#     outvar : variable that will hold the stdout of the python command\n\n#     cmd    : text representing a (possibly multiline) block of python code\n\n#\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Use PYTHON_EXECUTABLE if it is defined, otherwise default to python\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# run the actual command\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Remove supurflous newlines (artifacts of print)\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/Whitelist.cmake" : {
      "ObjectId" : "a283c151f4b477c2e03f558e85ce83f1e2d34da6",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First read the whitelist file and break it by line.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert file contents into a CMake list\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/public/cuda.cmake" : {
      "ObjectId" : "07d9417bdc467263f7bbe13468da5fb420ea17c9",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ cuda\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find Cuda.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find cudnn.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# After both cuda and cudnn are found, we can safely proceed.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# get cuDNN version\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Assemble cuDNN version\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Cuda Libraries wrapper\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# find libcuda.so and lbnvrtc.so\n\n# For libcuda.so, we will find it under lib, lib64, and then the\n\n# stubs folder, in case we are building on a system that does not\n\n# have cuda driver installed. On windows, we also search under the\n\n# folder lib/x64.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create new style imported libraries.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cuda\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cudart. CUDA_LIBRARIES is actually a list, so we will make an interface\n\n# library.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cudnn\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# curand\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# cublas. CUDA_CUBLAS_LIBRARIES is actually a list, so we will make an\n\n# interface library similar to cudart.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# nvrtc\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Note: in theory, we can add similar dependent library wrappers. For\n\n# now, Caffe2 only uses the above libraries, so we will only wrap\n\n# these.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ Cuda flags\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Known NVIDIA GPU achitectures Caffe2 can be compiled for.\n\n# Default is set to cuda 9. If we detect the cuda architectores to be less than\n\n# 9, we will lower it to the corresponding known archs.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# for CUDA 9.x\n",
        "Line" : 141,
        "CharPositionInLine" : 51
      },
      "19" : {
        "Text" : "# for CUDA 8.x\n",
        "Line" : 142,
        "CharPositionInLine" : 59
      },
      "20" : {
        "Text" : "# for CUDA 7.x\n",
        "Line" : 143,
        "CharPositionInLine" : 53
      },
      "21" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   caffe2_detect_installed_gpus(out_variable)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA_ARCH_NAME\n\n# Usage:\n\n#   caffe_select_nvcc_arch_flags(out_variable)\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# List of arch names\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Set CUDA_ARCH_NAME strings (so it will be seen as dropbox in the CMake GUI)\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Verify CUDA_ARCH_NAME value\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Remove dots and convert to lists\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 258,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 262,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "################################################################################################\n\n###  Non macro section\n\n################################################################################################\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Special care for windows platform: we know that 32-bit windows does not\n\n# support cuda.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# CUDA 7.x\n",
        "Line" : 294,
        "CharPositionInLine" : 30
      },
      "34" : {
        "Text" : "# CUDA 8.x\n",
        "Line" : 298,
        "CharPositionInLine" : 34
      },
      "35" : {
        "Text" : "# CUDA 8 may complain that sm_20 is no longer supported. Suppress the\n\n# warning for now.\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# CUDA 9.x requires GCC version <= 6\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# CUDA 8.0 requires GCC version <= 5\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# disable some nvcc diagnostic that apears in boost, glog, glags, opencv, etc.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Set C++11 support\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Debug and Release symbol support\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Set expt-relaxed-constexpr to suppress Eigen warnings\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    },
    "cmake/public/gflags.cmake" : {
      "ObjectId" : "ac4002efc08884cb73040addcb6d555dd9897b04",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ gflags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We will try to use the config mode first, and then manual find.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# - Try to find GFLAGS in the legacy way.\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR: Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# After above, we should have the gflags target now.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/public/glog.cmake" : {
      "ObjectId" : "f719da3e1fab8e818ca9477bac2941144d8f9951",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ glog\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We will try to use the config mode first, and then manual find.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR: Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# After above, we should have the glog::glog target now.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/public/protobuf.cmake" : {
      "ObjectId" : "fb3db6bcb87df7f3704449599817ad9737bc9cc5",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Protobuf\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We will try to use the config mode first, and then manual find.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Hooray. This is the most ideal situation, meaning that you either have a\n\n# Protobuf config file installed (like on Windows), or you are using a\n\n# modern CMake that ships with a FindProtobuf.cmake file that produces\n\n# modern targets.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If the modern targets are not present, we will generate them for you for\n\n# backward compatibility. This is backported from CMake's new FindProtobuf.cmake\n\n# content.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# After above, we should have the protobuf related target now.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/public/threads.cmake" : {
      "ObjectId" : "44c3f0ed9dc46e95c33e2f19ed58cad64034b2d9",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For newer CMake, Threads::Threads is already defined. Otherwise, we will\n\n# provide a backward compatible wrapper for Threads::Threads.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/public/utils.cmake" : {
      "ObjectId" : "390629ac71c214e609184b9a55482fa149546019",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add an interface library definition that is dependent on the source.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Depending on the nature of the source library as well as the compiler,\n\n# determine the needed compilation flags.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Depending on the type of the source library, we will set up the\n\n# link command for the specific SRC library.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# In the case of static library, we will need to add whole-static flags.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# In MSVC, we will add whole archive in default.\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Assume everything else is like gcc\n",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Link all interface link libraries of the src target as well.\n\n# For static library, we need to explicitly depend on all the libraries\n\n# that are the dependent library of the source library. Note that we cannot\n\n# use the populated INTERFACE_LINK_LIBRARIES property, because if one of the\n\n# dependent library is not a target, cmake creates a $<LINK_ONLY:src> wrapper\n\n# and then one is not able to find target \"src\". For more discussions, check\n\n#   https://gitlab.kitware.com/cmake/cmake/issues/15415\n\n#   https://cmake.org/pipermail/cmake-developers/2013-May/019019.html\n\n# Specifically the following quote\n\n#\n\n# \"\"\"\n\n# For STATIC libraries we can define that the PUBLIC/PRIVATE/INTERFACE keys\n\n# are ignored for linking and that it always populates both LINK_LIBRARIES\n\n# LINK_INTERFACE_LIBRARIES.  Note that for STATIC libraries the\n\n# LINK_LIBRARIES property will not be used for anything except build-order\n\n# dependencies.\n\n# \"\"\"\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Link all interface link libraries of the src target as well.\n\n# For shared libraries, we can simply depend on the INTERFACE_LINK_LIBRARIES\n\n# property of the target.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# For all other interface properties, manually inherit from the source target.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "##############################################################################\n\n# Creating a Caffe2 binary target with sources specified with relative path.\n\n# Usage:\n\n#   caffe2_binary_target(target_name_or_src <src1> [<src2>] [<src3>] ...)\n\n# If only target_name_or_src is specified, this target is build with one single\n\n# source file and the target name is autogen from the filename. Otherwise, the\n\n# target name is given by the first argument and the rest are the source files\n\n# to build the target.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If we have Caffe2_MODULES defined, we will also link with the modules.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "modules/CMakeLists.txt" : {
      "ObjectId" : "477caa50c4b4c77fd31d4b9af611792129fc4c08",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Add modules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Finally, set Caffe2_MODULES to parent scope.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/detectron/CMakeLists.txt" : {
      "ObjectId" : "f18077b829427bfb43b0eb9c4da1d485f69ebf71",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note(ilijar): Since Detectron ops currently have no\n\n# CPU implementation, we only build GPU ops for now.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/module_test/CMakeLists.txt" : {
      "ObjectId" : "3e9771417507fa0c579adac5406b539f9370abc1",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we are building the standalone module, we set the proper cmake variables.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "modules/observers/CMakeLists.txt" : {
      "ObjectId" : "7bf872e370b46b535649fb97627f9220fea343eb",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/rocksdb/CMakeLists.txt" : {
      "ObjectId" : "242423e04f75afad2e548f8da9d717b66da2ac09",
      "LastModified" : "2018-03-14T01:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ RocksDB module\n\n# In addition to being a useful module itself, RocksDB is also an exemplar\n\n# case where show how one should built a Caffe2 module inside the Caffe2\n\n# repository.\n\n#\n\n# This cmake file achieves two build modes:\n\n# (1) If one is invoking the main Caffe2 build, we will check a USE_* option,\n\n#     in this case USE_ROCKSDB, to test if we want to build this module.\n\n# (2) if we are building it in a standalone way, we will find the preinstalled\n\n#     Caffe2 library, and then build the library and install it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ First, determine if we are building with the main repo or not.\n\n# This is guarded by the CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO variable. It then\n\n# routes build to two paths:\n\n# (1) When we are building with the main repo, the caffe2_library is going to\n\n#     be already defined, and all related paths will be defined too. So we will\n\n#     simply test if the main repo build wants to build this module, in our\n\n#     case by the variable \"USE_ROCKSDB\".\n\n# (2) When we are not building with the main repo, we will need to do the usual\n\n#     cmake setup: version checks, project options, find dependent packages,\n\n#     etc.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Second, find dependencies.\n\n# This one should be similar to the standard dependency discovery in normal\n\n# cmake. Note that for modules that are located in the Caffe2 repository,\n\n# cmake related files, such as FindRocksDB in this case, should live in the\n\n# cmake/ folder under root.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Third, create the CMake target.\n\n# The key to note is that this library will need to depend on caffe2_library,\n\n# which is the main lib of Caffe2. If your library explicitly depends on cuda,\n\n# then you will need to depend on the caffe2_gpu_library as well.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Last, Append the library to Caffe2_MAIN_LIBS, if we are building with\n\n# the main repo.\n\n# The purpose of this is that, for all binaries built in the Caffe2 main repo,\n\n# they will be built with the first class modules that are built. As a result,\n\n# these binaries will not need to explicitly load these modules before using\n\n# them.\n\n# Note(jiayq): this also depends on a separate cmake move to reorg test builds\n\n# and binary builds after modules. When it is done, this note should be removed.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 97,
    "MAKEFILE" : 7
  },
  "ElapsedTime" : 5370
}