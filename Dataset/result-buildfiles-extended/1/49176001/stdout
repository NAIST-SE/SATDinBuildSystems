{
  "Repository" : "49176001",
  "Revision" : "HEAD",
  "ObjectId" : "960628dbc9743f0d74bc13b7d990d0795e32a542",
  "CommitTime" : "2017-09-01T12:58:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0dc8627c7b0c24d24a4bfab7ffaabcb309506a55",
      "LastModified" : "2017-08-17T16:31:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# allows access to environment variables with the name \n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set the build type if its not set\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if user didnt set install dir, override it and write it to the cache -> Type and description necessary,\n\n#overwrite variable, not just write it to cache\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# installation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#before adding libraries, define the output paths\n\n# MSVC & Xcode automatically create the build-type folders\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Location where cmake first looks for modules.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#open mpi\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# vulkan SDK\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# include cmdline\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# include glm, as system header to suppress warnings\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# include stb_image, as system header to suppress warnings\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include gli, as system header to suppress warnings\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add tinyobjloader\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# just one file so it can be directly compiled into main exe\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# add tinyobjloader\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# just one file so it can be directly compiled into main exe\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# bvh loading files\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add spirv cross build system\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# glfw\n\n# configure glfw building\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# add glfw build system\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# create framework helper library \n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# create framework helper library \n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# output executables\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# add_executable(vulkan_present application/source/application_present.cpp)\n\n# target_link_libraries(vulkan_present framework ${MPI_CXX_LIBRARIES})\n\n# install(TARGETS vulkan_present DESTINATION .)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# set build type dependent flags\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# activate C++ 11\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# show warnings but suppress those caused by glm\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# force linking  with c++11 lib\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# build in parallel, show warnings and suppress one caused by glbinding\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# remove external configuration vars from cmake gui\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# compile shaders\n\n# get list of shaders\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# create folder for compiled shaders\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# add shader compilation command sand target\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# compute output file name\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# add to output list\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# add target depending on shaders to compile when building\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# installation rules, copy compiled shaders\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "cmake/modules/AddSubLibrary.cmake" : {
      "ObjectId" : "5b2c32e9e0bdfd9c5a17f965da5df530d68fb57c",
      "LastModified" : "2016-11-23T10:59:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# general script to create helper library from folder\n\n##############################################################################\n\n#input variables\n\n# LIB - library name\n\n# LIB_FOLDER - library folder\n\n# LIB_FLAGS - compilation flags\n\n# ARGN - true expression to install target lib and header\n\n##############################################################################\n\n#output variables\n\n#LIB_INCLUDE_DIRS\n\n#LIB_LIBRARIES\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# collect source files\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# output an library\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set header files for install\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add includes so they get added automatically to targets depending on this\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set output variables for linking\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set(${LIB_CAPS}_INCLUDE_DIRS ${LIB_FOLDER} CACHE STRING \"include directories\")\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Cannot use ARGN directly with list() command.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check if first optional argument is true\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/modules/FindDependency.cmake" : {
      "ObjectId" : "3c3da510a8bec2cdb03ded3eaefeb336b28abc45",
      "LastModified" : "2016-11-23T10:59:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#general script to search for dependency libraries and headers \n\n##############################################################################\n\n#input variables\n\n# DEP - dependency id\n\n# DEP_HEADER - header file to search for\n\n# DEP_LIBRARY - library file to search for\n\n# ARGN - additional library names to put int DEP_LIBRARIES\n\n##############################################################################\n\n#path hints\n\n#DEP_INCLUDE_SEARCH_DIR\n\n#DEP_LIBRARY_SEARCH_DIR\n\n##############################################################################\n\n#output variables\n\n#DEP_INCLUDE_DIRS\n\n#DEP_LIBRARIES\n\n#DEP_LIBRARY_DIRS\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# search paths\n\n##############################################################################\n\n# search before global environment paths\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search after global environment paths\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# macros\n\n##############################################################################\n\n# feedback to provide user-defined paths to search for ${DEP}\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if hints were provided, display\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# if not, request them\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if hints were provided, display\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# if not, request them\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "##############################################################################\n\n# search\n\n##############################################################################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# search for include directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# search for libraries\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# create list of libs from lib and optional arguments\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# accumulate library list\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# search only for lib if it hasnt already been found\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# react to search result\n",
        "Line" : 109,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# add library and path to output lists \n",
        "Line" : 111,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# mark library as found\n",
        "Line" : 115,
        "CharPositionInLine" : 10
      },
      "17" : {
        "Text" : "# reset search status for next search\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# stops processing and exits loop\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# if statement is reached, all libraries were found\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "##############################################################################\n\n# verify\n\n##############################################################################\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# create imported library if version is high enough\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/modules/FindVulkan.cmake" : {
      "ObjectId" : "8c1ac5b82ffcbdc34316537aba68d406621df977",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Vulkan\n\n#\n\n# VULKAN_INCLUDE_DIR\n\n# VULKAN_LIBRARY\n\n# VULKAN_FOUND\n\n# from glfw\n\n# https://github.com/glfw/glfw/blob/e94d16667b1696e90da6c1b5c551815b0f873534/CMake/modules/FindVulkan.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/SPIRV-Cross-8199986/CMakeLists.txt" : {
      "ObjectId" : "261e631ad7aff3bd8e0da024d1df8b80513f0cd9",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2016 Google Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To specify special debug or optimization options, use\n\n# -DCMAKE_CXX_COMPILE_FLAGS\n\n# However, we require the C++11 dialect.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up tests, using only the simplest modes of the test_shaders\n\n# script.  You have to invoke the script manually to:\n\n#  - Update the reference files\n\n#  - Get cycle counts from malisc\n\n#  - Keep failing outputs\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/SPIRV-Cross-8199986/Makefile" : {
      "ObjectId" : "456f3a7c4f24ee1873ecd39108399e53b791bd64",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "external/SPIRV-Cross-8199986/samples/cpp/Makefile" : {
      "ObjectId" : "225bb3d57d1fb860a72570e1e908bb5cda058238",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "external/glfw-3.2.1/CMake/amd64-mingw32msvc.cmake" : {
      "ObjectId" : "705e251d3917f3787eca55aa3b3b0e303aee548f",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/glfw-3.2.1/CMake/i586-mingw32msvc.cmake" : {
      "ObjectId" : "393ddbda3019706378b25bb3d1abb634a3936866",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/glfw-3.2.1/CMake/i686-pc-mingw32.cmake" : {
      "ObjectId" : "9a46aef7b3457c8382fe16b3ad2e5a776f7f5f7d",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/glfw-3.2.1/CMake/i686-w64-mingw32.cmake" : {
      "ObjectId" : "9bd60936de2ed08f365601fbbfe404adbb37853a",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/glfw-3.2.1/CMake/modules/FindMir.cmake" : {
      "ObjectId" : "b1a495ba191db856c27e790cecd100a7288eeb89",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Mir on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   MIR_LIBRARIES   - Link these to use Wayland\n\n#   MIR_INCLUDE_DIR - Include directory for Wayland\n\n#\n\n# Copyright (c) 2014 Brandon Schaefer <brandon.schaefer@canonical.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/glfw-3.2.1/CMake/modules/FindVulkan.cmake" : {
      "ObjectId" : "d3a664a8bda6d16449d86c24781e0f28a3ebaec8",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Vulkan\n\n#\n\n# VULKAN_INCLUDE_DIR\n\n# VULKAN_LIBRARY\n\n# VULKAN_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/glfw-3.2.1/CMake/modules/FindWaylandProtocols.cmake" : {
      "ObjectId" : "8eb83f27ef88575f80a56198bd2635580452a914",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/glfw-3.2.1/CMake/modules/FindXKBCommon.cmake" : {
      "ObjectId" : "0f571eeacb5cd91d4ef72a89a066142e5a6a0d0a",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find XKBCommon\n\n# Once done, this will define\n\n#\n\n#   XKBCOMMON_FOUND - System has XKBCommon\n\n#   XKBCOMMON_INCLUDE_DIRS - The XKBCommon include directories\n\n#   XKBCOMMON_LIBRARIES - The libraries needed to use XKBCommon\n\n#   XKBCOMMON_DEFINITIONS - Compiler switches required for using XKBCommon\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/glfw-3.2.1/CMake/x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "84b2c701ec1d9e2ee0b72f3031cfccb4a81d205e",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/glfw-3.2.1/CMakeLists.txt" : {
      "ObjectId" : "b1476bd551de2529970ad80b8365ccd58a9dbb82",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Until all major package systems have moved to CMake 3,\n\n# we stick with the older INSTALL_NAME_DIR mechanism\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# On Unix-like systems, shared libraries can use the soname system.\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Set compiler specific flags\n\n#--------------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Workaround for legacy MinGW not providing XInput and DirectInput\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Enable link-time exploit mitigation features enabled by default on MSVC\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Compatibility with data execution prevention (DEP)\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Compatibility with address space layout randomization (ASLR)\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Compatibility with 64-bit address space layout randomization (ASLR)\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Detect and select backend APIs\n\n#--------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add Vulkan static library if requested\n\n#--------------------------------------------------------------------\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Find and add Unix math and time libraries\n\n#--------------------------------------------------------------------\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Win32 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use X11 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check for XRandR (modern resolution switching and gamma control)\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Check for Xinerama (legacy multi-monitor support)\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Check for Xf86VidMode (fallback gamma control)\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Backwards compatibility (see CMake bug 0006976)\n",
        "Line" : 246,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Check for Xkb (X keyboard extension)\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Check for Xcursor\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Wayland for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Mir for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Cocoa for window creation and NSOpenGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Export GLFW library dependencies\n\n#--------------------------------------------------------------------\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Create generated files\n\n#--------------------------------------------------------------------\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add subdirectories\n\n#--------------------------------------------------------------------\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Install files other than the library\n\n# The library is installed by src/CMakeLists.txt\n\n#--------------------------------------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 29
    },
    "external/glfw-3.2.1/docs/CMakeLists.txt" : {
      "ObjectId" : "c030ac735d32b5111537cac9fb512853d06eec3f",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/glfw-3.2.1/examples/CMakeLists.txt" : {
      "ObjectId" : "138a781667cd08c68582a6a9e54ff0fede8b1bc7",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "external/glfw-3.2.1/src/CMakeLists.txt" : {
      "ObjectId" : "5042aba382aa86dba035b84c5955adef6f7ee821",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, CMake doesn't know about .m\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n\n# win32_platform.h.  We define them here until a saner solution can be found\n\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable a reasonable set of warnings (no, -Wextra is not reasonable)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove the lib prefix on the DLL (but not the import library\n",
        "Line" : 87,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Add a suffix to the import library to avoid naming conflicts\n",
        "Line" : 90,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Add a suffix to the import library to avoid naming conflicts\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Add -fno-common to work around a bug in Apple's GCC\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Hide symbols not explicitly tagged for export from the shared library\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "external/glfw-3.2.1/tests/CMakeLists.txt" : {
      "ObjectId" : "205ec377e8991752950b8a71234f49a3b2c7981c",
      "LastModified" : "2017-01-08T13:01:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "external/gli-0.8.2.0/gli/CMakeLists.txt" : {
      "ObjectId" : "46d803d126afebee4a67a61b03f5e882ba68c34d",
      "LastModified" : "2017-02-27T16:05:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/glm-0.9.8.4/glm/CMakeLists.txt" : {
      "ObjectId" : "d60a887712d6b0346b52b4748c3d87f00340b931",
      "LastModified" : "2017-02-27T16:05:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 21,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1579
}