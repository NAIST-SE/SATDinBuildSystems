{
  "Repository" : "10394777",
  "Revision" : "HEAD",
  "ObjectId" : "cddbe90f6edd23ff2c68665dc7eaa0661d6c5ec3",
  "CommitTime" : "2019-02-09T23:54:28Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "e5218ea2547a79f06a3e1509d57d09084701a10a",
      "LastModified" : "2018-04-16T00:29:41Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Sandstorm - Personal Cloud Sandbox\n\n# Copyright (c) 2014 Sandstorm Development Group, Inc. and contributors\n\n# All rights reserved.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You may override the following vars on the command line to suit\n\n# your config.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# You generally should not modify this.\n\n# TODO(cleanup): -fPIC is unfortunate since most of our code is static binaries\n\n#   but we also need to build a .node module which is a shared library, and it\n\n#   needs to include all the Cap'n Proto code. Do we double-compile or do we\n\n#   just accept it? Perhaps it's for the best since we probably should build\n\n#   position-independent executables for security reasons?\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ====================================================================\n\n# Meta rules\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note: capnproto, libseccomp, and node-capnp are integrated into the common build.\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Clean only the stuff that we want to clean between CI builds.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ====================================================================\n\n# Dependencies\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We list remotes so that if projects move hosts, we can pull from their new\n\n# canonical location.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Probably user forgot to checkout submodules. Do it for them.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ====================================================================\n\n# Get Clang\n\n#\n\n# We use the prebuilt Clang binaries from the Chromium project. We do this because I've observed\n\n# Sandstorm contributors have a very hard time installing up-to-date versions of Clang on typcial\n\n# Linux distros. Ubuntu and Debian ship with outdated versions of Clang, which means people have\n\n# to install Clang from the LLVM apt repo. However, people struggle to set that up, and the repo\n\n# has been known to randomly break from time to time. OTOH, the Chromium project maintains a very\n\n# up-to-date version of Clang which is used to build Chrome, conveniently maintained as a git repo\n\n# (which we can pin to a commit) containing a nice script that will download precompiled binaries.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ====================================================================\n\n# build BoringSSL\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ====================================================================\n\n# build libsodium\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ====================================================================\n\n# Ekam bootstrap and C++ binaries\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ====================================================================\n\n# Front-end shell\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Note that we need Ekam to build node_modules before we can run Meteor, hence\n\n# the dependency on tmp/.ekam-run.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make completely black.\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# ====================================================================\n\n# Bundle\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ====================================================================\n\n# app-index.spk\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This is currently really really hacky because spk is not good at using a package definition file\n\n# that is not located at the root of the source tree. In particular it is hard for the package\n\n# definition file (living in the src tree) to refer to the `app-index` binary (living in the\n\n# tmp tree).\n\n#\n\n# TODO(cleanup): Make spk better so that it can handle this.\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ====================================================================\n\n# test-app.spk\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This is currently really really hacky because spk is not good at using a package definition file\n\n# that is not located at the root of the source tree. In particular it is hard for the package\n\n# definition file (living in the src tree) to refer to the `test-app` binary (living in the\n\n# tmp tree).\n\n#\n\n# TODO(cleanup): Make spk better so that it can handle this.\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21,
      "Errorlog" : "line 42:10 token recognition error at: '\\0'\nline 42:32 token recognition error at: '\\0'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1515
}