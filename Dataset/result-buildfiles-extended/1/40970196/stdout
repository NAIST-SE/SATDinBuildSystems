{
  "Repository" : "40970196",
  "Revision" : "HEAD",
  "ObjectId" : "6f7ddf9e6132453701b5aedd122692197c57e5d0",
  "CommitTime" : "2017-04-25T11:58:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "fe4227cbb89640ea8f26523d9c6e5535799caedf",
      "LastModified" : "2017-01-24T08:16:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# guard against in-source builds\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Alias Eigen_*_DIR to Eigen3_*_DIR:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# guard against bad build-type strings\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n\n# retrieve version information                                               #\n\n#############################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# automatically parse the version number\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if the mercurial program is absent, this will leave the EIGEN_HG_CHANGESET string empty,\n\n# but won't stop CMake.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if this is the default (aka development) branch, extract the mercurial changeset number from the hg tip output...\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#...and show it next to the version number\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#############################################################################\n\n# find how to link to the standard libraries                                #\n\n#############################################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Disable pkgconfig only for native Windows builds\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We assume that other compilers are partly compatible with GNUCC\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# clang outputs some warnings for unknown flags that are not caught by check_cxx_compiler_flag\n\n# adding -Werror turns such warnings into errors\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#ei_add_cxx_compiler_flag(\"-Weverything\")              # clang\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#  ei_add_cxx_compiler_flag(\"-Wconversion\")\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# -Wshadow is insanely too strict with gcc, hopefully it will become usable with gcc 6\n\n# if(NOT CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"5.0.0\"))\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# disable ICC's \"operands are evaluated in unspecified order\" remark\n\n# disable ICC's \"warning #2304: non-explicit constructor with single argument may cause implicit type conversion\" produced by -Wnon-virtual-dtor\n",
        "Line" : 169,
        "CharPositionInLine" : 56
      },
      "16" : {
        "Text" : "# The -ansi flag must be added last, otherwise it is also used as a linker flag by check_cxx_compiler_flag making it fails\n\n# Moreover we should not set both -strict-ansi and -ansi\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# disable clang warning: argument unused during compilation: '-ansi'\n",
        "Line" : 176,
        "CharPositionInLine" : 56
      },
      "18" : {
        "Text" : "# C4127 - conditional expression is constant\n\n# C4714 - marked as __forceinline not inlined (I failed to deactivate it selectively)\n\n#         We can disable this warning in the unit tests since it is clear that it occurs\n\n#         because we are oftentimes returning objects that have a destructor or may\n\n#         throw exceptions - in particular in the unit tests we are throwing extra many\n\n#         exceptions to cover indexing errors.\n\n# C4505 - unreferenced local function has been removed (impossible to deactive selectively)\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# replace all /Wx by /W4\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# arch is not supported on 64 bit systems, SSE is enabled automatically.\n",
        "Line" : 315,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Backward compatibility support for EIGEN_INCLUDE_INSTALL_DIR\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# similar to set_target_properties but append the property instead of overwriting it\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# if the property wasn't previously set, ${previous} is now \"previous-NOTFOUND\" which cmake allows catching with plain if()\n",
        "Line" : 396,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 424,
        "CharPositionInLine" : 27
      },
      "25" : {
        "Text" : "# add SYCL\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# must be after test and unsupported, for configuring buildtests.in\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# TODO: consider also replacing EIGEN_BUILD_BTL by a custom target \"make btl\"?\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Interface libraries require at least CMake 3.0\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Imported target support\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Export as title case Eigen\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Eigen does not provide components\n",
        "Line" : 536,
        "CharPositionInLine" : 39
      },
      "32" : {
        "Text" : "# Remove CMAKE_SIZEOF_VOID_P from Eigen3ConfigVersion.cmake since Eigen does\n\n# not depend on architecture specific settings or libraries. More\n\n# specifically, an Eigen3Config.cmake generated from a 64 bit target can be\n\n# used for 32 bit targets as well (and vice versa).\n",
        "Line" : 538,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# The Eigen target will be located in the Eigen3 namespace. Other CMake\n\n# targets can refer to it using Eigen3::Eigen.\n",
        "Line" : 549,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Export Eigen3 package to CMake registry such that it can be easily found by\n\n# CMake even if it has not been installed to a standard directory.\n",
        "Line" : 552,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Fallback to legacy Eigen3Config.cmake without the imported target\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# If CMakePackageConfigHelpers module is available (CMake >= 2.8.8)\n\n# create a relocatable Config file, otherwise leave the hardcoded paths       \n",
        "Line" : 561,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Eigen does not provide components\n",
        "Line" : 571,
        "CharPositionInLine" : 41
      },
      "38" : {
        "Text" : "# The PACKAGE_* variables are defined by the configure_package_config_file\n\n# but without it we define them manually to the hardcoded paths\n",
        "Line" : 574,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Add uninstall target\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "4c0027824f7bd13e067dad73b75f89869c814abb",
      "LastModified" : "2014-03-05T09:07:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Eigen/CMakeLists.txt" : {
      "ObjectId" : "9eb502b792d4a9607e2d323f2d8114939b43c209",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/CMakeLists.txt" : {
      "ObjectId" : "38ff9f483284b1749b0adba445e82f99612c515c",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   SET(CMAKE_Fortran_FLAGS \"-g0 -O3 -DNDEBUG\")\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find_package(MKL)\n\n# if (MKL_FOUND)\n\n#   add_definitions(-DHAVE_MKL)\n\n#   set(DEFAULT_LIBRARIES ${MKL_LIBRARIES})\n\n# endif (MKL_FOUND)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if we cannot find it easily, then we don't need it!\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bench/btl/cmake/FindACML.cmake" : {
      "ObjectId" : "4989fa2f4c60a2c4afe2242b32c02f1c4e9dd705",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/cmake/FindATLAS.cmake" : {
      "ObjectId" : "4136a989d61565965f03cd1704f9284a83e8c8b0",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# search the default lapack lib link to it\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#   if(ATLAS_REFERENCE_LAPACK)\n\n#     set(ATLAS_LIBRARIES ${ATLAS_LIBRARIES} ${ATLAS_REFERENCE_LAPACK})\n\n#   endif()\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bench/btl/cmake/FindBLAZE.cmake" : {
      "ObjectId" : "dba4c89f2de55e394a148388cf594babc8cbf11f",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find eigen2 headers\n\n# Once done this will define\n\n#\n\n#  BLAZE_FOUND - system has blaze lib\n\n#  BLAZE_INCLUDE_DIR - the blaze include directory\n\n#\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Adapted from FindEigen.cmake:\n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "bench/btl/cmake/FindBlitz.cmake" : {
      "ObjectId" : "92880bbed7cc687dee65ba2419e236e383c26479",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find blitz lib\n\n# Once done this will define\n\n#\n\n#  BLITZ_FOUND - system has blitz lib\n\n#  BLITZ_INCLUDES - the blitz include directory\n\n#  BLITZ_LIBRARIES - The libraries needed to use blitz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2007, Allen Winter, <winter@kde.org>\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(FindLibraryWithDebug)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bench/btl/cmake/FindCBLAS.cmake" : {
      "ObjectId" : "ce0f2f2b2d2d09973e45e8169a39d9f3cb738a50",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include(FindLibraryWithDebug)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bench/btl/cmake/FindGMM.cmake" : {
      "ObjectId" : "5049c64edcea43027c7875c9efa328a849cdb53f",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# in cache already\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "bench/btl/cmake/FindMKL.cmake" : {
      "ObjectId" : "f4d7c6ebe7dd629d20b7579ee6efa4dad989edcf",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/cmake/FindMTL4.cmake" : {
      "ObjectId" : "3de4909802be09039c847931d323a81b8998fa50",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find eigen2 headers\n\n# Once done this will define\n\n#\n\n#  MTL4_FOUND - system has eigen2 lib\n\n#  MTL4_INCLUDE_DIR - the eigen2 include directory\n\n#\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Adapted from FindEigen.cmake:\n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "bench/btl/cmake/FindOPENBLAS.cmake" : {
      "ObjectId" : "2a091943645d64c86dcae8b01211dbec129167da",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/cmake/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "7f122edcddd304b99fc1fd67ab1ca023a46edcb2",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME (DEFAULT_MSG|\"Custom failure message\") VAR1 ... )\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED and QUIET argument to FIND_PACKAGE() and\n\n# it also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is found if all variables listed are TRUE.\n\n# Example:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2 DEFAULT_MSG LIBXML2_LIBRARIES LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARIES and \n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR, \n\n# independent whether QUIET was used or not.\n\n#\n\n# If it is found, the location is reported using the VAR1 argument, so \n\n# here a message \"Found LibXml2: /usr/lib/libxml2.so\" will be printed out.\n\n# If the second argument is DEFAULT_MSG, the message in the failure case will \n\n# be \"Could NOT find LibXml2\", if you don't like this message you can specify\n\n# your own custom failure message there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bench/btl/cmake/FindTvmet.cmake" : {
      "ObjectId" : "26a29d965d125b34b1fff2c6bbfc2b5bf52e42df",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find tvmet headers\n\n# Once done this will define\n\n#\n\n#  TVMET_FOUND - system has tvmet lib\n\n#  TVMET_INCLUDE_DIR - the tvmet include directory\n\n#\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Adapted from FindEigen.cmake:\n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "bench/btl/cmake/MacroOptionalAddSubdirectory.cmake" : {
      "ObjectId" : "545048b684371ec6b8bdab3aaee2415b15b321a0",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_OPTIONAL_ADD_SUBDIRECTORY() combines ADD_SUBDIRECTORY() with an OPTION()\n\n# MACRO_OPTIONAL_ADD_SUBDIRECTORY( <dir> )\n\n# If you use MACRO_OPTIONAL_ADD_SUBDIRECTORY() instead of ADD_SUBDIRECTORY(),\n\n# this will have two effects\n\n# 1 - CMake will not complain if the directory doesn't exist\n\n#     This makes sense if you want to distribute just one of the subdirs\n\n#     in a source package, e.g. just one of the subdirs in kdeextragear.\n\n# 2 - If the directory exists, it will offer an option to skip the \n\n#     subdirectory.\n\n#     This is useful if you want to compile only a subset of all\n\n#     directories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bench/btl/data/CMakeLists.txt" : {
      "ObjectId" : "6af2a366f77ac4923d84584f1e7e4d7a834123bc",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/libs/BLAS/CMakeLists.txt" : {
      "ObjectId" : "0272ccad07a4a0eab515a79178b46fac1fcd83fe",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we are inside Eigen and blas/lapack interface is compilable\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "bench/btl/libs/STL/CMakeLists.txt" : {
      "ObjectId" : "4cfc2dcf298fbd1baba1fb0202f3b9d48bae2bd1",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/libs/blaze/CMakeLists.txt" : {
      "ObjectId" : "e99a0855c997e908ecab1044adef58eb587ec263",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: The newest blaze version requires C++14.\n\n# Ideally, we should set this depending on the version of Blaze we found\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "bench/btl/libs/blitz/CMakeLists.txt" : {
      "ObjectId" : "880ab7338564d89aaa919e7af064faf06b27e44e",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/libs/eigen2/CMakeLists.txt" : {
      "ObjectId" : "a2e8fc6da0948e1207d634ee9aca120aa8fc1352",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EIGEN2_FOUND\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "bench/btl/libs/eigen3/CMakeLists.txt" : {
      "ObjectId" : "00cae23d3a74f3cfe14b2ecf8335145aa185a419",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# unless EIGEN3_INCLUDE_DIR is defined, let's use current Eigen version\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#     if(BUILD_btl_eigen3_adv)\n\n#       target_link_libraries(btl_eigen3_adv ${MKL_LIBRARIES})\n\n#     endif(BUILD_btl_eigen3_adv)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bench/btl/libs/gmm/CMakeLists.txt" : {
      "ObjectId" : "bc2586243092771e0b1f9919c6a093f522b8d685",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/libs/mtl4/CMakeLists.txt" : {
      "ObjectId" : "14b47a808c990500baadcef95268a8636b2e3bd1",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/libs/tensors/CMakeLists.txt" : {
      "ObjectId" : "09d6d8e43ee4de933fd273105b56f42c7f75a701",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# unless TENSOR_INCLUDE_DIR is defined, let's use current Eigen version\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "bench/btl/libs/tvmet/CMakeLists.txt" : {
      "ObjectId" : "25b565b972360f99d49dc7560bd7989ba1f24682",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/btl/libs/ublas/CMakeLists.txt" : {
      "ObjectId" : "bdb58bea1ba0c7aedec5b82f1c6b8f2c2c443c89",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bench/spbench/CMakeLists.txt" : {
      "ObjectId" : "932735698ac807f2fbc82b3ffc8cbf97cffb2a87",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find_library(PARDISO_LIBRARIES pardiso412-GNU450-X86-64)\n\n# if(PARDISO_LIBRARIES)\n\n#   add_definitions(\"-DEIGEN_PARDISO_SUPPORT\")\n\n#   set(SPARSE_LIBS ${SPARSE_LIBS} ${PARDISO_LIBRARIES})\n\n# endif(PARDISO_LIBRARIES)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check that the PASTIX found is a version without MPI\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "blas/CMakeLists.txt" : {
      "ObjectId" : "9887d58043b611c5b717cb0fd871f36d4ab0065b",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 50,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 1
    },
    "blas/testing/CMakeLists.txt" : {
      "ObjectId" : "3ab8026ea3e4dd051697be9303e3ad5a5576d72a",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_custom_target(level1)\n\n# add_dependencies(level1 sblat1)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/EigenConfigureTesting.cmake" : {
      "ObjectId" : "afc24b5e9954e8884a25b97293abd5b1e0465845",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configure the \"site\" and \"buildname\" \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# retrieve and store the build string\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check whether /bin/bash exists\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This call activates testing and generates the DartConfiguration.tcl\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Overwrite default DartConfiguration.tcl such that ctest can build our unit tests.\n\n# Recall that our unit tests are not in the \"all\" target, so we have to explicitely ask ctest to build our custom 'buildtests' target.\n\n# At this stage, we can also add custom flags to the build tool through the user defined EIGEN_TEST_BUILD_FLAGS variable.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# try to grab the default flags\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# some documentation of this function would be nice\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# configure Eigen related testing options\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/EigenDetermineOSVersion.cmake" : {
      "ObjectId" : "9246fa67c82994c3bfa124fcd1859b1ac0bd3624",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The utility function DetermineOSVersion aims at providing an\n\n# improved version of the CMake variable ${CMAKE_SYSTEM} on Windows\n\n# machines.\n\n#\n\n# Usage:\n\n#  include(EigenDetermineOSVersion)\n\n#  DetermineOSVersion(OS_VERSION)\n\n#  message(\"OS: ${OS_VERSION}\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - A little helper variable which should not be directly called\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/EigenDetermineVSServicePack.cmake" : {
      "ObjectId" : "fed78194d2faea19f50f2dabc0157f419d6e45d3",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code is almost identical to the CMake version. The only difference is that we remove\n\n# _DetermineVSServicePack_FastCheckVersionWithCompiler which lead to errors on some systems.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Call helper function to determine VS version\n",
        "Line" : 16,
        "CharPositionInLine" : 16
      },
      "2" : {
        "Text" : "# temporary fix, until CMake catches up\n",
        "Line" : 19,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 3
    },
    "cmake/EigenTesting.cmake" : {
      "ObjectId" : "a92a2978b0daad8d1709be22167ee09879b997ac",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#internal. See documentation of ei_add_test for details.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let the user pass flags.\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# it could be that some cmake module provides a bad library string \" \"  (just spaces),\n\n# and that severely breaks target_link_libraries (\"can't link to -l-lstdc++\" errors).\n\n# so we check for strings containing only spaces.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# notice: no double quotes around ${libs_to_link} here. It may be a list.\n",
        "Line" : 95,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Specify target and test labels accoirding to EIGEN_CURRENT_SUBPROJECT\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# SYCL\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add a custom target for the generated integration header\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# let the user pass flags.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# it could be that some cmake module provides a bad library string \" \"  (just spaces),\n\n# and that severely breaks target_link_libraries (\"can't link to -l-lstdc++\" errors).\n\n# so we check for strings containing only spaces.\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# notice: no double quotes around ${libs_to_link} here. It may be a list.\n",
        "Line" : 190,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Specify target and test labels according to EIGEN_CURRENT_SUBPROJECT\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Macro to add a test\n\n#\n\n# the unique mandatory parameter testname must correspond to a file\n\n# <testname>.cpp which follows this pattern:\n\n#\n\n# #include \"main.h\"\n\n# void test_<testname>() { ... }\n\n#\n\n# Depending on the contents of that file, this macro can have 2 behaviors,\n\n# see below.\n\n#\n\n# The optional 2nd parameter is libraries to link to.\n\n#\n\n# A. Default behavior\n\n#\n\n# this macro adds an executable <testname> as well as a ctest test\n\n# named <testname> too.\n\n#\n\n# On platforms with bash simply run:\n\n#   \"ctest -V\" or \"ctest -V -R <testname>\"\n\n# On other platform use ctest as usual\n\n#\n\n# B. Multi-part behavior\n\n#\n\n# If the source file matches the regexp\n\n#    CALL_SUBTEST_[0-9]+|EIGEN_TEST_PART_[0-9]+\n\n# then it is interpreted as a multi-part test. The behavior then depends on the\n\n# CMake option EIGEN_SPLIT_LARGE_TESTS, which is ON by default.\n\n#\n\n# If EIGEN_SPLIT_LARGE_TESTS is OFF, the behavior is the same as in A (the multi-part\n\n# aspect is ignored).\n\n#\n\n# If EIGEN_SPLIT_LARGE_TESTS is ON, the test is split into multiple executables\n\n#   test_<testname>_<N>\n\n# where N runs from 1 to the greatest occurence found in the source file. Each of these\n\n# executables is built passing -DEIGEN_TEST_PART_N. This allows to split large tests\n\n# into smaller executables.\n\n#\n\n# Moreover, targets <testname> are still generated, they\n\n# have the effect of building all the parts of the test.\n\n#\n\n# Again, ctest -R allows to run all matching tests.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# adds a failtest, i.e. a test that succeed if the program fails to compile\n\n# note that the test runner for these is CMake itself, when passed -DEIGEN_FAILTEST=ON\n\n# so here we're just running CMake commands immediately, we're not adding any targets.\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# print a summary of the different options\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# vectorization / alignment options\n",
        "Line" : 484,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# uncomment anytime you change the ei_get_compilerver_from_cxx_version_string macro\n\n# ei_test_get_compilerver_from_cxx_version_string()\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# if the sitename is not yet set, try to set it\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# in case it is already set, enforce lower case\n",
        "Line" : 524,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# on windows system, we use a modified CMake script\n",
        "Line" : 532,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# on all other system we rely on ${CMAKE_CXX_COMPILER}\n\n# supporting a \"--version\" or \"/version\" flag\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Extract compiler name and version from a raw version string\n\n# WARNING: if you edit thid macro, then please test it by  uncommenting\n\n# the testing macro call in ei_init_testing() of the EigenTesting.cmake file.\n\n# See also the ei_test_get_compilerver_from_cxx_version_string macro at the end of the file\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# extract possible compiler names\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# combine them\n",
        "Line" : 573,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# extract possible version numbers\n\n# first try to extract 3 isolated numbers:\n",
        "Line" : 588,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# try to extract 2 isolated ones:\n",
        "Line" : 592,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# try to extract 3:\n",
        "Line" : 595,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# try to extract 2:\n",
        "Line" : 598,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# helper macro for testing ei_get_compilerver_from_cxx_version_string\n\n# STR: raw version string\n\n# REFNAME: expected compiler name\n\n# REFVER: expected compiler version\n",
        "Line" : 698,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# macro for testing ei_get_compilerver_from_cxx_version_string\n\n# feel free to add more version strings\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "cmake/EigenUninstall.cmake" : {
      "ObjectId" : "4dae8c85c8701e8cf676acc88c65065577d7e353",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ CMake Uninstall Template #######################\n\n# CMake Template file for uninstallation of files\n\n# mentioned in 'install_manifest.txt'\n\n#\n\n# Used by uinstall target\n\n#################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindAdolc.cmake" : {
      "ObjectId" : "937e549904e260bb7b0b4e6ba1ee82369938e7fd",
      "LastModified" : "2016-10-06T01:48:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindBLAS.cmake" : {
      "ObjectId" : "9f74b07feb2b7cad89bd372c43639593fee150a9",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2016 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find BLAS library\n\n# This module finds an installed fortran library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#    is found\n\n#  BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n\n#    and -L).\n\n#  BLAS_COMPILER_FLAGS - uncached list of required compiler flags (including -I for mkl headers).\n\n#  BLAS_LIBRARIES - uncached list of libraries (using full path name) to\n\n#    link against to use BLAS\n\n#  BLAS95_LIBRARIES - uncached list of libraries (using full path name)\n\n#    to link against to use BLAS95 interface\n\n#  BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n\n#    is found\n\n#  BLA_STATIC  if set on this determines what kind of linkage we do (static)\n\n#  BLA_VENDOR  if set checks only the specified vendor, if not set checks\n\n#     all the possibilities\n\n#  BLAS_VENDOR_FOUND stores the BLAS vendor found \n\n#  BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DBLAS_DIR=path/to/blas):\n\n#  BLAS_DIR            - Where to find the base directory of blas\n\n#  BLAS_INCDIR         - Where to find the header files\n\n#  BLAS_LIBDIR         - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: BLAS_DIR, BLAS_INCDIR, BLAS_LIBDIR\n\n# For MKL case and if no paths are given as hints, we will try to use the MKLROOT\n\n# environment variable\n\n#  BLAS_VERBOSE Print some additional information during BLAS libraries detection\n\n##########\n\n### List of vendors (BLA_VENDOR) valid in this module\n\n########## List of vendors (BLA_VENDOR) valid in this module\n\n##  Open (for OpenBlas), Eigen (for EigenBlas), Goto, ATLAS PhiPACK,\n\n##  CXML, DXML, SunPerf, SCSL, SGIMATH, IBMESSL, IBMESSLMT\n\n##  Intel10_32 (intel mkl v10 32 bit), Intel10_64lp (intel mkl v10 64 bit,lp thread model, lp64 model),\n\n##  Intel10_64lp_seq (intel mkl v10 64 bit,sequential code, lp64 model),\n\n##  Intel( older versions of mkl 32 and 64 bit),\n\n##  ACML, ACML_MP, ACML_GPU, Apple, NAS, Generic\n\n# C/CXX should be enabled to use Intel mkl\n\n###\n\n# We handle different modes to find the dependency\n\n#\n\n# - Detection if already installed on the system\n\n#   - BLAS libraries can be detected from different ways\n\n#     Here is the order of precedence:\n\n#     1) we look in cmake variable BLAS_LIBDIR or BLAS_DIR (we guess the libdirs) if defined\n\n#     2) we look in environment variable BLAS_LIBDIR or BLAS_DIR (we guess the libdirs) if defined\n\n#     3) we look in common environnment variables depending on the system (INCLUDE, C_INCLUDE_PATH, CPATH - LIB, DYLD_LIBRARY_PATH, LD_LIBRARY_PATH)\n\n#     4) we look in common system paths depending on the system, see for example paths contained in the following cmake variables:\n\n#       - CMAKE_PLATFORM_IMPLICIT_INCLUDE_DIRECTORIES, CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES\n\n#       - CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES, CMAKE_C_IMPLICIT_LINK_DIRECTORIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Some macros to print status when search for headers and libs\n\n# This macro informs why the _lib_to_find file has not been found\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# save _libname upper/lower case\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# print status\n\n#message(\" \")\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This macro informs why the _lib_to_find file has not been found\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# save _libname upper/lower case\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# print status\n\n#message(\" \")\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#message(\" \")\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check the language being used\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 256,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Print status if not found\n\n# -------------------------\n",
        "Line" : 266,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Print status if not found\n\n# -------------------------\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 338,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# system variables\n",
        "Line" : 353,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# set paths where to look for\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Try to find the fftw header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 399,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# libiomp5\n\n# --------\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# libgomp\n\n# -------\n",
        "Line" : 428,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# choose one or another depending on the compilo\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# m\n",
        "Line" : 448,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# Fortran\n",
        "Line" : 458,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 530,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 541,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# old version\n",
        "Line" : 548,
        "CharPositionInLine" : 5
      },
      "31" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 551,
        "CharPositionInLine" : 5
      },
      "32" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 556,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# old version\n",
        "Line" : 569,
        "CharPositionInLine" : 5
      },
      "34" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 572,
        "CharPositionInLine" : 5
      },
      "35" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 602,
        "CharPositionInLine" : 3
      },
      "36" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 613,
        "CharPositionInLine" : 3
      },
      "37" : {
        "Text" : "# old version\n",
        "Line" : 616,
        "CharPositionInLine" : 5
      },
      "38" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 619,
        "CharPositionInLine" : 5
      },
      "39" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 628,
        "CharPositionInLine" : 3
      },
      "40" : {
        "Text" : "# old version\n",
        "Line" : 641,
        "CharPositionInLine" : 5
      },
      "41" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 644,
        "CharPositionInLine" : 5
      },
      "42" : {
        "Text" : "#older vesions of intel mkl libs\n",
        "Line" : 661,
        "CharPositionInLine" : 3
      },
      "43" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\n",
        "Line" : 709,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# OpenBlas\n",
        "Line" : 733,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# openblas (http://www.openblas.net/)\n",
        "Line" : 737,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# EigenBlas\n",
        "Line" : 761,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# eigenblas (http://eigen.tuxfamily.org/index.php?title=Main_Page)\n",
        "Line" : 765,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# eigenblas (http://eigen.tuxfamily.org/index.php?title=Main_Page)\n",
        "Line" : 784,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 811,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 836,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 864,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 892,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 951,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 979,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# BLAS in IBM ESSL library (requires generic BLAS lib, too)\n",
        "Line" : 1007,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# BLAS in IBM ESSL_MT library (requires generic BLAS lib, too)\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 1062,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# try to find acml in \"standard\" paths\n",
        "Line" : 1069,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\n\n# We'll just use the same directory twice\n",
        "Line" : 1105,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# ACML\n",
        "Line" : 1232,
        "CharPositionInLine" : 65
      },
      "63" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 1235,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 1290,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "cmake/FindBLASEXT.cmake" : {
      "ObjectId" : "0fe7fb84931bacf4f7879be412c6abf37c44d175",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2016 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find BLAS EXTENDED for MORSE projects: find include dirs and libraries\n\n#\n\n# This module allows to find BLAS libraries by calling the official FindBLAS module\n\n# and handles the creation of different library lists whether the user wishes to link\n\n# with a sequential BLAS or a multihreaded (BLAS_SEQ_LIBRARIES and BLAS_PAR_LIBRARIES).\n\n# BLAS is detected with a FindBLAS call then if the BLAS vendor is Intel10_64lp, ACML\n\n# or IBMESSLMT then the module attempts to find the corresponding multithreaded libraries.\n\n#\n\n# The following variables have been added to manage links with sequential or multithreaded\n\n# versions:\n\n#  BLAS_INCLUDE_DIRS  - BLAS include directories\n\n#  BLAS_LIBRARY_DIRS  - Link directories for BLAS libraries\n\n#  BLAS_SEQ_LIBRARIES - BLAS component libraries to be linked (sequential)\n\n#  BLAS_PAR_LIBRARIES - BLAS component libraries to be linked (multithreaded)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013-2016 Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# macro to factorize this call\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add a cache variable to let the user specify the BLAS vendor\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# First try to detect two cases:\n\n# 1: only SEQ libs are handled\n\n# 2: both SEQ and PAR libs are handled\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# detect the cases where SEQ and PAR libs are handled\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Intel case\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###\n\n# look for include path if the BLAS vendor is Intel\n\n###\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# gather system include paths\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# find mkl.h inside known include paths\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## Print status if not found\n\n## -------------------------\n\n#if (NOT BLAS_mkl.h_INCLUDE_DIRS AND MORSE_VERBOSE)\n\n#    Print_Find_Header_Status(blas mkl.h)\n\n#endif ()\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "###\n\n# look for libs\n\n###\n\n# if Intel 10 64 bit -> look for sequential and multithreaded versions\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "## look for the sequential version\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "## look for the multithreaded version\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# ACML case\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "## look for the sequential version\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "## look for the multithreaded version\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# IBMESSL case\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "## look for the sequential version\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "## look for the multithreaded version\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# define the SEQ libs as the BLAS_LIBRARIES\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# extract libs paths\n\n# remark: because it is not given by find_package(BLAS)\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# check that BLAS has been found\n\n# ---------------------------------\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cmake/FindCholmod.cmake" : {
      "ObjectId" : "23239c300f1b2004794e9968a825a45fa5bb5ccd",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cholmod lib usually requires linking to a blas and lapack library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindComputeCpp.cmake" : {
      "ObjectId" : "27e5c9b1fc7ab896c441008937c21dbb67aead90",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindComputeCpp\n\n#---------------\n\n#\n\n#   Copyright 2016 Codeplay Software Ltd.\n\n#\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n\n#   you may not use these files except in compliance with the License.\n\n#   You may obtain a copy of the License at\n\n#\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n#\n\n#   Unless required by applicable law or agreed to in writing, software\n\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n#   See the License for the specific language governing permissions and\n\n#   limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################\n\n#  FindComputeCpp.cmake\n\n#########################\n\n#\n\n#  Tools for finding and building with ComputeCpp.\n\n#\n\n#  User must define COMPUTECPP_PACKAGE_ROOT_DIR pointing to the ComputeCpp\n\n#   installation.\n\n#\n\n#  Latest version of this file can be found at:\n\n#    https://github.com/codeplaysoftware/computecpp-sdk\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Require CMake version 3.2.2 or higher\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check that a supported host compiler can be found\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Require at least gcc 4.8\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Require the GCC dual ABI to be disabled for 5.1 or higher\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Require at least clang 3.6\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Find OpenCL package\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find ComputeCpp packagee\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Obtain the path to compute++\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Obtain the path to computecpp_info\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Obtain the path to the ComputeCpp runtime library\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Obtain the ComputeCpp include directory\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Obtain the package version\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Obtain the device compiler flags\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check if the platform is supported\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "####################\n\n#   __build_sycl\n\n####################\n\n#\n\n#  Adds a custom target for running compute++ and adding a dependency for the\n\n#  resulting integration header.\n\n#\n\n#  targetName : Name of the target.\n\n#  sourceFile : Source file to be compiled.\n\n#  binaryDir : Intermediate directory to output the integration header.\n\n#\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Retrieve source file name.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Set the path to the Sycl file.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Add any user-defined include to the device compiler\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Convert argument list format\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Add custom command for running compute++\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add a custom target for the generated integration header\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Add a dependency on the integration header\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Set the host compiler C++ standard to C++11\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Disable GCC dual ABI on GCC 5.1 and higher\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#######################\n\n#  add_sycl_to_target\n\n#######################\n\n#\n\n#  Adds a SYCL compilation custom command associated with an existing\n\n#  target and sets a dependancy on that new command.\n\n#\n\n#  targetName : Name of the target to add a SYCL to.\n\n#  sourceFile : Source file to be compiled for SYCL.\n\n#  binaryDir : Intermediate directory to output the integration header.\n\n#\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Add custom target to run compute++ and generate the integration header\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Link with the ComputeCpp runtime library\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "cmake/FindEigen2.cmake" : {
      "ObjectId" : "a834b887286045fcdc381633ec95bf204834aadf",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen2 2.0.3)\n\n# to require version 2.0.3 to newer of Eigen2.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib with correct version\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN2_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindEigen3.cmake" : {
      "ObjectId" : "9e969786089ca8ea3801be8b084c51a5782f09b5",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# search first if an Eigen3Config.cmake is available in the system,\n\n# if successful this would set EIGEN3_INCLUDE_DIR and the rest of\n\n# the script will work as usual\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/FindFFTW.cmake" : {
      "ObjectId" : "6c4dc9ab495d5ab56b6b3943b2c53200b35c5ee8",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the FFTW library\n\n#\n\n# Usage:\n\n#   find_package(FFTW [REQUIRED] [QUIET] )\n\n#     \n\n# It sets the following variables:\n\n#   FFTW_FOUND               ... true if fftw is found on the system\n\n#   FFTW_LIBRARIES           ... full path to fftw library\n\n#   FFTW_INCLUDES            ... fftw include directory\n\n#\n\n# The following variables will be checked by the function\n\n#   FFTW_USE_STATIC_LIBS    ... if true, only static libraries are found\n\n#   FFTW_ROOT               ... if set, the libraries are exclusively searched\n\n#                               under this path\n\n#   FFTW_LIBRARY            ... fftw library to use\n\n#   FFTW_INCLUDE_DIR        ... fftw include directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#If environment variable FFTWDIR is specified, it has same effect as FFTW_ROOT\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if we can use PkgConfig\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Determine from PKG\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Check whether to search static or dynamic libs\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#find libs\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#find includes\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/FindGLEW.cmake" : {
      "ObjectId" : "54da20f12bdba627f0d90fb8d225e4995b92ea7c",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2009 Boudewijn Rempt <boud@valdyas.org>                                                                                          \n\n#                                                                                                                                                \n\n# Redistribution and use is allowed according to the terms of the BSD license.                                                                   \n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file. \n\n# \n\n# - try to find glew library and include files\n\n#  GLEW_INCLUDE_DIR, where to find GL/glew.h, etc.\n\n#  GLEW_LIBRARIES, the libraries to link against\n\n#  GLEW_FOUND, If false, do not try to use GLEW.\n\n# Also defined, but not for general use are:\n\n#  GLEW_GLEW_LIBRARY = the full path to the glew library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These values for Apple could probably do with improvement.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is -lXi and -lXmu required on all platforms that have it?\n\n# If not, we need some way to figure out what platform we are on.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#The following deprecated settings are for backwards compatibility with CMake1.4\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindGMP.cmake" : {
      "ObjectId" : "1f0273960142810512c933c53e2ff8de7ab9d428",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GNU Multiple Precision Arithmetic Library (GMP)\n\n# See http://gmplib.org/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindGSL.cmake" : {
      "ObjectId" : "bf411a7f9814843a67465198cb61c82e59c4beff",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find gnu scientific library GSL\n\n# See \n\n# http://www.gnu.org/software/gsl/  and\n\n# http://gnuwin32.sourceforge.net/packages/gsl.htm\n\n#\n\n# Once run this will define: \n\n# \n\n# GSL_FOUND       = system has GSL lib\n\n#\n\n# GSL_LIBRARIES   = full path to the libraries\n\n#    on Unix/Linux with additional linker flags from \"gsl-config --libs\"\n\n# \n\n# CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially \"`gsl-config --cxxflags`\"\n\n#\n\n# GSL_INCLUDE_DIR      = where to find headers \n\n#\n\n# GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix\n\n# GSL_EXE_LINKER_FLAGS = rpath on Unix\n\n#\n\n# Felix Woelk 07/2004\n\n# Jan Woetzel\n\n#\n\n# www.mip.informatik.uni-kiel.de\n\n# --------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JW tested with gsl-1.8, Windows XP, MSVS 7.1\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#MESSAGE(\"DBG\\n\"\n\n#  \"GSL_GSL_LIBRARY=${GSL_GSL_LIBRARY}\\n\"\n\n#  \"GSL_GSLCBLAS_LIBRARY=${GSL_GSLCBLAS_LIBRARY}\\n\"\n\n#  \"GSL_LIBRARIES=${GSL_LIBRARIES}\")\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# MESSAGE(\"DBG GSL_CONFIG ${GSL_CONFIG}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# set CXXFLAGS to be fed into CXX_FLAGS by the user:\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# set INCLUDE_DIRS to prefix+include\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# set link libraries and link flags\n\n#SET(GSL_LIBRARIES \"`${GSL_CONFIG} --libs`\")\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# extract link dirs for rpath  \n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# extract version\n",
        "Line" : 117,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# split version as major/minor\n",
        "Line" : 122,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# split off the link dirs (for rpath)\n\n# use regular expression to match wildcard equivalent \"-L*<endchar>\"\n\n# with <endchar> is a space or a semicolon\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES_WITH_PREFIX=${GSL_LINK_DIRECTORIES_WITH_PREFIX}\")\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# remove prefix -L because we need the pure directory for LINK_DIRECTORIES\n",
        "Line" : 136,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES=${GSL_LINK_DIRECTORIES}\")\n\n#      MESSAGE(\"DBG  GSL_EXE_LINKER_FLAGS=${GSL_EXE_LINKER_FLAGS}\")\n",
        "Line" : 142,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#      ADD_DEFINITIONS(\"-DHAVE_GSL\")\n\n#      SET(GSL_DEFINITIONS \"-DHAVE_GSL\")\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 15
    },
    "cmake/FindGoogleHash.cmake" : {
      "ObjectId" : "f6a81a02ce9dbac0710ef2b5e46eb8b9c5aa5999",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# let's make sure it compiles with the current compiler\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/FindHWLOC.cmake" : {
      "ObjectId" : "a831b5c725acc0b88dfba169e3ed477dd5bf2910",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find HWLOC include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(HWLOC\n\n#               [REQUIRED]) # Fail with error if hwloc is not found\n\n#\n\n# This module finds headers and hwloc library.\n\n# Results are reported in variables:\n\n#  HWLOC_FOUND           - True if headers and requested libraries were found\n\n#  HWLOC_INCLUDE_DIRS    - hwloc include directories\n\n#  HWLOC_LIBRARY_DIRS    - Link directories for hwloc libraries\n\n#  HWLOC_LIBRARIES       - hwloc component libraries to be linked\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DHWLOC_DIR=path/to/hwloc):\n\n#  HWLOC_DIR             - Where to find the base directory of hwloc\n\n#  HWLOC_INCDIR          - Where to find the header files\n\n#  HWLOC_LIBDIR          - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: HWLOC_DIR, HWLOC_INCDIR, HWLOC_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optionally use pkg-config to detect include/library dirs (if pkg-config is available)\n\n# -------------------------------------------------------------------------------------\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if(NOT HWLOC_INCLUDE_DIRS)\n\n#    message(\"${Magenta}HWLOC_INCLUDE_DIRS is empty using PkgConfig.\"\n\n#        \"Perhaps the path to hwloc headers is already present in your\"\n\n#        \"C(PLUS)_INCLUDE_PATH environment variable.${ColourReset}\")\n\n#endif()\n",
        "Line" : 76,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# set paths where to look for\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Try to find the hwloc header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# set paths where to look for\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Try to find the hwloc lib in the given paths\n\n# ----------------------------------------------\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set cmake variables (respects naming convention)\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# HWLOC\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# test link\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# check that HWLOC has been found\n\n# -------------------------------\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# test headers to guess the version\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/FindLAPACK.cmake" : {
      "ObjectId" : "2fcae2199f5f55f707089108301eb2c0a350671d",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find LAPACK library\n\n#\n\n# This module finds an installed library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n# The approach follows mostly that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface\n\n#    is found\n\n#  LAPACK_INCLUDE_DIR - Directories containing the LAPACK header files\n\n#  LAPACK_DEFINITIONS - Compilation options to use LAPACK\n\n#  LAPACK_LINKER_FLAGS - Linker flags to use LAPACK (excluding -l\n\n#    and -L).\n\n#  LAPACK_LIBRARIES_DIR - Directories containing the LAPACK libraries.\n\n#     May be null if LAPACK_LIBRARIES contains libraries name using full path.\n\n#  LAPACK_LIBRARIES - List of libraries to link against LAPACK interface.\n\n#     May be null if the compiler supports auto-link (e.g. VC++).\n\n#  LAPACK_USE_FILE - The name of the cmake module to include to compile\n\n#     applications or libraries using LAPACK.\n\n#\n\n# This module was modified by CGAL team:\n\n# - find libraries for a C++ compiler, instead of Fortran\n\n# - added LAPACK_INCLUDE_DIR, LAPACK_DEFINITIONS and LAPACK_LIBRARIES_DIR\n\n# - removed LAPACK95_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# check_function_exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found and DEFINITIONS to the required definitions.\n\n# Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"DEBUG: check_lapack_libraries(${_list} in ${_path} with ${_blas})\")\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check for the existence of the libraries given by _list\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# search first in ${_path}\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# if not found, search in environment variables and system\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test this combination of libraries with the Fortran/f2c interface.\n\n# We test the Fortran interface first as it is well standardized.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some C++ linkers require the f2c library to link with Fortran libraries.\n\n# I do not know which ones, thus I just add the f2c library if it is available.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_DEFINITIONS = ${CMAKE_REQUIRED_DEFINITIONS}\")\n\n#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n\n# Check if function exists with f2c calling convention (ie a trailing underscore)\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# If not found, test this combination of libraries with a C interface.\n\n# A few implementations (ie ACML) provide a C interface. Unfortunately, there is no standard.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# on failure\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(\"DEBUG: ${DEFINITIONS} = ${${DEFINITIONS}}\")\n\n#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# main\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# LAPACK requires BLAS\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# reset variables\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# unused (yet)\n",
        "Line" : 158,
        "CharPositionInLine" : 32
      },
      "18" : {
        "Text" : "#\n\n# If Unix, search for LAPACK function in possible libraries\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#intel mkl lapack?\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#acml lapack?\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Apple LAPACK library?\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Generic LAPACK library?\n\n# This configuration *must* be the last try as this library is notably slow.\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Add variables to cache\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#message(\"DEBUG: LAPACK_INCLUDE_DIR = ${LAPACK_INCLUDE_DIR}\")\n\n#message(\"DEBUG: LAPACK_DEFINITIONS = ${LAPACK_DEFINITIONS}\")\n\n#message(\"DEBUG: LAPACK_LINKER_FLAGS = ${LAPACK_LINKER_FLAGS}\")\n\n#message(\"DEBUG: LAPACK_LIBRARIES = ${LAPACK_LIBRARIES}\")\n\n#message(\"DEBUG: LAPACK_LIBRARIES_DIR = ${LAPACK_LIBRARIES_DIR}\")\n\n#message(\"DEBUG: LAPACK_FOUND = ${LAPACK_FOUND}\")\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "cmake/FindMPFR.cmake" : {
      "ObjectId" : "aa4c2cd7d29c65f88dd63b5507b9f1aeeeb3f7a6",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR library\n\n# See http://www.mpfr.org/\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(MPFR 2.3.0)\n\n# to require version 2.3.0 to newer of MPFR.\n\n#\n\n# Once done this will define\n\n#\n\n#  MPFR_FOUND - system has MPFR lib with correct version\n\n#  MPFR_INCLUDES - the MPFR include directory\n\n#  MPFR_LIBRARIES - the MPFR library\n\n#  MPFR_VERSION - MPFR version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2010 Jitse Niesen, <jitse@maths.leeds.ac.uk>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MPFR_INCLUDES\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MPFR_FIND_VERSION to 1.0.0 if no minimum version is specified\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set MPFR_VERSION\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check whether found version exceeds minimum version\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set MPFR_LIBRARIES\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Epilogue\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/FindMetis.cmake" : {
      "ObjectId" : "da2f1f1d7b056f97a185b9da672bfc2cd4cbb220",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find METIS include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(METIS\n\n#               [REQUIRED]             # Fail with error if metis is not found\n\n#              )\n\n#\n\n# This module finds headers and metis library.\n\n# Results are reported in variables:\n\n#  METIS_FOUND           - True if headers and requested libraries were found\n\n#  METIS_INCLUDE_DIRS    - metis include directories\n\n#  METIS_LIBRARY_DIRS    - Link directories for metis libraries\n\n#  METIS_LIBRARIES       - metis component libraries to be linked\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DMETIS_DIR=path/to/metis):\n\n#  METIS_DIR             - Where to find the base directory of metis\n\n#  METIS_INCDIR          - Where to find the header files\n\n#  METIS_LIBDIR          - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: METIS_DIR, METIS_INCDIR, METIS_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Try to find the metis header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try to find the metis lib in the given paths\n\n# ----------------------------------------------\n\n# call cmake macro to find the lib path\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set cmake variables\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# METIS\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# m\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# test link\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# check that METIS has been found\n\n# ---------------------------------\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# TODO: Add possibility to check for specific functions in the library\n\n#\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindPTSCOTCH.cmake" : {
      "ObjectId" : "1396d05824d182d756a15ab9db14397689ea8565",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2016 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find PTSCOTCH include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(PTSCOTCH\n\n#               [REQUIRED]             # Fail with error if ptscotch is not found\n\n#               [COMPONENTS <comp1> <comp2> ...] # dependencies\n\n#              )\n\n#\n\n#  PTSCOTCH depends on the following libraries:\n\n#   - Threads\n\n#   - MPI\n\n#\n\n#  COMPONENTS can be some of the following:\n\n#   - ESMUMPS: to activate detection of PT-Scotch with the esmumps interface\n\n#\n\n# This module finds headers and ptscotch library.\n\n# Results are reported in variables:\n\n#  PTSCOTCH_FOUND            - True if headers and requested libraries were found\n\n#  PTSCOTCH_LINKER_FLAGS     - list of required linker flags (excluding -l and -L)\n\n#  PTSCOTCH_INCLUDE_DIRS     - ptscotch include directories\n\n#  PTSCOTCH_LIBRARY_DIRS     - Link directories for ptscotch libraries\n\n#  PTSCOTCH_LIBRARIES        - ptscotch component libraries to be linked\n\n#  PTSCOTCH_INCLUDE_DIRS_DEP - ptscotch + dependencies include directories\n\n#  PTSCOTCH_LIBRARY_DIRS_DEP - ptscotch + dependencies link directories\n\n#  PTSCOTCH_LIBRARIES_DEP    - ptscotch libraries + dependencies\n\n#  PTSCOTCH_INTSIZE          - Number of octets occupied by a SCOTCH_Num\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DPTSCOTCH=path/to/ptscotch):\n\n#  PTSCOTCH_DIR              - Where to find the base directory of ptscotch\n\n#  PTSCOTCH_INCDIR           - Where to find the header files\n\n#  PTSCOTCH_LIBDIR           - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: PTSCOTCH_DIR, PTSCOTCH_INCDIR, PTSCOTCH_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013-2016 Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the version to find\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# means we look for esmumps library\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# PTSCOTCH depends on Threads, try to find it\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# PTSCOTCH depends on MPI, try to find it\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try to find the ptscotch header in the given paths\n\n# -------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# call cmake macro to find the header path\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Try to find the ptscotch lib in the given paths\n\n# ----------------------------------------------\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# set cmake variables\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# PTSCOTCH\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# MPI\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# THREADS\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 321,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# test link\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# save link with dependencies\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Check the size of SCOTCH_Num\n\n# ---------------------------------\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#stdio.h and stdint.h should be included by scotch.h directly\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# check that PTSCOTCH has been found\n\n# ---------------------------------\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\n\n# TODO: Add possibility to check for specific functions in the library\n\n#\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "cmake/FindPastix.cmake" : {
      "ObjectId" : "470477fdccb95ef8977536589dba5851c16fa7d7",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find PASTIX include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(PASTIX\n\n#               [REQUIRED] # Fail with error if pastix is not found\n\n#               [COMPONENTS <comp1> <comp2> ...] # dependencies\n\n#              )\n\n#\n\n#  PASTIX depends on the following libraries:\n\n#   - Threads, m, rt\n\n#   - MPI\n\n#   - HWLOC\n\n#   - BLAS\n\n#\n\n#  COMPONENTS are optional libraries PASTIX could be linked with,\n\n#  Use it to drive detection of a specific compilation chain\n\n#  COMPONENTS can be some of the following:\n\n#   - MPI: to activate detection of the parallel MPI version (default)\n\n#        it looks for Threads, HWLOC, BLAS, MPI and ScaLAPACK libraries\n\n#   - SEQ: to activate detection of the sequential version (exclude MPI version)\n\n#   - STARPU: to activate detection of StarPU version\n\n#   it looks for MPI version of StarPU (default behaviour)\n\n#   if SEQ and STARPU are given, it looks for a StarPU without MPI\n\n#   - STARPU_CUDA: to activate detection of StarPU with CUDA\n\n#   - STARPU_FXT: to activate detection of StarPU with FxT\n\n#   - SCOTCH: to activate detection of PASTIX linked with SCOTCH\n\n#   - PTSCOTCH: to activate detection of PASTIX linked with SCOTCH\n\n#   - METIS: to activate detection of PASTIX linked with SCOTCH\n\n#\n\n# This module finds headers and pastix library.\n\n# Results are reported in variables:\n\n#  PASTIX_FOUND            - True if headers and requested libraries were found\n\n#  PASTIX_LINKER_FLAGS     - list of required linker flags (excluding -l and -L)\n\n#  PASTIX_INCLUDE_DIRS     - pastix include directories\n\n#  PASTIX_LIBRARY_DIRS     - Link directories for pastix libraries\n\n#  PASTIX_LIBRARIES        - pastix libraries\n\n#  PASTIX_INCLUDE_DIRS_DEP - pastix + dependencies include directories\n\n#  PASTIX_LIBRARY_DIRS_DEP - pastix + dependencies link directories\n\n#  PASTIX_LIBRARIES_DEP    - pastix libraries + dependencies\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DPASTIX_DIR=path/to/pastix):\n\n#  PASTIX_DIR              - Where to find the base directory of pastix\n\n#  PASTIX_INCDIR           - Where to find the header files\n\n#  PASTIX_LIBDIR           - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: PASTIX_DIR, PASTIX_INCDIR, PASTIX_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the version to find\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# means we look for the sequential version of PaStiX (without MPI)\n",
        "Line" : 96,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# means we look for the MPI version of PaStiX (default)\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# means we look for PaStiX with StarPU\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# means we look for PaStiX with StarPU + CUDA\n",
        "Line" : 110,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# means we look for PaStiX with StarPU + FxT\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Dependencies detection\n\n# ----------------------\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Required dependencies\n\n# ---------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add math library to the list of extra\n\n# it normally exists on all common systems provided with a C compiler\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Try to find librt (libposix4 - POSIX.1b Realtime Extensions library)\n\n# on Unix systems except Apple ones because it does not exist on it\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# PASTIX depends on HWLOC\n\n#------------------------\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# PASTIX depends on BLAS\n\n#-----------------------\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Optional dependencies\n\n# ---------------------\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# PASTIX may depend on MPI\n\n#-------------------------\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# allows to use an external mpi compilation by setting compilers with\n\n# -DMPI_C_COMPILER=path/to/mpicc -DMPI_Fortran_COMPILER=path/to/mpif90\n\n# at cmake configure\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# PASTIX may depend on STARPU\n\n#----------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# create list of components in order to make a single call to find_package(starpu...)\n\n# we explicitly need a StarPU version built with hwloc\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# StarPU may depend on MPI\n\n# allows to use an external mpi compilation by setting compilers with\n\n# -DMPI_C_COMPILER=path/to/mpicc -DMPI_Fortran_COMPILER=path/to/mpif90\n\n# at cmake configure\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# set the list of optional dependencies we may discover\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# PASTIX may depends on SCOTCH\n\n#-----------------------------\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# PASTIX may depends on PTSCOTCH\n\n#-------------------------------\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# PASTIX may depends on METIS\n\n#----------------------------\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Error if pastix required and no partitioning lib found\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Looking for PaStiX\n\n# ------------------\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Try to find the pastix header in the given paths\n\n# ---------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Try to find the pastix lib in the given paths\n\n# ------------------------------------------------\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# create list of libs to find\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# set cmake variables (respects naming convention)\n",
        "Line" : 468,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# PASTIX\n",
        "Line" : 491,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# STARPU\n",
        "Line" : 501,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# CUDA\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# MPI\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# HWLOC\n",
        "Line" : 550,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# BLAS\n",
        "Line" : 568,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# SCOTCH\n",
        "Line" : 583,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# PTSCOTCH\n",
        "Line" : 595,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# METIS\n",
        "Line" : 607,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Fortran\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# EXTRA LIBS such that pthread, m, rt\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 644,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# test link\n",
        "Line" : 655,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# save link with dependencies\n",
        "Line" : 662,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# check that PASTIX has been found\n\n# ---------------------------------\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "cmake/FindSPQR.cmake" : {
      "ObjectId" : "1e958c3c1b7210602e2cdb4c4e92d42187f58156",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPQR lib usually requires linking to a blas and lapack library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SPQR lib requires Cholmod, colamd and amd as well. \n\n# FindCholmod.cmake can be used to find those packages before finding spqr\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindScotch.cmake" : {
      "ObjectId" : "89d295ac2eb782e87c3ca8cf003b048c00bb2974",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find SCOTCH include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(SCOTCH\n\n#               [REQUIRED]             # Fail with error if scotch is not found\n\n#               [COMPONENTS <comp1> <comp2> ...] # dependencies\n\n#              )\n\n#\n\n#  COMPONENTS can be some of the following:\n\n#   - ESMUMPS: to activate detection of Scotch with the esmumps interface\n\n#\n\n# This module finds headers and scotch library.\n\n# Results are reported in variables:\n\n#  SCOTCH_FOUND           - True if headers and requested libraries were found\n\n#  SCOTCH_INCLUDE_DIRS    - scotch include directories\n\n#  SCOTCH_LIBRARY_DIRS    - Link directories for scotch libraries\n\n#  SCOTCH_LIBRARIES       - scotch component libraries to be linked\n\n#  SCOTCH_INTSIZE         - Number of octets occupied by a SCOTCH_Num\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DSCOTCH=path/to/scotch):\n\n#  SCOTCH_DIR             - Where to find the base directory of scotch\n\n#  SCOTCH_INCDIR          - Where to find the header files\n\n#  SCOTCH_LIBDIR          - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: SCOTCH_DIR, SCOTCH_INCDIR, SCOTCH_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the version to find\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# means we look for esmumps library\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# SCOTCH may depend on Threads, try to find it\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Try to find the scotch header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Try to find the scotch lib in the given paths\n\n# ----------------------------------------------\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# set cmake variables\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# SCOTCH\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# THREADS\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 275,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# test link\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# save link with dependencies\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Check the size of SCOTCH_Num\n\n# ---------------------------------\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#stdio.h and stdint.h should be included by scotch.h directly\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# check that SCOTCH has been found\n\n# ---------------------------------\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# TODO: Add possibility to check for specific functions in the library\n\n#\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake/FindStandardMathLibrary.cmake" : {
      "ObjectId" : "711b0e4b4f1d82323123088b4ef04cd0836b5f9f",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find how to link to the standard math library, if anything at all is needed to do.\n\n# On most platforms this is automatic, but for example it's not automatic on QNX.\n\n#\n\n# Once done this will define\n\n#\n\n#  STANDARD_MATH_LIBRARY_FOUND - we found how to successfully link to the standard math library\n\n#  STANDARD_MATH_LIBRARY - the name of the standard library that one has to link to.\n\n#                            -- this will be left empty if it's automatic (most platforms).\n\n#                            -- this will be set to \"m\" on platforms where one must explicitly\n\n#                               pass the \"-lm\" linker flag.\n\n#\n\n# Copyright (c) 2010 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# a little test program for c++ math functions.\n\n# notice the std:: is required on some platforms such as QNX\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first try compiling/linking the test program without any linker flags\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the test program linked successfully without any linker flag.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# the test program did not link successfully without any linker flag.\n\n# This is a very uncommon case that so far we only saw on QNX. The next try is the\n\n# standard name 'm' for the standard math library.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# the test program linked successfully when linking to the 'm' library\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# the test program still doesn't link successfully\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/FindSuperLU.cmake" : {
      "ObjectId" : "f38146e06c229d99df6bd80c6b00407e5a69a425",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Umfpack lib usually requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check whether struct mem_usage_t is globally defined\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# at least 5.0\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# at least 4.3\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# at least 4.0\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/FindUmfpack.cmake" : {
      "ObjectId" : "53cf0b49b2e23d3b8e8334e2ee53e69e313f6fbd",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Umfpack lib usually requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindXsmm.cmake" : {
      "ObjectId" : "809d6f414e81a9e71181107d6a9e39e37b860434",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libxsmm support.\n\n# libxsmm provides matrix multiplication kernels optimized for\n\n# the latest Intel architectures.\n\n# Download the library from https://github.com/hfp/libxsmm\n\n# Compile with make BLAS=0\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/RegexUtils.cmake" : {
      "ObjectId" : "b59dfc340f524d25add382306ba143e662baabdb",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/UseEigen3.cmake" : {
      "ObjectId" : "a38bac82d5df40d5cbc086bcdcdcfbece8499919",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#                                               -*- cmake -*-\n\n#\n\n#  UseEigen3.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/language_support.cmake" : {
      "ObjectId" : "2f14f30b843b0dac31ddc6dd3ac901e11101d58d",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/modules/language_support.cmake\n\n#\n\n# Temporary additional general language support is contained within this\n\n# file.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This additional function definition is needed to provide a workaround for\n\n# CMake bug 9220.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On debian testing (cmake 2.6.2), I get return code zero when calling \n\n# cmake the first time, but cmake crashes when running a second time\n\n# as follows:\n\n#\n\n#  -- The Fortran compiler identification is unknown\n\n#  CMake Error at /usr/share/cmake-2.6/Modules/CMakeFortranInformation.cmake:7 (GET_FILENAME_COMPONENT):\n\n#    get_filename_component called with incorrect number of arguments\n\n#  Call Stack (most recent call first):\n\n#    CMakeLists.txt:3 (enable_language)\n\n#\n\n# My workaround is to invoke cmake twice.  If both return codes are zero, \n\n# it is safe to invoke ENABLE_LANGUAGE(Fortran OPTIONAL)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"DEBUG: language = ${language}\")\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Second run\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Temporary tests of the above function.\n\n#workaround_9220(CXX CXX_language_works)\n\n#message(\"CXX_language_works = ${CXX_language_works}\")\n\n#workaround_9220(CXXp CXXp_language_works)\n\n#message(\"CXXp_language_works = ${CXXp_language_works}\")\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "demos/CMakeLists.txt" : {
      "ObjectId" : "b0d2eddbb8eaaf87a668274fbe63bddfb02ac792",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "demos/mandelbrot/CMakeLists.txt" : {
      "ObjectId" : "5c500e064dec6a01c8b203e250f746d26b7e626f",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "demos/opengl/CMakeLists.txt" : {
      "ObjectId" : "299aa441df95a47c84443068c95ad19ecee42516",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "db413bc6569fd4a8e7a08c78ebdb261bc6629d4c",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set some Doxygen flags\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set(EIGEN_DOXY_TAGFILES                 \"\\\"${Eigen_BINARY_DIR}/doc/eigen.doxytags =../\\\"\")\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/examples/CMakeLists.txt" : {
      "ObjectId" : "f7a19055fce2693d956bd3c5b843bf285f12307c",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/snippets/CMakeLists.txt" : {
      "ObjectId" : "1baf32fbac0274410133f90070f21368991c7910",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/special_examples/CMakeLists.txt" : {
      "ObjectId" : "101fbc5f9c769618f2269c4e4547806d18fc7c4a",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "failtest/CMakeLists.txt" : {
      "ObjectId" : "1a73f05e629067a275b3c14d41bb7f4d654fad3c",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lapack/CMakeLists.txt" : {
      "ObjectId" : "9883d4c72d8fdcaa1599c468553281daf5008b65",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download lapack and install sources and testing at the right place\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The following comes from lapack/TESTING/CMakeLists.txt\n\n# Get Python\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  string(REPLACE \"/STACK:10000000\" \"/STACK:900000000000000000\"\n\n#    CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\")\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# ======== SINGLE RFP LIN TESTS ========================\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n#\n\n# ======== SINGLE EIG TESTS ===========================\n\n#\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# ======== DOUBLE LIN TESTS ===========================\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\n\n# ======== DOUBLE RFP LIN TESTS ========================\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# ======== DOUBLE EIG TESTS ===========================\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n# ======== COMPLEX RFP LIN TESTS ========================\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\n\n# ======== COMPLEX EIG TESTS ===========================\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\n\n# ======== COMPLEX16 LIN TESTS ========================\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\n\n# ======== COMPLEX16 RFP LIN TESTS ========================\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#\n\n# ======== COMPLEX16 EIG TESTS ===========================\n",
        "Line" : 361,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# ======== SINGLE-DOUBLE PROTO LIN TESTS ==============\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# ======== COMPLEX-COMPLEX16 LIN TESTS ========================\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "0d9a631a9dd0d46b726703af0e51d5f49fddf029",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "8da51ce577170eb8127a9affce613c3e43a8ab13",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate split test header file only if it does not yet exist\n\n# in order to prevent a rebuild everytime cmake is configured\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check if we have a Fortran compiler\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for a default Lapack library to complete Eigen's one\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# configure blas/lapack (use Eigen's ones)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check that the PASTIX found is a version without MPI\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# # ei_add_test(denseLM)\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# boost MP unit test\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CUDA unit tests\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "unsupported/CMakeLists.txt" : {
      "ObjectId" : "9a5666105a95bfac9c18c2913f14ad74d998162b",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 5,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 1
    },
    "unsupported/Eigen/CMakeLists.txt" : {
      "ObjectId" : "631a060145bd633e573e65e2db885cf78a970a01",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unsupported/Eigen/CXX11/CMakeLists.txt" : {
      "ObjectId" : "385ed240c20773bf47cdfd6765ad6227508a9ae8",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unsupported/Eigen/src/EulerAngles/CMakeLists.txt" : {
      "ObjectId" : "40af550e8a92987c7846e53e22d30c180a368492",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unsupported/doc/CMakeLists.txt" : {
      "ObjectId" : "9e9ab98007eb189f2625f7fdd3c232c2d3da4e3b",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unsupported/doc/examples/CMakeLists.txt" : {
      "ObjectId" : "c47646dfca9d76e45cf929d74508e32698d96ee3",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unsupported/doc/snippets/CMakeLists.txt" : {
      "ObjectId" : "f0c5cc2a84dd65edd575963bf648a1481f9b1dde",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unsupported/test/CMakeLists.txt" : {
      "ObjectId" : "cdf151f156de89e8f7d483d7d77d2035d0845183",
      "LastModified" : "2017-04-14T08:22:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate split test header file only if it does not yet exist\n\n# in order to prevent a rebuild everytime cmake is configured\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this test seems to never have been successful on x87, so is considered to contain a FP-related bug.\n\n# see thread: \"non-linear optimization test summary\"\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: The following test names are prefixed with the cxx11 string, since historically\n\n# the tests depended on c++11. This isn't the case anymore so we ought to rename them.\n\n# FIXME: Old versions of MSVC fail to compile this code, so we just disable these tests\n\n# when using visual studio. We should make the check more strict to enable the tests for\n\n# newer versions of MSVC.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This test requires __uint128_t which is only available on 64bit systems\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# It should be safe to always run these tests as there is some fallback code for\n\n# older compiler that don't support cxx11.\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#  ei_add_test(cxx11_tensor_symmetry)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# These tests needs nvcc\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure to compile without the -pedantic, -Wundef, -Wnon-virtual-dtor\n\n# and -fno-check-new flags since they trigger thousands of compilation warnings\n\n# in the CUDA runtime\n\n# Also remove -ansi that is incompatible with std=c++11.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# otherwise the flag has already been added because of the above set(CMAKE_CXX_STANDARD 11)\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Contractions require arch 3.0 or higher\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# The random number generation code requires arch 3.5 or greater.\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    }
  },
  "FileTypes" : {
    "CMAKE" : 82
  },
  "ElapsedTime" : 8173
}