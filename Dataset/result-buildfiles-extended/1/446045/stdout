{
  "Repository" : "446045",
  "Revision" : "HEAD",
  "ObjectId" : "f2cfd0ca0fe63f5ea4b969b6efc488f4dfee0aa9",
  "CommitTime" : "2019-01-08T06:50:03Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "5592c55053ea70ab6b759f27b7415e9d9d539469",
      "LastModified" : "2018-02-05T10:38:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; tab-width: 2; indent-tabs-mode: t; truncate-lines: t; compile-command: \"cmake -Wdev\" -*-\n\n# vim: set filetype=cmake autoindent tabstop=2 shiftwidth=2 noexpandtab softtabstop=2 nowrap:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########################################################################\n\n#                                                                         #\n\n# Note: The bulk of the build system is located in the cmake/ directory.  #\n\n#       This file only contains the specializations for this particular   #\n\n#       project. Most likely you are interested in editing one of these   #\n\n#       files instead:                                                    #\n\n#                                                                         #\n\n#       dune.module                              Name and version number  #\n\n#       CMakeLists_files.cmake                   Path of source files     #\n\n#       cmake/Modules/${project}-prereqs.cmake   Dependencies             #\n\n#                                                                         #\n\n###########################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mandatory call to project\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# guess the sibling dir\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Try if <module-name>/<build-dir> is used\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We are using build directories named <prefix><module-name><postfix>\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# All modules are in a common build dir\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# not the same location as most of the other projects? this hook overrides\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# project information is in dune.module. Read this file and set variables.\n\n# we cannot generate dune.module since it is read by dunecontrol before\n\n# the build starts, so it makes sense to keep the data there then.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# list of prerequisites for this particular project; this is in a\n\n# separate file (in cmake/Modules sub-directory) because it is shared\n\n# with the find module\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# read the list of components from this file (in the project directory);\n\n# it should set various lists with the names of the files to include\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  interface requires a variable to inspect, a value won't suffice\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# all setup common to the OPM library modules is done here\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# setup extra tests (using helper binaries)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# encode test cases so they can be embedded in the benchmark executables\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Setup static benchmarks\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Copy static benchmarks to main project binary directory\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "CMakeLists_files.cmake" : {
      "ObjectId" : "f4d9a04e027e5a9aba107efccd4ffc03e79ab853",
      "LastModified" : "2018-08-01T09:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up five lists:\n\n#  MAIN_SOURCE_FILES     List of compilation units which will be included in\n\n#                        the library. If it isn't on this list, it won't be\n\n#                        part of the library. Please try to keep it sorted to\n\n#                        maintain sanity.\n\n#\n\n#  TEST_SOURCE_FILES     List of programs that will be run as unit tests.\n\n#\n\n#  TEST_DATA_FILES       Files from the source three that should be made\n\n#                        available in the corresponding location in the build\n\n#                        tree in order to run tests there.\n\n#\n\n#  EXAMPLE_SOURCE_FILES  Other programs that will be compiled as part of the\n\n#                        build, but which is not part of the library nor is\n\n#                        run as tests.\n\n#\n\n#  PUBLIC_HEADER_FILES   List of public header files that should be\n\n#                        distributed together with the library. The source\n\n#                        files can of course include other files than these;\n\n#                        you should only add to this list if the *user* of\n\n#                        the library needs it.\n\n#\n\n# ATTIC_FILES           Unmaintained files. This for the projects developers\n\n#                       only. Don't expect these files to build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# originally generated with the command:\n\n# find tests -name '*.cpp' -a ! -wholename '*/not-unit/*' -printf '\\t%p\\n' | sort\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# originally generated with the command:\n\n# find tests -name '*.xml' -a ! -wholename '*/not-unit/*' -printf '\\t%p\\n' | sort\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# originally generated with the command:\n\n# find examples -name '*.c*' -a ! -name 'twophase2_test.cpp' -printf '\\t%p\\n' | sort\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# programs listed here will not only be compiled, but also marked for\n\n# installation\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# originally generated with the command:\n\n# find opm -name '*.h*' -a ! -name '*-pch.hpp' -printf '\\t%p\\n' | sort\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "3755a10fe041fa4f483b1faa958e037eb132d7eb",
      "LastModified" : "2013-02-22T22:25:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is included after opm-core_NAME is set\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "EmbedCases.cmake" : {
      "ObjectId" : "a4d675f2a0c356364361a5df09185c447522b38f",
      "LastModified" : "2015-10-20T08:41:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; tab-width: 2; indent-tabs-mode: t; truncate-lines: t; compile-command: \"cmake -Wdev\" -*-\n\n# vim: set filetype=cmake autoindent tabstop=2 shiftwidth=2 noexpandtab softtabstop=2 nowrap:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# put the output in the same relative path in the output; we then\n\n# get no change if we build in-source\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# make sure that the output directory exists\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# run the shell script to encode the file\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# cannot add files to targets other than in add_custom_target,\n\n# and that command can only run once, so we must return a list\n\n# of dependencies that is added\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# each case consists of a .grdecl file and a .data file\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we cannot add files directly (sic) but must wrap in a target\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# rel.perm curve is packed separately because it is common for all cases\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# pack these cases which are alternatives in the code\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "compareUpscaling.cmake" : {
      "ObjectId" : "acdb998d1039781d088be2ffe84d8bb18711e602",
      "LastModified" : "2018-08-01T09:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add tests to check if the upscaling binaries calculates correctly\n\n#\n\n# Tests are added in two steps (see already added tests below for examples):\n\n#\n\n#    1) Add test that runs the binary and output results to a file:\n\n#       add_test(<testname> <command>)\n\n#       <command> refers to the command used to run the binary with input variables in a terminal\n\n#\n\n#    2) Add test that compares the output from the previous test:\n\n#       add_test(<testname> ${PROJECT_BINARY_DIR}/bin/compare_upscaling_results <path_to_refSoln> <path_to_newSoln>\n\n#                ${tol} <number_of_result_rows> <number_of_result_cols>)\n\n#       This test should depend on the first test, so include:\n\n#       set_tests_properties(<test1> PROPERTIES DEPENDS <test2>)\n\n#\n\n# Some naming conventions:\n\n#    The first test should be named:  run_<binary_name>_<options>_<model_name>\n\n#    The second test:                 compare_<binary_name>_<options>_<model_name>\n\n#\n\n# Test models and reference solutions are available in ${PROJECT_BINARY_DIR}/tests/input_data.\n\n# New test data can be made available in the build tree by including them in CMakeLists_files.cmake,\n\n# under 'APPEND TEST_SOURCE_FILES'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set absolute tolerance to be used for testing\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define some paths\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###########################################################################\n\n# TEST: upscale_perm\n\n###########################################################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Define macro that performs the two steps mentioned above for upscale_perm\n\n# Input:\n\n#   - gridname: basename (no extension) of grid model\n\n#   - bcs: Boundary condition type (f, l or p, or combinations of these)\n\n#   - rows: Number of rows in result file that is to be compared\n\n# This macro assumes that ${gridname}.grdecl is found in directory ${INPUT_DATA_PATH}grids/\n\n# and that upscale_perm_BC${bcs}_${gridname}.txt is found in ${INPUT_DATA_PATH}reference_solutions\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add test that runs upscale_perm and outputs the results to file\n\n# Ensure unique output folder per test (because this folder is deleted in the test driver script)\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "###########################################################################\n\n# TEST: upscale_relperm\n\n###########################################################################\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Define macro that performs the two steps mentioned above for upscale_relperm\n\n# Input:\n\n#   - gridname: basename (no extension) of grid model\n\n#   - rows: Number of rows in result file that is to be compared\n\n# This macro assumes that ${gridname}.grdecl is found in directory ${INPUT_DATA_PATH}grids/\n\n# and that upscale_perm_BC${bcs}_${gridname}.txt is found in ${INPUT_DATA_PATH}reference_solutions\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add test that runs upscale_perm and outputs the results to file\n\n# Ensure unique output folder per test (because this folder is deleted in the test driver script)\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "###########################################################################\n\n# TEST: upscale_elasticity\n\n###########################################################################\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Define macro that performs the two steps mentioned above for upscale_elasticity\n\n# Input:\n\n#   - gridname: basename (no extension) of grid model\n\n#   - method: method to apply\n\n# This macro assumes that ${gridname}.grdecl is found in directory ${INPUT_DATA_PATH}grids/\n\n# and that upscale_elasticity_${method}_${gridname}.txt is found in ${INPUT_DATA_PATH}reference_solutions\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add test that runs upscale_elasticity and outputs the results to file\n\n# Ensure unique output folder per test (because this folder is deleted in the test driver script)\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# TEST: cpchop\n\n###########################################################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Define macro that performs the two steps mentioned above for cpchop\n\n# Input:\n\n#   - gridname: basename (no extension) of grid model\n\n# This macro assumes that ${gridname}.grdecl is found in directory ${INPUT_DATA_PATH}grids/\n\n# and that cpcho_${gridname}.txt is found in ${INPUT_DATA_PATH}reference_solutions\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add test that runs cpchop and outputs the results to file\n\n# Ensure unique output folder per test (because this folder is deleted in the test driver script)\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Make sure that we build the helper executable before running tests\n\n# (the \"tests\" target is setup in OpmLibMain.cmake)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add tests for different models\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add tests for different models\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "opm-upscaling-prereqs.cmake" : {
      "ObjectId" : "1db5febd862fe4f16ca20523a69fb103844c9804",
      "LastModified" : "2018-08-21T06:19:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# defines that must be present in config.h for our headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# dependencies\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compile with C99 support if available\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# compile with C++0x/11 support if available\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# various runtime library enhancements\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# matrix library\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# solver\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# DUNE dependency\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 1586
}