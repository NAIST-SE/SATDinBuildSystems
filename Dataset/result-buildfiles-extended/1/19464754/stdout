{
  "Repository" : "19464754",
  "Revision" : "HEAD",
  "ObjectId" : "2c1e5ae14bc3313773de2510940bc53e73445771",
  "CommitTime" : "2019-04-06T18:37:33Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "0bc01bb0192f9e22e9d41699a83eabeca7a47aab",
      "LastModified" : "2018-10-16T16:06:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "lib/gbenchmark/CMakeLists.txt" : {
      "ObjectId" : "4c107937ef2dbc0f1215d2f7e1e6596980f5f367",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n\n# Support no if() IN_LIST operator\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n\n# may require downloading the source code.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This option can be used to disable building and running unit tests which depend on gtest\n\n# in cases where it is not possible to build or find a valid version of gtest.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: The --coverage flag needs to be removed when building assembly\n\n# tests for this to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 48,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# This option disables the building and running of the assembly verification tests\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 149,
        "CharPositionInLine" : 52
      },
      "17" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Coverage build type\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Set up directories\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Build the targets\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "lib/gbenchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "d0d2099814402a3fc54ed2be2b61cd4f31d5c5f7",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add -Werror to ensure the compiler generates an error if the warning flag\n\n# doesn't exist.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "lib/gbenchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "c4c4d660f1eba1a484fcd2c2c11f7e94115ace31",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/gbenchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "8dd948004597acda5a70464ac01bf810747f55ff",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "lib/gbenchmark/cmake/HandleGTest.cmake" : {
      "ObjectId" : "3ebe9f32f0d806de5afe52bd691ae7a9c232e5b6",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Since 10/Feb/2017 the googletest trunk has had a bug where\n\n# -Werror=unused-function fires during the build on OS X. This is a temporary\n\n# workaround to keep our travis bots from failing. It should be removed\n\n# once gtest is fixed.\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use gmock_main instead of gtest_main because it initializes gtest as well.\n\n# Note: The libraries are listed in reverse order of their dependancies.\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8 and older don't respect INTERFACE_INCLUDE_DIRECTORIES, so we\n\n# have to add the paths ourselves.\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# FIXME: We don't currently require the gmock library to build the tests,\n\n# and it's likely we won't find it, so we don't try. As long as we've\n\n# found the gmock/gmock.h header and gtest_main that should be good enough.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "lib/gbenchmark/cmake/llvm-toolchain.cmake" : {
      "ObjectId" : "fc119e52fd26a59786b3480f3e6c64c72b78ad8d",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/gbenchmark/src/CMakeLists.txt" : {
      "ObjectId" : "836549e3caedeb884ff9a05cf35e83d1f014116e",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need extra libraries on Solaris\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "lib/gbenchmark/test/AssemblyTests.cmake" : {
      "ObjectId" : "d8f321aa61430b97a45b60cc73fb80c637ab293b",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/gbenchmark/test/BUILD" : {
      "ObjectId" : "2b3a391296f82f4f5dcc6782569ece698e806de9",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "#    \"-Wshorten-64-to-32\",",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some of the issues with DoNotOptimize only occur when optimization is enabled",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# FIXME: Add support for assembly tests to bazel.\n# See Issue #556\n# https://github.com/google/benchmark/issues/556",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "lib/gbenchmark/test/CMakeLists.txt" : {
      "ObjectId" : "63c0e58ef35886d7ac1709a7957639bf82035a81",
      "LastModified" : "2018-04-26T17:03:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Some tests use `<cassert>` to perform the test. Therefore we must\n\n# strip -DNDEBUG from the default CMake flags in DEBUG mode.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: These flags must be added after find_package(Threads REQUIRED) otherwise\n\n# they will break the configuration check.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Demonstration executable\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some of the issues with DoNotOptimize only occur when optimization is enabled\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# libstdc++ provides different definitions within <map> between dialects. When\n\n# LTO is enabled and -Werror is specified GCC diagnoses this ODR violation\n\n# causing the test to fail to compile. To prevent this we explicitly disable\n\n# the warning.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Attempt to work around flaky test failures when running on Appveyor servers.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################\n\n# GoogleTest Unit Tests\n\n###############################################################################\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Assembly Unit Tests\n\n###############################################################################\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################\n\n# Code Coverage Configuration\n\n###############################################################################\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the coverage command(s)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "lib/llvm/Makefile" : {
      "ObjectId" : "ab04d5ca9984dc0f91fd278fb0f8809cbec05fe7",
      "LastModified" : "2019-04-04T16:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Build llvm library\n\n#  See README.md and `make help` for instructions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set LLVM_CFG if not set\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set LLVM_RULES if not set\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for readlink or greadlink\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include configuration\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some defaults\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# There must always be a LLVM_CHECKOUT_REF\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If no LLVM_TGT_TAG build one\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Define the list of projects to build\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use the passed list\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Use empty list which means only LLVM is created\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# If no target is given the default is llvm-default and if\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# distclean needs nothing else initialized\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# nothing to init\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Output some debug before running any recepies\n\n#$(info lib/llvm/Makefile MAKECMDGOALS=\"$(MAKECMDGOALS)\")\n\n#$(info lib/llvm/Makefile LLVM_CFG=\"$(LLVM_CFG)\")\n\n#$(info lib/llvm/Makefile LLVM_RULES=\"$(LLVM_RULES)\")\n\n#$(info lib/llvm/Makefile LLVM_CHECKOUT_REF=\"$(LLVM_CHECKOUT_REF)\")\n\n#$(info lib/llvm/Makefile LLVM_READ_LINK=\"$(LLVM_READ_LINK)\")\n\n#$(info lib/llvm/Makefile LLVM_TGT_TAG=\"$(LLVM_TGT_TAG)\")\n\n#$(info lib/llvm/Makefile LLVM_TGT_DIR=\"$(LLVM_TAG_DIR)\")\n\n#$(info lib/llvm/Makefile LLVM_BUILD_ENGINE=\"$(LLVM_BUILD_ENGINE)\")\n\n#$(info lib/llvm/Makefile LLVM_BUILD_TYPE=\"$(LLVM_BUILD_TYPE)\")\n\n#$(info lib/llvm/Makefile LLVM_LINKER=\"$(LLVM_LINKER)\")\n\n#$(info lib/llvm/Makefile LLVM_USE_LINKER=\"$(LLVM_USE_LINKER)\")\n\n#$(info lib/llvm/Makefile LLVM_SRC_DIR=\"$(LLVM_SRC_DIR)\")\n\n#$(info lib/llvm/Makefile LLVM_BUILD_DIR=\"$(LLVM_BUILD_DIR)\")\n\n#$(info lib/llvm/Makefile LLVM_INSTALL_DIR=\"$(LLVM_INSTALL_DIR)\")\n\n#$(info lib/llvm/Makefile LLVM_INSTALL_DIR_SYMLINK=\"$(LLVM_INSTALL_DIR_SYMLINK)\")\n\n#$(info lib/llvm/Makefile GET_LLVM_SRC_TARGET=\"$(GET_LLVM_SRC_TARGET)\")\n\n#$(info lib/llvm/Makefile LLVM_PROJECT_LIST=\"$(LLVM_PROJECT_LIST)\")\n\n#$(info lib/llvm/Makefile PROJECT_LIST=\"$(PROJECT_LIST)\")\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Include the rules\n\n#  Having LLVM_RULES a separate file allows it to be specified\n\n#  in the xxx.cfg file and thus define its define its own rules.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "MAKEFILE" : 2,
    "BAZEL" : 1
  },
  "ElapsedTime" : 4530
}