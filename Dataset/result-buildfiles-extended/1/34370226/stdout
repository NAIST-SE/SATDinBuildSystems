{
  "Repository" : "34370226",
  "Revision" : "HEAD",
  "ObjectId" : "82ce59757387956d94b7e88570bf4f11f0c1c897",
  "CommitTime" : "2019-04-12T17:30:02Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "5f46008edb44cab10619688a5a6efd5a8b8043b7",
      "LastModified" : "2019-01-06T01:54:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Make hacks\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set target, configuration, version and destination folders\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set tools\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use clang if it's available.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# To force use of the Unix version instead of the Windows version\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set compilation and linkage flags based on target, platform and configuration\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Seems like Microsoft deprecated every single LIBC function\n",
        "Line" : 81,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "# Define our targets\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Get a list of our source files and their respective object file targets\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Automatic dependency generation\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Compilation rules\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# HexFiend requires more flags\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Cocoa Port\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Quick Look generator\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Currently, SameBoy.app includes two \"copies\" of each Core .o file once in the app itself and\n\n# once in the QL Generator. It should probably become a dylib instead.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# cgb_boot_fast.bin is not a standard boot ROM, we don't expect it to exist in the user-provided\n\n# boot ROM directory.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# SDL Port\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Unix versions build only one binary\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Windows version builds two, one with a conole and one without it\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# We must provide SDL2.dll with the Windows port.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Tester\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Boot ROMs\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Libretro Core (uses its own build system)\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Clean\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "libretro/Makefile" : {
      "ObjectId" : "75ddfc6c6da24f48affe2d62e69c5147f64094ab",
      "LastModified" : "2019-02-15T12:12:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# system platform\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nintendo Switch (libtransistor)\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Nintendo WiiU\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Windows MSVC 2017 all architectures\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# To force use of the Unix version instead of the Windows version\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# turns out od is posix, hexdump is not hence is less portable\n\n# this is still rather ugly and could be done better I guess\n",
        "Line" : 289,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6,
      "Errorlog" : "line 183:72 token recognition error at: '\\S'\nline 183:81 token recognition error at: '\\W'\nline 183:93 token recognition error at: '\\M'\nline 183:103 token recognition error at: '\\M'\nline 183:118 token recognition error at: '\\W'\nline 183:126 token recognition error at: '\\v'\nline 184:71 token recognition error at: '\\S'\nline 184:80 token recognition error at: '\\W'\nline 184:92 token recognition error at: '\\M'\nline 184:102 token recognition error at: '\\M'\nline 184:117 token recognition error at: '\\W'\nline 184:125 token recognition error at: '\\v'\nline 185:72 token recognition error at: '\\S'\nline 185:81 token recognition error at: '\\M'\nline 185:91 token recognition error at: '\\M'\nline 185:106 token recognition error at: '\\W'\nline 185:114 token recognition error at: '\\v'\nline 186:71 token recognition error at: '\\S'\nline 186:80 token recognition error at: '\\M'\nline 186:90 token recognition error at: '\\M'\nline 186:105 token recognition error at: '\\W'\nline 186:113 token recognition error at: '\\v'\nline 212:50 token recognition error at: '\"$(WindowsSdkDir)\\I'\nline 212:96 token recognition error at: '\\s'\nline 213:65 token recognition error at: '\\I'\nline 213:94 token recognition error at: '\\u'\nline 214:63 token recognition error at: '\\I'\nline 214:92 token recognition error at: '\\u'\nline 215:61 token recognition error at: '\\L'\nline 215:86 token recognition error at: '\\u'\nline 216:59 token recognition error at: '\\L'\nline 216:84 token recognition error at: '\\u'\nline 219:17 token recognition error at: '\" opening a shared library), and vice-versa.\\n\\t# Work around it for now by using the strictly x86 compiler for x86, and x64 for x64.\\n\\t# NOTE: What about ARM?\\n\\tifneq (,$(findstring x64,$(TargetArchMoniker)))\\n\\t\\tVCCompilerToolsBinDir := $(VcCompilerToolsDir)\\b'\nline 223:52 token recognition error at: '\\H'\nline 225:48 token recognition error at: '\\b'\nline 225:52 token recognition error at: '\\H'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1418
}