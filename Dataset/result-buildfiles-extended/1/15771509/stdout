{
  "Repository" : "15771509",
  "Revision" : "HEAD",
  "ObjectId" : "982e569233fac4c1e3b984611fe52bdb991d82ec",
  "CommitTime" : "2018-11-05T20:09:13Z",
  "Files" : {
    ".cmake/Modules/Capabilities.cmake" : {
      "ObjectId" : "64a60ee95ec273aab03bb6f17945f81e2e002a90",
      "LastModified" : "2017-07-16T17:54:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set definitions\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for packages\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for functions\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check thread API\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check for C++11\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Valgrind support\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    ".cmake/Modules/Coveralls.cmake" : {
      "ObjectId" : "42503973103a563c8300da9a68fce806dfce33e6",
      "LastModified" : "2015-07-30T11:11:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The MIT License (MIT)\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# Copyright (C) 2014 Joakim Söderberg <joakim.soderberg@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# must be outside coveralls_setup() to get correct path\n",
        "Line" : 25,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "#\n\n# Param _COVERAGE_SRCS\tA list of source files that coverage should be collected for.\n\n# Param _COVERALLS_UPLOAD Upload the result to coveralls?\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# When passing a CMake list to an external process, the list\n\n# will be converted from the format \"1;2;3\" to \"1 2 3\".\n\n# This means the script we're calling won't see it as a list\n\n# of sources, but rather just one long path. We remedy this\n\n# by replacing \";\" with \"*\" and then reversing that in the script\n\n# that we're calling.\n\n# http://cmake.3232098.n2.nabble.com/Passing-a-CMake-list-quot-as-is-quot-to-a-custom-target-td6505681.html\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#message(\"Coverage sources: ${COVERAGE_SRCS}\")\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Zero the coverage counters.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Run regress tests.\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Generate Gcov and translate it into coveralls JSON.\n\n# We do this by executing an external CMake script.\n\n# (We don't want this to run at CMake generation time, but after compilation and everything has run).\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: This is passed like: \"a b c\", not \"a;b;c\"\n",
        "Line" : 75,
        "CharPositionInLine" : 39
      },
      "9" : {
        "Text" : "# Upload the JSON to coveralls.\n",
        "Line" : 95,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 10
    },
    ".cmake/Modules/CoverallsClear.cmake" : {
      "ObjectId" : "7206886c70d0ceba003cd5ecf6dbf201293cd311",
      "LastModified" : "2015-07-30T11:11:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The MIT License (MIT)\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# Copyright (C) 2014 Joakim Söderberg <joakim.soderberg@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# do not follow symlinks in file(GLOB_RECURSE ...)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    ".cmake/Modules/CoverallsGenerateGcov.cmake" : {
      "ObjectId" : "29720ff4d801246257657c2ccfad2e7d6a06fa47",
      "LastModified" : "2016-03-06T12:45:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The MIT License (MIT)\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# Copyright (C) 2014 Joakim Söderberg <joakim.soderberg@gmail.com>\n\n#\n\n# This is intended to be run by a custom target in a CMake project like this.\n\n# 0. Compile program with coverage support.\n\n# 1. Clear coverage data. (Recursively delete *.gcda in build dir)\n\n# 2. Run the unit tests.\n\n# 3. Run this script specifying which source files the coverage should be performed on.\n\n#\n\n# This script will then use gcov to generate .gcov files in the directory specified\n\n# via the COV_PATH var. This should probably be the same as your cmake build dir.\n\n#\n\n# It then parses the .gcov files to convert them into the Coveralls JSON format:\n\n# https://coveralls.io/docs/api\n\n#\n\n# Example for running as standalone CMake script from the command line:\n\n# (Note it is important the -P is at the end...)\n\n# $ cmake -DCOV_PATH=$(pwd) \n\n#         -DCOVERAGE_SRCS=\"catcierge_rfid.c;catcierge_timer.c\" \n\n#         -P ../cmake/CoverallsGcovUpload.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Make sure we have the needed arguments.\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Since it's not possible to pass a CMake list properly in the\n\n# \"1;2;3\" format to an external process, we have replaced the\n\n# \";\" with \"*\", so reverse that here so we get it back into the\n\n# CMake list format.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# convert all paths in COVERAGE_SRCS to absolute paths\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Fill in git remote data\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Branch.\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "############################# Macros #########################################\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# This macro converts from the full path format gcov outputs:\n\n#\n\n#    /path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n#\n\n# to the original source file path the .gcov is for:\n\n#\n\n#   /path/to/project/root/subdir/the_file.c\n\n#\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# /path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov \n\n# -> \n\n# #path#to#project#root#subdir#the_file.c.gcov   \n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# #path#to#project#root#subdir#the_file.c.gcov -> /path/to/project/root/subdir/the_file.c\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "##############################################################################\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Get the coverage data.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Get a list of all the object directories needed by gcov\n\n# (The directories the .gcda files and .o files are found in)\n\n# and run gcov on those.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# The -p below refers to \"Preserve path components\",\n\n# This means that the generated gcov filename of a source file will\n\n# keep the original files entire filepath, but / is replaced with #.\n\n# Example:\n\n#\n\n# /path/to/project/root/build/CMakeFiles/the_file.dir/subdir/the_file.c.gcda\n\n# ------------------------------------------------------------------------------\n\n# File '/path/to/project/root/subdir/the_file.c'\n\n# Lines executed:68.34% of 199\n\n# /path/to/project/root/subdir/the_file.c:creating '#path#to#project#root#subdir#the_file.c.gcov'\n\n#\n\n# If -p is not specified then the file is named only \"the_file.c.gcov\"\n\n#\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# TODO: Make these be absolute path\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get only the filenames to use for filtering.\n\n#set(COVERAGE_SRCS_NAMES \"\")\n\n#foreach (COVSRC ${COVERAGE_SRCS})\n\n#\tget_filename_component(COVSRC_NAME ${COVSRC} NAME)\n\n#\tmessage(\"${COVSRC} -> ${COVSRC_NAME}\")\n\n#\tlist(APPEND COVERAGE_SRCS_NAMES \"${COVSRC_NAME}\")\n\n#endforeach()\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Filter out all but the gcov files we want.\n\n#\n\n# We do this by comparing the list of COVERAGE_SRCS filepaths that the\n\n# user wants the coverage data for with the paths of the generated .gcov files,\n\n# so that we only keep the relevant gcov files.\n\n#\n\n# Example:\n\n# COVERAGE_SRCS =\n\n#\t\t\t\t/path/to/project/root/subdir/the_file.c\n\n#\n\n# ALL_GCOV_FILES =\n\n#\t\t\t\t/path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n#\t\t\t\t/path/to/project/root/build/#path#to#project#root#subdir#other_file.c.gcov\n\n# \n\n# Result should be:\n\n# GCOV_FILES = \n\n#\t\t\t\t/path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n#\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#message(\"Look in coverage sources: ${COVERAGE_SRCS}\")\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# /path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov \n\n# -> \n\n# /path/to/project/root/subdir/the_file.c \n",
        "Line" : 246,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Is this in the list of source files?\n\n# TODO: We want to match against relative path filenames from the source file root...\n",
        "Line" : 253,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# We remove it from the list, so we don't bother searching for it again.\n\n# Also files left in COVERAGE_SRCS_REMAINING after this loop ends should\n\n# have coverage data generated from them (no lines are covered).\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# TODO: Enable setting these\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Read the GCOV files line by line and get the coverage data.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The new coveralls API doesn't need the entire source (Yay!)\n\n# However, still keeping that part for now. Will cleanup in the future.\n",
        "Line" : 313,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Loads the gcov file as a list of lines.\n\n# (We first open the file and replace all occurences of [] with _\n\n#  because CMake will fail to parse a line containing unmatched brackets...\n\n#  also the \\ to escaped \\n in macros screws up things.)\n\n# https://public.kitware.com/Bug/view.php?id=15369\n",
        "Line" : 318,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Remove file contents to avoid encoding issues (cmake 2.8 has no ENCODING option)\n",
        "Line" : 328,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Instead of trying to parse the source from the\n\n# gcov file, simply read the file contents from the source file.\n\n# (Parsing it from the gcov is hard because C-code uses ; in many places\n\n#  which also happens to be the same as the CMake list delimeter).\n",
        "Line" : 335,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# According to http://json.org/ these should be escaped as well.\n\n# Don't know how to do that in CMake however...\n\n#string(REPLACE \"\\b\" \"\\\\\\\\b\" GCOV_FILE_SOURCE \"${GCOV_FILE_SOURCE}\")\n\n#string(REPLACE \"\\f\" \"\\\\\\\\f\" GCOV_FILE_SOURCE \"${GCOV_FILE_SOURCE}\")\n\n#string(REGEX REPLACE \"\\u([a-fA-F0-9]{4})\" \"\\\\\\\\u\\\\1\" GCOV_FILE_SOURCE \"${GCOV_FILE_SOURCE}\")\n",
        "Line" : 346,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# We want a json array of coverage data as a single string\n\n# start building them from the contents of the .gcov\n",
        "Line" : 352,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Line number for the .gcov.\n",
        "Line" : 356,
        "CharPositionInLine" : 24
      },
      "30" : {
        "Text" : "#message(\"${GCOV_LINE}\")\n\n# Example of what we're parsing:\n\n# Hitcount  |Line | Source\n\n# \"        8:   26:        if (!allowed || (strlen(allowed) == 0))\"\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Check if we should exclude lines using the Lcov syntax.\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Lines with 0 line numbers are metadata and can be ignored.\n",
        "Line" : 399,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Translate the hitcount into valid JSON values.\n",
        "Line" : 405,
        "CharPositionInLine" : 5
      },
      "34" : {
        "Text" : "# Advanced way of removing the trailing comma in the JSON array.\n\n# \"[1, 2, 3, \" -> \"[1, 2, 3\"\n",
        "Line" : 427,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Append the trailing ] to complete the JSON array.\n",
        "Line" : 431,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Generate the final JSON for this file.\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Loop through all files we couldn't find any coverage for\n\n# as well, and generate JSON for those as well with 0% coverage.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Set variables for json replacement\n",
        "Line" : 445,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# Loads the source file as a list of lines.\n",
        "Line" : 450,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Remove trailing comma, and complete JSON array with ]\n",
        "Line" : 466,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Generate the final JSON for this file.\n",
        "Line" : 470,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Get rid of trailing comma.\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Generate the final complete JSON!\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 44
    },
    ".cmake/Modules/Cram.cmake" : {
      "ObjectId" : "cf0eab3726e565b6d840587082964ab46f96ba43",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    ".cmake/Modules/DebConfig.cmake" : {
      "ObjectId" : "1e37c09ddd5ea87389ba98acbdf55f596c724f55",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build a Debian package for Launchpad\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    ".cmake/Modules/DebSourcePPA.cmake" : {
      "ObjectId" : "e1185acd0b3ce1e368db74342fd4df24d1351bc7",
      "LastModified" : "2016-03-06T12:45:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Debian Source Package Generator\n\n#\n\n# Copyright (c) 2010 Daniel Pfeifer <daniel@pfeifer-mail.de>\n\n# Many modifications by Rosen Diankov <rosen.diankov@gmail.com>\n\n#\n\n# Creates source debian files and manages library dependencies\n\n#\n\n# Features:\n\n# \n\n# - Automatically generates symbols and run-time dependencies from the build dependencies\n\n# - Custom copy of source directory via CPACK_DEBIAN_PACKAGE_SOURCE_COPY\n\n# - Simultaneous output of multiple debian source packages for each distribution\n\n# - Can specificy distribution-specific dependencies by suffixing DEPENDS with _${DISTRO_NAME}, for example: CPACK_DEBIAN_PACKAGE_DEPENDS_LUCID, CPACK_COMPONENT_MYCOMP0_DEPENDS_LUCID\n\n#\n\n# Usage:\n\n#\n\n# set(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake)\n\n# set(CPACK_DEBIAN_PACKAGE_PRIORITY optional)\n\n# set(CPACK_DEBIAN_PACKAGE_SECTION devel)\n\n# set(CPACK_DEBIAN_CMAKE_OPTIONS \"-DMYOPTION=myvalue\")\n\n# set(CPACK_DEBIAN_PACKAGE_DEPENDS mycomp0 mycomp1 some_ubuntu_package)\n\n# set(CPACK_DEBIAN_PACKAGE_DEPENDS_UBUNTU_LUCID mycomp0 mycomp1 lucid_specific_package)\n\n# set(CPACK_DEBIAN_PACKAGE_NAME mypackage)\n\n# set(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES unnecessary_file unnecessary_dir/file0)\n\n# set(CPACK_DEBIAN_PACKAGE_SOURCE_COPY svn export --force) # if using subversion\n\n# set(CPACK_DEBIAN_DISTRIBUTION_NAME ubuntu)\n\n# set(CPACK_DEBIAN_DISTRIBUTION_RELEASES karmic lucid maverick natty)\n\n# set(CPACK_DEBIAN_CHANGELOG \"  * Extra change log lines\")\n\n# set(CPACK_DEBIAN_PACKAGE_SUGGESTS \"ipython\")\n\n# set(CPACK_COMPONENT_X_RECOMMENDS \"recommended-package\")\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DEBIAN/control\n\n# debian policy enforce lower case for package name\n\n# Package: (mandatory)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Section: (recommended)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Priority: (recommended)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# remove unnecessary folders\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create the original source tar\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##############################################################################\n\n# debian/control\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "##############################################################################\n\n# debian/copyright\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "##############################################################################\n\n# debian/rules\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# for reducing size\n",
        "Line" : 290,
        "CharPositionInLine" : 18
      },
      "10" : {
        "Text" : "##############################################################################\n\n# debian/compat\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "##############################################################################\n\n# debian/source/format\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "##############################################################################\n\n# debian/changelog\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "##############################################################################\n\n# debuild -S\n",
        "Line" : 333,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "##############################################################################\n\n# dput ppa:your-lp-id/ppa <source.changes>\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    ".cmake/Modules/DebUpload.cmake" : {
      "ObjectId" : "1f2de8e14fba4d09e3e788612ee22ed8b1bcbed9",
      "LastModified" : "2016-12-07T13:26:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add toolchain patch number for incremental deb builds\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    ".cmake/Modules/FindBoxFort.cmake" : {
      "ObjectId" : "82249178a922988054e12a6b324209ea9ff29319",
      "LastModified" : "2016-12-07T13:26:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find boxfort\n\n# Find the native boxfort headers and libraries.\n\n#\n\n# BOXFORT_INCLUDE_DIRS\t- where to find smart_ptr.h, etc.\n\n# BOXFORT_LIBRARIES\t- List of libraries when using boxfort.\n\n# BOXFORT_FOUND\t- True if boxfort has been found.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set BOXFORT_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    ".cmake/Modules/FindDyncall.cmake" : {
      "ObjectId" : "b9b0ebb4b2b5f23142045fea41b13f85b3f14f6a",
      "LastModified" : "2016-12-07T13:26:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find dyncall\n\n# Find the native libcsptr headers and libraries.\n\n#\n\n# DYNCALL_INCLUDE_DIRS\t- where to find smart_ptr.h, etc.\n\n# DYNCALL_LIBRARIES\t- List of libraries when using libcsptr.\n\n# DYNCALL_FOUND\t- True if libcsptr has been found.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set DYNCALL_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    ".cmake/Modules/FindLibcsptr.cmake" : {
      "ObjectId" : "f8d24598d0fe2afa6910b9cacce80f5b86a870f2",
      "LastModified" : "2016-12-07T13:26:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find libcsptr\n\n# Find the native libcsptr headers and libraries.\n\n#\n\n# CSPTR_INCLUDE_DIRS\t- where to find smart_ptr.h, etc.\n\n# CSPTR_LIBRARIES\t- List of libraries when using libcsptr.\n\n# CSPTR_FOUND\t- True if libcsptr has been found.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set CSPTR_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    ".cmake/Modules/FindLibgit2.cmake" : {
      "ObjectId" : "7ea86b903669a0513c0e611cc7ea1555c59b1e60",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the libgit2 library\n\n# Once done this will define\n\n#\n\n#  LIBGIT2_FOUND - System has libgit2\n\n#  LIBGIT2_INCLUDE_DIR - The libgit2 include directory\n\n#  LIBGIT2_LIBRARIES - The libraries needed to use libgit2\n\n#  LIBGIT2_DEFINITIONS - Compiler switches required for using libgit2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n\n#FIND_PACKAGE(PkgConfig)\n\n#PKG_SEARCH_MODULE(PC_LIBGIT2 libgit2)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    ".cmake/Modules/FindLibintl.cmake" : {
      "ObjectId" : "90c9d85b35e351c74793aa30bdd9fd39c23b3738",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Libintl functionality\n\n# Once done this will define\n\n#\n\n#  LIBINTL_FOUND - system has Libintl\n\n#  LIBINTL_INCLUDE_DIR - Libintl include directory\n\n#  LIBINTL_LIBRARIES - Libraries needed to use Libintl\n\n#\n\n# TODO: This will enable translations only if Gettext functionality is\n\n# present in libc. Must have more robust system for release, where Gettext\n\n# functionality can also reside in standalone Gettext library, or the one\n\n# embedded within kdelibs (cf. gettext.m4 from Gettext source).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Chusslove Illich, <caslav.ilic@gmx.net>\n\n# Copyright (c) 2007, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    ".cmake/Modules/FindNanomsg.cmake" : {
      "ObjectId" : "29d1d449d4c37f9de9fa90c822b8bac9cc16d644",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find nanomsg\n\n# Find the native nanomsg headers and libraries.\n\n#\n\n# NANOMSG_INCLUDE_DIRS\t- where to find smart_ptr.h, etc.\n\n# NANOMSG_LIBRARIES\t- List of libraries when using nanomsg.\n\n# NANOMSG_FOUND\t- True if nanomsg has been found.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set NANOMSG_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    ".cmake/Modules/Gcov.cmake" : {
      "ObjectId" : "a9e69a9fa70b0c40c895a804361b52706207e314",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file(GLOB_RECURSE GCNO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/*.gcno\")\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#execute_process(\n\n#    COMMAND ${GCOV_EXECUTABLE} -lcp ${GCNO_FILES}\n\n#    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n\n#)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    ".cmake/Modules/GettextTranslate.cmake" : {
      "ObjectId" : "acf8023aed39c2ebc2b67d1d6a4f6645402e4ffe",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012, Jarryd Beck\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# Redistributions of source code must retain the above copyright notice, this\n\n# list of conditions and the following disclaimer.\n\n# Redistributions in binary form must reproduce the above copyright notice, \n\n# this list of conditions and the following disclaimer in the documentation \n\n# and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module creates build rules for updating translation files made \n\n# with gettext\n\n# In your top level CMakeLists.txt, do\n\n#   include(GettextTranslate)\n\n# then in any po directory where you want things to be translated, write\n\n#   GettextTranslate()\n\n#\n\n# This module also finds the gettext binaries. If these are in a non-standard\n\n# location, you can define the following variables to provide paths to search\n\n# in\n\n# GettextTranslate_BINARIES  --- a path in which to look for every program\n\n# GettextTranslate_XGETTEXT  --- the xgettext program\n\n# GettextTranslate_MSGINIT   --- the msginit program\n\n# GettextTranslate_MSGFILTER --- the msgfilter program\n\n# GettextTranslate_MSGCONV   --- the msgconv program\n\n# GettextTranslate_MSGMERGE  --- the msgmerge program\n\n# GettextTranslate_MSGFMT    --- the msgfmt program\n\n# these are searched first before $PATH, so set this if you have your own\n\n# version that overrides the system version\n\n#\n\n# it reads variables from Makevars, one of the most important being DOMAIN\n\n# it reads the languages to generate from LINGUAS\n\n#\n\n# it adds the following targets\n\n# update-po\n\n# update-gmo\n\n# ${DOMAIN}-pot.update\n\n# generate-${DOMAIN}-${lang}-po\n\n# generate-${DOMAIN}-${lang}-gmo\n\n#\n\n# where ${DOMAIN} is the DOMAIN variable read from Makevars\n\n# and ${lang} is each language mentioned in LINGUAS\n\n#\n\n# if you want update-gmo to be added to the \"all\" target, then define the\n\n# variable GettextTranslate_ALL before including this file\n\n#\n\n# by default, the gmo files are built in the source directory. If you want\n\n# them to be built in the binary directory, then define the variable\n\n# GettextTranslate_GMO_BINARY\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add the update-po and update-gmo targets, the actual files that need to\n\n# depend on this will be added as we go\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#look for all the programs\n\n#xgettext, msginit, msgfilter, msgconv, msgmerge, msgfmt\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set the directory to not clean\n\n#set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n\n#  PROPERTY CLEAN_NO_CUSTOM true)\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#add_custom_target(${MAKEVAR_DOMAIN}.pot-update DEPENDS\n\n#  ${TEMPLATE_FILE_ABS}\n\n#)\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#add_custom_command(OUTPUT ${TEMPLATE_FILE_ABS}\n\n#  COMMAND ${GettextTranslate_XGETTEXT_EXECUTABLE} ${XGETTEXT_OPTS}\n\n#    -o ${TEMPLATE_FILE_ABS} \n\n#    --default-domain=${MAKEVAR_DOMAIN}\n\n#    --add-comments=TRANSLATORS:\n\n#    --copyright-holder=${MAKEVAR_COPYRIGHT_HOLDER}\n\n#    --msgid-bugs-address=\"${MAKEVAR_MSGID_BUGS_ADDRESS}\"\n\n#    --directory=${MAKEVAR_top_builddir}\n\n#    --files-from=${CMAKE_CURRENT_BINARY_DIR}/POTFILES\n\n#    --package-version=${VERSION}\n\n#    --package-name=${CMAKE_PROJECT_NAME}\n\n#  DEPENDS ${source_translatable}\n\n#  ${CMAKE_CURRENT_SOURCE_DIR}/POTFILES.in\n\n#  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n\n#)\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#add_dependencies(update-po ${MAKEVAR_DOMAIN}.pot-update)\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#generate the en@quot files\n",
        "Line" : 237,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "#string(REGEX MATCH \"^[^=]+=(.*)$\" parsed_variables ${makevars})\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    ".cmake/Modules/Options.cmake" : {
      "ObjectId" : "b1874399ec460cf259a0183fb212acb29519e96c",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    ".cmake/Modules/PackageConfig.cmake" : {
      "ObjectId" : "2d469ebded2b5ce801bdccb22f9be35217bb3757",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add snapshot specific versioning information\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Escape any '.' characters\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    ".cmake/Modules/PackageUtils.cmake" : {
      "ObjectId" : "593f2d1b5d19243939194282a672279d20c693f1",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    ".cmake/Modules/Properties.cmake" : {
      "ObjectId" : "82490f236b6597490c303d4004ad2d3620f16c55",
      "LastModified" : "2018-11-05T20:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    ".cmake/Modules/Subprojects.cmake" : {
      "ObjectId" : "ed50ee09c2e94b57dce04cf02dfb0a2ab5dea135",
      "LastModified" : "2018-01-31T11:57:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    ".cmake/Modules/uninstall.cmake" : {
      "ObjectId" : "5183e5df08fed130317a2ea175d78ab7d395e5f8",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "92e69a8efecae4d21f0d5549e6f429f34ce298a7",
      "LastModified" : "2018-11-05T20:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# http://www.cmake.org/cmake/help/v3.1/policy/CMP0054.html\n\n# This is here to allow conditions to be passed as function parameters\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Initialization\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Linker flags are ignored by check_c_compiler_flag, so we have\n\n# to use this workaround\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Coverage\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# I18N\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Project\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Required by nanomsg\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "dev/FindCriterion.cmake" : {
      "ObjectId" : "0e4a2c069992cc751167f0f57fa2ae5926dc5278",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is licensed under the WTFPL version 2 -- you can see the full\n\n# license over at http://www.wtfpl.net/txt/copying/\n\n#\n\n# - Try to find Criterion\n\n#\n\n# Once done this will define\n\n#  CRITERION_FOUND - System has Criterion\n\n#  CRITERION_INCLUDE_DIRS - The Criterion include directories\n\n#  CRITERION_LIBRARIES - The libraries needed to use Criterion\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIET and REQUIRED arguments and set CRITERION_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dev/autotools/Makefile.am" : {
      "ObjectId" : "1c482210b76540f28bbce12fd328d5133cc80240",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# use the provided wrapper script to output things properly\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use the TAP log driver\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dev/cmake/CMakeLists.txt" : {
      "ObjectId" : "6f91018f07ad261c5e99900e5d528d1957b52ba8",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add ./cmake to the module path\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add interface to include dirs\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add sources\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for criterion\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add tests\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "dev/cmake/cmake/FindCriterion.cmake" : {
      "ObjectId" : "0e4a2c069992cc751167f0f57fa2ae5926dc5278",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is licensed under the WTFPL version 2 -- you can see the full\n\n# license over at http://www.wtfpl.net/txt/copying/\n\n#\n\n# - Try to find Criterion\n\n#\n\n# Once done this will define\n\n#  CRITERION_FOUND - System has Criterion\n\n#  CRITERION_INCLUDE_DIRS - The Criterion include directories\n\n#  CRITERION_LIBRARIES - The libraries needed to use Criterion\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIET and REQUIRED arguments and set CRITERION_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dev/cmake/src/CMakeLists.txt" : {
      "ObjectId" : "f8848e9dae5e505da4eb6b7a82d7649eca4fab2d",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use C99\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable a few warnings\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dev/cmake/test/CMakeLists.txt" : {
      "ObjectId" : "4191b3d53c942226481fa3c6e3a31e39aa3bdf9a",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use C99\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable a few warnings\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "892654a76f5810cc18263b1944574e93f03154f6",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "697c9aa9e4615ce0baffac9934e683b8cc8f5f1f",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# see http://sourceforge.net/p/mingw/bugs/2250/\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# TODO: remove\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "samples/tests/CMakeLists.txt" : {
      "ObjectId" : "9432b91ed6726d43f11c957712b73598b8cbf349",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "ca49a7fc68371509896e767e0d40ab4b39cee206",
      "LastModified" : "2018-08-26T17:08:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2017 Franklin \"Snaipe\" Mathieu.\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the LICENSE file distributed with Criterion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List sources and headers\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate the configure file\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/protocol/Makefile" : {
      "ObjectId" : "ae9c07d0f5b5b5f6662e83e38210a440157f73ff",
      "LastModified" : "2017-07-17T09:07:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "1eba74b0339ad1d9f2541a002fe2c5b1ec707a52",
      "LastModified" : "2018-08-26T17:08:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# see http://sourceforge.net/p/mingw/bugs/2250/\n",
        "Line" : 7,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# TODO: static lib from internals\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# we disable the scripted tests when sh is not available\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 33,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1185
}