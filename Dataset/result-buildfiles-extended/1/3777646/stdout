{
  "Repository" : "3777646",
  "Revision" : "HEAD",
  "ObjectId" : "04206379e8ec118fec7afb7710d665a457fa2329",
  "CommitTime" : "2015-05-04T06:45:03Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7fc894dfea904e20e69d72f428b8ffdde7afeae7",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include directories\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C++11\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# -Wextra\n",
        "Line" : 41,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 4
    },
    "build.xml" : {
      "ObjectId" : "9f19a077b1b7a029013d33e3c3d602effdf53f14",
      "LastModified" : "2014-08-01T14:11:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " This should be changed to the name of your project ",
        "Line" : 2,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 7,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 29,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 35,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 49,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 52,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : " version-tag: 1 ",
        "Line" : 90,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 9
    },
    "cmake/toolchains/android.toolchain.cmake" : {
      "ObjectId" : "dfbd1218c5e7f28e5b4ba231e967210e7a80058f",
      "LastModified" : "2014-08-01T14:11:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r9\n\n#  Requires cmake 2.6.3 or newer (2.8.5 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  The file is mantained by the OpenCV project. The latest version can be get at\n\n#  http://code.opencv.org/projects/opencv/repository/revisions/master/changes/android/android.toolchain.cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Linux (using standalone toolchain):\n\n#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (or newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_STANDALONE_TOOLCHAIN=/opt/android-toolchain - path to the\n\n#      standalone toolchain. This option is not used if full NDK is found\n\n#      (ignored if ANDROID_NDK is set).\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16).\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP.\n\n#        \"x86\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"mips\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.6 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r8c the possible values are:\n\n#\n\n#        * arm-linux-androideabi-4.4.3\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-clang3.1\n\n#        * mipsel-linux-android-4.4.3\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-clang3.1\n\n#        * x86-4.4.3\n\n#        * x86-4.6\n\n#        * x86-clang3.1\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"x86\" (inapplicable) and\n\n#      \"armeabi-v6 with VFP\" (is forced to be ON) ABIs.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary\n\n#      files. See additional details below.\n\n#\n\n#    ANDROID_SET_OBSOLETE_VARIABLES=ON - if set, then toolchain defines some\n\n#      obsolete variables which were used by previous versions of this file for\n\n#      backward compatibility.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS will be set true, mutually\n\n#    exclusive. NEON option will be set true if VFP is set to NEON.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT should be set in cache to determine where Android\n\n#    libraries will be installed.\n\n#    Default is ${CMAKE_SOURCE_DIR}, and the android libs will always be\n\n#    under the ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME}\n\n#    (depending on the target ABI). This is convenient for Android packaging.\n\n#\n\n#  Change Log:\n\n#   - initial version December 2010\n\n#   - April 2011\n\n#     [+] added possibility to build with NDK (without standalone toolchain)\n\n#     [+] support cross-compilation on Windows (native, no cygwin support)\n\n#     [+] added compiler option to force \"char\" type to be signed\n\n#     [+] added toolchain option to compile to 32-bit ARM instructions\n\n#     [+] added toolchain option to disable SWIG search\n\n#     [+] added platform \"armeabi-v7a with VFPV3\"\n\n#     [~] ARM_TARGETS renamed to ARM_TARGET\n\n#     [+] EXECUTABLE_OUTPUT_PATH is set by toolchain (required on Windows)\n\n#     [~] Fixed bug with ANDROID_API_LEVEL variable\n\n#     [~] turn off SWIG search if it is not found first time\n\n#   - May 2011\n\n#     [~] ANDROID_LEVEL is renamed to ANDROID_API_LEVEL\n\n#     [+] ANDROID_API_LEVEL is detected by toolchain if not specified\n\n#     [~] added guard to prevent changing of output directories on the first\n\n#         cmake pass\n\n#     [~] toolchain exits with error if ARM_TARGET is not recognized\n\n#   - June 2011\n\n#     [~] default NDK path is updated for version r5c\n\n#     [+] variable CMAKE_SYSTEM_PROCESSOR is set based on ARM_TARGET\n\n#     [~] toolchain install directory is added to linker paths\n\n#     [-] removed SWIG-related stuff from toolchain\n\n#     [+] added macro find_host_package, find_host_program to search\n\n#         packages/programs on the host system\n\n#     [~] fixed path to STL library\n\n#   - July 2011\n\n#     [~] fixed options caching\n\n#     [~] search for all supported NDK versions\n\n#     [~] allowed spaces in NDK path\n\n#   - September 2011\n\n#     [~] updated for NDK r6b\n\n#   - November 2011\n\n#     [*] rewritten for NDK r7\n\n#     [+] x86 toolchain support (experimental)\n\n#     [+] added \"armeabi-v6 with VFP\" ABI for ARMv6 processors.\n\n#     [~] improved compiler and linker flags management\n\n#     [+] support different build flags for Release and Debug configurations\n\n#     [~] by default compiler flags the same as used by ndk-build (but only\n\n#         where reasonable)\n\n#     [~] ANDROID_NDK_TOOLCHAIN_ROOT is splitted to ANDROID_STANDALONE_TOOLCHAIN\n\n#         and ANDROID_TOOLCHAIN_ROOT\n\n#     [~] ARM_TARGET is renamed to ANDROID_ABI\n\n#     [~] ARMEABI_NDK_NAME is renamed to ANDROID_NDK_ABI_NAME\n\n#     [~] ANDROID_API_LEVEL is renamed to ANDROID_NATIVE_API_LEVEL\n\n#   - January 2012\n\n#     [+] added stlport_static support (experimental)\n\n#     [+] added special check for cygwin\n\n#     [+] filtered out hidden files (starting with .) while globbing inside NDK\n\n#     [+] automatically applied GLESv2 linkage fix for NDK revisions 5-6\n\n#     [+] added ANDROID_GET_ABI_RAWNAME to get NDK ABI names by CMake flags\n\n#   - February 2012\n\n#     [+] updated for NDK r7b\n\n#     [~] fixed cmake try_compile() command\n\n#     [~] Fix for missing install_name_tool on OS X\n\n#   - March 2012\n\n#     [~] fixed incorrect C compiler flags\n\n#     [~] fixed CMAKE_SYSTEM_PROCESSOR change on ANDROID_ABI change\n\n#     [+] improved toolchain loading speed\n\n#     [+] added assembler language support (.S)\n\n#     [+] allowed preset search paths and extra search suffixes\n\n#   - April 2012\n\n#     [+] updated for NDK r7c\n\n#     [~] fixed most of problems with compiler/linker flags and caching\n\n#     [+] added option ANDROID_FUNCTION_LEVEL_LINKING\n\n#   - May 2012\n\n#     [+] updated for NDK r8\n\n#     [+] added mips architecture support\n\n#   - August 2012\n\n#     [+] updated for NDK r8b\n\n#     [~] all intermediate files generated by toolchain are moved to CMakeFiles\n\n#     [~] libstdc++ and libsupc are removed from explicit link libraries\n\n#     [+] added CCache support (via NDK_CCACHE environment or cmake variable)\n\n#     [+] added gold linker support for NDK r8b\n\n#     [~] fixed mips linker flags for NDK r8b\n\n#   - September 2012\n\n#     [+] added NDK release name detection (see ANDROID_NDK_RELEASE)\n\n#     [+] added support for all C++ runtimes from NDK\n\n#         (system, gabi++, stlport, gnustl)\n\n#     [+] improved warnings on known issues of NDKs\n\n#     [~] use gold linker as default if available (NDK r8b)\n\n#     [~] globally turned off rpath\n\n#     [~] compiler options are aligned with NDK r8b\n\n#   - October 2012\n\n#     [~] fixed C++ linking: explicitly link with math library (OpenCV #2426)\n\n#   - November 2012\n\n#     [+] updated for NDK r8c\n\n#     [+] added support for clang compiler\n\n#   - December 2012\n\n#     [+] suppress warning about unused CMAKE_TOOLCHAIN_FILE variable\n\n#     [+] adjust API level to closest compatible as NDK does\n\n#     [~] fixed ccache full path search\n\n#     [+] updated for NDK r8d\n\n#     [~] compiler options are aligned with NDK r8d\n\n#   - March 2013\n\n#     [+] updated for NDK r8e (x86 version)\n\n#     [+] support x86_64 version of NDK\n\n#   - April 2013\n\n#     [+] support non-release NDK layouts (from Linaro git and Android git)\n\n#     [~] automatically detect if explicit link to crtbegin_*.o is needed\n\n#   - June 2013\n\n#     [~] fixed stl include path for standalone toolchain made by NDK >= r8c\n\n#   - July 2013\n\n#     [+] updated for NDK r9\n\n#   - November 2013\n\n#     [+] updated for NDK r9b\n\n#   - December 2013\n\n#     [+] updated for NDK r9c\n\n#   - January 2014\n\n#     [~] fix copying of shared STL\n\n#   - April 2014\n\n#     [+] updated for NDK r9d\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 311,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable only to suppress \"unused variable\" warning\n",
        "Line" : 316,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# this one is important\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one not so much\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rpath makes low sence for Android\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 468,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# detect current host platform\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 505,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 523,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# remember found paths\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# try to detect change\n",
        "Line" : 548,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# android NDK layout\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 575,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 587,
        "CharPositionInLine" : 71
      },
      "19" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 592,
        "CharPositionInLine" : 71
      },
      "20" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 596,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 603,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 679,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 692,
        "CharPositionInLine" : 39
      },
      "26" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# choose target ABI\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set target ABI options\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 764,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 795,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# choose toolchain\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# choose native API level\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# adjust API level\n",
        "Line" : 860,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# validate\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# remember target ABI\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# honor legacy ANDROID_USE_STLPORT\n",
        "Line" : 903,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 987,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 997,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# clang\n",
        "Line" : 1032,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 1056,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# do nothing\n",
        "Line" : 1062,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1097,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1115,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1117,
        "CharPositionInLine" : 137
      },
      "48" : {
        "Text" : "# r7-r8\n",
        "Line" : 1119,
        "CharPositionInLine" : 110
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 1121,
        "CharPositionInLine" : 36
      },
      "50" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1141,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# TODO: check if .so file exists before the renaming\n",
        "Line" : 1144,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# ccache support\n",
        "Line" : 1148,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1204,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1223,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1237,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1252,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# NDK flags\n",
        "Line" : 1259,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1269,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1298,
        "CharPositionInLine" : 62
      },
      "62" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1305,
        "CharPositionInLine" : 72
      },
      "63" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1319,
        "CharPositionInLine" : 91
      },
      "65" : {
        "Text" : "# STL\n",
        "Line" : 1334,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# C objects:\n",
        "Line" : 1345,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1363,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1365,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# linker flags\n",
        "Line" : 1385,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1389,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1396,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# version 4.6\n",
        "Line" : 1425,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# cache flags\n",
        "Line" : 1453,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1464,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# finish flags\n",
        "Line" : 1470,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# configure rtti\n",
        "Line" : 1487,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1496,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1507,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1509,
        "CharPositionInLine" : 111
      },
      "80" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1512,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# setup output directories\n",
        "Line" : 1549,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1562,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1574,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1581,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1587,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1609,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1646,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1682,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1684,
        "CharPositionInLine" : 1
      },
      "91" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1686,
        "CharPositionInLine" : 37
      },
      "92" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1690,
        "CharPositionInLine" : 1
      },
      "93" : {
        "Text" : "# set some obsolete variables for backward compatibility\n",
        "Line" : 1695,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_SET_OBSOLETE_VARIABLES : ON/OFF\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   NDK_CCACHE : <path to your ccache executable>\n\n# Obsolete:\n\n#   ANDROID_API_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL\n\n#   ARM_TARGET : superseded by ANDROID_ABI\n\n#   ARM_TARGETS : superseded by ANDROID_ABI (can be set only)\n\n#   ANDROID_NDK_TOOLCHAIN_ROOT : superseded by ANDROID_STANDALONE_TOOLCHAIN (can be set only)\n\n#   ANDROID_USE_STLPORT : superseded by ANDROID_STL=stlport_static\n\n#   ANDROID_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL (completely removed)\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   MIPS : TRUE if configured for mips\n\n#   BUILD_ANDROID : always TRUE\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : one of r5, r5b, r5c, r6, r6b, r7, r7b, r7c, r8, r8b, r8c, r8d, r8e, r9, r9b, r9c, r9d; set only for NDK\n\n#   ANDROID_ARCH_NAME : \"arm\" or \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n# Obsolete:\n\n#   ARMEABI_NDK_NAME : superseded by ANDROID_NDK_ABI_NAME\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1705,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "cmake/toolchains/iOS.cmake" : {
      "ObjectId" : "df2e3facabd5cfbd0ee84c8b7ff81932246c9ae5",
      "LastModified" : "2014-08-22T16:09:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard settings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT\n\n# Note Xcode 4.3 changed the installation location, choose the most recent one available\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# set the architecture for iOS \n\n# NOTE: Currently both ARCHS_STANDARD_32_BIT and ARCHS_UNIVERSAL_IPHONE_OS set armv7 only, so set both manually\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "extlibs/Box2D/CMakeLists.txt" : {
      "ObjectId" : "93dfd7f57f6b5ea6381767c069dd64e266b50f53",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set_target_properties(Box2D PROPERTIES\n\n#\tCLEAN_DIRECT_OUTPUT 1\n\n#\tVERSION ${BOX2D_VERSION}\n\n#)\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# These are used to create visual studio folders.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# install headers\n",
        "Line" : 186,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# install libraries\n",
        "Line" : 196,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# install build system hooks for third-party apps\n",
        "Line" : 207,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "extlibs/Box2D/UseBox2D.cmake" : {
      "ObjectId" : "cb9dc8c0027f1ac338c67655b4890eef5cd1d05d",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#                                               -*- cmake -*-\n\n#\n\n#  UseBox2d.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/CMakeLists.txt" : {
      "ObjectId" : "d80301f64f639a97b747592d280fe0d8a431d653",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "extlibs/SDL2-2.0.3/CMakeLists.txt" : {
      "ObjectId" : "18633fb5525c0aa1c292725489a9fb7cafc68268",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${SDL2_SOURCE_DIR}/src/core/android/*.c\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# General settings\n\n# Edit include/SDL_version.h and change the version, then:\n\n#   SDL_MICRO_VERSION += 1;\n\n#   SDL_INTERFACE_AGE += 1;\n\n#   SDL_BINARY_AGE += 1;\n\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\n\n# if backwards compatibility has been broken,\n\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Calculate a libtool-like version number\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# General settings & flags\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check for 64 or 32 bit\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get the platform\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: iOS?\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Don't mistake osx for unix\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Default option knobs\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compiler info\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# VisualStudio 8.0+\n",
        "Line" : 220,
        "CharPositionInLine" : 34
      },
      "11" : {
        "Text" : "#set(CMAKE_C_FLAGS \"/ZI /WX- /\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Default flags, if not set otherwise\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Hackish, but does the trick on Win32\n",
        "Line" : 236,
        "CharPositionInLine" : 37
      },
      "14" : {
        "Text" : "# Those are used for pkg-config and friends, so that the SDL2.pc, sdl2-config,\n\n# etc. are created correctly.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# We build SDL on cygwin without the UNIX emulation layer\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# General includes\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#set_option(DEPENDENCY_TRACKING \"Use gcc -MMD -MT dependency tracking\" ON)\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#${UNIX_SYS})\n",
        "Line" : 323,
        "CharPositionInLine" : 63
      },
      "19" : {
        "Text" : "#${UNIX_SYS})\n",
        "Line" : 324,
        "CharPositionInLine" : 59
      },
      "20" : {
        "Text" : "# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\n\n# The options below are for compatibility to configure's default behaviour.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# General source files\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Do nada - use optimization settings to determine the assertion level\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Compiler option evaluation\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# TODO: Those all seem to be quite GCC specific - needs to be\n\n# reworked for better compiler support\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# if only HAVE_ALTIVEC_H_HDR is set\n",
        "Line" : 540,
        "CharPositionInLine" : 31
      },
      "26" : {
        "Text" : "# TODO: SDL_cpuinfo.h needs to support the user's configuration wish\n\n# for MSVC - right now it is always activated\n",
        "Line" : 549,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# TODO:\n\n#else(ASSEMBLY)\n\n#  if(USE_GCC OR USE_CLANG)\n\n#    list(APPEND EXTRA_CFLAGS \"-mno-sse\" \"-mno-sse2\" \"-mno-mmx\")\n\n#  endif()\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define\n\n# anything.\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# needed for M_PI\n",
        "Line" : 590,
        "CharPositionInLine" : 41
      },
      "30" : {
        "Text" : "# TODO: refine the mprotect check\n",
        "Line" : 606,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Enable/disable various subsystems of the SDL library\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Haptic requires some private functions from the joystick subsystem.\n",
        "Line" : 666,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\n\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\n\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\n\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# General SDL subsystem options, valid for all platforms\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# CheckDummyAudio/CheckDiskAudio - valid for all platforms\n",
        "Line" : 683,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Relevant for Unix/Darwin only\n",
        "Line" : 699,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Platform-specific options and settings\n",
        "Line" : 715,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# !!! FIXME: this needs pkg-config to find the include path, I think.\n",
        "Line" : 792,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# seems to be BSD specific - limit the test to BSD only?\n",
        "Line" : 807,
        "CharPositionInLine" : 20
      },
      "40" : {
        "Text" : "# Check for DirectX\n",
        "Line" : 880,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\n",
        "Line" : 894,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# requires SDL_LOADSO on Windows (IME, DX, etc.)\n",
        "Line" : 921,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Libraries for Win32 native and MinGW\n",
        "Line" : 964,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# TODO: in configure.in the check for timers is set on\n\n# cygwin | mingw32* - does this include mingw32CE?\n",
        "Line" : 967,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# TODO: rework this for proper MacOS X, iOS and Darwin support\n",
        "Line" : 1022,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Requires the darwin file implementation\n",
        "Line" : 1024,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Actually load the frameworks at the end so we don't duplicate include.\n",
        "Line" : 1089,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n",
        "Line" : 1115,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# TODO: Use FIND_PACKAGE(OpenGL) instead\n",
        "Line" : 1151,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# Dummies\n\n# configure.in does it differently:\n\n# if not have X\n\n#   if enable_X {  SDL_X_DISABLED = 1 }\n\n#   [add dummy sources]\n\n# so it always adds a dummy, without checking, if it was actually requested.\n\n# This leads to missing internal references on building, since the\n\n# src/X/*.c does not get included.\n",
        "Line" : 1163,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# results in unresolved symbols on OSX\n",
        "Line" : 1173,
        "CharPositionInLine" : 33
      },
      "52" : {
        "Text" : "# We always need to have threads and timers around\n",
        "Line" : 1195,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Append the -MMD -MT flags\n\n# if(DEPENDENCY_TRACKING)\n\n#   if(COMPILER_IS_GNUCC)\n\n#     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -MMD -MT \\$@\")\n\n#   endif()\n\n# endif()\n",
        "Line" : 1211,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Prepare the flags and remove duplicates\n",
        "Line" : 1221,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Compat helpers for the configuration files\n",
        "Line" : 1234,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# TODO: we need a Windows script, too\n",
        "Line" : 1236,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Clean up the different lists\n",
        "Line" : 1259,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# MESSAGE(STATUS \"SDL_LIBS: ${SDL_LIBS}\")\n\n# MESSAGE(STATUS \"SDL_STATIC_LIBS: ${SDL_STATIC_LIBS}\")\n",
        "Line" : 1268,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "##### Info output #####\n",
        "Line" : 1281,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Longest option is VIDEO_X11_XSCREENSAVER = 22 characters\n\n# Get the padding\n",
        "Line" : 1298,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Ensure that the extra cflags are used at compile time\n",
        "Line" : 1321,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Always build SDLmain\n",
        "Line" : 1324,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# TODO: Win32 platforms keep the same suffix .lib for import and static\n\n# libraries - do we need to consider this?\n",
        "Line" : 1354,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "##### Installation targets #####\n",
        "Line" : 1360,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# FreeBSD uses ${PREFIX}/libdata/pkgconfig\n",
        "Line" : 1382,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# TODO: what about the .spec file? Is it only needed for RPM creation?\n",
        "Line" : 1389,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#install(TARGETS SDL2 RUNTIME DESTINATION bin)\n",
        "Line" : 1392,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 68
    },
    "extlibs/SDL2-2.0.3/android-project/build.xml" : {
      "ObjectId" : "9f19a077b1b7a029013d33e3c3d602effdf53f14",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " This should be changed to the name of your project ",
        "Line" : 2,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 7,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 29,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 35,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 49,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 52,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : " version-tag: 1 ",
        "Line" : 90,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 9
    },
    "extlibs/SDL2-2.0.3/cmake/macros.cmake" : {
      "ObjectId" : "c234a566c0ae27c2208814fc9adaa2c867a0ab80",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "extlibs/SDL2-2.0.3/cmake/sdlchecks.cmake" : {
      "ObjectId" : "2cd09e6ffff5b52e05c499793fb9557ff4927a35",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO\n",
        "Line" : 211,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 451,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Requires:\n\n# - EGL\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 559,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Rquires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 671,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Run some tests\n",
        "Line" : 703,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 773,
        "CharPositionInLine" : 65
      },
      "27" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "extlibs/SDL2-2.0.3/include/SDL_config.h.cmake" : {
      "ObjectId" : "9f533321778d2f81c40ab9547b5cea9ae581741f",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2014 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* \nPURITY2D FIX \n*/",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C language features */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Useful headers */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* C library functions */",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* !!! FIXME: in configure script version, missing here: */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system power support */",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "extlibs/TmxParser/CMakeLists.txt" : {
      "ObjectId" : "e8debbde63eefe639b4fde51d80a5c6abae6c7f5",
      "LastModified" : "2014-12-20T01:25:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(\"${PROJECT_SOURCE_DIR}/include\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/enet/CMakeLists.txt" : {
      "ObjectId" : "1f0510a6f4b2fe4df50b0912e6c39c98a74149cd",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The \"configure\" step.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/enet/Makefile.am" : {
      "ObjectId" : "b4644f88e29c2ac76a049088753db941766ff0fd",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# see info '(libtool) Updating version info' before making a release\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/inih/CMakeLists.txt" : {
      "ObjectId" : "b768f815ef7ee7aa446f5ec5116f7330918d304c",
      "LastModified" : "2014-12-19T15:17:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "extlibs/lua-5.1.5/CMakeLists.txt" : {
      "ObjectId" : "ac86e21aa5cb0e625617e2ece9af412a25edb6bf",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initialize #\n\n##############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( ${TARGET_NAME}_INCLUDE_DIR \"${TARGET_INCLUDE_DIR}\" PARENT_SCOPE )\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disable safety warnings because this is a C library\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "extlibs/stb_image/CMakeLists.txt" : {
      "ObjectId" : "e0cf65e82841aa06da56a38ae6ee67de118bb78f",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "extlibs/tinyxml2-2.2.0/CMakeLists.txt" : {
      "ObjectId" : "42b2e370d3b2eb8ec7349c986c4a2429bc7ca28c",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMAKE_BUILD_TOOL\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################\n\n# set lib version here\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################\n\n# Add common source \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################\n\n# Add definitions\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################\n\n# Add targets\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "30ca51a1b799d26fa11c5ae7dee79b970944da7b",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DirectX\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/engine/CMakeLists.txt" : {
      "ObjectId" : "111ada45e9a6746dc1b12eacd75e580ece55877f",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/CMakeLists.txt" : {
      "ObjectId" : "099c641a391c436ec0fc622ca9b108784090dd2a",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/entity/CMakeLists.txt" : {
      "ObjectId" : "637e937c880fabe42197545293ea56f4b350a9a4",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/graphics/CMakeLists.txt" : {
      "ObjectId" : "90c5306b677aba8f3f6f3e9b0cf5bf7dc0b30740",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/gui/CMakeLists.txt" : {
      "ObjectId" : "f893fe844f02b3ddd2dcda79b1938fe08cda9f45",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/input/CMakeLists.txt" : {
      "ObjectId" : "db4f47d52e6f553f5d455d310354940f0c52debb",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/network/CMakeLists.txt" : {
      "ObjectId" : "71f4e839f7f43123611dfff851d8c86a1a9a30e7",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/system/CMakeLists.txt" : {
      "ObjectId" : "7fd0c19571a3deddbaa85859e898d60132c890db",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/window/CMakeLists.txt" : {
      "ObjectId" : "2ffcdfb1884887437b13d016b1b819a029173274",
      "LastModified" : "2015-04-13T20:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "CMAKESOURCE" : 1,
    "AUTOMAKE" : 1,
    "ANT" : 2
  },
  "ElapsedTime" : 1798
}