{
  "Repository" : "22047474",
  "Revision" : "HEAD",
  "ObjectId" : "ae7c8046007f88768ed77ae0f77f58babae404e2",
  "CommitTime" : "2019-04-03T18:36:15Z",
  "Files" : {
    "annotation-file-utilities/build.xml" : {
      "ObjectId" : "4f30df308921f67efc5f41306a3afa4061f236a8",
      "LastModified" : "2018-08-20T22:26:00Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Avoid conflicts between multiple users on the same computer. ",
        "Line" : 16,
        "CharPositionInLine" : 72
      },
      "1" : {
        "Text" : " The distribution is the result of zipping this directory. ",
        "Line" : 18,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : " Can't I just reuse temp-annotation-file-utilities, rather than\n       having this separate directory? ",
        "Line" : 22,
        "CharPositionInLine" : 43
      },
      "3" : {
        "Text" : " Compiles all the subparts of the Annotation File Utilities. ",
        "Line" : 59,
        "CharPositionInLine" : 71
      },
      "4" : {
        "Text" : " Checker Framework qualifiers should not go in generated .jar files ",
        "Line" : 82,
        "CharPositionInLine" : 82
      },
      "5" : {
        "Text" : " needed for optionsdoc target ",
        "Line" : 84,
        "CharPositionInLine" : 44
      },
      "6" : {
        "Text" : " additional for distribution:\n      <pathelement location=\"${jre1.6.0}\"/>\n      ",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "\n      noqualifier=\"scenelib.annotations:scenelib.annotations.el:scenelib.annotations.field:scenelib.annotations.io:scenelib.annotations.io.classfile:scenelib.annotations.util:scenelib.annotations.util.coll:java.lang\"\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : " Also need to get class files in libraries ",
        "Line" : 196,
        "CharPositionInLine" : 55
      },
      "9" : {
        "Text" : " As af plume-util-1.0.1, this file is malformed (at least according to ASM?).  I'm not sure why. ",
        "Line" : 213,
        "CharPositionInLine" : 113
      },
      "10" : {
        "Text" : " Actually create a single .jar file of all the class files,\n         scripts and documentation ",
        "Line" : 233,
        "CharPositionInLine" : 39
      },
      "11" : {
        "Text" : " Delete class files copied over ",
        "Line" : 239,
        "CharPositionInLine" : 44
      },
      "12" : {
        "Text" : " Actually create a single .jar file of all the class files,\n         scripts and documentation ",
        "Line" : 261,
        "CharPositionInLine" : 39
      },
      "13" : {
        "Text" : " Delete class files copied over ",
        "Line" : 267,
        "CharPositionInLine" : 44
      },
      "14" : {
        "Text" : " Copy files from repository to temporary directory from which they\n  will be packaged up. ",
        "Line" : 290,
        "CharPositionInLine" : 27
      },
      "15" : {
        "Text" : " Create a new directory containing all the files and then zip that\n         directory, so that when the user unzips they extract exactly one\n         directory. ",
        "Line" : 334,
        "CharPositionInLine" : 24
      },
      "16" : {
        "Text" : " In order for the shell scripts to have the proper execution bit set,\n         include them specifically with the right permissions.  Ant presently\n         does not use the file's permissions themselves to do this. ",
        "Line" : 338,
        "CharPositionInLine" : 72
      },
      "17" : {
        "Text" : " Delete temporary files once they have been zipped. ",
        "Line" : 353,
        "CharPositionInLine" : 64
      },
      "18" : {
        "Text" : "\n    <delete dir=\"${temp-annotation-file-utilities}\"/>\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : " TODO: I am not sure this target works as the original author intended\n       TODO: (i.e. I don't think check-git-status gets executed twice)\n       TODO: but I am maintaining the previous behavior.\n       ",
        "Line" : 404,
        "CharPositionInLine" : 11
      },
      "20" : {
        "Text" : " New release process runs checks prior to running the web-no-checks target",
        "Line" : 407,
        "CharPositionInLine" : 84
      },
      "21" : {
        "Text" : "\n    A problem is that the document date is the date that LaTeX was run\n    rather than the date of last modification; that should be fixed in\n    the document, perhaps.  ",
        "Line" : 466,
        "CharPositionInLine" : 32
      },
      "22" : {
        "Text" : " <echo message=\"Deleting temporary directory: ${temp-jarfile}\"/> ",
        "Line" : 501,
        "CharPositionInLine" : 77
      },
      "23" : {
        "Text" : " <echo message=\"Deleting previous distribution:  annotation-file-utilities.{jar,zip}\"/> ",
        "Line" : 505,
        "CharPositionInLine" : 100
      },
      "24" : {
        "Text" : " Boilerplate to set cfjavac property. Is there a better way? ",
        "Line" : 558,
        "CharPositionInLine" : 71
      },
      "25" : {
        "Text" : " This tags table includes the scene library. ",
        "Line" : 593,
        "CharPositionInLine" : 55
      },
      "CommentCount" : 26
    },
    "annotation-file-utilities/figures/Makefile" : {
      "ObjectId" : "5a63c61af79e6eb0dc9c55d1f0c7722b15a9124c",
      "LastModified" : "2016-09-07T16:51:31Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "annotation-file-utilities/tests/Makefile" : {
      "ObjectId" : "5072656e3bf4770b3af122a23c2612596f0157a8",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Very rough testing framework for the annotator.  Running 'make all' will\n\n# look for all myClass.goal files in this directory, run the annotator on the\n\n# corresponding .jaif and .java files, and then output the difference in a\n\n# myClass.diff file in this directory.\n\n#\n\n# To test just one file, use (for example) 'make myClass.diff'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override these in Makefile.user if the java and javac commands are not on\n\n# your execution path.  Example from Makefile.user:\n\n#   JAVA=${JAVA_HOME}/bin/java\n\n#   JAVAC=${JAVA_HOME}/bin/javac\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this to enable some debugging.\n\n# DEBUG := --debug\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Display results of all .diff files.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remakes the little Java program that checks and compares diffs.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compiles all the test cases (be verbose about this).\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Added \"-Xlint:-options\" to see if it permits Jenkins job to succeed, due to\n\n# problem \"target value 1.8 is obsolete and will be removed in a future release\"\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Actually runs the annotator to create the annotated java file.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compare the output of the annotator and the goal file.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Remove all .diff, .log files from the tests directory.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "annotation-file-utilities/tests/abbreviated/Makefile" : {
      "ObjectId" : "6f23a9c059b46699aa655a93f4b2424fb4ad83dd",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Very rough testing framework for the annotator.  Running 'make all' will\n\n# look for all myClass.goal files in this directory, run the annotator on the\n\n# corresponding .jaif and .java files, and then output the difference in a\n\n# myClass.diff file in this directory.\n\n#\n\n# To test just one file, use (for example) 'make myClass.diff'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override these in Makefile.user if the java and javac commands are not on\n\n# your execution path.  Example from Makefile.user:\n\n#   JAVA=${JAVA_HOME}/bin/java\n\n#   JAVAC=${JAVA_HOME}/bin/javac\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this to enable some debugging.\n\n# DEBUG := --debug\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Display results of all .diff files.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remakes the little java program that checks and compares diffs\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compiles all the test cases (be verbose about this).\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Actually runs the annotator to create the annotated java file.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compare the output of the annotator and the goal file.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Remove all .diff, .log files from the tests directory.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "annotation-file-utilities/tests/ad-hoc/Makefile" : {
      "ObjectId" : "e372c787fc3a5a4934ea51a7b40eec1ad84dd799",
      "LastModified" : "2016-07-22T04:38:33Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "annotation-file-utilities/tests/ad-hoc/bridge/Makefile" : {
      "ObjectId" : "1ff020fcc1444b177ad527123185d980b35233d2",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Counting bridge methods, there should be 3 @A annotations.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# skip test if using javac 1.7, which doesn't copy annotations to bridge methods\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Not counting bridge methods, there should be 2 @A annotations.\n\n# -b ignores annotations on bridge methods\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "annotation-file-utilities/tests/converted/Makefile" : {
      "ObjectId" : "da28df5e2bae4474da0ebc3cfbfb62f7995a5eff",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Very rough testing framework for the annotator.  Running 'make all' will\n\n# look for all myClass.goal files in the parent directory, run the annotator on the\n\n# corresponding .jaif in this directory and the .java file in the parent directory,\n\n# and then output the difference in a\n\n# myClass.diff file in this directory.\n\n#\n\n# To test just one file, use (for example) 'make myClass.diff'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override these in Makefile.user if the java and javac commands are not on\n\n# your execution path.  Example from Makefile.user:\n\n#   JAVA=${JAVA_HOME}/bin/java\n\n#   JAVAC=${JAVA_HOME}/bin/javac\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use .jaif instead of .goal (which ../Makefile uses), because only\n\n# .jaif files are checked in this directory.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this to enable some debugging.\n\n# DEBUG := --debug\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Display results of all .diff files.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remakes the little Java program that checks and compares diffs.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compiles all the test cases (be verbose about this).\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Added \"-Xlint:-options\" to see if it permits Jenkins job to succeed, due to\n\n# problem \"target value 1.8 is obsolete and will be removed in a future release\"\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create a symbolic link for a .java file.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Create a symbolic link for a .goal file.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Actually runs the annotator to create the annotated java file.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TODO: added `-` to these commands to proceed past failures\n\n# The failures will still show up in the summary, but it might\n\n# be better to fail earlier.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Compare the output of the annotator and the goal file.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Remove all .diff, .log files from the tests directory.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "annotation-file-utilities/tests/enum-imports/Makefile" : {
      "ObjectId" : "dd068c0ea91a9c056bee718b30e26d6b44307377",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Very rough testing framework for the annotator.  Running 'make all' will\n\n# look for all myClass.goal files in this directory, run the annotator on the\n\n# corresponding .jaif and .java files, and then output the difference in a\n\n# myClass.diff file in this directory.\n\n#\n\n# To test just one file, use (for example) 'make myClass.diff'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override these in Makefile.user if the java and javac commands are not on\n\n# your execution path.  Example from Makefile.user:\n\n#   JAVA=${JAVA_HOME}/bin/java\n\n#   JAVAC=${JAVA_HOME}/bin/javac\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#filter-out reverses order, so use tac to reverse its input first\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this to enable some debugging.\n\n# DEBUG := --debug\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Display results of all .diff files.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remakes the little java program that checks and compares diffs\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compiles all the test cases (be verbose about this).\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Actually runs the annotator to create the annotated java file.\n\n# We are required to put annotation-file-utilities-all.jar (and ../bin) on the\n\n# bootclasspath so that the JSR 308 javac classes bundled therein are found\n\n# before the stock javac classes that the Mac OS includes on the bootclasspath\n\n# (other platforms do not make such inclusions)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compare the output of the annotator and the goal file.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Remove all .diff, .log files from the tests directory.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "annotation-file-utilities/tests/issue155/Makefile" : {
      "ObjectId" : "65ae46af05081db2b653a50b44e4fcb48cfd4a56",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# To test Issue #155 this version of the Makefile does not\n\n# compile the .java input. This allows us to test with an\n\n# invalid setup.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Very rough testing framework for the annotator.  Running 'make all' will\n\n# look for all myClass.goal files in this directory, run the annotator on the\n\n# corresponding .jaif and .java files, and then output the difference in a\n\n# myClass.diff file in this directory.\n\n#\n\n# To test just one file, use (for example) 'make myClass.diff'.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Override these in Makefile.user if the java and javac commands are not on\n\n# your execution path.  Example from Makefile.user:\n\n#   JAVA=${JAVA_HOME}/bin/java\n\n#   JAVAC=${JAVA_HOME}/bin/javac\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this to enable some debugging.\n\n# DEBUG := --debug\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Display results of all .diff files.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remakes the little java program that checks and compares diffs\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Actually runs the annotator to create the annotated java file.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compare the output of the annotator and the goal file.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Remove all .diff, .log files from the tests directory.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "annotation-file-utilities/tests/source-extension/Makefile" : {
      "ObjectId" : "15084d02443078ad8d2b6b2346f45e97cddc38c9",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Very rough testing framework for the annotator.  Running 'make all' will\n\n# look for all myClass.goal files in this directory, run the annotator on the\n\n# corresponding .jaif and .java files, and then output the difference in a\n\n# myClass.diff file in this directory.\n\n#\n\n# To test just one file, use (for example) 'make myClass.diff'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put user-specific changes in your own Makefile.user.\n\n# Make will silently continue if that file does not exist.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override these in Makefile.user if the java and javac commands are not on\n\n# your execution path.  Example from Makefile.user:\n\n#   JAVA=${JAVA_HOME}/bin/java\n\n#   JAVAC=${JAVA_HOME}/bin/javac\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this to enable some debugging.\n\n# DEBUG := --debug\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Display results of all .diff files.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remakes the little java program that checks and compares diffs\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compiles all the test cases (be verbose about this).\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compiles just one test case\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Actually runs the annotator to create the annotated java file.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compare the output of the annotator and the goal file.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Remove all .diff, .log files from the tests directory.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "annotation-file-utilities/tests/system-test/Makefile" : {
      "ObjectId" : "9ac3b378805755e809c0de81626e5a6884625235",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# System test of annotation tools\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This test runs most of the AFU tools, on a single program\n\n# source-ann/AnnotationTest.java that contains an annotation in every\n\n# possible location.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Switch the lines below to deactivate this test\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#all: warn_and_exit\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Step 1: Compile the source with annotations.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Step 2: Convert the annotated class file to an annotation file.\n\n# Do we get the right annotations?\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Fail if out2.diff is non-empty\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Step 3: Compile the source without annotations.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Step 4: Insert annotations into the class file.\n\n# Can debug with:  javap -v out4.class\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Step 5: Convert the annotation-inserted class file to an annotation file.\n\n# Do we get the right annotations?\n\n# (The annotation-compiled and annotation-inserted class files tend to differ\n\n# for stupid reasons (e.g., order of items in the constant pool), so we don't\n\n# compare them.)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Fail if out5.diff is non-empty\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "asmx/build.xml" : {
      "ObjectId" : "f162feeaea73f493f861c564b28794893f6e5083",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n ! ASM: a very small and fast Java bytecode manipulation framework\n ! Copyright (c) 2000-2005 INRIA, France Telecom\n ! All rights reserved.\n !\n ! Redistribution and use in source and binary forms, with or without\n ! modification, are permitted provided that the following conditions\n ! are met:\n ! 1. Redistributions of source code must retain the above copyright\n !    notice, this list of conditions and the following disclaimer.\n ! 2. Redistributions in binary form must reproduce the above copyright\n !    notice, this list of conditions and the following disclaimer in the\n !    documentation and/or other materials provided with the distribution.\n ! 3. Neither the name of the copyright holders nor the names of its\n !    contributors may be used to endorse or promote products derived from\n !    this software without specific prior written permission.\n !\n ! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n ! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n ! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n ! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n ! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n ! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n ! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n ! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n ! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n ! THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " ==================================== ",
        "Line" : 33,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : " ======== PROPERTY DEFINITION ======= ",
        "Line" : 34,
        "CharPositionInLine" : 48
      },
      "3" : {
        "Text" : " ==================================== ",
        "Line" : 35,
        "CharPositionInLine" : 48
      },
      "4" : {
        "Text" : " ================================== ",
        "Line" : 87,
        "CharPositionInLine" : 46
      },
      "5" : {
        "Text" : " ========  INITIALIZATION   ======= ",
        "Line" : 88,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : " ================================== ",
        "Line" : 89,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : " =================================== ",
        "Line" : 121,
        "CharPositionInLine" : 47
      },
      "8" : {
        "Text" : " ==========    COMPILE    ========== ",
        "Line" : 122,
        "CharPositionInLine" : 47
      },
      "9" : {
        "Text" : " =================================== ",
        "Line" : 123,
        "CharPositionInLine" : 47
      },
      "10" : {
        "Text" : " only one of shrink and noshrink will actually get executed,\n       depending on whether product.noshrink is set.\n  ",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : " =================================== ",
        "Line" : 166,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " ==========      TEST     ========== ",
        "Line" : 167,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : " =================================== ",
        "Line" : 168,
        "CharPositionInLine" : 47
      },
      "14" : {
        "Text" : " =================================== ",
        "Line" : 234,
        "CharPositionInLine" : 47
      },
      "15" : {
        "Text" : " ==========      DIST     ========== ",
        "Line" : 235,
        "CharPositionInLine" : 47
      },
      "16" : {
        "Text" : " =================================== ",
        "Line" : 236,
        "CharPositionInLine" : 47
      },
      "17" : {
        "Text" : "\n  <target name=\"eclipse.generate\" depends=\"dist.version\">\n  </target>\n\n  <target name=\"eclipse.plugin\" depends=\"jar,eclipse.generate\">\n    <jar zipfile=\"${out}/org.objectweb.asm_${plugin.artifact}.jar\">\n      <zipfileset dir=\"${basedir}\">\n        <include name=\"plugin.xml\"/>\n        <include name=\"META-INF/MANIFEST.MF\"/>\n        <include name=\"**/asm-${product.artifact}.jar\"/>\n        <include name=\"**/asm-tree-${product.artifact}.jar\"/>\n        <include name=\"**/asm-analysis-${product.artifact}.jar\"/>\n        <include name=\"**/asm-util-${product.artifact}.jar\"/>\n        <include name=\"**/asm-commons-${product.artifact}.jar\"/>\n        <include name=\"**/asm-attrs-${product.artifact}.jar\"/>\n      </zipfileset>\n      <manifest>\n        <attribute name=\"Bundle-ManifestVersion\" value=\"2\"/>\n        <attribute name=\"Bundle-Name\" value=\"ASM Framework\"/>\n        <attribute name=\"Bundle-SymbolicName\" value=\"org.objectweb.asmx;singleton:=true\"/>\n        <attribute name=\"Bundle-Version\" value=\"${plugin.artifact}\"/>\n        <attribute name=\"Bundle-ClassPath\" value=\"output/dist/lib/asm-${product.artifact}.jar,\noutput/dist/lib/asm-tree-${product.artifact}.jar,\noutput/dist/lib/asm-analysis-${product.artifact}.jar,\noutput/dist/lib/asm-commons-${product.artifact}.jar,\noutput/dist/lib/asm-attrs-${product.artifact}.jar,\noutput/dist/lib/asm-util-${product.artifact}.jar\"/>\n        <attribute name=\"Bundle-Vendor\" value=\"ObjectWeb.org\"/>\n        <attribute name=\"Bundle-Localization\" value=\"plugin\"/>\n        <attribute name=\"Export-Package\" value=\"org.objectweb.asm,\norg.objectweb.asmx.attrs,\norg.objectweb.asmx.commons,\norg.objectweb.asmx.signature,\norg.objectweb.asmx.tree,\norg.objectweb.asmx.tree.analysis,\norg.objectweb.asmx.util,\norg.objectweb.asmx.xml\"/>\n        <attribute name=\"Eclipse-AutoStart\" value=\"true\"/>\n      </manifest>\n    </jar>\n  </target>\n\n  <target name=\"eclipse.feature\" depends=\"eclipse.plugin\">\n    <echo file=\"${out}/feature.xml\"><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feature id=\"org.objectweb.asmx.feature\" label=\"ASM Framework\"\n      version=\"${plugin.artifact}\" provider-name=\"ObjectWeb.org\">\n\n   <description url=\"http://asm.objectweb.org/eclipse/asm/index.html\">\nFeature contains ASM Java bytecode manipulation framework runtime.\n   </description>\n\n   <copyright>\nCopyright (c) 2000-2005 INRIA, France Telecom.\nAll rights reserved.\n   </copyright>\n\n   <license>\nCopyright (c) 2000-2005 INRIA, France Telecom\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   </license>\n\n   <url>\n      <update label=\"ASM Framework\" url=\"http://download.forge.objectweb.org/eclipse-update/site.xml\"/>\n   </url>\n\n   <plugin id=\"org.objectweb.asm\" download-size=\"0\" install-size=\"0\" version=\"${plugin.artifact}\"/>\n\n</feature>]]></echo>\n\n    <jar jarfile=\"${out}/org.objectweb.asmx.feature_${plugin.artifact}.jar\">\n      <fileset file=\"${out}/feature.xml\"/>\n    </jar>\n  </target>\n\n  <target name=\"eclipse.site\" depends=\"eclipse.feature\">\n    <echo file=\"${out}/site.xml\"><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<site>\n   <description url=\"http://asm.objectweb.org/eclipse/asm/index.html\">\n      ASM Framework\n   </description>\n\n   <feature url=\"features/org.objectweb.asmx.feature_${plugin.artifact}.jar\" id=\"org.objectweb.asmx.feature\" version=\"${plugin.artifact}\">\n      <category name=\"asm\"/>\n   </feature>\n\n   <category-def name=\"asm\" label=\"ASM Framework\"/>\n\n   <archive path=\"plugins/org.objectweb.asm_${plugin.artifact}.jar\" url=\"http://download.forge.objectweb.org/asm/org.objectweb.asm_${plugin.artifact}.jar\"/>\n</site>]]></echo>\n\n    <zip zipfile=\"${out}/org.objectweb.asmx.update_${plugin.artifact}.zip\">\n      <zipfileset dir=\"${out}\" includes=\"site.xml\"/>\n      <zipfileset dir=\"${out}\" includes=\"org.objectweb.asmx.feature_${plugin.artifact}.jar\" prefix=\"features\"/>\n      <zipfileset dir=\"${out}\" includes=\"org.objectweb.asm_${plugin.artifact}.jar\"  prefix=\"plugins\"/>\n    </zip>\n  </target>\n  ",
        "Line" : 426,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : " =================================== ",
        "Line" : 432,
        "CharPositionInLine" : 47
      },
      "19" : {
        "Text" : " ==========    EXAMPLES   ========== ",
        "Line" : 433,
        "CharPositionInLine" : 47
      },
      "20" : {
        "Text" : " =================================== ",
        "Line" : 434,
        "CharPositionInLine" : 47
      },
      "21" : {
        "Text" : " =================================== ",
        "Line" : 442,
        "CharPositionInLine" : 47
      },
      "22" : {
        "Text" : " ==========     ZIP       ========== ",
        "Line" : 443,
        "CharPositionInLine" : 47
      },
      "23" : {
        "Text" : " =================================== ",
        "Line" : 444,
        "CharPositionInLine" : 47
      },
      "24" : {
        "Text" : " creates zip files of the different distribution (source, binaries) ",
        "Line" : 446,
        "CharPositionInLine" : 78
      },
      "25" : {
        "Text" : " =================================== ",
        "Line" : 475,
        "CharPositionInLine" : 47
      },
      "26" : {
        "Text" : " ==========     CLEAN     ========== ",
        "Line" : 476,
        "CharPositionInLine" : 47
      },
      "27" : {
        "Text" : " =================================== ",
        "Line" : 477,
        "CharPositionInLine" : 47
      },
      "28" : {
        "Text" : " remove all directories ",
        "Line" : 479,
        "CharPositionInLine" : 34
      },
      "29" : {
        "Text" : " ==================================== ",
        "Line" : 495,
        "CharPositionInLine" : 48
      },
      "30" : {
        "Text" : " ==========     HELP       ========== ",
        "Line" : 496,
        "CharPositionInLine" : 48
      },
      "31" : {
        "Text" : " ==================================== ",
        "Line" : 497,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 32
    },
    "asmx/test/build.xml" : {
      "ObjectId" : "0f92ec1ffdbdca058448480583a64c8bba36565f",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n ! ASM: a very small and fast Java bytecode manipulation framework\n ! Copyright (c) 2000-2005 INRIA, France Telecom\n ! All rights reserved.\n !\n ! Redistribution and use in source and binary forms, with or without\n ! modification, are permitted provided that the following conditions\n ! are met:\n ! 1. Redistributions of source code must retain the above copyright\n !    notice, this list of conditions and the following disclaimer.\n ! 2. Redistributions in binary form must reproduce the above copyright\n !    notice, this list of conditions and the following disclaimer in the\n !    documentation and/or other materials provided with the distribution.\n ! 3. Neither the name of the copyright holders nor the names of its\n !    contributors may be used to endorse or promote products derived from\n !    this software without specific prior written permission.\n !\n ! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n ! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n ! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n ! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n ! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n ! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n ! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n ! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n ! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n ! THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " ==================================== ",
        "Line" : 33,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : " ======== PROPERTY DEFINITION ======= ",
        "Line" : 34,
        "CharPositionInLine" : 48
      },
      "3" : {
        "Text" : " ==================================== ",
        "Line" : 35,
        "CharPositionInLine" : 48
      },
      "4" : {
        "Text" : " ================================== ",
        "Line" : 94,
        "CharPositionInLine" : 46
      },
      "5" : {
        "Text" : " ========  INITIALIZATION   ======= ",
        "Line" : 95,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : " ================================== ",
        "Line" : 96,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : " ==================================== ",
        "Line" : 117,
        "CharPositionInLine" : 48
      },
      "8" : {
        "Text" : " =========== COMPILATION ============ ",
        "Line" : 118,
        "CharPositionInLine" : 48
      },
      "9" : {
        "Text" : " ==================================== ",
        "Line" : 119,
        "CharPositionInLine" : 48
      },
      "10" : {
        "Text" : " ============================= ",
        "Line" : 168,
        "CharPositionInLine" : 41
      },
      "11" : {
        "Text" : " =========== TEST ============ ",
        "Line" : 169,
        "CharPositionInLine" : 41
      },
      "12" : {
        "Text" : " ============================= ",
        "Line" : 170,
        "CharPositionInLine" : 41
      },
      "13" : {
        "Text" : "multipleAnt dir=\"${test.deviance}\" inheritRefs=\"true\"/>\n    <multipleAnt dir=\"${test.thread}\" inheritRefs=\"true\"/>\n    <multipleAnt dir=\"${test.stress}\" inheritRefs=\"true\"/",
        "Line" : 176,
        "CharPositionInLine" : 61
      },
      "14" : {
        "Text" : "multipleAnt dir=\"${test.deviance}\" target=\"${test.name}\" inheritRefs=\"true\"/>\n    <multipleAnt dir=\"${test.thread}\" target=\"${test.name}\" inheritRefs=\"true\"/>\n    <multipleAnt dir=\"${test.stress}\" target=\"${test.name}\" inheritRefs=\"true\"/",
        "Line" : 192,
        "CharPositionInLine" : 83
      },
      "15" : {
        "Text" : "junitreport todir=\"${out.test}/reports\">\n      <fileset dir=\"${out.test}/reports\">\n        <include name=\"TEST-*.xml\"/>\n      </fileset>\n      <report todir=\"${out.test}/reports\"/>\n    </junitreport",
        "Line" : 202,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 16
    },
    "build.xml" : {
      "ObjectId" : "f3a4e0fa49e4d6c98e4357d21f67edfb4d6efd71",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " default location of projects, has effect only if not previously set ",
        "Line" : 8,
        "CharPositionInLine" : 79
      },
      "1" : {
        "Text" : " Ant's copy task does not retain file permissions,\n         so use <exec executable=\"cp\"> instead.\n    <copy file=\"bin-devel/git.pre-commit\" tofile=\"../.git/hooks/pre-commit\" preservelastmodified=\"true\" />\n    ",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : " TODO\n    <exec executable=\"cp\">\n      <arg value=\"-p\"/>\n      <arg value=\".git.pre-commit\"/>\n      <arg value=\".git/hooks/pre-commit\"/>\n    </exec>\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : " TODO: Get this working ",
        "Line" : 44,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : " Known to fail ",
        "Line" : 45,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : " TODO: Add asmx tests when they work ",
        "Line" : 76,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : " To permit renaming this directory, ${scene-lib} and ${afu} must be\n         relative rather than absolute filenames. ",
        "Line" : 98,
        "CharPositionInLine" : 54
      },
      "7" : {
        "Text" : " There should be a way to templatize the following. ",
        "Line" : 126,
        "CharPositionInLine" : 64
      },
      "8" : {
        "Text" : " Avoids \"Argument list too long\" message.  You can also set\n       this property in file local.properties. ",
        "Line" : 161,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : " TEMPORARY: Do not run this until branches have been merged. ",
        "Line" : 195,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 10
    },
    "buildtest/build.xml" : {
      "ObjectId" : "ccb60838977be89ac9c3b381667d22b0ee149669",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n        Initialization target to setup the build directory.\n    ",
        "Line" : 5,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "\n        Targets to checkout all the projects.\n    ",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "\n        Targets to build all the projects.\n    ",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n        Targets to actually run the tests.\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " Runs the tests on the extensions to ASM. ",
        "Line" : 73,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : " Runs the tests on the annotation scene library, and also\n        on the classfile to index file and vice versa part of the\n        annotation file utilities. ",
        "Line" : 85,
        "CharPositionInLine" : 39
      },
      "6" : {
        "Text" : " Runs the tests on the annotator - the index file to source code tool\n        of the annotation file utilities. ",
        "Line" : 95,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "scene-lib/build.xml" : {
      "ObjectId" : "85a16b93246a909967c9698122d46ae021aa1d1b",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " I should reinstate this after figuring out how to make\n        it remake only when necessary, not always.  (I should\n        probably do that outside ASM rather than modifying ASM itself?)\n        And, supply -Dproduct.noshrink to asmx ant command, at least when\n        testing.\n        ",
        "Line" : 67,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "\n        <ant dir=\"${asmx}\" inheritAll=\"false\" target=\"bin\"/>\n        ",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : " Can't use jsr308-langtools javac.jar, because javap.jar is also required. ",
        "Line" : 115,
        "CharPositionInLine" : 95
      },
      "3" : {
        "Text" : " Checker Framework qualifiers should not go in generated .jar files ",
        "Line" : 118,
        "CharPositionInLine" : 88
      },
      "4" : {
        "Text" : " I want to say that package-info.java does not force\n        recompilation if it is older than all source files in its own\n        package. ",
        "Line" : 142,
        "CharPositionInLine" : 21
      },
      "5" : {
        "Text" : " These print \"true\" if set and the property name in curly braces, such as \"${source.files.java.nopackageinfo.uptodate}\", if not set. ",
        "Line" : 155,
        "CharPositionInLine" : 149
      },
      "6" : {
        "Text" : " Copy non-java files to bin.  These are mostly .jaif files. ",
        "Line" : 165,
        "CharPositionInLine" : 76
      },
      "7" : {
        "Text" : " TODO: How can we convert a path to a variable?\n              <arg value=\"${sourcepath}:${testpath}\"/>\n            ",
        "Line" : 189,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : " TODO: Note how this target puts source and test files\n                 into the same output directory and then in\n                 annotation-file-utilities/build.xml we need to filter\n                 out test files. ",
        "Line" : 193,
        "CharPositionInLine" : 37
      },
      "9" : {
        "Text" : " To prevent a cyclic dependency with the Checker\n                 Framework, ignore type annotations in comments here.\n                 A separate target could be added to check the qualifiers\n                 and have them in the generated code. ",
        "Line" : 200,
        "CharPositionInLine" : 58
      },
      "10" : {
        "Text" : " Make sure we only have Java 8 source code and generate Java 8 bytecode. ",
        "Line" : 204,
        "CharPositionInLine" : 93
      },
      "11" : {
        "Text" : " To not get a warning about missing bootstrap\n                 classpath for Java 8 (once we use Java 9). ",
        "Line" : 210,
        "CharPositionInLine" : 64
      },
      "12" : {
        "Text" : "\n       <pathconvert property=\"libpath\" refid=\"libpath\"/>\n       <pathconvert property=\"source.files.java.spaceseparated\" refid=\"source.files.java\" pathsep=\" \"/>\n        <exec executable=\"javac\" failonerror=\"true\">\n          <arg value=\"-version\"/>\n          <arg value=\"-d\"/>\n          <arg value=\"bin\"/>\n          <arg value=\"-g\"/>\n          <arg value=\"-cp\"/>\n          <arg value=\"${libpath}\"/>\n          <arg line=\"source.files.java.spaceseparated\"/>\n        </exec>\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : " Working directory is ignored when same JVM is used.  That means\n             that the relative path for ${scene-lib} works only if this target\n             is invoked from the same directory as the build.xml file appears\n             in.  We can fix the java task by adding this:\n              fork=\"true\"\n              dir=\"${scene-lib}/src/annotations/tests\"\n             but there are other uses of ${scene-lib} in this target.\n        ",
        "Line" : 274,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : " Debugging output in case I don't have access to the filesystem. ",
        "Line" : 286,
        "CharPositionInLine" : 81
      },
      "15" : {
        "Text" : " = = = = = = = = = = = = = = = = =\n         macrodef: echopath\n         Use as:    <echopath pathid=\"mypath\"/>\n         = = = = = = = = = = = = = = = = = ",
        "Line" : 353,
        "CharPositionInLine" : 47
      },
      "16" : {
        "Text" : " get given path in a printable form ",
        "Line" : 358,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 17
    },
    "scene-lib/test/annotations-expected/tests/classfile/cases/Makefile" : {
      "ObjectId" : "8a156213e03140a0907dd151ad52164af8a3342f",
      "LastModified" : "2019-02-03T18:38:43Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 11,
    "ANT" : 6
  },
  "ElapsedTime" : 3285
}