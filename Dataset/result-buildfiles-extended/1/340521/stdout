{
  "Repository" : "340521",
  "Revision" : "HEAD",
  "ObjectId" : "7ba7f3c2e16df6c8db0d8114e124957199cea1ff",
  "CommitTime" : "2017-02-12T10:32:53Z",
  "Files" : {
    "framework/images/webapp/images/date/timezones/Makefile" : {
      "ObjectId" : "d76a81e4edf890e3a6e95214dcf41d96bf67d1ee",
      "LastModified" : "2013-01-13T10:22:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# <pre>\n\n# This file is in the public domain, so clarified as of\n\n# 2009-05-17 by Arthur David Olson.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package name for the code distribution.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version numbers of the code and data distributions.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Change the line below for your time zone (after finding the zone you want in\n\n# the time zone files, or adding it to a time zone file).\n\n# Alternately, if you discover you've got the wrong time zone, you can just\n\n#\tzic -l rightzone\n\n# to correct things.\n\n# Use the command\n\n#\tmake zonenames\n\n# to get a list of the values you can use for LOCALTIME.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you want something other than Eastern United States time as a template\n\n# for handling POSIX-style time zone environment variables,\n\n# change the line below (after finding the zone you want in the\n\n# time zone files, or adding it to a time zone file).\n\n# (When a POSIX-style environment variable is handled, the rules in the\n\n# template file are used to determine \"spring forward\" and \"fall back\" days and\n\n# times; the environment variable itself specifies UTC offsets of standard and\n\n# summer time.)\n\n# Alternately, if you discover you've got the wrong time zone, you can just\n\n#\tzic -p rightzone\n\n# to correct things.\n\n# Use the command\n\n#\tmake zonenames\n\n# to get a list of the values you can use for POSIXRULES.\n\n# If you want POSIX compatibility, use \"America/New_York\".\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Also see TZDEFRULESTRING below, which takes effect only\n\n# if the time zone files cannot be accessed.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Everything gets put in subdirectories of. . .\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# \"Compiled\" time zone information is placed in the \"TZDIR\" directory\n\n# (and subdirectories).\n\n# Use an absolute path name for TZDIR unless you're just testing the software.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The \"tzselect\", \"zic\", and \"zdump\" commands get installed in. . .\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If you \"make INSTALL\", the \"date\" command gets installed in. . .\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Manual pages go in subdirectories of. . .\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Library functions are put in an archive in LIBDIR.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If you always want time values interpreted as \"seconds since the epoch\n\n# (not counting leap seconds)\", use\n\n#\tREDO=\t\tposix_only\n\n# below.  If you always want right time values interpreted as \"seconds since\n\n# the epoch\" (counting leap seconds)\", use\n\n#\tREDO=\t\tright_only\n\n# below.  If you want both sets of data available, with leap seconds not\n\n# counted normally, use\n\n#\tREDO=\t\tposix_right\n\n# below.  If you want both sets of data available, with leap seconds counted\n\n# normally, use\n\n#\tREDO=\t\tright_posix\n\n# below.\n\n# POSIX mandates that leap seconds not be counted; for compatibility with it,\n\n# use either \"posix_only\" or \"posix_right\".\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Since \".\" may not be in PATH...\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Non-default libraries needed to link.\n\n# Add -lintl if you want to use `gettext' on Solaris.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add the following to the end of the \"CFLAGS=\" line as needed.\n\n#  -DHAVE_ADJTIME=0 if `adjtime' does not exist (SVR0?)\n\n#  -DHAVE_GETTEXT=1 if `gettext' works (GNU, Linux, Solaris); also see LDLIBS\n\n#  -DHAVE_INCOMPATIBLE_CTIME_R=1 if your system's time.h declares\n\n#\tctime_r and asctime_r incompatibly with the POSIX standard (Solaris 8).\n\n#  -DHAVE_SETTIMEOFDAY=0 if settimeofday does not exist (SVR0?)\n\n#  -DHAVE_SETTIMEOFDAY=1 if settimeofday has just 1 arg (SVR4)\n\n#  -DHAVE_SETTIMEOFDAY=2 if settimeofday uses 2nd arg (4.3BSD)\n\n#  -DHAVE_SETTIMEOFDAY=3 if settimeofday ignores 2nd arg (4.4BSD)\n\n#  -DHAVE_STDINT_H=1 if you have a pre-C99 compiler with \"stdint.h\"\n\n#  -DHAVE_SYMLINK=0 if your system lacks the symlink function\n\n#  -DHAVE_SYS_STAT_H=0 if your compiler lacks a \"sys/stat.h\"\n\n#  -DHAVE_SYS_WAIT_H=0 if your compiler lacks a \"sys/wait.h\"\n\n#  -DLOCALE_HOME=\\\"path\\\" if locales are in \"path\", not \"/usr/lib/locale\"\n\n#  -DHAVE_UNISTD_H=0 if your compiler lacks a \"unistd.h\" (Microsoft C++ 7?)\n\n#  -DHAVE_UTMPX_H=1 if your compiler has a \"utmpx.h\"\n\n#  -DTZDEFRULESTRING=\\\",date/time,date/time\\\" to default to the specified\n\n#\tDST transitions if the time zone files cannot be accessed\n\n#  -DTZ_DOMAIN=\\\"foo\\\" to use \"foo\" for gettext domain name; default is \"tz\"\n\n#  -TTZ_DOMAINDIR=\\\"/path\\\" to use \"/path\" for gettext directory;\n\n#\tthe default is system-supplied, typically \"/usr/lib/locale\"\n\n#  $(GCC_DEBUG_FLAGS) if you are using GCC and want lots of checking\n\n#  -DNO_RUN_TIME_WARNINGS_ABOUT_YEAR_2000_PROBLEMS_THANK_YOU=1\n\n#\tif you do not want run time warnings about formats that may cause\n\n#\tyear 2000 grief\n\n#  -DZIC_MAX_ABBR_LEN_WO_WARN=3\n\n#\t(or some other number) to set the maximum time zone abbreviation length\n\n#\tthat zic will accept without a warning (the default is 6)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# If you want to use System V compatibility code, add\n\n#\t-DUSG_COMPAT\n\n# to the end of the \"CFLAGS=\" line.  This arrange for \"timezone\" and \"daylight\"\n\n# variables to be kept up-to-date by the time conversion functions.  Neither\n\n# \"timezone\" nor \"daylight\" is described in X3J11's work.\n\n#\n\n# If your system has a \"GMT offset\" field in its \"struct tm\"s\n\n# (or if you decide to add such a field in your system's \"time.h\" file),\n\n# add the name to a define such as\n\n#\t-DTM_GMTOFF=tm_gmtoff\n\n# or\n\n#\t-DTM_GMTOFF=_tm_gmtoff\n\n# to the end of the \"CFLAGS=\" line.\n\n# Neither tm_gmtoff nor _tm_gmtoff is described in X3J11's work;\n\n# in its work, use of \"tm_gmtoff\" is described as non-conforming.\n\n# Both Linux and BSD have done the equivalent of defining TM_GMTOFF in\n\n# their recent releases.\n\n#\n\n# If your system has a \"zone abbreviation\" field in its \"struct tm\"s\n\n# (or if you decide to add such a field in your system's \"time.h\" file),\n\n# add the name to a define such as\n\n#\t-DTM_ZONE=tm_zone\n\n# or\n\n#\t-DTM_ZONE=_tm_zone\n\n# to the end of the \"CFLAGS=\" line.\n\n# Neither tm_zone nor _tm_zone is described in X3J11's work;\n\n# in its work, use of \"tm_zone\" is described as non-conforming.\n\n# Both UCB and Sun have done the equivalent of defining TM_ZONE in\n\n# their recent releases.\n\n#\n\n# If you want functions that were inspired by early versions of X3J11's work,\n\n# add\n\n#\t-DSTD_INSPIRED\n\n# to the end of the \"CFLAGS=\" line.  This arranges for the functions\n\n# \"tzsetwall\", \"offtime\", \"timelocal\", \"timegm\", \"timeoff\",\n\n# \"posix2time\", and \"time2posix\" to be added to the time conversion library.\n\n# \"tzsetwall\" is like \"tzset\" except that it arranges for local wall clock\n\n# time (rather than the time specified in the TZ environment variable)\n\n# to be used.\n\n# \"offtime\" is like \"gmtime\" except that it accepts a second (long) argument\n\n# that gives an offset to add to the time_t when converting it.\n\n# \"timelocal\" is equivalent to \"mktime\".\n\n# \"timegm\" is like \"timelocal\" except that it turns a struct tm into\n\n# a time_t using UTC (rather than local time as \"timelocal\" does).\n\n# \"timeoff\" is like \"timegm\" except that it accepts a second (long) argument\n\n# that gives an offset to use when converting to a time_t.\n\n# \"posix2time\" and \"time2posix\" are described in an included manual page.\n\n# X3J11's work does not describe any of these functions.\n\n# Sun has provided \"tzsetwall\", \"timelocal\", and \"timegm\" in SunOS 4.0.\n\n# These functions may well disappear in future releases of the time\n\n# conversion package.\n\n#\n\n# If you want Source Code Control System ID's left out of object modules, add\n\n#\t-DNOID\n\n# to the end of the \"CFLAGS=\" line.\n\n#\n\n# If you'll never want to handle solar-time-based time zones, add\n\n#\t-DNOSOLAR\n\n# to the end of the \"CFLAGS=\" line\n\n# (and comment out the \"SDATA=\" line below).\n\n# This reduces (slightly) the run-time data-space requirements of\n\n# the time conversion functions; it may reduce the acceptability of your system\n\n# to folks in oil- and cash-rich places.\n\n#\n\n# If you want to allocate state structures in localtime, add\n\n#\t-DALL_STATE\n\n# to the end of the \"CFLAGS=\" line.  Storage is obtained by calling malloc.\n\n#\n\n# If you want an \"altzone\" variable (a la System V Release 3.1), add\n\n#\t-DALTZONE\n\n# to the end of the \"CFLAGS=\" line.\n\n# This variable is not described in X3J11's work.\n\n#\n\n# If you want a \"gtime\" function (a la MACH), add\n\n#\t-DCMUCS\n\n# to the end of the \"CFLAGS=\" line\n\n# This function is not described in X3J11's work.\n\n#\n\n# NIST-PCTS:151-2, Version 1.4, (1993-12-03) is a test suite put\n\n# out by the National Institute of Standards and Technology\n\n# which claims to test C and Posix conformance.  If you want to pass PCTS, add\n\n#\t-DPCTS\n\n# to the end of the \"CFLAGS=\" line.\n\n#\n\n# If you want strict compliance with XPG4 as of 1994-04-09, add\n\n#\t-DXPG4_1994_04_09\n\n# to the end of the \"CFLAGS=\" line.  This causes \"strftime\" to always return\n\n# 53 as a week number (rather than 52 or 53) for those days in January that\n\n# before the first Monday in January when a \"%V\" format is used and January 1\n\n# falls on a Friday, Saturday, or Sunday.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Linker flags.  Default to $(LFLAGS) for backwards compatibility\n\n# to tzcode2012h and earlier.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The name of a Posix-compliant `awk' on your system.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# The full path name of a Posix-compliant shell that supports the Korn shell's\n\n# 'select' statement, as an extension.  These days, Bash is the most popular.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The path where SGML DTDs are kept.\n\n# The default is appropriate for Ubuntu.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The catalog file(s) to use when validating.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The name, arguments and environment of a program to validate your web pages.\n\n# See <http://www.jclark.com/sp/> for a validator, and\n\n# <http://validator.w3.org/source/> for a validation library.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Flags to give 'tar' when making a distribution.\n\n# Try to use flags appropriate for GNU tar.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Flags to give 'gzip' when making a distribution.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###############################################################################\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# And for the benefit of csh users on systems that assume the user\n\n# shell should be used to handle commands in Makefiles. . .\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# In earlier versions of this makefile, the other two directories were\n\n# subdirectories of $(TZDIR).  However, this led to configuration errors.\n\n# For example, with posix_right under the earlier scheme,\n\n# TZ='right/Australia/Adelaide' got you localtime with leap seconds,\n\n# but gmtime without leap seconds, which led to problems with applications\n\n# like sendmail that subtract gmtime from localtime.\n\n# Therefore, the other two directories are now siblings of $(TZDIR).\n\n# You must replace all of $(TZDIR) to switch from not using leap seconds\n\n# to using them, or vice versa.\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Set the time stamps to those of the git repository, if available,\n\n# and if the files have not changed since then.\n\n# This uses GNU 'touch' syntax 'touch -d@N FILE',\n\n# where N is the number of seconds since 1970.\n\n# If git or GNU 'touch' is absent, do nothing.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# The zics below ensure that each data file can stand on its own.\n\n# We also do an all-files run to catch links to links.\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30,
      "Errorlog" : "line 398:27 token recognition error at: '\\1'\nline 400:26 token recognition error at: '\\1'\n"
    },
    "framework/images/webapp/images/jquery/plugins/elrte-1.3/src/Makefile" : {
      "ObjectId" : "a1b60fbec70561845e9ab009199cba989d1f8975",
      "LastModified" : "2013-01-13T10:22:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# build relese\n\n# author: Troex Nevelin <troex@fury.scancode.ru>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# YUI Compressor\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Closure Compiler\n\n# ADVANCED_OPTIMIZATIONS maybe someday\n\n#COMPRESSOR= java -jar ../../../compiler.jar \\\n\t\t\t--charset UTF-8 --compilation_level SIMPLE_OPTIMIZATIONS \\\n\t\t\t--js_output_file ${elrte_js_min} --js ${elrte_js}\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define objects\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# elLib\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# elRTE\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# elLib\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# elRTE\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# compressor\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "framework/images/webapp/images/jquery/plugins/flot/Makefile" : {
      "ObjectId" : "2e070d0c3c03417df83c6fd217eea8393887b16f",
      "LastModified" : "2014-01-20T16:27:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for generating minified files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we cheat and process all .js files instead of an exhaustive list\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 8937
}