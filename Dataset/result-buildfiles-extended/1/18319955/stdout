{
  "Repository" : "18319955",
  "Revision" : "HEAD",
  "ObjectId" : "f5d9f7806d6d319dcf8699b9dd86875ce4ea8cb9",
  "CommitTime" : "2017-03-22T10:48:27Z",
  "Files" : {
    "node_modules/body-parser/node_modules/bytes/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2015-06-16T09:27:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/body-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/body-parser/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/cluster/Makefile" : {
      "ObjectId" : "0c721ac9eef205b3f2f3b6d4855556c3d50b2a31",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/cluster/node_modules/log/Makefile" : {
      "ObjectId" : "6c12be5cec15107a6ad501e1677a7f48fc4c97b2",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/cron/Makefile" : {
      "ObjectId" : "256ab07fbf4827c6bb06fad9113940b10a305eef",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/csv-parser/node_modules/ldjson-stream/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2015-06-16T09:27:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/csv-parser/node_modules/ndjson/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/d3/Makefile" : {
      "ObjectId" : "bb7a740d5d90ae58857a9a01746b9b15d73d35fa",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/Makefile" : {
      "ObjectId" : "c0c2dd6aac89f9137512587dcfa469d0f999eeea",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/d3-geo-projection/Makefile" : {
      "ObjectId" : "b335aff11b02c1676c991fda935aa45822da75e6",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/d3-geo-projection/node_modules/brfs/node_modules/static-module/node_modules/falafel/node_modules/foreach/Makefile" : {
      "ObjectId" : "eae41178666a0e7f624dd07f1e9fc8d8e38e038b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/d3-geo-projection/node_modules/brfs/node_modules/static-module/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/d3-geo-projection/node_modules/brfs/node_modules/through2/node_modules/readable-stream/node_modules/isarray/Makefile" : {
      "ObjectId" : "787d56e1e982e48588bc199f36f0d50cb4724066",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/d3-geo-projection/node_modules/brfs/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/queue-async/Makefile" : {
      "ObjectId" : "3fa1d97bda92b95ff6ed4a67f01d7360e38fbf4e",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/rw/Makefile" : {
      "ObjectId" : "6790e41252fa3e8aa9c12693c012756a4eb439b4",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/node_modules/topojson/node_modules/shapefile/Makefile" : {
      "ObjectId" : "9fa980b2c24bcffc5facc732e369144a264b2ce4",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ogr2ogr doesnâ€™t support logical (L) or date (D) properties (apparently),\n\n# so boolean-property and date-property were made by hand in a hex editor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "node_modules/datamaps/src/js/components/d3/Makefile" : {
      "ObjectId" : "19a5e1ecceb71ca9b46098ad3b782af568f3ce3f",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/datamaps/src/js/components/topojson/Makefile" : {
      "ObjectId" : "7905a10edaaa10fc6dda46d1073d2e0cc4d837af",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/express-session/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/express/node_modules/escape-html/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/express/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/goeBURST/node_modules/csv-parser/node_modules/ldjson-stream/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/heap/Makefile" : {
      "ObjectId" : "5030dee33031bc6a23118ec7f62f21c6c2fc8fa1",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/jsonwebtoken/node_modules/joi/node_modules/isemail/Makefile" : {
      "ObjectId" : "c2adcd18e2698f5fd2e851fb346fc35f34b1f478",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/jsonwebtoken/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/kue/Makefile" : {
      "ObjectId" : "329a847f62e1a426c8751ffe459ed697c35aef87",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/kue/node_modules/node-redis-warlock/node_modules/node-redis-scripty/Makefile" : {
      "ObjectId" : "a1a71176bda2a31cb8d17ee52bf485e4c06173f2",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/kue/node_modules/pug/node_modules/pug-lexer/node_modules/character-parser/node_modules/is-regex/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "node_modules/kue/node_modules/reds/Makefile" : {
      "ObjectId" : "b61d3338a3f3f0aa873a0d453e4d7f16785e3c06",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/kue/node_modules/reds/node_modules/natural/Makefile" : {
      "ObjectId" : "23cb027a9c8632399e46e6c8c019cb4fedb426d4",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (c) 2011, Chris Umbel\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "node_modules/l/node_modules/connect/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/l/node_modules/connect/node_modules/finalhandler/node_modules/escape-html/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/async/Makefile" : {
      "ObjectId" : "bad647c63422b720c1927a27d5fc7c6772454f48",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/npm/Makefile" : {
      "ObjectId" : "82fa8b65e8f44e6086c4777628a07e92af799e00",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# backwards compat\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use `npm install ronn` for this to work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "node_modules/l/node_modules/hook.io/node_modules/npm/node_modules/retry/Makefile" : {
      "ObjectId" : "a6e68c4182e5fc72d39d0cdbe24346c2fd72a71b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io-client/Makefile" : {
      "ObjectId" : "f2d2f41a9c4dd63ea4e94d51f915c5442f63168a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io-client/node_modules/ws/Makefile" : {
      "ObjectId" : "151aa2ba53520c9814013b27e2c7785a2cdbd566",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io-client/node_modules/ws/build/Makefile" : {
      "ObjectId" : "7d89af3cdab41727254bc72bbc6a524a9ddfe17f",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io-client/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io/Makefile" : {
      "ObjectId" : "832cba8bdbe8549c50179176bfe95467294aa680",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io/node_modules/policyfile/Makefile" : {
      "ObjectId" : "1362d66a4fe515fae93cf41b23059426be34f58e",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/socket.io/support/node-websocket-client/Makefile" : {
      "ObjectId" : "e7c849a4c2aef61f5f57b4992738fdbe0b2c6666",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This makefile exists to help run tests.\n\n#\n\n# If TEST_UNIX is a non-empty value, runs tests for UNIX sockets. This\n\n# functionality is not in node-websocket-server at the moment.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "node_modules/l/node_modules/hook.io/node_modules/union/node_modules/qs/Makefile" : {
      "ObjectId" : "84a78ec18b73e9ff4bdf0008a4be8e364e20e033",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/vendor/socket.io-client/Makefile" : {
      "ObjectId" : "7d413bfbcbf9b07021e7601304dc1fae97f1a1f6",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/hook.io/vendor/socket.io/Makefile" : {
      "ObjectId" : "86427d64883a5ecee49eeabb6c726e0ea9c7f10f",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "b102d5ab800b6c4723089b2dca22b1f10f7fb328",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/hawk/node_modules/boom/Makefile" : {
      "ObjectId" : "07a7f67126922cc4b862c90f7ffb8d3d5d60d029",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "3a89298fbd036f675a0537f6590135dd3138d4da",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "83aaf0c0c635d867fa599e0c59677592055c9b01",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/jsdom/node_modules/request/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/l/node_modules/validator/Makefile" : {
      "ObjectId" : "4c838353b0b8524804d3b49365fbf56e3fd4c140",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/massive/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/massive/node_modules/pg-query-stream/Makefile" : {
      "ObjectId" : "d7ec83d549a9b4dc8c4815471b3323c4995eaaa2",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/massive/node_modules/pg-query-stream/node_modules/pg-cursor/Makefile" : {
      "ObjectId" : "d7ec83d549a9b4dc8c4815471b3323c4995eaaa2",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/hooks-fixed/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/hooks/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/kareem/Makefile" : {
      "ObjectId" : "f71ba900895bb9079f6c39a8f47dd1342720fe9b",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mongodb/Makefile" : {
      "ObjectId" : "59d2bfeb89e2fd0132d975d4241bc824856071ac",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mongodb/node_modules/bson/Makefile" : {
      "ObjectId" : "77ce4e040856aa32d56b49559b4ea125caba9fe0",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mongodb/node_modules/bson/build/Makefile" : {
      "ObjectId" : "c37b971be877ec78df2c4d68112540c03f89e0d5",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "node_modules/mongoose/node_modules/mongodb/node_modules/bson/ext/Makefile" : {
      "ObjectId" : "435999ee96002d5c99c19d4e68daff2273706721",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mongodb/node_modules/kerberos/build/Makefile" : {
      "ObjectId" : "f7f01e217ca040270983143c210531cabc628e01",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "node_modules/mongoose/node_modules/mongodb/node_modules/readable-stream/node_modules/isarray/Makefile" : {
      "ObjectId" : "787d56e1e982e48588bc199f36f0d50cb4724066",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "b0bb0819b7703ad4840145ed3df36afe6ba4614a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mquery/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/mquery/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/mongoose/node_modules/mquery/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/ms/Makefile" : {
      "ObjectId" : "dded504de64d4e888bbb763b26b8406acb011c3c",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/mongoose/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/morgan/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/multer/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/node-restful/Makefile" : {
      "ObjectId" : "2b17262b82ce1f4793cda4009b279c17cdc7e49f",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/nvd3/Makefile" : {
      "ObjectId" : "a234fed8bbdff4aa39c47a144bfce743006efc0a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/passport/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/pg/Makefile" : {
      "ObjectId" : "b7476dc9d78c86acafdc3b110ca0fa47eab24275",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/pg/node_modules/generic-pool/Makefile" : {
      "ObjectId" : "669888dc74df72a441444754e7e74f4fa30c2187",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/pg/node_modules/pg-types/Makefile" : {
      "ObjectId" : "d7ec83d549a9b4dc8c4815471b3323c4995eaaa2",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/pg/node_modules/pg-types/node_modules/postgres-interval/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/pg/node_modules/semver/Makefile" : {
      "ObjectId" : "71af0e9750cd0aba158bd9dfd77fbdb6c8d765f3",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "b102d5ab800b6c4723089b2dca22b1f10f7fb328",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "3a89298fbd036f675a0537f6590135dd3138d4da",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "83aaf0c0c635d867fa599e0c59677592055c9b01",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/verror/Makefile" : {
      "ObjectId" : "00faa97de520890d9b1fe77fe3184909069d0405",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/request/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "node_modules/restify/node_modules/bunyan/node_modules/dtrace-provider/build/Makefile" : {
      "ObjectId" : "7ee9390a2b2a5fb769c5a65ca9aca0eb22cb6b32",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "node_modules/restify/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "node_modules/restify/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/csv/Makefile" : {
      "ObjectId" : "5954e3afc4153423bfa71c01db53bfa2c7f5c1ab",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/dtrace-provider/build/Makefile" : {
      "ObjectId" : "d5e28fca1fb518037d7fd9ca771f02d1533f4da6",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "node_modules/restify/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "node_modules/restify/node_modules/escape-regexp-component/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/semver/Makefile" : {
      "ObjectId" : "71af0e9750cd0aba158bd9dfd77fbdb6c8d765f3",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/spdy/node_modules/spdy-transport/node_modules/readable-stream/node_modules/isarray/Makefile" : {
      "ObjectId" : "787d56e1e982e48588bc199f36f0d50cb4724066",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules/restify/node_modules/vasync/Makefile" : {
      "ObjectId" : "32b2d4a7c68a7685dafffd639be3dafbac1be02d",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools must be installed on the path\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/restify/node_modules/vasync/node_modules/verror/Makefile" : {
      "ObjectId" : "03504fae264267d6f4fa1c35466a61a408f925b3",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/restify/node_modules/vasync/node_modules/verror/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/restify/node_modules/verror/Makefile" : {
      "ObjectId" : "03504fae264267d6f4fa1c35466a61a408f925b3",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/restify/node_modules/verror/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2016-01-05T17:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules/sse/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2017-03-22T10:41:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 122
  },
  "ElapsedTime" : 3541
}