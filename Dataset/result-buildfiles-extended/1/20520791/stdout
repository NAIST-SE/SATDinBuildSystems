{
  "Repository" : "20520791",
  "Revision" : "HEAD",
  "ObjectId" : "484d76df9344cb5c153a2c361c5d5018912d4cf4",
  "CommitTime" : "2019-03-17T23:51:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "db1147df7f971b4265549c567222614c009e0928",
      "LastModified" : "2018-04-20T19:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Peloton project\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ CTest\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Peloton version\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --[ Output directory\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Using cmake scripts and modules\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Options\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Dependencies\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ C++11 Flags\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create a new pre-processor macro __PELOTONFILE__ that has a truncated\n\n# path to reduce the size of the debug log messages.\n\n# Source: http://stackoverflow.com/a/16658858\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Color diagnostics\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# -- [ Debug Flags\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Flags\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ close$NOCANCEL for Mac OS\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# There is a problem with building on g++5.4 on Ubuntu 17.10 where\n\n# the compiler will not support a bunch of stuff in std for some reason.\n\n# For example, it would say that 'to_string' is not part of 'std'.\n\n# These flags fix these problems. I don't know whether g++5.5 has the same\n\n# problem, so I am only making this fix target all variants of 5.4.\n\n#\n\n# More Info: https://stackoverflow.com/a/38034394\n\n#            https://github.com/opencv/opencv/issues/10032#issuecomment-342347482\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ---[ Warnings\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ---[ Check if we should use the GNU Gold linker\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ Turn on sanitizers if necessary.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# -- [ Coverage\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Create the coveralls target.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#message(STATUS \"Coverage srcs : ${srcs}\" )\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# data directory for SSL\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ---[ Config generation\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ---[ Includes\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This is needed for gtest.\n",
        "Line" : 169,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# ---[ Subdirectories\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# -- [ Doxygen\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ---[ Linter target\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ---[ Configuration summary\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ---[ Export configs generation\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "cmake/CapnProtoMacros.cmake" : {
      "ObjectId" : "f2bf0cd6093ff5fa698b52b809042934500a2581",
      "LastModified" : "2017-12-26T04:31:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n\n#\n\n# Example usage:\n\n#   find_package(CapnProto)\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#   add_executable(foo main.cpp ${CAPNP_SRCS})\n\n#   target_link_libraries(foo CapnProto::capnp-rpc)\n\n#\n\n#  If you are using not using the RPC features you can use\n\n#  'CapnProto::capnp' in target_link_libraries call\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: CMAKE_CURRENT_BINARY_DIR).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRECTORY are always included.)\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# TODO: convert to cmake_parse_arguments\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have costimized and simplified the output path specification for the Peloton build\n\n# I'd rather not modify this code but the original logic was really impossible to put the\n\n# files to the position we want...\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Use cmake targets available\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# The capnpc output directory specification is fucking wierd...\n\n# It extracts src-prefix from the input path, and then append that behind\n\n# output_dir. If there's no src-prefix, the it will directly generate\n\n# the output files into the input directory.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/CompilerInfo.cmake" : {
      "ObjectId" : "64d581eed67d33451dcfb910965b0d0b9dc512fe",
      "LastModified" : "2017-12-25T16:00:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Licensed to the Apache Software Foundation (ASF) under one\n\n# or more contributor license agreements.  See the NOTICE file\n\n# distributed with this work for additional information\n\n# regarding copyright ownership.  The ASF licenses this file\n\n# to you under the Apache License, Version 2.0 (the\n\n# \"License\"); you may not use this file except in compliance\n\n# with the License.  You may obtain a copy of the License at\n\n#\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing,\n\n# software distributed under the License is distributed on an\n\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\n# KIND, either express or implied.  See the License for the\n\n# specific language governing permissions and limitations\n\n# under the License.\n\n#\n\n# Sets COMPILER_FAMILY to 'clang' or 'gcc'\n\n# Sets COMPILER_VERSION to the version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clang on Linux and Mac OS X before 10.9\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clang on Mac OS X 10.9 and later\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# clang on Mac OS X, XCode 7.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# gcc\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/ConfigGen.cmake" : {
      "ObjectId" : "59073d1b1fa9763b134afa886f02dc4de0ebadd7",
      "LastModified" : "2018-01-25T20:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Helper function to fetch peloton includes which will be passed to dependent projects\n\n# Usage:\n\n#   peloton_get_current_includes(<includes_list_variable>)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# remove at most one ${PROJECT_BINARY_DIR} include added for peloton_config.h\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# removing numpy includes (since not required for client libs)\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Helper function to get all list items that begin with given prefix\n\n# Usage:\n\n#   peloton_get_items_with_prefix(<prefix> <list_variable> <output_variable>)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for generation Peloton build- and install- tree export config files\n\n# Usage:\n\n#  peloton_generate_export_configs()\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Configure build-tree PelotonConfig.cmake file ]---\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add targets to the build-tree export set\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ Configure install-tree PelotonConfig.cmake file ]---\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# remove source and build dir includes\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add `install` include folder\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Install the PelotonConfig.cmake and export set to use with install-tree\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# TODO: Fix the target\n\n#install(EXPORT PelotonTargets DESTINATION ${install_cmake_suffix})\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# ---[ Configure and install version file ]---\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# TODO: Lines below are commented because Peloton does't declare its version in headers.\n\n# When the declarations are added, modify `peloton_extract_peloton_version()` macro and uncomment\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# configure_file(cmake/Templates/PelotonConfigVersion.cmake.in \"${PROJECT_BINARY_DIR}/PelotonConfigVersion.cmake\" @ONLY)\n\n# install(FILES \"${PROJECT_BINARY_DIR}/PelotonConfigVersion.cmake\" DESTINATION ${install_cmake_suffix})\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "e86fae410bdfcc08500d88064c6d1be76ad3d532",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This list is required for static linking and exported to PelotonConfig.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GCC 7 requires libatomic for cmpxchg16b instructions (used by libpg_query)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Boost\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Threads\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Google-gflags\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ intel tbb\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Cap'nProto\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# To include the CAPNP_GENERATE_CPP function from the capnproto installation\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Google-protobuf\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# --[ tensorflow\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# --[ Eigen3\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Libevent\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ Doxygen\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ Sanitizers\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  list(APPEND Peloton_LINKER_LIBS \"-ltsan\")\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOTE: link jemalloc only when building binaries.\n\n# ---[ Jemalloc\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --[ PQXX\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --[ Open SSL\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# --[ LLVM 3.7+\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# --[ FFI\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# --[ IWYU\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Generate clang compilation database\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/External/capnproto.cmake" : {
      "ObjectId" : "aff3fe3eb5156c3aeebf3c095ff8b06285c34c6e",
      "LastModified" : "2018-03-01T15:04:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# guard against multiple includes\n",
        "Line" : 1,
        "CharPositionInLine" : 26
      },
      "1" : {
        "Text" : "# use the system-wide capnp if present\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# capnp will use pthreads if it's available in the system, so we must link with it\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build capnp statically, but want to link it into the peloton shared library\n\n# this requires position-independent code\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This will set several system default installaion dirs which capnproto is using.\n\n# It's important especially for LIBDIR which varies from platform to platform.\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/External/gflags.cmake" : {
      "ObjectId" : "7b700c4848dd34749a48e1a47788cd0ca15a241e",
      "LastModified" : "2018-03-01T15:04:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# guard against multiple includes\n",
        "Line" : 1,
        "CharPositionInLine" : 27
      },
      "1" : {
        "Text" : "# use the system-wide gflags if present\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# gflags will use pthreads if it's available in the system, so we must link with it\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build gflags statically, but want to link it into the peloton shared library\n\n# this requires position-independent code\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/External/glog.cmake" : {
      "ObjectId" : "ac5d772fcc78301c5d2ba24bc9ef51ae526d8ba5",
      "LastModified" : "2018-03-01T15:04:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# glog depends on gflags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try the system-wide glog first\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# fetch and build glog from github\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build glog statically, but want to link it into the peloton shared library\n\n# this requires position-independent code\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# depend on gflags if we're also building it\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/Misc.cmake" : {
      "ObjectId" : "49e1c2cc91f8195ad54b2db622e494faf6f57703",
      "LastModified" : "2017-12-25T16:00:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Configuration types\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --[ If user doesn't specify build type then assume release\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Solution folders\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Install options\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ RPATH settings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Funny target\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Set debug postfix\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/Coveralls.cmake" : {
      "ObjectId" : "4f2aed6bca3f7bfefcd4b8239bce660ca48a390c",
      "LastModified" : "2017-12-25T16:00:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The MIT License (MIT)\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# Copyright (C) 2014 Joakim Söderberg <joakim.soderberg@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# must be outside coveralls_setup() to get correct path\n",
        "Line" : 25,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "#\n\n# Param _COVERAGE_SRCS\tA list of source files that coverage should be collected for.\n\n# Param _COVERALLS_UPLOAD Upload the result to coveralls?\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# When passing a CMake list to an external process, the list\n\n# will be converted from the format \"1;2;3\" to \"1 2 3\".\n\n# This means the script we're calling won't see it as a list\n\n# of sources, but rather just one long path. We remedy this\n\n# by replacing \";\" with \"*\" and then reversing that in the script\n\n# that we're calling.\n\n# http://cmake.3232098.n2.nabble.com/Passing-a-CMake-list-quot-as-is-quot-to-a-custom-target-td6505681.html\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#message(\"Coverage sources: ${COVERAGE_SRCS}\")\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Zero the coverage counters.\n\n# COMMAND ${CMAKE_COMMAND} -DPROJECT_BINARY_DIR=\"${PROJECT_BINARY_DIR}\" -P \"${_CMAKE_SCRIPT_PATH}/CoverallsClear.cmake\"\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Run regress tests.\n\n# COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Since we are running tests in a serial manner, it will take a long time rerunning all the test cases again, which\n\n# cause a time out error in the travis ci server. So We just use the .gcda file generated from the previous\n\n# make check to evaluate the coverage. Note that now we can only run make coveralls after running make check.\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Generate Gcov and translate it into coveralls JSON.\n\n# We do this by executing an external CMake script.\n\n# (We don't want this to run at CMake generation time, but after compilation and everything has run).\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO: This is passed like: \"a b c\", not \"a;b;c\"\n",
        "Line" : 79,
        "CharPositionInLine" : 39
      },
      "10" : {
        "Text" : "# Upload the JSON to coveralls.\n",
        "Line" : 99,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 11
    },
    "cmake/Modules/CoverallsClear.cmake" : {
      "ObjectId" : "7206886c70d0ceba003cd5ecf6dbf201293cd311",
      "LastModified" : "2017-12-25T16:00:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The MIT License (MIT)\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# Copyright (C) 2014 Joakim Söderberg <joakim.soderberg@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# do not follow symlinks in file(GLOB_RECURSE ...)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/CoverallsGenerateGcov.cmake" : {
      "ObjectId" : "e2624efdb352d63b8053417aae15f8f95fa9f1c5",
      "LastModified" : "2018-03-01T15:04:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The MIT License (MIT)\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# Copyright (C) 2014 Joakim Söderberg <joakim.soderberg@gmail.com>\n\n#\n\n# This is intended to be run by a custom target in a CMake project like this.\n\n# 0. Compile program with coverage support.\n\n# 1. Clear coverage data. (Recursively delete *.gcda in build dir)\n\n# 2. Run the unit tests.\n\n# 3. Run this script specifying which source files the coverage should be performed on.\n\n#\n\n# This script will then use gcov to generate .gcov files in the directory specified\n\n# via the COV_PATH var. This should probably be the same as your cmake build dir.\n\n#\n\n# It then parses the .gcov files to convert them into the Coveralls JSON format:\n\n# https://coveralls.io/docs/api\n\n#\n\n# Example for running as standalone CMake script from the command line:\n\n# (Note it is important the -P is at the end...)\n\n# $ cmake -DCOV_PATH=$(pwd)\n\n#         -DCOVERAGE_SRCS=\"catcierge_rfid.c;catcierge_timer.c\"\n\n#         -P ../cmake/CoverallsGcovUpload.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Make sure we have the needed arguments.\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Since it's not possible to pass a CMake list properly in the\n\n# \"1;2;3\" format to an external process, we have replaced the\n\n# \";\" with \"*\", so reverse that here so we get it back into the\n\n# CMake list format.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# convert all paths in COVERAGE_SRCS to absolute paths\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Fill in git remote data\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Branch.\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "############################# Macros #########################################\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# This macro converts from the full path format gcov outputs:\n\n#\n\n#    /path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n#\n\n# to the original source file path the .gcov is for:\n\n#\n\n#   /path/to/project/root/subdir/the_file.c\n\n#\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# /path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n# ->\n\n# #path#to#project#root#subdir#the_file.c.gcov\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# #path#to#project#root#subdir#the_file.c.gcov -> /path/to/project/root/subdir/the_file.c\n",
        "Line" : 170,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "##############################################################################\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Get the coverage data.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Get a list of all the object directories needed by gcov\n\n# (The directories the .gcda files and .o files are found in)\n\n# and run gcov on those.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# The -p below refers to \"Preserve path components\",\n\n# This means that the generated gcov filename of a source file will\n\n# keep the original files entire filepath, but / is replaced with #.\n\n# Example:\n\n#\n\n# /path/to/project/root/build/CMakeFiles/the_file.dir/subdir/the_file.c.gcda\n\n# ------------------------------------------------------------------------------\n\n# File '/path/to/project/root/subdir/the_file.c'\n\n# Lines executed:68.34% of 199\n\n# /path/to/project/root/subdir/the_file.c:creating '#path#to#project#root#subdir#the_file.c.gcov'\n\n#\n\n# If -p is not specified then the file is named only \"the_file.c.gcov\"\n\n#\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# TODO: Make these be absolute path\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get only the filenames to use for filtering.\n\n#set(COVERAGE_SRCS_NAMES \"\")\n\n#foreach (COVSRC ${COVERAGE_SRCS})\n\n#\tget_filename_component(COVSRC_NAME ${COVSRC} NAME)\n\n#\tmessage(\"${COVSRC} -> ${COVSRC_NAME}\")\n\n#\tlist(APPEND COVERAGE_SRCS_NAMES \"${COVSRC_NAME}\")\n\n#endforeach()\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Filter out all but the gcov files we want.\n\n#\n\n# We do this by comparing the list of COVERAGE_SRCS filepaths that the\n\n# user wants the coverage data for with the paths of the generated .gcov files,\n\n# so that we only keep the relevant gcov files.\n\n#\n\n# Example:\n\n# COVERAGE_SRCS =\n\n#\t\t\t\t/path/to/project/root/subdir/the_file.c\n\n#\n\n# ALL_GCOV_FILES =\n\n#\t\t\t\t/path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n#\t\t\t\t/path/to/project/root/build/#path#to#project#root#subdir#other_file.c.gcov\n\n#\n\n# Result should be:\n\n# GCOV_FILES =\n\n#\t\t\t\t/path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n#\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#message(\"Look in coverage sources: ${COVERAGE_SRCS}\")\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# /path/to/project/root/build/#path#to#project#root#subdir#the_file.c.gcov\n\n# ->\n\n# /path/to/project/root/subdir/the_file.c\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# skip if full path is not present\n\n# can happen if files are generated for external libraries\n",
        "Line" : 256,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Is this in the list of source files?\n\n# TODO: We want to match against relative path filenames from the source file root...\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# We remove it from the list, so we don't bother searching for it again.\n\n# Also files left in COVERAGE_SRCS_REMAINING after this loop ends should\n\n# have coverage data generated from them (no lines are covered).\n",
        "Line" : 269,
        "CharPositionInLine" : 3
      },
      "22" : {
        "Text" : "# TODO: Enable setting these\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Read the GCOV files line by line and get the coverage data.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The new coveralls API doesn't need the entire source (Yay!)\n\n# However, still keeping that part for now. Will cleanup in the future.\n",
        "Line" : 313,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Loads the gcov file as a list of lines.\n\n# (We first open the file and replace all occurences of [] with _\n\n#  because CMake will fail to parse a line containing unmatched brackets...\n\n#  also the \\ to escaped \\n in macros screws up things.)\n\n# https://public.kitware.com/Bug/view.php?id=15369\n",
        "Line" : 318,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Remove file contents to avoid encoding issues (cmake 2.8 has no ENCODING option)\n",
        "Line" : 328,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Instead of trying to parse the source from the\n\n# gcov file, simply read the file contents from the source file.\n\n# (Parsing it from the gcov is hard because C-code uses ; in many places\n\n#  which also happens to be the same as the CMake list delimeter).\n",
        "Line" : 335,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# According to http://json.org/ these should be escaped as well.\n\n# Don't know how to do that in CMake however...\n\n#string(REPLACE \"\\b\" \"\\\\\\\\b\" GCOV_FILE_SOURCE \"${GCOV_FILE_SOURCE}\")\n\n#string(REPLACE \"\\f\" \"\\\\\\\\f\" GCOV_FILE_SOURCE \"${GCOV_FILE_SOURCE}\")\n\n#string(REGEX REPLACE \"\\u([a-fA-F0-9]{4})\" \"\\\\\\\\u\\\\1\" GCOV_FILE_SOURCE \"${GCOV_FILE_SOURCE}\")\n",
        "Line" : 346,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# We want a json array of coverage data as a single string\n\n# start building them from the contents of the .gcov\n",
        "Line" : 352,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Line number for the .gcov.\n",
        "Line" : 356,
        "CharPositionInLine" : 24
      },
      "31" : {
        "Text" : "#message(\"${GCOV_LINE}\")\n\n# Example of what we're parsing:\n\n# Hitcount  |Line | Source\n\n# \"        8:   26:        if (!allowed || (strlen(allowed) == 0))\"\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Check if we should exclude lines using the Lcov syntax.\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Lines with 0 line numbers are metadata and can be ignored.\n",
        "Line" : 399,
        "CharPositionInLine" : 3
      },
      "34" : {
        "Text" : "# Translate the hitcount into valid JSON values.\n",
        "Line" : 405,
        "CharPositionInLine" : 5
      },
      "35" : {
        "Text" : "# Advanced way of removing the trailing comma in the JSON array.\n\n# \"[1, 2, 3, \" -> \"[1, 2, 3\"\n",
        "Line" : 427,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Append the trailing ] to complete the JSON array.\n",
        "Line" : 431,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Generate the final JSON for this file.\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Loop through all files we couldn't find any coverage for\n\n# as well, and generate JSON for those as well with 0% coverage.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Set variables for json replacement\n",
        "Line" : 445,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Loads the source file as a list of lines.\n",
        "Line" : 450,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Remove trailing comma, and complete JSON array with ]\n",
        "Line" : 466,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Generate the final JSON for this file.\n",
        "Line" : 470,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Get rid of trailing comma.\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the final complete JSON!\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    },
    "cmake/Modules/FindEigen3.cmake" : {
      "ObjectId" : "9e969786089ca8ea3801be8b084c51a5782f09b5",
      "LastModified" : "2018-04-17T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# search first if an Eigen3Config.cmake is available in the system,\n\n# if successful this would set EIGEN3_INCLUDE_DIR and the rest of\n\n# the script will work as usual\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindGFlags.cmake" : {
      "ObjectId" : "29b60f05037bf2257b44eb191306d000dc64900f",
      "LastModified" : "2018-04-17T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GFLAGS\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR:            Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "99abbe478a02b452326be8c6a4f6dba6a328352c",
      "LastModified" : "2018-04-17T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindJeMalloc.cmake" : {
      "ObjectId" : "7778b3d68cddf3ca7661e91ed30dbb7d56145e1f",
      "LastModified" : "2018-04-17T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find jemalloc headers and libraries.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(JeMalloc)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  JEMALLOC_ROOT_DIR Set this variable to the root installation of\n\n#                    jemalloc if the module has problems finding\n\n#                    the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  JEMALLOC_FOUND             System has jemalloc libs/headers\n\n#  JEMALLOC_LIBRARIES         The jemalloc library/libraries\n\n#  JEMALLOC_INCLUDE_DIR       The location of jemalloc headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindJsoncpp.cmake" : {
      "ObjectId" : "eb7aa3e1b9dd9da3c708d062c10f3b45b24d020b",
      "LastModified" : "2018-04-17T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find jsoncpp\n\n#\n\n# Find the jsoncpp includes and library\n\n# \n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH \n\n# \n\n# This module defines\n\n#  JSONCPP_INCLUDE_DIRS, where to find header, etc.\n\n#  JSONCPP_LIBRARIES, the libraries needed to use jsoncpp.\n\n#  JSONCPP_FOUND, If false, do not try to use jsoncpp.\n\n#  JSONCPP_INCLUDE_PREFIX, include prefix for jsoncpp\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find JSONCPP_INCLUDE_PREFIX\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JSONCPP_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindLibevent.cmake" : {
      "ObjectId" : "595a5c0b0afabb1f275631d9f725b6eed5fd3e47",
      "LastModified" : "2018-04-17T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Libevent\n\n#\n\n# an event notification library (http://libevent.org/)\n\n#\n\n# Usage: \n\n# LIBEVENT_INCLUDE_DIRS, where to find LibEvent headers\n\n# LIBEVENT_LIBRARIES, LibEvent libraries\n\n# Libevent_FOUND, If false, do not try to use libevent\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"lib\" prefix is needed on Windows\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLibffi.cmake" : {
      "ObjectId" : "8e9883967bc2bc691f1bbfb1584fc908592f7040",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Libffi\n\n#\n\n#  A Portable Foreign Function Interface Library (https://sourceware.org/libffi)\n\n#\n\n# Usage:\n\n# LIBFFI_INCLUDE_DIRS, location of header files\n\n# LIBFFI_LIBRARIES, location of library\n\n# LIBFFI_FOUND, indicates if libffi was found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLibunwind.cmake" : {
      "ObjectId" : "5523b03fdb9de2b73b4f8fda36166a017cf5fc97",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the libunwind library\n\n#\n\n#  LIBUNWIND_FOUND       - True if libunwind was found.\n\n#  LIBUNWIND_LIBRARIES   - The libraries needed to use libunwind\n\n#  LIBUNWIND_INCLUDE_DIR - Location of unwind.h and libunwind.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For some reason, we have to link to two libunwind shared object files:\n\n# one arch-specific and one not.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindPOSTGRES.cmake" : {
      "ObjectId" : "8de2008906708aa6bcd867831ee2773384a82009",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find POSTGRESQL library and header file\n\n# Sets\n\n#   POSTGRES_FOUND               to 0 or 1 depending on the result\n\n#   POSTGRES_INCLUDE_DIRECTORIES to directories required for using libpq\n\n#   POSTGRES_LIBRARIES           to libpq and any dependent libraries\n\n# If POSTGRES_REQUIRED is defined, then a fatal error message will be generated if libpq is not found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindPQXX.cmake" : {
      "ObjectId" : "9722cec3c3a4ef4539efba81423833ad89a022b0",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find PostGreSQL C++ library and header file\n\n# Sets\n\n#   PQXX_FOUND                 to 0 or 1 depending on result\n\n#   PQXX_INCLUDE_DIRECTORIES  to the directory containing mysql.h\n\n#   PQXX_LIBRARIES            to the MySQL client library (and any dependents required)\n\n# If PQXX_REQUIRED is defined, then a fatal error message will be generated if libpqxx is not found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindSQLite3.cmake" : {
      "ObjectId" : "9c99ae5ca59439d6c0995652176baf2b147d79a4",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2009 LuaDist.\n\n# Created by Peter Kapec <kapecp@gmail.com>\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n#\tNote:\n\n#\t\tSearching headers and libraries is very simple and is NOT as powerful as scripts\n\n#\t\tdistributed with CMake, because LuaDist defines directories to search for.\n\n#\t\tEveryone is encouraged to contact the author with improvements. Maybe this file\n\n#\t\tbecomes part of CMake distribution sometimes.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find sqlite3\n\n# Find the native SQLITE3 headers and libraries.\n\n#\n\n# SQLITE3_INCLUDE_DIRS\t- where to find sqlite3.h, etc.\n\n# SQLITE3_LIBRARIES\t- List of libraries when using sqlite.\n\n# SQLITE3_FOUND\t- True if sqlite found.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set SQLITE3_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindTBB.cmake" : {
      "ObjectId" : "57be4b695f92f5ecf9323f6776969d9419749e89",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ThreadingBuildingBlocks include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(TBB\n\n#    [REQUIRED]             # Fail with error if TBB is not found\n\n#    )                      #\n\n# Once done, this will define\n\n#\n\n#  TBB_FOUND - system has TBB\n\n#  TBB_INCLUDE_DIRS - the TBB include directories\n\n#  TBB_LIBRARIES - TBB libraries to be lined, doesn't include malloc or\n\n#                  malloc proxy\n\n#\n\n#  TBB_VERSION_MAJOR - Major Product Version Number\n\n#  TBB_VERSION_MINOR - Minor Product Version Number\n\n#  TBB_INTERFACE_VERSION - Engineering Focused Version Number\n\n#  TBB_COMPATIBLE_INTERFACE_VERSION - The oldest major interface version\n\n#                                     still supported. This uses the engineering\n\n#                                     focused interface version numbers.\n\n#\n\n#  TBB_MALLOC_FOUND - system has TBB malloc library\n\n#  TBB_MALLOC_INCLUDE_DIRS - the TBB malloc include directories\n\n#  TBB_MALLOC_LIBRARIES - The TBB malloc libraries to be lined\n\n#\n\n#  TBB_MALLOC_PROXY_FOUND - system has TBB malloc proxy library\n\n#  TBB_MALLOC_PROXY_INCLUDE_DIRS = the TBB malloc proxy include directories\n\n#  TBB_MALLOC_PROXY_LIBRARIES - The TBB malloc proxy libraries to be lined\n\n#\n\n#\n\n# This module reads hints about search locations from variables:\n\n#  ENV TBB_ARCH_PLATFORM - for eg. set it to \"mic\" for Xeon Phi builds\n\n#  ENV TBB_ROOT or just TBB_ROOT - root directory of tbb installation\n\n#  ENV TBB_BUILD_PREFIX - specifies the build prefix for user built tbb\n\n#                         libraries. Should be specified with ENV TBB_ROOT\n\n#                         and optionally...\n\n#  ENV TBB_BUILD_DIR - if build directory is different than ${TBB_ROOT}/build\n\n#\n\n#\n\n# Modified by Robert Maynard from the original OGRE source\n\n#\n\n#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n\n#\n\n#=============================================================================\n\n# Copyright 2010-2012 Kitware, Inc.\n\n# Copyright 2012      Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n#  FindTBB helper functions and macros\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#===============================================\n\n# Do the final processing for the package find.\n\n#===============================================\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#mark the following variables as internal variables\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#===============================================\n\n# Generate debug names from given release names\n\n#===============================================\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#===============================================\n\n# See if we have env vars to help us find tbb\n\n#===============================================\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#===============================================\n\n# Couple a set of release AND debug libraries\n\n#===============================================\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#=============================================================================\n\n#  Now to actually find TBB\n\n#\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# initialize search paths\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If user built from sources\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# include directory under ${ENV_TBB_ROOT}/include\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# For Windows, let's assume that the user might be using the precompiled\n\n# TBB packages from the main website. These use a rather awkward directory\n\n# structure (at least for automatically finding the right files) depending\n\n# on platform and compiler, but we'll do our best to accommodate it.\n\n# Not adding the same effort for the precompiled linux builds, though. Those\n\n# have different versions for CC compiler versions and linux kernels which\n\n# will never adequately match the user's setup, so there is no feasible way\n\n# to detect the \"best\" version to use. The user will have to manually\n\n# select the right files. (Chances are the distributions are shipping their\n\n# custom version of tbb, anyway, so the problem is probably nonexistent.)\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# for each prefix path, add ia32/64\\${COMPILER_PREFIX}\\lib to the lib search path\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# For OS X binary distribution, choose libc++ based libraries for Mavericks (10.9)\n\n# and above and AppleClang\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# check compiler ABI\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Assume compatibility with 4.4 for other compilers\n",
        "Line" : 234,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# if platform architecture is explicitly specified\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# add general search paths\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#if we haven't found TBB no point on going any further\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#=============================================================================\n\n# Look for TBB's malloc package\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#=============================================================================\n\n# Look for TBB's malloc proxy package\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#=============================================================================\n\n#parse all the version numbers from tbb\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#only read the start of the file\n",
        "Line" : 337,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "cmake/Modules/MemoryCheck.cmake" : {
      "ObjectId" : "75f1216a44176efb256c7b3720374b8bfc4bfa0c",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# - Enable Valgrind Check\n\n#\n\n#   Build a Valgrind build:\n\n#     cmake -DCMAKE_BUILD_TYPE=Valgrind ..\n\n#     make\n\n#     make _targetname\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT VALGRIND_PATH\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param list of target tests\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOT VALGRIND_PATH\n",
        "Line" : 53,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Setup target\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Run tests\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# SETUP_TARGET_FOR_MEMCHECK\n",
        "Line" : 69,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 9
    },
    "cmake/Modules/Sanitizer.cmake" : {
      "ObjectId" : "b3ce48a0e9990e187804809418537429e1906596",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support for building with ASAN and TSAN -\n\n# https://code.google.com/p/thread-sanitizer/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang does not support using ASAN and TSAN simultaneously.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Flag to enable clang address sanitizer\n\n# This will only build if clang or a recent enough gcc is the chosen compiler\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If UBSAN is also enabled, and we're on clang < 3.5, ensure static linking is\n\n# enabled. Otherwise, we run into https://llvm.org/bugs/show_bug.cgi?id=18211\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Flag to enable clang undefined behavior sanitizer\n\n# We explicitly don't enable all of the sanitizer flags:\n\n# - disable 'vptr' because it currently crashes somewhere in boost::intrusive::list code\n\n# - disable 'alignment' because unaligned access is really OK on Nehalem and we do it\n\n#   all over the place.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flag to enable thread sanitizer (clang or gcc 4.8)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Enables dynamic_annotations.h to actually generate code\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# changes atomicops to use the tsan implementations\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Disables using the precompiled template specializations for std::string, shared_ptr, etc\n\n# so that the annotations in the header actually take effect.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Some of the above also need to be passed to the linker.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Strictly speaking, TSAN doesn't require dynamic linking. But it does\n\n# require all code to be position independent, and the easiest way to\n\n# guarantee that is via dynamic linking (not all 3rd party archives are\n\n# compiled with -fPIC e.g. boost).\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# GCC 4.8 and 4.9 (latest as of this writing) don't allow you to specify a\n\n# sanitizer blacklist.\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Require clang 3.4 or newer; clang 3.3 has issues with TSAN and pthread\n\n# symbol interception.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#message(WARNING \"GCC does not support specifying a sanitizer blacklist. Known sanitizer check failures will not be suppressed.\")\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "cmake/Modules/ThreadSanitizer.cmake" : {
      "ObjectId" : "d2bb015f73019b273077eba653b89675c10ec376",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support for building with ThreadSanitizer (tsan) -\n\n# https://code.google.com/p/thread-sanitizer/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Also needs to be a link flag for test to pass\n",
        "Line" : 12,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "# TC/jemalloc are incompatible with ThreadSanitizer - force\n\n# the use of the system allocator.\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Configure CTest's MemCheck to ThreadSanitizer.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Override the normal ADD_TEST macro to set the TSAN_OPTIONS\n\n# environment variable - this allows us to specify the\n\n# suppressions file to use.\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "cmake/Modules/doxygen.cmake" : {
      "ObjectId" : "ae20b0977b73e418b8ffaedfb8788028fd5d5f5a",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Doxygen integration\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enable doxygen for all given folder names\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add doc target\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# create doc folder name list\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# adapt doxygen config\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# add no-op doc target\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/ProtoBuf.cmake" : {
      "ObjectId" : "bba7a34701de3a76ac9248ea112a9b512005d446",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Google Protocol Buffers library and compilers and extends\n\n# the standard cmake script with version and python generation support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As of Ubuntu 14.04 protoc is no longer a part of libprotobuf-dev package\n\n# and should be installed separately as in: sudo apt-get install protobuf-compiler\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# fetches protobuf version\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# place where to generate protobuf sources\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Modification of standard 'protobuf_generate_cpp()' with output dir parameter and python support\n\n# Usage:\n\n#   peloton_protobuf_generate_cpp_py(<output_dir> <srcs_var> <hdrs_var> <python_var> <proto_files>)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/Summary.cmake" : {
      "ObjectId" : "7fe4f4b2e3fc694cb6fa77fc0f8dc85ba2a5b1c2",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Peloton status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   peloton_status(<text>)\n\n#   peloton_status(<heading> <value1> [<value2> ...])\n\n#   peloton_status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Function for fetching Peloton version from git and headers\n\n# Usage:\n\n#   peloton_extract_peloton_version()\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# peloton_parse_header(${Peloton_INCLUDE_DIR}/peloton/version.hpp Peloton_VERSION_LINES PELOTON_MAJOR PELOTON_MINOR PELOTON_PATCH)\n\n# set(Peloton_VERSION \"${PELOTON_MAJOR}.${PELOTON_MINOR}.${PELOTON_PATCH}\" PARENT_SCOPE)\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# or for #define Peloton_VERSION \"x.x.x\"\n\n# peloton_parse_header_single_define(Peloton ${Peloton_INCLUDE_DIR}/peloton/version.hpp Peloton_VERSION)\n\n# set(Peloton_VERSION ${Peloton_VERSION_STRING} PARENT_SCOPE)\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Prints accumulated peloton configuration summary\n\n# Usage:\n\n#   peloton_print_configuration_summary()\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Targets.cmake" : {
      "ObjectId" : "ed75da864c467789ddf25f33c9cb6920b91bbbd5",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Defines global Peloton_LINK flag, This flag is required to prevent linker from excluding\n\n# some objects which are not addressed directly but are registered via static constructors\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Convenient command to setup source group for IDEs that support this feature (VS, XCode)\n\n# Usage:\n\n#   peloton_source_group(<group> GLOB[_RECURSE] <globbing_expression>)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Collecting sources from globbing and appending to output list variable\n\n# Usage:\n\n#   peloton_collect_sources(<output_variable> GLOB[_RECURSE] <globbing_expression>)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Short command getting peloton sources (assuming standard Peloton code tree)\n\n# Usage:\n\n#   peloton_pickup_peloton_sources(<root>)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put all files in source groups (visible as subfolder in many IDEs)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# source groups for test target\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# collect files\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# convert to absolute paths\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# remove test files and main files from file set\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# murmur3\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# libcount\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# jsoncpp\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# ART\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# date\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# adding headers to make the visible in some IDEs (Qt, VS, Xcode)\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# add proto to make them editable in IDEs too\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# propogate to parent scope\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "################################################################################################\n\n# Short command for setting defeault target properties\n\n# Usage:\n\n#   peloton_default_properties(<target>)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# make sure we build all external depepdencies first\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "################################################################################################\n\n# Short command for setting runtime directory for build target\n\n# Usage:\n\n#   peloton_set_runtime_directory(<target> <dir>)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "################################################################################################\n\n# Short command for setting solution folder property for target\n\n# Usage:\n\n#   peloton_set_solution_folder(<target> <folder>)\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "################################################################################################\n\n# Reads lines from input file, prepends source directory to each line and writes to output file\n\n# Usage:\n\n#   peloton_configure_testdatafile(<testdatafile>)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "################################################################################################\n\n# Filter out all files that are not included in selected list\n\n# Usage:\n\n#   peloton_leave_only_selected_tests(<filelist_variable> <selected_list>)\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# blank list means leave all\n",
        "Line" : 165,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 24
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "b1d10fec3e9d6aa02708ae181a9ad5cf019fac74",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Command alias for debugging messages\n\n# Usage:\n\n#   dmsg(<message>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from list(s)\n\n# Usage:\n\n#   peloton_list_unique(<list_variable> [<list_variable>] [...])\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Clears variables from list\n\n# Usage:\n\n#   peloton_clear_vars(<variables_list>)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from string\n\n# Usage:\n\n#   peloton_string_unique(<string_variable>)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Prints list element per line\n\n# Usage:\n\n#   peloton_print_list(<list>)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################################\n\n# Function merging lists of compiler flags to single string.\n\n# Usage:\n\n#   peloton_merge_flag_lists(out_variable <list1> [<list2>] [<list3>] ...)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################################\n\n# Converts all paths in list to absolute\n\n# Usage:\n\n#   peloton_convert_absolute_paths(<list_variable>)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################################\n\n# Reads set of version defines from the header file\n\n# Usage:\n\n#   peloton_parse_header(<file> <define1> <define2> <define3> ..)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################################\n\n# Reads single version define from the header file and parses it\n\n# Usage:\n\n#   peloton_parse_header_single_define(<library_name> <file> <define_name>)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "########################################################################################################\n\n# An option that the user can select. Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   peloton_option(<option_variable> \"doc string\" <initial value or boolean expression> [IF <condition>])\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################################\n\n# Utility macro for comparing two lists. Used for CMake debugging purposes\n\n# Usage:\n\n#   peloton_compare_lists(<list_variable> <list2_variable> [description])\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Command for disabling warnings for different platforms (see below for gcc and VisualStudio)\n\n# Usage:\n\n#   peloton_warnings_disable(<CMAKE_[C|CXX]_FLAGS[_CONFIGURATION]> -Wshadow /wd4996 ..,)\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################################################\n\n# Helper function get current definitions\n\n# Usage:\n\n#   peloton_get_current_definitions(<definitions_variable>)\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Helper function get current includes/definitions\n\n# Usage:\n\n#   peloton_get_current_cflags(<cflagslist_variable>)\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################################\n\n# Helper function to parse current linker libs into link directories, libflags and osx frameworks\n\n# Usage:\n\n#   peloton_parse_linker_libs(<Peloton_LINKER_LIBS_var> <directories_var> <libflags_var> <frameworks_var>)\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# split libs into debug, optimized, unspecified and frameworks\n",
        "Line" : 317,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# attach debug or optimized libs to unspecified according to current configuration\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# convert linker libraries list to link flags\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "################################################################################################\n\n# Helper function to detect Darwin version, i.e. 10.8, 10.9, 10.10, ....\n\n# Usage:\n\n#   peloton_detect_darwin_version(<version_variable>)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/lint.cmake" : {
      "ObjectId" : "cac2e2aea255cbc2451e451de955be1d5114c080",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# suppress cmake warning\n",
        "Line" : 8,
        "CharPositionInLine" : 31
      },
      "1" : {
        "Text" : "# find all files of interest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find all files that should be excluded\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude generated pb files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "script/testing/junit/build.xml" : {
      "ObjectId" : "60c8fcfc497edeb6947992ed0a1234f584278a63",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "a35ee7df6956a1d7c8c4a0e7d7a5b968dd8e8083",
      "LastModified" : "2018-06-29T19:27:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n#SRC CMAKELISTS\n\n##################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--[Cap'nProto library\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the output folder for the compiled capnp headers and srouces\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# note, crucial to prepend!\n",
        "Line" : 14,
        "CharPositionInLine" : 64
      },
      "4" : {
        "Text" : "##################################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# --[ Proto library\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# include python files either to force generation\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# note, crucial to prepend!\n",
        "Line" : 28,
        "CharPositionInLine" : 62
      },
      "8" : {
        "Text" : "##################################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# --[ Libpg_query library\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##################################################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# --[ Peloton library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# creates 'srcs' lists\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##################################################################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# --[ Peloton\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --[ logger\n\n#file(GLOB_RECURSE logger_srcs ${PROJECT_SOURCE_DIR}/src/main/logger/*.cpp)\n\n#list(APPEND logger_srcs ${ycsb_srcs})\n\n#list(REMOVE_ITEM  logger_srcs ${PROJECT_SOURCE_DIR}/src/main/ycsb/ycsb.cpp)\n\n#list(APPEND logger_srcs ${tpcc_srcs})\n\n#list(REMOVE_ITEM  logger_srcs ${PROJECT_SOURCE_DIR}/src/main/tpcc/tpcc.cpp)\n\n#add_executable(logger EXCLUDE_FROM_ALL ${logger_srcs})\n\n#target_link_libraries(logger peloton)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --[ link to jemalloc\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "048023964922e92df1bdbdf5861d4c54a74e54c5",
      "LastModified" : "2018-09-26T02:40:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# TEST CMAKELISTS\n\n##################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --[ Tests lists\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# creates 'tests' lists\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For each performance test source file\n\n# First remove them from the test source list since they should not be run as\n\n# part of the correctness test\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##################################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# --[ Gmock\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##################################################################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# --[ Tests Common library\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# --[ Add \"make check\" target\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##################################################################################\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# --[ Functionality Tests\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#message(\"test_src = \" ${test_src})\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# get test file name\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# create executable\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#message(\"Correctness test: \"  ${test_name})\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# link libraries\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# set target properties    \n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# add test\n",
        "Line" : 102,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# leak suppression / whitelist\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "##################################################################################\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# --[ Performance Tests\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Compile and run performance tests separately\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#message(\"test_srcs = \" ${test_srcs})\n\n#message(\"perf_src = \" ${perf_src})\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# create executable\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#message(\"Performance test: \"  ${perf_name})\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# link libraries\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# set target properties    \n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# add test\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 29
    },
    "third_party/CMakeLists.txt" : {
      "ObjectId" : "d01fb7bc6cd99e12fe289508cc215fe208cb2162",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# THIRD_PARTY CMAKELISTS\n\n##################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --[ Cap'nProto library\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/capnproto/c++/CMakeLists.txt" : {
      "ObjectId" : "a0ebd85898a9f9e46f8db874005e9f826a4b4848",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these arguments are passed to all install(TARGETS) calls\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options ======================================================================\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for invalid combinations of build options\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This flag is attached as PUBLIC target_compile_definition to kj target\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO(cleanup): Enable higher warning level in MSVC, but make sure to test\n\n#   build with that warning level and clean out false positives.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Only warn once on truncated decorated names. The maximum symbol length MSVC\n\n# supports is 4k characters, which the parser framework regularly blows. The\n\n# compiler likes to print out the entire type that went over the limit along\n\n# with this warning, which gets unbearably spammy. That said, we don't want to\n\n# just ignore it, so I'm letting it trigger once until we find some places to\n\n# inject ParserRefs.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Note that it's important to add new CXXFLAGS before ones specified by the\n\n# user, so that the user's flags override them. This is particularly\n\n# important if -Werror was enabled and then certain warnings need to be\n\n# disabled, as is done in super-test.sh.\n\n#\n\n# We enable a lot of warnings, but then disable some:\n\n# * strict-aliasing: We use type-punning in known-safe ways that GCC doesn't\n\n#   recognize as safe.\n\n# * sign-compare: Low S/N ratio.\n\n# * unused-parameter: Low S/N ratio.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Source =======================================================================\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install ======================================================================\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#install CapnProtoMacros for CapnProtoConfig.cmake build directory consumers\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Don't install pkg-config files when building with MSVC\n",
        "Line" : 114,
        "CharPositionInLine" : 14
      },
      "11" : {
        "Text" : "# Variables for pkg-config files\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# not needed since we use absolute paths in libdir and includedir\n",
        "Line" : 117,
        "CharPositionInLine" : 22
      },
      "13" : {
        "Text" : "# TODO: Unsupported\n",
        "Line" : 121,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 14
    },
    "third_party/capnproto/c++/Makefile.am" : {
      "ObjectId" : "4f595ae54c5004ee59efa08c19fd80460d73c12c",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When running distcheck, verify that we've included all the files needed by\n\n# the cmake build.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in this case.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Symlink capnpc -> capnp.  The capnp binary will behave like the old capnpc\n\n# binary (i.e. like \"capnp compile\") when invoked via this symlink.\n\n#\n\n# Also attempt to run ldconfig, because otherwise users get confused.  If\n\n# it fails (e.g. because the platform doesn't have it, or because the\n\n# user doesn't have root privileges), don't worry about it.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Source files intentionally not included in the dist at this time:\n\n#  src/capnp/serialize-snappy*\n\n#  src/capnp/benchmark/...\n\n#  src/capnp/compiler/...\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 209:103 token recognition error at: '\\1'\nline 209:105 token recognition error at: '\\3'\n"
    },
    "third_party/capnproto/c++/cmake/CapnProtoMacros.cmake" : {
      "ObjectId" : "3d58927b023d653fe344cd327735a4c602482b34",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n\n#\n\n# Example usage:\n\n#   find_package(CapnProto)\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#   add_executable(foo main.cpp ${CAPNP_SRCS})\n\n#   target_link_libraries(foo CapnProto::capnp-rpc)\n\n#\n\n#  If you are using not using the RPC features you can use\n\n#  'CapnProto::capnp' in target_link_libraries call\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: CMAKE_CURRENT_BINARY_DIR).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRECTORY are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# TODO: convert to cmake_parse_arguments\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Use cmake targets available\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "third_party/capnproto/c++/cmake/FindCapnProto.cmake" : {
      "ObjectId" : "bacd549a6001b898ffda2ee8c395bb6212937ded",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use pkg-config to get path hints and definitions\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "third_party/capnproto/c++/samples/CMakeLists.txt" : {
      "ObjectId" : "b9ccba05e17150610fea70e5912cf5f0be9ae2cc",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A Cap'n Proto sample project.\n\n#\n\n# To build (non-MSVC):\n\n#   1. Install Cap'n Proto somewhere ($PREFIX below):\n\n#\n\n#      mkdir capnproto/build\n\n#      cd capnproto/build\n\n#      cmake ../c++ -DCMAKE_INSTALL_PREFIX=$PREFIX\n\n#      cmake --build . --target install\n\n#\n\n#   2. Ensure Cap'n Proto's executables are on the PATH, then build the sample project:\n\n#\n\n#      export PATH=$PREFIX/bin:$PATH\n\n#      mkdir ../build-samples\n\n#      cd ../build-samples\n\n#      cmake ../c++/samples\n\n#      cmake --build .\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/capnproto/c++/src/CMakeLists.txt" : {
      "ObjectId" : "8cbea8d877132a007e3ea5193884b2812c225202",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tests ========================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup CAPNP_GENERATE_CPP for compiling test schemas\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Try and find the executables from an autotools-based installation\n\n# Setup paths to the schema compiler for generating ${test_capnp_files}\n",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Allow paths to tools to be set with either environment variables or find_program()\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Also search in the same directory that `capnp` was found in\n",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "#TODO(someday) It would be nice to use targets instead of variables in CAPNP_GENERATE_CPP macro\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Sadly, we can't use the 'test' target, as that's coopted by ctest\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# BUILD_TESTING\n",
        "Line" : 44,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# kj ===========================================================================\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# capnp ========================================================================\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "third_party/capnproto/c++/src/capnp/CMakeLists.txt" : {
      "ObjectId" : "a71d510b327c356499fa572c86cffe5d7f6fcf19",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# capnp ========================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#make sure external consumers don't need to manually set the include dirs\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# capnp-json ========================================================================\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tools/Compilers ==============================================================\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Capnp tool needs capnpc_cpp location. But cmake deprecated LOCATION property.\n\n#So we use custom property to pass location\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Symlink capnpc -> capnp\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# NOT CAPNP_LITE\n",
        "Line" : 178,
        "CharPositionInLine" : 9
      },
      "7" : {
        "Text" : "# Tests ========================================================================\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add \"/capnp\" to match the path used to import the files in the test sources\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Note: no \"/capnp\"\n",
        "Line" : 191,
        "CharPositionInLine" : 65
      },
      "10" : {
        "Text" : "# NOT CAPNP_LITE\n",
        "Line" : 260,
        "CharPositionInLine" : 11
      },
      "11" : {
        "Text" : "# BUILD_TESTING\n",
        "Line" : 261,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 12
    },
    "third_party/capnproto/c++/src/kj/CMakeLists.txt" : {
      "ObjectId" : "2b7da310ef50502fc8966997cf8634bf14e4c51b",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# kj ===========================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Requiring the cxx_std_11 metafeature would be preferable, but that doesn't exist until CMake 3.8.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#make sure the lite flag propagates to all users (internal + external) of this library\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#make sure external consumers don't need to manually set the include dirs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# external clients of this library need to link to pthreads\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# kj-http ======================================================================\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Tests ========================================================================\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: Link with librt on Solaris for sched_yield\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# NOT CAPNP_LITE\n",
        "Line" : 186,
        "CharPositionInLine" : 11
      },
      "9" : {
        "Text" : "# BUILD_TESTING\n",
        "Line" : 187,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 10
    },
    "third_party/libpg_query/CMakeLists.txt" : {
      "ObjectId" : "8c3e7fac51509f7d23a56204336dd3d2512aa31e",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Peloton project\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this code imitates the Makefile in /third_party/libpg_query/\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/libpg_query/Makefile" : {
      "ObjectId" : "926bce1fa8a998e123b13910004d597f36ee98f9",
      "LastModified" : "2018-06-26T14:11:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Triggers copying of includes to where they belong, as well as generating gram.c/scan.c\n",
        "Line" : 58,
        "CharPositionInLine" : 51
      },
      "1" : {
        "Text" : "# This causes compatibility problems on some Linux distros, with \"xlocale.h\" not being available\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Output-based tests\n",
        "Line" : 109,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 44,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 4138
}