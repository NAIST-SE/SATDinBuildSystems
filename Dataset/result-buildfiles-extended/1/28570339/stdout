{
  "Repository" : "28570339",
  "Revision" : "HEAD",
  "ObjectId" : "a45ed80aa47c16c95886ceab3275f0a63606972c",
  "CommitTime" : "2019-04-15T06:47:13Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f6fd15fcc8692b244e0ca038408b9cc1f044b0b6",
      "LastModified" : "2019-02-14T18:03:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ubuntu 14.04 (Trusty)\n\n#cmake_minimum_required (VERSION 2.8.12.2)\n\n# Centos 7\n\n#cmake_minimum_required (VERSION 2.8.11)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable build of tests and samples. Due to custom build step\n\n# dependency on flatcc tool, some custom build configurations may\n\n# experience issues, and this option can then help.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Conditionally set project languages based on FLATCC_TEST, as C++ is\n\n# only necessary if building the tests.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# NOTE: when changing build options, clean the build using on of:\n\n#\n\n#   scripts/cleanall.sh\n\n#   scripts/test.sh\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Force use of portable shims such as providing `static_assert`, and\n\n# `stdaligh.h`. Otherwise this option is automatically enabled for some\n\n# known compiler configurations below.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# It is not possible to detect posix_memalign when compiling with\n\n# -std=c11 but aligned_alloc is not always available either.\n\n# This options assumes that posix_memalign is then available.\n\n# Without C11, detection depends on _POSIX_C_SOURCE.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only build the runtime library - mostly intended in combination with\n\n# FLATCC_INSTALL for cross compiling targets.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use with or witout FLATCC_RTONLY to enable install targets.\n\n# Libraries are built statically by default, but can CMake's\n\n# cmake -DBUILD_SHARED_LIBS=on can override.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use with debug build with testing enabled only. Enables generation\n\n# of coverage information during build and run. Adds target \"coverage\"\n\n# which collects data and makes HTML report in build directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Affects the flatbuffer verify operation. Normally a verify should just\n\n# quickly reject invalid buffers but for troubleshooting, assertions can\n\n# enabled. This requires rebuilding the runtime library and will likely\n\n# break test cases (those that tests that an invalid buffer is invalid).\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Print detailed traces of binary buffer contents when calling verify.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Reflection is the compilers ability to generate binary schema output\n\n# (.bfbs files). This requires using generated code from\n\n# `reflection.fbs`. During development it may not be possible to\n\n# compile with reflection enabled because it can become impossible to\n\n# fix broken builds. It may also be disabled simple because it isn't\n\n# needed.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FLATCC_NATIVE_OPTIM and FLATCC_FAST_DOUBLE affects json parsing,\n\n# especially if the content is pretty printed. But it is plenty\n\n# fast without these settings in most cases. Not recommended.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Fast grisu3 string/floating point conversion still depends on strtod\n\n# for about 1-2% of the conversions in order to produce an exact result.\n\n# By allowing a minor difference in the least significant bits, this\n\n# dependeny can be avoided, and speed improved. Some strtod\n\n# implementations call strlen which is really slow on large JSON\n\n# buffers, and catastrophic on buffers that are not zero-terminated -\n\n# regardless of size. Most platforms have a decent strtod these days.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# -Werror is only set for some compiler versions that are believed to\n\n# to not generate any warnings. If the assumption breaks, disable\n\n# this option if the warning is not significant.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Experimental setting - sometimes the code branches on a constant\n\n# expression in order to select the best option for a given type size or\n\n# similar. Sometimes compilers don't like that. If this issue surfaces,\n\n# try using this option.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The folder of this directory, as apposed to CMAKE_BINARY_DIR\n\n# which would usually be the build/Release and build/Debug paths\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# set (dist_dir \"${CMAKE_BINARY_DIR}\")\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Note: for compiling generated C code, warnings of unused functions\n\n# and constants should be turned off - those are plentiful. They are\n\n# silenced for Clang, GCC and MSVC in generated headers.headers.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Clang or AppleClang\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Fix broken C++ alignas - either will do\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DPORTABLE_PATCH_CPLUSPLUS_STDALIGN\") \n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# To get assembly output\n\n# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -save-temps\")\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# We need stdalign.h\n",
        "Line" : 191,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# -std=c11 prevents detection of posix_memalign and aligned_alloc might be missing\n",
        "Line" : 197,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# In gcc 4.8 it is not possible to suppress this warning using\n\n# #pragma GCC diagnostic ignored \"-Wunused-function\"\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-type-limits\")\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# using STREQUAL here conflicts with string interpretation changes in CMake\n",
        "Line" : 216,
        "CharPositionInLine" : 14
      },
      "28" : {
        "Text" : "# -DFLATCC_PORTABLE also required, but set earlier\n\n# -W3 is the highest warning level that is reasonable.\n\n# See include/flatcc/portable/pwarnings.h for disabled warnings.\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# MSVC 2013 (1800) supports inline variable declations\n\n# while MSVC 2010 (1600) does not.\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Disables monster sample build which uses C99 style variable decls.\n",
        "Line" : 226,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# IBM's native XLC C compiler in extended C99 mode\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Best effort\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# The targets we copy to bin and lib directories, i.e. not tests.\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# The targets we copy to bin and lib directories, i.e. not tests.\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# disabled by FLATCC_RTONLY\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "external/hash/CMakeLists.txt" : {
      "ObjectId" : "7b7d990ddc4b67eabe141c84881c1ae091f4ed83",
      "LastModified" : "2017-06-17T19:32:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# robin hood hash table\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default hash function\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "c05a45017ec486093b588ba13a8c1c41979d19c5",
      "LastModified" : "2016-04-06T11:42:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/monster/CMakeLists.txt" : {
      "ObjectId" : "a14e1099044a7768b4bb876c6c817dfee5023944",
      "LastModified" : "2016-04-02T20:25:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/reflection/CMakeLists.txt" : {
      "ObjectId" : "db5b75445dcfb15be7fb7928c8fecc0a449993b9",
      "LastModified" : "2016-04-02T20:25:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This projects depends headers generated from reflection.fbs but these\n\n# are pre-generated in `include/flatcc/reflection` so we don't need to\n\n# build them here.\n\n#\n\n# What we do build is a binary schema `monster.bfbs` for the monster\n\n# sample, and the actual C source of this project.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cli/CMakeLists.txt" : {
      "ObjectId" : "40facacbb9d8753cb656cab7b4086971376cbfc7",
      "LastModified" : "2016-04-20T07:54:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Rename because the libflatcc library and the flatcc executable would\n\n# conflict if they had the same target name `flatcc`.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/compiler/CMakeLists.txt" : {
      "ObjectId" : "ce31819d9574a9ee7659b84fb163560550ee38f1",
      "LastModified" : "2019-03-07T09:30:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for building binary schema\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/runtime/CMakeLists.txt" : {
      "ObjectId" : "127e2a47ffaf8c1aad0d4bfd0f99521e4e5fb59a",
      "LastModified" : "2019-03-07T09:30:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "880d3efc31e662dc6c06f20707babd964946a0ec",
      "LastModified" : "2018-03-11T11:53:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: some files under source control may be tested with binary comparison.\n\n# Under git such files are protected with the `.gitattributes` file.\n\n# Incorrect line endings may lead to failed tests.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Reflection can break during development, so it is necessary\n\n# to disable until new reflection code generates cleanly.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/cgen_test/CMakeLists.txt" : {
      "ObjectId" : "2edc040c6d14e712afc87befa847443885a7b8ea",
      "LastModified" : "2019-03-07T09:30:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compilation of the generated code tests many import edge cases \n\n# in the parser and code generator but due to CMake limitations, \n\n# custom target dependencies only work for Make build targets.\n\n#\n\n# expansion of flags results in quotes the compiler won't eat,\n\n# separating arguments should fix this, but not sure how portable it is.\n\n# see also http://stackoverflow.com/questions/9870162/avoid-quoting-in-cmake-add-custom-command\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Might be related to:\n\n# https://cmake.org/Bug/view.php?id=14963#c37230\n\n# https://github.com/ninja-build/ninja/issues/760\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is now also broken for make - the system include path is not\n\n# visible so build fails on <assert.h> not found in the custom build\n\n# stage where CMAKE_C_COMPILER uses a compiler call that has this\n\n# behavior\n\n#add_test(test_generated ${CMAKE_MAKE_PROGRAM} test_generated)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/emit_test/CMakeLists.txt" : {
      "ObjectId" : "aac5fb790a50ae74da41836b8225d99759c3e76a",
      "LastModified" : "2016-04-02T20:25:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/flatc_compat/CMakeLists.txt" : {
      "ObjectId" : "6a9a4a3f661b1d688862baecac23c42d8ab2f50e",
      "LastModified" : "2016-04-02T20:25:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/json_test/CMakeLists.txt" : {
      "ObjectId" : "fec6c7c1ae9a856a02fdbb8f834bfe8d5b724953",
      "LastModified" : "2019-03-07T09:30:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile without default library in order to test various runtime flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/load_test/CMakeLists.txt" : {
      "ObjectId" : "6d444a547cdef4ae4dd3a08e4dcd1a2e50c7e7ff",
      "LastModified" : "2016-04-02T20:25:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/monster_test/CMakeLists.txt" : {
      "ObjectId" : "8182927250ed2e300c474da58eda8feedb2fb867",
      "LastModified" : "2016-04-02T20:25:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/monster_test_concat/CMakeLists.txt" : {
      "ObjectId" : "836ae09e170a8effac9ecac428f32f85f98cae38",
      "LastModified" : "2019-03-07T09:30:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We could also use the recursive -r option, but this tests adding files manually to the output file.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "test/monster_test_cpp/CMakeLists.txt" : {
      "ObjectId" : "22247a394abcbbbd8b26225f98253d3762eef04a",
      "LastModified" : "2018-03-11T11:53:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: This re-uses the samples/monster fbs and .c file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We use our own separate gen dir so we don't clash with the real monster sample.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/monster_test_prefix/CMakeLists.txt" : {
      "ObjectId" : "13461ec364436689461b6fb7d0fd35e2cf521489",
      "LastModified" : "2018-03-11T11:53:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/monster_test_solo/CMakeLists.txt" : {
      "ObjectId" : "b6294b85f0c4621b34de0f3b7743fe62e9679988",
      "LastModified" : "2019-03-07T09:30:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/reflection_test/CMakeLists.txt" : {
      "ObjectId" : "fa1e4b3f58bfbe457f762f4765e51611b72accb2",
      "LastModified" : "2018-03-11T11:53:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 20
  },
  "ElapsedTime" : 3081
}