{
  "Repository" : "70108960",
  "Revision" : "HEAD",
  "ObjectId" : "63e1cfe4adaf11cf6006f6325c4e60a56bd79e96",
  "CommitTime" : "2019-02-12T05:04:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "022b97019139d3965abd0dfab02d928382fd6d80",
      "LastModified" : "2019-02-06T18:24:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.12\n",
        "Line" : 5,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# Custom CMake options\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project versioning\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set compilation flags\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are used in src/CMakeLists.txt on a per-target basis\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Disabled bogus warnings for CPU intrincics:\n\n# C4310: cast truncates constant value\n\n# C4324: 'marian::cpu::int16::`anonymous-namespace'::ScatterPut': structure was padded due to alignment specifier\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Or maybe use these?\n\n# set(INTRINSICS \"/arch:AVX2\")\n\n# set(INTRINSICS \"/arch:AVX512\")\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ignores warning LNK4049: locally defined symbol free imported - this comes from zlib\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Detect support CPU instrinsics for the current platform. This will\n\n# only by used with BUILD_ARCH=native. For overridden BUILD_ARCH we\n\n# minimally use -msse4.1. This seems to work with MKL.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These are used in src/CMakeLists.txt on a per-target basis\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This warning does not exist prior to gcc 5.0\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Downloading SentencePiece if requested and set to compile with it.\n\n# Requires all the dependencies imposed by SentencePiece\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Find packages\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# link statically to stdlib libraries\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# look for libraries that have .a suffix\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# @TODO: add warnings here too\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# hack for static compilation\n",
        "Line" : 283,
        "CharPositionInLine" : 46
      },
      "17" : {
        "Text" : "# Generate project_version.h to reflect our version number\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Compile source files\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add a target to generate API documentation with Doxygen\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/FindCUDNN.cmake" : {
      "ObjectId" : "96a9a7e6d6356b476bb1f22c299833d22d3e75bf",
      "LastModified" : "2018-09-12T14:15:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n\n#.rst:\n\n# FindCUDNN\n\n# -------\n\n#\n\n# Find CUDNN library\n\n#\n\n# Valiables that affect result:\n\n# <VERSION>, <REQUIRED>, <QUIETLY>: as usual\n\n#\n\n# <EXACT> : as usual, plus we do find '5.1' version if you wanted '5' \n\n#           (not if you wanted '5.0', as usual)   \n\n#\n\n# Result variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``CUDNN_INCLUDE``\n\n#   where to find cudnn.h.\n\n# ``CUDNN_LIBRARY``\n\n#   the libraries to link against to use CUDNN.\n\n# ``CUDNN_FOUND``\n\n#   If false, do not try to use CUDNN.\n\n# ``CUDNN_VERSION``\n\n#   Version of the CUDNN library we looked for \n\n#\n\n# Exported functions\n\n# ^^^^^^^^^^^^^^^^\n\n# function(CUDNN_INSTALL version __dest_libdir [__dest_incdir])\n\n#  This function will try to download and install CUDNN.\n\n#  CUDNN5 and CUDNN6 are supported.\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  TX1 has to be installed via JetPack\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Download and install CUDNN locally if not found on the system\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#####################################################\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We use major only in library search as major/minor is not entirely consistent among platforms.\n\n# Also, looking for exact minor version of .so is in general not a good idea.\n\n# More strict enforcement of minor/patch version is done if/when the header file is examined.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Fixing the case where 5.1 does not fit 'exact' 5.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Try to set CUDNN version from config file\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/FindMKL.cmake" : {
      "ObjectId" : "028161e3224d64ec527080f0f892127f95abf862",
      "LastModified" : "2018-09-12T14:15:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# \\file      cmake/FindMKL.cmake\n\n# \\author    J. Bakosi\n\n# \\copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.\n\n# \\brief     Find the Math Kernel Library from Intel\n\n# \\date      Thu 26 Jan 2017 02:05:50 PM MST\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the Math Kernel Library from Intel\n\n#\n\n#  MKL_FOUND - System has MKL\n\n#  MKL_INCLUDE_DIRS - MKL include files directories\n\n#  MKL_LIBRARIES - The MKL libraries\n\n#  MKL_INTERFACE_LIBRARY - MKL interface library\n\n#  MKL_SEQUENTIAL_LAYER_LIBRARY - MKL sequential layer library\n\n#  MKL_CORE_LIBRARY - MKL core library\n\n#\n\n#  The environment variables MKLROOT and INTEL are used to find the library.\n\n#  Everything else is ignored. If MKL is found \"-DMKL_ILP64\" is added to\n\n#  CMAKE_C_FLAGS and CMAKE_CXX_FLAGS.\n\n#\n\n#  Example usage:\n\n#\n\n#  find_package(MKL)\n\n#  if(MKL_FOUND)\n\n#    target_link_libraries(TARGET ${MKL_LIBRARIES})\n\n#  endif()\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If already in cache, be silent\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"1 ${MKL_INCLUDE_DIR}\")\n\n# message(\"2 ${MKL_INTERFACE_LIBRARY}\")\n\n# message(\"3 ${MKL_SEQUENTIAL_LAYER_LIBRARY}\")\n\n# message(\"4 ${MKL_CORE_LIBRARY}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set MKL_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindNCCL.cmake" : {
      "ObjectId" : "d6100e8512a6b00a615ebcbe540196295a48992e",
      "LastModified" : "2018-09-12T14:15:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindSSE.cmake" : {
      "ObjectId" : "c152dd74fa0d46200442bc5d2d08cd3fcdc76d9a",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if SSE/AVX instructions are available on the machine where\n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# /proc/cpuinfo apparently omits sse3 :(\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# TODO\n",
        "Line" : 113,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/FindTcmalloc.cmake" : {
      "ObjectId" : "33a0d8f01c2937fc768951ff1a460210a4299acb",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tcmalloc\n\n# Find the native Tcmalloc includes and library\n\n#\n\n#  Tcmalloc_INCLUDE_DIR - where to find Tcmalloc.h, etc.\n\n#  Tcmalloc_LIBRARIES   - List of libraries when using Tcmalloc.\n\n#  Tcmalloc_FOUND       - True if Tcmalloc found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/GetVersionFromFile.cmake" : {
      "ObjectId" : "29b9d2bca360885091505186c8ce7136ebf24491",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n# This CMake modules sets the project version from a version file.\n\n#\n\n# The module sets the following variables:\n\n#\n\n# * PROJECT_VERSION_STRING\n\n# * PROJECT_VERSION_STRING_FULL\n\n# * PROJECT_VERSION_MAJOR\n\n# * PROJECT_VERSION_MINOR\n\n# * PROJECT_VERSION_PATCH\n\n# * PROJECT_VERSION_TWEAK\n\n# * PROJECT_VERSION_GIT_SHA\n\n#\n\n# This module is public domain, use it as it fits you best.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get full string version from file\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get current commit SHA from git\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get partial versions into a list\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the version numbers\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The tweak part is optional, so check if the list contains it\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unset the list\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set full project version string\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Print all variables for debugging\n\n#message(STATUS ${PROJECT_VERSION_STRING_FULL})\n\n#message(STATUS ${PROJECT_VERSION_STRING})\n\n#message(STATUS ${PROJECT_VERSION_MAJOR})\n\n#message(STATUS ${PROJECT_VERSION_MINOR})\n\n#message(STATUS ${PROJECT_VERSION_PATCH})\n\n#message(STATUS ${PROJECT_VERSION_TWEAK})\n\n#message(STATUS ${PROJECT_VERSION_GIT_SHA})\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/3rd_party/CMakeLists.txt" : {
      "ObjectId" : "87f79a438307153f467bb5a106bf11930ace5f65",
      "LastModified" : "2019-02-05T07:07:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this will contain a list of 3rd part dependencies that we install locally\n",
        "Line" : 43,
        "CharPositionInLine" : 17
      },
      "1" : {
        "Text" : "# disables compilation for sm_30 to avoid ptxas warning... that's general Kepler support. But K80s are supported for instance by sm_35\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# install nccl in ${CMAKE_BINARY_DIR}/local similar to /usr/local linux installation\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# @TODO: do the same for SentencePiece, Protobuf etc.\n\n# make clean will clean \"${CMAKE_BINARY_DIR}/local\"\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rd_party/SQLiteCpp/CMakeLists.txt" : {
      "ObjectId" : "779efdb1dd1cc5fe2e52fa2410cb8bd57417c529",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main CMake file for compiling the library itself, examples and tests.\n\n#\n\n# Copyright (c) 2012-2016 Sebastien Rombauts (sebastien.rombauts@gmail.com)\n\n#\n\n# Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt\n\n# or copy at http://opensource.org/licenses/MIT)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options relative to SQLite and SQLiteC++ functions\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable the use of SQLite column metadata and Column::getColumnOriginName() method,\n\n# Require that the sqlite3 library is also compiled with this flag (default under Debian/Ubuntu, but not on Mac OS X).\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Enable the user defintion of a assertion_failed() handler (default to false, easier to handler for begginers).\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Force forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "## Build the C++ Wrapper ##\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# adding a new file require explicittly modifing the CMakeLists.txt\n\n# so that CMake knows that it should rebuild the project (it is best practice)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# list of sources files of the library\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# list of header files of the library\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All includes are relative to the \"include\" directory\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add sources of the wrapper as a \"SQLiteCpp\" static library\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/3rd_party/pathie-cpp/CMakeLists.txt" : {
      "ObjectId" : "db5744f5353ff463db02f17c2e9e472656c28cfe",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rd_party/spdlog/CMakeLists.txt" : {
      "ObjectId" : "61c45b5eb12e0272df97f9fc3ff6760046e7397f",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Copyright(c) 2015 Ruslan Baratov.\r\n\n# Distributed under the MIT License (http://opensource.org/licenses/MIT)\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Install ###\r\n\n# * https://github.com/forexample/package-example\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note: use 'targets_export_name'\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rd_party/spdlog/example/CMakeLists.txt" : {
      "ObjectId" : "7859e4d5836422f8574ecd50aac32e381a8b9d41",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# *************************************************************************/\r\n\n# * Copyright (c) 2015 Ruslan Baratov.                                    */\r\n\n# *                                                                       */\r\n\n# * Permission is hereby granted, free of charge, to any person obtaining */\r\n\n# * a copy of this software and associated documentation files (the       */\r\n\n# * \"Software\"), to deal in the Software without restriction, including   */\r\n\n# * without limitation the rights to use, copy, modify, merge, publish,   */\r\n\n# * distribute, sublicense, and/or sell copies of the Software, and to    */\r\n\n# * permit persons to whom the Software is furnished to do so, subject to */\r\n\n# * the following conditions:                                             */\r\n\n# *                                                                       */\r\n\n# * The above copyright notice and this permission notice shall be        */\r\n\n# * included in all copies or substantial portions of the Software.       */\r\n\n# *                                                                       */\r\n\n# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,       */\r\n\n# * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */\r\n\n# * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/\r\n\n# * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */\r\n\n# * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */\r\n\n# * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */\r\n\n# * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */\r\n\n# *************************************************************************/\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Part of the main project\r\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Stand-alone build\r\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/3rd_party/spdlog/tests/CMakeLists.txt" : {
      "ObjectId" : "22329b4e638e19415004e3407e0cb3195797ce9a",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Tests\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build Catch unit tests\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/3rd_party/yaml-cpp/CMakeLists.txt" : {
      "ObjectId" : "ccd30e35f444a2976115e682c4560f157eb92707",
      "LastModified" : "2018-12-07T21:47:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rd_party/zlib/CMakeLists.txt" : {
      "ObjectId" : "503e0f1a033740258ef857d2faa469564be309a8",
      "LastModified" : "2019-02-05T07:07:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# list of sources files of the library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add sources of the wrapper as a \"SQLiteCpp\" static library\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "fbafc3b99156be1706f8fcc42c29a62cfc364050",
      "LastModified" : "2019-02-08T19:48:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is only compiled to catch build errors, but not linked\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Generate git_revision.h to reflect current git revision information\n\n# [https://stackoverflow.com/questions/1435953/how-can-i-pass-git-sha1-to-compiler-as-definition-using-cmake]\n\n# Git updates .git/logs/HEAD file whenever you pull or commit something.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# marian must depend on it so that it gets created first\n",
        "Line" : 102,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : "# make sure all local dependencies are installed first before this is built\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make sure all local dependencies are installed first before this is built\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# marian.zip and marian.tgz\n\n# This combines marian, marian_decoder in a single ZIP or TAR file for\n\n# execution in MSFT internal tools FLO and Philly.\n\n# For Philly submission, we need statically-linked versions to deal with\n\n# library dependencies, so this target is only enabled for static builds.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_executable(\n\n#  align2steps\n\n#  tools/align2steps.cpp\n\n#)\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set_target_properties(align2steps PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\")\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/examples/CMakeLists.txt" : {
      "ObjectId" : "8740fa6b18a3f0ee9eb5aecc32a1de4b5b10e81a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/CMakeLists.txt" : {
      "ObjectId" : "2df971407730c7d5edae46af34d69c7c9ba4ffeb",
      "LastModified" : "2019-02-05T07:07:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Testing apps\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tests/units/CMakeLists.txt" : {
      "ObjectId" : "7d842c4273b6aeacc4c5ad60632cc53ce848adb6",
      "LastModified" : "2019-02-05T07:07:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 19
  },
  "ElapsedTime" : 2051
}