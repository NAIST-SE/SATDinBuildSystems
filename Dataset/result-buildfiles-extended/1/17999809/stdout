{
  "Repository" : "17999809",
  "Revision" : "HEAD",
  "ObjectId" : "502b29c4249e3363e9e0aa96d890c1a0c831bb45",
  "CommitTime" : "2019-04-16T22:38:14Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "64efaf72d63d3fabdd39caef88eff4904dfadb55",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enforce some CMake policies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable `MACOSX_RPATH` by default.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "################################################################################\n\n# Project version\n\n################################################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Note this might be modified\n",
        "Line" : 24,
        "CharPositionInLine" : 41
      },
      "4" : {
        "Text" : "################################################################################\n\n# Set various useful variables depending on CMake version\n\n################################################################################\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# In CMake >= 3.2 add_custom_command() and add_custom_target()\n\n# supports a ``USES_TERMINAL`` argument\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "################################################################################\n\n# Message for polluted source tree sanity checks\n\n################################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################\n\n# Sanity check - Disallow building in source\n\n################################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################\n\n# Add our CMake module directory to the list of module search directories\n\n################################################################################\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n\n# Handle git hash and description\n\n################################################################################\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Used in configure_file()\n",
        "Line" : 77,
        "CharPositionInLine" : 19
      },
      "11" : {
        "Text" : "# Try to make CMake configure depend on the current git HEAD so that\n\n# a re-configure is triggered when the HEAD changes.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# This mimics the behaviour of the old build system.\n",
        "Line" : 95,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Used in configure_file()\n",
        "Line" : 99,
        "CharPositionInLine" : 23
      },
      "14" : {
        "Text" : "# This mimics the behaviour of the old build system.\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "################################################################################\n\n# Useful CMake functions/Macros\n\n################################################################################\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################################\n\n# Compiler flags for Z3 components.\n\n# Subsequent commands will append to this\n\n################################################################################\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################\n\n# Build type\n\n################################################################################\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Multi-configuration build (e.g. Visual Studio and Xcode). Here\n\n# CMAKE_BUILD_TYPE doesn't matter\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Single configuration generator (e.g. Unix Makefiles, Ninja)\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Provide drop down menu options in cmake-gui\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Check the selected build type is valid\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# CMAKE_BUILD_TYPE has no meaning for multi-configuration generators\n\n# (e.g. Visual Studio) so use generator expressions instead to add\n\n# the right definitions when doing a particular build type.\n\n#\n\n# Note for some reason we have to leave off ``-D`` here otherwise\n\n# we get ``-D-DZ3DEBUG`` passed to the compiler\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "################################################################################\n\n# Find Python\n\n################################################################################\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "################################################################################\n\n# Target architecture detection\n\n################################################################################\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "################################################################################\n\n# Function for detecting C++ compiler flag support\n\n################################################################################\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "################################################################################\n\n# C++ language version\n\n################################################################################\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# FIXME: Drop this when we upgrade to newer CMake versions.\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "################################################################################\n\n# Platform detection\n\n################################################################################\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Does macOS really not need any special flags?\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "################################################################################\n\n# GNU multiple precision library support\n\n################################################################################\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Because this is off by default we will make the configure fail if libgmp\n\n# can't be found\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "################################################################################\n\n# OpenMP support\n\n################################################################################\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# By setting `USE_OPENMP` this way configuration will fail during the first\n\n# configure if the user explicitly passes `-DUSE_OPENMP=ON` and the compiler\n\n# does not support OpenMP. However if the option is not set explicitly during\n\n# the first configure OpenMP support will be automatically enabled/disabled\n\n# depending on whether OpenMP is available.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# GCC and Clang need to have additional flags passed to the linker.\n\n# We can't do ``target_link_libraries(libz3 INTERFACE ${OpenMP_CXX_FLAGS})``\n\n# because ``/openmp`` is interpreted as file name rather than a linker\n\n# flag by MSVC and breaks the build\n",
        "Line" : 297,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "################################################################################\n\n# API Log sync\n\n################################################################################\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "################################################################################\n\n# FP math\n\n################################################################################\n\n# FIXME: Support ARM \"-mfpu=vfp -mfloat-abi=hard\"\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Intel's compiler requires linking with libiomp5\n",
        "Line" : 335,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Intel's compiler requires linking with libiomp5 \n",
        "Line" : 341,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "################################################################################\n\n# Threading support\n\n################################################################################\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "################################################################################\n\n# Compiler warnings\n\n################################################################################\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "################################################################################\n\n# Save Clang optimization records\n\n################################################################################\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "################################################################################\n\n# If using Ninja, force color output for Clang (and gcc, disabled to check build).\n\n################################################################################\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#  if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n\n#    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fdiagnostics-color\")\n\n#    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fdiagnostics-color\")\n\n#  endif()\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "################################################################################\n\n# Option to control what type of library we build\n\n################################################################################\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "################################################################################\n\n# Symbol visibility\n\n################################################################################\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "################################################################################\n\n# Tracing\n\n################################################################################\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Tracing is always enabled in debug builds\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "################################################################################\n\n# Position independent code\n\n################################################################################\n\n# This is required because code built in the components will end up in a shared\n\n# library. If not building a shared library ``-fPIC`` isn't needed and would add\n\n# unnecessary overhead.\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Avoid adding -fPIC compiler switch if we compile with MSVC (which does not\n\n# support the flag) or if we target Windows, which generally does not use\n\n# position independent code for native code shared libraries (DLLs).\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "################################################################################\n\n# Link time optimization\n\n################################################################################\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "################################################################################\n\n# Control flow integrity\n\n################################################################################\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Multi configuration generator\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# No need for else because this is the same as the set that LTO requires.\n",
        "Line" : 446,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "################################################################################\n\n# MSVC specific flags inherited from old build system\n\n################################################################################\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "################################################################################\n\n# Report default CMake flags\n\n################################################################################\n\n# This is mainly for debugging.\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Multi configuration generator\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Single configuration generator\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "################################################################################\n\n# Report Z3_COMPONENT flags\n\n################################################################################\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "################################################################################\n\n# Z3 installation locations\n\n################################################################################\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "################################################################################\n\n# Uninstall rule\n\n################################################################################\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Target needs to be declared before the components so that they can add\n\n# dependencies to this target so they can run their own custom uninstall rules.\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "################################################################################\n\n# CMake build file locations\n\n################################################################################\n\n# To mimic the python build system output these into the root of the build\n\n# directory\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "################################################################################\n\n# Extra dependencies for build rules that use the Python infrastructure to\n\n# generate files used for Z3's build. Changes to these files will trigger\n\n# a rebuild of all the generated files.\n\n################################################################################\n\n# Note: ``update_api.py`` is deliberately not here because it not used\n\n# to generate every generated file. The targets that need it list it explicitly.\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "################################################################################\n\n# Z3 components, library and executables\n\n################################################################################\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "################################################################################\n\n# Create `Z3Config.cmake` and related files for the build tree so clients can\n\n# use Z3 via CMake.\n\n################################################################################\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# FIXME: Remove this once we drop support for CMake 2.8.12\n",
        "Line" : 578,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# TODO: Provide a `Z3Version.cmake` file so that clients can specify the version\n\n# of Z3 they want.\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "################################################################################\n\n# Create `Z3Config.cmake` and related files for install tree so clients can use\n\n# Z3 via CMake.\n\n################################################################################\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# We use `configure_package_config_file()` to try and create CMake files\n\n# that are re-locatable so that it doesn't matter if the files aren't placed\n\n# in the original install prefix.\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Add install rule to install ${Z3_INSTALL_TREE_CMAKE_CONFIG_FILE}\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# TODO: Provide a `Z3Version.cmake` file so that clients can specify the version\n\n# of Z3 they want.\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "################################################################################\n\n# Examples\n\n################################################################################\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "################################################################################\n\n# Documentation\n\n################################################################################\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 74
    },
    "cmake/compiler_lto.cmake" : {
      "ObjectId" : "b4eb83e184a6cf7e5c6ec60d0528dec2435d4f64",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Multi configuration generator\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Single configuration generator\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set flags compiler and linker flags globally rather than using\n\n# `Z3_COMPONENT_CXX_FLAGS` and `Z3_DEPENDENT_EXTRA_CXX_LINK_FLAGS`\n\n# respectively.  We need per configuration compiler and linker flags. The\n\n# `LINK_FLAGS` property (which we populate with\n\n# `Z3_DEPENDENT_EXTRA_CXX_LINK_FLAGS`) doesn't seem to support generator\n\n# expressions so we can't do `$<$<CONFIG:Release>:${_lto_linker_flag}>`.\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/compiler_warnings.cmake" : {
      "ObjectId" : "98332579652ebae302dbedf38e0d055a0f67389b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Compiler warning flags\n\n################################################################################\n\n# These are passed to relevant compiler provided they are supported\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Serious warnings\n\n################################################################################\n\n# This declares the flags that are passed to the compiler when\n\n# `WARNINGS_AS_ERRORS` is set to `SERIOUS_ONLY`. Only flags that are supported\n\n# by the compiler are used.\n\n#\n\n# In effect this a \"whitelist\" approach where we explicitly tell the compiler\n\n# which warnings we want to be treated as errors. The alternative would be a\n\n# \"blacklist\" approach where we ask the compiler to treat all warnings are\n\n# treated as errors but then we explicitly list which warnings which should be\n\n# allowed.\n\n#\n\n# The \"whitelist\" approach seems simpiler because we can incrementally add\n\n# warnings we \"think are serious\".\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Add more warnings that are considered serious enough that we should\n\n# treat them as errors.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# https://clang.llvm.org/docs/DiagnosticsReference.html#wodr\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# https://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-non-virtual-dtor\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# https://clang.llvm.org/docs/DiagnosticsReference.html#woverloaded-virtual\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "################################################################################\n\n# Test warning/error flags\n\n################################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMake's default flags include /W3 already so remove them if\n\n# they already exist.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Loop through flags and use the ones which the compiler supports\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: Remove this eventually.\n\n# Detect legacy `WARNINGS_AS_ERRORS` boolean option and covert to new\n\n# to new option type.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Delete old entry\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Set GUI options\n",
        "Line" : 101,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Loop through the flags\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Add globally because some flags need to be passed at link time.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Warnings as errors is off by default for MSVC so setting this\n\n# is not necessary but this duplicates the behaviour of the old\n\n# build system.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "cmake/cxx_compiler_flags_overrides.cmake" : {
      "ObjectId" : "59966f4242a37c9cfeb7207aceb9d00cd1983f8c",
      "LastModified" : "2017-06-12T10:59:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file overrides the default compiler flags for CMake's built-in\n\n# configurations (CMAKE_BUILD_TYPE). Most compiler flags should not be set here.\n\n# The main purpose is to have very fine grained control of the compiler flags.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We only override the defaults for Clang and GCC right now.\n\n# CMake's MSVC logic is complicated so for now it's better to just inherit CMake's defaults.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken from Modules/Compiler/GNU.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/git_utils.cmake" : {
      "ObjectId" : "dbc95d8df75efdf55a7aed2d93a729d51c28bf32",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_git_dir_dependency(GIT_DIR SUCCESS_VAR)\n\n#\n\n# Adds a configure time dependency on the git directory such that if the HEAD\n\n# of the git directory changes CMake will be forced to re-run. This useful\n\n# for fetching the current git hash and including it in the build.\n\n#\n\n# `GIT_DOT_FILE` is the path to the git directory (i.e. the `.git` directory) or\n\n# `.git` file used by a git worktree.\n\n# `SUCCESS_VAR` is the name of the variable to set. It will be set to TRUE\n\n# if the dependency was successfully added and FALSE otherwise.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Might be a git worktree. In this case we need parse out the worktree\n\n# git directory\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Git worktree\n",
        "Line" : 30,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Figure out where real git directory lives\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Just a normal `.git` directory\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# List of files in the git tree that CMake configuration should depend on\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Examine the HEAD and workout what additional dependencies there are.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# HEAD points at a reference.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Unpacked reference. The file contains the commit hash\n\n# so add a dependency on this file so that if we stay on this\n\n# reference (i.e. branch) but change commit CMake will be forced\n\n# to reconfigure.\n",
        "Line" : 73,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# The ref must be packed (see `man git-pack-refs`).\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Fail\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Detached HEAD.\n\n# No other dependencies needed\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# FIXME:\n\n# This is the directory we will copy (via `configure_file()`) git files\n\n# into. This is a hack. It would be better to use the\n\n# `CMAKE_CONFIGURE_DEPENDS` directory property but that feature is not\n\n# available in CMake 2.8.12. So we use `configure_file()` to effectively\n\n# do the same thing. When the source file to `configure_file()` changes\n\n# it will trigger a re-run of CMake.\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# get_git_head_hash(GIT_DOT_FILE OUTPUT_VAR)\n\n#\n\n# Retrieve the current commit hash for a git working directory where\n\n# `GIT_DOT_FILE` is the `.git` directory or `.git` pointer file in a git\n\n# worktree in the root of the git working directory.\n\n#\n\n# `OUTPUT_VAR` should be the name of the variable to put the result in. If this\n\n# function fails then either a fatal error will be raised or `OUTPUT_VAR` will\n\n# contain a string with the suffix `NOTFOUND` which can be used in CMake `if()`\n\n# commands.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# NOTE: Use `GIT_FOUND` rather than `Git_FOUND` which was only\n\n# available in CMake >= 3.5\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Quiet\n",
        "Line" : 146,
        "CharPositionInLine" : 11
      },
      "16" : {
        "Text" : "# get_git_head_describe(GIT_DOT_FILE OUTPUT_VAR)\n\n#\n\n# Retrieve the output of `git describe` for a git working directory where\n\n# `GIT_DOT_FILE` is the `.git` directory or `.git` pointer file in a git\n\n# worktree in the root of the git working directory.\n\n#\n\n# `OUTPUT_VAR` should be the name of the variable to put the result in. If this\n\n# function fails then either a fatal error will be raised or `OUTPUT_VAR` will\n\n# contain a string with the suffix `NOTFOUND` which can be used in CMake `if()`\n\n# commands.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOTE: Use `GIT_FOUND` rather than `Git_FOUND` which was only\n\n# available in CMake >= 3.5\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "cmake/modules/FindDotNetToolchain.cmake" : {
      "ObjectId" : "6e8cc76107cffe3a31725f8200380a642c73da9f",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to find a working .NET tool chain\n\n#\n\n# Once complete this will define\n\n# DOTNET_TOOLCHAIN_FOUND  : BOOL : System has a .NET toolchain\n\n# DOTNET_CSC_EXECUTABLE - STRING : Path to C# compiler\n\n# DOTNET_GACUTIL_EXECUTABLE - STRING : Path to gacutil\n\n# DOTNET_TOOLCHAIN_IS_MONO : BOOL : True if detected .NET toolchain is Mono\n\n# DOTNET_TOOLCHAIN_IS_WINDOWS : BOOL : True if detected .NET toolchain is native Windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to determine the tool chain vendor\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Check C# compiler works\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindDotnet.cmake" : {
      "ObjectId" : "98c5f2079db718dcb7bfa867ffadad0b9c42c86b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst\n\n# FindDotnet\n\n# ----------\n\n# \n\n# Find DotNet executable, and initialize functions for adding dotnet projects.\n\n# \n\n# Results are reported in the following variables::\n\n# \n\n#   DOTNET_FOUND          - True if dotnet executable is found\n\n#   DOTNET_EXE            - Dotnet executable\n\n#   DOTNET_VERSION        - Dotnet version as reported by dotnet executable\n\n#   NUGET_EXE             - Nuget executable (WIN32 only)\n\n#   NUGET_CACHE_PATH      - Nuget package cache path\n\n# \n\n# The following functions are defined to add dotnet/msbuild projects:\n\n# \n\n# ADD_DOTNET -- add a project to be built by dotnet.\n\n# \n\n# ```\n\n# ADD_DOTNET(<project_file> [RELEASE|DEBUG] [X86|X64|ANYCPU] [NETCOREAPP]\n\n#            [CONFIG configuration]\n\n#            [PLATFORM platform]\n\n#            [PACKAGE output_nuget_packages... ]\n\n#            [VERSION nuget_package_version]\n\n#            [DEPENDS depend_nuget_packages... ]\n\n#            [OUTPUT_PATH output_path relative to cmake binary output dir]\n\n#            [CUSTOM_BUILDPROPS <CustomProp>value</CustomProp>....]\n\n#            [SOURCES additional_file_dependencies... ]\n\n#            [ARGUMENTS additional_build_args...]\n\n#            [PACK_ARGUMENTS additional_pack_args...])\n\n# ```\n\n# \n\n# RUN_DOTNET -- Run a project with `dotnet run`. The `OUTPUT` argument represents artifacts \n\n#               produced by running the .NET program, and can be consumed from other build steps.\n\n# \n\n# ```\n\n# RUN_DOTNET(<project_file> [RELEASE|DEBUG] [X86|X64|ANYCPU] [NETCOREAPP]\n\n#            [ARGUMENTS program_args...]\n\n#            [OUTPUT outputs...]\n\n#            [CONFIG configuration]\n\n#            [PLATFORM platform]\n\n#            [DEPENDS depend_nuget_packages... ]\n\n#            [OUTPUT_PATH output_path relative to cmake binary output dir]\n\n#            [CUSTOM_BUILDPROPS <CustomProp>value</CustomProp>....]\n\n#            [SOURCES additional_file_dependencies... ])\n\n# ```\n\n# \n\n# ADD_MSBUILD -- add a project to be built by msbuild. Windows-only. When building in Unix systems, msbuild targets are skipped.\n\n# \n\n# ```\n\n# ADD_MSBUILD(<project_file> [RELEASE|DEBUG] [X86|X64|ANYCPU] [NETCOREAPP]\n\n#            [CONFIG configuration]\n\n#            [PLATFORM platform]\n\n#            [PACKAGE output_nuget_packages... ]\n\n#            [DEPENDS depend_nuget_packages... ]\n\n#            [CUSTOM_BUILDPROPS <CustomProp>value</CustomProp>....]\n\n#            [SOURCES additional_file_dependencies... ]\n\n#            [ARGUMENTS additional_build_args...]\n\n#            [PACK_ARGUMENTS additional_pack_args...])\n\n# ```\n\n#\n\n# SMOKETEST_DOTNET -- add a dotnet smoke test project to the build. The project will be run during a build,\n\n# and if the program fails to build or run, the build fails. Currently only .NET Core App framework is supported.\n\n# Multiple smoke tests will be run one-by-one to avoid global resource conflicts.\n\n#\n\n# SMOKETEST_DOTNET(<project_file> [RELEASE|DEBUG] [X86|X64|ANYCPU] [NETCOREAPP]\n\n#                 [ARGUMENTS program_args...]\n\n#                 [CONFIG configuration]\n\n#                 [PLATFORM platform]\n\n#                 [DEPENDS depend_nuget_packages... ]\n\n#                 [OUTPUT_PATH output_path relative to cmake binary output dir]\n\n#                 [CUSTOM_BUILDPROPS <CustomProp>value</CustomProp>....]\n\n#                 [SOURCES additional_file_dependencies... ])\n\n# \n\n# For all the above functions, `RELEASE|DEBUG` overrides `CONFIG`, `X86|X64|ANYCPU` overrides PLATFORM.\n\n# For Unix systems, the target framework defaults to `netstandard2.0`, unless `NETCOREAPP` is specified.\n\n# For Windows, the project is built as-is, allowing multi-targeting.\n\n#\n\n#\n\n# DOTNET_REGISTER_LOCAL_REPOSITORY -- register a local NuGet package repository.\n\n# \n\n# ```\n\n# DOTNET_REGISTER_LOCAL_REPOSITORY(repo_name repo_path)\n\n# ```\n\n#\n\n# TEST_DOTNET -- add a dotnet test project to ctest. The project will be run with `dotnet test`,\n\n# and trx test reports will be generated in the build directory. For Windows, all target frameworks\n\n# are tested against. For other platforms, only .NET Core App is tested against.\n\n# Test failures will not fail the build.\n\n# Tests are only run with `ctest -C <config>`, not with `cmake --build ...`\n\n#\n\n# ```\n\n# TEST_DOTNET(<project_file>\n\n#             [ARGUMENTS additional_dotnet_test_args...]\n\n#             [OUTPUT_PATH output_path relative to cmake binary output dir])\n\n# ```\n\n# \n\n# GEN_DOTNET_PROPS -- Generates a Directory.Build.props file. The created file is populated with MSBuild properties:\n\n#  - DOTNET_PACKAGE_VERSION: a version string that can be referenced in the actual project file as $(DOTNET_PACKAGE_VERSION).\n\n#    The version string value can be set with PACKAGE_VERSION argument, and defaults to '1.0.0'.\n\n#  - XPLAT_LIB_DIR: points to the cmake build root directory.\n\n#  - OutputPath: Points to the cmake binary directory (overridden by OUTPUT_PATH, relatively). Therefore, projects built without cmake will consistently output\n\n#    to the cmake build directory.\n\n#  - Custom properties can be injected with XML_INJECT argument, which injects an arbitrary string into the project XML file.\n\n#\n\n# ```\n\n# GEN_DOTNET_PROPS(<target_props_file>\n\n#                  [PACKAGE_VERSION version]\n\n#                  [XML_INJECT xml_injection])\n\n# ```\n\n# \n\n# Require 3.5 for batch copy multiple files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix\n",
        "Line" : 168,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# options (flags)\n",
        "Line" : 170,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# oneValueArgs\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# multiValueArgs\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# the input arguments\n",
        "Line" : 176,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# If platform is not specified, do not pass the Platform property.\n\n# dotnet will pick the default Platform.\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# If package version is not set, first fallback to DOTNET_PACKAGE_VERSION\n\n# If again not set, defaults to 1.0.0\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Set the output path to the binary directory.\n\n# Build outputs in separated output directories prevent overwriting.\n\n# Later we then copy the outputs to the destination.\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# In a cmake build, the XPLAT libraries are always copied over.\n\n# Set the proper directory for .NET projects.\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Unix builds default to netstandard2.0\n",
        "Line" : 268,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Add a target for the built package -- this can be referenced in\n\n# another project.\n",
        "Line" : 305,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# DOTNET_OUTPUTS refer to artifacts produced, that the BUILD_proj_name target depends on.\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# XXX tfm\n",
        "Line" : 386,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Chain the smoke tests together so they are executed sequentially\n",
        "Line" : 432,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# prefix\n",
        "Line" : 441,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# options (flags)\n",
        "Line" : 443,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# oneValueArgs\n",
        "Line" : 445,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# multiValueArgs\n",
        "Line" : 447,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# the input arguments\n",
        "Line" : 449,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 20
    },
    "cmake/modules/FindGMP.cmake" : {
      "ObjectId" : "b749750efc5a680c7c64eb02b351243b75be66b8",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to find an install of the GNU multiple precision library\n\n#\n\n# Once done this will define\n\n#  GMP_FOUND - BOOL: System has the GMP library installed\n\n#  GMP_INCLUDE_DIRS - LIST:The GMP include directories\n\n#  GMP_C_LIBRARIES - LIST:The libraries needed to use GMP via it's C interface\n\n#  GMP_CXX_LIBRARIES - LIST:The libraries needed to use GMP via it's C++ interface\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find headers\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: We should check we can link some simple code against libgmp and libgmpxx\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle QUIET and REQUIRED and check the necessary variables were set and if so\n\n# set ``GMP_FOUND``\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/msvc_legacy_quirks.cmake" : {
      "ObjectId" : "d34351c1d4266b95310d03bd3957b56dfc74c68f",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file ether sets or notes various compiler and linker flags for MSVC that\n\n# were defined by the old python/Makefile based build system but\n\n# don't obviously belong in the other sections in the CMake build system.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Compiler definitions\n\n################################################################################\n\n# FIXME: All the commented out defines should be removed once\n\n# we are confident it is correct to not set them.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't set `_DEBUG`. The old build system sets this but this\n\n# is wrong. MSVC will set this depending on which runtime is being used.\n\n# See https://msdn.microsoft.com/en-us/library/b0084kay.aspx\n\n# _DEBUG\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The old build system only set `UNICODE` and `_UNICODE` for x86_64 release.\n\n# That seems completely wrong so set it for all configurations.\n\n# According to https://blogs.msdn.microsoft.com/oldnewthing/20040212-00/?p=40643/\n\n# `UNICODE` affects Windows headers and `_UNICODE` affects C runtime header files.\n\n# There is some discussion of this define at https://msdn.microsoft.com/en-us/library/dybsewaf.aspx\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Don't set `_LIB`. The old build system sets this for x86_64 release\n\n# build. This flag doesn't seem to be documented but a stackoverflow\n\n# post hints that this is usually set when building a static library.\n\n# See http://stackoverflow.com/questions/35034683/how-to-tell-if-current-project-is-dll-or-static-lib\n\n# This seems wrong give that the old build system set this regardless\n\n# whether or not libz3 was static or shared so its probably best\n\n# to not set for now.\n\n#$<$<CONFIG:Release>:_LIB>\n\n#$<$<CONFIG:RelWithDebInfo>:_LIB>\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Don't set `_CONSOLE`. The old build system sets for all configurations\n\n# except x86_64 release. It seems ( https://codeyarns.com/2010/12/02/visual-c-windows-and-console-subsystems/ )\n\n# that `_CONSOLE` used to be defined by older Visual C++ environments.\n\n# Setting this undocumented option seems like a bad idea so let's not do it.\n\n#$<$<CONFIG:Debug:_CONSOLE>\n\n#$<$<CONFIG:MinSizeRel:_CONSOLE>\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Don't set `ASYNC_COMMANDS`. The old build system sets this for x86_64\n\n# release but this macro does not appear to be used anywhere and is not\n\n# documented so don't set it for now.\n\n#$<$<CONFIG:Release>:ASYNC_COMMANDS>\n\n#$<$<CONFIG:RelWithDebInfo>:ASYNC_COMMANDS>\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Don't set `_CONSOLE`. See reasoning above.\n\n#_CONSOLE\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Note we don't set WIN32 or _WINDOWS because\n\n# CMake provides that for us. As a sanity check make sure the option\n\n# is present.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n\n# Compiler flags\n\n################################################################################\n\n# FIXME: We might want to move this out somewhere else if we decide\n\n# we want to set `-fno-omit-frame-pointer` for gcc/clang.\n\n# No omit frame pointer\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# FIXME: This doesn't make a huge amount of sense but the old\n\n# build system kept the frame pointer for all configurations\n\n# except x86_64 release (I don't know why the frame pointer\n\n# is kept for i686 release).\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Use __cdecl calling convention. Apparently this is MSVC's default\n\n# but the old build system set it so for completeness set it too.\n\n# See https://msdn.microsoft.com/en-us/library/46t77ak2.aspx\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "################################################################################\n\n# Linker flags\n\n################################################################################\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# By default CMake enables incremental linking for Debug and RelWithDebInfo\n\n# builds. The old build system disables it for all builds so try to do the same\n\n# by changing all configurations if necessary\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Remove any existing incremental flags\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Flag not present. Add it\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# The original build system passes `/STACK:` to the linker.\n\n# This size comes from the original build system.\n\n# FIXME: What is the rationale behind this?\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# MSVC documentation (https://msdn.microsoft.com/en-us/library/35yc2tc3.aspx)\n\n# says this only matters for executables which is why this is not being\n\n# set for CMAKE_SHARED_LINKER_FLAGS or CMAKE_STATIC_LINKER_FLAGS.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The original build system passes `/SUBSYSTEM:<X>` to the linker where `<X>`\n\n# depends on what is being linked. Where `<X>` is `CONSOLE` for executables\n\n# and `WINDOWS` for shard libraries.\n\n# We don't need to pass `/SUBSYSTEM:CONSOLE` because CMake will do this for\n\n# us when building executables because we don't pass the `WIN32` argument to\n\n# `add_executable()`.\n\n# FIXME: We probably don't need this. https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx\n\n# suggests that `/SUBSYSTEM:` only matters for executables.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# FIXME: The following linker flags are weird. They are set in all configurations\n\n# in the old build system except release x86_64. We try to emulate this here but\n\n# this is likely the wrong thing to do.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Linker optimizations.\n\n# See https://msdn.microsoft.com/en-us/library/bxwfs976.aspx\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# FIXME: This is not necessary. This is MSVC's default.\n\n# See https://msdn.microsoft.com/en-us/library/b1kw34cb.aspx\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# FIXME: This is not necessary. This is MSVC's default.\n\n# Address space layout randomization\n\n# See https://msdn.microsoft.com/en-us/library/bb384887.aspx\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# CFI requires /DYNAMICBASE to be enabled.\n",
        "Line" : 175,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# FIXME: This is not necessary. This is MSVC's default.\n\n# Indicate that the executable is compatible with DEP\n\n# See https://msdn.microsoft.com/en-us/library/ms235442.aspx\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "cmake/target_arch_detect.cmake" : {
      "ObjectId" : "68194cfe47d4160286a8a9cf1561cfde385e6893",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Target detection\n\n#\n\n# We abuse the compiler preprocessor to work out what target the compiler is\n\n# building for. The nice thing about this approach is that we'll detect the\n\n# right target even if we are using a cross compiler.\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Strip out prefix\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/z3_add_component.cmake" : {
      "ObjectId" : "ac6d1ec06c399783770423791408b7cf614437ba",
      "LastModified" : "2019-03-07T11:09:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remaining args should be component names\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Loop over the known dependencies and retrieve their dependencies\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Remaining args should be component names\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Ensure this component's dependencies are built before this component.\n\n# This is important because we might need the generated header files in\n\n# other components.\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# z3_add_component(component_name\n\n#   [NOT_LIBZ3_COMPONENT]\n\n#   SOURCES source1 [source2...]\n\n#   [COMPONENT_DEPENDENCIES component1 [component2...]]\n\n#   [PYG_FILES pygfile1 [pygfile2...]]\n\n#   [TACTIC_HEADERS header_file1 [header_file2...]]\n\n#   [EXTRA_REGISTER_MODULE_HEADERS header_file1 [header_file2...]]\n\n#   [MEMORY_INIT_FINALIZER_HEADERS header_file1 [header_file2...]]\n\n# )\n\n#\n\n# Declares a Z3 component (as a CMake \"object library\") with target name\n\n# ``component_name``.\n\n#\n\n# The option ``NOT_LIBZ3_COMPONENT`` declares that the\n\n# component should not be included in libz3. If this is not specified\n\n# the component will be included in libz3.\n\n#\n\n# The mandatory ``SOURCES`` keyword should be followed by the source files\n\n# (including any files generated at build or configure time) that are should be\n\n# included in the component. It is not necessary to list header files here as\n\n# CMake infers header file dependencies unless that header file is generated at\n\n# build time.\n\n#\n\n# The optional ``COMPONENT_DEPENDENCIES`` keyword should be followed by a list of\n\n# components that ``component_name`` should depend on. The components listed here\n\n# must have already been declared using ``z3_add_component()``. Listing components\n\n# here causes them to be built before ``component_name``. It also currently causes\n\n# the include directories used by the transistive closure of the dependencies\n\n# to be added to the list of include directories used to build ``component_name``.\n\n#\n\n# The optional ``PYG_FILES`` keyword should be followed by a list of one or\n\n# more ``<NAME>.pyg`` files that should used to be generate\n\n# ``<NAME>_params.hpp`` header files used by the ``component_name``.\n\n# This generated file will automatically be scanned for the register module\n\n# declarations (i.e. ``REG_PARAMS()``, ``REG_MODULE_PARAMS()``, and\n\n# ``REG_MODULE_DESCRIPTION()``).\n\n#\n\n# The optional ``TACTIC_HEADERS`` keyword should be followed by a list of one or\n\n# more header files that declare a tactic and/or a probe that is part of this\n\n# component (see ``ADD_TACTIC()`` and ``ADD_PROBE()``).\n\n#\n\n# The optional ``EXTRA_REGISTER_MODULE_HEADERS`` keyword should be followed by a list\n\n# of one or more header files that contain module registration declarations.\n\n# NOTE: The header files generated from ``.pyg`` files don't need to be included.\n\n#\n\n# The optional ``MEMORY_INIT_FINALIZER_HEADERS`` keyword should be followed by a list\n\n# of one or more header files that contain memory initializer/finalizer declarations\n\n# (i.e. ``ADD_INITIALIZER()`` or ``ADD_FINALIZER()``).\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note: We don't check the sources exist here because\n\n# they might be generated files that don't exist yet.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# FIXME: This implicit dependency of a generated file depending on\n\n# generated files was inherited from the old build system.\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Typically generated headers contain `REG_PARAMS()`, `REG_MODULE_PARAMS()`\n\n# and `REG_MODULE_DESCRIPTION()` declarations so add to the list of\n\n# header files to scan.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add tactic/probe headers to global property\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Add additional register module headers\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add memory initializer/finalizer headers to global property\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Using \"object\" libraries here means we have a convenient\n\n# name to refer to a component in CMake but we don't actually\n\n# create a static/library from them. This allows us to easily\n\n# build a static or dynamic library from the object libraries\n\n# on all platforms. Is this added flexibility worth the linking\n\n# overhead it adds?\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add definitions\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Add compiler flags\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# It's unfortunate that we have to manage dependencies ourselves.\n\n#\n\n# If we weren't building \"object\" libraries we could use\n\n# ```\n\n# target_link_libraries(${component_name} INTERFACE ${Z3_MOD_COMPONENT_DEPENDENCIES})\n\n# ```\n\n# but we can't do that with \"object\" libraries.\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Record this component's dependencies\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Determine all the components that this component depends on\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#message(STATUS \"Component \\\"${component_name}\\\" has the following dependencies ${_expanded_deps}\")\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Add any extra include directories\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Add this component to the global list of Z3 components for libz3\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Arguments should be component names to use\n",
        "Line" : 247,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Get header files that declare tactics/probes\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Arguments should be component names to use\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Get header files that declare initializers and finalizers\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Arguments should be component names to use\n",
        "Line" : 326,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Get the list of header files to parse\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "cmake/z3_add_cxx_flag.cmake" : {
      "ObjectId" : "d2624d8908c8afc019541ddbf2004846f1d7a935",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set globally\n",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "cmake/z3_append_linker_flag_list_to_target.cmake" : {
      "ObjectId" : "3eb1e2d340d8a40cdea3019b9ba0bd391163c89c",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The LINK_FLAGS property of a target in CMake is unfortunately a string and\n\n# not a list. This function takes a list of linker flags and iterates through\n\n# them to append them as strings to the ``LINK_FLAGS`` property of\n\n# the specified target.\n\n# E.g.\n\n# z3_append_linker_flag_list_to_target(mytarget \"-fopenmp\" \"-static\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"Appending link flag \\\"${flag}\\\" to target ${target}\")\n\n# Note that space inside the quoted string is required so that the flags\n\n# are space separated.\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "contrib/cmake/src/test/lp/CMakeLists.txt" : {
      "ObjectId" : "6683a1758a57944cff4366288500e09f67ffb4f0",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/qprofdiff/Makefile" : {
      "ObjectId" : "6b90bed516481b1dfd46eb29d6f94d0adf12599b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "b097126d352772c7b63636f0e533480212e03487",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Don't hard code this path\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# FIXME: Don't hard code these paths\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# FIXME: Don't hard code these paths\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FIXME: This sucks but there doesn't seem to be a way to make the top level\n\n# install target depend on the `api_docs` target.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remove generated documentation when running `clean` target.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5d06029f93ff4fe671030e6d873bc1f4bbfae079",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unfortunately `BUILD_ALWAYS` only seems to be supported with the version of ExternalProject\n\n# that shipped with CMake >= 3.1.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HACK: This is a workaround for UBSan.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "################################################################################\n\n# Build example project using libz3's C API as an external project\n\n################################################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure step\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Build step\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install Step\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Dummy command\n",
        "Line" : 49,
        "CharPositionInLine" : 48
      },
      "7" : {
        "Text" : "################################################################################\n\n# Build maxsat example project using libz3's C API as an external project\n\n################################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Configure step\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Build step\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Install Step\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Dummy command\n",
        "Line" : 68,
        "CharPositionInLine" : 48
      },
      "12" : {
        "Text" : "################################################################################\n\n# Build example project using libz3's C++ API as an external project\n\n################################################################################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Configure step\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Build step\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Install Step\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Dummy command\n",
        "Line" : 87,
        "CharPositionInLine" : 48
      },
      "17" : {
        "Text" : "################################################################################\n\n# Build example tptp5 project using libz3's C++ API as an external project\n\n################################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Configure step\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Build step\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Install Step\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Dummy command\n",
        "Line" : 105,
        "CharPositionInLine" : 48
      },
      "22" : {
        "Text" : "################################################################################\n\n# Build Python examples\n\n################################################################################\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "################################################################################\n\n# Build dotnet examples\n\n################################################################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "examples/c++/CMakeLists.txt" : {
      "ObjectId" : "52758889dfb30e1bb8c60866b4ff907475d0ed83",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Example C++ project\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# `NO_DEFAULT_PATH` is set so that -DZ3_DIR has to be passed to find Z3.\n\n# This should prevent us from accidentally picking up an installed\n\n# copy of Z3. This is here to benefit Z3's build system when building\n\n# this project. When making your own project you probably shouldn't\n\n# use this option.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "################################################################################\n\n# Z3 C++ API bindings require C++11\n\n################################################################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Legacy CMake support\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# On Windows we need to copy the Z3 libraries\n\n# into the same directory as the executable\n\n# so that they can be found.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "examples/c/CMakeLists.txt" : {
      "ObjectId" : "e45c82d379e07224e20560cabc00659a2c50c2ad",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Example C project\n\n################################################################################\n\n# NOTE: Even though this is a C project, libz3 uses C++. When using libz3\n\n# as a static library if we don't configure this project to also support\n\n# C++ we will use the C linker rather than the C++ linker and will not link\n\n# the C++ standard library in resulting in a link failure.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set C version required to C99\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# `NO_DEFAULT_PATH` is set so that -DZ3_DIR has to be passed to find Z3.\n\n# This should prevent us from accidentally picking up an installed\n\n# copy of Z3. This is here to benefit Z3's build system when building\n\n# this project. When making your own project you probably shouldn't\n\n# use this option.\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# This is a hack for avoiding UBSan linking errors\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# On Windows we need to copy the Z3 libraries\n\n# into the same directory as the executable\n\n# so that they can be found.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "examples/dotnet/CMakeLists.txt" : {
      "ObjectId" : "108326f83833d4c265fee24220e6700beaa49dea",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# hack the libz3 entry in deps so it's easy enough for dotnet to reach it...\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "examples/maxsat/CMakeLists.txt" : {
      "ObjectId" : "e59486297c7e9b8b92de6a0f6bb85e607615ec21",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Example maxsat project\n\n################################################################################\n\n# NOTE: Even though this is a C project, libz3 uses C++. When using libz3\n\n# as a static library if we don't configure this project to also support\n\n# C++ we will use the C linker rather than the C++ linker and will not link\n\n# the C++ standard library in resulting in a link failure.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# `NO_DEFAULT_PATH` is set so that -DZ3_DIR has to be passed to find Z3.\n\n# This should prevent us from accidentally picking up an installed\n\n# copy of Z3. This is here to benefit Z3's build system when building\n\n# this project. When making your own project you probably shouldn't\n\n# use this option.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This is a hack for avoiding UBSan linking errors\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# On Windows we need to copy the Z3 libraries\n\n# into the same directory as the executable\n\n# so that they can be found.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "examples/python/CMakeLists.txt" : {
      "ObjectId" : "9bd45df41e111ff12f619d3691f8d8105962c2fb",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We flatten the hierarchy so that all python files have\n\n# the `z3` directory in their directory so that their import\n\n# statements \"just work\".\n",
        "Line" : 19,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "examples/tptp/CMakeLists.txt" : {
      "ObjectId" : "7870e5408bd934fb4acb6cd26ed4f56a4d63c0fc",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# TPTP example\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# `NO_DEFAULT_PATH` is set so that -DZ3_DIR has to be passed to find Z3.\n\n# This should prevent us from accidentally picking up an installed\n\n# copy of Z3. This is here to benefit Z3's build system when building\n\n# this project. When making your own project you probably shouldn't\n\n# use this option.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# On Windows we need to copy the Z3 libraries\n\n# into the same directory as the executable\n\n# so that they can be found.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c497c19ee64368b00d643be239368a5875187dc5",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# API header files\n\n################################################################################\n\n# This lists the API header files that are scanned by\n\n# some of the build rules to generate some files needed\n\n# by the build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Traverse directories each adding a Z3 component\n\n################################################################################\n\n# I'm duplicating the order in ``mk_project.py`` for now to help us keep\n\n# the build systems in sync.\n\n#\n\n# The components in these directory explicitly declare their dependencies so\n\n# you may be able to re-order some of these directories but an error will be\n\n# raised if you try to declare a component is dependent on another component\n\n# that has not yet been declared.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n\n# libz3\n\n################################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VERSION determines the version in the filename of the shared library.\n\n# SOVERSION determines the value of the DT_SONAME field on ELF platforms.\n\n# On ELF platforms the final compiled filename will be libz3.so.W.X.Y.Z\n\n# but symlinks will be made to this file from libz3.so and also from\n\n# libz3.so.W.X.\n\n# This indicates that no breaking API changes will be made within a single\n\n# minor version.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# On UNIX like platforms if we don't change the OUTPUT_NAME\n\n# the library gets a name like ``liblibz3.so`` so we change it\n\n# here. We don't do a rename with MSVC because we get file naming\n\n# conflicts (the z3 executable also has this OUTPUT_NAME) with\n\n# ``.ilk``, ``.pdb``, ``.lib`` and ``.exp`` files sharing the same\n\n# prefix.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The `PRIVATE` usage requirement is specified so that when building Z3 as a\n\n# shared library the dependent libraries are specified on the link command line\n\n# so that if those are also shared libraries they are referenced by `libz3.so`.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is currently only for the OpenMP flags. It needs to be set\n\n# via `target_link_libraries()` rather than `z3_append_linker_flag_list_to_target()`\n\n# because when building the `libz3` as a static library when the target is exported\n\n# the link dependencies need to be exported too.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Declare which header file are the public header files of libz3\n\n# these will automatically installed when the libz3 target is installed\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# On Windows this installs ``libz3.lib`` which CMake calls the \"corresponding import library\". Do we want this installed?\n\n# For Windows. DLLs are runtime targets for CMake\n",
        "Line" : 175,
        "CharPositionInLine" : 48
      },
      "9" : {
        "Text" : "# Handle settings dll exports when using MSVC\n\n# FIXME: This seems unnecessarily complicated but I'm doing\n\n# this because this is what the python build system does.\n\n# CMake has a much more elegant (see ``GenerateExportHeader.cmake``)\n\n# way of handling this.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "################################################################################\n\n# Z3 executable\n\n################################################################################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################\n\n# z3-test\n\n################################################################################\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################\n\n# Z3 API bindings\n\n################################################################################\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################################\n\n# .NET bindings\n\n################################################################################\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "################################################################################\n\n# Java bindings\n\n################################################################################\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# TODO: Implement support for other bindigns\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/ackermannization/CMakeLists.txt" : {
      "ObjectId" : "3ce7f97cc4b9be0b3d54a715fa4bddf6ed4a441a",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/api/CMakeLists.txt" : {
      "ObjectId" : "247d0a14cee9ee01c72a819ad72a123e1c84d145",
      "LastModified" : "2019-04-01T19:10:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sanity check\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: When update_api.py no longer uses ``mk_util`` drop this dependency\n",
        "Line" : 29,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 2
    },
    "src/api/dll/CMakeLists.txt" : {
      "ObjectId" : "31b0fb576c69aeeb8363fd92476e48c8dbc6cbfa",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/api/dotnet/CMakeLists.txt" : {
      "ObjectId" : "8792f825ed7c3cb1df7411dd7d59d36a11d5e309",
      "LastModified" : "2019-04-01T19:10:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure AssemblyInfo.cs\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate Native.cs\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: When update_api.py no longer uses ``mk_util`` drop this dependency\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Generate Enumerations.cs\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make paths to source files absolute\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add generated files\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate <Compile Include=\"files.cs\" /> items\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FindDotnet.cmake forwards CMake build type to MSBuild.\n\n# And thus we can put the conditional properties in the project file.\n\n# Note, nuget package file names do not have the ${VER_REV} part.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO conditional for signing. we can then enable the ``Release_delaysign`` configuration\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Convenient top-level target\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Register the local nupkg repo\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################\n\n# Install: register a local nuget repo and install our package.\n\n#          the build step depends on the 'purge' target, making sure that\n\n#          a user will always restore the freshly-built package.\n\n###############################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# move the local repo to the installation directory (cancel the build-time repo)\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO GAC?\n\n#  set(GAC_PKG_NAME \"Microsoft.Z3.Sharp\")\n\n#  set(PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n\n#  set(VERSION \"${Z3_VERSION}\")\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/api/java/CMakeLists.txt" : {
      "ObjectId" : "c2d73ffb1b229fcd0dae9df0dc2abf5bbe752c1b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sanity check for dirty source tree\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rule to generate ``Native.java`` and ``Native.cpp``\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: When update_api.py no longer uses ``mk_util`` drop this dependency\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Add rule to build native code that provides a bridge between\n\n# ``Native.java`` and libz3's interfac3.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME:\n\n# Not sure if using all the flags used by the Z3 components is really necessary\n\n# here. The Python build system uses all the flags used for building\n\n# Z3's components to build ``Native.cpp`` lets do the same for now.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIXME: Should this library have SONAME and VERSION set?\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This prevents CMake from automatically defining ``z3java_EXPORTS``\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Rule to generate the ``com.microsoft.z3.enumerations`` package\n\n# FIXME: This list of files is fragile\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add generated files to list\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Convenient top-level target\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Rule to build ``com.microsoft.z3.jar``\n\n# TODO: Should we set ``CMAKE_JNI_TARGET`` to ``TRUE``?\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################\n\n# Install\n\n###############################################################################\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Provide cache variables for the install locations that the user can change.\n\n# This defaults to ``/usr/local/java`` which seems to be the location for ``.jar``\n\n# files on Linux distributions\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# FIXME: I don't think this the right installation location\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Note: Don't use ``DESTINATION`` here as the version of ``UseJava.cmake`` shipped\n\n# with CMake 2.8.12.2 handles that incorrectly.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "src/api/python/CMakeLists.txt" : {
      "ObjectId" : "6efdc15ef08f10fd7229ecbc48551779eec9762c",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Add target to build python bindings for the build directory\n\n###############################################################################\n\n# This allows the python bindings to be used directly from the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate z3core.py\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: When update_api.py no longer uses ``mk_util`` drop this dependency\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Generate z3consts.py\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link libz3 into the python directory so bindings work out of the box\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenient top-level target\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n# Install\n\n###############################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Try to guess the installation path for the bindings\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set a cache variable that the user can modify if needed\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check if path exists under the install prefix if it is absolute. If the\n\n# path is relative it will be installed under the install prefix so there\n\n# if nothing to check\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Using DESTDIR still seems to work even if we use an absolute path\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "src/ast/CMakeLists.txt" : {
      "ObjectId" : "0bcc4d8473234e6476d9b95fc93fbf5df9b2fe9c",
      "LastModified" : "2019-04-01T19:10:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unnecessary? polynomial already depends on util\n",
        "Line" : 50,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 1
    },
    "src/ast/fpa/CMakeLists.txt" : {
      "ObjectId" : "2a6d0763cc538cde453ba7c3b3ebefbc5d979f70",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ast/macros/CMakeLists.txt" : {
      "ObjectId" : "ec6d7e26c8bc32d413e0b1dbcdade61066f404f1",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ast/normal_forms/CMakeLists.txt" : {
      "ObjectId" : "69288d92bf4ebe76620c48ca0fb9ff36c0fa9a7c",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ast/pattern/CMakeLists.txt" : {
      "ObjectId" : "5531bb29b831a1acb525dcca8a38a31b02ac9070",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If this code for adding the rule to generate the database file is ever needed\n\n# for other components then we should refactor this code into\n\n# z3_add_component()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Let CMake know this target depends on this generated\n\n# header file\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/ast/proofs/CMakeLists.txt" : {
      "ObjectId" : "6eedb0facf1f5e8fa87c7e600f4b061c761b25f3",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ast/rewriter/CMakeLists.txt" : {
      "ObjectId" : "d506c75b3f6c035624b560576542738c5ed1a0b0",
      "LastModified" : "2019-04-01T19:10:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ast/rewriter/bit_blaster/CMakeLists.txt" : {
      "ObjectId" : "c8985a05151d960832ac66711147e36186996745",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ast/substitution/CMakeLists.txt" : {
      "ObjectId" : "80e12c9953b1a72de5166ed22167e4a93c2c8848",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmd_context/CMakeLists.txt" : {
      "ObjectId" : "8da871f9a90e3cc7d779ddaf0a7700673715df95",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmd_context/extra_cmds/CMakeLists.txt" : {
      "ObjectId" : "3aef1a5539619afcbb6f51ef901634e3989c3fee",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/automata/CMakeLists.txt" : {
      "ObjectId" : "1fffd24a84fecdd5cf41bd6f6c269d038f02403c",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/euclid/CMakeLists.txt" : {
      "ObjectId" : "a72f02b280995d2a608a3a2662f2a2b579764f0a",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/grobner/CMakeLists.txt" : {
      "ObjectId" : "1b56c775fdbff806a91930e8a09511e1607c14e0",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/hilbert/CMakeLists.txt" : {
      "ObjectId" : "2e44140b8ad6601ce917e2cc273394b2fbeaf617",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/interval/CMakeLists.txt" : {
      "ObjectId" : "390529b9dff75f1cdd09822bbcf7dfda5ad19d29",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/polynomial/CMakeLists.txt" : {
      "ObjectId" : "8c7d9ec02410b563a32c83f30274c59d07d6acfe",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/realclosure/CMakeLists.txt" : {
      "ObjectId" : "beb5f147b54b4878d65f5786cb36336adbade804",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/simplex/CMakeLists.txt" : {
      "ObjectId" : "de55f163429c24e2505f6274728ad2cfebb88e99",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/subpaving/CMakeLists.txt" : {
      "ObjectId" : "be88f63cd1ffa3ad483368e2ee84592e25c59212",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/math/subpaving/tactic/CMakeLists.txt" : {
      "ObjectId" : "8873a102123c9dfc56233bb39dd4c388f8843692",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/model/CMakeLists.txt" : {
      "ObjectId" : "0e685e07cf548a00c83dd107726d6b8bc1d2d71b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/base/CMakeLists.txt" : {
      "ObjectId" : "8c21e1557369ef9d9b9fc5ef923694823806c4c2",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/bmc/CMakeLists.txt" : {
      "ObjectId" : "dcd99898e85bd0d2275a4ab53b5e6f933203d291",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/clp/CMakeLists.txt" : {
      "ObjectId" : "32d9a928ebf63f51b4e23a24d886efd0bf88620f",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/dataflow/CMakeLists.txt" : {
      "ObjectId" : "3fc1e1f1955728e4a09b787bcbaf7ef95664206b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/ddnf/CMakeLists.txt" : {
      "ObjectId" : "55d6bae5d25b0f5f39a759b34e39c78ba49bb24c",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/fp/CMakeLists.txt" : {
      "ObjectId" : "4837df81bdf9f15fb46b566b661c8ffebf2262ee",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/rel/CMakeLists.txt" : {
      "ObjectId" : "f03a9040676e8b879d3db51348b6ac05c6b38234",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/spacer/CMakeLists.txt" : {
      "ObjectId" : "43fffd9fbae677bbdb4b6b310030960eda2d89bd",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/tab/CMakeLists.txt" : {
      "ObjectId" : "cfae51280a072534eee8361e0a869ca89b0ed603",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/muz/transforms/CMakeLists.txt" : {
      "ObjectId" : "62272450c084578109f91fb31a79daf58713259c",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/nlsat/CMakeLists.txt" : {
      "ObjectId" : "d0c1379e5865ffd4261c0991381545949b80ea4f",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/nlsat/tactic/CMakeLists.txt" : {
      "ObjectId" : "3be3bcfb76818b46056d238219cfc95a0d90e588",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/opt/CMakeLists.txt" : {
      "ObjectId" : "fb61c0c3313b729488b8b7f1a4ec99299e46f7e6",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/parsers/smt2/CMakeLists.txt" : {
      "ObjectId" : "022cce2f25e696b656ffeb458cfbcb6a3fff1775",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/parsers/util/CMakeLists.txt" : {
      "ObjectId" : "6ede4b77305444517d0ed8eb6e20c81518accd32",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/qe/CMakeLists.txt" : {
      "ObjectId" : "e9f91ae3eb1d29024ebbcc90e9350ea405b23215",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/sat/CMakeLists.txt" : {
      "ObjectId" : "320a674a20feecdd432aaa3ab5cd07be10d3fd56",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/sat/sat_solver/CMakeLists.txt" : {
      "ObjectId" : "45a67336772812d0607a3d03ab6897d66e97b99e",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/sat/tactic/CMakeLists.txt" : {
      "ObjectId" : "dbbfbe7537f69b1a59c4a49da12037e4bbafd487",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shell/CMakeLists.txt" : {
      "ObjectId" : "2782463410fea34022176cbaa101ef42d213ce87",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: z3 should really link against libz3 and not the\n\n# individual components. Several things prevent us from\n\n# doing this\n\n# * The api_dll component in libz3 shouldn't be used the\n\n#   the z3 executable.\n\n# * The z3 executable uses symbols that are hidden in libz3\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are only using these dependencies to enforce a build\n\n# order. We don't use this list for actual linking.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We don't use the api_dll component in the Z3 executable\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# FIXME: shell should really link against libz3 but it can't due to requiring\n\n# use of some hidden symbols. Also libz3 has the ``api_dll`` component which\n\n# we don't want (I think).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/smt/CMakeLists.txt" : {
      "ObjectId" : "0eda8f86b70cd1281e40cb32153a56ea57a8b8a6",
      "LastModified" : "2019-04-13T23:15:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/smt/params/CMakeLists.txt" : {
      "ObjectId" : "4beec80f081e873d1733c0ba5b45a92c912f4f2b",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/smt/proto_model/CMakeLists.txt" : {
      "ObjectId" : "c5f6c4b18758ef9cd065e7142c5179724e17e651",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/smt/tactic/CMakeLists.txt" : {
      "ObjectId" : "6187f9c18a1e770737b1a658712de2970f4a4eb9",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/solver/CMakeLists.txt" : {
      "ObjectId" : "281a34018e221372d08e6653d4d82b8bf61ecd49",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/CMakeLists.txt" : {
      "ObjectId" : "495078afc69b7a2cf73bbf523d9f06f4fc1d4ffc",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/aig/CMakeLists.txt" : {
      "ObjectId" : "51ea9b6d3a1a425965c0a8277be489a3bfd85be4",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/arith/CMakeLists.txt" : {
      "ObjectId" : "cb025b2065529679f0f9b93a57ef17a319afde6e",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/bv/CMakeLists.txt" : {
      "ObjectId" : "e9f0927d5bb7a174b8edfba9bcf0cdffc79822bc",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/core/CMakeLists.txt" : {
      "ObjectId" : "a247c7b205649f7da054ae4143385fb195fe84da",
      "LastModified" : "2019-04-01T19:10:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/fd_solver/CMakeLists.txt" : {
      "ObjectId" : "67567d19d6021ea5eabf34b98d70dd25021db07d",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/fpa/CMakeLists.txt" : {
      "ObjectId" : "c647df7fc99a27acd30a3dbb25beef90c7a10683",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/portfolio/CMakeLists.txt" : {
      "ObjectId" : "0913bf7f093da111dfd5f6cdafb9b8affda58938",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/sls/CMakeLists.txt" : {
      "ObjectId" : "436b1742fc0a4578f399812870493b3470f79111",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/smtlogics/CMakeLists.txt" : {
      "ObjectId" : "2741334b4741e6f2b38dd81af7ce70f03fb69f8a",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tactic/ufbv/CMakeLists.txt" : {
      "ObjectId" : "511dc2b2d0dc5da73bca0ac31e75d3226643b1a1",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "c2da596fa9bdea48c60a6d8fc41c20a344757654",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# z3-test executable\n\n################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/test/fuzzing/CMakeLists.txt" : {
      "ObjectId" : "c2bc61ed5cbbe6196bc7a9bb04e5a6b8cd0bae7e",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't put this component inside libz3\n",
        "Line" : 2,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "src/test/lp/CMakeLists.txt" : {
      "ObjectId" : "32d55bca8780d8998eeb49f62f0aa7c104d73246",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "5b1f336d1a16f6851c3e326638d97ddfe4c26231",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/lp/CMakeLists.txt" : {
      "ObjectId" : "edb73fdab5245ddd63fe97ca7dea56b970b231d9",
      "LastModified" : "2019-03-07T09:58:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 92,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 3189
}