{
  "Repository" : "43061",
  "Revision" : "HEAD",
  "ObjectId" : "63783aeca007c1e1d2a7cf73b3f3da056913f077",
  "CommitTime" : "2019-03-04T04:25:41Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1788edc5f39e79b9bf55328ad92e4dac63882565",
      "LastModified" : "2019-03-04T04:25:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# workaround for using ccache with Xcode generator\n\n# thanks to Craig Scott: https://crascit.com/2016/04/09/using-ccache-with-cmake/\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find ccache\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set up wrapper scripts\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set Xcode project attributes to route compilation and linking\n\n# through our scripts\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# identify target architecture, build portaudio before any SC specific\n\n# definitions break the pa-build\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# installing to default application-location creates an error (a privileges and/or path syntax problem)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# might work with \"SHARED\" as well.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#############################################\n\n# Compiler flags etc\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#avoid unnecesary autolink\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#############################################\n\n# Detect CCache\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# only used with >=cmake-3.4\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#############################################\n\n# Options\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ARM platforms do not have SSE\n",
        "Line" : 170,
        "CharPositionInLine" : 7
      },
      "13" : {
        "Text" : "# here we check for JACK metadata API\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Build supernova by default only when on Linux or BSD systems\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#############################################\n\n# some default libraries\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# we're specifically setting up the boost libraries here, so we can\n\n# name them\n",
        "Line" : 261,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#############################################\n\n# some preprocessor flags\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# workaround\n",
        "Line" : 326,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# disable warnings\n",
        "Line" : 345,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# pointer points outside of underlying object ... used heavily in sclang\n\n# controlling expression is constant\n",
        "Line" : 346,
        "CharPositionInLine" : 36
      },
      "21" : {
        "Text" : "# signed/unsigned mismatch\n\n# unreferenced label\n\n# conversion from 'size_t' to 'int', possible loss of data\n\n# conversion from '__int64' to 'int', possible loss of data\n\n# '=' : truncation from 'double' to 'float'\n\n# '=' : truncation of constant value\n\n# forcing value to bool 'true' or 'false' (performance warning)\n\n# The POSIX name for this item is deprecated.\n",
        "Line" : 352,
        "CharPositionInLine" : 38
      },
      "22" : {
        "Text" : "# _ENABLE_ATOMIC_ALIGNMENT_FIX prevents the build from breaking when VS2015 update 2 upwards are used\n\n# see http://boost.2283326.n4.nabble.com/lockfree-ENABLE-ATOMIC-ALIGNMENT-FIX-for-VS-2015-Update-2-td4685955.html\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# no-strict-aliasing was introduced because of problems with MinGW/GCC 4.9.2\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# support for building on Raspberry Pi 1/2/3 and BBB\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#############################################\n\n# subdirectories\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#if there are folders inside SCCLassLibrary abort cmake.\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#symlink the folders inside SCCLassLibrary. Check if QtCollider folder should be symlinked or not.\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "#############################################\n\n#\n\n# build scdoc help files\n\n#\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# this folder has an extension to Platform that disables the loadStartupFiles method\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#############################################\n\n#\n\n# testsuite\n\n#\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#############################################\n\n# CPack support\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\tset(CPACK_PACKAGE_FILE_NAME \"${scappbundlename}-${PROJECT_VERSION}\")\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# We define a custom 'package' target in platform/windows/CMakeLists.txt\n",
        "Line" : 607,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "#############################################\n\n# hide advanced variables\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "QtCollider/CMakeLists.txt" : {
      "ObjectId" : "4702367a2209c9e46037f8be37efb4c15093ee9c",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCDoc/CMakeLists.txt" : {
      "ObjectId" : "a4cba85c106a482a55fa1c4d5ac44fbb76b18ad5",
      "LastModified" : "2014-09-01T18:06:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake_modules/DeployQt5.cmake" : {
      "ObjectId" : "5ef470d07e6a42ee50c823fca9fc3774e1539571",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Functions to help assemble a standalone Qt5 executable.\n\n# A collection of CMake utility functions useful for deploying\n\n# Qt5 executables.\n\n#\n\n# The following functions are provided by this module:\n\n#   write_qt5_conf\n\n#   resolve_qt5_paths\n\n#   fixup_qt5_executable\n\n#   install_qt5_plugin_path\n\n#   install_qt5_plugin\n\n#   install_qt5_executable\n\n# Requires CMake 2.6 or greater because it uses function and\n\n# PARENT_SCOPE. Also depends on BundleUtilities.cmake.\n\n#\n\n#  WRITE_QT5_CONF(<qt_conf_dir> <qt_conf_contents>)\n\n# Writes a qt.conf file with the <qt_conf_contents> into <qt_conf_dir>.\n\n#\n\n#  RESOLVE_QT5_PATHS(<paths_var> [<executable_path>])\n\n# Loop through <paths_var> list and if any don't exist resolve them\n\n# relative to the <executable_path> (if supplied) or the CMAKE_INSTALL_PREFIX.\n\n#\n\n#  FIXUP_QT5_EXECUTABLE(<executable> [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf>])\n\n# Copies Qt plugins, writes a Qt configuration file (if needed) and fixes up a\n\n# Qt5 executable using BundleUtilities so it is standalone and can be\n\n# drag-and-drop copied to another machine as long as all of the system\n\n# libraries are compatible.\n\n#\n\n# <executable> should point to the executable to be fixed-up.\n\n#\n\n# <qtplugins> should contain a list of the names or paths of any Qt plugins\n\n# to be installed.\n\n#\n\n# <libs> will be passed to BundleUtilities and should be a list of any already\n\n# installed plugins, libraries or executables to also be fixed-up.\n\n#\n\n# <dirs> will be passed to BundleUtilities and should contain and directories\n\n# to be searched to find library dependencies.\n\n#\n\n# <plugins_dir> allows an custom plugins directory to be used.\n\n#\n\n# <request_qt_conf> will force a qt.conf file to be written even if not needed.\n\n#\n\n#  INSTALL_QT5_PLUGIN_PATH(plugin executable copy installed_plugin_path_var <plugins_dir> <component> <configurations>)\n\n# Install (or copy) a resolved <plugin> to the default plugins directory\n\n# (or <plugins_dir>) relative to <executable> and store the result in\n\n# <installed_plugin_path_var>.\n\n#\n\n# If <copy> is set to TRUE then the plugins will be copied rather than\n\n# installed. This is to allow this module to be used at CMake time rather than\n\n# install time.\n\n#\n\n# If <component> is set then anything installed will use this COMPONENT.\n\n#\n\n#  INSTALL_QT5_PLUGIN(plugin executable copy installed_plugin_path_var <plugins_dir> <component>)\n\n# Install (or copy) an unresolved <plugin> to the default plugins directory\n\n# (or <plugins_dir>) relative to <executable> and store the result in\n\n# <installed_plugin_path_var>. See documentation of INSTALL_QT5_PLUGIN_PATH.\n\n#\n\n#  INSTALL_QT5_EXECUTABLE(<executable> [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf> <component>])\n\n# Installs Qt plugins, writes a Qt configuration file (if needed) and fixes up\n\n# a Qt5 executable using BundleUtilities so it is standalone and can be\n\n# drag-and-drop copied to another machine as long as all of the system\n\n# libraries are compatible. The executable will be fixed-up at install time.\n\n# <component> is the COMPONENT used for bundle fixup and plugin installation.\n\n# See documentation of FIXUP_QT5_BUNDLE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Mike McQuaid <mike@mikemcquaid.com>\n\n# Copyright 2013 Mihai Moldovan <ionic@ionic.de>\n\n# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2011 Kitware, Inc., Insight Software Consortium\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#   nor the names of their contributors may be used to endorse or promote\n\n#   products derived from this software without specific prior written\n\n#   permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The functions defined in this file depend on the fixup_bundle function\n\n# (and others) found in BundleUtilities.cmake\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#string(TOUPPER \"QT_${plugin}_PLUGIN\" plugin_var)\n",
        "Line" : 248,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 4
    },
    "cmake_modules/FinalFile.cmake" : {
      "ObjectId" : "d6b5a550beb8b36d0d1a28d7677a4defa22c7e5e",
      "LastModified" : "2010-11-30T19:45:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake_modules/FindAvahi.cmake" : {
      "ObjectId" : "8cc4a27d53cdb32c93470294767d9c9e5760bbd7",
      "LastModified" : "2010-11-30T19:45:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake_modules/FindFFTW3f.cmake" : {
      "ObjectId" : "6123e683ac10b621df693ebef38a2e85f0b24628",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find single-precision (float) version of FFTW3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used by Windows only\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/FindICU.cmake" : {
      "ObjectId" : "1646660d733c9928ee362c9b55679c49a47af0f2",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module can find the International Components for Unicode (ICU) Library\n\n#\n\n# Requirements:\n\n# - CMake >= 2.8.3 (for new version of find_package_handle_standard_args)\n\n#\n\n# The following variables will be defined for your use:\n\n#   - ICU_FOUND             : were all of your specified components found (include dependencies)?\n\n#   - ICU_INCLUDE_DIRS      : ICU include directory\n\n#   - ICU_LIBRARIES         : ICU libraries\n\n#   - ICU_VERSION           : complete version of ICU (x.y.z)\n\n#   - ICU_MAJOR_VERSION     : major version of ICU\n\n#   - ICU_MINOR_VERSION     : minor version of ICU\n\n#   - ICU_PATCH_VERSION     : patch version of ICU\n\n#   - ICU_<COMPONENT>_FOUND : were <COMPONENT> found? (FALSE for non specified component if it is not a dependency)\n\n#\n\n# For windows or non standard installation, define ICU_ROOT variable to point to the root installation of ICU. Two ways:\n\n#   - run cmake with -DICU_ROOT=<PATH>\n\n#   - define an environment variable with the same name before running cmake\n\n# With cmake-gui, before pressing \"Configure\":\n\n#   1) Press \"Add Entry\" button\n\n#   2) Add a new entry defined as:\n\n#     - Name: ICU_ROOT\n\n#     - Type: choose PATH in the selection list\n\n#     - Press \"...\" button and select the root installation of ICU\n\n#\n\n# Example Usage:\n\n#\n\n#   1. Copy this file in the root of your project source directory\n\n#   2. Then, tell CMake to search this non-standard module in your project directory by adding to your CMakeLists.txt:\n\n#     set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\n#   3. Finally call find_package() once, here are some examples to pick from\n\n#\n\n#   Require ICU 4.4 or later\n\n#     find_package(ICU 4.4 REQUIRED)\n\n#\n\n#   if(ICU_FOUND)\n\n#      include_directories(${ICU_INCLUDE_DIRS})\n\n#      add_executable(myapp myapp.c)\n\n#      target_link_libraries(myapp ${ICU_LIBRARIES})\n\n#   endif(ICU_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright (c) 2011-2013, julp\n\n#\n\n# Distributed under the OSI-approved BSD License\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#=============================================================================\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########## Private ##########\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefix for all ICU relative public variables\n",
        "Line" : 55,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Prefix for all ICU relative internal variables\n",
        "Line" : 58,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Prefix for all pkg-config relative internal variables\n",
        "Line" : 61,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# <icu component name> <library name 1> ... <library name N>\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Common and Data libraries\n\n# Internationalization library\n\n# Stream and I/O Library\n\n# Layout library\n\n# Paragraph Layout library\n",
        "Line" : 99,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "########## Public ##########\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# may be done in the icu_declare_component macro\n",
        "Line" : 117,
        "CharPositionInLine" : 85
      },
      "10" : {
        "Text" : "# Check components\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# uc required at least\n",
        "Line" : 121,
        "CharPositionInLine" : 45
      },
      "12" : {
        "Text" : "# Includes\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########## <part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# ICU >= 4\n",
        "Line" : 144,
        "CharPositionInLine" : 72
      },
      "15" : {
        "Text" : "# ICU [2;4[\n",
        "Line" : 146,
        "CharPositionInLine" : 77
      },
      "16" : {
        "Text" : "# ICU [1.4;2[\n",
        "Line" : 148,
        "CharPositionInLine" : 75
      },
      "17" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 150,
        "CharPositionInLine" : 67
      },
      "18" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 156,
        "CharPositionInLine" : 105
      },
      "19" : {
        "Text" : "# [1.3;1.4[ as #define ICU_VERSION \"3\" (no patch version, ie all 1.3.X versions will be detected as 1.3.0)\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n# Since version 4.9.1, ICU release version numbering was totaly changed, see:\n\n# - http://site.icu-project.org/download/49\n\n# - http://userguide.icu-project.org/design#TOC-Version-Numbers-in-ICU\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# ICU [1.4;1.8[\n",
        "Line" : 170,
        "CharPositionInLine" : 125
      },
      "22" : {
        "Text" : "# [1.4;1.8[ as #define U_ICU_VERSION \"1.4.1.2\" but it seems that some 1.4.1(?:\\.\\d)? have releasing error and appears as 1.4.0\n",
        "Line" : 171,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# copy CMAKE_MATCH_1, no longer valid on the following if\n",
        "Line" : 172,
        "CharPositionInLine" : 67
      },
      "24" : {
        "Text" : "########## </part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Check dependencies (implies pkg-config)\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check libraries\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# both not found\n",
        "Line" : 231,
        "CharPositionInLine" : 160
      },
      "28" : {
        "Text" : "# one or both found\n",
        "Line" : 234,
        "CharPositionInLine" : 162
      },
      "29" : {
        "Text" : "# release not found => we are in debug\n",
        "Line" : 236,
        "CharPositionInLine" : 89
      },
      "30" : {
        "Text" : "# debug not found => we are in release\n",
        "Line" : 238,
        "CharPositionInLine" : 91
      },
      "31" : {
        "Text" : "# both found\n",
        "Line" : 240,
        "CharPositionInLine" : 19
      },
      "32" : {
        "Text" : "# Try to find out compiler flags\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Check find_package arguments\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# IN (args)\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# OUT\n\n# Found\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Flags\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Linking\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Version\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "cmake_modules/FindJack.cmake" : {
      "ObjectId" : "44417deb36e65d99b45e02940dad24022063acb8",
      "LastModified" : "2010-11-30T19:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find jack-2.6\n\n# Once done this will define\n\n#\n\n#  JACK_FOUND - system has jack\n\n#  JACK_INCLUDE_DIRS - the jack include directory\n\n#  JACK_LIBRARIES - Link these to use jack\n\n#  JACK_DEFINITIONS - Compiler switches required for using jack\n\n#\n\n#  Copyright (c) 2008 Andreas Schneider <mail@cynapses.org>\n\n#  Modified for other libraries by Lasse Kärkkäinen <tronic>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# show the JACK_INCLUDE_DIRS and JACK_LIBRARIES variables only in the advanced view\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake_modules/FindPortaudio.cmake" : {
      "ObjectId" : "d272df2bbadd10d7e5495deebb8e0c01c262d4fd",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Portaudio\n\n# Once done this will define\n\n#\n\n#  PORTAUDIO_FOUND - system has Portaudio\n\n#  PORTAUDIO_INCLUDE_DIRS - the Portaudio include directory\n\n#  PORTAUDIO_LIBRARIES - Link these to use Portaudio\n\n#  PORTAUDIO_DEFINITIONS - Compiler switches required for using Portaudio\n\n#  PORTAUDIO_VERSION - Portaudio version\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the PORTAUDIO_INCLUDE_DIRS and PORTAUDIO_LIBRARIES variables only in the advanced view\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindPthreads.cmake" : {
      "ObjectId" : "1b5683c5f783e12a45848730d88b0ff04a6c6c58",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Pthreads library\n\n# This module searches for the Pthreads library (including the\n\n# pthreads-win32 port).\n\n#\n\n# This module defines these variables:\n\n#\n\n#  PTHREADS_FOUND\n\n#      True if the Pthreads library was found\n\n#  PTHREADS_LIBRARY\n\n#      The location of the Pthreads library\n\n#  PTHREADS_INCLUDE_DIR\n\n#      The include directory of the Pthreads library\n\n#  PTHREADS_DEFINITIONS\n\n#      Preprocessor definitions to define (HAVE_PTHREAD_H is a fairly common\n\n#      one)\n\n#\n\n# This module responds to the PTHREADS_EXCEPTION_SCHEME\n\n# variable on Win32 to allow the user to control the\n\n# library linked against.  The Pthreads-win32 port\n\n# provides the ability to link against a version of the\n\n# library with exception handling.  IT IS NOT RECOMMENDED\n\n# THAT YOU CHANGE PTHREADS_EXCEPTION_SCHEME TO ANYTHING OTHER THAN\n\n# \"C\" because most POSIX thread implementations do not support stack\n\n# unwinding.\n\n#\n\n#  PTHREADS_EXCEPTION_SCHEME\n\n#      C  = no exceptions (default)\n\n#         (NOTE: This is the default scheme on most POSIX thread\n\n#          implementations and what you should probably be using)\n\n#      CE = C++ Exception Handling\n\n#      SE = Structure Exception Handling (MSVC only)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Define a default exception scheme to link against\n\n# and validate user choice.\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assign default if needed\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Validate\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# Find the header file\n\n#\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Find the library\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unix / Cygwin / Apple / Etc.\n",
        "Line" : 86,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 7
    },
    "cmake_modules/FindReadline.cmake" : {
      "ObjectId" : "0dcc7335316fc828669b3049c1ceb47758cab458",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# look in homebrew paths\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindSndfile.cmake" : {
      "ObjectId" : "bdd4fee8e893e2475437e1a70be0cc59ebfa11c7",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find sndfile\n\n# Find the native sndfile includes and libraries\n\n#\n\n#  SNDFILE_INCLUDE_DIR - where to find sndfile.h, etc.\n\n#  SNDFILE_LIBRARIES   - List of libraries when using libsndfile.\n\n#  SNDFILE_FOUND       - True if libsndfile found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(NOT SNDFILE_FIND_QUIETLY)\n\n#  message(STATUS \"FindSndfile: sndfile deactivated (NO_LIBSNDFILE)\")\n\n#endif()\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# for onceonly check above\n",
        "Line" : 13,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# TODO on non-apple platforms, we need to be able to test for >=1018.\n\n# (On apple it is known true, because we bundle a later version.)\n\n# I think this is not necessary anymore in 2016\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# used by Windows only\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set SNDFILE_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake_modules/FindYamlCpp.cmake" : {
      "ObjectId" : "1ec9798d594b378435d19b21e0db400148f1cbbe",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate yaml-cpp\n\n#\n\n# This module defines\n\n#  YAMLCPP_FOUND, if false, do not try to link to yaml-cpp\n\n#  YAMLCPP_LIBRARY, where to find yaml-cpp\n\n#  YAMLCPP_INCLUDE_DIR, where to find yaml.h\n\n#\n\n# By default, the dynamic libraries of yaml-cpp will be found. To find the static ones instead,\n\n# you must set the YAMLCPP_STATIC_LIBRARY variable to TRUE before calling find_package(YamlCpp ...).\n\n#\n\n# If yaml-cpp is not installed in a standard path, you can use the YAMLCPP_DIR CMake variable\n\n# to tell CMake where yaml-cpp is.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find the yaml-cpp include directory\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n\n# DarwinPorts\n\n# Blastwave\n",
        "Line" : 27,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# find the yaml-cpp library\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set YAMLCPP_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake_modules/MacAppFolder.cmake" : {
      "ObjectId" : "5b6597c45c07bfe3504384778c601f8322f79194",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###### The user may set the app name, causing a standalone build\n\n######\tcmake -D standalone:string=MyFabApp ../\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# We're building a standalone, change the app name.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "###### Allow user to select a FHS-style install\n\n# TODO not yet used\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "editors/CMakeLists.txt" : {
      "ObjectId" : "730655a515d20c69a838ae825b78dbc405ab7d10",
      "LastModified" : "2018-03-01T03:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "editors/sc-ide/CMakeLists.txt" : {
      "ObjectId" : "8e48194fc0b865654639f07ae05f9354947373cf",
      "LastModified" : "2019-01-20T23:32:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This makes sclang/scide work with a Qt installation at a fixed, non-system location.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenGL\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Qt5::OpenGL\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# QtCollider shared sources:\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For QtCollider headers:\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Needed for auto-generated forms headers:\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Translation files\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Translation file for source code native language, used only to handle singular/plural forms\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# A handy target to update translation source files\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This sets up the exe icon for windows.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# final builds of the IDE seem to be broken atm\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The following prevents a Windows console from showing up\n\n# when the executable is started:\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Installation\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set how it shows up in the Info.plist file\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# for processing into the plist:\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# run fixup_bundle prior to deployment to get FFTW, libsndfile, MSVC, and Qt libs\n\n# will run windeployqt afterward to auto-deploy QtWebEngine dependencies\n",
        "Line" : 403,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# mac/windows: find the Qt deploy utility.\n\n# See https://doc.qt.io/qt-5/windows-deployment.html for windeployqt\n\n# See https://doc.qt.io/qt-5/osx-deployment.html for macdeployqt\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# only the IDE executable is scanned normally, so force scanning of sclang as well\n\n# to get QtWebEngine, libsndfile, and other libs. also force scanning of QtWebEngineProcess\n\n# because macdeployqt is a fickle beast.\n",
        "Line" : 427,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# WIN32\n",
        "Line" : 444,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 19
    },
    "editors/sced/CMakeLists.txt" : {
      "ObjectId" : "b304d4c07082928ae411d25a6f79659dd47aa4a6",
      "LastModified" : "2018-03-01T03:05:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "editors/sced/scedwin/CMakeLists.txt" : {
      "ObjectId" : "4b4ff6f5ea5b1a4a29082f3e0a780de0704ca3c6",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(PYTHON_LIBRARY \"C:/Python26/libs/python26.lib\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#link_directories( \"C:/mingw/lib/gcc/mingw32/4.6.2/\" )\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#COMPILE_FLAGS \"-specs=${CMAKE_CURRENT_SOURCE_DIR}/cppspecs -static-libstdc++ -static-libgcc\"\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#set_target_properties( scedlib\n\n#    PROPERTIES LINK_FLAGS \"-LC:/mingw/lib/gcc/mingw32/4.6.2/\" )\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "external_libraries/CMakeLists.txt" : {
      "ObjectId" : "896ce62061be7a5203dff27860e511ea1737b7dd",
      "LastModified" : "2019-01-21T13:02:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we compile boost ourselves\n",
        "Line" : 5,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "# boost thread\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#\ttarget_compile_definitions(boost_thread PUBLIC BOOST_THREAD_DONT_PROVIDE_INTERRUPTIONS)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for win32\n",
        "Line" : 46,
        "CharPositionInLine" : 74
      },
      "4" : {
        "Text" : "# tlsf\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#oscpack\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# yaml-cpp\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "##### HID_API #######\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "external_libraries/TLSF-2.4.6/examples/Makefile" : {
      "ObjectId" : "5462b8f68c752d3f302bc0783b02c59e5236484b",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CFLAGS+=-ftest-coverage -fprofile-arcs\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external_libraries/TLSF-2.4.6/src/Makefile" : {
      "ObjectId" : "d5beecb7efbce214e28caff534d0175a707ef28f",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CFLAGS+=-ftest-coverage -fprofile-arcs\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external_libraries/oscpack_1_1_0/CMakeLists.txt" : {
      "ObjectId" : "e8bef70a5293c5c4481b9bd1196b761998499019",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# separate versions of NetworkingUtils.cpp and UdpSocket.cpp are provided for Win32 and POSIX\n\n# the IpSystemTypePath selects the correct ones based on the current platform\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Force to always compile with W4\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Update if necessary\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "external_libraries/oscpack_1_1_0/Makefile" : {
      "ObjectId" : "7e62f07d2d66d5036337619d8096925c23e67bf8",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# oscpack makefile\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the source code should auto-detect endianess for most systems\r\n\n# (see osc/OscHostEndianness.h)\r\n\n# otherwise you need to explicitly set ENDIANESS below\r\n\n# to either OSC_HOST_BIG_ENDIAN or OSC_HOST_LITTLE_ENDIAN\r\n\n# Apple Mac OS X (PowerPC): OSC_HOST_BIG_ENDIAN\r\n\n# Apple Mac OS X (Intel): OSC_HOST_LITTLE_ENDIAN\r\n\n# Win32: OSC_HOST_LITTLE_ENDIAN\r\n\n# i386 GNU/Linux: OSC_HOST_LITTLE_ENDIAN\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#source code will detect using preprocessor\r\n",
        "Line" : 12,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "#ENDIANESS=OSC_HOST_LITTLE_ENDIAN\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Name definitions\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Common source groups\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Test source\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Example source\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Library objects\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build rule and common dependencies for all programs\r\n\n# | specifies an order-only dependency so changes to bin dir modified date don't trigger recompile\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Additional dependencies for each program (make accumulates dependencies from multiple declarations)\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Mac OS X case\r\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#GNU/Linux case\r\n",
        "Line" : 113,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#Installs the library on a system global location\r\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#Installs the include/lib structure locally\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "lang/CMakeLists.txt" : {
      "ObjectId" : "47dfa2fe47812bd7d90531e17effeacd62c2f033",
      "LastModified" : "2019-03-04T04:25:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This makes sclang/scide work with a Qt installation at a fixed location.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make qt creator happy\n",
        "Line" : 103,
        "CharPositionInLine" : 59
      },
      "2" : {
        "Text" : "# mingw-w64 provides getopt\n",
        "Line" : 128,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# This sets up the exe icon for windows.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sclang final-builds are broken\n",
        "Line" : 171,
        "CharPositionInLine" : 22
      },
      "5" : {
        "Text" : "# libsclang is a shared library\n",
        "Line" : 189,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "## external libraries\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "platform/CMakeLists.txt" : {
      "ObjectId" : "3eec83f72e1a4b8ce2f11a2c0f8b362946d3eac1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NB bsd currently OK to ride on linux for this subdir. eventually may need separating.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "platform/linux/CMakeLists.txt" : {
      "ObjectId" : "91471363e19ef060186d71c887c3b201c2678fff",
      "LastModified" : "2018-08-08T00:34:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/windows/CMakeLists.txt" : {
      "ObjectId" : "6a6f87387a9ac4732589fc1adcda9a324472018c",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This target just helps creating a standalone server bundle. It depends\n\n# on the required targets (scsynth and plugins, optionally supernova) to have\n\n# been built in advance. In the full SC build, Qt and implicitly the IDE\n\n# can be skipped (-DSC_QT=OFF) to speed things up.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This target invokes a custom NSIS script to create\n\n# the installer, because CPack would not create a suitable\n\n# installer for sced:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# size for win 3.7 release build\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# size for win 3.7 release build\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# size for win 3.7 release build\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "platform/windows/package.cmake" : {
      "ObjectId" : "93ed4cf0dc4ea3bf6ae41f1a1040a339655b77e3",
      "LastModified" : "2018-08-08T00:34:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Does not support spaces in path:\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "platform/windows/server_bundle.cmake" : {
      "ObjectId" : "724f0974f35c5abb96f9883517c90336d764ca26",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "server/CMakeLists.txt" : {
      "ObjectId" : "bf8dc863d256887e8d400c0db39c34677122b93b",
      "LastModified" : "2019-01-20T23:32:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# on apple we leave this undefined so it defaults to .scx (in the code)\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# here we choose who provides us with the FFT lib\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "server/plugins/CMakeLists.txt" : {
      "ObjectId" : "9a4db7be538941afa560bed55b2c04074279af51",
      "LastModified" : "2019-01-20T23:32:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# large file support\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for stdbool.h\n",
        "Line" : 87,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 2
    },
    "server/scsynth/CMakeLists.txt" : {
      "ObjectId" : "3a7145841904a4ca800a1b87463fce701cb756f6",
      "LastModified" : "2019-01-20T23:32:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Here we work out which audio API to use, from system type and/or user option.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MSYS like Apple\n",
        "Line" : 23,
        "CharPositionInLine" : 62
      },
      "2" : {
        "Text" : "# disable final build for scsynth\n",
        "Line" : 106,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# These two properties are ABI version info, not sc version:\n",
        "Line" : 191,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "server/supernova/CMakeLists.txt" : {
      "ObjectId" : "2b80cb545cdf9760c93e3b49b9a5c583d16e02dd",
      "LastModified" : "2019-01-20T23:32:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmpxchg8b is available on all intel apples\n",
        "Line" : 7,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "server/supernova/sc/CMakeLists.txt" : {
      "ObjectId" : "826e0feae874a1eb6040864a788a6066c1a16da2",
      "LastModified" : "2016-08-10T08:47:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/CMakeLists.txt" : {
      "ObjectId" : "f5fc56324c1c0c032b89167207457e30ef5b11d1",
      "LastModified" : "2018-08-08T00:34:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/sclang/CMakeLists.txt" : {
      "ObjectId" : "ec7f895a631252ef0f8025ae713072385ef3e93d",
      "LastModified" : "2018-08-08T00:34:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/server/CMakeLists.txt" : {
      "ObjectId" : "da19c2e5d62782a31165d6940b100d26fa65f53d",
      "LastModified" : "2019-01-20T23:32:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/server/scsynth/CMakeLists.txt" : {
      "ObjectId" : "455c257904d4858f8601a4c9899967bf57ca4692",
      "LastModified" : "2018-08-08T00:34:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/server/supernova/CMakeLists.txt" : {
      "ObjectId" : "4022da847d16672615217daf80b7bbcf372f9d8a",
      "LastModified" : "2019-01-21T13:17:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# run simple tests\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake_gen/SuperColliderCompilerConfig.cmake" : {
      "ObjectId" : "14c572bd3b6b80d6c559c9685b08c108ea92bc63",
      "LastModified" : "2019-03-03T20:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Brian Heim\n\n# 2018-08-26\n\n#\n\n# Compiler configuration help for server plugins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume we are not mixing C and C++ compiler vendors\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# slower/more complicated way\n",
        "Line" : 9,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# these options only apply if we're doing a 32-bit build, otherwise they cause a diagnostic\n\n# https://stackoverflow.com/questions/1067630/sse2-option-in-visual-c-x64\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# C4514: inline function not used\n\n# C4625: copy ctor implicitly deleted\n\n# C4626: copy assign implicitly deleted\n\n# C4820: padding added after member\n\n# C5026: move ctor implicitly deleted\n\n# C5027: move assign implicitly deleted\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "tools/cmake_gen/SuperColliderServerPlugin.cmake" : {
      "ObjectId" : "3416013ba3229e6272cf9e2006d79f80a5ac320c",
      "LastModified" : "2019-03-03T20:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Brian Heim\n\n# 2018-08-26\n\n# Functions for configuring SuperCollider server plugins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check main paths\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# check supernova paths\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# from CompilerConfig module\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install scsynth/supernova targets to same dir\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 39,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 6019
}