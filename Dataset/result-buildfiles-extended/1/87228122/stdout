{
  "Repository" : "87228122",
  "Revision" : "HEAD",
  "ObjectId" : "31fc967bb00739ae96501e2b032f8b956f7b5ea8",
  "CommitTime" : "2019-04-13T07:33:58Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "774a4693c32b2451721b58e97f3f172880c68175",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# References:\n\n# https://cmake.org/cmake/help/v3.0/\n\n# https://gitlab.kitware.com/cmake/community/wikis/doc/tutorials/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# central location for specifying the Open3D version\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# npm version has to be MAJOR.MINOR.PATCH\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# pypi package name controls specifies the repository name on pypi\n\n# possbie names include:\n\n# - open3d: default name when building from source and for conda\n\n# - open3d-python: for PyPI\n\n# - py3d\n\n# - open3d-original\n\n# - open3d-official\n\n# - open-3d\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set additional info\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# configure a header file to pass the version settings to the source code\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# config options\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# default built type\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if dynamic link is added, use if (WIN32) macro\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set OS-specific things here\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# can't hide the unit testing option on Windows only\n\n# as a precaution: disable unit testing on Windows regardless of user input\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# suppress C4996 warning\n",
        "Line" : 103,
        "CharPositionInLine" : 103
      },
      "12" : {
        "Text" : "# enable GLEW for windows\n",
        "Line" : 104,
        "CharPositionInLine" : 36
      },
      "13" : {
        "Text" : "# by default, \"/MD\" and \"/MDd\" is set by CMake automatically\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# handles the case when re-running cmake with STATIC_WINDOWS_RUNTIME=OFF\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# enable c++11\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# enable c++11\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# compile speed optimization for clang\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# enable c++11\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# disable BUILD_LIBREALSENSE since it is not fully supported on Linux\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Set OpenMP\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# recursively parse and return the entire directory tree.\n\n# the result is placed in output\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Handling dependencies\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set include directories\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Open3D library\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Examples\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# `make check-style` errors if styling is not compliant\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# `make apply-style` runs clang-format to format all source code\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "docs/Makefile" : {
      "ObjectId" : "a97f0eb7334e8ebf817e8ede73937c9dfcba3319",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/_static/C++/CMakeLists.txt" : {
      "ObjectId" : "3f47af4f95176a54c7f30d1ccd2e24f09658a124",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find installed Open3D, this imports\n\n#   Open3D_INCLUDE_DIRS\n\n#   Open3D_LIBRARIES\n\n#   Open3D_LIBRARY_DIRS\n\n#   Open3D_C_FLAGS\n\n#   Open3D_CXX_FLAGS\n\n#   Open3D_EXE_LINKER_FLAGS\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set OS-specific things here\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Open3D\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# link_directories must be before add_executable\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Hot fix windows dll not found issue, assumming we're using the Release build\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "95ca2305f6d932a43bf0d0aaa418a852dfdf865a",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPP examples\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Python examples\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/Cpp/CMakeLists.txt" : {
      "ObjectId" : "fd7c6237ba78db387c818380031cc85715fe2c0e",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Python/CMakeLists.txt" : {
      "ObjectId" : "449b8acb16108cbb99a782a74391abb9005e18d8",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "9c3e55521c6266105c9b6ece854cece3524e0df4",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Open3D/CMakeLists.txt" : {
      "ObjectId" : "176932f52e76c996d260d72db4e2c8d186cefa3d",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Subdirectories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Source group for Visual Studio\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install headers\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# note: adding at least one real source file to any target that references\n\n# reference: https://cmake.org/cmake/help/v3.12/command/add_library.html#object-libraries\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# headless rendering\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# input_dirs: a list of absolute paths in the source dir\n\n# output_dirs: a list of relative paths in the install dir\n\n# input_base_dir: the base dir of input_dirs\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We need to handle case where input_dir is not child subdirectory of\n\n# input_base_dir (or input_base_dir itself).\n\n# This could happen for pre-installed headers, e.g.\n\n#   input_dir == /usr/include/libpng16\n\n#   input_base_dir = /path-to-repo/Open3D\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# extract path relative to the project source dir\n",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# construct relative path in the install dir\n",
        "Line" : 77,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# save\n",
        "Line" : 80,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# When input_dir is not child subdirectory of input_base_dir,\n\n# we simply use the input_dir.\n",
        "Line" : 83,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# build a list of include folders\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# set Open3D include directories\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set Open3D libraries\n\n# If Open3D is a shared library\n\n#     - Built-from-source 3rd-party libraries is embedded in Open3D\n\n#     - Built-from-source 3rd-party libraries will NOT be installed\n\n#     - A user app needs to link\n\n#           1) Open3D\n\n#           2) Pre-installed 3rd-party libraries\n\n# If Open3D is a static library\n\n#     - Built-from-source 3rd-party libraries is NOT embedded in Open3D\n\n#     - Built-from-source 3rd-party libraries will be installed\n\n#     - A user app needs to link\n\n#           1) Open3D\n\n#           2) Pre-installed 3rd-party libraries\n\n#           3) Built-from-source 3rd-party libraries\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# hot-fix for glfw vs glfw3 issue for Windows\n\n# TODO: we shall revisit this for a better fix\n\n# glfw is the target_name i.e. there is add_library(glfw) in glfw's cmake\n\n# glfw3.lib (or libglfw3.a) is the library name of the compiled glfw\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# set Open3D library directories\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find_package Open3D\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# find_package Open3D Version\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# install\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Install the Open3DConfig.cmake and Open3DConfigVersion.cmake\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# uninstall target\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "src/Open3D/Camera/CMakeLists.txt" : {
      "ObjectId" : "dd0244eef00eb41510a62412514e1e19fc78123b",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/ColorMap/CMakeLists.txt" : {
      "ObjectId" : "e89999f5a6ff0f0f2e1b23e2a0c4b3a58a6d6582",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/Geometry/CMakeLists.txt" : {
      "ObjectId" : "4c0ac88644325c05ce6644b971b17e1d3bd648c2",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/IO/CMakeLists.txt" : {
      "ObjectId" : "5f296d8f10aa98863f41e21ba6bebf507fc80633",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/Integration/CMakeLists.txt" : {
      "ObjectId" : "38db4c50b0513800f516d6bccc6aba8b49580cd0",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/Odometry/CMakeLists.txt" : {
      "ObjectId" : "32183986c6ccbd58ff0ed924475b7b03ff36bb46",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/Registration/CMakeLists.txt" : {
      "ObjectId" : "70c34701e1d65054222b3a842c389e29087ec3d9",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/Utility/CMakeLists.txt" : {
      "ObjectId" : "c35d25c1b82f85991ea94022a1e6476857b21e9f",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create object library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Open3D/Visualization/CMakeLists.txt" : {
      "ObjectId" : "8432cfa37902c7e0d2ea0a7a0e856d9332f89ec3",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# some black magic to automatically create a header file from shader files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create object library\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/Python/CMakeLists.txt" : {
      "ObjectId" : "ff3d48cda829795c65dff4331878eec2a8241f86",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Option 1: Do not define \"PYTHON_EXECUTABLE\", but run `cmake ..` within your\n\n#           virtual environment. CMake will pick up the python executable in the\n\n#           virtual environment.\n\n# Option 2: You can also define `cmake -DPYTHON_EXECUTABLE` to specify a python\n\n#           executable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find_program will returns the python executable in current PATH, which\n\n# works with virtualenv\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Detect whether `npm` is installed. Jupyter support will only be enabled if\n\n# `npm` is found.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to get python version to configure some meta files\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# At `make`: open3d.so (or the equivalents) will be created at\n\n# PYTHON_COMPILED_MODULE_DIR. The default locaiton is `build/lib/Python`\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use `make python-package` to create the python package in the build directory\n\n# The python package will be created at PYTHON_PACKAGE_DIR. It contains:\n\n# 1) Pure-python code and misc files, copied from src/Python/package\n\n# 2) The compiled python-C++ module, i.e. open3d.so (or the equivalents)\n\n# 3) Configured files and supporting files\n\n# Note: `make python-package` clears PYTHON_COMPILED_MODULE_DIR first every time\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use `make pip-package` to create the pip package in the build directory\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use `make install-pip-package` to install pip wheel package to the current\n\n# python environment.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use `make conda-package` to create conda package in the build directory\n\n# Note that we don't provide `make install-conda-package` similar to pip. This\n\n# is becuase:\n\n#     1) `make install-pip-whell` works in conda environment for local build\n\n#     2) `make conda-package` is mainly for internal use to distribute conda\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If we put the following `conda-build` in check_and_install_conda_deps.cmake, it\n\n# causes broken pipe problem while running conda build. So we put it here.\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "src/Python/check_and_install_conda_deps.cmake" : {
      "ObjectId" : "33818e0ade987312199bc61778149562b7e1d644",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Assert that we're inside a conda environemnt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if conda-build is installed, if not, install it\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Python/make_install_pip_package.cmake" : {
      "ObjectId" : "beb77cb569e110e9646474ff080016c66d4bbffe",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need this file for cross-platform support on Windows\n\n# For Ubuntu/Mac, we can simply do `pip install ${PYTHON_PACKAGE_DST_DIR}/pip_package/*.whl -U`\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: Since `make python-package` clears PYTHON_COMPILED_MODULE_DIR every time,\n\n#       it is guaranteed that there is only one wheel in ${PYTHON_PACKAGE_DST_DIR}/pip_package/*.whl\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Python/make_python_package.cmake" : {
      "ObjectId" : "49870e3740c598234f688ae84a98cbd62176bb51",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clean up directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create python pacakge. It contains:\n\n# 1) Pure-python code and misc files, copied from src/Python/package\n\n# 2) The compiled python-C++ module, i.e. open3d.so (or the equivalents)\n\n# 3) Configured files and supporting files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 1) Pure-python code and misc files, copied from src/Python/package\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# 2) The compiled python-C++ module, i.e. open3d.so (or the equivalents)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 3) Configured files and supporting files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build Jupyter plugin with webpack. This step distills and merges all js\n\n# dependencies and include all static assets. The generated output is in\n\n# ${PYTHON_PACKAGE_DST_DIR}/open3d/static.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We cache ${PYTHON_PACKAGE_DST_DIR}/js/node_modules in\n\n#          ${PYTHON_PACKAGE_SRC_DIR}/js/node_modules\n\n# to speed up webpack build speed during development.\n\n# During build, the following steps will happen:\n\n# 1) The entire ${PYTHON_PACKAGE_DST_DIR} in the build directory is cleared.\n\n# 2) ${PYTHON_PACKAGE_SRC_DIR}/js/node_modules is copied to\n\n#    ${PYTHON_PACKAGE_DST_DIR}/js/node_modules, regadless whether\n\n#    ${PYTHON_PACKAGE_SRC_DIR}/js/node_modules is empty or not.\n\n# 3) `npm install` is run in ${PYTHON_PACKAGE_DST_DIR}/js, so\n\n#    ${PYTHON_PACKAGE_DST_DIR}/js/node_modules must be filled after\n\n#    `npm install`.\n\n# 4) ${PYTHON_PACKAGE_DST_DIR}/js/node_modules is then copied back to\n\n#    ${PYTHON_PACKAGE_SRC_DIR}/js/node_modules for caching.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "src/Tools/CMakeLists.txt" : {
      "ObjectId" : "223a96ce04e4292b7079de3f4e34eff726e3ec8a",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Tools/ManuallyAlignPointCloud/CMakeLists.txt" : {
      "ObjectId" : "61cecad2027213ab9940b452b18a4a6311a27414",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/UnitTest/CMakeLists.txt" : {
      "ObjectId" : "3855ba6536843c011e29d866069c696971280517",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate GTest\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "util/scripts/apply-style.cmake" : {
      "ObjectId" : "8544c487feecce4b14a8ed4010118cfd7bc1af4b",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ******************************************************************************\n\n# Reference:\n\n# https://github.com/NervanaSystems/ngraph/blob/master/cmake/Modules/style_apply.cmake\n\n#\n\n# Copyright 2017-2019 Intel Corporation\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n# ******************************************************************************\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tries to locate \"clang-format-5.0\" and then \"clang-format\"\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "util/scripts/check-style.cmake" : {
      "ObjectId" : "c643ae60b567593268413cf974710eadce4645b6",
      "LastModified" : "2019-04-09T00:00:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ******************************************************************************\n\n# Reference:\n\n# https://github.com/NervanaSystems/ngraph/blob/master/cmake/Modules/style_check.cmake\n\n#\n\n# Copyright 2017-2019 Intel Corporation\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n# ******************************************************************************\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tries to locate \"clang-format-5.0\" and then \"clang-format\"\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 4323
}