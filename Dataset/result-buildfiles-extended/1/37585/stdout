{
  "Repository" : "37585",
  "Revision" : "HEAD",
  "ObjectId" : "25521503fcce40fba3a6ad742c521e4f673e41fb",
  "CommitTime" : "2019-03-25T15:52:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "5447adec75ad214a4cf78b40f5b8a794590eb4f8",
      "LastModified" : "2018-02-21T10:10:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# project name\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# project version\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common compiler flags\n\n# These are defined for clang/gcc compatibility.\n\n# When non-compatible flags are implemented then we must specify them separately.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add module path\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Put the libaries and binaries that get built into directories at the\n\n# top of the build tree rather than in hard-to-find leaf\n\n# directories. This simplifies manual testing and the use of the build\n\n# tree rather than installed Boost libraries.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# configure include dir\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# https://cmake.org/Wiki/CMake_RPATH_handling\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# contains the full path to the top level directory of your build tree\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# contains the full path to the root of your project source directory,\n\n# i.e. to the nearest directory where CMakeLists.txt contains the PROJECT() command\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Basic CPack configuration\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tell CPack all of the components to install. The \"ALL\"\n\n# refers to the fact that this is the set of components that\n\n# will be included when CPack is instructed to put everything\n\n# into the binary installer (the default behavior).\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set the displayed names for each of the components to install.\n\n# These will be displayed in the list of components inside the installer.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Provide descriptions for each of the components to install.\n\n# When the user hovers the mouse over the name of a component,\n\n# the description will be shown in the \"Description\" box in the\n\n# installer. If no descriptions are provided, the \"Description\"\n\n# box will be removed.\n\n#SET(CPACK_COMPONENT_APPLICATIONS_DESCRIPTION\n\n#  \"Store all your objects in one container.\")\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Put the components into two different groups: \"Runtime\" and \"Development\"\n\n#SET(CPACK_COMPONENT_APPLICATIONS_GROUP \"Runtime\")\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Expand the \"Development\" group by default, since we have so few components.\n\n# Also, provide this group with a description.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# It doesn't make sense to install the headers without the libraries\n\n# (because you could never use the headers!), so make the headers component\n\n# depend on the libraries component.\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create two installation types with pre-selected components.\n\n# The \"Developer\" installation has just the library and headers,\n\n# while the \"Full\" installation has everything.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#SET(CPACK_COMPONENT_APPLICATIONS_INSTALL_TYPES Full)\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Debian package settings\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${CMAKE_SOURCE_DIR}/packaging/postinst;\")\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# RPM package settings\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Include CPack to introduce the appropriate targets\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "ee0ca395d30034035d54e25d050802d849dc5d55",
      "LastModified" : "2016-08-26T09:16:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage: \n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#  \n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors. \n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _sourcedir      The directory of sources where lcov should be run\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fifth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 76,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 80,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Setup target\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Run tests\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 101,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 107,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 118,
        "CharPositionInLine" : 9
      },
      "17" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 122,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 141,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 22
    },
    "cmake/CreateArchLinuxPackage.cmake" : {
      "ObjectId" : "8f76041fff52f7d48f29cc99b3b96c3f3c22c672",
      "LastModified" : "2018-01-05T14:16:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create tmp/pkg dir in build dir\n\n# mkdir -p tmp/pkg/usr/local\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create .PKGINFO file\n\n# fill .PKGBUILD file with infos\n\n# pkgname = matador\n\n# pkgver = 0.5.0-1\n\n# builddate = 1323390194\n\n# pkgdesc = Matador - take your database by the horns\n\n# url = https://zussel.github.io/matador\n\n# packager = manual\n\n# arch = x86_64\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# copy lib to tmp install dir\n\n# cp -P -r $BUILD_ROOT/lib usr/local\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cp include to tmp install dir\n\n# cp -r $SRC_ROOT/include usr/local\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# correct version.hpp.in\n\n# rm usr/local/include/matador/version.hpp.in\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# cp $BUILD_ROOT/version.hpp usr/local/include/matador\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# create archive\n\n# tar -cf - .PKGINFO * | xz -c -z - > ../matador-0.5.0-1.pkg.tar.xz\n\n# cp ../matador-0.5.0-1.pkg.tar.xz $SRC_ROOT/Package\n\n# cp archive to Package dir\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# delete tmp dir recursive\n\n# rm -rf tmp\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/FindMatador.cmake" : {
      "ObjectId" : "da04e3cf97d0cf093eba95f63a412534ac5ac1b4",
      "LastModified" : "2018-01-03T13:33:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MATADOR\n\n# Find the MATADOR includes and client library\n\n# This module defines\n\n#  MATADOR_INCLUDE_DIR, where to find matador/object/object_store.hpp\n\n#  MATADOR_LIBRARIES, the libraries needed to use MATADOR.\n\n#  MATADOR_FOUND, If false, do not try to use MATADOR.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMatadorBackendMSSQL.cmake" : {
      "ObjectId" : "54ecd7f074880560820f91799b71f8cd76b72131",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find MATADOR Backend MSSQL\n\n# Find the MATADOR MSSQL backend library\n\n# This module defines\n\n#  MATADOR_BACKEND_MSSQL_LIBRARY, the library needed to use MATADOR with MSSQL.\n\n#  MATADOR_BACKEND_MSSQL_FOUND, If false, do not try to use MATADOR.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMatadorBackendMySQL.cmake" : {
      "ObjectId" : "9c1beb1ff6143adf9b0ede80316bf527a3672284",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find MATADOR Backend MySQL\n\n# Find the MATADOR MySQL backend library\n\n# This module defines\n\n#  MATADOR_BACKEND_MYSQL_LIBRARY, the library needed to use MATADOR with MySQL.\n\n#  MATADOR_BACKEND_MYSQL_FOUND, If false, do not try to use MATADOR.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMatadorBackendSQLite.cmake" : {
      "ObjectId" : "e55c01bb2997acd16bbd67085188c8f3fa5b510d",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find MATADOR Backend SQLite\n\n# Find the MATADOR sqlite backend library\n\n# This module defines\n\n#  MATADOR_BACKEND_SQLITE_LIBRARY, the library needed to use MATADOR with sqlite.\n\n#  MATADOR_BACKEND_SQLITE_FOUND, If false, do not try to use MATADOR.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMySQL.cmake" : {
      "ObjectId" : "103e687493587bebfebc7a32e14b0e7714fee36b",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mysqlclient\n\n# Find the native MySQL includes and library\n\n#\n\n#  MYSQL_INCLUDE_DIR - where to find mysql.h, etc.\n\n#  MYSQL_LIBRARIES   - List of libraries when using MySQL.\n\n#  MYSQL_FOUND       - True if MySQL found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# path suffix for debug/release mode\n\n# binary_dist: mysql binary distribution\n\n# build_dist: custom build\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindODBC.cmake" : {
      "ObjectId" : "1309c1de2926e075c82466c7895bedeeb9a77836",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# Find the ODBC driver manager includes and library.\n\n# \n\n# ODBC is an open standard for connecting to different databases in a\n\n# semi-vendor-independent fashion.  First you install the ODBC driver\n\n# manager.  Then you need a driver for each separate sql you want\n\n# to connect to (unless a generic one works).  VTK includes neither\n\n# the driver manager nor the vendor-specific drivers: you have to find\n\n# those yourself.\n\n#  \n\n# This module defines\n\n# ODBC_INCLUDE_DIRECTORIES, where to find sql.h\n\n# ODBC_LIBRARIES, the libraries to link against to use ODBC\n\n# ODBC_FOUND.  If false, you cannot build anything that requires MySQL.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# also defined, but not for general use is\n\n# ODBC_LIBRARY, where to find the ODBC driver manager library.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# msvc knows where to find sdk libs\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/FindSQLite3.cmake" : {
      "ObjectId" : "0b0093b3a0acd7f727fa121eef31b35c556f2a8b",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find SQLite3\n\n# Once done this will define\n\n#  SQLITE3_FOUND - System has SQLite3\n\n#  SQLITE3_INCLUDE_DIR - The SQLite3 include directories\n\n#  SQLITE3_LIBRARY - The libraries needed to use SQLite3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "87f64da0b2c4690bd3380fa321f3e787a249958c",
      "LastModified" : "2018-02-26T14:24:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure the Template Doxyfile for our specific project\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Add a custom target to run Doxygen when ever the project is built\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e9ceb71b387604eb8122b32cc1e628bf5d3af36c",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/db/CMakeLists.txt" : {
      "ObjectId" : "989a3728c138f6012b591e0fd176ca586c702e14",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/db/mssql/CMakeLists.txt" : {
      "ObjectId" : "2225a644b4d0ed66255dda0fead983c1808da5cb",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/db/mysql/CMakeLists.txt" : {
      "ObjectId" : "be8d98e95c9a3c7c9b9edab3ecdf32b536eb5d17",
      "LastModified" : "2018-11-11T20:19:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/db/sqlite/CMakeLists.txt" : {
      "ObjectId" : "00aeeaaaf8ef8136ff5b2ad03b53739cbf90e1f9",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/object/CMakeLists.txt" : {
      "ObjectId" : "1f4947fa4e12e855a94ad8620ced499a49168deb",
      "LastModified" : "2018-11-11T20:19:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/orm/CMakeLists.txt" : {
      "ObjectId" : "3113da697bc3153b53c5f0d32051a335afabac44",
      "LastModified" : "2018-11-11T20:19:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/sql/CMakeLists.txt" : {
      "ObjectId" : "8118a56aaa1103daac467e0cbca0e4c262000909",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/unit/CMakeLists.txt" : {
      "ObjectId" : "acd06564a49d3875449efc31f8fd8539914af934",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/utils/CMakeLists.txt" : {
      "ObjectId" : "58a37c6ef541fea71e06a0d9e486964d18ca5151",
      "LastModified" : "2018-01-03T13:33:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build version (VERSION) and the API version (SOVERSION)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "52bd6d7497294053ea5357e238514c6d75e0bc8e",
      "LastModified" : "2018-11-11T20:19:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  unit/FirstTestUnit.hpp\n\n#  unit/SecondTestUnit.hpp\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  SET(MSSQL_CONNECTION_STRING \"mssql://sascha:sascha@192.168.178.31\\\\\\\\SQLEXPRESS/test_matador (FreeTDS)\" CACHE STRING \"mssql connection string\")\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Group source files for IDE source explorers (e.g. Visual Studio)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 22
  },
  "ElapsedTime" : 1905
}