{
  "Repository" : "18578451",
  "Revision" : "HEAD",
  "ObjectId" : "d563145f062336fe731fe7d4182ed9598f8bcd64",
  "CommitTime" : "2019-04-17T00:00:03Z",
  "Files" : {
    "java/build.xml" : {
      "ObjectId" : "d76f6923d14d743b381f2c1872f5c7add03dde3f",
      "LastModified" : "2018-10-01T21:25:16Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Build file for genome.ucsc.edu QA library directory ",
        "Line" : 2,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : " directories ",
        "Line" : 7,
        "CharPositionInLine" : 29
      },
      "2" : {
        "Text" : " N.B. use MACHTYPE due since scripts ref files that maybe in diff locations on diff OSs ",
        "Line" : 9,
        "CharPositionInLine" : 104
      },
      "3" : {
        "Text" : " compile props ",
        "Line" : 16,
        "CharPositionInLine" : 31
      },
      "4" : {
        "Text" : " javadoc props ",
        "Line" : 23,
        "CharPositionInLine" : 31
      },
      "5" : {
        "Text" : " classpath fun ",
        "Line" : 27,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : " target to generate a run script for one of the program classes.\n     -   call with `progPkg parameter set to package name and 'progClass'\n     -   set to the class name, which is also the name of the of the \n     -   wrapper to generate  ",
        "Line" : 190,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : " rebuild if template or build.xml changes ",
        "Line" : 197,
        "CharPositionInLine" : 62
      },
      "8" : {
        "Text" : " should be able specify a filterset inside of the copy\n          -  instead of seperately, however this didn't work\n          -  in ant 1.5.4 ",
        "Line" : 205,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 9
    },
    "java/src/edu/ucsc/genome/qa/lib/build.xml" : {
      "ObjectId" : "8e2a4a4bdd1ade3868845b00d91b20931e2700bc",
      "LastModified" : "2004-02-21T04:44:28Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Build file for genome.ucsc.edu QA library directory ",
        "Line" : 2,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 1
    },
    "src/hg/zoo/analyze4d/Makefile" : {
      "ObjectId" : "266b9b93f502e62254ffbaa7a5508bd0d8622a49",
      "LastModified" : "2018-10-01T21:25:16Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/hg/zoo/transitivityCheck/Makefile" : {
      "ObjectId" : "2abf9115938f05a5e6cc5465337a1cf88f12ebaa",
      "LastModified" : "2018-10-01T21:25:16Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/htslib/Makefile" : {
      "ObjectId" : "ea5ab04e52fb754a42613cb726276ef923bb1bd6",
      "LastModified" : "2018-10-01T21:25:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for htslib, a C library for high-throughput sequencing data formats.\n\n#\n\n#    Copyright (C) 2013-2015 Genome Research Ltd.\n\n#\n\n#    Author: John Marshall <jm18@sanger.ac.uk>\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CC     = gcc -p\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: probably update cram code to make it compile cleanly with -Wc++-compat\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For now these don't work too well as samtools also needs to know to\n\n# add -lbz2 and -llzma if linking against the static libhts.a library.\n\n# TODO This needs configury and adding to htslib.pc.in.\n\n#\n\n# # Bzip2 support; optionally used by CRAM.\n\n# HAVE_LIBBZ2 := $(shell echo -e \"\\#include <bzlib.h>\\012int main(void){return 0;}\" > .test.c && $(CC) $(CFLAGS) $(CPPFLAGS) -o .test .test.c -lbz2 2>/dev/null && echo yes)\n\n# ifeq \"$(HAVE_LIBBZ2)\" \"yes\"\n\n# CPPFLAGS += -DHAVE_LIBBZ2\n\n# LIBS     += -lbz2\n\n# endif\n\n#\n\n# # Lzma support; optionally used by CRAM.\n\n# HAVE_LIBLZMA := $(shell echo -e \"\\#include <lzma.h>\\012int main(void){return 0;}\" > .test.c && $(CC) $(CFLAGS) $(CPPFLAGS) -o .test .test.c -llzma 2>/dev/null && echo yes)\n\n# ifeq \"$(HAVE_LIBLZMA)\" \"yes\"\n\n# CPPFLAGS += -DHAVE_LIBLZMA\n\n# LIBS     += -llzma\n\n# endif\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set by config.mk if plugins are enabled\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#all: lib-static lib-shared $(BUILT_PROGRAMS) plugins $(BUILT_TEST_PROGRAMS)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# $(NUMERIC_VERSION) is for items that must have a numeric X.Y.Z string\n\n# even if this is a dirty or untagged Git working tree.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If building from a Git repository, replace $(PACKAGE_VERSION) with the Git\n\n# description of the working tree: either a release tag with the same value\n\n# as $(PACKAGE_VERSION) above, or an exact description likely based on a tag.\n\n# Much of this is also GNU Make-specific.  If you don't have GNU Make and/or\n\n# are not building from a Git repository, comment out this conditional.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Unless the Git description matches /\\d*\\.\\d*(\\.\\d*)?/, i.e., is exactly a tag\n\n# with a numeric name, revert $(NUMERIC_VERSION) to the original version number\n\n# written above, but with the patchlevel field bumped to 255.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Force version.h to be remade if $(PACKAGE_VERSION) has changed.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# To be effective, config.mk needs to appear after most Makefile variables are\n\n# set but before most rules appear, so that it can both use previously-set\n\n# variables in its own rules' prerequisites and also update variables for use\n\n# in later rules' prerequisites.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If your make doesn't accept -include, change this to 'include' if you are\n\n# using the configure script or just comment the line out if you are not.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually config.h is generated by running configure or config.status,\n\n# but if those aren't used create a default config.h here.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# $(shell), :=, and ifeq/.../endif are GNU Make-specific.  If you don't have\n\n# GNU Make, comment out the parts of this conditional that don't apply.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The target here is libhts.so, as that is the built file that other rules\n\n# depend upon and that is used when -lhts appears in other program's recipes.\n\n# As a byproduct invisible to make, libhts.so.NN is also created, as it is the\n\n# file used at runtime (when $LD_LIBRARY_PATH includes the build directory).\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Similarly this also creates libhts.NN.dylib as a byproduct, so that programs\n\n# when run can find this uninstalled shared library (when $DYLD_LIBRARY_PATH\n\n# includes this project's build directory).\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# For tests that might use it, set $REF_PATH explicitly to use only reference\n\n# areas within the test suite (or set it to ':' to use no reference areas).\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# After installation, the real file in $(libdir) will be libhts.so.X.Y.Z,\n\n# with symlinks libhts.so (used via -lhts during linking of client programs)\n\n# and libhts.so.NN (used by client executables at runtime).\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Substitute these pseudo-autoconf variables only at install time\n\n# so that \"make install prefix=/prefix/path\" etc continue to work.\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# A pkg-config file (suitable for copying to $PKG_CONFIG_PATH) that provides\n\n# flags for building against the uninstalled library in this build directory.\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#g;s#@libdir@#'`pwd`'#g' htslib.pc.in > $@\n",
        "Line" : 385,
        "CharPositionInLine" : 31
      },
      "21" : {
        "Text" : "# We recommend libhts-using programs be built against a separate htslib\n\n# installation.  However if you feel that you must bundle htslib source\n\n# code with your program, this hook enables Automake-style \"make dist\"\n\n# for this subdirectory.  If you do bundle an htslib snapshot, please\n\n# add identifying information to $(PACKAGE_VERSION) as appropriate.\n\n# (The wildcards attempt to omit non-exported files (.git*, README.md,\n\n# etc) and other detritus that might be in the top-level directory.)\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/userApps/Makefile" : {
      "ObjectId" : "d7d6c410d27693cd8e05ae96cf8fa6f24cccfed2",
      "LastModified" : "2018-10-01T21:25:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#  Makefile for userApps project\n\n#  performs the operations of fetching selected directories from\n\n#  the kent source tree using 'git' and then building the utilities\n\n#  in the kent source tree.  All build results will be kept locally\n\n#  in this directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this installEnvironment will add all the shell environment variables\n\n# to the kent/src/inc/localEnvironment.mk file which is included\n\n# from the kent/src/inc/userApps.mk to allow any 'make' to function\n\n# properly when inside this extracted source tree.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 4,
    "ANT" : 2
  },
  "ElapsedTime" : 23528
}