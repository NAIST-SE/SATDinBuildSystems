{
  "Repository" : "29155512",
  "Revision" : "HEAD",
  "ObjectId" : "db3f0e4162774da7203d2561eca2befb03e8ab7f",
  "CommitTime" : "2017-11-05T17:55:35Z",
  "Files" : {
    "libs/linux/SDL/include/SDL_config.h.cmake" : {
      "ObjectId" : "c57266c413081c253f3e5526e025e3cb8d1bf53c",
      "LastModified" : "2017-10-18T02:07:27Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2017 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable Vulkan support */",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system power support */",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Enable dynamic libsamplerate support */",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "libs/windows/SDL/include/SDL_config.h.cmake" : {
      "ObjectId" : "c57266c413081c253f3e5526e025e3cb8d1bf53c",
      "LastModified" : "2017-10-18T02:07:27Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2017 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable Vulkan support */",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system power support */",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Enable dynamic libsamplerate support */",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b99c9bfcd18103b1d8676ac02c707b26c2dce61e",
      "LastModified" : "2017-11-04T03:03:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get the current compilation architecture\n\n# From : https://github.com/tcbrindle/sdl2-cmake-scripts/blob/master/FindSDL2.cmake\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\n",
        "Line" : 98,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\n",
        "Line" : 110,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Doesn't seem to work\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#       HINTS \"../libs/linux/SDL/lib/x86\"\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#       HINTS \"../libs/linux/SDL_Image/lib/x86\"\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#       HINTS \"../libs/linux/SDL_ttf/lib/x86\"\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Engine\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Blackjack\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#PuzzleGame\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#FantasyGame\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Copy dependencies DLL\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#SDL2.dll\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#SDL2_Image.dll\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#libjpeg-9.dll\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#libpng16-16.dll\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#libtiff-5.dll\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#libwebp-4.dll\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#SDL2_ttf.dll\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#libfreetype-6.dll\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#zlib1.dll\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "src/cmake/Emscripten.cmake" : {
      "ObjectId" : "b53cc713d70ce6e5776ed7a800d4ed9fa2f5ec39",
      "LastModified" : "2017-10-18T02:07:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is a 'toolchain description file' for CMake.\n\n# It teaches CMake about the Emscripten compiler, so that CMake can generate makefiles\n\n# from CMakeLists.txt that invoke emcc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Since updating to LLVM 3.9, its build system requires CMake 3.4.3 or newer, so use this as a\n\n# baseline requirement for Emscripten toolchain as well, as developers will have this version or\n\n# they would have been unable to build LLVM in the first place.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To use this toolchain file with CMake, invoke CMake with the following command line parameters\n\n# cmake -DCMAKE_TOOLCHAIN_FILE=<EmscriptenRoot>/cmake/Modules/Platform/Emscripten.cmake\n\n#       -DCMAKE_BUILD_TYPE=<Debug|RelWithDebInfo|Release|MinSizeRel>\n\n#       -G \"Unix Makefiles\" (Linux and OSX)\n\n#       -G \"MinGW Makefiles\" (Windows)\n\n#       <path/to/CMakeLists.txt> # Note, pass in here ONLY the path to the file, not the filename 'CMakeLists.txt' itself.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# After that, build the generated Makefile with the command 'make'. On Windows, you may download and use 'mingw32-make' instead.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The following variable describes the target OS we are building to.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Advertise Emscripten as a 32-bit platform (as opposed to CMAKE_SYSTEM_PROCESSOR=x86_64 for 64-bit platform),\n\n# since some projects (e.g. OpenCV) use this to detect bitness.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Tell CMake how it should instruct the compiler to generate multiple versions of an outputted .so library: e.g. \"libfoo.so, libfoo.so.1, libfoo.so.1.4\" etc.\n\n# This feature is activated if a shared library project has the property SOVERSION defined.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In CMake, CMAKE_HOST_WIN32 is set when we are cross-compiling from Win32 to Emscripten: http://www.cmake.org/cmake/help/v2.8.12/cmake.html#variable:CMAKE_HOST_WIN32\n\n# The variable WIN32 is set only when the target arch that will run the code will be WIN32, so unset WIN32 when cross-compiling.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The same logic as above applies for APPLE and CMAKE_HOST_APPLE, so unset APPLE.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# And for UNIX and CMAKE_HOST_UNIX. However, Emscripten is often able to mimic being a Linux/Unix system, in which case a lot of existing CMakeLists.txt files can be configured for Emscripten while assuming UNIX build, so this is left enabled.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Do a no-op access on the CMAKE_TOOLCHAIN_FILE variable so that CMake will not issue a warning on it being unused.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# In order for check_function_exists() detection to work, we must signal it to pass an additional flag, which causes the compilation\n\n# to abort if linking results in any undefined symbols. The CMake detection mechanism depends on the undefined symbol error to be raised.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Locate where the Emscripten compiler resides in relative to this toolchain file.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If not found by above search, locate using the EMSCRIPTEN environment variable.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Abort if not found. \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Normalize, convert Windows backslashes to forward slashes or CMake will crash.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Specify the compilers to use for C and C++\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Don't allow CMake to autodetect the compiler, since it does not understand Emscripten.\n\n# Pass -DEMSCRIPTEN_FORCE_COMPILERS=OFF to disable (sensible mostly only for testing/debugging purposes).\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Detect version of the 'emcc' executable. Note that for CMake, we tell it the version of the Clang compiler and not the version of Emscripten,\n\n# because CMake understands Clang better.\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Toolchain script is interpreted multiple times, so don't rerun the check if already done before.\n",
        "Line" : 105,
        "CharPositionInLine" : 35
      },
      "20" : {
        "Text" : "# To find programs to execute during CMake run time with find_program(), e.g. 'git' or so, we allow looking\n\n# into system paths.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Since Emscripten is a cross-compiler, we should never look at the system-provided directories like /usr/include and so on.\n\n# Therefore only CMAKE_FIND_ROOT_PATH should be used as a find directory. See http://www.cmake.org/cmake/help/v3.0/variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.html\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We would prefer to specify a standard set of Clang+Emscripten-friendly common convention for suffix files, especially for CMake executable files,\n\n# but if these are adjusted, ${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake will fail, since it depends on being able to compile output files with predefined names.\n\n#SET(CMAKE_LINK_LIBRARY_SUFFIX \"\")\n\n#SET(CMAKE_STATIC_LIBRARY_PREFIX \"\")\n\n#SET(CMAKE_SHARED_LIBRARY_PREFIX \"\")\n\n#SET(CMAKE_FIND_LIBRARY_PREFIXES \"\")\n\n#SET(CMAKE_FIND_LIBRARY_SUFFIXES \".bc\")\n\n#SET(CMAKE_SHARED_LIBRARY_SUFFIX \".bc\")\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Specify the program to use when building static libraries. Force Emscripten-related command line options to clang.\n",
        "Line" : 179,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Set a global EMSCRIPTEN variable that can be used in client CMakeLists.txt to detect when building using Emscripten.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Hardwire support for cmake-2.8/Modules/CMakeBackwardsCompatibilityC.cmake without having CMake to try complex things\n\n# to autodetect these:\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# A global counter to guarantee unique names for js library files.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Internal function: Do not call from user CMakeLists.txt files. Use one of em_link_js_library()/em_link_pre_js()/em_link_post_js() instead.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# User can input list of JS files either as a single list, or as variable arguments to this function, so iterate over varargs, and treat each\n\n# item in varargs as a list itself, to support both syntax forms.\n",
        "Line" : 248,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# If the user edits the JS file, we want to relink the emscripten application, but unfortunately it is not possible to make a link step\n\n# depend directly on a source file. Instead, we must make a dummy no-op build target on that source file, and make the project depend on\n\n# that target.\n",
        "Line" : 252,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# Sanitate the source .js filename to a good symbol name to use as a dummy filename.\n",
        "Line" : 256,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "# Create a new static library target that with a single dummy .c file.\n",
        "Line" : 262,
        "CharPositionInLine" : 3
      },
      "32" : {
        "Text" : "# Make the dummy .c file depend on the .js file we are linking, so that if the .js file is edited, the dummy .c file, and hence the static library will be rebuild (no-op). This causes the main application to be relinked, which is what we want.\n\n# This approach was recommended by http://www.cmake.org/pipermail/cmake/2010-May/037206.html\n",
        "Line" : 264,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Link the js-library to the target\n\n# When a linked library starts with a \"-\" cmake will just add it to the linker command line as it is.\n\n# The advantage of doing it this way is that the js-library will also be automatically linked to targets\n\n# that depend on this target.\n",
        "Line" : 269,
        "CharPositionInLine" : 3
      },
      "34" : {
        "Text" : "# This function links a (list of ) .js library file(s) to the given CMake project.\n\n# Example: em_link_js_library(my_executable \"lib1.js\" \"lib2.js\")\n\n#    will result in emcc passing --js-library lib1.js --js-library lib2.js to the emscripten linker, as well as\n\n#    tracking the modification timestamp between the linked .js files and the main project, so that editing the .js file\n\n#    will cause the target project to be relinked.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# This function is identical to em_link_js_library(), except the .js files will be added with '--pre-js file.js' command line flag,\n\n# which is generally used to add some preamble .js code to a generated output file.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# This function is identical to em_link_js_library(), except the .js files will be added with '--post-js file.js' command line flag,\n\n# which is generally used to add some postamble .js code to a generated output file.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Experimental support for targeting generation of Visual Studio project files (vs-tool) of Emscripten projects for Windows.\n\n# To use this, pass the combination -G \"Visual Studio 10\" -DCMAKE_TOOLCHAIN_FILE=Emscripten.cmake\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# By default, CMake generates VS project files with a <GenerateManifest>true</GenerateManifest> directive.\n\n# This causes VS to attempt to invoke rc.exe during the build, which will fail since app manifests are meaningless for Emscripten.\n\n# To disable this, add the following linker flag. This flag will not go to emcc, since the Visual Studio CMake generator will swallow it.\n",
        "Line" : 305,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# CMake is hardcoded to write a ClCompile directive <ObjectFileName>$(IntDir)</ObjectFileName> in all VS project files it generates.\n\n# This makes VS pass emcc a -o param that points to a directory instead of a file, which causes emcc autogenerate the output filename.\n\n# CMake is hardcoded to assume all object files have the suffix .obj, so adjust the emcc-autogenerated default suffix name to match.\n",
        "Line" : 309,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Also hint CMake that it should not hardcode <ObjectFileName> generation. Requires a custom CMake build for this to work (ignored on others)\n\n# See http://www.cmake.org/Bug/view.php?id=14673 and https://github.com/juj/CMake\n",
        "Line" : 313,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Apply and cache Emscripten Visual Studio IDE-specific linker flags.\n",
        "Line" : 317,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# No-op on CMAKE_CROSSCOMPILING_EMULATOR so older versions of cmake do not\n\n# complain about unused CMake variable.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    }
  },
  "FileTypes" : {
    "CMAKE" : 2,
    "CMAKESOURCE" : 2
  },
  "ElapsedTime" : 1381
}