{
  "Repository" : "20825158",
  "Revision" : "HEAD",
  "ObjectId" : "3f95e54f076308d6885071a21ae71eb2123771d2",
  "CommitTime" : "2019-03-07T15:13:42Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "61cd602a13f452212f38248c4cabffb5cccc847a",
      "LastModified" : "2019-03-04T14:56:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n##  Copyright (C) - Triton\n\n##\n\n##  This program is under the terms of the BSD License.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################################### CMake libtriton\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define cmake options\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Enable ctest\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Special handling of Linux test to check if pin can be attached on other binaries.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Defaut build type as Release\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Specific OSX POLICY\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# report Apple's Clang as just Clang\n",
        "Line" : 88,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "# MACOSX_RPATH\n",
        "Line" : 91,
        "CharPositionInLine" : 38
      },
      "9" : {
        "Text" : "# Get architecture\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Triton version\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Get and increment the build number\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Read the build version\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Custom cmake search\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Find Python 2.7\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Find Z3\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find Capstone\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find boost\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Use the same ABI as pin\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add triton includes for every project\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "CMakeModules/FindCAPSTONE.cmake" : {
      "ObjectId" : "70fe349a920d0a84b2b8b87c79e4e10af4db3d08",
      "LastModified" : "2016-01-18T10:20:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find CAPSTONE\n\n# Once done, this will define\n\n#\n\n#  CAPSTONE_FOUND - system has CAPSTONE\n\n#  CAPSTONE_INCLUDE_DIRS - the CAPSTONE include directories\n\n#  CAPSTONE_LIBRARIES - link these to use CAPSTONE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n\n# libfind_package(CAPSTONE capstone)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n\n# libfind_pkg_check_modules(CAPSTONE_PKGCONF capstone)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindZ3.cmake" : {
      "ObjectId" : "4920a748c9413f1e3bbd861085503a1f8e9baa10",
      "LastModified" : "2016-01-18T10:20:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Z3\n\n# Once done, this will define\n\n#\n\n#  Z3_FOUND - system has Z3\n\n#  Z3_INCLUDE_DIRS - the Z3 include directories\n\n#  Z3_LIBRARIES - link these to use Z3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n\n# libfind_package(Z3 z3)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n\n# libfind_pkg_check_modules(Z3_PKGCONF z3)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMakeModules/LibFindMacros.cmake" : {
      "ObjectId" : "78fd5f38d68f85a6d1e251bd256b4e3bd1231531",
      "LastModified" : "2018-07-30T09:33:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "38281bbb059edd8d66fa40998fcccf627bb873aa",
      "LastModified" : "2019-02-27T17:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n##  Copyright (C) - Triton\n\n##\n\n##  This program is under the terms of the BSD License.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################################### CMake libtriton\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# replace backlsash with forwardslash to not generate an error on windows\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "d07ca58b97ea56dd4c655f32b9be19b998e1b0e7",
      "LastModified" : "2018-07-30T09:33:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable exemples for windows as linkage doesn't work. Exported function should\n\n# be marked as exported on windows.\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/examples/CMakeLists.txt" : {
      "ObjectId" : "2322a85f776c2327f65a6be80fd4e21df4814cd7",
      "LastModified" : "2018-07-30T09:33:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/examples/cpp/CMakeLists.txt" : {
      "ObjectId" : "8a6a5b6d7cb6e35c3aa58082e9d88cb7c1a944bb",
      "LastModified" : "2018-07-30T09:33:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/examples/cpp/Makefile" : {
      "ObjectId" : "b2f4e32a534a30d820a5fb969e8fd4dbae815774",
      "LastModified" : "2018-10-16T09:54:16Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/libtriton/CMakeLists.txt" : {
      "ObjectId" : "58ffbdf98c2f5590a0c927763dd3323f5e830bc0",
      "LastModified" : "2019-03-07T15:13:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define if the library will be STATIC or DYNAMIC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default flags\n\n# To fix old python version bug http://bugs.python.org/issue21958\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Global UNIX CXX Flags\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Flags\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-mismatched-tags\")\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Disable fall-through warnings\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Really?\n",
        "Line" : 44,
        "CharPositionInLine" : 97
      },
      "7" : {
        "Text" : "# 32-bits\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add Triton includes\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Define all source files\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Triton have to generate a syscalls table from the kernel source\n\n# This following code tries to find the unistd_64.h or unistd_32.h header depending on the architecture.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create syscall generted file directory\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the unistd_64.h or syscall.h is not found, we exit\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# We generate the syscalls${bits}.cpp from the unistd_${bits}.h or syscall.h.\n\n# Added python after COMMAND since to be sure that if ${CMAKE_SOURCE_DIR}/src/scripts/extract_syscall.py doesn't have X rights it gets executed\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Note: Windows ?!\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Syscall 32 is only available for linux users\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We generate the version numbers information\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Define gloabl shared linker flags\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Special cases for MinGW\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Define library's properties\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Link Triton's dependencies\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add the install targets\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Install Python bindings\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "src/testers/CMakeLists.txt" : {
      "ObjectId" : "6fb7b975ba612c18f404dfe088f6ee37d743a4d1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pintool\n\n# FIXME: python3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FAIL\n",
        "Line" : 11,
        "CharPositionInLine" : 248
      },
      "2" : {
        "Text" : "# WIN OR FAIL, DUNNO\n",
        "Line" : 12,
        "CharPositionInLine" : 284
      },
      "3" : {
        "Text" : "# WIN OR FAIL, DUNNO\n",
        "Line" : 13,
        "CharPositionInLine" : 258
      },
      "4" : {
        "Text" : "# WIN OR FAIL, DUNNO\n",
        "Line" : 14,
        "CharPositionInLine" : 250
      },
      "5" : {
        "Text" : "# FAIL\n",
        "Line" : 15,
        "CharPositionInLine" : 255
      },
      "6" : {
        "Text" : "# WIN\n",
        "Line" : 16,
        "CharPositionInLine" : 248
      },
      "7" : {
        "Text" : "# FAIL, nuber of line change...\n",
        "Line" : 17,
        "CharPositionInLine" : 271
      },
      "8" : {
        "Text" : "# FAIL\n",
        "Line" : 18,
        "CharPositionInLine" : 266
      },
      "9" : {
        "Text" : "# WiIN OR FAIL, DUNNO\n",
        "Line" : 20,
        "CharPositionInLine" : 248
      },
      "10" : {
        "Text" : "# WIN\n",
        "Line" : 21,
        "CharPositionInLine" : 277
      },
      "11" : {
        "Text" : "# WIN\n",
        "Line" : 22,
        "CharPositionInLine" : 278
      },
      "12" : {
        "Text" : "# FAIL\n",
        "Line" : 23,
        "CharPositionInLine" : 262
      },
      "13" : {
        "Text" : "# FAIL\n",
        "Line" : 25,
        "CharPositionInLine" : 241
      },
      "14" : {
        "Text" : "# FAIL\n",
        "Line" : 26,
        "CharPositionInLine" : 258
      },
      "15" : {
        "Text" : "# WIN\n",
        "Line" : 27,
        "CharPositionInLine" : 259
      },
      "16" : {
        "Text" : "# WIN OR FAIL, DUNNO\n",
        "Line" : 28,
        "CharPositionInLine" : 252
      },
      "17" : {
        "Text" : "# Misc\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/tracer/CMakeLists.txt" : {
      "ObjectId" : "4f055b94ce57d5427b879ce581eb5507f70bff7d",
      "LastModified" : "2018-07-30T09:33:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tracer/pin/CMakeLists.txt" : {
      "ObjectId" : "67ddef1991ba0ba85985b9f1aab68593cfcc7e24",
      "LastModified" : "2018-07-30T09:33:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################### CMake libpintool\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Root directory of the Pin toolkit\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Specific Linux CXX Flags\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Specific OSX CXX Flags\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Specific Windows CXX Flags\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Global UNIX CXX Flags\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Includes directories (Pin)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Libs directories (Pin)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Pintool source files\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generate the triton's shortcut script\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Pin flag for kernel 4.x\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate Triton pintool script\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2763
}