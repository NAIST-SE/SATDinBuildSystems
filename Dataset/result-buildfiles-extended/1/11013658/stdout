{
  "Repository" : "11013658",
  "Revision" : "HEAD",
  "ObjectId" : "9b91290408e8f97ad986817e8b548dc7d9471ff5",
  "CommitTime" : "2019-02-22T00:40:24Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "5e3a465cd6dbb668aec9a1c429682b247bbf5ead",
      "LastModified" : "2019-01-05T01:06:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for Speech Rule Engine\n\n# Copyright 2014-2016, Volker Sorge <Volker.Sorge@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nodejs location.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ideally, no changes necessary beyond this point!\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## $(foreach dir, $(MAPS), $(JSON_SRC)/$(dir))\n",
        "Line" : 37,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "##################################################################\n\n# Error flags.\n\n# Compiling as rigidly as possible.\n\n# (Currently we use automatically all)\n\n##################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# * reportUnknownTypes newCheckTypes\n",
        "Line" : 58,
        "CharPositionInLine" : 631
      },
      "6" : {
        "Text" : "##################################################################\n\n# Extern files.\n\n# (Currently not used as they seem to be included automatically now.)\n\n##################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Node JS modules\n\n# Closure compiler in nodejs.\n\n# Linter in nodejs. \n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n",
        "Line" : 83,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "#######################################################################3\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##################################################################\n\n# Test environment.\n\n##################################################################\n\n# Extern files.\n\n##################################################################\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##################################################################\n\n# Publish the API via npm.\n\n##################################################################\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12,
      "Errorlog" : "line 216:44 token recognition error at: '\": '  >> $(IEMAPS_FILE); \\\\n\\t\\t\\t\\tcat $$i >> $(IEMAPS_FILE); \\\\n\\t\\t\\t\\techo ','  >> $(IEMAPS_FILE); \\\\n\\t\\t\\tdone; \\\\n\\t\\tdone; \\\\n\\tdone\\n\\t@head -n -1 $(IEMAPS_FILE) > $(IEMAPS_FILE).tmp\\n\\t@echo '}\\n' >> $(IEMAPS_FILE).tmp\\n\\t@mv $(IEMAPS_FILE).tmp $(IEMAPS_FILE)\\n\\napi: $(SRC)\\n\\t@echo Compiling Speech Rule Engine API\\n\\t@$(CLOSURE_COMPILER) --entry_point=goog:sre.Api --js_output_file=$(TARGET) $^\\n\\n\\n##################################################################\\n# Other useful targets.\\n##################################################################\\n\\nbrowser: $(SRC)\\n\\t@echo Compiling browser ready Speech Rule Engine\\n\\t@$(CLOSURE_COMPILER) --entry_point=goog:sre.Browser --js_output_file=$(BROWSER) $^\\n\\nclean_browser:\\n\\trm -f $(BROWSER)\\n\\nmathjax: $(SRC)\\n\\t@echo Compiling MathJax ready Speech Rule Engine\\n\\t@$(CLOSURE_COMPILER) --entry_point=goog:sre.Mathjax --js_output_file=$(MATHJAX) $^\\n\\nclean_mathjax:\\n\\trm -f $(MATHJAX)\\n\\nsemantic: $(SRC)\\n\\t@echo Compiling browser ready Semantic Tree API\\n\\t@$(CLOSURE_COMPILER) --entry_point=goog:sre.Semantic --js_output_file=$(SEMANTIC) $^\\n\\nclean_semantic:\\n\\trm -f $(SEMANTIC)\\n\\nsemantic_node: $(SRC)\\n\\t@echo Compiling Semantic Tree API for Node\\n\\t@$(CLOSURE_COMPILER) --entry_point=goog:sre.SemanticApi --js_output_file=$(SEMANTIC_NODE) $^\\n\\nclean_semantic_node:\\n\\trm -f $(SEMANTIC_NODE)\\n\\nenrich: $(SRC)\\n\\t@echo Compiling browser ready MathML Enrichment API\\n\\t@$(CLOSURE_COMPILER) --entry_point=goog:sre.Enrich --js_output_file=$(ENRICH) $^\\n\\nclean_enrich:\\n\\trm -f $(ENRICH)\\n\\nemacs: publish\\n\\t@cp $(TARGET) ../emacs-math-speak/\\n\\ndocs: $(JSDOC)\\n\\t@$(JSDOC) $(JSDOC_FLAGS) $(SRC) -r -d $(DOCS_SRC)\\n\\t@$(JSDOC) $(JSDOC_FLAGS) $(TEST_DIR) -r -d $(DOCS_TESTS)\\n\\nclean_docs:\\n\\trm -rf $(DOCS)\\n\\nclean_iemaps:\\n\\trm -f $(IEMAPS_FILE)\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1439
}