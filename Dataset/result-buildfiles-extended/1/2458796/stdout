{
  "Repository" : "2458796",
  "Revision" : "HEAD",
  "ObjectId" : "e89ab63501853a73638d2bd0cfa4859c720e0acb",
  "CommitTime" : "2019-02-08T15:59:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b6316a60212ceb510fcdd5bd4ad2bf223c1ed876",
      "LastModified" : "2019-01-21T10:54:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#required because of the use of std::unique_ptr\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This changes the behaviour of list() w.r.t. empty elements. Typelib'cmake code\n\n# is compatible with the NEW policy, so just set it to avoid getting a cmake\n\n# warning\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make the clang-based importer optional for now. the option is planned to be\n\n# removed in the future, after using the new importer as default.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make cmake ignore mixed absolute and -l flags for linker.  I don't want to be\n\n# compatible only with 2.6 for now\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#adapt from the old pkgconfig cmake util to the new)\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Makefile" : {
      "ObjectId" : "ad406688f49b8ffd225524b3bb167e2971a73549",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/ruby/CMakeLists.txt" : {
      "ObjectId" : "733c0091ddfb4a6f6cb672261130dd3597750416",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindAntlr.cmake" : {
      "ObjectId" : "e0c279c5b8490e873242f0498e816b7f528ad7ff",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This scripts finds the Antlr parser generator and language-specific configuration\n\n# files as specified by the components field of FIND_PACKAGE. If antlr is available,\n\n# a ADD_ANTLR_GRAMMAR macro is also defined which helps adding Antlr grammars to\n\n# the build (see below)\n\n#\n\n#   FIND_PACKAGE(Antlr COMPONENTS lang1 lang2 ...)\n\n# If Antlr is found, sets Antlr_FOUND to true and defines Antlr_EXECUTABLE as\n\n# the parser generator (the script searches for antlr, cantlr and runantlr)\n\n#\n\n# The following language packages are supported:\n\n#   CPP: C++ language support. It searches for the antlr-config script\n\n#        and defines the related compiler flags, include directories\n\n#        and libraries:\n\n#      Antlr_ANTLR_CONFIG_EXECUTABLE is set to the full path of antlr-config\n\n#      Antlr_CFLAGS is set to the compiler flags and\n\n#      Antlr_LIBRARIES to the runtime library.\n\n#      If a PIC version of the runtime library (suitable to build shared\n\n#      libraries on some Unices) is found, Antlr_PIC_LIBRARIES is set as well.\n\n#\n\n# ADD_ANTLR_GRAMMAR is to be used as follows:\n\n#    ADD_ANTLR_GRAMMAR(mygrammar.g mygrammar_output_files)\n\n#    ADD_EXECUTABLE(${mygrammar_output_files} other_source.c)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Trick: Antlr does not update the output files if they have\n\n# not been changed. This breaks builds with cmake/Makefile since\n\n# the source file keeps an update time > than the output files.\n\n# Fix it by using touch\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/FindBoost.cmake" : {
      "ObjectId" : "e73eaca8ec6730ffeca1a2a4cd00b3c9e9940191",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Boost include dirs and libraries\n\n# Usage of this module as follows:\n\n#\n\n# NOTE: Take note of the Boost_ADDITIONAL_VERSIONS variable below.\n\n# Due to Boost naming conventions and limitations in CMake this find\n\n# module is NOT future safe with respect to Boost version numbers,\n\n# and may break.\n\n#\n\n# == Using Header-Only libraries from within Boost: ==\n\n#\n\n#   find_package( Boost 1.36.0 )\n\n#   if(Boost_FOUND)\n\n#      include_directories(${Boost_INCLUDE_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n#\n\n# == Using actual libraries from within Boost: ==\n\n#\n\n#   set(Boost_USE_STATIC_LIBS   ON)\n\n#   set(Boost_USE_MULTITHREADED ON)\n\n#   find_package( Boost 1.36.0 COMPONENTS date_time filesystem system ... )\n\n#\n\n#   if(Boost_FOUND)\n\n#      include_directories(${Boost_INCLUDE_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#      target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n#\n\n# The components list needs to contain actual names of boost libraries only,\n\n# such as \"date_time\" for \"libboost_date_time\".  If you're using parts of\n\n# Boost that contain header files only (e.g. foreach) you do not need to\n\n# specify COMPONENTS.\n\n#\n\n# You should provide a minimum version number that should be used. If you provide this\n\n# version number and specify the REQUIRED attribute, this module will fail if it\n\n# can't find the specified or a later version. If you specify a version number this is\n\n# automatically put into the considered list of version numbers and thus doesn't need\n\n# to be specified in the Boost_ADDITIONAL_VERSIONS variable (see below).\n\n#\n\n# NOTE for Visual Studio Users:\n\n#     Automatic linking is used on MSVC & Borland compilers by default when\n\n#     #including things in Boost.  It's important to note that setting\n\n#     Boost_USE_STATIC_LIBS to OFF is NOT enough to get you dynamic linking,\n\n#     should you need this feature.  Automatic linking typically uses static\n\n#     libraries with a few exceptions (Boost.Python is one).\n\n#\n\n#     Please see the section below near Boost_LIB_DIAGNOSTIC_DEFINITIONS for\n\n#     more details.  Adding a TARGET_LINK_LIBRARIES() as shown in the example\n\n#     above appears to cause VS to link dynamically if Boost_USE_STATIC_LIBS\n\n#     gets set to OFF.  It is suggested you avoid automatic linking since it\n\n#     will make your application less portable.\n\n#\n\n# =========== The mess that is Boost_ADDITIONAL_VERSIONS (sorry?) ============\n\n#\n\n# OK, so the Boost_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# boost version numbers that should be taken into account when searching\n\n# for Boost. Unfortunately boost puts the version number into the\n\n# actual filename for the libraries, so this variable will certainly be needed\n\n# in the future when new Boost versions are released.\n\n#\n\n# Currently this module searches for the following version numbers:\n\n# 1.33, 1.33.0, 1.33.1, 1.34, 1.34.0, 1.34.1, 1.35, 1.35.0, 1.35.1,\n\n# 1.36, 1.36.0, 1.36.1, 1.37, 1.37.0, 1.38, 1.38.0, 1.39, 1.39.0,\n\n# 1.40, 1.40.0\n\n#\n\n# NOTE: If you add a new major 1.x version in Boost_ADDITIONAL_VERSIONS you should\n\n# add both 1.x and 1.x.0 as shown above.  Official Boost include directories\n\n# omit the 3rd version number from include paths if it is 0 although not all\n\n# binary Boost releases do so.\n\n#\n\n# SET(Boost_ADDITIONAL_VERSIONS \"1.78\" \"1.78.0\" \"1.79\" \"1.79.0\")\n\n#\n\n# ===================================== ============= ========================\n\n#\n\n# Variables used by this module, they can change the default behaviour and\n\n# need to be set before calling find_package:\n\n#\n\n#   Boost_USE_MULTITHREADED      Can be set to OFF to use the non-multithreaded\n\n#                                boost libraries.  If not specified, defaults\n\n#                                to ON.\n\n#\n\n#   Boost_USE_STATIC_LIBS        Can be set to ON to force the use of the static\n\n#                                boost libraries. Defaults to OFF.\n\n#\n\n# Other Variables used by this module which you may want to set.\n\n#\n\n#   Boost_ADDITIONAL_VERSIONS    A list of version numbers to use for searching\n\n#                                the boost include directory.  Please see\n\n#                                the documentation above regarding this\n\n#                                annoying, but necessary variable :(\n\n#\n\n#   Boost_DEBUG                  Set this to TRUE to enable debugging output\n\n#                                of FindBoost.cmake if you are having problems.\n\n#                                Please enable this before filing any bug\n\n#                                reports.\n\n#\n\n#   Boost_DETAILED_FAILURE_MSG   FindBoost doesn't output detailed information\n\n#                                about why it failed or how to fix the problem\n\n#                                unless this is set to TRUE or the REQUIRED\n\n#                                keyword is specified in find_package().\n\n#                                  [Since CMake 2.8.0]\n\n#\n\n#   Boost_COMPILER               Set this to the compiler suffix used by Boost\n\n#                                (e.g. \"-gcc43\") if FindBoost has problems finding\n\n#                                the proper Boost installation\n\n#\n\n# These last three variables are available also as environment variables:\n\n#\n\n#   BOOST_ROOT or BOOSTROOT      The preferred installation prefix for searching for\n\n#                                Boost.  Set this if the module has problems finding\n\n#                                the proper Boost installation.\n\n#\n\n#   BOOST_INCLUDEDIR             Set this to the include directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n#   BOOST_LIBRARYDIR             Set this to the lib directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n# Variables defined by this module:\n\n#\n\n#   Boost_FOUND                         System has Boost, this means the include dir was\n\n#                                       found, as well as all the libraries specified in\n\n#                                       the COMPONENTS list.\n\n#\n\n#   Boost_INCLUDE_DIRS                  Boost include directories: not cached\n\n#\n\n#   Boost_INCLUDE_DIR                   This is almost the same as above, but this one is\n\n#                                       cached and may be modified by advanced users\n\n#\n\n#   Boost_LIBRARIES                     Link to these to use the Boost libraries that you\n\n#                                       specified: not cached\n\n#\n\n#   Boost_LIBRARY_DIRS                  The path to where the Boost library files are.\n\n#\n\n#   Boost_VERSION                       The version number of the boost libraries that\n\n#                                       have been found, same as in version.hpp from Boost\n\n#\n\n#   Boost_LIB_VERSION                   The version number in filename form as\n\n#                                       it's appended to the library filenames\n\n#\n\n#   Boost_MAJOR_VERSION                 major version number of boost\n\n#   Boost_MINOR_VERSION                 minor version number of boost\n\n#   Boost_SUBMINOR_VERSION              subminor version number of boost\n\n#\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS    [WIN32 Only] You can call\n\n#                                       add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#                                       to have diagnostic information about Boost's\n\n#                                       automatic linking outputted during compilation time.\n\n#\n\n# For each component you specify in find_package(), the following (UPPER-CASE)\n\n# variables are set.  You can use these variables if you would like to pick and\n\n# choose components for your targets instead of just using Boost_LIBRARIES.\n\n#\n\n#   Boost_${COMPONENT}_FOUND            True IF the Boost library \"component\" was found.\n\n#\n\n#   Boost_${COMPONENT}_LIBRARY          Contains the libraries for the specified Boost\n\n#                                       \"component\" (includes debug and optimized keywords\n\n#                                       when needed).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2009 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n\n############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 198,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 203,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Remove superfluous \"debug\" / \"optimized\" keywords from\n\n# Boost_LIBRARY_DIRS\n",
        "Line" : 228,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 320,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# in cache already\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Need to search for boost\n",
        "Line" : 360,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 387,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# For each given include dir, consider an include directory\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# If BOOST_ROOT was defined in the environment, use it.\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# If BOOSTROOT was defined in the environment, use it.\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# If BOOST_INCLUDEDIR was defined in the environment, use it.\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# If BOOST_LIBRARYDIR was defined in the environment, use it.\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n\n# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Build a list of path suffixes for each version.\n",
        "Line" : 465,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 468,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 473,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# For BoostPro's underscores (and others?)\n",
        "Line" : 484,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n\n# Read the whole file:\n\n#\n",
        "Line" : 512,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 547,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 551,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 564,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Good luck!\n",
        "Line" : 584,
        "CharPositionInLine" : 20
      },
      "44" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 585,
        "CharPositionInLine" : 35
      },
      "45" : {
        "Text" : "# Good luck!\n",
        "Line" : 586,
        "CharPositionInLine" : 20
      },
      "46" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 587,
        "CharPositionInLine" : 35
      },
      "47" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 594,
        "CharPositionInLine" : 38
      },
      "48" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 602,
        "CharPositionInLine" : 38
      },
      "49" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 605,
        "CharPositionInLine" : 10
      },
      "50" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 609,
        "CharPositionInLine" : 16
      },
      "51" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 613,
        "CharPositionInLine" : 16
      },
      "52" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 618,
        "CharPositionInLine" : 14
      },
      "53" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 701,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Search first in the user specified locations\n",
        "Line" : 711,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# Consider system default pathes once custom search failed\n",
        "Line" : 735,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 767,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 779,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# If the user requested an exact version of Boost, check\n\n# that. We already know that the Boost version we have is >= the\n\n# requested version.\n",
        "Line" : 799,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# If the user didn't specify a patchlevel, it's 0.\n",
        "Line" : 804,
        "CharPositionInLine" : 6
      },
      "61" : {
        "Text" : "# We'll set Boost_FOUND true again if we have an exact version match.\n",
        "Line" : 809,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 821,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 853,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 874,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_PATH may not exist.\n",
        "Line" : 877,
        "CharPositionInLine" : 6
      },
      "66" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 887,
        "CharPositionInLine" : 8
      },
      "67" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in it's requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 932,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "# show the Boost_INCLUDE_DIRS AND Boost_LIBRARIES variables only in the advanced view\n",
        "Line" : 945,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 69
    },
    "cmake/FindDL.cmake" : {
      "ObjectId" : "8b9c8a9332596af559bf2df045f9aa8c51ae657c",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libdl\n\n# Find the native LIBDL includes and library\n\n#\n\n#  LIBDL_INCLUDE_DIR - where to find dlfcn.h, etc.\n\n#  LIBDL_LIBRARIES   - List of libraries when using libdl.\n\n#  LIBDL_FOUND       - True if libdl found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBDL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/GenerateDoxygenDoc.cmake" : {
      "ObjectId" : "4730f1da0b9fe52b4f78b5a7da29b82d0652041f",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/LLVMTools.cmake" : {
      "ObjectId" : "56e287e84c9d2f6bfdab9b8f863f9d79f1980d35",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/RPATHHandling.cmake" : {
      "ObjectId" : "4706cbf153107b1133ca60462c06230383501630",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# the RPATH to be used when installing\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/RubyExtensions.cmake" : {
      "ObjectId" : "42031b72ae80898d0ef097ce2cab21b3957c5203",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module finds the Ruby package and defines a ADD_RUBY_EXTENSION macro to\n\n# build and install Ruby extensions\n\n#\n\n# Upon loading, it sets a RUBY_EXTENSIONS_AVAILABLE variable to true if Ruby\n\n# extensions can be built.\n\n#\n\n# The ADD_RUBY_EXTENSION macro can be used as follows:\n\n#  ADD_RUBY_EXTENSION(target_name source1 source2 source3 ...)\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lang/csupport/CMakeLists.txt" : {
      "ObjectId" : "70000e90657cf05dcb19abe4f7ac7460121684db",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lang/idl/CMakeLists.txt" : {
      "ObjectId" : "9b1d1fe23aafde4deae138ed5a0ca756fc717de2",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lang/tlb/CMakeLists.txt" : {
      "ObjectId" : "8317cb69904b86fa1c5f68aa8a5696c6cec38fec",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "65c048f5db7e2c6bb581232605b636ec59f32c0b",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the pluginmanager can load plugins from a list of paths set in the\n\n# environment. for testing we don't want to use the plugins in the\n\n# install-folder, but the freshly compiled ones in the build-folder. note that\n\n# the folders set in the env-var are hardcoded...\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/ruby/CMakeLists.txt" : {
      "ObjectId" : "07ddcf99e0ca8becd83850337e551d3964378782",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# running implicitly against the plugins installed in the install-location\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the second ruby-test running explicitly against the freshly compiled plugins\n\n# in the build folder\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the pluginmanager can load plugins from a list of paths set in the\n\n# environment. for testing we don't want to use the plugins in the\n\n# install-folder, but the freshly compiled ones in the build-folder. note that\n\n# the folders set in the env-var are hardcoded...\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# there are no typelib-plugins inside _this_ single project which we might\n\n# wanna test\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "9d06f36906187cfcff70736f9325884efea1b98e",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/typelib-clang-tlb-importer/CMakeLists.txt" : {
      "ObjectId" : "5a51dd946988bfccb0beb15923c986c58e658408",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we tested and developed _only_ against llvm-3.4\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fail hard if we got no llvm-config!\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# note that \"cxxflags\" additionally returns the \"-I\" flags... which might not\n\n# be what you want!\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# tell cmake where to look for includes\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The set of clang libraries we need ... no clang-config for us\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convert the library as reported by llvm-config into a cmake list\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# and add it to LLVM_RAW_LIBRARIES\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# prevent loud warnings from gcc-4.9 caused by a macro-expansion the\n\n# AST-headers... this only clutters up the compiler output with nonsense\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# when compiling inside the rock-framework \"Wall\" is used. This adds alotta\n\n# more bogus warnings from Debians llvm-3.4 headers...\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# also install the created tool, so that the ruby-binding can execute it via\n\n# \"system()\" during tlb-creation time\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "typelib/CMakeLists.txt" : {
      "ObjectId" : "2b809addc69d25d9445969b9d21310728d360f97",
      "LastModified" : "2018-04-03T13:38:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TARGET_LINK_LIBRARIES(typeLib typeLang_c typeLang_tlb typeLang_idl)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1317
}