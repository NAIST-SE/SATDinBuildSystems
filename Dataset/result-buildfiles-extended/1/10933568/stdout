{
  "Repository" : "10933568",
  "Revision" : "HEAD",
  "ObjectId" : "e86d93760f51304940d55d62c0d47f15094d6712",
  "CommitTime" : "2019-02-26T16:41:33Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e1767b961d9bdf34eb9fc1784b2c23c1d843df83",
      "LastModified" : "2018-04-27T03:21:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect if this is included as subproject and if so expose\n\n# some variables to its parent scope\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set OSRM_BUILD_DIR location (might be used in various scripts)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# versions in use\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# be compatible with version handling before cmake 3.x\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# these two functions build up custom variables:\n\n#   DEPENDENCIES_INCLUDE_DIRS and OSRM_DEFINES\n\n# These variables we want to pass to\n\n# include_directories and add_definitions for both\n\n# this build and for sharing externally via pkg-config\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Strictly require GCC>=5.0 and Clang>=3.4 - GCC 4.8 is already too old for C++14.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Issue 2785: check gold binutils version and don't use gc-sections for versions prior 2.25\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Disable LTO when mason+gcc is detected before testing for / setting any flags.\n\n# Mason builds libraries with Clang, mixing does not work in the context of lto.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Explicitly set the build type to Release if no other type is specified\n\n# on the command line.  Without this, cmake defaults to an unoptimized,\n\n# non-debug build, which almost nobody wants.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Additional logic for the different build types\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check if LTO is available\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# GCC in addition allows parallelizing LTO\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Since gcc 4.9 the LTO format is non-standart ('slim'), so we need to use the build-in tools\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Same for clang LTO requires their own toolchain\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Configuring compilers\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# using GCC\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# using mingw\n",
        "Line" : 340,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# -fpermissive is required for parallel_do Intel TBB internal issue with GCC < 5\n\n# https://github.com/Project-OSRM/osrm-backend/pull/3603#issuecomment-277688589\n",
        "Line" : 345,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# using Intel C++\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 356,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# avoid compiler error C1128 from scripting_environment_lua.cpp\n",
        "Line" : 358,
        "CharPositionInLine" : 52
      },
      "21" : {
        "Text" : "# avoid compiler error C2011 from dual #include of winsock.h and winsock2.h\n",
        "Line" : 359,
        "CharPositionInLine" : 66
      },
      "22" : {
        "Text" : "# avoid min and max macros that can break compilation\n",
        "Line" : 362,
        "CharPositionInLine" : 37
      },
      "23" : {
        "Text" : "#needed for M_PI with cmath.h\n",
        "Line" : 363,
        "CharPositionInLine" : 46
      },
      "24" : {
        "Text" : "# Configuring linker\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# For ld.gold and ld.bfs (the GNU linkers) we optimize hard\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Tell compiler to put every function in separate section, linker can then match sections and functions\n",
        "Line" : 376,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Tell linker to do dead code and data eminination during link time discarding sections\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Default linker optimization flags\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Activate C++1y\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Configuring other platform dependencies\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Third-party libraries\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# if mason is enabled no find_package calls are made\n\n# to ensure that we are only compiling and linking against\n\n# fully portable mason packages\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# current mason packages target -D_GLIBCXX_USE_CXX11_ABI=0\n",
        "Line" : 511,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# note: we avoid calling find_package(Osmium ...) here to ensure that the\n\n# expat and bzip2 are used from mason rather than the system\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# note libosmium depends on expat and bzip2\n",
        "Line" : 567,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# prefix compilation with ccache by default if available and on clang or gcc\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# even with mason builds we want to link to system zlib\n\n# to ensure that osrm binaries play well with other binaries like nodejs\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Binaries\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Libraries\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# BUILD_COMPONENTS\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Add RPATH info to executables so that when they are run after being installed\n\n# (i.e., from /usr/local/bin/) the linker can find library dependencies. For\n\n# more info see http://www.cmake.org/Wiki/CMake_RPATH_handling\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Install profiles and support library to /usr/local/share/osrm/profiles by default\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Setup exporting variables for pkgconfig and subproject\n\n#\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# pkgconfig defines\n",
        "Line" : 807,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# uninstall target\n",
        "Line" : 821,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Modular build system: each directory registered here provides its own CMakeLists.txt\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Requires libosrm being built with sanitizers; make configurable and default to ubsan\n",
        "Line" : 845,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# add headers sanity check target that includes all headers independently\n\n# make sure we have all deps for the nodejs sub project's includes (nan, node)\n",
        "Line" : 859,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 50
    },
    "cmake/CPackConfig.cmake" : {
      "ObjectId" : "6ce8def8ed945d04e3b75a6243f0b9de308528a3",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Exclude /usr/lib64/pkgconfig directory given that it is already owned by the pkg-config rpm package.\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "cmake/CheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "e396f75a92cdd7377b18145420617c9d967c6df4",
      "LastModified" : "2014-04-01T16:11:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the CXX compiler supports a given flag.\n\n# CHECK_CXX_COMPILER_FLAG(<flag> <var>)\n\n#  <flag> - the compiler flag\n\n#  <var>  - variable to store the result\n\n# This internally calls the check_cxx_source_compiles macro.  See help\n\n# for CheckCXXSourceCompiles for a listing of variables that can\n\n# modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 21,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# GNU\n\n# MSVC\n\n# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 22,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 4
    },
    "cmake/FindDebArch.cmake" : {
      "ObjectId" : "5b405bc39bab284e5303d524eed02b0cc49c271c",
      "LastModified" : "2014-08-11T14:16:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013\tEmmanuel Roullit <emmanuel.roullit@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindLua.cmake" : {
      "ObjectId" : "2b732ca210b2f9ef75862dda1235b18e42609271",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindLua\n\n# -------\n\n#\n\n#\n\n#\n\n# Locate Lua library This module defines\n\n#\n\n# ::\n\n#\n\n#   LUA_FOUND          - if false, do not try to link to Lua\n\n#   LUA_LIBRARIES      - both lua and lualib\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\n\n#   LUA_VERSION_STRING - the version of Lua found\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\n\n#\n\n#\n\n#\n\n# Note that the expected include convention is\n\n#\n\n# ::\n\n#\n\n#   #include \"lua.h\"\n\n#\n\n# and not\n\n#\n\n# ::\n\n#\n\n#   #include <lua/lua.h>\n\n#\n\n# This is because, the lua location is not standardized and may exist in\n\n# locations other than lua/\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# At least 5.[012] have different ways to express the version\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fink\n",
        "Line" : 145,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 146,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "# Blastwave\n",
        "Line" : 147,
        "CharPositionInLine" : 19
      },
      "9" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# include dl library for statically-linked Lua library\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/FindSTXXL.cmake" : {
      "ObjectId" : "473fb6a29dbd4ec740c3dbe34039248c7bd358b6",
      "LastModified" : "2016-04-22T12:35:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate STXXL library\n\n# This module defines\n\n#  STXXL_FOUND, if false, do not try to link to libstxxl\n\n#  STXXL_LIBRARY\n\n#  STXXL_INCLUDE_DIR, where to find stxxl.h\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 22,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set STXXL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindTBB.cmake" : {
      "ObjectId" : "09ba16555498fd6cf02a135708f04d6007ca7e6e",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n#   Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n#   Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n#   e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n#   TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n#   in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n#   which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n#   which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n#       that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n#   find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#    endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n#       containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n#       (hence no else), instead I test if the user really specified\n\n#       the variables in question.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n#       ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n#       variables and search them both.\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n#       tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n#       variables, which now point to the directories of the lib files.\n\n#       It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n#       argument instead of the implicit PATHS as it isn't hard-coded\n\n#       but computed by system introspection. Searching the LIBRARY_PATH\n\n#       and LD_LIBRARY_PATH environment variables is now even more important\n\n#       that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n#       the use of TBB built from sources.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n#       Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 262,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 272,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "cmake/JSONParser.cmake" : {
      "ObjectId" : "e1be64e0d87a8c6d0065d56049b38184158131e3",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# https://github.com/sbellus/json-cmake/blob/9913da8800b95322d393894d3525d634568f305e/JSONParser.cmake\n\n# MIT Licensed - https://github.com/sbellus/json-cmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check if name ends\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# reserved word starts\n",
        "Line" : 128,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# name without value\n",
        "Line" : 133,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# remove escapes\n",
        "Line" : 141,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# check if name starts\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# turn off implicit expansions in if statement\n",
        "Line" : 182,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# check if json_value ends, it is ended by \"\n",
        "Line" : 190,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# if \" is escaped consume\n",
        "Line" : 201,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# if it is not \" then copy also escape character\n",
        "Line" : 209,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# check if value starts\n",
        "Line" : 217,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# simple value\n",
        "Line" : 246,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# object\n",
        "Line" : 250,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 13
    },
    "cmake/mason.cmake" : {
      "ObjectId" : "d33c3439f7bde20fe698bd93be539213ff2cdf31",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mason CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine platform\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# we call uname -s manually here since\n\n# CMAKE_HOST_SYSTEM_NAME will not be defined before the project() call\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Determine platform version string\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check that the previous invocation of mason_use didn't select another version of this package\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Download the package\n",
        "Line" : 66,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# Note: some CMake versions are compiled without SSL support\n",
        "Line" : 72,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# We downloaded to a temporary file to prevent half-finished downloads\n",
        "Line" : 82,
        "CharPositionInLine" : 20
      },
      "8" : {
        "Text" : "# Unpack the package\n",
        "Line" : 87,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Error out if there is no config file.\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Load the configuration from the ini file\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Trim trailing commas\n",
        "Line" : 110,
        "CharPositionInLine" : 67
      },
      "12" : {
        "Text" : "# Compare version in the package to catch errors early on\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Concatenate the static libs and libraries\n",
        "Line" : 143,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Store invocation ID to prevent different versions of the same package in one invocation\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Setup\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Read environment variables if CMake is run in command mode\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Directory where Mason packages are located; typically ends with mason_packages\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# URL prefix of where packages are located.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Execute commands if CMake is run in command mode\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Collect remaining arguments for passing to mason_use\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Install the package\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# CMake can't write to stdout with message()\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 23
    },
    "example/CMakeLists.txt" : {
      "ObjectId" : "154eda39b7fb2bb7e20349a925d507c9b5499927",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/cmake/FindLibOSRM.cmake" : {
      "ObjectId" : "50a5641a1929b8bc6ea45f0a37f6189ab41bab43",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibOSRM\n\n# Once done this will define\n\n#  LibOSRM_FOUND - System has LibOSRM\n\n#  LibOSRM_LIBRARIES - The libraries and ldflags needed to use LibOSRM\n\n#  LibOSRM_DEPENDENT_LIBRARIES - The libraries and ldflags need to link LibOSRM dependencies\n\n#  LibOSRM_LIBRARY_DIRS - The libraries paths needed to find LibOSRM\n\n#  LibOSRM_CXXFLAGS - Compiler switches required for using LibOSRM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBOSRM_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "example/cmake/FindTBB.cmake" : {
      "ObjectId" : "e5ca10039128483d56557998cf18cd6a32003c02",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n#   Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n#   Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n#   e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n#   TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n#   in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n#   which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n#   which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n#       that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n#   find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#    endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n#       containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n#       (hence no else), instead I test if the user really specified\n\n#       the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n#       ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n#       variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n#       tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n#       variables, which now point to the directories of the lib files.\n\n#       It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n#       argument instead of the implicit PATHS as it isn't hard-coded\n\n#       but computed by system introspection. Searching the LIBRARY_PATH\n\n#       and LD_LIBRARY_PATH environment variables is now even more important\n\n#       that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n#       the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n#       Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "fuzz/CMakeLists.txt" : {
      "ObjectId" : "17b26b6e0058f7d0eb1a4d24fb80f5af2deabee2",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fuzz testing using LLVM's libFuzzer.\n\n#\n\n# See:\n\n#  - http://llvm.org/docs/LibFuzzer.html\n\n#  - http://llvm.org/releases/3.8.0/docs/LibFuzzer.html\n\n#\n\n# TODO(daniel-j-h):\n\n#  - make more user friendly, at the moment we require you to build and install libFuzzer.a\n\n#  - pick up LLVM_ROOT\n\n#  - build libFuzzer on the fly\n\n#\n\n# clang++ -std=c++11 -stdlib=libc++ -c -g -O2 ~/llvm/lib/Fuzzer/*.cpp -I~/llvm/lib/Fuzzer\n\n# ar ruv libFuzzer.a Fuzzer*.o\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "6a6986a22fb668903ffb45eda24574abd29edf0a",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/nodejs/CMakeLists.txt" : {
      "ObjectId" : "ff16a38569e30991bd69fefd7ef1ea131c10046d",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# node-cmake requires CMake 3.1 features; for the osrm project we only\n\n# require CMake 2.8.11 so that we can build e.g. on Trusty by default.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# node_osrm artifacts in ${BINDING_DIR} to depend targets on\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For mason-enabled builds we copy over tbb's shared objects for packaging.\n\n# TODO: consider using statically linked tbb library (for node_osrm only!)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/data/Makefile" : {
      "ObjectId" : "3c6adc7d23def323de15b0381abd28232a8a8505",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "third_party/cheap-ruler-cpp-2.5.4/CMakeLists.txt" : {
      "ObjectId" : "31bc80592daf264e5fa658ace4a7199e815e71f3",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/cheap-ruler-cpp-2.5.4/cmake/build.cmake" : {
      "ObjectId" : "79168336d6d4db5d75a231acc54d0f66e9a7832b",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate source groups so the files are properly sorted in IDEs like Xcode.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/cheap-ruler-cpp-2.5.4/cmake/mason.cmake" : {
      "ObjectId" : "bc31feeb5f26704bef71dd1e077b0bf3f7ceaa79",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mason CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine platform\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# we call uname -s manually here since\n\n# CMAKE_HOST_SYSTEM_NAME will not be defined before the project() call\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Determine platform version string\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Android Studio only passes ANDROID_ABI, but we need to adjust that to the Mason\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Check that the previous invocation of mason_use didn't select another version of this package\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Download the package\n",
        "Line" : 89,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# Note: some CMake versions are compiled without SSL support\n",
        "Line" : 95,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "# We downloaded to a temporary file to prevent half-finished downloads\n",
        "Line" : 105,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# Unpack the package\n",
        "Line" : 110,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Error out if there is no config file.\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Load the configuration from the ini file\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Trim trailing commas\n",
        "Line" : 133,
        "CharPositionInLine" : 67
      },
      "13" : {
        "Text" : "# Compare version in the package to catch errors early on\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Concatenate the static libs and libraries\n",
        "Line" : 166,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Store invocation ID to prevent different versions of the same package in one invocation\n",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Setup\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Read environment variables if CMake is run in command mode\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Directory where Mason packages are located; typically ends with mason_packages\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# URL prefix of where packages are located.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Execute commands if CMake is run in command mode\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Collect remaining arguments for passing to mason_use\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Install the package\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Optionally print variables\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# CMake can't write to stdout with message()\n",
        "Line" : 232,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 25
    },
    "third_party/geometry.hpp-0.9.2/Makefile" : {
      "ObjectId" : "ec95379ec221d625ea485d4f6b2b551a1bd7e287",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "third_party/libosmium/CMakeLists.txt" : {
      "ObjectId" : "a8409133f682aafad7ad9bcaae7418a79f2e4cf6",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Project version\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Build options\n\n#\n\n#  (Change with -DOPTION=VALUE on cmake command line.)\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CCache support\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# workaround for some clang versions\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Coverage support\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## This leads to all sorts of compile problems, so disable for now\n\n#include(CheckCXXCompilerFlag)\n\n#check_cxx_compiler_flag(\"-fkeep-inline-functions\" HAS_KEEP_INLINE_FUNCTIONS)\n\n#if(HAS_KEEP_INLINE_FUNCTIONS)\n\n#    set(extra_coverage_flags_ \"-fkeep-inline-functions\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--verbose\n\n#--keep\n",
        "Line" : 134,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Find external dependencies\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# set OSMIUM_INCLUDE_DIR so FindOsmium will not set anything different\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The find_package put the directory where it found the libosmium includes\n\n# into OSMIUM_INCLUDE_DIRS. We remove it again, because we want to make\n\n# sure to use our own include directory already set up above.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Decide which C++ version to use (Minimum/default: C++11).\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# following only available from cmake 2.8.12:\n\n#   add_compile_options(-std=${USE_CPP_VERSION})\n\n# so using this instead:\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Compiler and Linker flags\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# do not show warnings caused by missing .pdb files for libraries\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Build Type\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# In 'Dev' mode: compile with very strict warnings and turn them into errors.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#    add_definitions(${OSMIUM_WARNING_OPTIONS} ${OSMIUM_DRACONIC_CLANG_OPTIONS} -Wno-documentation -Wno-format-nonliteral -Wno-deprecated -Wno-covered-switch-default -Wno-shadow)\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Force RelWithDebInfo build type if none was given\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Unit and data tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Optional \"cppcheck\" target that checks C++ code\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# cpp doesn't find system includes for some reason, suppress that report\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Examples, benchmarks and documentation\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Headers\n\n#\n\n#  This will try to compile include files on their own to detect missing\n\n#  include directives and other dependency-related problems. Note that if this\n\n#  work, it is not enough to be sure it will compile in production code.\n\n#  But if it reports an error we know we are missing something.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Create a dummy .cpp file that includes the header file we want to\n\n# check.\n",
        "Line" : 397,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# There is no way in CMake to just compile but not link a C++ file,\n\n# so we pretend to build a library here.\n",
        "Line" : 402,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "#### this is better but only supported from cmake 3.0:\n\n###add_library(${libname} OBJECT ${DUMMYCPP} include/${hpp})\n",
        "Line" : 406,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Optional \"clang-tidy\" target\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Installation\n\n#\n\n#  External libraries are only installed if the options are set in case they\n\n#  are installed from somewhere else.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Packaging\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Print warnings at the end\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "third_party/libosmium/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "5d8b3c1e26fdfe2cfc7da48d1ad56e308623771c",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium benchmarks\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Configure benchmarks\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third_party/libosmium/cmake/FindGem.cmake" : {
      "ObjectId" : "5d78a9026f0023037360d13cb348e2b2f145aed6",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author thomas.roehr@dfki.de\n\n#\n\n# Version 0.31 2017-09-15\n\n#       - find gem executable gem.cmd on Windows\n\n# Version 0.3 2013-07-02\n\n#       - rely on `gem content` to find library and header\n\n#       - introduce GEM_OS_PKG to allow search via pkgconfig\n\n# Version 0.2 2010-01-14\n\n#       - add support for searching for multiple gems\n\n# Version 0.1 2010-12-15\n\n# \t- support basic search functionality \n\n#       - tested to find rice\n\n#\n\n# OUTPUT:\n\n#\n\n# GEM_INCLUDE_DIRS\tAfter successful search contains the include directores\n\n#\n\n# GEM_LIBRARIES\t\tAfter successful search contains the full path of each found library\n\n#\n\n#\n\n# Usage: \n\n# set(GEM_DEBUG TRUE)\n\n# find_package(Gem COMPONENTS rice hoe)\n\n# include_directories(${GEM_INCLUDE_DIRS})\n\n# target_link_libraries(${GEM_LIBRARIES}\n\n#\n\n# in case pkg-config should be used to search for the os pkg, set GEM_OS_PKG, i.e.\n\n# set(GEM_OS_PKG TRUE)\n\n#\n\n# Check for how 'gem' should be called\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Making backward compatible\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the gem is installed as a gem\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use `gem content <gem-name>` to extract current information about installed gems\n\n# Store the information into ${GEM_LOCAL_INFO}\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Create a list from the output results of the gem command\n",
        "Line" : 88,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Convert so that only '/' Unix path separator are being using\n\n# needed to do proper regex matching\n",
        "Line" : 92,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# Identify library -- checking for a library in the gems 'lib' (sub)directory\n\n# Search for an existing library, but only within the gems folder\n",
        "Line" : 96,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# Identify headers\n\n# Checking for available headers in an include directory\n",
        "Line" : 106,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "# Compact the lists\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "third_party/libosmium/cmake/FindOsmium.cmake" : {
      "ObjectId" : "9eaf7349e8f2363ff587c27e29e7f9842d5fc34c",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  FindOsmium.cmake\n\n#\n\n#  Find the Libosmium headers and, optionally, several components needed\n\n#  for different Libosmium functions.\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Usage:\n\n#\n\n#    Copy this file somewhere into your project directory, where cmake can\n\n#    find it. Usually this will be a directory called \"cmake\" which you can\n\n#    add to the CMake module search path with the following line in your\n\n#    CMakeLists.txt:\n\n#\n\n#      list(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\n#\n\n#    Then add the following in your CMakeLists.txt:\n\n#\n\n#      find_package(Osmium [version] REQUIRED COMPONENTS <XXX>)\n\n#      include_directories(SYSTEM ${OSMIUM_INCLUDE_DIRS})\n\n#\n\n#    The version number is optional. If it is not set, any version of\n\n#    libosmium will do.\n\n#\n\n#    For the <XXX> substitute a space separated list of one or more of the\n\n#    following components:\n\n#\n\n#      pbf        - include libraries needed for PBF input and output\n\n#      xml        - include libraries needed for XML input and output\n\n#      io         - include libraries needed for any type of input/output\n\n#      geos       - include if you want to use any of the GEOS functions\n\n#      gdal       - include if you want to use any of the OGR functions\n\n#      proj       - include if you want to use any of the Proj.4 functions\n\n#      sparsehash - include if you use the sparsehash index\n\n#\n\n#    You can check for success with something like this:\n\n#\n\n#      if(NOT OSMIUM_FOUND)\n\n#          message(WARNING \"Libosmium not found!\\n\")\n\n#      endif()\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Variables:\n\n#\n\n#    OSMIUM_FOUND         - True if Osmium found.\n\n#    OSMIUM_INCLUDE_DIRS  - Where to find include files.\n\n#    OSMIUM_XML_LIBRARIES - Libraries needed for XML I/O.\n\n#    OSMIUM_PBF_LIBRARIES - Libraries needed for PBF I/O.\n\n#    OSMIUM_IO_LIBRARIES  - Libraries needed for XML or PBF I/O.\n\n#    OSMIUM_LIBRARIES     - All libraries Osmium uses somewhere.\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the list of directories where we look for osmium includes.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 62,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check libosmium version number\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  Check for optional components\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'io' is an alias for 'pbf' and 'xml'\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'ogr' is an alias for 'gdal'\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'pbf'\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'xml'\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'geos'\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'gdal' (alias 'ogr')\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'proj'\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Component 'sparsehash'\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Find size of sparsetable::size_type. This does not work on older\n\n# CMake versions because they can do this check only in C, not in C++.\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Sparsetable::size_type must be at least 8 bytes (64bit), otherwise\n\n# OSM object IDs will not fit.\n",
        "Line" : 233,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  Check that all required libraries are available\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and the optional version check\n\n# and set OSMIUM_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  A function for setting the -pthread option in compilers/linkers\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  Add compiler flags\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disable warning C4068: \"unknown pragma\" because we want it to ignore\n\n# pragmas for other compilers.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Disable warning C4715: \"not all control paths return a value\" because\n\n# it generates too many false positives.\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Disable warning C4351: new behavior: elements of array '...' will be\n\n# default initialized. The new behaviour is correct and we don't support\n\n# old compilers anyway.\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Disable warning C4503: \"decorated name length exceeded, name was truncated\"\n\n# there are more than 150 of generated names in libosmium longer than 4096 symbols supported in MSVC\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# following only available from cmake 2.8.12:\n\n#   add_compile_options(-stdlib=libc++)\n\n# so using this instead:\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# This is a set of recommended warning options that can be added when compiling\n\n# libosmium code.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "third_party/libosmium/cmake/FindProtozero.cmake" : {
      "ObjectId" : "ad16cabeb00e4a2d6cb381cf083491ba24ebeb6f",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  FindProtozero.cmake\n\n#\n\n#  Find the protozero headers.\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Usage:\n\n#\n\n#    Copy this file somewhere into your project directory, where cmake can\n\n#    find it. Usually this will be a directory called \"cmake\" which you can\n\n#    add to the CMake module search path with the following line in your\n\n#    CMakeLists.txt:\n\n#\n\n#      list(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\n#\n\n#    Then add the following in your CMakeLists.txt:\n\n#\n\n#      find_package(Protozero [version] [REQUIRED])\n\n#      include_directories(SYSTEM ${PROTOZERO_INCLUDE_DIR})\n\n#\n\n#    The version number is optional. If it is not set, any version of\n\n#    protozero will do.\n\n#\n\n#      if(NOT PROTOZERO_FOUND)\n\n#          message(WARNING \"Protozero not found!\\n\")\n\n#      endif()\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Variables:\n\n#\n\n#    PROTOZERO_FOUND        - True if Protozero was found.\n\n#    PROTOZERO_INCLUDE_DIR  - Where to find include files.\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find include path\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check version number\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(PROTOZERO_INCLUDE_DIRS \"${PROTOZERO_INCLUDE_DIR}\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/libosmium/doc/CMakeLists.txt" : {
      "ObjectId" : "5ea819b922067a855de557cdd1d65a5fafc0a039",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium documentation\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/libosmium/examples/CMakeLists.txt" : {
      "ObjectId" : "c1498cc3522231344dfea158f327a335321a4cd2",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium examples\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Configure examples\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third_party/libosmium/test/CMakeLists.txt" : {
      "ObjectId" : "bd75a8bfe3c370c652261065b4ebce9104d56357",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium unit tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Otherwise GCC throws a lot of warnings for REQUIRE(...) from Catch v.1.2.1\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Define function for adding tests\n\n#\n\n#  add_unit_tests(group name [ENABLE_IF bool] [LIBS libs] [LABELS labels])\n\n#\n\n#  group  - test group (directory)\n\n#  name   - name of test\n\n#  bool   - boolean variable telling whether the test should be run (optional)\n\n#  libs   - lib or libs that should be used when compiling test (optional)\n\n#  labels - additional labels this test should get (optional)\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Prepare some variables so querying it for tests work properly.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Add all tests.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Check that all tests available in test/t/*/test_*.cpp are run.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "third_party/libosmium/test/data-tests/CMakeLists.txt" : {
      "ObjectId" : "135cc4a73b7294a4dee17a9aad5b1af975bff48a",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium data tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  testcases\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  xml\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  overview\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  multipolygon\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "third_party/libosmium/test/data-tests/run-testdata-multipolygon.cmake" : {
      "ObjectId" : "be2cb395dda958c405bd63a08add873ea0dc05c8",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Helper script that runs the 'multipolygon' test.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove files that might be left over from previous run\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Create multipolygons from test data.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Compare created multipolygons with reference data.\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/libosmium/test/examples/CMakeLists.txt" : {
      "ObjectId" : "f6d427d399c2f81e258381ac6a168277888eaa2d",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  Libosmium example tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the list of all tests that are in the repository. It should be the\n\n# same as the configured list above, if not we'll find out about that below\n\n# and create a fatal error.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/libosmium/test/examples/t/amenity_list/CMakeLists.txt" : {
      "ObjectId" : "3a99a8a6d8246a901b0a5c1c16d6a8b4f4cda391",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/area_test/CMakeLists.txt" : {
      "ObjectId" : "d92aa97523aa87fb763596473cb75c3fd3cd4c15",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/change_tags/CMakeLists.txt" : {
      "ObjectId" : "b054aa9be013cc7e3918c5a4e43954c8ea9ba5f6",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/convert/CMakeLists.txt" : {
      "ObjectId" : "ac6f84631f9289aa8b9ba41c049e1534217e3f17",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Should give a warning when converting from history to non-history file\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Should fail when an unknown command line option is used\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/libosmium/test/examples/t/count/CMakeLists.txt" : {
      "ObjectId" : "07ac6f4740552bc6d492e6c61290083038db01f3",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/create_pois/CMakeLists.txt" : {
      "ObjectId" : "a2aa7cb3e88244095879a35545d380c61cad4b31",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/debug/CMakeLists.txt" : {
      "ObjectId" : "6e2462c00a83e9c713205212a2be0bf855954632",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/dump_internal/CMakeLists.txt" : {
      "ObjectId" : "fa942ef1ad7f4ffefa11837f4ed8edad693151e9",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/filter_discussions/CMakeLists.txt" : {
      "ObjectId" : "21e8f7208787de1595f150de044c5f877e99307f",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/index_lookup/CMakeLists.txt" : {
      "ObjectId" : "ac4c434639deefef7861ffffa5a708b88aba2114",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fails with message if index file doesn't exist\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fails with message if --type option is not used\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fails with message if --type option is used with unknown type\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fails with message when combining options --array and --list\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Fails with message when combining options --dump and --search\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/libosmium/test/examples/t/location_cache/CMakeLists.txt" : {
      "ObjectId" : "8ca8b79e5c1a4ac6df27dba8a2bcedaa4ac11af1",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fails with message if index file doesn't exist\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/libosmium/test/examples/t/pub_names/CMakeLists.txt" : {
      "ObjectId" : "3abefa39f7cdacbaf729d375dec4ae067801d6de",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/read/CMakeLists.txt" : {
      "ObjectId" : "ff2b7aa5896ef624a2d74b5ccd8b683177a50ad5",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/read_with_progress/CMakeLists.txt" : {
      "ObjectId" : "2bc088188b4a5b54132330900d82832ac48d2dd3",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/road_length/CMakeLists.txt" : {
      "ObjectId" : "6323f073195cbece5d50837c23943d593face95d",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/libosmium/test/examples/t/tiles/CMakeLists.txt" : {
      "ObjectId" : "5a4fbaa9e23ec7371377673ff2cb4698a965dc59",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/protozero/CMakeLists.txt" : {
      "ObjectId" : "24e293d739ff5ca8f4b6a6fb137e2969799d73c1",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  protozero\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Find dependencies\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Optional \"clang-tidy\" target\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Optional \"cppcheck\" target\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Include what you use\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Installation\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "third_party/protozero/cmake/FindProtozero.cmake" : {
      "ObjectId" : "ad16cabeb00e4a2d6cb381cf083491ba24ebeb6f",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  FindProtozero.cmake\n\n#\n\n#  Find the protozero headers.\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Usage:\n\n#\n\n#    Copy this file somewhere into your project directory, where cmake can\n\n#    find it. Usually this will be a directory called \"cmake\" which you can\n\n#    add to the CMake module search path with the following line in your\n\n#    CMakeLists.txt:\n\n#\n\n#      list(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\n#\n\n#    Then add the following in your CMakeLists.txt:\n\n#\n\n#      find_package(Protozero [version] [REQUIRED])\n\n#      include_directories(SYSTEM ${PROTOZERO_INCLUDE_DIR})\n\n#\n\n#    The version number is optional. If it is not set, any version of\n\n#    protozero will do.\n\n#\n\n#      if(NOT PROTOZERO_FOUND)\n\n#          message(WARNING \"Protozero not found!\\n\")\n\n#      endif()\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Variables:\n\n#\n\n#    PROTOZERO_FOUND        - True if Protozero was found.\n\n#    PROTOZERO_INCLUDE_DIR  - Where to find include files.\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find include path\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check version number\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(PROTOZERO_INCLUDE_DIRS \"${PROTOZERO_INCLUDE_DIR}\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/protozero/doc/CMakeLists.txt" : {
      "ObjectId" : "77c5420a66572812310f4eae83e217c096d6bac7",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  protozero documentation\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/protozero/test/CMakeLists.txt" : {
      "ObjectId" : "c76912351457fe0ac3780bbd7b1cebdc2acef43b",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  protozero tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/protozero/test/unit/CMakeLists.txt" : {
      "ObjectId" : "8d9651cc2f8a54d34ddc99b8ecb9f8a9b06f59cc",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  protozero unit tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/protozero/tools/CMakeLists.txt" : {
      "ObjectId" : "721a19fbc009086b57fe08bc14287d0da114f6f1",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  protozero tools\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needs getopt, which is not available on Windows\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/rapidjson/CMakeLists.txt" : {
      "ObjectId" : "ceda71b1b67c94ea8a12629b77b12d02b5a56da4",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect Apple's Clang\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# compile in release with debug info mode by default\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build all binaries in a separate directory\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add extra search paths for libraries and includes\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# required for VS2012 due to missing support for variadic templates\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# pkg-config\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Following patterns are for excluding the intermediate/object files\n\n# from an install of in-source CMake build.\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Provide config and version files to be used by other applications\n\n# ===============================\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# cmake-modules\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "third_party/rapidjson/CMakeModules/FindGTestSrc.cmake" : {
      "ObjectId" : "f3cb8c99089b97e3a877849c97928c07ae6d20f9",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Debian installs gtest include directory in /usr/include, thus need to look\n\n# for include directory separately from source directory.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/rapidjson/doc/CMakeLists.txt" : {
      "ObjectId" : "c1f165a37addc77b551ac10e92a6b68d3a905cdd",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/rapidjson/example/CMakeLists.txt" : {
      "ObjectId" : "4d448ccc0f455e63266c1403ccf9b15c34b699cb",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/rapidjson/test/CMakeLists.txt" : {
      "ObjectId" : "11c1b04c7d16473878eb4ed0224206e1ba4e149a",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/rapidjson/test/perftest/CMakeLists.txt" : {
      "ObjectId" : "c33aae469a3f50c9ede1ae9a3c19211275660a20",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/rapidjson/test/unittest/CMakeLists.txt" : {
      "ObjectId" : "b3204d6c8d6fde5a9e3680aaf4b8291cbd7f670e",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If the user is running a newer version of Clang that includes the\n\n# -Wdouble-promotion, we will ignore that warning.\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Force to always compile with /W4\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Force to always compile with /WX\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Not running SIMD.* unit test cases for Valgrind\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "third_party/variant/Makefile" : {
      "ObjectId" : "10ab7b5f0c3f9dece9ed5c5272cb7a523fe99215",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "third_party/vtzero/CMakeLists.txt" : {
      "ObjectId" : "5e660929528d16471c0b7b1fbe538290183d20a7",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  vtzero\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This variable must be set to the directory where the mvt-fixtures from the\n\n# https://github.com/mapbox/mvt-fixtures repository are to be found. Usually\n\n# this is the directory where the submodule is checked out as described in\n\n# the README, but you can also set this to a different path, for instance\n\n# to change the setting while doing development.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    add_definitions(-Weverything -Wno-c++98-compat -Wno-documentation -Wno-switch-enum -Wno-weak-vtables -Wno-padded -Wno-documentation-unknown-command -Wno-exit-time-destructors)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Find dependencies\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Optional \"clang-tidy\" target\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Optional \"cppcheck\" target\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Include what you use\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  Installation\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "third_party/vtzero/cmake/FindProtozero.cmake" : {
      "ObjectId" : "175dd2369fd578f390a5a20bae9d01c66c8bae64",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n#  FindProtozero.cmake\n\n#\n\n#  Find the protozero headers.\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Usage:\n\n#\n\n#    Copy this file somewhere into your project directory, where cmake can\n\n#    find it. Usually this will be a directory called \"cmake\" which you can\n\n#    add to the CMake module search path with the following line in your\n\n#    CMakeLists.txt:\n\n#\n\n#      list(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\n#\n\n#    Then add the following in your CMakeLists.txt:\n\n#\n\n#      find_package(Protozero [version] [REQUIRED])\n\n#      include_directories(SYSTEM ${PROTOZERO_INCLUDE_DIR})\n\n#\n\n#    The version number is optional. If it is not set, any version of\n\n#    protozero will do.\n\n#\n\n#      if(NOT PROTOZERO_FOUND)\n\n#          message(WARNING \"Protozero not found!\\n\")\n\n#      endif()\n\n#\n\n#----------------------------------------------------------------------\n\n#\n\n#  Variables:\n\n#\n\n#    PROTOZERO_FOUND        - True if Protozero was found.\n\n#    PROTOZERO_INCLUDE_DIR  - Where to find include files.\n\n#\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find include path\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check version number\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(PROTOZERO_INCLUDE_DIRS \"${PROTOZERO_INCLUDE_DIR}\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/vtzero/doc/CMakeLists.txt" : {
      "ObjectId" : "f07a838c14565054c9c8b76041e66b4bf47d907c",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake Config\n\n#\n\n#  vtzero documentation\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/vtzero/examples/CMakeLists.txt" : {
      "ObjectId" : "756884903c3d26b6af6bb6ce3303891ef6fa6b78",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  vtzero examples\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/vtzero/test/CMakeLists.txt" : {
      "ObjectId" : "4beecc14ee5cbe6ba878de78d31f9b9c9d29b3d7",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n#  CMake config\n\n#\n\n#  vtzero tests\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "unit_tests/CMakeLists.txt" : {
      "ObjectId" : "86a5297e5d7b615890da4f065d517aa63b337eca",
      "LastModified" : "2019-01-17T17:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We can't run this Makefile on windows\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 64,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 6352
}