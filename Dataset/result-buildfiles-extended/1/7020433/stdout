{
  "Repository" : "7020433",
  "Revision" : "HEAD",
  "ObjectId" : "9e349bd06a44b55e1199d202f2526192e288a20e",
  "CommitTime" : "2019-02-21T22:10:20Z",
  "Files" : {
    "neurolabi/c/CMakeLists.txt" : {
      "ObjectId" : "22700886d5fa141717e488cbbb550d223a0bd163",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Change the default build type from Debug to Release, while still\n\n# supporting overriding the build type.\n\n#\n\n# The CACHE STRING logic here and elsewhere is needed to force CMake\n\n# to pay attention to the value of these variables.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#check_library_exists(${LIBXML2_LIBRARIES} xmlParseFile \"\" HAVE_LIBXML2)\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#check_library_exists(${PNG_LIBRARIES} png_read_image \"\" HAVE_LIBPNG)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pcreposix if can not find regex.h\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Set some flags\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Set sources\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# neulib srcs generated from template\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# other neulib srcs\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Setup targets\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# install library\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "neurolabi/c/Makefile" : {
      "ObjectId" : "7b00b68d0a258d0c0559bcb616efe29aa2731d72",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#@cp ../app/conn.txt ../app/stitch_package/\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#@make release PROG=soma\n\n#@cp bin/soma ../app/stitch_package/bin\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "neurolabi/c/cmake_modules/CheckCInlineKeyword.cmake" : {
      "ObjectId" : "fa77217d799a355efac92934e49a03b6deabd1a4",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Inspired from /usr/share/autoconf/autoconf/c.m4\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/c/cmake_modules/FindFFTW3.cmake" : {
      "ObjectId" : "67f71f4a12cc0b6c71fe6bcfef3d02cfa2b04743",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find FFTW3\n\n# Once done, this will define\n\n#\n\n#  FFTW3_FOUND - system has FFTW3\n\n#  FFTW3_INCLUDE_DIRS - the FFTW3 include directories\n\n#  FFTW3_LIBRARIES - link these to use FFTW3\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the FFTW3_STATIC_LIBRARY variable to TRUE before calling find_package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/FindFFTW3F.cmake" : {
      "ObjectId" : "42fae177491261eaf0caaa1a5c7ee5d35fb2caa1",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find FFTW3F\n\n# Once done, this will define\n\n#\n\n#  FFTW3F_FOUND - system has FFTW3F\n\n#  FFTW3F_INCLUDE_DIRS - the FFTW3F include directories\n\n#  FFTW3F_LIBRARIES - link these to use FFTW3F\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the FFTW3F_STATIC_LIBRARY variable to TRUE before calling find_package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/FindJANSSON.cmake" : {
      "ObjectId" : "9c0ea7e09f9a9bd490ab890f6b55d23bbb9d7a48",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LIBJANSSON\n\n# Once done, this will define\n\n#\n\n#  JANSSON_FOUND - system has JANSSON\n\n#  JANSSON_INCLUDE_DIRS - the JANSSON include directories\n\n#  JANSSON_LIBRARIES - link these to use JANSSON\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the JANSSON_STATIC_LIBRARY variable to TRUE before calling find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/FindLibXml2_MY.cmake" : {
      "ObjectId" : "f700124bd181d34f396507e0ee321ce2288f5dae",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LIBXML2\n\n# Once done, this will define\n\n#\n\n#  LIBXML2_FOUND - system has LIBXML2\n\n#  LIBXML2_INCLUDE_DIRS - the LIBXML2 include directories\n\n#  LIBXML2_LIBRARIES - link these to use LIBXML2\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the LIBXML2_STATIC_LIBRARY variable to TRUE before calling find_package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/FindPCRE.cmake" : {
      "ObjectId" : "e01f4b39cb97228a35633fec3b29e1672b924bb0",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PCRE\n\n# Once done, this will define\n\n#\n\n#  PCRE_FOUND - system has PCRE\n\n#  PCRE_INCLUDE_DIRS - the PCRE include directories\n\n#  PCRE_LIBRARIES - link these to use PCRE\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the PCRE_STATIC_LIBRARY variable to TRUE before calling find_package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/FindPNG_MY.cmake" : {
      "ObjectId" : "1d608c19bba6ce2b0a8b5ba398c4ea95b6ce0a4d",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PNG\n\n# Once done, this will define\n\n#\n\n#  PNG_FOUND - system has PNG\n\n#  PNG_INCLUDE_DIRS - the PNG include directories\n\n#  PNG_LIBRARIES - link these to use PNG\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the PNG_STATIC_LIBRARY variable to TRUE before calling find_package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/FindZLIB_MY.cmake" : {
      "ObjectId" : "09dd11ba708c0fd0346aee32aa8abd9d44c99a72",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ZLIB\n\n# Once done, this will define\n\n#\n\n#  ZLIB_FOUND - system has ZLIB\n\n#  ZLIB_INCLUDE_DIRS - the ZLIB include directories\n\n#  ZLIB_LIBRARIES - link these to use ZLIB\n\n#\n\n# By default, the dynamic libraries will be found. To find the static ones instead,\n\n# you must set the ZLIB_STATIC_LIBRARY variable to TRUE before calling find_package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attempt to find static library first if this is set\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# additional hints\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dir\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/c/cmake_modules/LibFindMacros.cmake" : {
      "ObjectId" : "69975c51be3f9c5e0ff372a4424f8de3b580ee88",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "neurolabi/c/libneurolabi.cmake" : {
      "ObjectId" : "4b0b050f046fb010706f21d1d6b8dc0b1987fd77",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Install libneurolabi from source\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/c/parse_template.cmake" : {
      "ObjectId" : "063a28e2cf41a4e9bafc96433870e3376621a36c",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/CMakeLists.txt" : {
      "ObjectId" : "f2fe00958b3cc27ce79b47136862e8ef646ca9f1",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/adjust_swc/CMakeLists.txt" : {
      "ObjectId" : "71fe8f3c550b7a929b4f30e0a160068e7718b450",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Download and install buildem, if it isn't already in BUILDEM_DIR.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GIT_REPOSITORY $ENV{HOME}/tmp/buildem/.git\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "############################################################################\n\n#Use modules  from  the  downloaded  buildem \n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Download and compile dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install tbar -- actual build commands would replace the placeholder below.\n\n# Note the auto-generated APP_DEPENDENCIES variable that holds all required targets.\n\n#add_custom_target (mapbody ALL DEPENDS ${APP_DEPENDENCIES} COMMENT \"mapbody built\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "neurolabi/cpp/adjust_swc/adjust_swc.pro" : {
      "ObjectId" : "03cef9f0b108d53ce0392b20f473992f05a5e6d7",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/adjust_swc/src/CMakeLists.txt" : {
      "ObjectId" : "f468cb8757c450e9675c0239b11961f7f1a802f5",
      "LastModified" : "2013-12-18T04:55:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/cpp/analyze_swc/analyze_swc.pro" : {
      "ObjectId" : "112c45db9d65ba567d581d1bc59d06101276b363",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/check_body/check_body.pro" : {
      "ObjectId" : "e38169b1573acee4f8e0cb463d59d8d90edb8fb1",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/dvid/dvid.pro" : {
      "ObjectId" : "1ff1f9c5adab4a9648bf69dea84cd7690bc9b97c",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/extract_bounded_neuron/CMakeLists.txt" : {
      "ObjectId" : "436d0277578e59d8c2d5500fb4e2493a4664d34a",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Download and install buildem, if it isn't already in BUILDEM_DIR.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GIT_REPOSITORY $ENV{HOME}/tmp/buildem/.git\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "############################################################################\n\n#Use modules  from  the  downloaded  buildem \n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Download and compile dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install tbar -- actual build commands would replace the placeholder below.\n\n# Note the auto-generated APP_DEPENDENCIES variable that holds all required targets.\n\n#add_custom_target (mapbody ALL DEPENDS ${APP_DEPENDENCIES} COMMENT \"mapbody built\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "neurolabi/cpp/extract_bounded_neuron/extract_bounded_neuron.pro" : {
      "ObjectId" : "ac0230b67d93943a1d6da022c41d86baee10fd34",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/extract_bounded_neuron/src/CMakeLists.txt" : {
      "ObjectId" : "91755b6c3a3a5ef392887067d50cdc271c576c16",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/cpp/lib/Makefile" : {
      "ObjectId" : "58adeb675497afea1c4a8d416a9e5bc1c7e4f758",
      "LastModified" : "2018-10-23T19:26:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/map_body/CMakeLists.txt" : {
      "ObjectId" : "82631ad8d402b3b6cf41df9197affd0797740bab",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Download and install buildem, if it isn't already in BUILDEM_DIR.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GIT_REPOSITORY $ENV{HOME}/tmp/buildem/.git\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "############################################################################\n\n#Use modules  from  the  downloaded  buildem \n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Download and compile dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install tbar -- actual build commands would replace the placeholder below.\n\n# Note the auto-generated APP_DEPENDENCIES variable that holds all required targets.\n\n#add_custom_target (mapbody ALL DEPENDS ${APP_DEPENDENCIES} COMMENT \"mapbody built\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "neurolabi/cpp/map_body/map_body.pro" : {
      "ObjectId" : "d58c2277b099945b774a1449418762dd40cd197c",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#CDir = $${PWD}/../../c\n\n#GuiDir = $${PWD}/../../gui\n\n#GenelibDir = $${PWD}/../../lib/genelib/src\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#HOME = $$system(echo $HOME)\n\n#INCLUDEPATH += $${CDir} $${CDir}/include $${GuiDir} $${GenelibDir} \\\n#    /usr/include/libxml2 $${HOME}/local/include\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#LIBS += -L/usr/local/lib \\\n#    -L/usr/lib \\\n#    -L$${CDir}/lib \\\n#    -L$${HOME}/local/lib \\\n#    -lfftw3 \\\n#    -lfftw3f \\\n#    -lxml2 \\\n#    -lpng \\\n#    -ljansson\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CONFIG(debug, debug|release) {\n\n#    DEFINES += _DEBUG_ _ADVANCED_\n\n#    LIBS += -lneurolabi_debug\n\n#} else {\n\n#    LIBS += -lneurolabi\n\n#}\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#$${GuiDir}/zswctree.cpp\\\n#  $${GuiDir}/zspgrowparser.cpp $${GuiDir}/zsegmentmaparray.cpp\\\n#  $${GuiDir}/zsuperpixelmap.cpp $${GuiDir}/zsuperpixelmaparray.cpp\\\n#  $${GuiDir}/zvoxel.cpp $${GuiDir}/zvoxelarray.cpp $${GuiDir}/zsegmentmap.cpp\\\n#  $${GuiDir}/zswcforest.cpp $${GuiDir}/zpoint.cpp $${GuiDir}/zswcbranch.cpp\\\n#  $${GuiDir}/zstring.cpp $${GuiDir}/zfilelist.cpp $${GuiDir}/swctreenode.cpp \\\n#  $${GuiDir}/zrandomgenerator.cpp $${GuiDir}/zstack.cxx $${GuiDir}/zswcpath.cpp\\\n#  $${GuiDir}/zstackfile.cpp \\\n#  $${GuiDir}/zsinglechannelstack.cpp $${GuiDir}/c_stack.cpp\\\n#  $${GuiDir}/zxmldoc.cpp $${GuiDir}/zfiletype.cpp $${GuiDir}/zjsonobject.cpp\\\n#  $${GuiDir}/zjsonvalue.cpp $${GuiDir}/zjsonparser.cpp\\\n#  $${GuiDir}/zhdf5reader.cpp $${GuiDir}/mylib/array.cpp\\\n#  $${GuiDir}/mylib/mylib.c $${GuiDir}/mylib/utilities.cpp $${GuiDir}/zgraph.cpp\\\n#  $${GuiDir}/zcuboid.cpp $${GuiDir}/zweightedpoint.cpp \\\n#  $${GuiDir}/zweightedpointarray.cpp $${GuiDir}/zobject3dscan.cpp\\\n#  $${GuiDir}/zobject3d.cpp $${GuiDir}/zobject3darray.cpp\\\n#  $${GuiDir}/zresolution.cpp $${GuiDir}/zprogressable.cpp \\\n#  $${GuiDir}/zprogressReporter.cpp $${GuiDir}/zinttree.cpp \\\n#  $${GuiDir}/neutubeconfig.cpp $${GuiDir}/zhistogram.cpp \\\n#  $${GuiDir}/zlogmessagereporter.cpp $${GuiDir}/zmessagereporter.cpp \\\n#  $${GuiDir}/c_json.cpp\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "neurolabi/cpp/map_body/src/CMakeLists.txt" : {
      "ObjectId" : "47a317be111d86dc2e187d3ce5a0595dddbdeef2",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/cpp/psd/CMakeLists.txt" : {
      "ObjectId" : "9da9804d87bb20936f0abab85db3e7fa75ce5696",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Download and install buildem, if it isn't already in BUILDEM_DIR.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GIT_REPOSITORY $ENV{HOME}/tmp/buildem/.git\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "############################################################################\n\n#Use modules  from  the  downloaded  buildem \n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Download and compile dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install tbar -- actual build commands would replace the placeholder below.\n\n# Note the auto-generated APP_DEPENDENCIES variable that holds all required targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "neurolabi/cpp/psd/psd_compare.pro" : {
      "ObjectId" : "e12a2c8728407f87ba9b832ee521acf6e274ef70",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/psd/src/CMakeLists.txt" : {
      "ObjectId" : "37f1a442887a56b3f8e00d6bacc4bac5e94c9ef1",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/cpp/skeletonize/CMakeLists.txt" : {
      "ObjectId" : "23c4a6c4a02a59ab56349a77f39489963a4c07af",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/skeletonize/skeletonize.pro" : {
      "ObjectId" : "e58bbf39a335ee10efdcea262ea1cdc30624266e",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/skeletonize/src/CMakeLists.txt" : {
      "ObjectId" : "cdb7fbbf8f18c50b6de31a264f5ef6663ec612f9",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for skeletonize src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(jsonLib jansson)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "neurolabi/cpp/sort_body_id/CMakeLists.txt" : {
      "ObjectId" : "436d0277578e59d8c2d5500fb4e2493a4664d34a",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Download and install buildem, if it isn't already in BUILDEM_DIR.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GIT_REPOSITORY $ENV{HOME}/tmp/buildem/.git\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "############################################################################\n\n#Use modules  from  the  downloaded  buildem \n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Download and compile dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install tbar -- actual build commands would replace the placeholder below.\n\n# Note the auto-generated APP_DEPENDENCIES variable that holds all required targets.\n\n#add_custom_target (mapbody ALL DEPENDS ${APP_DEPENDENCIES} COMMENT \"mapbody built\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "neurolabi/cpp/sort_body_id/sort_body_id.pro" : {
      "ObjectId" : "d1096e5511e5b4fbb7b4551cd5b06056dfd2df9b",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/sort_body_id/src/CMakeLists.txt" : {
      "ObjectId" : "814c29aef862d5067ca434b2d508ba121c747dad",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/cpp/sort_bodymap/CMakeLists.txt" : {
      "ObjectId" : "7020c0ab6f07d16af6289ff7793c8e154c000fcf",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Download and install buildem, if it isn't already in BUILDEM_DIR.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GIT_REPOSITORY $ENV{HOME}/tmp/buildem/.git\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "############################################################################\n\n#Use modules  from  the  downloaded  buildem \n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Download and compile dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install tbar -- actual build commands would replace the placeholder below.\n\n# Note the auto-generated APP_DEPENDENCIES variable that holds all required targets.\n\n#add_custom_target (mapbody ALL DEPENDS ${APP_DEPENDENCIES} COMMENT \"mapbody built\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "neurolabi/cpp/sort_bodymap/src/CMakeLists.txt" : {
      "ObjectId" : "0985b1cd56000c0f5fbd89837105f9abc7dec57a",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/cpp/src/CMakeLists.txt" : {
      "ObjectId" : "ef7faf8517c64aed699a347493c9b65f4efe194d",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_EXECUTABLE (flyem main.cpp ${GuiDir}/zswctree.cpp\n\n#    ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n#    ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n#    ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n#    ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n#    ${GuiDir}/zfilelist)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_EXECUTABLE (test test.cpp ${GuiDir}/zswctree.cpp\n\n#   ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n#   ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n#   ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n#   ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n#   ${GuiDir}/zfilelist.cpp ${GuiDir}/zargumentprocessor.cpp \n\n#   ${GuiDir}/zswctree.cpp\n\n#   ${GuiDir}/zswcforest.cpp ${GuiDir}/zswcbranch.cpp \n\n#   ${GuiDir}/zswctreematcher.cpp ${GuiDir}/zrandomgenerator.cpp\n\n#   ${GuiDir}/zmatrix.cpp ${GuiDir}/zinttree.cpp)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ADD_EXECUTABLE (sort_bodymap sort_bodymap.cpp ${GuiDir}/zswctree.cpp\n\n# ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n# ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n# ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n# ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n# ${GuiDir}/zstring.cpp ${GuiDir}/zfilelist.cpp ${GuiDir}/swctreenode.cpp \n\n# ${GuiDir}/zrandomgenerator.cpp ${GuiDir}/zstack.cxx ${GuiDir}/zswcpath.cpp \n\n# ${GuiDir}/zstackfile.cpp \n\n# ${GuiDir}/zsinglechannelstack.cpp ${GuiDir}/c_stack.cpp\n\n# ${GuiDir}/zxmldoc.cpp ${GuiDir}/zfiletype.cpp ${GuiDir}/zjsonobject.cpp\n\n# ${GuiDir}/zjsonvalue.cpp ${GuiDir}/zjsonparser.cpp\n\n#   ${GuiDir}/zweightedpoint.cpp        \n\n#   ${GuiDir}/zweightedpointarray.cpp ${GuiDir}/zgraph.cpp         \n\n#   ${GuiDir}/zcuboid.cpp\n\n# ${GuiDir}/zstring.cpp)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ADD_EXECUTABLE (map_body map_body.cpp ${GuiDir}/zswctree.cpp\n\n#  ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n#  ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n#  ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n#  ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n#  ${GuiDir}/zstring.cpp ${GuiDir}/zfilelist.cpp ${GuiDir}/swctreenode.cpp \n\n#  ${GuiDir}/zrandomgenerator.cpp ${GuiDir}/zstack.cxx ${GuiDir}/zswcpath.cpp \n\n#  ${GuiDir}/zstackfile.cpp \n\n#  ${GuiDir}/zsinglechannelstack.cpp ${GuiDir}/c_stack.cpp\n\n#  ${GuiDir}/zxmldoc.cpp ${GuiDir}/zfiletype.cpp ${GuiDir}/zjsonobject.cpp\n\n#  ${GuiDir}/zjsonvalue.cpp ${GuiDir}/zjsonparser.cpp\n\n#  ${GuiDir}/zstring.cpp)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ADD_EXECUTABLE (extract_bounded_neuron extract_bounded_neuron.cpp \n\n#   ${GuiDir}/zswctree.cpp\n\n#   ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n#   ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n#   ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n#   ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n#   ${GuiDir}/zstring.cpp ${GuiDir}/zfilelist.cpp\n\n#   ${GuiDir}/zfilelist.cpp ${GuiDir}/swctreenode.cpp \n\n#   ${GuiDir}/zrandomgenerator.cpp ${GuiDir}/zstack.cxx ${GuiDir}/zswcpath.cpp \n\n#   ${GuiDir}/zstackfile.cpp \n\n#   ${GuiDir}/zsinglechannelstack.cpp ${GuiDir}/c_stack.cpp\n\n#   ${GuiDir}/zxmldoc.cpp ${GuiDir}/zfiletype.cpp ${GuiDir}/zjsonobject.cpp\n\n#   ${GuiDir}/zjsonvalue.cpp ${GuiDir}/zjsonparser.cpp\n\n#   ${GuiDir}/zstring.cpp)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ADD_EXECUTABLE (skeletonize skeletonize.cpp ${GuiDir}/zswctree.cpp\n\n# ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n# ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n# ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n# ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n# ${GuiDir}/zfilelist.cpp ${GuiDir}/swctreenode.cpp \n\n# ${GuiDir}/zrandomgenerator.cpp ${GuiDir}/zstack.cxx ${GuiDir}/zswcpath.cpp \n\n# ${GuiDir}/zstackfile.cpp \n\n# ${GuiDir}/zsinglechannelstack.cpp ${GuiDir}/c_stack.cpp\n\n# ${GuiDir}/zxmldoc.cpp ${GuiDir}/zfiletype.cpp ${GuiDir}/zjsonobject.cpp\n\n# ${GuiDir}/zjsonvalue.cpp ${GuiDir}/zjsonparser.cpp\n\n# ${GuiDir}/zstring.cpp)\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#ADD_EXECUTABLE (search_swc search_swc.cpp ${GuiDir}/zswctree.cpp\n\n#  ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n#  ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n#  ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n#  ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n#  ${GuiDir}/zswctreematcher.cpp ${GuiDir}/zmatrix.cpp ${GuiDir}/zinttree.cpp\n\n#  ${GuiDir}/zstring.cpp ${GuiDir}/zrandomgenerator.cpp \n\n#  ${GuiDir}/zfilelist.cpp)\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#ADD_EXECUTABLE (adjust_swc adjust_swc.cpp ${GuiDir}/zswctree.cpp\n\n#   ${GuiDir}/zspgrowparser.cpp ${GuiDir}/zsegmentmaparray.cpp\n\n#   ${GuiDir}/zsuperpixelmap.cpp ${GuiDir}/zsuperpixelmaparray.cpp\n\n#   ${GuiDir}/zvoxel.cpp ${GuiDir}/zvoxelarray.cpp ${GuiDir}/zsegmentmap.cpp\n\n#   ${GuiDir}/zswcforest.cpp ${GuiDir}/zpoint.cpp ${GuiDir}/zswcbranch.cpp\n\n#   ${GuiDir}/zswctreematcher.cpp ${GuiDir}/zmatrix.cpp ${GuiDir}/zinttree.cpp\n\n#   ${GuiDir}/zstring.cpp ${GuiDir}/zrandomgenerator.cpp \n\n#   ${GuiDir}/zfilelist.cpp ${GuiDir}/flyem/zsynapseannotationanalyzer.cpp\n\n#   ${GuiDir}/flyem/zsynapseannotation.cpp \n\n#   ${GuiDir}/flyem/zsynapseannotationarray.cpp ${GuiDir}/zjsonparser.cpp\n\n#   ${GuiDir}/zvaa3dmarker.cpp ${GuiDir}/zjsonarray.cpp \n\n#   ${GuiDir}/flyem/zsynapseannotationmetadata.cpp\n\n#   ${GuiDir}/zvaa3dapo.cpp\n\n#   ${GuiDir}/zjsonvalue.cpp ${GuiDir}/zjsonobject.cpp\n\n#   ${GuiDir}/swctreenode.cpp ${GuiDir}/flyem/zsynapselocationmetric.cpp\n\n#   ${GuiDir}/flyem/zsynapselocationmatcher.cpp ${GuiDir}/zstack.cxx\n\n#   ${GuiDir}/zswcpath.cpp ${GuiDir}/zstackfile.cpp \n\n#   ${GuiDir}/zsinglechannelstack.cpp ${GuiDir}/c_stack.cpp\n\n#   ${GuiDir}/zxmldoc.cpp ${GuiDir}/zfiletype.cpp)\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#TARGET_LINK_LIBRARIES(flyem ${neuLib} ${myersLib} ${xmlLib} ${pngLib} )\n\n#TARGET_LINK_LIBRARIES(test ${neuLib} ${myersLib} ${xmlLib} ${pngLib} )\n\n#TARGET_LINK_LIBRARIES(sort_bodymap ${neuLib} ${myersLib} ${xmlLib} ${pngLib} \n\n#${jsonLib} ${fftwLib} ${fftwfLib})\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#TARGET_LINK_LIBRARIES(map_body ${neuLib} ${myersLib} ${xmlLib} ${pngLib} ${jsonLib} ${fftwLib} ${fftwfLib})\n\n#TARGET_LINK_LIBRARIES(extract_bounded_neuron ${neuLib} ${myersLib} ${xmlLib} \n\n#  ${pngLib} ${fftwLib} ${fftwfLib} ${jsonLib})\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#TARGET_LINK_LIBRARIES(skeletonize ${neuLib} ${myersLib} ${xmlLib} ${pngLib} \n\n#${jsonLib} ${fftwLib} ${fftwfLib})\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#TARGET_LINK_LIBRARIES(search_swc ${neuLib} ${myersLib} ${xmlLib} ${pngLib} )\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#TARGET_LINK_LIBRARIES(adjust_swc ${neuLib} ${myersLib} ${xmlLib} ${pngLib} ${jsonLib} ${fftwLib} ${fftwfLib})\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "neurolabi/cpp/tbar/CMakeLists.txt" : {
      "ObjectId" : "8a9920473eb3e916df56a13f55e92d3a2c3f992a",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "neurolabi/cpp/tbar/src/CMakeLists.txt" : {
      "ObjectId" : "84a43969e4c20726237481ef19d62c2c0470d611",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for tbar src\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(jsonLib jansson)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "neurolabi/gui/CMakeLists.txt" : {
      "ObjectId" : "8036e5aff79e4094ce03a4c8b101536d73219cfa",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/add_itk.pri" : {
      "ObjectId" : "4851036c0ad32160b1d5837235d4da69dd19f3f6",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#    ITK_LIB_PATH = ../lib/ITK/lib\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    LIBS += -L$$ITK_LIB_PATH\n\n#    DEFINES += _USE_ITK_\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "neurolabi/gui/command/command.pri" : {
      "ObjectId" : "e107dbbf9e392bf5b940b3bb2017cf9e4b0c0aa4",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/ext/QsLog/QsLog.pri" : {
      "ObjectId" : "8ba71529d600d62dedd59269d4f772054aa12deb",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# automatically writes the file and line for each log message\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : "#DEFINES += QS_LOG_DISABLE         # logging code is replaced with a no-op\n\n#DEFINES += QS_LOG_SEPARATE_THREAD # messages are queued and written from a separate thread\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "neurolabi/gui/ext/glm/CMakeLists.txt" : {
      "ObjectId" : "d60a887712d6b0346b52b4748c3d87f00340b931",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/ext/gtest.pri" : {
      "ObjectId" : "1b99531a8d9e838ee901ae24e9111015b1a3fa26",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/ext/gtest/CMakeLists.txt" : {
      "ObjectId" : "36d0a9ecc2987f8f721ab662f01eef249bcc5cf7",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 232,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "neurolabi/gui/ext/gtest/Makefile.am" : {
      "ObjectId" : "29797e4e9de4e1d5e5f93bba14288de87f623946",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "neurolabi/gui/ext/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8878dc1a95922120245a76010736d7db77121a89",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 61,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 71,
        "CharPositionInLine" : 33
      },
      "14" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 80,
        "CharPositionInLine" : 39
      },
      "16" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 81,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 85,
        "CharPositionInLine" : 42
      },
      "18" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 128,
        "CharPositionInLine" : 32
      },
      "25" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 39
    },
    "neurolabi/gui/ext/gtest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "neurolabi/gui/ext/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "neurolabi/gui/ext/libqxt.pri" : {
      "ObjectId" : "2e4fc41bdc0af499dd82dd9131d8aaff1b48215b",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/extlib.pri" : {
      "ObjectId" : "a041fd0039d04b42482c9090ba8bd23c8ed0f5d4",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#    LIBS += $${CONDA_ENV}/lib/libhdf5.la $${CONDA_ENV}/lib/libhdf5_hl.la\n\n#    DEFINES += _ENABLE_HDF5_\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  LIBXML_DIR = $${CONDA_ENV}\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  LIBXML_DIR = $${EXTLIB_DIR}/xml\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#neurolabi\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#        $${EXTLIB_DIR}/png/include \\\n        $${LIBJANSSON_DIR}/include\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#neurolabi\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#DEFINES += _ADVANCED_\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#Self-contained libraries\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#exists($${EXTLIB_DIR}/hdf5/lib/libhdf5.a) {\n\n#    message(\"hdf5 enabled\")\n\n#    DEFINES += _ENABLE_HDF5_\n\n#    INCLUDEPATH += $${EXTLIB_DIR}/hdf5/include\n\n##    LIBS += -L$${EXTLIB_DIR}/hdf5/lib -lhdf5 -lhdf5_hl\n\n#}\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#System libraries\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#tmp fix\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#LIBS += -L/usr/lib64/ssl\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#-lboost_thread -ljsoncpp -llz4 -lcurl -lpng -ljpeg\n",
        "Line" : 122,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : "#        CONFIG(debug, debug|release) {\n\n#            LIBS *= -llowtis-g\n\n#        } else {\n\n#            LIBS *= -llowtis\n\n#        }\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-lsurfrecon\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#  QMAKE_CXXFLAGS+=-fext-numeric-literals\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# todo: add vtk or just use conda?\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#unix:!macx {\n\n#  LIBS += -lGL -lGLU\n\n#}\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "neurolabi/gui/extratarget.pri" : {
      "ObjectId" : "058541b16ddf9991ac492831bac0e5358f1a64ea",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#Pre-build\n\n#Build neurolabi\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#make lib VERSION=\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#May not work in parallel compiling\n\n#PRE_TARGETDEPS = $${TargetFile}\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Post-build\n\n#message(\"$${PWD} => $${OUT_PWD}\")\n\n#CONFIG(flyem) {\n\n#    SourceConfig = $${PWD}/config_flyem.xml\n\n#} else {\n\n#    CONFIG(biocytin) {\n\n#        SourceConfig = $${PWD}/biocytin_config.xml\n\n#    } else {\n\n#        SourceConfig = $${PWD}/config.xml\n\n#    }\n\n#}\n\n#SourceJson = $${PWD}/../json\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#      QMAKE_POST_LINK += install_name_tool -add_rpath $${CONDA_ENV}/lib $${OutputDir}/$$TARGET\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    ConfigTarget.target = ConfigTarget\n\n#    ConfigTarget.commands = echo \"copying config\"; cp $${SourceConfig} $${OutputDir}/config.xml\n\n#    ConfigTarget.depends = $${SourceConfig}\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    message(\"qmake target: $${OutputDir}\")\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#    QMAKE_EXTRA_TARGETS += ConfigTarget\n\n#    QMAKE_POST_LINK += $$quote(echo \"making config\"; make ConfigTarget;)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##-r %{sourceDir}/../json %{buildDir}/neuTube_d.app/Contents/MacOS/\n\n#    JsonTarget.target = JsonConfig\n\n#    JsonTarget.commands = echo \"copying json\"; cp -r $${SourceJson} $${JsonTarget.target}\n\n#    JsonTarget.depends = FORCE\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#    QMAKE_EXTRA_TARGETS += JsonConfig\n\n#    QMAKE_POST_LINK += $$quote(echo \"making json\"; make JsonConfig;)\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "neurolabi/gui/gui.pro" : {
      "ObjectId" : "12dd0cccb99fe37d61c24fd98594d2d3c9236dbd",
      "LastModified" : "2018-10-23T19:26:14Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# #####################################################################\n\n# Automatically generated by qmake (2.01a) Mon Dec 15 16:16:33 2008\n\n# #####################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#DEFINES+=_CLI_VERSION\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#/GL # Enables whole program optimization.\n",
        "Line" : 30,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "#QMAKE_LFLAGS += /LTCG # Link-time Code Generation\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# 'var' : conversion from 'size_t' to 'type', possible loss of data\n\n# 'argument' : conversion from 'type1' to 'type2', possible loss of data\n\n# 'identifier' : truncation from 'type1' to 'type2'\n\n# The file contains a character that cannot be represented in the current code page (number). Save the file in Unicode format to prevent data loss.\n\n# https://blogs.msdn.microsoft.com/vcblog/2016/02/22/new-options-for-managing-character-sets-in-the-microsoft-cc-compiler/\n",
        "Line" : 35,
        "CharPositionInLine" : 30
      },
      "5" : {
        "Text" : "#    QMAKE_POST_LINK += $$DEPLOYMENT_COMMAND\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#    QMAKE_CXXFLAGS += -g\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# suppress warnings from 3rd party library, works for gcc and clang\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#Machine information\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message($$GIT)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Qt4 (Obsolete)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Qt5\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# gtest from ext folder\n",
        "Line" : 190,
        "CharPositionInLine" : 23
      },
      "13" : {
        "Text" : "#        DEFINES += _NEUTUBE_MAC_\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#        config.files = config.xml\n\n#        config.path = Contents/MacOS\n\n#        QMAKE_BUNDLE_DATA += config\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#macx\n",
        "Line" : 273,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Input\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#debugging\n",
        "Line" : 1607,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "neurolabi/gui/gui_free.pri" : {
      "ObjectId" : "056d176be9043c2ff88b399f6c6f734e7ff4591d",
      "LastModified" : "2018-11-12T12:34:28Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/imgproc/imgproc.pri" : {
      "ObjectId" : "78b80f6086c2fd3a03fadcfc7074bf194a64e355",
      "LastModified" : "2018-10-23T19:26:14Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#Project module for image processing\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "neurolabi/gui/json.pri" : {
      "ObjectId" : "be5e3808c1b347906791b2c3fac7e3de862237dc",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/mylib/mylib.pri" : {
      "ObjectId" : "0d48c66f647e513981daa9708d5e7a28cb8f7d9e",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/neutuse/neutuse.pri" : {
      "ObjectId" : "ffe342c0765a30c8d57732f0064bed067094f849",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/sandbox/sandbox.pri" : {
      "ObjectId" : "e57ae50de9e87f6dae7d257a60abc7e7f65edf5e",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/test/test.pri" : {
      "ObjectId" : "c92ba077bfc4fcbc19b818e087e46b68cc9c18b7",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/gui/trace/trace.pri" : {
      "ObjectId" : "71c05bdf366b34ff07430919877d0be846cd0ba1",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "neurolabi/lib/genelib/src/genelib.cmake" : {
      "ObjectId" : "23c0d734918a521374d4a85192750fa84f70870d",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Syntax: \n\n#   add_p_file(<outputlist> <p file>)\n\n# Adds a build rule for the specified p file. The absolute paths of the generated \n\n# files are added to the <outputlist> list.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only process *.p files\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "neurolabi/mex/Makefile" : {
      "ObjectId" : "8b9b533f3fd62f87031844cd18e7a4f6d63932c3",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#$@ target $^ dependencies $< first dep\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For Mac OS \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Matlab root directory. \n\n# Pass a different one if yours is not /Applications/MATLAB74\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#LIBS = -L$(CDIR) -lm -lneurolabi -L./ -L../c/lib -ltzhelper  -L$(MYERS_DIR) -lmyers -L/usr/lib -L/Applications/MATLAB_R2012b.app/bin/maci64\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-cxx CC=$(CXX) CXX=$(CXX) LD=$(CXX) \n",
        "Line" : 27,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 5
    },
    "neurolabi/python/module/Makefile" : {
      "ObjectId" : "2da2112bea5e453f477816d5dfa0e91dfa5b43de",
      "LastModified" : "2018-10-11T14:20:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#stack_io.i stack_attribute.i zobject3dscan.i zpointarray.i\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SHARE_FLAG = dynamiclib\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#RPATH_FLAG = -install_name @rpath/$(PREFIX)/lib/libhdf5.dylib\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# On Mac, this command:\n\n# python3-config --ldflags\n\n# ...returns a string that includes '-Wl,-stack_size,1000000', which results in an error:\n\n# ld: -stack_size option can only be used when linking a main executable\n\n# So, let's get rid of it.\n\n# (BTW, we're not the only ones with this problem: https://github.com/waf-project/waf/issues/1745#issuecomment-220554258)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 35,
    "QMAKE" : 25,
    "MAKEFILE" : 6,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 7557
}