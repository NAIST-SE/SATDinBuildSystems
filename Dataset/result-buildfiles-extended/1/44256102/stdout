{
  "Repository" : "44256102",
  "Revision" : "HEAD",
  "ObjectId" : "f54f05313e09e64c0ca3a697cd74db5d3faddc0e",
  "CommitTime" : "2018-12-15T19:05:08Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "47b889bed723bba1402b546494e1a32add71c16c",
      "LastModified" : "2018-10-16T09:18:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# uninstall target\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fix bug on APPLE, this is the default everywhere\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Additional options\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Use absolute RPATH when linking to avoid needing to export LD_LIBRARY_PATH\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Process various options\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Find packages\n\n#\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Temporary solution is to use VecMath_INCLUDES/LIBRARIES variables since GV does not support modern cmake targets\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Find Geant4 package, activating all available UI and Vis drivers by default\n\n# You can set WITH_GEANT4_UIVIS to OFF via the command line or ccmake/cmake-gui\n\n# to build a batch mode only executable\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Set pathes where to put the libraries, executables and headers\n\n#\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Find VecGeom geometry headers library\n\n#\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---ensure that GeantV is compiled with same architecture flags as VecGeom\n",
        "Line" : 208,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "#---- For the moment USE_ROOT must match VECGEOM_ROOT ----\n",
        "Line" : 215,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Find ROOT and setup the libraries\n\n#\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# You need to tell CMake where to find the ROOT installation. This can be done in a number of ways:\n\n#   - ROOT built with classic configure/make use the provided $ROOTSYS/etc/cmake/FindROOT.cmake\n\n#   - ROOT built with CMake. Add in CMAKE_PREFIX_PATH the installation prefix for ROOT\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#---Locate the ROOT package and defines a number of variables (e.g. ROOT_INCLUDE_DIRS)\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#---Define useful ROOT functions and macros (e.g. ROOT_GENERATE_DICTIONARY)\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# ROOT adds some of these flags. If we do not use ROOT, we have to add them by hand\n\n#\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#Find TBB and setup the libraries\n\n#\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Find if the system is NUMA aware\n\n#----------------------------------------------------------------------------\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disable NUMA for APPLE\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Check the presence of hwloc library\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Find GPERFTOOLS\n\n#----------------------------------------------------------------------------\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Nudy\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# KNL\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Load macros\n\n#\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# see if we have CCACHE ( to avoid recompilation on branch switches )\n\n#\n\n# TBD: Temporary disabling ccache for GeantV (no sudo access to CI node)\n\n#find_program(CCACHE_FOUND ccache)\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Include creation and submission to dashboard cdash.cern.ch\n\n#\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Set data to be dowloaded\n\n#\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Handle compiler flags\n\n#\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# using Clang\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# using GCC\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Actually this should really be if VecGeomConfigureToUseVC\n",
        "Line" : 383,
        "CharPositionInLine" : 21
      },
      "35" : {
        "Text" : "# using Intel C++\n",
        "Line" : 391,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# add flag by hand if CMake does not support ICC\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O1\")\n",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined\")\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Currently we are stuck with gcc 4.8 and a broken Weffc++ so let's not us it there\n",
        "Line" : 444,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Handle custom alloactor\n\n#\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# CUDA section\n\n#\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# We must have those over-ride placed here as they need to be done before loading FindCUDA.cmake\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# all good\n",
        "Line" : 490,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# all good\n",
        "Line" : 492,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# set(CUDA_SEPARABLE_COMPILATION ON)\n\n# set(CUDA_VERBOSE_BUILD ON)\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# FindCUDA.mk generate cmake file for each .o file using\n\n# the cmake command:\n\n#   file(GENERATE\n\n#      OUTPUT \"${custom_target_script}\"\n\n#      INPUT \"${custom_target_script_pregen}\"\n\n#      )\n\n# However this fails to register the output as a 'BYPRODUCTS'\n\n# and thus, since the .o file depends on it, trigger the CMP0058\n\n# warning (when using Ninja).\n\n# Using a add_custom_target/command does not work there as\n\n# neither the OUTPUT not the BYPRODUCTS parameter supports\n\n# generator expression (and ${custom_target_script} is a\n\n# generator expression depending on the configuration type).\n\n# Consequently there is no (known to the author) way of\n\n# correctly adding the correct information at the moment.\n\n# So let's just use the old policy (even-though it is\n\n# deprecated ... )\n\n# Note: this is a feature introduced in CMake 3.6 to\n\n# support  generator expressions in CUDA_NVCC_FLAGS\n\n# and since we imported that version's FindCUDA.cmake\n\n# it applies to all cmake that support CMP0058.\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Include directories\n\n#\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#include_directories(\"${PROJECT_SOURCE_DIR}/physics/kernel/material/inc\")\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add subdirectories\n\n#\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Process Doxygen file\n\n#\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "7d2cb4b5c817f23d6c7fe0e3fc356aa49964bfdb",
      "LastModified" : "2015-11-18T13:32:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n## ENABLE_TESTING()\n\n## INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCppUnit.cmake" : {
      "ObjectId" : "22bd8682e68b287557ac3d3461d848fccc2aef52",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find CppUnit\n\n# This module finds an installed CppUnit package.\n\n#\n\n# It sets the following variables:\n\n#  CPPUNIT_FOUND       - Set to false, or undefined, if CppUnit isn't found.\n\n#  CPPUNIT_INCLUDE_DIR - The CppUnit include directory.\n\n#  CPPUNIT_LIBRARY     - The CppUnit library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which CppUnit was found only if not quiet\n",
        "Line" : 18,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if CppUnit is required but not found\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/modules/DoxygenSetup.cmake" : {
      "ObjectId" : "80c68516ca36acc1e93153ddf99e23e95f2c5c08",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Doxygen documentation\n\n# based on the files from Tobias Rautenkrantz # https://tobias.rautenkranz.ch/cmake/doxygen/\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## LaTeX\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindCAllocator.cmake" : {
      "ObjectId" : "7ac814bc677231c180c202e0fec04644fdd88040",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds CUSTOM_ALLOCATOR\n\n# This module sets up ROOT information \n\n# It defines:\n\n# CALLOC_FOUND        If custom allocator is found\n\n# CALLOC_LIBRARY      Location of the custo allocator library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindCUDA.cmake" : {
      "ObjectId" : "6560e44714c985cc55f6b3192f9844e5a8cfba8e",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from within VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Note: The next two lines have been modified\n\n#  get_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# NOTE: Add a duplicate of FindHelper to find our overload files when needed.\n\n# NOTE: It turns out that this is actually the code of the official CUDA_FIND_HELPER_FILE\n\n# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 395,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 410,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 455,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 457,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 462,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 473,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 517,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 526,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 587,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 589,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 635,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Now search default paths\n",
        "Line" : 647,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 678,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 681,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 695,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 701,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 709,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 718,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Compute the version.\n",
        "Line" : 723,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 730,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 741,
        "CharPositionInLine" : 21
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 764,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 768,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 780,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 801,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 815,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 819,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 826,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 832,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 849,
        "CharPositionInLine" : 6
      },
      "72" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 858,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 864,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 881,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 889,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 898,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 913,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 915,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 941,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 965,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 979,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 994,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 998,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 1004,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1019,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "#Note: Next two lines are modified\n\n#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 1030,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1045,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1051,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "##############################################################################\n",
        "Line" : 1060,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Note: added support for cmake version older than 3.6\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1073,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1097,
        "CharPositionInLine" : 8
      },
      "101" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1104,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1110,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1115,
        "CharPositionInLine" : 8
      },
      "104" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1126,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1145,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1164,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1171,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1175,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1186,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1189,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1191,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1195,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1198,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1204,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1207,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1225,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1227,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1237,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1242,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1246,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Emulation.\n",
        "Line" : 1248,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1251,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1277,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1287,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1297,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1300,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1309,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1314,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1319,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1329,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1332,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# STATIC\n",
        "Line" : 1338,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1344,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1346,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1352,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1361,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1364,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1368,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1392,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1402,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1407,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1419,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1422,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1425,
        "CharPositionInLine" : 4
      },
      "146" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1427,
        "CharPositionInLine" : 4
      },
      "147" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1434,
        "CharPositionInLine" : 6
      },
      "148" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1457,
        "CharPositionInLine" : 8
      },
      "149" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1465,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1478,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1496,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1507,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1511,
        "CharPositionInLine" : 31
      },
      "154" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1515,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1527,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1530,
        "CharPositionInLine" : 6
      },
      "157" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1537,
        "CharPositionInLine" : 6
      },
      "158" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1545,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1552,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1569,
        "CharPositionInLine" : 6
      },
      "161" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1582,
        "CharPositionInLine" : 6
      },
      "162" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1585,
        "CharPositionInLine" : 8
      },
      "163" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1589,
        "CharPositionInLine" : 8
      },
      "164" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1603,
        "CharPositionInLine" : 6
      },
      "165" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1608,
        "CharPositionInLine" : 6
      },
      "166" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1616,
        "CharPositionInLine" : 2
      },
      "167" : {
        "Text" : "###############################################################################\n\n## Work around cmake deficiency ...\n",
        "Line" : 1631,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1637,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1643,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1655,
        "CharPositionInLine" : 0
      },
      "171" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1661,
        "CharPositionInLine" : 27
      },
      "172" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1666,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1674,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1678,
        "CharPositionInLine" : 6
      },
      "175" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1686,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1691,
        "CharPositionInLine" : 6
      },
      "177" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "178" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1708,
        "CharPositionInLine" : 4
      },
      "179" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1713,
        "CharPositionInLine" : 4
      },
      "180" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1719,
        "CharPositionInLine" : 6
      },
      "181" : {
        "Text" : "# NOTE: from here to 'NOTE: END', code copy pasted and slightly adapted from\n\n# CUDA_WRAP_SRCS (in this file) and the content of FindCUDA/run_nvcc.cmake\n",
        "Line" : 1728,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1733,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1736,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# STATIC\n",
        "Line" : 1742,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1748,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1750,
        "CharPositionInLine" : 4
      },
      "187" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1756,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 1765,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "#message(STATUS2: \"-${CUDA_HOST_SHARED_FLAGS}= -${nvcc_host_compiler_flags}=\")\n",
        "Line" : 1772,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "# NOTE: END\n",
        "Line" : 1774,
        "CharPositionInLine" : 0
      },
      "191" : {
        "Text" : "# Note: added this setting.\n",
        "Line" : 1777,
        "CharPositionInLine" : 6
      },
      "192" : {
        "Text" : "# The link file is for ${cuda_target} and ${cuda_target}_static is the 'raw' library\n",
        "Line" : 1779,
        "CharPositionInLine" : 9
      },
      "193" : {
        "Text" : "# The link file is for ${cuda_target}_final and ${cuda_target} is the 'raw' library\n",
        "Line" : 1782,
        "CharPositionInLine" : 9
      },
      "194" : {
        "Text" : "# NOTE: added ${_cuda_target_dep}. the dependency is correct as ${output_file} is linked against ${cuda_target}\n\n# and then included in ${cuda_target}_final (or ${cuda_target}_static and ${cuda_target}.so resp.)\n\n# ADD_DEPENDENCIES(${output_file} )\n",
        "Line" : 1790,
        "CharPositionInLine" : 10
      },
      "195" : {
        "Text" : "# NOTE: Added $<TARGET_PROPERTY:${cuda_target},CUDA_LIBRARY_DEPEND>\n\n# Replaced with a trampoline function (to be used VERBATIM) so that we can properly substitute the\n\n# content of the CUDA_LIBRARY_DEPEND property even it contains more than one value.\n",
        "Line" : 1794,
        "CharPositionInLine" : 10
      },
      "196" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY CUDA SPECIFIC DEPENDENCY\n\n###############################################################################\n\n###############################################################################\n\n#NOTE: This entire macro is added.\n",
        "Line" : 1817,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "# cuda_depend)\n",
        "Line" : 1823,
        "CharPositionInLine" : 43
      },
      "198" : {
        "Text" : "# Using:\n\n#   get_property(target_location TARGET ${arg} PROPERTY LOCATION)\n\n# leads to:\n\n#   LOCATION property may not be read from target \"vecgeomcuda\".  Use the\n\n#   target name directly with add_custom_command, or use the generator\n\n#   expression $<TARGET_FILE>, as appropriate.\n\n# and using\n\n#   $<TARGET_FILE:${arg}>\n\n# leads to '$<' being expanded to the intermeidary target instead ...\n\n# So for now the user is forced to repeat :(\n",
        "Line" : 1828,
        "CharPositionInLine" : 6
      },
      "199" : {
        "Text" : "#message( \"In CUDA_ADD_LIBRARY_DEPEND for ${cuda_target} specifying a target name is not yet supported (The target is: '${arg}')\")\n",
        "Line" : 1839,
        "CharPositionInLine" : 9
      },
      "200" : {
        "Text" : "#message( \"In CUDA_ADD_LIBRARY_DEPEND specifying a NON target name is not yet supported (The target is: '${arg}')\")\n",
        "Line" : 1842,
        "CharPositionInLine" : 9
      },
      "201" : {
        "Text" : "#message(\"In CUDA_ADD_LIBRARY_DEPEND@target:${cuda_target} we have:  ${_lib_dependencies}\")\n",
        "Line" : 1846,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1853,
        "CharPositionInLine" : 0
      },
      "203" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1862,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1865,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1870,
        "CharPositionInLine" : 2
      },
      "206" : {
        "Text" : "# Figure out if we are building a shared library.\n",
        "Line" : 1874,
        "CharPositionInLine" : 2
      },
      "207" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1876,
        "CharPositionInLine" : 2
      },
      "208" : {
        "Text" : "# STATIC\n",
        "Line" : 1882,
        "CharPositionInLine" : 2
      },
      "209" : {
        "Text" : "# Note: Added the construction a _static.a library when generating a\n\n# shared library.\n",
        "Line" : 1888,
        "CharPositionInLine" : 2
      },
      "210" : {
        "Text" : "# Add the library for intermediary use\n",
        "Line" : 1892,
        "CharPositionInLine" : 4
      },
      "211" : {
        "Text" : "#NOTE: this is commented out from the original\n\n# ${link_file}\n",
        "Line" : 1896,
        "CharPositionInLine" : 6
      },
      "212" : {
        "Text" : "# Add the library for intermediary use\n",
        "Line" : 1905,
        "CharPositionInLine" : 4
      },
      "213" : {
        "Text" : "#NOTE: this is commented out from the original\n\n# ${link_file}\n",
        "Line" : 1909,
        "CharPositionInLine" : 6
      },
      "214" : {
        "Text" : "# NOTE: this is a new statement\n\n# Add the library for final use (link into executable or shared library)\n",
        "Line" : 1918,
        "CharPositionInLine" : 2
      },
      "215" : {
        "Text" : "# NOTE: these are two new statements\n",
        "Line" : 1926,
        "CharPositionInLine" : 2
      },
      "216" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1934,
        "CharPositionInLine" : 2
      },
      "217" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1943,
        "CharPositionInLine" : 2
      },
      "218" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1953,
        "CharPositionInLine" : 0
      },
      "219" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1962,
        "CharPositionInLine" : 2
      },
      "220" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1964,
        "CharPositionInLine" : 2
      },
      "221" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1967,
        "CharPositionInLine" : 2
      },
      "222" : {
        "Text" : "# Add the library.\n",
        "Line" : 1971,
        "CharPositionInLine" : 2
      },
      "223" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1978,
        "CharPositionInLine" : 2
      },
      "224" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1987,
        "CharPositionInLine" : 2
      },
      "225" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1997,
        "CharPositionInLine" : 0
      },
      "226" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 2003,
        "CharPositionInLine" : 2
      },
      "227" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 2014,
        "CharPositionInLine" : 2
      },
      "228" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 2017,
        "CharPositionInLine" : 2
      },
      "229" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2025,
        "CharPositionInLine" : 0
      },
      "230" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2034,
        "CharPositionInLine" : 0
      },
      "231" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2043,
        "CharPositionInLine" : 0
      },
      "232" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2052,
        "CharPositionInLine" : 0
      },
      "233" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2062,
        "CharPositionInLine" : 0
      },
      "234" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2075,
        "CharPositionInLine" : 0
      },
      "235" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2088,
        "CharPositionInLine" : 0
      },
      "236" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 2094,
        "CharPositionInLine" : 2
      },
      "237" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 2105,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 238
    },
    "cmake/modules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "28cc1e99ead5fd01707161d7ba6d72b2464e7a70",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 77,
        "CharPositionInLine" : 69
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 78,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 79,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Generate the code\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 54
    },
    "cmake/modules/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "5ce71a910331ebe7fb4aef8fa8c88ef30aadf7b0",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 123,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 180,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cmake/modules/FindCppUnit.cmake" : {
      "ObjectId" : "22bd8682e68b287557ac3d3461d848fccc2aef52",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find CppUnit\n\n# This module finds an installed CppUnit package.\n\n#\n\n# It sets the following variables:\n\n#  CPPUNIT_FOUND       - Set to false, or undefined, if CppUnit isn't found.\n\n#  CPPUNIT_INCLUDE_DIR - The CppUnit include directory.\n\n#  CPPUNIT_LIBRARY     - The CppUnit library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which CppUnit was found only if not quiet\n",
        "Line" : 18,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if CppUnit is required but not found\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindGperftools.cmake" : {
      "ObjectId" : "cd990662cf1b197890f1e0662a1cde08b6f03ca3",
      "LastModified" : "2018-06-20T12:34:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to find Gperftools.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Gperftools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Gperftools_ROOT_DIR  Set this variable to the root installation of\n\n#                       Gperftools if the module has problems finding\n\n#                       the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GPERFTOOLS_FOUND              System has Gperftools libs/headers\n\n#  GPERFTOOLS_LIBRARIES          The Gperftools libraries (tcmalloc & profiler)\n\n#  GPERFTOOLS_INCLUDE_DIR        The location of Gperftools headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindNuma.cmake" : {
      "ObjectId" : "a72bb24e2ef6f8c494a92e6e66acb5fefd7c79bf",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module for locating libnuma\n\n#\n\n# Read-only variables:\n\n#   NUMA_FOUND\n\n#     Indicates that the library has been found.\n\n#\n\n#   NUMA_INCLUDE_DIR\n\n#     Points to the libnuma include directory.\n\n#\n\n#   NUMA_LIBRARY_DIR\n\n#     Points to the directory that contains the libraries.\n\n#     The content of this variable can be passed to link_directories.\n\n#\n\n#   NUMA_LIBRARY\n\n#     Points to the libnuma that can be passed to target_link_libararies.\n\n#\n\n# Copyright (c) 2015 Steve Borho\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindPythia8.cmake" : {
      "ObjectId" : "174db75682f4be5c3bdebdeb38e9cd9fdb7026e2",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate pythia8 libraries and includes\n\n# Defines:\n\n#\n\n#  PYTHIA8_FOUND\n\n#  PYTHIA8_VERSION\n\n#  PYTHIA8_INCLUDE_DIR\n\n#  PYTHIA8_INCLUDE_DIRS (not cached)\n\n#  PYTHIA8_LIBRARY\n\n#  PYTHIA8_hepmcinterface_LIBRARY\n\n#  PYTHIA8_lhapdfdummy_LIBRARY\n\n#  PYTHIA8_LIBRARIES (not cached) : for PYTHIA8_VERSION < 200 includes 3 libraries above; not to be used if lhapdf is used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(PYTHIA8_INCLUDE_DIRS ${PYTHIA8_INCLUDE_DIR} ${PYTHIA8_INCLUDE_DIR}/Pythia8 )\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PYTHIA8_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindTBB.cmake" : {
      "ObjectId" : "76daff82cb31d352346d6ab12b173fec12f2fabf",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The MIT License (MIT)\n\n#\n\n# Copyright (c) 2015 Justus Calvin\n\n# \n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n# \n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n# \n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# FindTBB\n\n# -------\n\n#\n\n# Find TBB include directories and libraries.\n\n#\n\n# Usage:\n\n#\n\n#  find_package(TBB [major[.minor]] [EXACT]\n\n#               [QUIET] [REQUIRED]\n\n#               [[COMPONENTS] [components...]]\n\n#               [OPTIONAL_COMPONENTS components...]) \n\n#\n\n# where the allowed components are tbbmalloc and tbb_preview. Users may modify \n\n# the behavior of this module with the following variables:\n\n#\n\n# * TBB_ROOT_DIR          - The base directory the of TBB installation.\n\n# * TBB_INCLUDE_DIR       - The directory that contains the TBB headers files.\n\n# * TBB_LIBRARY           - The directory that contains the TBB library files.\n\n# * TBB_<library>_LIBRARY - The path of the TBB the corresponding TBB library. \n\n#                           These libraries, if specified, override the \n\n#                           corresponding library search results, where <library>\n\n#                           may be tbb, tbb_debug, tbbmalloc, tbbmalloc_debug,\n\n#                           tbb_preview, or tbb_preview_debug.\n\n# * TBB_USE_DEBUG_BUILD   - The debug version of tbb libraries, if present, will\n\n#                           be used instead of the release version.\n\n#\n\n# Users may modify the behavior of this module with the following environment\n\n# variables:\n\n#\n\n# * TBB_INSTALL_DIR \n\n# * TBBROOT\n\n# * LIBRARY_PATH\n\n#\n\n# This module will set the following variables:\n\n#\n\n# * TBB_FOUND             - Set to false, or undefined, if we haven’t found, or\n\n#                           don’t want to use TBB.\n\n# * TBB_<component>_FOUND - If False, optional <component> part of TBB sytem is\n\n#                           not available.\n\n# * TBB_VERSION           - The full version string\n\n# * TBB_VERSION_MAJOR     - The major version\n\n# * TBB_VERSION_MINOR     - The minor version\n\n# * TBB_INTERFACE_VERSION - The interface version number defined in \n\n#                           tbb/tbb_stddef.h.\n\n# * TBB_<library>_LIBRARY_RELEASE - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n# * TBB_<library>_LIBRARY_DEGUG - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n#\n\n# The following varibles should be used to build and link with TBB:\n\n#\n\n# * TBB_INCLUDE_DIRS - The include directory for TBB.\n\n# * TBB_LIBRARIES    - The libraries to link against to use TBB.\n\n# * TBB_DEFINITIONS  - Definitions to use when compiling code that uses TBB.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################\n\n# Check the build type\n\n##################################\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##################################\n\n# Set the TBB search directories\n\n##################################\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Define search paths based on user input and environment variables\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Define the search directories based on the current platform\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the target architecture\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set the TBB search library path search suffix based on the version of VC\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add the library path search suffix for the VC independent version of TBB\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# OS X\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Linux\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "##################################\n\n# Find the TBB include dir\n\n##################################\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "##################################\n\n# Find TBB components\n\n##################################\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Find each component\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Search for the libraries\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Set the library to be used for the component\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set the TBB library list and component found variables\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "##################################\n\n# Set compile flags\n\n##################################\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "##################################\n\n# Set version strings\n\n##################################\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cmake/modules/FindValgrind.cmake" : {
      "ObjectId" : "f9da1dbd0517495083a53f10dcc7595fa8721e95",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find Valgrind.\n\n#\n\n# This module defines:\n\n# VALGRIND_INCLUDE_DIR, where to find valgrind/memcheck.h, etc.\n\n# VALGRIND_PROGRAM, the valgrind executable.\n\n# VALGRIND_FOUND, If false, do not try to use valgrind.\n\n#\n\n# If you have valgrind installed in a non-standard place, you can define\n\n# VALGRIND_PREFIX to tell cmake where it is.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/Findhwloc.cmake" : {
      "ObjectId" : "0eb3d91eee65d9be49c47a75826ca6ac9f733d14",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module for locating libhwloc\n\n#\n\n# Read-only variables:\n\n#   hwloc_FOUND\n\n#     Indicates that the library has been found.\n\n#\n\n#   HWLOC_LIBRARIES\n\n#     Points to the d\n\n#     The content of this variable can be passed to target_link_libraries.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to fetch the contents of the .pc file\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  include(FindPackageHandleStandardArgs)\n\n#  find_package_handle_standard_args(hwloc DEFAULT_MSG hwloc_LIBRARIES hwloc_INCLUDE_DIR)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  set(HWLOC_LIBRARIES ${HWLOC_LIBDIR}/libhwloc)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/GeantMacros.cmake" : {
      "ObjectId" : "966a7b0a53910269c41ca1056c11bfddc558872e",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define a function downloading from a URL into a local file LOCALFILE\n",
        "Line" : 1,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#execute_process(COMMAND curl ${FILE_URL} -o  ${LOCALFILE})\n",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "#file(DOWNLOAD ${FILE_URL} ${FILE_URL})\n",
        "Line" : 8,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# end of function FILE DOWNLOAD\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# define a function checking md5 hashes\n\n# result is stored in MD5MATCHES ( 1 == true, 0 == false )\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# actual function for managing the download\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# set need download\n",
        "Line" : 36,
        "CharPositionInLine" : 7
      },
      "7" : {
        "Text" : "# check md5\n",
        "Line" : 40,
        "CharPositionInLine" : 7
      },
      "8" : {
        "Text" : "# do not set download flag\n",
        "Line" : 44,
        "CharPositionInLine" : 11
      },
      "9" : {
        "Text" : "# set need download\n",
        "Line" : 47,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# in principle have to check now if download succeeded and has right MD5\n\n# TOBEDONE\n",
        "Line" : 60,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# this is annoying but we have to clear FOUNDFILE SINCE THIS IS TREATED LIKE A STATIC VARIABLE\n",
        "Line" : 63,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# function to calculate the path of the current source directory related to the project source directory\n\n# The result is stored in ${RelativeCurrentSourceDir}\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Generic Physics Test CMakeLists.txt\n\n# If the source file name is not specified, assumes that it is the same name as the directory name.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Geant4\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Executable\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Copy all scripts to the build/install directory.\n\n#\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/modules/RecordCmdLine.cmake" : {
      "ObjectId" : "d4036dd0686f85c06468a175356536b0c36cc466",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n#\n\n# Try to capture the initial set of cmake command line args passed by\n\n# the user for configuration.\n\n# Original Recipe taken from http://stackoverflow.com/questions/10205986/how-to-capture-cmake-command-line-arguments\n\n#\n\n# Note: The entries will live on CMakeCache.txt, so re-configuring with\n\n# a command line that doesn't include an option won't remove it. You need\n\n# to remove the CMakeCache.txt file, or override the value via the command line.\n\n#\n\n# The original cmake command is recorded as:\n\n#     recmake_initial.sh\n\n# The history of tweaks to the configuration (except those from ccmake) is\n\n# recorded as:\n\n#     recmake_replay.sh\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Record the full command line invocation.\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create a simple shell script that allows us to reinvoke cmake with the captured command line.\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/expand_command.cmake" : {
      "ObjectId" : "df0560201eb7f4a532c2c647c96163dfb81c81ce",
      "LastModified" : "2018-02-09T18:36:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains a generic workaround to cause a list generated by\n\n# a generator expression to be expanded when used as the COMMAND to\n\n# add_custom_command() or add_custom_target().\n\n# Using this workaround:\n\n#  - include this file in CMakeLists.txt\n\n#  - call expandable_command(<retvar> <command> [arg1] [arg2] ...)\n\n#  - use the <retvar> from above as the COMMAND to add_custom_target()\n\n#       or add_custom_command().\n\n# Example to execute\n\n#  echo a generated list\n\n# code:\n\n#  include(/path/to/expand_command.cmake)\n\n#  expandable_command(cmdline echo $<TARGET_PROPERTY:echo,MSGLIST>)\n\n#  add_custom_target(echo ALL COMMAND ${cmdline} VERBATIM)\n\n#  set_property(TARGET echo PROPERTY MSGLIST a generated list)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==== This section is processed at configuration time when included\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Check if we are a case like VecGeom + VecCore where CUDA is\n\n# initialized by a sub-project (VecCore) but is used also in the\n\n# top project (VecGeom)\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#==== This section is the command wrapper run at build time\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "core/CMakeLists.txt" : {
      "ObjectId" : "b9c8f35871bd80b94ef8c85aba146d10ac8ce46d",
      "LastModified" : "2018-02-27T23:27:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add subdirectories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "core/base/CMakeLists.txt" : {
      "ObjectId" : "53d76c26da4f32413eed3dc2d2b863ecc3791463",
      "LastModified" : "2018-02-27T23:27:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library building currently handled by run/scheduler/CMakeLists.txt\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "core/concurrency/CMakeLists.txt" : {
      "ObjectId" : "122a9fd7ca4154e43fb37d05a4cd33f449d3ba0e",
      "LastModified" : "2018-02-27T23:27:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library building currently handled by run/scheduler/CMakeLists.txt\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "core/cuda/CMakeLists.txt" : {
      "ObjectId" : "d640dc1b86b7994028053d3e0ea4208c26c2dd0b",
      "LastModified" : "2018-02-09T19:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All currently handled by run/scheduler/cuda/CMakeLists.txt\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "core/interfaces/CMakeLists.txt" : {
      "ObjectId" : "3596b2ad2dbbee900c58afcea6d4d28d6cfae853",
      "LastModified" : "2018-02-27T23:27:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library building currently handled by run/scheduler/CMakeLists.txt\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "core/numa/CMakeLists.txt" : {
      "ObjectId" : "230eb1dbeabad5a4d3ebfc2c861776453171171a",
      "LastModified" : "2018-02-28T17:14:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Set include directories\n\n#----------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n#----------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add traget library and dependencies\n\n#----------------------------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "6a912c4c06a72a9999322cd186926d9c9676a058",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Template/Macro to use in examples' CMakeLists.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This assumes that the files are examples/ExampleName/Geant[4V]\n",
        "Line" : 13,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Build executables\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Copy all scripts and install the executable(s)\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# message(WARNING \"conf ${_script} to ${CMAKE_BINARY_DIR}/${FullCMS_OUTPUT}/${script_name} \")\n",
        "Line" : 63,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add subdirectories\n\n#\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "91d8b6951211ce955609692ae797250bfcdc644c",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate and install benchmark scripts\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/magneticfield/simplifiedCMS/CMakeLists.txt" : {
      "ObjectId" : "759e9f4b0b724ee6d72b119e6022f40dd1dc684e",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Added to include root. Used for graph plotting.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Copies cms2015.txt to build/examples/magneticfield/simplifiedCMS at runtime \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_executable(Vecmagfieldtest ${CMAKE_CURRENT_SOURCE_DIR}/test/magfieldtest.cpp ${sources})\n\n#target_link_libraries(Vecmagfieldtest ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_executable(smallTest ${CMAKE_CURRENT_SOURCE_DIR}/test/smallTest.cpp ${sources})\n\n#target_link_libraries(smallTest ${ALL_LIBRARIES}) # ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 39,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : "# ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 43,
        "CharPositionInLine" : 61
      },
      "6" : {
        "Text" : "#  ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 47,
        "CharPositionInLine" : 53
      },
      "7" : {
        "Text" : "#add_executable(VecFloatDoubleDiff ${CMAKE_CURRENT_SOURCE_DIR}/test/FloatDoubleDiff.cpp ${sources})\n\n#target_link_libraries(VecFloatDoubleDiff ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#add_executable(VecTestGatherAlias ${CMAKE_CURRENT_SOURCE_DIR}/test/TestGatherAlias.cpp ${sources})\n\n#target_link_libraries(VecTestGatherAlias ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 56,
        "CharPositionInLine" : 51
      },
      "10" : {
        "Text" : "#add_executable(VecTestVector3D ${CMAKE_CURRENT_SOURCE_DIR}/test/testVector3D.cpp)\n\n#target_link_libraries(VecTestVector3D ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_executable(VecBoundariesGraph ${CMAKE_CURRENT_SOURCE_DIR}/test/visualizations/GraphsForBoundaries.cpp ${sources})\n\n#target_link_libraries(VecBoundariesGraph ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add_executable(smallTest ${CMAKE_CURRENT_SOURCE_DIR}/test/smallTest.cpp ${sources})\n\n# target_link_libraries(smallTest ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${Vc_LIBRARIES} ${USERKERNELLIB})\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "examples/magneticfield/simplifiedCMS/MagFieldRoutine/CMakeLists.txt" : {
      "ObjectId" : "d252323ff309b77055b260a03bf5dc46de3c7532",
      "LastModified" : "2018-03-02T20:06:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Added to detect compiler support for C++11\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (USE_ANANYA)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_definitions(-DANANYA)\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#endif (USE_ANANYA)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Copies cms2015.txt to build/examples/magneticfield/simplifiedCMS at runtime \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Added to include root. Used for graph plotting.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "examples/physics/CMakeLists.txt" : {
      "ObjectId" : "12d50c7d65f939ee218c4684847efcbaf266f749",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add include directories, sources and headers\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (USE_ROOT)\n\n#  ROOT_GENERATE_DICTIONARY(G__ExamplesRP ${headers} MODULE GeantExamplesRP\n\n#    LINKDEF\n\n#    ${CMAKE_SOURCE_DIR}/examples/physics/TestEm5/GeantV/inc/Geant/LinkDef.h\n\n#    )\n\n#    set(sources ${sources} G__ExamplesRP.cxx)\n\n#endif()\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Library and dependencies\n\n#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#if(USE_ROOT)\n\n#  install(FILES ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libGeantExamplesRP.rootmap\n\n#    ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libGeantExamplesRP_rdict.pcm DESTINATION lib)\n\n#endif()\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the example applications\n\n#\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The Geant4 version of the example applications (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "examples/physics/FullCMS/Geant4/CMakeLists.txt" : {
      "ObjectId" : "49fee5d4c030fe5cfa6b1b049f0544765254e8b0",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Find Geant4 package, batch mode only executable (i.e. no need ui and vis).\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup Geant4 include directories and compile definitions\n\n# Setup include directory for this project\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Copy all scripts to the build/OUTPUT directory. This is so that, after\n\n# install, we can run the executable directly because it relies on these\n\n# scripts being in the current working directory.\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin/examples/FullCMS/Geant4' directory under the\n\n# CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/physics/FullCMS/GeantV/CMakeLists.txt" : {
      "ObjectId" : "f0f950e68d5ce66a3cce32389443f8956fe60638",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set to 2 or more to exclude from the default set\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following can usually be guessed from the directory name.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generic Part that can be used for other examples.\n\n# The macro is declared in ./examples/CMakeLists.txt\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/physics/FullLHCb/GeantV/CMakeLists.txt" : {
      "ObjectId" : "f6752e288b5912f5312c1666df0c729dcdb05957",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set to 2 or more to exclude from the default set\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following can usually be guessed from the directory name.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generic Part that can be used for other examples.\n\n# The macro is declared in ./examples/CMakeLists.txt\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/physics/TestEm3/Geant4/CMakeLists.txt" : {
      "ObjectId" : "d9f9cd84bf2baee95a9d474a51f76fb4871479cf",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Find Geant4 package, activating all available UI and Vis drivers by default\n\n# You can set WITH_GEANT4_UIVIS to OFF via the command line or ccmake/cmake-gui\n\n# to build a batch mode only executable\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup Geant4 include directories and compile definitions\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${OUTPUT})\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Copy all scripts to the build/install directory.\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#     configure_file(\n\n#       ${_script}\n\n#       ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${_script}\n\n#       COPYONLY\n\n#     )\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "examples/physics/TestEm3/GeantV/CMakeLists.txt" : {
      "ObjectId" : "68c8eed2caea2e03418765d09d378483b80e3cc1",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set to 2 or more to exclude from the default set\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following can usually be guessed from the directory name.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generic Part that can be used for other examples.\n\n# The macro is declared in ./examples/CMakeLists.txt\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/physics/TestEm5/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8195938fddd4ca3f0a700b94bf3e0ec39ab9a7b8",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup the project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Find Geant4 package, activating all available UI and Vis drivers by default\n\n# You can set WITH_GEANT4_UIVIS to OFF via the command line or ccmake/cmake-gui\n\n# to build a batch mode only executable\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Setup Geant4 include directories and compile definitions\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Locate sources and headers for this project\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Add the executable, and link it to the Geant4 libraries\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${OUTPUT})\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Copy all scripts to the build/install directory.\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#     configure_file(\n\n#       ${_script}\n\n#       ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${OUTPUT}/${_script}\n\n#       COPYONLY\n\n#     )\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# Install the executable to 'bin' directory under CMAKE_INSTALL_PREFIX\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "examples/physics/TestEm5/GeantV/CMakeLists.txt" : {
      "ObjectId" : "48bbaaea3f12d6d28f729460d31b705da4951383",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set to 2 or more to exclude from the default set\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following can usually be guessed from the directory name.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generic Part that can be used for other examples.\n\n# The macro is declared in ./examples/CMakeLists.txt\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/physics/cmsToyGV/BusyWaitCalibration/CMakeLists.txt" : {
      "ObjectId" : "9f56ae86c1577458e53064d1cd6203d55160b6bf",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/physics/cmsToyGV/CMakeLists.txt" : {
      "ObjectId" : "556cbb6429700aca65610b01162bad42bcccda68",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package(CppUnit)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/physics/cmsToyGV/TBBProcessingDemo/CMakeLists.txt" : {
      "ObjectId" : "37101514958e68f1f2008d7c367b6b22d4c9ded7",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See\n\n# http://stackoverflow.com/questions/1027247/best-way-to-specify-sourcefiles-in-cmake\n\n# including the discussion.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Find GeantV headers library\n\n#\n\n#find_package(GeantV REQUIRED)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Locate the ROOT package and defines a number of variables (e.g. ROOT_INCLUDE_DIRS)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Find VecGeom geometry headers library\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(GEANTV_LIBRARIES ${GEANTV_LIBRARIES} ${GeantV_DIR}/lib/libGeant_v.so ${GeantV_DIR}/lib/libGeantExamplesRP.so ${GeantV_DIR}/lib/libRealPhysics.so)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  ${CMAKE_SOURCE_DIR}/BusyWaitCalibration/busyWait.cpp\n\n#${CMAKE_SOURCE_DIR}/BusyWaitCalibration/busy_wait_scale_factor.cpp)\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic Part that can be used for other examples.\n\n# The macro is declared in ./examples/CMakeLists.txt\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Copy all scripts and install the executable(s)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# message(WARNING \"conf ${_script} to ${CMAKE_BINARY_DIR}/${FullCMS_OUTPUT}/${script_name} \")\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "jenkins/geantv-ctest.cmake" : {
      "ObjectId" : "e2a778e52ebf9ab1305d92da4f19573b9463a7fa",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####################################################################\n\n# Before run should be exported next variables:\n\n# $CTEST_BUILD_OPTIONS // CMake flags for Geant-V build\n\n# $CMAKE_SOURCE_DIR    // CMake source directory\n\n# $CMAKE_BINARY_DIR    // CMake binary directory\n\n# $CMAKE_BUILD_TYPE    // CMake build type: Debug, Release\n\n# $CMAKE_INSTALL_PREFIX // Installation prefix for CMake (Jenkins trigger)\n\n# CC and CXX (In Jenkins this step has been done authomaticly)\n\n# export $LD_LIBRARY_PATH=$WORKSPACE/lib:$LD_LIBRARY_PATH (for GeantV libraries)\n\n# Enviroment for name of build for CERN CDash:\n\n# $LABEL                // Name of node (Jenkins trigger)\n\n# Name of $BACKEND     // Backend for Geant-V (VecGeom/ROOT or CUDA)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "####################################################################\n\n# Build name settings\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################\n\n# Build dashboard model setup\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------ Cdash---------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  find_package(Valgrind)\n\n#  find_package(ROOT REQUIRED)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "######################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################\n\n# CTest/CMake settings\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#########################################################\n\n# git command configuration\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########################################################\n\n## Output language\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#########################################################\n\n# Use multiple CPU cores to build\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##########################################################\n\n# Print summary information.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#######################################################\n\n# Test custom update with a dashboard script.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#ctest_empty_binary_directory(${CTEST_BINARY_DIRECTORY})\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "magneticfield/CMakeLists.txt" : {
      "ObjectId" : "4e4216e39b56b842c9de238e1756c4db31d06c33",
      "LastModified" : "2018-12-15T19:03:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# (T*.cxx src/GU*.cxx)\n",
        "Line" : 4,
        "CharPositionInLine" : 29
      },
      "2" : {
        "Text" : "# (T*.h inc/GU*.h)\n",
        "Line" : 5,
        "CharPositionInLine" : 35
      },
      "3" : {
        "Text" : "# - print include directories\n\n# get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)\n\n# message(STATUS \"Include directories: ${inc_dirs}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add the library\n\n#\n\n# ROOT_GENERATE_DICTIONARY(vMagFieldDict ${headers} MODULE Vphysproc LINKDEF inc/Geant/LinkDef.h)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "magneticfield/tests/CMakeLists.txt" : {
      "ObjectId" : "554fd2e8ab9bd4ff9f15fdb5370023279b8b8506",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Init ${RelativeCurrentSourceDir} and ${RelativeCurrentSourceParent}\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common source  files\n\n# Common include files\n",
        "Line" : 7,
        "CharPositionInLine" : 21
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Redefine compilation flags since Geant4 is overriding them\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add the executables\n\n#\n\n# include_directories(${PROJECT_SOURCE_DIR}/magneticfield/inc)\n\n# include_directories(${PROJECT_SOURCE_DIR}/magneticfield/inc ${PROJECT_SOURCE_DIR}/examples/magneticfield/simplifiedCMS/include)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Need -lGeant_v in order to obtain the function/template geant::cxx::ErrorHandlerImpl\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_executable(testMagFieldEquation testMagFieldEquation.cxx) ## ${sources} ${headers})\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#target_link_libraries(testMagFieldEquation Vmagfield Geant_v ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${USERKERNELLIB} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n# target_link_libraries(testMagFieldEquation Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#message(STATUS \"Created target for testMagFieldEquation\")\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#add_executable(testVectorMagFieldEquation testVectorMagFieldEquation.cxx)\n\n#target_link_libraries(testVectorMagFieldEquation Vmagfield Geant_v ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${USERKERNELLIB} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#message(STATUS \"Created target for testVectorMagFieldEquation\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Test for 'simple' scalar class\n\n#add_executable(testScalarCashKarp testScalarCashKarp.cxx)\n\n#target_link_libraries(testScalarCashKarp Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#message(STATUS \"Created target for testScalarCashKarp\")\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Test for 'vector' Stepper class  ( renamed from testNewStepperFixedCashKarp )\n\n#add_executable(testVectorCashKarp testVectorCashKarp.cxx)\n\n#target_link_libraries(testVectorCashKarp Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#message(STATUS \"Created target for testVectorCashKarp\")\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## New test for 'vector' Stepper class  ( mid-version towards flexible test below )\n\n#add_executable(templatedTestVectorCashKarp templatedTestVectorCashKarp.cxx)\n\n#target_link_libraries(templatedTestVectorCashKarp Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#message(STATUS \"Created target for templatedTestVectorCashKarp\")\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Test newest Cash Karp, that can integrate scalar or Double_v\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## --------  End of Stepper Tests\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## ########  Start of Integration Driver Tests #############\n\n## \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## --------  End   of Integration Driver Tests -------------\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add_executable(testToyClass testToyClass.cxx)\n\n# target_link_libraries(testToyClass Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n# message(STATUS \"Created target for testToyClass\")\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add_executable(BenchmarkIntegrationDriver BenchmarkIntegrationDriver.cxx) ## ${sources} ${headers})\n\n# target_link_libraries(BenchmarkIntegrationDriver Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n# message(STATUS \"Created target for BenchmarkIntegrationDriver\")\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#add_executable(TestConstBzStepper TestConstBzStepper.cxx) ## ${sources} ${headers})\n\n#target_link_libraries(TestConstBzStepper Vmagfield Geant_v ${VECGEOM_LIBRARIES} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#add_executable(ReproduceError ReproduceError.cxx)\n\n#target_link_libraries(ReproduceError Vmagfield Geant_v ${VECGEOM_LIBRARIES} ${VECGEOM_LIBRARIES_EXTERNAL} ${USERKERNELLIB} -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\n#message(STATUS \"Created target for testVectorMagFieldEquation\")\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# add_executable(testTClassicalRK4 testTClassicalRK4.cxx) ## ${sources} ${headers})\n\n# target_link_libraries(testTClassicalRK4 -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} Vmagfield ${VECGEOM_LIBRARIES})\n\n# message(STATUS \"Created target for testTClassicalRK4\")\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#add_executable(testStepperFixed testStepperFixed.cxx)\n\n#target_link_libraries(testStepperFixed -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} Vmagfield Geant_v ${VECGEOM_LIBRARIES})\n\n#message(STATUS \"Created target for testStepperFixed\")\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "### Old test(s) ------\n\n# add_executable(testIntegrationDriver testIntegrationDriver.cxx) ## ${sources} ${headers})\n\n# target_link_libraries(testIntegrationDriver -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} Vmagfield Geant_v ${VECGEOM_LIBRARIES})\n\n# message(STATUS \"Created target for testIntegrationDriver\")\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#add_executable(testGUPropagateField testGUPropagateField.cxx) ## ${sources} ${headers})\n\n#target_link_libraries(testGUPropagateField -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} Vmagfield Geant_v ${VECGEOM_LIBRARIES})\n\n#message(STATUS \"Created target for testGUPropagateField\")\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## ${sources} ${headers})\n",
        "Line" : 106,
        "CharPositionInLine" : 70
      },
      "25" : {
        "Text" : "## add_executable(testFieldPropagator TestGUFieldPropagator.cxx) ## ${sources} ${headers})\n\n## target_link_libraries(testFieldPropagator -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} Vmagfield Geant_v ${VECGEOM_LIBRARIES})\n\n## # ${Geant4_LIBRARIES} ${ROOT_LIBRARIES} Xsec Geant_v)\n\n## # add_dependencies(micromc xseclib Geantlib_v)\n\n## message(STATUS \"Created target for testFieldPropagator\")\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#add_custom_target(testFP DEPENDS testFieldPropagator)\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#\n\n#install(TARGETS testFieldPropagator DESTINATION bin)\n\n#install(TARGETS testMagFieldEquation DESTINATION bin)\n\n#install(TARGETS testVectorMagFieldEquation DESTINATION bin)\n\n# Stepper tests\n\n#install(TARGETS testScalarCashKarp DESTINATION bin)\n\n#install(TARGETS testVectorCashKarp DESTINATION bin)\n\n#install(TARGETS templatedTestVectorCashKarp DESTINATION bin)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Driver  tests\n\n## install(TARGETS testFlexibleIntegrationDriver DESTINATION bin)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Old tests - steppers\n\n#install(TARGETS testStepperFixed DESTINATION bin)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Old tests - drivers\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#install(TARGETS testGUPropagateField DESTINATION bin)\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "physics/CMakeLists.txt" : {
      "ObjectId" : "e6956fbd9cb4d10c410f69dca0c79d0ff9157a32",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source, header files & include directories\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DO NOT INCLUDE EXPLICITLY THE FILE BELOW WHICH OVERWRITES CXX_FLAGS(DEBUG)\n\n# Rather append Geant4_CXX_FLAGS(_DEBUG) to existing ones\n\n#  include(${Geant4_USE_FILE})\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n#\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add vec-phys sources, include directories and lib if vec-phys build was required explicitly\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add target library and links\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories to doxygen\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "physics/generators/CMakeLists.txt" : {
      "ObjectId" : "53d76c26da4f32413eed3dc2d2b863ecc3791463",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library building currently handled by run/scheduler/CMakeLists.txt\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "physics/kernel/material/CMakeLists.txt" : {
      "ObjectId" : "8d87824b8f76a029895a390f861b62e681a2dab0",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source, header files & include directories\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n#\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add target library and links\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Build a simple application that demonstrate the usage and capabilities of the material description.\n\n#----------------------------------------------------------------------------------------------\n\n#add_executable(testMaterial ${CMAKE_SOURCE_DIR}/material/test/testMaterial.cc ${sources} ${headers})\n\n#if(USE_VECGEOM_CONTAINERS)\n\n#  target_link_libraries(testMaterial Material ${VECGEOM_LIBRARIES})\n\n#else()\n\n#  target_link_libraries(testMaterial Material)\n\n#endif()\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories to doxygen\n\n#----------------------------------------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "physics/neutron/nudy/CMakeLists.txt" : {
      "ObjectId" : "7a57f09bd50eafd9c1bef700252f932685ceb15c",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add the executable\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------\n\n# tests to create root file from endf, reconstruction and retriving data after reconstruction\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile standalone\n\n#\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "physics/neutron/nudy/EndfToRoot/CMakeLists.txt" : {
      "ObjectId" : "3b77698d9bad854dea200614860291ebcf851eb5",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------\n\n#  Executable\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable(runjendl ${NUDYSRC}/EndfToRoot/main2.cc)\n\n#target_link_libraries(runjendl -L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} Nudy )\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#install(TARGETS EndfToRoot DESTINATION ${NUDYDATA})\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#install(TARGETS RootToSigma DESTINATION ${NUDYDATA})\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#install(TARGETS EndfToPointRoot DESTINATION ${NUDYDATA})\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#install(TARGETS RootToRetrive DESTINATION ${NUDYDATA})\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#install(TARGETS Xsec DESTINATION ${NUDYDATA})\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "physics/neutron/nudy/standalone/CMakeLists.txt" : {
      "ObjectId" : "55881eeb025e110c719b8459206fe557c349cf19",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------\n\n#  Executable\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#install(TARGETS NudyMain DESTINATION bin)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/CMakeLists.txt" : {
      "ObjectId" : "cedc2e8480a6e04c4fe5072daa10cf1955ce0dc1",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add the physics tests.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/TestEm0/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/TestEm0/Geant4/CMakeLists.txt" : {
      "ObjectId" : "e2ea5d48972f440026b2ddb95d1c79c56ba76a7e",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/TestEm0/GeantV/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/TestHad0/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/TestHad0/GeantV/CMakeLists.txt" : {
      "ObjectId" : "09466831a8f01e726b9a68ea401b877068e22116",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/TestNudy0/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/TestNudy0/GeantV/CMakeLists.txt" : {
      "ObjectId" : "6b13590d8aefee04a0bc27157e4dc03452fd7490",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n\n#  INCDIRS physics/hadron/cross_sections/inc physics/hadron/models/inc physics/hadron/processes/inc\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/bremTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/bremTest/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/bremTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/comptonTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/comptonTest/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/comptonTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/conversionTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/conversionTest/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/conversionTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/elasticTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/elasticTest/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/elasticTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "0622ac609353c6efaaca6784a9d10d60b5d7062c",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/ioniTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/ioniTest/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/ioniTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/photoelectricTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/photoelectricTest/Geant4/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/photoelectricTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "8d6ea9ff416066a60694e775cca9d652d6e7c46d",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "physics/tests/vecPhysTests/CMakeLists.txt" : {
      "ObjectId" : "fd29941cc0c2a0733e7ecf655e5013be3f72d23c",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "physics/tests/xsectionsTest/CMakeLists.txt" : {
      "ObjectId" : "125bb0e43cfbe48d27d0bd35151a671215ae1ff3",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The GeantV version of the physics test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# The corresponding Geant4 version of the test (only if build with Geant4 was requested)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "physics/tests/xsectionsTest/GeantV/CMakeLists.txt" : {
      "ObjectId" : "cd6bbdf38c38bdb64c58f0fd1a712606e9fdeb8e",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# or could do\n\n#   GeantPhysicsTest(MAIN test_stem SCRIPTS README)\n\n# if we have test_stem.cc and this will produce a exec named \"test_stem\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "run/CMakeLists.txt" : {
      "ObjectId" : "1f09ec8808ef082b747db2fc626dfeabcabd1072",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add subdirectories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "run/scheduler/CMakeLists.txt" : {
      "ObjectId" : "9378c11b0236eb6e6e26341a6b41f2f4ecff10d8",
      "LastModified" : "2018-12-15T19:03:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bug in VC (?), cannot compile without optimisation\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  ${CMAKE_CURRENT_SOURCE_DIR}/src/TransportManager.cxx\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  ${CMAKE_CURRENT_SOURCE_DIR}/inc/StackLikeBuffer.h\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#   ${CMAKE_CURRENT_SOURCE_DIR}/inc/TransportManager.h\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#   ${CMAKE_CURRENT_SOURCE_DIR}/inc/TrackStat.h\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------\n\n#\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# CUDA section\n\n#\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# See vecprot_v2/cuda/CMakeLists.txt\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#include(${Geant4_USE_FILE})\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install files\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "run/scheduler/cuda/CMakeLists.txt" : {
      "ObjectId" : "737537514ee0ae15d2691515fe44f9b3cc0f8ec6",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Auxiliary functions\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Define the name of the library\n\n#\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# or GeantCuda\n",
        "Line" : 74,
        "CharPositionInLine" : 26
      },
      "4" : {
        "Text" : "# ${XSEC_HEADERS}\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# ${XSEC_SOURCES}\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#  Remove source that are (indirectly) compiled by nvcc.\n\n#  list(REMOVE_ITEM  cuda_cxx_sources ${CMAKE_HOME_DIRECTORY}/vecprot_v2/src/GeantTrack.cxx)\n\n#  list(REMOVE_ITEM  cuda_cxx_sources ${CMAKE_HOME_DIRECTORY}/vecprot_v2/src/GeantTaskData.cxx)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add the command to generate the source code\n\n#add_custom_command (\n\n#  OUTPUT ${CUDA_DATA_FILE}\n\n# COMMAND (cd data; tar xfz $(notdir $(CUDA_DATA_TARFILE)) ) && touch $@\n\n#  DEPENDS ${CUDA_DATA_TARFILE}\n\n#)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#add_custom_command (\n\n# OUTPUT ${CUDA_DATA_TARFILE}\n\n#  COMMAND mkdir -p data && wet https://oink.fnal.gov/perfanalysis/vp${OUTPUT} -O ${OUTPUT}\n\n##  DEPENDS\n\n#)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Install the files\n\n#\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# for some reason the installation process alters the libraries on Mac, and the program fails\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "run/scheduler/tests/CMakeLists.txt" : {
      "ObjectId" : "545348afcc4648970bbd930e6f4fff54cf2787d6",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Make sure to use GEANTV and not GEANT4 flags, in case they have been overwritten\n\n# Not sure this is really necessary\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Bug in VC (?), cannot compile without optimisation\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# CTEST section\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add the test executable\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "run/userapp/CMakeLists.txt" : {
      "ObjectId" : "adc162bbadc4a0fe7901859db51733766cf8dad0",
      "LastModified" : "2018-12-02T17:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add source files & include directories\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All currently handled by run/scheduler/CMakeLists.txt\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------\n\n# Add this directory to Doxygen\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 82
  },
  "ElapsedTime" : 3112
}