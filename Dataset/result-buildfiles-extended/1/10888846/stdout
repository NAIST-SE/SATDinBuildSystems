{
  "Repository" : "10888846",
  "Revision" : "HEAD",
  "ObjectId" : "4d4aedf834dbd13c6e5f07ac512c9da74732fd58",
  "CommitTime" : "2019-04-15T04:10:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b000e598c4a75abcfdf37fb6c2917c41923b3330",
      "LastModified" : "2019-04-15T04:10:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Set data directory, if any\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Include RTOSC\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Currently the only directories that use cmake\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Doxygen only\n",
        "Line" : 36,
        "CharPositionInLine" : 22
      },
      "4" : {
        "Text" : "## uninstall target\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "bf4f379ae2e4cdc0877729fa9cdca1ff102e9994",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ExternalPrograms/Controller/Makefile" : {
      "ObjectId" : "ff747fad4a99a0a81e22187a9b404ae2326e71bd",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ExternalPrograms/Spliter/Makefile" : {
      "ObjectId" : "c98fc4120e37e11ddc2b8340998a04d9f1868559",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "cmake/BashCompletion.cmake" : {
      "ObjectId" : "769f76785d6e5e88213ec60d0f286c11c798950d",
      "LastModified" : "2018-10-13T06:24:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A wrapper around pkg-config-provided and cmake-provided bash completion that\n\n# will have dynamic behavior at INSTALL() time to allow both root-level\n\n# INSTALL() as well as user-level INSTALL().\n\n#\n\n# See also https://github.com/scop/bash-completion\n\n#\n\n# Copyright (c) 2018, Tres Finocchiaro, <tres.finocchiaro@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Usage:\n\n#    INCLUDE(BashCompletion)\n\n#    BASHCOMP_INSTALL(foo)\n\n#    ... where \"foo\" is a shell script adjacent to the CMakeLists.txt\n\n#\n\n# How it determines BASHCOMP_PKG_PATH, in order:\n\n#    1. Uses BASHCOMP_PKG_PATH if already set (e.g. -DBASHCOMP_PKG_PATH=...)\n\n#       a. If not, uses pkg-config's PKG_CHECK_MODULES to determine path\n\n#       b. Fallback to cmake's FIND_PACKAGE(bash-completion) path\n\n#       c. Fallback to hard-coded /usr/share/bash-completion/completions\n\n#    2. Final fallback to ${CMAKE_INSTALL_PREFIX}/share/bash-completion/completions if\n\n#       detected path is unwritable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Windows does not support bash completion\n\n# - macOS support should eventually be added for Homebrew (TODO)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Honor manual override if provided\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# First, use pkg-config, which is the most reliable\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Second, use cmake (preferred but less common)\n",
        "Line" : 40,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Third, use a hard-coded fallback value\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Always provide a fallback for non-root INSTALL()\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Cmake doesn't allow easy use of conditional logic at INSTALL() time\n\n# this is a problem because ${BASHCOMP_PKG_PATH} may not be writable and we\n\n# need sane fallback behavior for bundled INSTALL() (e.g. .AppImage, etc).\n\n#\n\n# The reason this can't be detected by cmake is that it's fairly common to\n\n# run \"cmake\" as a one user (i.e. non-root) and \"make install\" as another user\n\n# (i.e. root).\n\n#\n\n# - Creates a script called \"install_${SCRIPT_NAME}_completion.sh\" into the\n\n#   working binary directory and invokes this script at install.\n\n# - Script handles INSTALL()-time conditional logic for sane ballback behavior\n\n#   when ${BASHCOMP_PKG_PATH} is unwritable (i.e. non-root); Something cmake\n\n#   can't handle on its own at INSTALL() time)\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# A shell script for wrapping conditionl logic\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/FindAlsa.cmake" : {
      "ObjectId" : "23003b39cd2a0970927cea5ef49f77f8e81b063a",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Alsa check, based on libkmid/configure.in.in.\n\n# Only the support for Alsa >= 0.9.x was included; 0.5.x was dropped (but feel free to re-add it if you need it)\n\n# It defines ...\n\n# It offers the following macros:\n\n#  ALSA_CONFIGURE_FILE(config_header) - generate a config.h, typical usage: \n\n#                                       ALSA_CONFIGURE_FILE(${CMAKE_BINARY_DIR}/config-alsa.h)\n\n#  ALSA_VERSION_STRING(version_string)  looks for alsa/version.h and reads the version string into\n\n#                                       the first argument passed to the macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already done by toplevel\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check for version in alsa/version.h\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindCxxTest.cmake" : {
      "ObjectId" : "937142b58a9d048575a090329681cfa80835691e",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find CxxTest\n\n# Find the CxxTest suite and declare a helper macro for creating unit tests\n\n# and integrating them with CTest.\n\n# For more details on CxxTest see http://cxxtest.tigris.org\n\n#\n\n# INPUT Variables\n\n#\n\n#   CXXTEST_USE_PYTHON [deprecated since 1.3]\n\n#       Only used in the case both Python & Perl\n\n#       are detected on the system to control\n\n#       which CxxTest code generator is used.\n\n#       Valid only for CxxTest version 3.\n\n#\n\n#       NOTE: In older versions of this Find Module,\n\n#       this variable controlled if the Python test\n\n#       generator was used instead of the Perl one,\n\n#       regardless of which scripting language the\n\n#       user had installed.\n\n#\n\n#   CXXTEST_TESTGEN_ARGS (since CMake 2.8.3)\n\n#       Specify a list of options to pass to the CxxTest code\n\n#       generator.  If not defined, --error-printer is\n\n#       passed.\n\n#\n\n# OUTPUT Variables\n\n#\n\n#   CXXTEST_FOUND\n\n#       True if the CxxTest framework was found\n\n#   CXXTEST_INCLUDE_DIRS\n\n#       Where to find the CxxTest include directory\n\n#   CXXTEST_PERL_TESTGEN_EXECUTABLE\n\n#       The perl-based test generator\n\n#   CXXTEST_PYTHON_TESTGEN_EXECUTABLE\n\n#       The python-based test generator\n\n#   CXXTEST_TESTGEN_EXECUTABLE (since CMake 2.8.3)\n\n#       The test generator that is actually used (chosen using user preferences\n\n#       and interpreters found in the system)\n\n#   CXXTEST_TESTGEN_INTERPRETER (since CMake 2.8.3)\n\n#       The full path to the Perl or Python executable on the system\n\n#\n\n# MACROS for optional use by CMake users:\n\n#\n\n#    CXXTEST_ADD_TEST(<test_name> <gen_source_file> <input_files_to_testgen...>)\n\n#       Creates a CxxTest runner and adds it to the CTest testing suite\n\n#       Parameters:\n\n#           test_name               The name of the test\n\n#           gen_source_file         The generated source filename to be\n\n#                                   generated by CxxTest\n\n#           input_files_to_testgen  The list of header files containing the\n\n#                                   CxxTest::TestSuite's to be included in\n\n#                                   this runner\n\n#           \n\n#       #==============\n\n#       Example Usage:\n\n#\n\n#           find_package(CxxTest)\n\n#           if(CXXTEST_FOUND)\n\n#               include_directories(${CXXTEST_INCLUDE_DIR})\n\n#               enable_testing()\n\n#\n\n#               CXXTEST_ADD_TEST(unittest_foo foo_test.cc\n\n#                                 ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h)\n\n#               target_link_libraries(unittest_foo foo) # as needed\n\n#           endif()\n\n#\n\n#              This will (if CxxTest is found):\n\n#              1. Invoke the testgen executable to autogenerate foo_test.cc in the\n\n#                 binary tree from \"foo_test.h\" in the current source directory.\n\n#              2. Create an executable and test called unittest_foo.\n\n#               \n\n#      #=============\n\n#      Example foo_test.h:\n\n#\n\n#          #include <cxxtest/TestSuite.h>\n\n#          \n\n#          class MyTestSuite : public CxxTest::TestSuite \n\n#          {\n\n#          public:\n\n#             void testAddition( void )\n\n#             {\n\n#                TS_ASSERT( 1 + 1 > 1 );\n\n#                TS_ASSERT_EQUALS( 1 + 1, 2 );\n\n#             }\n\n#          };\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2010 Kitware, Inc.\n\n# Copyright 2008-2010 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version 1.4 (11/18/10) (CMake 2.8.4)\n\n#     Issue 11384: Added support to the CXX_ADD_TEST macro so header\n\n#                  files (containing the tests themselves) show up in\n\n#                  Visual Studio and other IDEs.\n\n#\n\n# Version 1.3 (8/19/10) (CMake 2.8.3)\n\n#     Included patch by Simone Rossetto to check if either Python or Perl\n\n#     are present in the system.  Whichever intepreter that is detected\n\n#     is now used to run the test generator program.  If both interpreters\n\n#     are detected, the CXXTEST_USE_PYTHON variable is obeyed.\n\n#\n\n#     Also added support for CXXTEST_TESTGEN_ARGS, for manually specifying\n\n#     options to the CxxTest code generator.\n\n# Version 1.2 (3/2/08)\n\n#     Included patch from Tyler Roscoe to have the perl & python binaries\n\n#     detected based on CXXTEST_INCLUDE_DIR\n\n# Version 1.1 (2/9/08)\n\n#     Clarified example to illustrate need to call target_link_libraries()\n\n#     Changed commands to lowercase\n\n#     Added licensing info\n\n# Version 1.0 (1/8/08)\n\n#     Fixed CXXTEST_INCLUDE_DIRS so it will work properly\n\n#     Eliminated superfluous CXXTEST_FOUND assignment\n\n#     Cleaned up and added more documentation\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================\n\n# CXXTEST_ADD_TEST (public macro)\n\n#=============================================================\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================\n\n# main()\n\n#=============================================================\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindFFTW.cmake" : {
      "ObjectId" : "514302936a1aebdbdbfaf6d17f218b0b334323c8",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find FFTW\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindJACK.cmake" : {
      "ObjectId" : "20379db8e0b02896de907c7c8be4faefc2e596ad",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find JACK Audio Connection Kit\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindLIBLO.cmake" : {
      "ObjectId" : "ffe044f0d22f08977ff3314ac9e1eb271733475c",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find Lo\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMXML.cmake" : {
      "ObjectId" : "a74eaa9a2ca4b33b38451a685a1b8eb8c76b6971",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find MXML\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindOSS.cmake" : {
      "ObjectId" : "319c90ed6d54147e4ecf52bd0562d7073509b917",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find OSS (Open Sound System)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OSS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindPA.cmake" : {
      "ObjectId" : "514302936a1aebdbdbfaf6d17f218b0b334323c8",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find FFTW\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindPORTAUDIO.cmake" : {
      "ObjectId" : "d4d96d81f010a6ad11c9acd8eb4644579750fd1c",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find PORTAUDIO\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Findzlib.cmake" : {
      "ObjectId" : "49edafd128929a01b71f0d089da683219c7c6aa3",
      "LastModified" : "2016-12-11T16:46:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find zlib\n\n# Find the native ZLIB includes and library\n\n#\n\n#  ZLIB_INCLUDE_DIRS - where to find zlib.h, etc.\n\n#  ZLIB_LIBRARIES    - List of libraries when using zlib.\n\n#  ZLIB_FOUND        - True if zlib found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Per-recommendation\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "575ceb24380dfebd8226c90cd674d4cfcd47b48e",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configuration variables\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "doc/Makefile" : {
      "ObjectId" : "acc2b319041b6e1c35df75d14604ea73bf822b09",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "doc/bash-completion/CMakeLists.txt" : {
      "ObjectId" : "7628eed7370d2bce3a3618f32c28bc052aedc0ab",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/gen/Makefile" : {
      "ObjectId" : "246441c971b0620f092235bb592f99f67e7fc9e5",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "08d9eea0ad158d8f67aa53f4512cd364c2e699f7",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#checking include/library paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Dependency check\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#for FLTK\n",
        "Line" : 19,
        "CharPositionInLine" : 21
      },
      "3" : {
        "Text" : "# lash\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "######### Settings ###########\n\n# NOTE: These cache variables should normally not be changed in this\n\n# file, but either in in CMakeCache.txt before compile, or by passing\n\n# parameters directly into cmake using the -D flag.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now, handle the incoming settings and set define flags/variables based\n\n# on this\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add version information\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add scheduler function existance info (OSX compatiability)\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Give a good guess on the best Input/Output default backends\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Override with perhaps more helpful midi backends\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#Build Flags\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########### Settings dependant code ###########\n\n# From here on, the setting variables have  been prepared so concentrate\n\n# on the actual compiling.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# To avoid a conflict if PortAudio v1 is installed, the linker directory\n\n# of portaudio must be specified first, so that xxx/lib/portaudio2 is\n\n# searched before xxx/lib where PortAudio v1 gets installed.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# other include directories\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# for zyn-version.h ...\n",
        "Line" : 281,
        "CharPositionInLine" : 45
      },
      "15" : {
        "Text" : "# macro similar to \"check_cxx_compiler_flag_extra\", however,\n\n# it also checks for warnings that are only output if other warnings are active\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#UGLY WORKAROUND\n",
        "Line" : 381,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "########### General section ##############\n\n# Following this should be only general compilation code, and no mention\n\n# of module-specific variables\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#Warning: the required ordering of these to get proper linking depends upon the\n\n#         phase of the moon\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##Summarize The Full Configuration\n",
        "Line" : 574,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#optional color\n",
        "Line" : 582,
        "CharPositionInLine" : 40
      },
      "21" : {
        "Text" : "#TODO GUI MODULE\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/DSP/CMakeLists.txt" : {
      "ObjectId" : "84ac3853f84ca4599be55c3fa34e27fc47f36b73",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Effects/CMakeLists.txt" : {
      "ObjectId" : "803cbca1b67695f91d74de05097dbb452a11760f",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Misc/CMakeLists.txt" : {
      "ObjectId" : "9a150500951f50138119a024cd767b063bd3df6f",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Nio/CMakeLists.txt" : {
      "ObjectId" : "4c4aa96d6f32b7f2cccb4ba6c0d11f7f566bd029",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Defaults:\n\n#         - Wave Output (enabled with the record function)\n\n#         - Null Output\n\n#         - Null Output Running by default\n\n#         - Managed with OutMgr\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Params/CMakeLists.txt" : {
      "ObjectId" : "d5758affa1f35d22514902684517054981161871",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/AlienWah/CMakeLists.txt" : {
      "ObjectId" : "e03fabafa0cb4212cb41f40a8709b73e963189a5",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/CMakeLists.txt" : {
      "ObjectId" : "06c4bcc7dd6b0eee293dbbb749604116db570a9c",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FreeBSD has dlopen as part of LibC\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some X11 libGL libraries require -lpthread on FreeBSD\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Plugin/Chorus/CMakeLists.txt" : {
      "ObjectId" : "e63216476bff7ac87a30041c0944a54214426981",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/Distortion/CMakeLists.txt" : {
      "ObjectId" : "6188774a6cbeb065325069d9ac4c7c61f6c130bf",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/DynamicFilter/CMakeLists.txt" : {
      "ObjectId" : "c562783ba51afa43c3d10b16f63d18c4e8493a7d",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/Echo/CMakeLists.txt" : {
      "ObjectId" : "fa7c31c67aa3a89234b04bb4758441975d8c2b65",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/Phaser/CMakeLists.txt" : {
      "ObjectId" : "f344d93935382d6d506d943667c74648960a0419",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/Reverb/CMakeLists.txt" : {
      "ObjectId" : "c2d74a97bba64483d159916695fd6f09eb9f12a6",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Plugin/ZynAddSubFX/CMakeLists.txt" : {
      "ObjectId" : "b63bcccba8a0ea04cbb4c747a8cd7c0555879cc7",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UI Enabled using NTK: embed + external\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Make this also check for Linux or MacOS\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# UI Enabled using FLTK: external only\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# UI Enabled using Zest: internal only\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# UI Disabled\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Synth/CMakeLists.txt" : {
      "ObjectId" : "9b4044b646e347eb325ff2dd29309e01b25b3a03",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Tests/CMakeLists.txt" : {
      "ObjectId" : "4ad807fdab1639acccf240a847089b0f5f1d3437",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#for tests looking for files stored in the source dir\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CXXTEST_ADD_TEST(SampleTest SampleTest.h)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CXXTEST_ADD_TEST(RtAllocTest RtAllocTest.cpp ${CMAKE_CURRENT_SOURCE_DIR}/RtAllocTest.h)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Extra libraries added to make test and full compilation use the same library\n\n#links for quirky compilers\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#target_link_libraries(RtAllocTest    ${test_lib})\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Testbed app\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#   Currently fails due to zynaddsubfx issues?\n\n#   add_test(PortChecker check-ports.rb)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#this will be replaced with a for loop when the code will get more stable:\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(STATUS \"Plugin Test ${GUI_LIBRARIES} ${NIO_LIBRARIES} ${AUDIO_LIBRARIES}\")\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/UI/CMakeLists.txt" : {
      "ObjectId" : "98b3d14c93c3eca0e075e043cee7dddaf34d8b07",
      "LastModified" : "2018-10-06T16:04:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 33,
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 1376
}