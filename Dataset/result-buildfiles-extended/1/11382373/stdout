{
  "Repository" : "11382373",
  "Revision" : "HEAD",
  "ObjectId" : "3dfca868c13250ed2f84d1ca42cef311e9fc9445",
  "CommitTime" : "2016-04-22T23:18:47Z",
  "Files" : {
    "src/Makefile" : {
      "ObjectId" : "116c565d17676245a335505684701cf44c1e4fae",
      "LastModified" : "2015-03-01T05:19:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##USAGE:\n\n## make [MACHINE=<machine>] [<buildtype>] [DEFINES=<defines>]\n\n##   <machine> is the case-sensitive c++ class name of the machine you wish to target. eg rpi::KosselPi or generic::Example\n\n##   <buildtype> = `release' or `debug' or `debugrel' or `profile` or `minsize'. Defaults to debug\n\n##   <defines> is a series of (define-related) flags to send to the C compiler. Eg DEFINES=-DNDEBUG\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#directory containing this makefile:\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Check if using gcc >= 4.7; Then we can use -flto flag. 4.6 and lower support lto, but have errors (specifically when \"functional\" is included)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Allow user to pass flags related to logging defaults:\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Allow user to pass USE_PTHREAD=0 for a system that doesn't support pthreads (it's only used for upping the priority)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#gcc < 4.9 doesn't support colorized diagnostics (error messages)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Enable link-time optimization\n",
        "Line" : 39,
        "CharPositionInLine" : 23
      },
      "7" : {
        "Text" : "#gcc < 4.7, or non-gcc compiler\n",
        "Line" : 41,
        "CharPositionInLine" : 5
      },
      "8" : {
        "Text" : "#Disable link-time optimization, as it often leads to link-time errors for gcc < 4.8\n",
        "Line" : 42,
        "CharPositionInLine" : 18
      },
      "9" : {
        "Text" : "#gcc-4.6 on arm doesn't support march=native\n",
        "Line" : 43,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "#if no LTO flag present, then use the default. Note: the default may vary based on debug/release build\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Default machine if not given via command line argument:\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#Allow for one to specify either the full path (machines/<platform>/<machine>.h) OR a partial path, without the machines prefix (<platform>/machine.h)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#Check for platform-specific file overrides:\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#fmerge-all-constants allows eg a const float and a const array item with same binary value to share the same address. *may* cause issues with recursive functions?\n\n#-fweb allows local variables to not have a 'home' register - more efficient partitioning, but also more difficult to debug.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#gcc <= 4.6 has c++11 support, but doesn't recognize the c++11 flag, so use -std=c++0x.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#Need the --no-as-needed flag to fix bug in some gcc versions when compiling with multithreading (for tests): http://stackoverflow.com/questions/19463602/compiling-multithread-code-with-g\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#Extra flags to apply JUST to main.cpp (eg -fwhole-program)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#-lrt is the realtime posix library. Appears to be needed for things like clock_nanosleep\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#NAMELINK will become a symbolic link to the actual binary\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#NAME_EXT is the version-info that should be tagged onto the binary name\n\n#Note: explicitly prefix with PLATFORM, because it's possible to build (eg) a rpi Machine with the generic platform implementation\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#NAME of binary file:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#include auto-generated dependencies:\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#Configure debug/release settings:\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#optimized debug build, suitable for using with gdb, perf, etc:\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#release build:\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#optimized debug mode with less time sensitivity. Can run under valgrind, etc:\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#defining NDEBUG removes assertions.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#main.cpp dynamically #includes the MACHINE, so we want to make that an explicit dependency.\t\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#Make documentation:\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#Prevent the automatic deletion of \"intermediate\" .o files after the build by nulling .SECONDARY as follows.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31,
      "Errorlog" : "line 13:79 token recognition error at: '\\1'\nline 13:104 token recognition error at: '\\1'\nline 14:79 token recognition error at: '\\1'\nline 14:104 token recognition error at: '\\1'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 723
}