{
  "Repository" : "22663",
  "Revision" : "HEAD",
  "ObjectId" : "2a6fc5355bb0c6fe26e387ccba30a5baafe8cd98",
  "CommitTime" : "2015-11-10T12:44:32Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "c0eda12e62616ffe57a5818cb05c7e95c25c1f75",
      "LastModified" : "2015-01-18T23:21:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# All the actual Makefiles are deeper in the directory tree.  \n\n# I am just calling them, here.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#$(MAKE) -C po install DESTDIR=$(DESTDIR) PREFIX=$(PREFIX)\n",
        "Line" : 58,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cppForSwig/Makefile" : {
      "ObjectId" : "b705ffd55528335e3f8e6d856458e7e4a33f646d",
      "LastModified" : "2015-05-21T02:48:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#**************************************************************************\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if python is specified, use it\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# rt library used for glibc <2.17. Safe to include for Linux but not OS X.\n\n# Place at the end due to link order concerns involving Ubuntu 12.04.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OS X requires a little extra elbow grease to support C++11.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# each .o file depends on all .h files\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#**************************************************************************\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#**************************************************************************\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########################################################################\n\n# And now we have created all the individual object files specified with \n\n# the macro \"OBJS\". \n\n#************************************************************************\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cppForSwig/cryptopp/Makefile" : {
      "ObjectId" : "4fbf8a4cc0339410fe6b2e738409ef32aa4e7c4e",
      "LastModified" : "2015-05-21T14:48:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#CXXFLAGS = -g\n\n# -fPIC is supported. Please report any breakage of -fPIC as a bug.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the following options reduce code size, but breaks link or makes link very slow on some systems\n\n# CXXFLAGS += -ffunction-sections -fdata-sections\n\n# LDFLAGS += -Wl,--gc-sections\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ar needs the dash on OpenBSD\n",
        "Line" : 8,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# Default prefix for make install\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for some reason CXX is gcc on cygwin 1.1.4\n",
        "Line" : 21,
        "CharPositionInLine" : 18
      },
      "5" : {
        "Text" : "# Workaround for clang parsing issue.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#CXXFLAGS += -march=native\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# \"internal error: backend signals\" occurs on some x86 inline assembly with ICC 9 and some x64 inline assembly with ICC 11.0\n\n# if you want to use Crypto++'s assembly code with ICC, try enabling it on individual files\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# .intel_syntax wasn't supported until GNU assembler 2.10\n",
        "Line" : 61,
        "CharPositionInLine" : 28
      },
      "9" : {
        "Text" : "# allow use of \"/\" operator\n",
        "Line" : 75,
        "CharPositionInLine" : 25
      },
      "10" : {
        "Text" : "# ISX86\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# for DJGPP, where uname doesn't exist\n",
        "Line" : 85,
        "CharPositionInLine" : 17
      },
      "12" : {
        "Text" : "# ARMORY - C++11 support is necessary in order to build the code.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# override flags for CC Sun C++ compiler\n",
        "Line" : 120,
        "CharPositionInLine" : 23
      },
      "14" : {
        "Text" : "# -DCRYPTOPP_INCLUDE_VECTOR_CC is needed for Sun Studio 12u1 Sun C++ 5.10 SunOS_i386 128229-02 2009/09/21 and was fixed in May 2010\n\n# remove it if you get \"already had a body defined\" errors in vector.cc\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# workaround wildcard function bug in GNU Make 3.77\n",
        "Line" : 135,
        "CharPositionInLine" : 19
      },
      "16" : {
        "Text" : "# test.o needs to be after bench.o for cygwin 1.1.4 (possible ld bug?)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# makes it faster to test changes\n",
        "Line" : 175,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 18
    },
    "cppForSwig/gtest/Makefile" : {
      "ObjectId" : "05ddfa2cdc6134997f1ab89162b86bdea8f259a2",
      "LastModified" : "2014-10-09T04:39:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OS X requires a workaround.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Do these work???\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#        CXXFLAGS += -Wall -Wextra -stdlib=libc++ -std=c++11\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#CXXFLAGS += -O2 -DNDEBUG -pipe -fPIC\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#\n\n#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \\\n                     #$(USER_DIR)/sample1.h $(GTEST_HEADERS)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "#\n\n#sample1_unittest : sample1.o sample1_unittest.o gtest_main.a\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -lpthread -o $@\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "####\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "osxbuild/objc_armory/ArmoryMac.pro" : {
      "ObjectId" : "a45f7966729edccee385da4e443f148843146255",
      "LastModified" : "2015-01-18T23:21:14Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# The qmake project file used to build the Mac-specific Objective-C++ code into\n\n# a framework to be loaded by Armory for tasks that can performed only by using\n\n# Objective-C++ code. Parameters have been culled from multiple sources.\n\n# Wherever appropriate, comments will be included to indicate where the\n\n# parameters come from in case things change after software upgrades.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that you MUST run SIP before executing the Makefile! SIP generates some\n\n# CPP/H files that have to be compiled. qmake really can't handle SIP properly,\n\n# so we must run SIP separately. (The best that qmake can do is to have\n\n# QMAKE_EXTRA_COMPILERS build a phony file that's actually a SIP proxy. This\n\n# generates warnings when qmake is run because the files generated by SIP don't\n\n# exist yet. This will work but is bad form, so we won't do it.)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When Qt 4.8.7+ is added, search this file for 4.8.7 mentions to find lines\n\n# that need to be activated. They may be next to lines to be commented out.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# After a long back-and-forth, it was decided to basically copy what PyQt does\n\n# whenever it uses qmake to build and install shared libraries. QMAKE_CXXFLAGS\n\n# also has extra flags to enable C++11 support, as SIP doesn't have a\n\n# macx-clang-libc++ option like Qt. (macx-g++ is all it can muster for now.)\n\n# NB: The \"version\" values must be updated alongside build-app.py!!!\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 4.8.7 upgrade\n\n#CONFIG += plugin warn_on release c++11\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add some more flags to properly handle C++11, since SIP can't autoconfig them.\n\n# 4.8.7 upgrade\n\n#QMAKE_CXXFLAGS += -std=c++11 -stdlib=libc++\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 4.8.7 upgrade\n\n#INCLUDEPATH = $$QT_UNPACK_BASE/mkspecs/unsupported/macx-clang-libc++ . $$QT_UNPACK_BASE/include/QtCore $$QT_UNPACK_BASE/include $$QT_UNPACK_BASE/include/QtGui .rcc/release-shared .moc $$SIP_UNPACK_BASE/siplib $$PYTHON_UNPACK_BASE/Include $$PYTHON_UNPACK_BASE/Mac/Include $$PYTHON_UNPACK_BASE\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Handle the Objective-C++ files. This will include executing moc on the\n\n# ArmoryMac.h file, creating a resultant CPP file, and compiling the CPP file.\n\n# (Such a step is critical for getting the shared library to work properly.)\n\n# Because we support 10.7+, it's safe to assume we can use SSSE3 instructions.\n\n# NB: -std=c++11 -stdlib=libc++ will be required for Qt 4.8.7+.\n\n# Source: http://stackoverflow.com/questions/2355056/how-to-mix-qt-c-and-obj-c-cocoa\n\n# Source: http://el-tramo.be/blog/mixing-cocoa-and-qt\n\n# Source: http://stackoverflow.com/questions/18768219/sdl-framework-include-on-macos-qt\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# 4.8.7 upgrade\n\n#QMAKE_OBJECTIVE_CFLAGS += -std=c++11 -stdlib=libc++\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# General flags and files, some of which were borrowed from the Qt Makefiles.\n\n# This also includes moving the resultant library (.dylib) to DESTDIR and\n\n# and renaming it (.so) via QMAKE_POST_LINK.\n\n# Source: http://qt-project.org/doc/qt-4.8/qmake-variable-reference.html\n\n# Source: http://qtcenter.org/wiki/index.php?title=Undocumented_qmake\n\n# Source: src/gui/Makefile.release for Qt\n\n# Source: QtCore/QtCore.pro for PyQt\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "po/Makefile" : {
      "ObjectId" : "48a4c31d4557817c2550e55a69435067907f2557",
      "LastModified" : "2014-12-23T01:16:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# must be run from the top level \"make install\"\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "QMAKE" : 1,
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 2297
}