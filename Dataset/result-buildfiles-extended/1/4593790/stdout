{
  "Repository" : "4593790",
  "Revision" : "HEAD",
  "ObjectId" : "f6e5e45be7b378cda18ffe576dd710192fc6360e",
  "CommitTime" : "2018-08-27T19:03:48Z",
  "Files" : {
    "3rd/CMakeLists.txt" : {
      "ObjectId" : "e83b7cc27419e5ddfef379ef4100e32bd321919c",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/CMakeLists.txt" : {
      "ObjectId" : "c175e03cf33983d2b52b2f6215ad92d1908226ce",
      "LastModified" : "2018-08-25T15:00:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/CMakeLists.txt" : {
      "ObjectId" : "1d65167438b08c5f8051b48592c13026861402e6",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/atomic/CMakeLists.txt" : {
      "ObjectId" : "48b1bf46a8ea2e7aa9d3a17952bedaeddef97ea8",
      "LastModified" : "2015-01-03T13:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/filesystem/CMakeLists.txt" : {
      "ObjectId" : "93467bdccde50444d3778325e01356d18a298963",
      "LastModified" : "2015-01-03T13:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/program_options/CMakeLists.txt" : {
      "ObjectId" : "14d1a3822849d60c9bff2a3283a387d52a72214a",
      "LastModified" : "2015-01-03T13:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/regex/CMakeLists.txt" : {
      "ObjectId" : "553f9ce3590dd98e43727a7de3e4e276a50de149",
      "LastModified" : "2015-05-10T08:31:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/system/CMakeLists.txt" : {
      "ObjectId" : "04bfa5683d41b0eff1b644ba5d245966872b1d35",
      "LastModified" : "2015-01-03T13:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/thread/CMakeLists.txt" : {
      "ObjectId" : "bde929c4e8052ab84b7f53c80463f3f4f0e584b0",
      "LastModified" : "2015-01-03T13:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/boost/libs/wave/CMakeLists.txt" : {
      "ObjectId" : "691dbe677369610bd72164b067c12e45c5cd789b",
      "LastModified" : "2015-01-03T13:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/googlemock/CMakeLists.txt" : {
      "ObjectId" : "cb51f8410a103d44238e14f85f17b0f4ceaed8f8",
      "LastModified" : "2016-12-16T20:18:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/googletest/CMakeLists.txt" : {
      "ObjectId" : "44459710d431c8ef9f1607aca56b3be7c440ff63",
      "LastModified" : "2016-12-16T20:18:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/protobuf/CMakeLists.txt" : {
      "ObjectId" : "52998a26c155e934630ef192a7fa9be40e5e6f3f",
      "LastModified" : "2016-12-16T20:18:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Andras Kucsma (andras.kucsma@gmail.com)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/protobuf/src/CMakeLists.txt" : {
      "ObjectId" : "68b1151919d88d4dca0239e31fb4e026171ebc50",
      "LastModified" : "2016-12-16T20:18:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Andras Kucsma (andras.kucsma@gmail.com)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/libcxx/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "8211ebd009a77cdddbcac4596fac71bc59279937",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==============================================================================\n\n# Build Google Benchmark for libc++\n\n#==============================================================================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n\n# Build Google Benchmark for the native stdlib\n\n#==============================================================================\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==============================================================================\n\n# Benchmark tests configuration\n\n#==============================================================================\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#==============================================================================\n\n# Register Benchmark tests\n\n#==============================================================================\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Only report the adding of the benchmark once.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "3rd/templight/libcxx/docs/CMakeLists.txt" : {
      "ObjectId" : "d679761a5adb08be4903a0b10ff8f0c2d70ae7bc",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/libcxx/include/CMakeLists.txt" : {
      "ObjectId" : "b98e09260ca1730be95a3168a1f078f63455deb9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate and install a custom __config header. The new header is created\n\n# by  prepending __config_site to the current __config header.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Add a target that executes the generation commands.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Install the generated header as __config.\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# this target is just needed as a placeholder for the distribution target\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Stripping is a no-op for headers\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "3rd/templight/libcxx/utils/google-benchmark/CMakeLists.txt" : {
      "ObjectId" : "1ba3133194413ea7d944ec41933097f1bbfbf78e",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n",
        "Line" : 5,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 101,
        "CharPositionInLine" : 52
      },
      "11" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Coverage build type\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set up directories\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build the targets\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "3rd/templight/libcxx/utils/google-benchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "0b176ba27f1f7043b8d6c0a10e365bd199fb9ec7",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/libcxx/utils/google-benchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "6efe6a84ee4936867167774654743159ad61e18a",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/libcxx/utils/google-benchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "8dd948004597acda5a70464ac01bf810747f55ff",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "3rd/templight/libcxx/utils/google-benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "7707773930c5ddfe96f8c3a6f2d41caba9f79adc",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "3rd/templight/libcxx/utils/google-benchmark/test/CMakeLists.txt" : {
      "ObjectId" : "14ba7a6e2da79acca1b801802dad6bce177e5887",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Some tests use `<cassert>` to perform the test. Therefore we must\n\n# strip -DNDEBUG from the default CMake flags in DEBUG mode.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: These flags must be added after find_package(Threads REQUIRED) otherwise\n\n# they will break the configuration check.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Demonstration executable\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Attempt to work around flaky test failures when running on Appveyor servers.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the coverage command(s)\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/CMakeLists.txt" : {
      "ObjectId" : "f8da6cf92119021bb81fa490e633d2ac3091a696",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See docs/CMake.html for instructions about how to build LLVM with CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake 3.1 and higher include generator expressions of the form\n\n# $<TARGETLIB:obj> in the SOURCES property.  These need to be\n\n# stripped everywhere that access the SOURCES property, so we just\n\n# defer to the OLD behavior of not including generator expressions\n\n# in the output for now.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This should only apply if you are both on an Apple host, and targeting Apple.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if CMAKE_LIBTOOL is not set, try and find it with xcrun or find_program\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If DYLD_LIBRARY_PATH is set we need to set it on archiver commands\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Side-by-side subprojects layout: automatically set the\n\n# LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS\n\n# This allows an easy way of setting up a build directory for llvm and another\n\n# one for llvm+clang+... using the same sources.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# There is a widely spread opinion that clang-tools-extra should be merged\n\n# into clang. The following simulates it by always enabling clang-tools-extra\n\n# when enabling clang.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Build llvm with ccache if the package is present\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Some features of the LLVM build may be disallowed when dependency debugging is\n\n# enabled. In particular you cannot use ccache because we want to force compile\n\n# operations to always happen.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generate a CompilationDatabase (compile_commands.json file) for our build,\n\n# for use by clang_complete, YouCompleteMe, etc.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Configure CPack.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Sanity check our source directory to make sure that we are not trying to\n\n# generate an in-source build (unless on MSVC_IDE, where it is ok), and to make\n\n# sure that we don't have any stray generated files lying around in the tree\n\n# (which would end up getting picked up by header search, instead of the correct\n\n# versions).\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Each of them corresponds to llvm-config's.\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --bindir\n\n# --libdir\n\n# --src-root\n\n# --includedir\n\n# --prefix\n",
        "Line" : 294,
        "CharPositionInLine" : 57
      },
      "17" : {
        "Text" : "# Note: LLVM_CMAKE_PATH does not include generated files\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# List of all targets to be built by default:\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List of targets with JIT support:\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Verify we are on a supported platform\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# If enabled, verify we are on a platform that supports oprofile.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Define an option controlling whether we should build for 32-bit on 64-bit\n\n# platforms, where supported.\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 463,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user to\n\n# override.\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Define options to control the inclusion and default build behavior for\n\n# components which may not strictly be necessary (tools, examples, and tests).\n\n#\n\n# This is primarily to support building smaller or faster project files.\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# You can configure which libraries from LLVM you want to include in the\n\n# shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited\n\n# list of LLVM components. All component names handled by llvm-config are valid.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# A pool size of 1-2 is probably sufficient on a SSD. 3-4 should be fine\n\n# for spining disks. Anything higher may only help on slower mediums.\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# All options referred to from HandleLLVMOptions have to be specified\n\n# BEFORE this include, otherwise options will not be correctly set on\n\n# first cmake run\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Verify that we can find a Python 2 interpreter.  Python 3 is unsupported.\n\n# FIXME: We should support systems with only Python 3, but that requires work\n\n# on LLDB.\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "######\n\n# LLVMBuild Integration\n\n#\n\n# We use llvm-build to generate all the data required by the CMake based\n\n# build system in one swoop:\n\n#\n\n#  - We generate a file (a CMake fragment) in the object root which contains\n\n#    all the definitions that are required by CMake.\n\n#\n\n#  - We generate the library table used by llvm-config.\n\n#\n\n#  - We generate the dependencies for the CMake fragment, so that we will\n\n#    automatically reconfigure outselves.\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Create the list of optional components that are enabled\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# On Win32, CMake doesn't properly handle piping the default output/error\n\n# streams into the GUI console. So, we explicitly catch and report them.\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Include the generated CMake fragment. This will define properties from the\n\n# LLVMBuild files in a format which is easy to consume from CMake, and will add\n\n# the dependencies so that CMake will reconfigure properly when the LLVMBuild\n\n# files change.\n",
        "Line" : 662,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "######\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Configure all of the various header file fragments LLVM uses which depend on\n\n# configuration variables.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# At this point, LLVMBUILDTOOL already checked all the targets passed in\n\n# LLVM_TARGETS_TO_BUILD and LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, so\n\n# this test just makes sure that any experimental targets were passed via\n\n# LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.\n",
        "Line" : 681,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Produce the target definition files, which provide a way for clients to easily\n\n# include various classes of targets.\n",
        "Line" : 707,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Configure the three LLVM configuration header files.\n",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Add target for generating source rpm package.\n",
        "Line" : 740,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# SVN_REVISION and GIT_COMMIT get set by the call to add_version_info_from_vcs.\n\n# DUMMY_VAR contains a version string which we don't care about.\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# They are not referenced. See set_output_directory().\n",
        "Line" : 765,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Work around a broken bfd ld behavior. When linking a binary with a\n\n# foo.so library, it will try to find any library that foo.so uses and\n\n# check its symbols. This is wasteful (the check was done when foo.so\n\n# was created) and can fail since it is not the dynamic linker and\n\n# doesn't know how to handle search paths correctly.\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# when crosscompiling import the executable targets from a file\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Dummy use to avoid CMake Warning: Manually-specified variables were not used\n\n# (this is a variable that CrossCompile sets on recursive invocations)\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# On FreeBSD, /usr/local/* is not used by default. In order to build LLVM\n\n# with libxml2, iconv.h, etc., we must add /usr/local paths.\n",
        "Line" : 803,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# special hack for Solaris to handle crazy system sys/regset.h\n",
        "Line" : 810,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# Make sure we don't get -rdynamic in every binary. For those that need it,\n\n# use export_executable_symbols(target).\n",
        "Line" : 814,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# People report that -O3 is unreliable on MinGW. The traditional\n\n# build also uses -O2 for that reason:\n",
        "Line" : 833,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Put this before tblgen. Else we have a circular dependence.\n",
        "Line" : 838,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util\n",
        "Line" : 862,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# This utility is used to prevent crashing tests from calling Dr. Watson on\n\n# Windows.\n",
        "Line" : 904,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 909,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Do this last so that all lit targets have already been created.\n",
        "Line" : 940,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by \"*.def\"\n",
        "Line" : 966,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Installing the headers needs to depend on generating any public\n\n# tablegen'd headers.\n",
        "Line" : 972,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# This must be at the end of the LLVM root CMakeLists file because it must run\n\n# after all targets are created.\n",
        "Line" : 983,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake\n",
        "Line" : 1016,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 61
    },
    "3rd/templight/llvm/bindings/ocaml/CMakeLists.txt" : {
      "ObjectId" : "20583682c3d750b01df13876a34bb91299c0dcf9",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/all_backends/CMakeLists.txt" : {
      "ObjectId" : "716a49cc3281b34a21f1fcf15e1a2682b11cea5e",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/analysis/CMakeLists.txt" : {
      "ObjectId" : "f8ca84ddbe33e8b8a7205ac80250d18bc067a4ce",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/backends/CMakeLists.txt" : {
      "ObjectId" : "18d62a857381491689bfdae8d8b4900f7dd54998",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/bitreader/CMakeLists.txt" : {
      "ObjectId" : "8d1610320e0e6c6d6ca2b9489c5449f04fd6ba66",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/bitwriter/CMakeLists.txt" : {
      "ObjectId" : "5a14498cb07e1372f9b80060bf547568a6820f12",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/executionengine/CMakeLists.txt" : {
      "ObjectId" : "ae9af088c025a1616de0d8529506d59532462e91",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/irreader/CMakeLists.txt" : {
      "ObjectId" : "87d269b48c7a3d0b372e1f4e7617dc2ef0d420f5",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/linker/CMakeLists.txt" : {
      "ObjectId" : "b6bc8ac1e83091130ae4cc1ecdffbac32cd2d2d7",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/llvm/CMakeLists.txt" : {
      "ObjectId" : "db7aee2adff9f147de17e17099fdcb81b9e525e6",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/target/CMakeLists.txt" : {
      "ObjectId" : "adee0fcec659a36352d94ea2fb21b75dc223bc22",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/transforms/CMakeLists.txt" : {
      "ObjectId" : "beb8694019b7a87c065d5eb5c1bad3844a3fb2b2",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/transforms/ipo/CMakeLists.txt" : {
      "ObjectId" : "4b8784fad67bb29707f063b1b52a810324e4d496",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/transforms/passmgr_builder/CMakeLists.txt" : {
      "ObjectId" : "b012863d8ec7ed57ccd1e6a47f4ed2964d88dabc",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/transforms/scalar_opts/CMakeLists.txt" : {
      "ObjectId" : "98c7c6861d2b117df95b39e4b1ab3ef7801af362",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/transforms/utils/CMakeLists.txt" : {
      "ObjectId" : "37f3eb7d8ecabdf895d6f1615f5cdf5813042c08",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/bindings/ocaml/transforms/vectorize/CMakeLists.txt" : {
      "ObjectId" : "af0ffce563f6e0d31b0fc53a25771efe368bc806",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/cmake/config-ix.cmake" : {
      "ObjectId" : "aaf22ff474b75fae3139b71d1f5e926696c54f36",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We consider Cygwin as another Unix\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Used by check_symbol_exists:\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# x86_64 FreeBSD 9.2 requires libcxxrt to be specified explicitly.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helper macros and functions\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include checks\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# older kernels use split files\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# library checks\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this could be Android\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# We want to find pthreads library and at the moment we do want to\n\n# have it reported as '-l<lib>' instead of '-pthread'.\n\n# TODO: switch to -pthread once the rest of the build system can deal with it.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't look for these libraries if we're using MSan, since uninstrumented third\n\n# party code may call MSan interceptors like strlen, leading to false positives.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Don't look for these libraries on Windows.\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Skip libedit if using ASan as it contains memory leaks.\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# function checks\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Prevent check_symbol_exists from using API that is not supported for a given\n\n# deployment target.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# AddressSanitizer conflicts with lib/Support/Unix/Signals.inc\n\n# Avoid sigaltstack on Apple platforms, where backtrace() cannot handle it\n\n# (rdar://7089625) and _Unwind_Backtrace is unusable because it cannot unwind\n\n# past the signal handler after an assertion failure (rdar://29866587).\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This check requires _GNU_SOURCE\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# available programs checks\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Define LLVM_HAS_ATOMICS if gcc or MSVC atomic builtins are supported.\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Disable gcc's potentially uninitialized use analysis as it presents lots of\n\n# false positives.\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Only recent versions of gcc make the distinction between -Wuninitialized\n\n# and -Wmaybe-uninitialized. If -Wmaybe-uninitialized isn't supported, just\n\n# turn off all uninitialized use warnings.\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Determine the native architecture.\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If build targets includes \"host\", then replace with native architecture.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# We don't have an ASM parser for all architectures yet.\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# We don't have an disassembler for all architectures yet.\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# TODO: Check existence of libraries.\n\n#   include(CheckLibraryExists)\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Use _strtoi64 if strtoll is not available.\n",
        "Line" : 486,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# See if the DIA SDK is available and usable.\n",
        "Line" : 500,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Due to a bug in MSVC 2013's installation software, it is possible\n\n# for MSVC 2013 to write the DIA SDK into the Visual Studio 2012\n\n# install directory.  If this happens, the installation is corrupt\n\n# and there's nothing we can do.  It happens with enough frequency\n\n# though that we should handle it.  We do so by simply checking that\n\n# the DIA SDK folder exists.  Should this happen you will need to\n\n# uninstall VS 2012 and then re-install VS 2013.\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# FIXME: Signal handler return type, currently hardcoded to 'void'\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Check if threading primitives aren't supported on this platform\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Check if zlib is available in the system.\n",
        "Line" : 543,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# If we find doxygen and we want to enable doxygen by default create a\n\n# global aggregate doxygen target for generating llvm and any/all\n\n# subprojects doxygen documentation.\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Keep the version requirements in sync with bindings/ocaml/README.txt.\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Some systems still don't have pygments.lexers.c_cpp which was introduced in\n\n# version 2.0 in 2014...\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 35
    },
    "3rd/templight/llvm/cmake/modules/AddLLVM.cmake" : {
      "ObjectId" : "fd5627eecbb24972e4238127e9537c757e2a0f95",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_REQUIRES_EH is an internal flag that individual targets can use to\n\n# force EH\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# LLVM_REQUIRES_RTTI is an internal flag that individual\n\n# targets can use to force RTTI\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Assume that;\n\n#   - LLVM_COMPILE_FLAGS is list.\n\n#   - PROPERTY COMPILE_FLAGS is string.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Update target props, since all sources are C++.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Gold and BFD ld require a version script rather than a plain list.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Don't write the \"local:\" line on OpenBSD.\n\n# in the export file, also add a linker script to version LLVM symbols (form: LLVM_N.M)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Force re-linking when the exports file changes. Actually, it\n\n# forces recompilation of the source file. The LINK_DEPENDS target\n\n# property only works for makefile-based generators.\n\n# FIXME: This is not safe because this will create the same target\n\n# ${native_export_file} in several different file:\n\n# - One where we emitted ${target_name}_exports\n\n# - One where we emitted the build command for the following object.\n\n# set_property(SOURCE ${first_source_file} APPEND PROPERTY\n\n#   OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${native_export_file})\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add dependency to *_exports later -- CMake issue 14747\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Detect what linker we have here\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't use linker optimizations in debug builds since it slows down the\n\n# linker in a context where the optimizations are not important.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Pass -O3 to the linker. This enabled different optimizations on different\n\n# linkers.\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# With gold gc-sections is always safe.\n",
        "Line" : 195,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Note that there is a bug with -Wl,--icf=safe so it is not safe\n\n# to enable. See https://sourceware.org/bugzilla/show_bug.cgi?id=17704.\n",
        "Line" : 198,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# ld64's implementation of -dead_strip breaks tools that use plugins.\n",
        "Line" : 204,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Object files are compiled with -ffunction-data-sections.\n\n# Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks\n\n# tools that use plugins. Always pass --gc-sections once we require\n\n# a newer linker.\n",
        "Line" : 211,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.\n\n# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,\n\n# or a certain builder, for eaxample, msbuild.exe, would be confused.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# module_dir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.\n\n# It affects output of add_library(MODULE).\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# DLL platform\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# If on Windows and building with MSVC, add the resource script containing the\n\n# VERSIONINFO data to the project.  This embeds version resource information\n\n# into the output .exe or .dll.\n\n# TODO: Enable for MinGW Windows builds too.\n\n#\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set_windows_version_resource_properties(name resource_file...\n\n#   VERSION_MAJOR int\n\n#     Optional major version number (defaults to LLVM_VERSION_MAJOR)\n\n#   VERSION_MINOR int\n\n#     Optional minor version number (defaults to LLVM_VERSION_MINOR)\n\n#   VERSION_PATCHLEVEL int\n\n#     Optional patchlevel version number (defaults to LLVM_VERSION_PATCH)\n\n#   VERSION_STRING\n\n#     Optional version string (defaults to PACKAGE_VERSION)\n\n#   PRODUCT_NAME\n\n#     Optional product name string (defaults to \"LLVM\")\n\n#   )\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# llvm_add_library(name sources...\n\n#   SHARED;STATIC\n\n#     STATIC by default w/o BUILD_SHARED_LIBS.\n\n#     SHARED by default w/  BUILD_SHARED_LIBS.\n\n#   OBJECT\n\n#     Also create an OBJECT library target. Default if STATIC && SHARED.\n\n#   MODULE\n\n#     Target ${name} might not be created on unsupported platforms.\n\n#     Check with \"if(TARGET ${name})\".\n\n#   DISABLE_LLVM_LINK_LLVM_DYLIB\n\n#     Do not link this library to libLLVM, even if\n\n#     LLVM_LINK_LLVM_DYLIB is enabled.\n\n#   OUTPUT_NAME name\n\n#     Corresponds to OUTPUT_NAME in target properties.\n\n#   DEPENDS targets...\n\n#     Same semantics as add_dependencies().\n\n#   LINK_COMPONENTS components...\n\n#     Same as the variable LLVM_LINK_COMPONENTS.\n\n#   LINK_LIBS lib_targets...\n\n#     Same semantics as target_link_libraries().\n\n#   ADDITIONAL_HEADERS\n\n#     May specify header files for IDE generators.\n\n#   SONAME\n\n#     Should set SONAME link flags and create symlinks\n\n#   PLUGIN_TOOL\n\n#     The tool (i.e. cmake target) that this plugin will link against\n\n#   )\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Pass through ADDITIONAL_HEADERS.\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Plugins that link against a tool are allowed even when plugins in general are not\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Generate objlib\n",
        "Line" : 402,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Do add_dependencies(obj) later due to CMake issue 14747.\n",
        "Line" : 412,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# static\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# DEPENDS has been appended to LLVM_COMMON_LIBS.\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# objlib\n",
        "Line" : 427,
        "CharPositionInLine" : 27
      },
      "29" : {
        "Text" : "# FIXME: Add name_static to anywhere in TARGET ${name}'s PROPERTY.\n",
        "Line" : 431,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# $<TARGET_OBJECTS> doesn't require compile flags.\n",
        "Line" : 456,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Set SOVERSION on shared libraries that lack explicit SONAME\n\n# specifier, on *nix systems that are not Darwin.\n",
        "Line" : 482,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Since 4.0.0, the ABI version is indicated by the major version\n",
        "Line" : 487,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# On DLL platforms symbols are imported from the tool by linking against it.\n",
        "Line" : 524,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Components have not been defined explicitly in CMake, so add the\n\n# dependency information for this library as defined by LLVMBuild.\n\n#\n\n# It would be nice to verify that we have the dependencies for this library\n\n# name, but using get_property(... SET) doesn't suffice to determine if a\n\n# property has been set to an empty value.\n",
        "Line" : 536,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# We can use PRIVATE since SO knows its dependent libs.\n",
        "Line" : 548,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Add dependencies also to objlibs.\n\n# CMake issue 14747 --  add_dependencies() might be ignored to objlib's user.\n",
        "Line" : 560,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Libraries that are meant to only be exposed via the build tree only are\n\n# never installed and are only exported as a target in the special build tree\n\n# config file.\n",
        "Line" : 610,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 661,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# DLL platform\n",
        "Line" : 669,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# Generate objlib\n",
        "Line" : 700,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 702,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Note: the dummy.cpp source file provides no definitions. However,\n\n# it forces Xcode to properly link the static library.\n",
        "Line" : 716,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# $<TARGET_OBJECTS> doesn't require compile flags.\n",
        "Line" : 737,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 743,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# libpthreads overrides some standard library symbols, so main\n\n# executable must be linked with it in order to provide consistent\n\n# API for all shared libaries loaded by this executable.\n",
        "Line" : 768,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# The symbol file should contain the symbols we want the executable to\n\n# export\n",
        "Line" : 777,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Extract the symbols to export from the static libraries that the\n\n# executable links against.\n",
        "Line" : 781,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# We need to consider not just the direct link dependencies, but also the\n\n# transitive link dependencies. Do this by starting with the set of direct\n\n# dependencies, then the dependencies of those dependencies, and so on.\n",
        "Line" : 785,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# If something links against this executable then we want a\n\n# transitive link against only the libraries whose symbols\n\n# we aren't exporting.\n",
        "Line" : 824,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# The default import library suffix that cmake uses for cygwin/mingw is\n\n# \".dll.a\", but for clang.exe that causes a collision with libclang.dll,\n\n# where the import libraries of both get named libclang.dll.a. Use a suffix\n\n# of \".exe.a\" to avoid this.\n",
        "Line" : 828,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# On Windows auto-exporting everything doesn't work because of the limit on\n\n# the size of the exported symbol table, but on other platforms we can do\n\n# it without any trouble.\n",
        "Line" : 836,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# This is a macro that is used to create targets for executables that are needed\n\n# for development, but that are not intended to be installed by default.\n",
        "Line" : 900,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Custom add_subdirectory wrapper\n\n# Takes in a project name (i.e. LLVM), the subdirectory name, and an optional\n\n# path if it differs from the name.\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Treat it as in-tree subproject.\n",
        "Line" : 964,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Don't process it in add_llvm_implicit_projects().\n",
        "Line" : 970,
        "CharPositionInLine" : 6
      },
      "57" : {
        "Text" : "# FIXME: It'd be redundant.\n",
        "Line" : 993,
        "CharPositionInLine" : 6
      },
      "58" : {
        "Text" : "# Add external project that may want to be built as part of llvm such as Clang,\n\n# lld, and Polly. This adds two options. One for the source directory of the\n\n# project, which defaults to ${CMAKE_CURRENT_SOURCE_DIR}/${name}. Another to\n\n# enable or disable building it with everything else.\n\n# Additional parameter can be specified as the name of directory.\n",
        "Line" : 999,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Generic support for adding a unittest.\n",
        "Line" : 1060,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Our current version of gtest does not properly recognize C++11 support\n\n# with MSVC, so it falls back to tr1 / experimental classes.  Since LLVM\n\n# itself requires C++11, we can safely force it on unconditionally so that\n\n# we don't have to fight with the buggy gtest check.  \n",
        "Line" : 1066,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Some parts of gtest rely on this GNU extension, don't warn on it.\n",
        "Line" : 1082,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# gtest needs it for raw_ostream\n",
        "Line" : 1089,
        "CharPositionInLine" : 44
      },
      "63" : {
        "Text" : "# libpthreads overrides some standard library symbols, so main\n\n# executable must be linked with it in order to provide consistent\n\n# API for all shared libaries loaded by this executable.\n",
        "Line" : 1093,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# FIXME: This should depend only on the libraries Go needs.\n",
        "Line" : 1109,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# This function canonicalize the CMake variables passed by names\n\n# from CMake boolean to 0/1 suitable for passing into Python or C++,\n\n# in place.\n",
        "Line" : 1135,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Configuration-time: See Unit/lit.site.cfg.in\n",
        "Line" : 1149,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# This function provides an automatic way to 'configure'-like generate a file\n\n# based on a set of common and custom variables, specifically targeting the\n\n# variables needed for the 'lit.site.cfg' files. This function bundles the\n\n# common variables that any Lit instance is likely to need, and custom\n\n# variables can be passed in.\n",
        "Line" : 1157,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# They below might not be the build tree but provided binary tree.\n",
        "Line" : 1182,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# SHLIBDIR points the build tree.\n",
        "Line" : 1188,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# FIXME: \"ENABLE_SHARED\" doesn't make sense, since it is used just for\n\n# plugins. We may rename it.\n",
        "Line" : 1192,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Override config_target_triple (and the env)\n",
        "Line" : 1215,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# This is expanded into the heading.\n",
        "Line" : 1217,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# This is expanded to; config.target_triple = \"\"+config.target_triple+\"\"\n",
        "Line" : 1224,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# llvm-lit needs suffix.py for multiprocess to find a main module.\n",
        "Line" : 1273,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# Allow individual projects to provide an override\n",
        "Line" : 1283,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# Cache this so we don't have to do it again and have subsequent calls\n\n# potentially disagree on the value.\n",
        "Line" : 1292,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# A raw function to create a lit target. This is used to implement the testuite\n\n# management functions.\n",
        "Line" : 1298,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Get the path to the lit to *run* tests with.  This can be overriden by\n\n# the user by specifying -DLLVM_EXTERNAL_LIT=<path-to-lit.py>\n",
        "Line" : 1308,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Tests should be excluded from \"Build Solution\".\n",
        "Line" : 1336,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# A function to add a set of lit test suites to be driven through 'check-*' targets.\n",
        "Line" : 1340,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# EXCLUDE_FROM_ALL excludes the test ${target} out of check-all.\n",
        "Line" : 1344,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Register the testsuites, params and depends for the global check rule.\n",
        "Line" : 1346,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# Produce a specific suffixed check rule.\n",
        "Line" : 1353,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Search recursively for test directories by assuming anything not\n\n# in a directory called Inputs contains tests.\n",
        "Line" : 1366,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# Create a check- target for the directory.\n",
        "Line" : 1379,
        "CharPositionInLine" : 6
      },
      "86" : {
        "Text" : "# This got a bit gross... For multi-configuration generators the target\n\n# properties return the resolved value of the string, not the build system\n\n# expression. To reconstruct the platform-agnostic path we have to do some\n\n# magic. First we grab one of the types, and a type-specific path. Then from\n\n# the type-specific path we find the last occurrence of the type in the path,\n\n# and replace it with CMAKE_CFG_INTDIR. This allows the build step to be type\n\n# agnostic again.\n",
        "Line" : 1466,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# If you're not overriding the OUTPUT_DIR, we can make the link relative in\n\n# the same directory.\n",
        "Line" : 1474,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Make sure both the link and target are toolchain tools\n",
        "Line" : 1528,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# $ORIGIN is not interpreted at link time by ld.bfd\n",
        "Line" : 1593,
        "CharPositionInLine" : 6
      },
      "90" : {
        "Text" : "# Figure out if we can track VC revisions.\n",
        "Line" : 1623,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Run from a subdirectory to force git to print an absolute path.\n",
        "Line" : 1635,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# some branchless cases (e.g. 'repo') may not yet have .git/logs/HEAD\n",
        "Line" : 1644,
        "CharPositionInLine" : 6
      },
      "93" : {
        "Text" : "# SVN 1.7\n\n# SVN 1.6\n",
        "Line" : 1650,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 94
    },
    "3rd/templight/llvm/cmake/modules/AddLLVMDefinitions.cmake" : {
      "ObjectId" : "dab16236d3e9fa4d845c7325d99a8d04120e463d",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There is no clear way of keeping track of compiler command-line\n\n# options chosen via `add_definitions', so we need our own method for\n\n# using it on tools/llvm-config/CMakeLists.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Beware that there is no implementation of remove_llvm_definitions.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We don't want no semicolons on LLVM_DEFINITIONS:\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/cmake/modules/AddOCaml.cmake" : {
      "ObjectId" : "02bab6846376bcf94699a940f5e3369f7f281954",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build rules for the OCaml language.\n\n# Assumes FindOCaml is used.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# add_ocaml_library(pkg_a OCAML mod_a OCAMLDEP pkg_b C mod_a_stubs PKG ctypes LLVM core)\n\n#\n\n# Unnamed parameters:\n\n#\n\n#   * Library name.\n\n#\n\n# Named parameters:\n\n#\n\n# OCAML     OCaml module names. Imply presence of a corresponding .ml and .mli files.\n\n# OCAMLDEP  Names of libraries this library depends on.\n\n# C         C stub sources. Imply presence of a corresponding .c file.\n\n# CFLAGS    Additional arguments passed when compiling C stubs.\n\n# PKG       Names of ocamlfind packages this library depends on.\n\n# LLVM      Names of LLVM libraries this library depends on.\n\n# NOCOPY    Do not automatically copy sources (.c, .ml, .mli) from the source directory,\n\n#           e.g. if they are generated.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's an option, pass it without changes.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Otherwise assume it's a library name we need to link with.\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# include -D/-UNDEBUG to match dump function visibility\n\n# regex from HandleLLVMOptions.cmake\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/cmake/modules/AddSphinxTarget.cmake" : {
      "ObjectId" : "22e3dcb776aa222251d7e0310bfadba5e9358320",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create sphinx target\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handy function for creating the different Sphinx targets.\n\n#\n\n# ``builder`` should be one of the supported builders used by\n\n# the sphinx-build command.\n\n#\n\n# ``project`` should be the project name\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Quiet: no output other than errors and warnings.\n",
        "Line" : 35,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# Treat warnings as errors if requested\n",
        "Line" : 36,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# Source\n",
        "Line" : 37,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Output\n",
        "Line" : 38,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : "# When \"clean\" target is run, remove the Sphinx build directory\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# We need to remove ${SPHINX_DOC_TREE_DIR} when make clean is run\n\n# but we should only add this path once\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Handle installation\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# FIXME: We might not ship all the tools that these man pages describe\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Slash indicates contents of\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : "# '/.' indicates: copy the contents of the directory directly into\n\n# the specified destination, without recreating the last component\n\n# of ${SPHINX_BUILD_DIR} implicitly.\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "3rd/templight/llvm/cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "6074e83585947cb6e8ed18db1f6bfabef0e5530d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First for users who use an installed LLVM, create the LLVMExports.cmake file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Then for users who want to link against the LLVM build tree, provide the\n\n# normal targets and the build tree only targets.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake requires that all targets expressed as dependencies exist, so we can't\n\n# have intrinsics_gen in LLVM_COMMON_DEPENDS when it is written out, otherwise\n\n# projects building out of tree will have CMake errors. This only gets hit when\n\n# LLVM_ENABLE_MODULES=On. Eventually we should come up with a better solution to\n\n# this, but there is no easy solution.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate LLVMConfig.cmake for the build tree.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We need to use the full path to the LLVM Exports file to make sure we get the\n\n# one from the build tree. This is due to our cmake files being split between\n\n# this source dir and the binary dir in the build tree configuration and the\n\n# LLVM_CONFIG_CMAKE_DIR being the source directory. In contrast in the install\n\n# tree, both the generated LLVMExports.cmake file and the rest of the cmake\n\n# source files are put in the same cmake directory.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For compatibility with projects that include(LLVMConfig)\n\n# via CMAKE_MODULE_PATH, place API modules next to it.\n\n# This should be removed in the future.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate LLVMConfig.cmake for the install tree.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Construct the proper number of get_filename_component(... PATH)\n\n# calls to compute the installation prefix.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate LLVMConfigVersion.cmake for build and install tree.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "3rd/templight/llvm/cmake/modules/CheckAtomic.cmake" : {
      "ObjectId" : "9a4cdf12a6223d8f51cf0f4bda61846dd6e85fb8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# atomic builtins are required for threading support.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sometimes linking against libatomic is required for atomic ops, if\n\n# the platform doesn't support lock-free atomics.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This isn't necessary on MSVC, so avoid command-line switch annoyance\n\n# by only running on GCC-like hosts.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First check if atomics work without the library.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check for 64 bit atomic operations.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## TODO: This define is only used for the legacy atomic operations in\n\n## llvm's Atomic.h, which should be replaced.  Other code simply\n\n## assumes C++11 <atomic> works.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "3rd/templight/llvm/cmake/modules/CheckCompilerVersion.cmake" : {
      "ObjectId" : "adf500ad53a72236165c61176e908996337ba03f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the host compiler is new enough. LLVM requires at least GCC 4.8,\n\n# MSVC 2015 (Update 3), or Clang 3.1.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Otherwise, test that we aren't using too old of a version of libstdc++\n\n# with the Clang compiler. This is tricky as there is no real way to\n\n# check the version of libstdc++ directly. Instead we test for a known\n\n# bug in libstdc++4.6 that is fixed in libstdc++4.7.\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/cmake/modules/CheckLinkerFlag.cmake" : {
      "ObjectId" : "fe9d01a349cd8d55f5db93df76414d29f9c03908",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/cmake/modules/ChooseMSVCCRT.cmake" : {
      "ObjectId" : "0e6e1aa55254e51480ba489e54c545c7a6accc25",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The macro choose_msvc_crt() takes a list of possible\n\n# C runtimes to choose from, in the form of compiler flags,\n\n# to present to the user. (MTd for /MTd, etc)\n\n#\n\n# The macro is invoked at the end of the file.\n\n#\n\n# CMake already sets CRT flags in the CMAKE_CXX_FLAGS_* and\n\n# CMAKE_C_FLAGS_* variables by default. To let the user\n\n# override that for each build type:\n\n# 1. Detect which CRT is already selected, and reflect this in\n\n# LLVM_USE_CRT_* so the user can have a better idea of what\n\n# changes they're making.\n\n# 2. Replace the flags in both variables with the new flag via a regex.\n\n# 3. set() the variables back into the cache so the changes\n\n# are user-visible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Helper macros: ###\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trying to match the beginning or end of the string with stuff\n\n# like [ ^]+ didn't work, so use a bunch of parentheses instead.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find the selected-by-CMake CRT for each build type, if any.\n\n# Strip off the leading slash and any whitespace.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Replaces or adds a flag to a variable.\n\n# Expects 'flag' to be padded with spaces.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure this change gets reflected in the cache/gui.\n\n# CMake requires the docstring parameter whenever set() touches the cache,\n\n# so get the existing docstring and re-use that.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# List of valid CRTs for MSVC\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/cmake/modules/CrossCompile.cmake" : {
      "ObjectId" : "0ec76ead5c473b8976531df18f1751c7f0f83188",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Propagate LLVM_EXTERNAL_CLANG_SOURCE_DIR so that clang-tblgen can be built\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Escape semicolons in the targets list so that cmake doesn't expand\n\n# them to spaces.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/cmake/modules/DetermineGCCCompatible.cmake" : {
      "ObjectId" : "1369ebe9d0e212e57dcbf7f82a5d94d201a48eaf",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine if the compiler has GCC-compatible command-line syntax.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/cmake/modules/FindOCaml.cmake" : {
      "ObjectId" : "8eba2127df1b361d9b70728d9f09a85753eb3286",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() module for the OCaml language.\n\n# Assumes ocamlfind will be used for compilation.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(OCaml)\n\n#\n\n# If successful, the following variables will be defined:\n\n# OCAMLFIND\n\n# OCAML_VERSION\n\n# OCAML_STDLIB_PATH\n\n# HAVE_OCAMLOPT\n\n#\n\n# Also provides find_ocamlfind_package() macro.\n\n#\n\n# Example usage:\n\n#\n\n# find_ocamlfind_package(ctypes)\n\n#\n\n# In any case, the following variables are defined:\n\n#\n\n# HAVE_OCAML_${pkg}\n\n#\n\n# If successful, the following variables will be defined:\n\n#\n\n# OCAML_${pkg}_VERSION\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's optional and the constraint is not satisfied, pretend\n\n# it wasn't found.\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "9d252e8b70aef4abf8a8da21eb0248bea53137a6",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() Module for Sphinx documentation generator\n\n# http://sphinx-doc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Sphinx)\n\n#\n\n# If successful the following variables will be defined\n\n# SPHINX_FOUND\n\n# SPHINX_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set SPHINX_FOUND to true if SPHINX_EXECUTABLE exists\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide options for controlling different types of output\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/cmake/modules/GenerateVersionFromCVS.cmake" : {
      "ObjectId" : "6b1c719834667d4c7f1338d947d1e8c03e76ae38",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   SRC               - Source directory\n\n#   HEADER_FILE       - The header file to write\n\n#\n\n# The output header will contain macros FIRST_REPOSITORY and FIRST_REVISION,\n\n# and SECOND_REPOSITORY and SECOND_REVISION if requested, where \"FIRST\" and\n\n# \"SECOND\" are substituted with the names specified in the input variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/cmake/modules/GetHostTriple.cmake" : {
      "ObjectId" : "019188a59cc67dfd90548a4142c45d7117beb607",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns the host triple.\n\n# Invokes config.guess\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/cmake/modules/GetSVN.cmake" : {
      "ObjectId" : "f729395f6e4bab54317fdb94e7c844f34f0bbe5a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   SOURCE_DIRS - A list of source directories.\n\n#   NAMES       - A list of macro prefixes for each of the source directories.\n\n#   HEADER_FILE - The header file to write\n\n#\n\n# The output header will contain macros <NAME>_REPOSITORY and <NAME>_REVISION,\n\n# where \"<NAME>\" and is substituted with the names specified in the input\n\n# variables, for each of the SOURCE_DIRS given.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If svn is a bat file, find_program(Subversion) doesn't find it.\n\n# Explicitly search for that here; Subversion_SVN_EXECUTABLE will override\n\n# the find_program call in FindSubversion.cmake.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Allow -DFIRST_SOURCE_DIR arguments until Clang migrates to the new\n\n# -DSOURCE_DIRS argument.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/cmake/modules/HandleLLVMOptions.cmake" : {
      "ObjectId" : "f77600a48308efe504b088ca48b5159d9cb0b223",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for interpreting the user defined LLVM_\n\n# options and executing the appropriate CMake commands to realize the users'\n\n# selections.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is commonly needed so make sure it's defined before we include anything\n\n# else.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ninja Job Pool support\n\n# The following only works with the Ninja generator in CMake >= 3.0.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pass /MANIFEST:NO so that CMake doesn't run mt.exe on our binaries.  Adding\n\n# manifests with mt.exe breaks LLD's symbol tables and takes as much time as\n\n# the link. See PR24476.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# On non-Debug builds cmake automatically defines NDEBUG, so we\n\n# explicitly undefine it:\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# We don't need to do anything special to turn off ABI breaking checks.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Treat LLVM_ABI_BREAKING_CHECKS like \"FORCE_OFF\" when it has not been\n\n# defined.\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# We use *.dylib rather than *.so on darwin.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Darwin-specific linker flags for loadable modules.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Pass -Wl,-z,defs. This makes sure all symbols are defined. Otherwise a DSO\n\n# build might work on ELF but fail on MachO/COFF.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Pass -Wl,-z,nodelete. This makes sure our shared libraries are not unloaded\n\n# by dlclose(). We need that since the CLI API relies on cross-references\n\n# between global objects which became horribly broken when one of the libraries\n\n# is unloaded.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Xcode has -mdynamic-no-pic on by default, which overrides -fPIC. I don't\n\n# know how to disable this, so just force ENABLE_PIC off for now.\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# On Windows all code is PIC. MinGW warns if -fPIC is used.\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# MinGW warns if -fvisibility-inlines-hidden is used.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# FIXME: CMAKE_SIZEOF_VOID_P is still 8\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# If building on a GNU specific 32-bit system, make sure off_t is 64 bits\n\n# so that off_t can stored offset > 2GB.\n\n# Android until version N (API 24) doesn't support it.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# FIXME: It isn't handled in LLVM_BUILD_32_BITS.\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# For Xcode enable several build settings that correspond to\n\n# many warnings that are on by default in Clang but are\n\n# not enabled for historical reasons.  For versions of Xcode\n\n# that do not support these options they will simply\n\n# be ignored.\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# On Win32 using MS tools, provide an option to set the number of parallel jobs\n\n# to use.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# set stack reserved size to ~10MB\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# CMake previously automatically set this value for MSVC builds, but the\n\n# behavior was changed in CMake 2.8.11 (Issue 12437) to use the MSVC default\n\n# value (1 MB) which is not enough for us in tasks such as parsing recursive\n\n# C++ templates in Clang.\n",
        "Line" : 304,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# FIXME: Also cygwin?\n",
        "Line" : 309,
        "CharPositionInLine" : 14
      },
      "25" : {
        "Text" : "# Pass -mbig-obj to mingw gas on Win64. COFF has a 2**16 section limit, and\n\n# on Win64, every COMDAT function creates at least 3 sections: .text, .pdata,\n\n# and .xdata.\n",
        "Line" : 312,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# For MSVC 2013, disable iterator null pointer checking in debug mode,\n\n# especially so std::equal(nullptr, nullptr, nullptr) will not assert.\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Add definitions that make MSVC much less annoying.\n",
        "Line" : 333,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# For some reason MS wants to deprecate a bunch of standard functions...\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Tell MSVC to use the Unicode version of the Win32 APIs instead of ANSI.\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# /Zc:strictStrings is incompatible with VS12's (Visual Studio 2013's)\n\n# debug mode headers. Instead of only enabling them in VS2013's debug mode,\n\n# we'll just enable them for Visual Studio 2015 (VS 14, MSVC_VERSION 1900)\n\n# and up.\n",
        "Line" : 356,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Disable string literal const->non-const type conversion.\n\n# \"When specified, the compiler requires strict const-qualification\n\n# conformance for pointers initialized by using string literals.\"\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# \"Generate Intrinsic Functions\".\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# \"Enforce type conversion rules\".\n",
        "Line" : 370,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# clang-cl and cl by default produce non-deterministic binaries because\n\n# link.exe /incremental requires a timestamp in the .obj file.  clang-cl\n\n# has the flag /Brepro to force deterministic binaries. We want to pass that\n\n# whenever you're building with clang unless you're passing /incremental\n\n# or using LTO (/Brepro with LTO would result in a warning about the flag\n\n# being unused, because we're not generating object files).\n\n# This checks CMAKE_CXX_COMPILER_ID in addition to check_cxx_compiler_flag()\n\n# because cl.exe does not emit an error on flags it doesn't understand,\n\n# letting check_cxx_compiler_flag() claim it understands all flags.\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Check if /INCREMENTAL is passed to the linker and complain that it\n\n# won't work with /Brepro.\n",
        "Line" : 385,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# MinGW and Cygwin are a bit stricter and lack things like\n\n# 'strdup', 'stricmp', etc in c++11 mode.\n",
        "Line" : 417,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# On Darwin -fmodules does not imply -fcxx-modules.\n",
        "Line" : 431,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Check that we can build code with modules enabled, and that repeatedly\n\n# including <cassert> still manages to respect NDEBUG properly.\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Disabled warnings.\n",
        "Line" : 464,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# Suppress ''modifier' : used more than once' (because of __forceinline combined with inline)\n\n# Suppress 'unary minus operator applied to unsigned type, result still unsigned'\n\n# Suppress 'qualifier applied to function type has no meaning; ignored'\n\n# Suppress ''argument' : conversion from 'type1' to 'type2', possible loss of data'\n\n# Suppress ''var' : definition from the for loop is ignored; the definition from the enclosing scope is used'\n\n# Suppress ''var' : conversion from 'size_t' to 'type', possible loss of data'\n\n# Suppress ''declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception'\n\n# Suppress 'behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized'\n\n# Suppress 'new behavior: elements of array 'array' will be default initialized'\n\n# Suppress ''this' : used in base member initializer list'\n\n# Suppress 'declaration of 'var' hides local variable'\n\n# Suppress 'declaration of 'var' hides function parameter'\n\n# Suppress 'declaration of 'var' hides class member'\n\n# Suppress 'declaration of 'var' hides global declaration'\n\n# Suppress ''identifier' : decorated name length exceeded, name was truncated'\n\n# Suppress ''derived class' : destructor could not be generated because a base class destructor is inaccessible'\n\n# Suppress 'function' : destructor never returns, potential memory leak\n\n# Suppress ''type' : forcing value to bool 'true' or 'false' (performance warning)'\n\n# Suppress 'unreferenced formal parameter'\n\n# Suppress 'conditional expression is constant'\n\n# Suppress 'assignment operator could not be generated'\n\n# Suppress 'unreferenced local function has been removed'\n\n# Suppress '<class> can never be instantiated'\n\n# Suppress 'default constructor could not be generated'\n\n# Suppress 'unreachable code'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'assignment within conditional expression'\n\n# Suppress 'cast truncates constant value'\n\n# Suppress 'potentially uninitialized local variable'\n\n# Suppress 'potentially uninitialized local pointer variable'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'interaction between '_setjmp' and C++ object destruction is non-portable'\n\n# Suppress 'unsafe mix of type <type> and type <type> in operation'\n\n# Suppress 'nonstandard extension used : non-constant aggregate initializer'\n\n# Suppress 'noexcept used with no exception handling mode specified; termination on exception is not guaranteed'\n\n# Suppress 'typedef: ignored on left of '' when no variable is declared'\n",
        "Line" : 465,
        "CharPositionInLine" : 14
      },
      "41" : {
        "Text" : "# C4592 is disabled because of false positives in Visual Studio 2015\n\n# Update 1. Re-evaluate the usefulness of this diagnostic with Update 2.\n",
        "Line" : 501,
        "CharPositionInLine" : 10
      },
      "42" : {
        "Text" : "# Suppress ''var': symbol will be dynamically initialized (implementation limitation)\n\n# Suppress ''operator' : zero extending 'type' to 'type' of greater size'\n",
        "Line" : 503,
        "CharPositionInLine" : 14
      },
      "43" : {
        "Text" : "# Ideally, we'd like this warning to be enabled, but MSVC 2013 doesn't\n\n# support the 'aligned' attribute in the way that clang sources requires (for\n\n# any code that uses the LLVM_ALIGNAS macro), so this is must be disabled to\n\n# avoid unwanted alignment warnings.\n\n# When we switch to requiring a version of MSVC that supports the 'alignas'\n\n# specifier (MSVC 2015?) this warning can be re-enabled.\n",
        "Line" : 506,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Suppress 'structure was padded due to __declspec(align())'\n",
        "Line" : 512,
        "CharPositionInLine" : 14
      },
      "45" : {
        "Text" : "# Promoted warnings.\n",
        "Line" : 514,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# Promote 'enumerator in switch of enum is not handled' to level 1 warning.\n",
        "Line" : 515,
        "CharPositionInLine" : 14
      },
      "47" : {
        "Text" : "# Promoted warnings to errors.\n",
        "Line" : 517,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# Promote 'nonstandard extension used : class rvalue used as lvalue' to error.\n",
        "Line" : 518,
        "CharPositionInLine" : 14
      },
      "49" : {
        "Text" : "# Enable warnings\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Put /W4 in front of all the -we flags. cl.exe doesn't care, but for\n\n# clang-cl having /W4 after the -we flags will re-enable the warnings\n\n# disabled by -we.\n",
        "Line" : 524,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# CMake appends /W3 by default, and having /W3 followed by /W4 will result in\n\n# cl : Command line warning D9025 : overriding '/W3' with '/W4'.  Since this is\n\n# a command line warning and not a compiler warning, it cannot be suppressed except\n\n# by fixing the command line.\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# No MSVC equivalent available\n",
        "Line" : 536,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# Don't add -Wall for clang-cl, because it maps -Wall to -Weverything for\n\n# MSVC compatibility.  /W4 is added above instead.\n",
        "Line" : 547,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Turn off missing field initializer warnings for gcc to avoid noise from\n\n# false positives with empty {}. Turn them on otherwise (they're off by\n\n# default for clang).\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Check if -Wnon-virtual-dtor warns even though the class is marked final.\n\n# If it does, don't add it. So it won't be added on clang 3.4 and older.\n\n# This also catches cases when -Wnon-virtual-dtor isn't supported by\n\n# the compiler at all.  This flag is not activated for gcc since it will\n\n# incorrectly identify a protected non-virtual base when there is a friend\n\n# declaration. Don't activate this in general on Windows as this warning has\n\n# too many false positives on COM-style classes, which are destroyed with\n\n# Release() (PR32286).\n",
        "Line" : 577,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Enable -Wdelete-non-virtual-dtor if available.\n",
        "Line" : 597,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Check if -Wcomment is OK with an // comment ending with '\\' if the next\n\n# line is also a // comment.\n",
        "Line" : 600,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Enable -Wstring-conversion to catch misuse of string literals.\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Append -fno-omit-frame-pointer and turn on debug info to get better\n\n# stack traces.\n",
        "Line" : 621,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# Use -O1 even in debug mode, otherwise sanitizers slowdown is too large.\n",
        "Line" : 628,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Keep frame pointers around.\n",
        "Line" : 633,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# Use DWARF debug info with LLD.\n",
        "Line" : 636,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# Enable codeview otherwise.\n",
        "Line" : 639,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# Always ask the linker to produce symbols with asan.\n",
        "Line" : 642,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Turn on sanitizers if necessary.\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Turn on -gsplit-dwarf if requested\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# clang doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# lld doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Add flags for add_dead_strip().\n\n# FIXME: With MSVS, consider compiling with /Gy and linking with /OPT:REF?\n\n# But MinSizeRel seems to add that automatically, so maybe disable these\n\n# flags instead if LLVM_NO_DEAD_STRIP is set.\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Don't add -ffunction-section if it can be disabled with -fno-function-sections.\n\n# Doing so will break sanitizers.\n",
        "Line" : 734,
        "CharPositionInLine" : 6
      },
      "71" : {
        "Text" : "# Remove flags here, for exceptions and RTTI.\n\n# Each target property or source property should be responsible to control\n\n# them.\n\n# CL.EXE complains to override flags like \"/GR /GR-\".\n",
        "Line" : 743,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# Provide public options to globally control RTTI and EH\n",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# If the linker supports it, enable the lto cache. This improves initial build\n\n# time a little since we re-link a lot of the same objects, and significantly\n\n# improves incremental build time.\n\n# FIXME: We should move all this logic into the clang driver.\n",
        "Line" : 801,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# This option makes utils/extract_symbols.py be used to determine the list of\n\n# symbols to export from LLVM tools. This is necessary when using MSVC if you\n\n# want to allow plugins, though note that the plugin has to explicitly link\n\n# against (exactly one) tool so we can't unilaterally turn on\n\n# LLVM_ENABLE_PLUGINS when it's enabled.\n",
        "Line" : 827,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Plugin support\n\n# FIXME: Make this configurable.\n",
        "Line" : 840,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 76
    },
    "3rd/templight/llvm/cmake/modules/HandleLLVMStdlib.cmake" : {
      "ObjectId" : "c0512ac34f6dab5e8b84fedd9f72c4349bae4c7c",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for setting the standard library to libc++\n\n# if the user has requested it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/cmake/modules/LLVM-Config.cmake" : {
      "ObjectId" : "10fd52609274e5040be707e3f745e53078c927ed",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# is_llvm_target_library(\n\n#   library\n\n#     Name of the LLVM library to check\n\n#   return_var\n\n#     Output variable name\n\n#   ALL_TARGETS;INCLUDED_TARGETS;OMITTED_TARGETS\n\n#     ALL_TARGETS - default looks at the full list of known targets\n\n#     INCLUDED_TARGETS - looks only at targets being configured\n\n#     OMITTED_TARGETS - looks only at targets that are not being configured\n\n# )\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets variable `return_var' to ON if `library' corresponds to a\n\n# LLVM supported target. To OFF if it doesn't.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If USE_SHARED is specified, then we link against libLLVM,\n\n# but also against the component libraries below. This is\n\n# done in case libLLVM does not contain all of the components\n\n# the target requires.\n\n#\n\n# Strip LLVM_DYLIB_COMPONENTS out of link_components.\n\n# To do this, we need special handling for \"all\", since that\n\n# may imply linking to libraries that are not included in\n\n# libLLVM.\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use plain form for legacy user.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This is Deprecated\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a variant intended for the final user:\n\n# Map LINK_COMPONENTS to actual libnames.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Inside LLVM itself available libs are in a global property.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Generally in our build system we avoid order-dependence. Unfortunately since\n\n# not all targets create the same set of libraries we actually need to ensure\n\n# that all build targets associated with a target are added before we can\n\n# process target dependencies.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Expand some keywords:\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Translate symbolic component names to real libraries:\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# add codegen, asmprinter, asmparser, disassembler\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# already processed\n",
        "Line" : 197,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# same case as in `native'.\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# already processed\n",
        "Line" : 209,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Link all the asm printers from all the targets\n",
        "Line" : 213,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Link all the asm parsers from all the targets\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Link all the descs from all the targets\n",
        "Line" : 227,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Link all the disassemblers from all the targets\n",
        "Line" : 234,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Link all the infos from all the targets\n",
        "Line" : 241,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Canonize the component name:\n",
        "Line" : 248,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# The component is unknown. Maybe is an omitted target?\n",
        "Line" : 252,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# A missing library to a directly referenced omitted target would be bad.\n",
        "Line" : 255,
        "CharPositionInLine" : 10
      },
      "22" : {
        "Text" : "# If it is not an omitted target we should assume it is a component\n\n# that hasn't yet been processed by CMake. Missing components will\n\n# cause errors later in the configuration, so we can safely assume\n\n# that this is valid here.\n",
        "Line" : 258,
        "CharPositionInLine" : 10
      },
      "23" : {
        "Text" : "# Perform a post-order traversal of the dependency graph.\n\n# This duplicates the algorithm used by llvm-config, originally\n\n# in tools/llvm-config/llvm-config.cpp, function ComputeLibsForComponents.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Expand dependencies while topologically sorting the list of libraries:\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Return just the libraries included in this build:\n",
        "Line" : 312,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "3rd/templight/llvm/cmake/modules/LLVMExternalProjectUtils.cmake" : {
      "ObjectId" : "b84ebbb5387225f6d1d7df29beacaca7f94b6427",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# llvm_ExternalProject_BuildCmd(out_var target)\n\n#   Utility function for constructing command lines for external project targets\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use special command for Makefiles to support parallelism.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# llvm_ExternalProject_Add(name source_dir ...\n\n#   USE_TOOLCHAIN\n\n#     Use just-built tools (see TOOLCHAIN_TOOLS)\n\n#   EXCLUDE_FROM_ALL\n\n#     Exclude this project from the all target\n\n#   NO_INSTALL\n\n#     Don't generate install targets for this project\n\n#   ALWAYS_CLEAN\n\n#     Always clean the sub-project before building\n\n#   CMAKE_ARGS arguments...\n\n#     Optional cmake arguments to pass when configuring the project\n\n#   TOOLCHAIN_TOOLS targets...\n\n#     Targets for toolchain tools (defaults to clang;lld)\n\n#   DEPENDS targets...\n\n#     Targets that this project depends on\n\n#   EXTRA_TARGETS targets...\n\n#     Extra targets in the subproject to generate targets for\n\n#   PASSTHROUGH_PREFIXES prefix...\n\n#     Extra variable prefixes (name is always included) to pass down\n\n#   )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all variables that start with a prefix and propagate them through\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add top-level targets\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/cmake/modules/LLVMInstallSymlink.cmake" : {
      "ObjectId" : "482697b06bafcdc9bee82eae15a630c73ffefa2e",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to execute this script at installation time because the\n\n# DESTDIR environment variable may be unset at configuration time.\n\n# See PR8397.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/cmake/modules/LLVMProcessSources.cmake" : {
      "ObjectId" : "3b4838daed5ac9fb8cfc09afa487477e3c0c8e69",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Replaces a compiler option or switch `old' in `var' by `new'.\n\n# If `old' is not in `var', appends `new' to `var'.\n\n# Example: llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-O2\")\n\n# If the option already is on the variable, don't add it:\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This adds .td and .h files to the Visual Studio solution:\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Don't reject hidden files. Some editors create backups in the\n\n# same directory as the file.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/cmake/modules/TableGen.cmake" : {
      "ObjectId" : "d1afcb42f9de7de87e421fb8b5265e2e25e39372",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_TARGET_DEFINITIONS must contain the name of the .td file to process.\n\n# Extra parameters for `tblgen' may come after `ofn' parameter.\n\n# Adds the name of the generated file to TABLEGEN_OUTPUT.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Validate calling context.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use depfile instead of globbing arbitrary *.td(s)\n\n# DEPFILE is available for Ninja Generator with CMake>=3.7.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make output path relative to build.ninja, assuming located on\n\n# ${CMAKE_BINARY_DIR}.\n\n# CMake emits build targets as relative paths but Ninja doesn't identify\n\n# absolute path (in *.d) as relative path (in build.ninja)\n\n# Note that tblgen is executed on ${CMAKE_BINARY_DIR} as working directory.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# We need both _TABLEGEN_TARGET and _TABLEGEN_EXE in the  DEPENDS list\n\n# (both the target and the file) to have .inc files rebuilt on\n\n# a tablegen change, as cmake does not propagate file-level dependencies\n\n# of custom targets. See the following ticket for more information:\n\n# https://cmake.org/Bug/view.php?id=15858\n\n# The dependency on both, the target and the file, produces the same\n\n# dependency twice in the result file when\n\n# (\"${${project}_TABLEGEN_TARGET}\" STREQUAL \"${${project}_TABLEGEN_EXE}\")\n\n# but lets us having smaller and cleaner code here.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Generate tablegen output in a temporary file.\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# The file in LLVM_TARGET_DEFINITIONS may be not in the current\n\n# directory and local_tds may not contain it, so we must\n\n# explicitly list it here:\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Only update the real output file if there are any differences.\n\n# This prevents recompilation of all the files depending on it if there\n\n# aren't any.\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# `make clean' must remove all those generated files:\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Creates a target for publicly exporting tablegen dependencies.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CMake-3.9 doesn't let compilation units depend on their dependent libraries.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# FIXME: It leaks to user, callee of add_tablegen.\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Upgrade existing LLVM_TABLEGEN setting.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Effective tblgen executable to be used:\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "3rd/templight/llvm/cmake/modules/VersionFromVCS.cmake" : {
      "ObjectId" : "552fe77cdfb6890d43b34ff0fc478e29577951b7",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds version control information to the variable VERS. For\n\n# determining the Version Control System used (if any) it inspects the\n\n# existence of certain subdirectories under SOURCE_DIR (if provided as an\n\n# extra argument, otherwise uses CMAKE_CURRENT_SOURCE_DIR).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Run from a subdirectory to force git to print an absoute path.\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Try to get a ref-id\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Get the repository URL\n",
        "Line" : 43,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Get the svn revision number for this git commit if one exists.\n",
        "Line" : 58,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# Get the git ref id\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/cmake/platforms/Android.cmake" : {
      "ObjectId" : "2a6f5a5e45b78d753e7f90e2198381ce544153db",
      "LastModified" : "2018-02-18T10:10:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for Android NDK.\n\n# This is expected to be used with a standalone Android toolchain (see\n\n# docs/STANDALONE-TOOLCHAIN.html in the NDK on how to get one).\n\n#\n\n# Usage:\n\n# mkdir build; cd build\n\n# cmake ..; make\n\n# mkdir android; cd android\n\n# cmake -DLLVM_ANDROID_TOOLCHAIN_DIR=/path/to/android/ndk \\\n\n#   -DCMAKE_TOOLCHAIN_FILE=../../cmake/platforms/Android.cmake ../..\n\n# make <target>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/cmake/platforms/ClangClCMakeCompileRules.cmake" : {
      "ObjectId" : "a3bcf1c24a9186516616909996535d47abc91129",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# macOS paths usually start with /Users/*. Unfortunately, clang-cl interprets\n\n# paths starting with /U as macro undefines, so we need to put a -- before the\n\n# input file path to force it to be treated as a path. CMake's compilation rules\n\n# should be tweaked accordingly, but until that's done, and to support older\n\n# CMake versions, overriding compilation rules works well enough. This file will\n\n# be included by cmake after the default compilation rules have already been set\n\n# up, so we can just modify them instead of duplicating them entirely.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/cmake/platforms/WinMsvc.cmake" : {
      "ObjectId" : "a736a45787223778285b860f05789a52e7f24b39",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cross toolchain configuration for using clang-cl on non-Windows hosts to\n\n# target MSVC.\n\n#\n\n# Usage:\n\n# cmake -G Ninja\n\n#    -DCMAKE_TOOLCHAIN_FILE=/path/to/this/file\n\n#    -DHOST_ARCH=[aarch64|arm64|armv7|arm|i686|x86|x86_64|x64]\n\n#    -DLLVM_NATIVE_TOOLCHAIN=/path/to/llvm/installation\n\n#    -DMSVC_BASE=/path/to/MSVC/system/libraries/and/includes\n\n#    -DWINSDK_BASE=/path/to/windows-sdk\n\n#    -DWINSDK_VER=windows sdk version folder name\n\n#\n\n# HOST_ARCH:\n\n#    The architecture to build for.\n\n#\n\n# LLVM_NATIVE_TOOLCHAIN:\n\n#   *Absolute path* to a folder containing the toolchain which will be used to\n\n#   build.  At a minimum, this folder should have a bin directory with a\n\n#   copy of clang-cl, clang, clang++, and lld-link, as well as a lib directory\n\n#   containing clang's system resource directory.\n\n#\n\n# MSVC_BASE:\n\n#   *Absolute path* to the folder containing MSVC headers and system libraries.\n\n#   The layout of the folder matches that which is intalled by MSVC 2017 on\n\n#   Windows, and should look like this:\n\n#\n\n# ${MSVC_BASE}\n\n#   include\n\n#     vector\n\n#     stdint.h\n\n#     etc...\n\n#   lib\n\n#     x64\n\n#       libcmt.lib\n\n#       msvcrt.lib\n\n#       etc...\n\n#     x86\n\n#       libcmt.lib\n\n#       msvcrt.lib\n\n#       etc...\n\n#\n\n# For versions of MSVC < 2017, or where you have a hermetic toolchain in a\n\n# custom format, you must use symlinks or restructure it to look like the above.\n\n#\n\n# WINSDK_BASE:\n\n#   Together with WINSDK_VER, determines the location of Windows SDK headers\n\n#   and libraries.\n\n#\n\n# WINSDK_VER:\n\n#   Together with WINSDK_BASE, determines the locations of Windows SDK headers\n\n#   and libraries.\n\n#\n\n# WINSDK_BASE and WINSDK_VER work together to define a folder layout that matches\n\n# that of the Windows SDK installation on a standard Windows machine.  It should\n\n# match the layout described below.\n\n#\n\n# Note that if you install Windows SDK to a windows machine and simply copy the\n\n# files, it will already be in the correct layout.\n\n#\n\n# ${WINSDK_BASE}\n\n#   Include\n\n#     ${WINSDK_VER}\n\n#       shared\n\n#       ucrt\n\n#       um\n\n#         windows.h\n\n#         etc...\n\n#   Lib\n\n#     ${WINSDK_VER}\n\n#       ucrt\n\n#         x64\n\n#         x86\n\n#           ucrt.lib\n\n#           etc...\n\n#       um\n\n#         x64\n\n#         x86\n\n#           kernel32.lib\n\n#           etc\n\n#\n\n# IMPORTANT: In order for this to work, you will need a valid copy of the Windows\n\n# SDK and C++ STL headers and libraries on your host.  Additionally, since the\n\n# Windows libraries and headers are not case-correct, this toolchain file sets\n\n# up a VFS overlay for the SDK headers and case-correcting symlinks for the\n\n# libraries when running on a case-sensitive filesystem.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When configuring CMake with a toolchain file against a top-level CMakeLists.txt,\n\n# it will actually run CMake many times, once for each small test program used to\n\n# determine what features a compiler supports.  Unfortunately, none of these\n\n# invocations share a CMakeCache.txt with the top-level invocation, meaning they\n\n# won't see the value of any arguments the user passed via -D.  Since these are\n\n# necessary to properly configure MSVC in both the top-level configuration as well as\n\n# all feature-test invocations, we set environment variables with the values so that\n\n# these environments get inherited by child invocations.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do some sanity checking to make sure we can find a native toolchain and\n\n# that the Windows SDK / MSVC STL directories look kosher.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Even though we're cross-compiling, we need some native tools (e.g. llvm-tblgen), and those\n\n# native tools have to be built before we can start doing the cross-build.  LLVM supports\n\n# a CROSS_TOOLCHAIN_FLAGS_NATIVE argument which consists of a list of flags to pass to CMake\n\n# when configuring the NATIVE portion of the cross-build.  By default we construct this so\n\n# that it points to the tools in the same location as the native clang-cl that we're using.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ensure all sub-configures use the top-level VFS overlay instead of generating their own.\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We need to preserve any flags that were passed in by the user. However, we\n\n# can't append to CMAKE_C_FLAGS and friends directly, because toolchain files\n\n# will be re-invoked on each reconfigure and therefore need to be idempotent.\n\n# The assignments to the _INITIAL cache variables don't use FORCE, so they'll\n\n# only be populated on the initial configure, and their values won't change\n\n# afterward.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Prevent CMake from attempting to invoke mt.exe. It only recognizes the slashed form and not the dashed form.\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Ensure all sub-configures use the top-level symlinks dir instead of generating their own.\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# See explanation for compiler flags above for the _INITIAL variables.\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMake populates these with a bunch of unnecessary libraries, which requires\n\n# extra case-correcting symlinks and what not. Instead, let projects explicitly\n\n# control which libraries they require.\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Allow clang-cl to work with macOS paths.\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "3rd/templight/llvm/cmake/platforms/iOS.cmake" : {
      "ObjectId" : "15c7aae12c702bfdbcdce50460bf8df3f3273366",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for iOS.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/docs/CMakeLists.txt" : {
      "ObjectId" : "0f2681e0cd86bc89ad9db30a53764257089d1fef",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ./ suffix is needed to copy the contents of html directory without\n\n# appending html/ into LLVM_INSTALL_DOXYGEN_HTML_DIR.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ./ suffix is needed to copy the contents of html directory without\n\n# appending html/ into LLVM_INSTALL_OCAMLDOC_HTML_DIR.\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/examples/BrainF/CMakeLists.txt" : {
      "ObjectId" : "7b44b3a62756a4cc7be46c28828b343be564ed38",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/CMakeLists.txt" : {
      "ObjectId" : "5727066d6227b37e3615a9bc057a9cbf703322ca",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/ExceptionDemo/CMakeLists.txt" : {
      "ObjectId" : "793cf291ca6f110eae23c396e24c2ee3cd050bcd",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable EH and RTTI for this demo\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/examples/Fibonacci/CMakeLists.txt" : {
      "ObjectId" : "e294a2523759a9a08ad2171e9ec3c20aa876a42f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/HowToUseJIT/CMakeLists.txt" : {
      "ObjectId" : "e86626d5cec646196a6071c82cc90c0ed7a86dcd",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/CMakeLists.txt" : {
      "ObjectId" : "947b5a3a3271ef394e0e12a8ee3cf20f755feecd",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/CMakeLists.txt" : {
      "ObjectId" : "657a14be87d0f2d0fd387f3a57b27a3d5f27b8af",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/CMakeLists.txt" : {
      "ObjectId" : "ea5bc05fa00a1854ee648c6ccf4b9ab7dfa10cd2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/CMakeLists.txt" : {
      "ObjectId" : "51800a64b1e30c967d54880f1c117b60827188d9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/CMakeLists.txt" : {
      "ObjectId" : "7cd40a1da60dc2c1af054fa94063c31641cd3a47",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter5/CMakeLists.txt" : {
      "ObjectId" : "d5b832b495504f785a481a0fcbf1686488c57a5f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/CMakeLists.txt" : {
      "ObjectId" : "ef0240c0ca771138d8e4671cbc362fbe97df02b1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/CMakeLists.txt" : {
      "ObjectId" : "3822cdd9e1c49faf47e01cc766f9d2b847ccaf0d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter2/CMakeLists.txt" : {
      "ObjectId" : "e4f275d01d4059cc104a938214c32b672fcd4c2a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter3/CMakeLists.txt" : {
      "ObjectId" : "8053c968f3dd978fc42b934d1e2bf885fd55cd6e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter4/CMakeLists.txt" : {
      "ObjectId" : "89feed143adcd53ab0ed2d5e4e1d4c4e66dccdda",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter5/CMakeLists.txt" : {
      "ObjectId" : "c0ae70654c363cfecfbf8b3e08d622a64d99f87c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter6/CMakeLists.txt" : {
      "ObjectId" : "49627f07ddf05ece09bdcac0bf8d9f46cb163c2b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter7/CMakeLists.txt" : {
      "ObjectId" : "69e78be6a620757daaf4bb13227a892b04cca4e4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter8/CMakeLists.txt" : {
      "ObjectId" : "1bb1cd25af72d836db0f8670d13fcda00b059af1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/Kaleidoscope/Chapter9/CMakeLists.txt" : {
      "ObjectId" : "a85b2c5e8b318de8c01083422893ec5cefb0382d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/ModuleMaker/CMakeLists.txt" : {
      "ObjectId" : "a73909a13bd48eadeaa9382dddc9c0c3b41002f2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/examples/ParallelJIT/CMakeLists.txt" : {
      "ObjectId" : "c42dfc85c14a035446e839076b5cd58e45290e99",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/include/llvm/CMakeLists.txt" : {
      "ObjectId" : "1d5ca3ba92b0e153b3424d83316cee9534522a4f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we're doing an out-of-tree build, copy a module map for generated\n\n# header files into the build area.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/include/llvm/Config/abi-breaking.h.cmake" : {
      "ObjectId" : "7ae401e5b8a8c7df2826869e3569d6a4cb517642",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/abi-breaking.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file controls the C++ ABI break introduced in LLVM public header. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to enable checks that alter the LLVM C++ ABI */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to enable reverse iteration of unordered llvm containers */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Allow selectively disabling link-time mismatch checking so that header-only\n   ADT content from LLVM can be used without linking libSupport. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "// ABI_BREAKING_CHECKS protection: provides link-time failure when clients build\n// mismatch with LLVM",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "// Use pragma with MSVC",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "// FIXME: Implement checks without weak.",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "3rd/templight/llvm/include/llvm/Config/config.h.cmake" : {
      "ObjectId" : "940f8420304204d98de14f5c866600e17d59833a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Exported configuration */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 to enable backtraces, and to 0 otherwise. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 to enable crash overrides, and to 0 otherwise. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the `backtrace' function. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the <CrashReporterClient.h> header file. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* can use __crashreporter_info__ */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the declaration of `arc4random', and to 0 if you\n   don't. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_ALL_EXCEPT', and to 0 if you\n   don't. */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_INEXACT', and to 0 if you\n   don't. */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you\n   don't. */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the DIA SDK installed, and to 0 if you don't. */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if dlopen() is available on this platform. */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if dladdr() is available on this platform. */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the <errno.h> header file. */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have the <fcntl.h> header file. */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to 1 if you have the <fenv.h> header file. */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define if libffi is available on this platform. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to 1 if you have the <ffi/ffi.h> header file. */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to 1 if you have the <ffi.h> header file. */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the `futimens' function. */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to 1 if you have the `futimes' function. */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to 1 if you have the `getcwd' function. */",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the `getpagesize' function. */",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to 1 if you have the `getrlimit' function. */",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define to 1 if you have the `getrusage' function. */",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to 1 if you have the `gettimeofday' function. */",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to 1 if the system has the type `int64_t'. */",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have the <inttypes.h> header file. */",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define to 1 if you have the `isatty' function. */",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have the `edit' library (-ledit). */",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the `psapi' library (-lpsapi). */",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Define to 1 if you have the `pthread' library (-lpthread). */",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Define to 1 if you have the `pthread_getname_np' function. */",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to 1 if you have the `pthread_setname_np' function. */",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to 1 if you have the `shell32' library (-lshell32). */",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to 1 if you have the `z' library (-lz). */",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to 1 if you have the <link.h> header file. */",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define to 1 if you have the `lseek64' function. */",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to 1 if you have the <mach/mach.h> header file. */",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Define to 1 if you have the `mallctl' function. */",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Define to 1 if you have the `mallinfo' function. */",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Define to 1 if you have the <malloc.h> header file. */",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if you have the <malloc/malloc.h> header file. */",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Define to 1 if you have the `malloc_zone_statistics' function. */",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to 1 if you have the `mkdtemp' function. */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Define to 1 if you have the `mkstemp' function. */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Define to 1 if you have the `mktemp' function. */",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define to 1 if you have the `posix_fallocate' function. */",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Define to 1 if you have the `posix_spawn' function. */",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to 1 if you have the `pread' function. */",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Have pthread_getspecific */",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Define to 1 if you have the <pthread.h> header file. */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Have pthread_mutex_lock */",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Have pthread_rwlock_init */",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to 1 if you have the `realpath' function. */",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to 1 if you have the `sbrk' function. */",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if you have the `setenv' function. */",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to 1 if you have the `sched_getaffinity' function. */",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if you have the `CPU_COUNT' macro. */",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Define to 1 if you have the `setrlimit' function. */",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Define to 1 if you have the `sigaltstack' function. */",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define to 1 if you have the <signal.h> header file. */",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Define to 1 if you have the `strerror' function. */",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Define to 1 if you have the `strerror_r' function. */",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Define to 1 if you have the `strtoll' function. */",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "/* Define to 1 if you have the `sysconf' function. */",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "/* Define to 1 if you have the <sys/ioctl.h> header file. */",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "/* Define to 1 if you have the <sys/mman.h> header file. */",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "/* Define to 1 if you have the <sys/param.h> header file. */",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "/* Define to 1 if you have the <sys/resource.h> header file. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* Define to 1 if you have the <sys/time.h> header file. */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Define to 1 if you have the <sys/uio.h> header file. */",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Define if the setupterm() function is supported this platform. */",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "/* Define if the xar_open() function is supported this platform. */",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "/* Define to 1 if you have the <termios.h> header file. */",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "/* Define to 1 if the system has the type `uint64_t'. */",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "/* Define to 1 if the system has the type `u_int64_t'. */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "/* Define to 1 if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "/* Define to 1 if you have the `writev' function. */",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "/* Define to 1 if you have the <zlib.h> header file. */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "/* Have host's _alloca */",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "/* Define to 1 if you have the `_chsize_s' function. */",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* Define to 1 if you have the `_Unwind_Backtrace' function. */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Have host's __alloca */",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "/* Have host's __ashldi3 */",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "/* Have host's __ashrdi3 */",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "/* Have host's __chkstk */",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "/* Have host's __chkstk_ms */",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "/* Have host's __cmpdi2 */",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "/* Have host's __divdi3 */",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "/* Have host's __fixdfdi */",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "/* Have host's __fixsfdi */",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "/* Have host's __floatdidf */",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* Have host's __lshrdi3 */",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "/* Have host's __main */",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "/* Have host's __moddi3 */",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "/* Have host's __udivdi3 */",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* Have host's __umoddi3 */",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* Have host's ___chkstk */",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "/* Have host's ___chkstk_ms */",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "/* Target triple LLVM will generate code for by default */\n/* Doesn't use `cmakedefine` because it is allowed to be empty. */",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "/* Define if zlib compression is available */",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "/* Define if this is Win32ish platform */",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "/* Define if overriding target triple is enabled */",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "/* LLVM version information */",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "/* Whether tools show host and target info when invoked with --version */",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "/* LLVM version string */",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "/* Define if libxml2 is supported on this platform. */",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "/* Define to the extension used for shared libraries, say, \".so\". */",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "/* Define to the vendor of this package. */",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "/* Define as the return type of signal handlers (`int' or `void'). */",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "/* Define to a function replacing strtoll */",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "/* Define to a function implementing strtoull */",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "/* Define to a function implementing stricmp */",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "/* Define to a function implementing strdup */",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "/* Whether GlobalISel rule coverage is being collected */",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "/* Define to the default GlobalISel coverage file prefix */",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 143
    },
    "3rd/templight/llvm/include/llvm/Config/llvm-config.h.cmake" : {
      "ObjectId" : "4daa00f3bc40834340465fb6efcdc7b558f9d007",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/llvm-config.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file enumerates variables from the LLVM configuration so that they\n   can be in exported headers and won't override package specific directives.\n   This is a C header that can be included in the llvm-c headers. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define if LLVM_ENABLE_DUMP is enabled */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Target triple LLVM will generate code for by default */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* LLVM architecture name for the native architecture, if available */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* LLVM name for the native AsmParser init function, if available */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* LLVM name for the native AsmPrinter init function, if available */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* LLVM name for the native Disassembler init function, if available */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* LLVM name for the native Target init function, if available */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* LLVM name for the native TargetInfo init function, if available */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* LLVM name for the native target MC init function, if available */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define if this is Win32ish platform */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* LLVM version string */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rd/templight/llvm/include/llvm/IR/CMakeLists.txt" : {
      "ObjectId" : "cf75d5800b74fb78fbcb0363a711da2c73e1f62f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/include/llvm/Support/CMakeLists.txt" : {
      "ObjectId" : "bf662c77351d6f78767c84f18caf83fd96861f76",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The VC revision include that we want to generate.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove ${version_inc} if it's empty -- toggling LLVM_APPEND_VC_REV\n\n# from OFF to ON.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Create custom target to generate the VC revision include.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure ${version_inc} is an empty file.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Mark the generated header as being generated.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/include/llvm/Support/DataTypes.h.cmake" : {
      "ObjectId" : "a58e2e454b7d1749d3b7a3cdaa41b74af32ddb42",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===-- include/Support/DataTypes.h - Define fixed size types -----*- C -*-===*\\\n|*                                                                            *|\n|*                     The LLVM Compiler Infrastructure                       *|\n|*                                                                            *|\n|* This file is distributed under the University of Illinois Open Source      *|\n|* License. See LICENSE.TXT for details.                                      *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*|\n|*                                                                            *|\n|* This file contains definitions to figure out the size of _HOST_ data types.*|\n|* This file is important because different host OS's define different macros,*|\n|* which makes portability tough.  This file exports the following            *|\n|* definitions:                                                               *|\n|*                                                                            *|\n|*   [u]int(32|64)_t : typedefs for signed and unsigned 32/64 bit system types*|\n|*   [U]INT(8|16|32|64)_(MIN|MAX) : Constants for the min and max values.     *|\n|*                                                                            *|\n|* No library is required when using these functions.                         *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Please leave this file C-compatible. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Note that <inttypes.h> includes <stdint.h>, if this is a C99 system. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "// GCC is strict about defining large constants: they must have LL modifier.",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Handle incorrect definition of uint64_t as u_int64_t */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Set defaults for constants which we cannot find. */",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rd/templight/llvm/lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "af2e30db2c12747997111003544e603d87939e46",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "0d72723210591fbac9fcc52a92446095a2c498dc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AsmParser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/BinaryFormat/CMakeLists.txt" : {
      "ObjectId" : "cb78ea6fdf927a08587d5ae105a7388940225e74",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "ff7e290cad1bbdc568b68286489c747d8f245de7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Bitcode/Reader/CMakeLists.txt" : {
      "ObjectId" : "c24216ffa7086445a5482d928c74e9b160c97038",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Bitcode/Writer/CMakeLists.txt" : {
      "ObjectId" : "82dc6b24137de2d9c76a08fd805ea2154285caf7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/CMakeLists.txt" : {
      "ObjectId" : "ecf8b93d253218e7f46aac76c56daae45b2ab503",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# `Demangle', `Support' and `TableGen' libraries are added on the top-level\n\n# CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/CodeGen/AsmPrinter/CMakeLists.txt" : {
      "ObjectId" : "05c6a28bbcaca223761ac040c4afddd96d447301",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "865de4f47afa99b4e6e35b658605ee21638e12f9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/CodeGen/GlobalISel/CMakeLists.txt" : {
      "ObjectId" : "2db90f8888cba3263f41ffcd2617f456a1148335",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/CodeGen/MIRParser/CMakeLists.txt" : {
      "ObjectId" : "2eb5b844d0e11ee45521de9c84c4e6e7fd30376c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/CodeGen/SelectionDAG/CMakeLists.txt" : {
      "ObjectId" : "fd1e5e2cfc567eb77c96e2b1e750613990679c7c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "e7be0a0617da6c30b26495d048c8b12864b889ec",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/DebugInfo/CodeView/CMakeLists.txt" : {
      "ObjectId" : "0515788d85ef8ddace85f12bd4abd74f6f735dad",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "620016d76fb68fc01f264721fb43a9b6e4c1a274",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/DebugInfo/MSF/CMakeLists.txt" : {
      "ObjectId" : "6f38de336ee02021f8fa881bde0a83ebca2e6b8d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "0be05e9bda5e1f96c24026fec31391f1ac95db22",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/DebugInfo/Symbolize/CMakeLists.txt" : {
      "ObjectId" : "fe5c4bfc43217ed60d9e0b85394b6596cfce6d8d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Demangle/CMakeLists.txt" : {
      "ObjectId" : "74e37654f07f5f07274f69e48d97dd677fec1d52",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ExecutionEngine/CMakeLists.txt" : {
      "ObjectId" : "84b34919e442b50baa4df83ad8336186a64241d5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ExecutionEngine/IntelJITEvents/CMakeLists.txt" : {
      "ObjectId" : "e6c33b2ecc2a06b4d0ae0645cbae8c1ac42cc1d4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ExecutionEngine/Interpreter/CMakeLists.txt" : {
      "ObjectId" : "7456b3dbe905ad82b33e6caae82bb3d9e4a9d27d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that the path to libffi headers is on the command\n\n# line. That path can be a compiler's non-default path even when\n\n# FFI_INCLUDE_DIR was not used, because cmake has its own paths for\n\n# searching for headers (CMAKE_SYSTEM_INCLUDE_PATH, for instance):\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/ExecutionEngine/MCJIT/CMakeLists.txt" : {
      "ObjectId" : "b1e2bc3d635cf0bf5121f7b6671cd84434b79e8f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ExecutionEngine/OProfileJIT/CMakeLists.txt" : {
      "ObjectId" : "d585136eb0ace450d8c8d07f00cdcddc792b3c30",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ExecutionEngine/Orc/CMakeLists.txt" : {
      "ObjectId" : "f83e002c758f452baa7b177d28807cfbe7409e18",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ExecutionEngine/RuntimeDyld/CMakeLists.txt" : {
      "ObjectId" : "3fa7ee6bb710d111493deb4d958a01f94fe47648",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/FuzzMutate/CMakeLists.txt" : {
      "ObjectId" : "1a1a9abb1c28fe3d287690c5b10bb6292e825786",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/IR/CMakeLists.txt" : {
      "ObjectId" : "17822bbbb5cb06f58caae20311d0edea6f47b931",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/IRReader/CMakeLists.txt" : {
      "ObjectId" : "87ea88039ef38047c26d9aef823450645125e51a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/LTO/CMakeLists.txt" : {
      "ObjectId" : "73b5662d4bc8ed10b1383f0c617db5d71d011028",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/LineEditor/CMakeLists.txt" : {
      "ObjectId" : "0d2bada1e84f95b654838eca016982d7a179908f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Linker/CMakeLists.txt" : {
      "ObjectId" : "8916fb3f725102e8a64704e312bba0ce245364d5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/MC/CMakeLists.txt" : {
      "ObjectId" : "b9e23d106e25bf1a9d6b307607cf4d25a6903dcc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/MC/MCDisassembler/CMakeLists.txt" : {
      "ObjectId" : "e940afc56f5b7fbce74447f5a695b3d1c777df42",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/MC/MCParser/CMakeLists.txt" : {
      "ObjectId" : "99fdd0167993780f81c43be5503cf260ba2f240f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Object/CMakeLists.txt" : {
      "ObjectId" : "fd5e7707c5411e83274456684dc0a515c9f4e002",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ObjectYAML/CMakeLists.txt" : {
      "ObjectId" : "d24f879836f9178032347bbe010f2af5f9aed508",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Option/CMakeLists.txt" : {
      "ObjectId" : "8eb086028da467e0d502b7d89f5260517f75c9a7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Passes/CMakeLists.txt" : {
      "ObjectId" : "8fcadcf2c958cc65151e08ba7f62a8f948118606",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "3a981d8acf425c1dc921448855001a4469294e39",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ProfileData/Coverage/CMakeLists.txt" : {
      "ObjectId" : "035b8fdb8b3d69c1f3f7f4c4cfa77e813b1699a5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Support/CMakeLists.txt" : {
      "ObjectId" : "6439d16a2a3fa89a1b0494b065fa8047bf770de2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libuuid required for FOLDERID_Profile usage in lib/Support/Windows/Path.inc.\n\n# advapi32 required for CryptAcquireContextW in lib/Support/Windows/Path.inc.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# On BSDs, CMake returns a fully qualified path to the backtrace library.\n\n# We need to remove the path and the 'lib' prefix, to make it look like a\n\n# regular short library name, suitable for appending to a -l link flag.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# System\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/lib/TableGen/CMakeLists.txt" : {
      "ObjectId" : "9333b6537778052274839645f8763b84429681c0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AArch64/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "cc0a9d86a14e45d35f3b265f0a2f0b593870291a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AArch64/CMakeLists.txt" : {
      "ObjectId" : "3d4b9dcf7e8d127f3662ccab1fc6fac520f9c72a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AArch64/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "d64c05b0adbcfc2e73be48dd5d6fb0a218689d03",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AArch64/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "363f50258d777ede9b5593a38e582658af761859",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AArch64/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "56eeba8a1d4b8483bc49023fd29cbd4e7b17e7b7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hack: we need to include 'main' target directory to grab private headers\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/Target/AArch64/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "e236eed00be130ab99a322afdfbd5435cb631d48",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AArch64/Utils/CMakeLists.txt" : {
      "ObjectId" : "8ee03a7571b4c7f9c0b909ec69f7997c71d6b883",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "70be7bb6eb36a50404aa392ff6e616f7da95e515",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/CMakeLists.txt" : {
      "ObjectId" : "3a8503030414e85254413f7e258375cdd885ff70",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "fb9231576919dc417a65b09563e0dac6f3b10500",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7191ff2c4577be4199aeea02aefec8dbf10491e5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "f9cb4678dc511be75e30d5513cae6032c1a5a534",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "961dc5509000980eb6dc26f2242bf7c8b6ef6e2a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AMDGPU/Utils/CMakeLists.txt" : {
      "ObjectId" : "01b80ebe8d3dc6bbdc622f58e99532bf4a9ad9d4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARC/CMakeLists.txt" : {
      "ObjectId" : "b862a5e61e07f245d0756e17b0308cf9e3cf2497",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARC/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "b692c4baf584992eaaa689e51077fcd3d1e04329",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARC/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "fd6b469cdfb7dc78d6577005012daa40b9888744",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARC/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "243198d253fe8281a475103a70b4ef79be37144a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARC/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "5f9b405481ff59ce9bfa33731e32692b9b913e7f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "66ed1df61a21f09d2ef88d4ed1ec2afc7f9e1e6f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/CMakeLists.txt" : {
      "ObjectId" : "014ac2ae8b489a1cd64a5937a8d6fc492b26fef2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "2d9d534d6e527d0814039ca058269ab6149d7282",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "e59ec4bb77fa9a01aac18e8c90a66484bbe88519",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "9582e8cbef47ab2ba413b9255a0662258af142da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "03393a0102c12104faedd27a140209622bacd0e6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/ARM/Utils/CMakeLists.txt" : {
      "ObjectId" : "61bfe0ad73d05550f4389220283cc51c7fe37d24",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AVR/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "4ec01a60b2194a92d0ad85e9fc895817c0e7a76b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AVR/CMakeLists.txt" : {
      "ObjectId" : "af89a2476c4c75c2188daac16cc0140ba20abbe0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AVR/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "cfce8b7f080932e0b1ad876323d1d19e38896916",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AVR/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "0f3539a7d5efaa0eb8f39eb62d6bf10b79f4a0de",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AVR/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "eb7fe956cf34c868b2682f280f31830a08ea3038",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/AVR/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "557c55ae2f7251a31705af96c4db45768ec2eec6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/BPF/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "22fb4f0482925a7d365c2fdd77b33e8454268078",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/BPF/CMakeLists.txt" : {
      "ObjectId" : "1e4b685a6092d9028ed2e67cf8a369aab1d598a6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/BPF/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "c6dd1b34ad1d9942396a54b68e93837be013951a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/BPF/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "f9e91619252c8d962091ec208ee1cb585e2b6b98",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/BPF/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "5fcd8743da536a3cf051aa5b6ba53a71cfd4652c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/BPF/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "ca0884614deb2250a304a16d52d5912bca6506b5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/CMakeLists.txt" : {
      "ObjectId" : "1e6abfacb79217465db19499a127268273f5d865",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Currently we do not allow libraries from lib to reference targets directly.\n\n# This property is used to enforce that convention. It is important because the\n\n# logic in llvm_map_components_to_libnames is order dependent on the target\n\n# libraries being created.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/Target/Hexagon/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "bbfa92d59628e1855df3d918b4a748f615bcd18b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Hexagon/CMakeLists.txt" : {
      "ObjectId" : "1c36093923ac0c8a4f4cb57ca351573991204279",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Hexagon/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "755a45e2df8bee314bc2d7a040bf2956e2a1c15a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Hexagon/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "2c5d0dab2848af193c64561bb47ebfc46b77f2c6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Hexagon/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "b9411f6925d26ba66c30c29b9d8c5cfa0ba7a229",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Lanai/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "3c88192ea6f0b8e65146f5eed438419a8d70a448",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Lanai/CMakeLists.txt" : {
      "ObjectId" : "867f6165c2536d044b52ce5b11f9fdcd2c889631",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Lanai/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "785c98d8dff13c782acdffe67235e877974bac21",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Lanai/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7f76b895e6ecdccb4964b6e155c84a79740a59ba",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Lanai/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "16cde31e75975c38e1fc69fb49b9b6cd1cc4e90c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Lanai/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "01611b54b2d8db15d7f60d9ac85990e2228c3dd1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/MSP430/CMakeLists.txt" : {
      "ObjectId" : "3f377631c016cb2266b0b9152475fb0ab6810cd7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/MSP430/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "580a9ce71d9d7cbbce1bde0591f2e013249c33ec",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/MSP430/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "0f3ebd303924154092f218e2efd9371ad6f16b15",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/MSP430/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "fee5f434e79bb9602df3c8a0caa029060cb59d9f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Mips/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "f1675560853a861dd50e3765d09cde6e78dac0e3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Mips/CMakeLists.txt" : {
      "ObjectId" : "40e337eb97ca14be0d1645b16e51e8b7018f3f3e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Mips/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "a64d02c47406f87721f0b30a4c9f4624fa0b0ef6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Mips/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "2a67fba796a67ab16e2d1b306c1e800ffdbf03ae",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Mips/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "c63af7c710cc2308f9333ab2128418d60c0dd363",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Mips/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "3347a99a43211bad544e07c0e4eff55596f021f6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/NVPTX/CMakeLists.txt" : {
      "ObjectId" : "a8eecfcc138c7273dcdbc0cc416ba2fc747613ef",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/NVPTX/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "bb6c8abc961fef807fb44ab95afbd5cc0767a482",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/NVPTX/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "dbbf23554aa9cc7fe537604a351637548a79667d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/NVPTX/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1beb40ea58e4a931a2e0eada484f26a0722e70d7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Nios2/CMakeLists.txt" : {
      "ObjectId" : "7cad3c5ba9c100f89af9a4eff92281e5cb8a3d4c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Generate Nios2GenRegisterInfo.inc and Nios2GenInstrInfo.inc which included by\n\n#your hand code C++ files.\n\n#Nios2GenRegisterInfo.inc came from Nios2RegisterInfo.td, Nios2GenInstrInfo.inc\n\n#came from Nios2InstrInfo.td.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Nios2CommonTableGen must be defined\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Nios2CodeGen should match with LLVMBuild.txt Nios2CodeGen\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Should match with \"subdirectories =  InstPrinter MCTargetDesc TargetInfo\" in LLVMBuild.txt\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/lib/Target/Nios2/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "dc50be755754a647b835d4fe6b6870ceeb0ee3b3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Nios2/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "138832d33abf33e7bd164f9e71a34e0c38a7aa3e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MCTargetDesc / CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/Target/Nios2/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "394d2c2680b76a0403ac6741774fe1f49fc04fe6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/PowerPC/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "408858e424d5148642651ec137c158451162afcc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/PowerPC/CMakeLists.txt" : {
      "ObjectId" : "3f173787114d4f8eba5b097af0e733956484b8d5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/PowerPC/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "ca457df88d3ef0cd8abdba4dbb3ab8b6304af29c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/PowerPC/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "ab30a110f40ee9344ab0222d4942dd593f95179a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/PowerPC/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "3cea65ee4de614a504381426ace78c2e1f9e5ff0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/PowerPC/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "c9548c7fe0cda84f45f77f3ecb42539b23e76314",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/RISCV/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "10d0c89537ce3e1bed30626179c469370234ac7c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/RISCV/CMakeLists.txt" : {
      "ObjectId" : "66b50f8728e13100646614f3eff83d6c48b5b8a4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/RISCV/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "39bd2b7669f59a8bccbfd9ba78b15ef899fad41e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/RISCV/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7f91743fb934380d45a8ee0b754645f54d8e57da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/RISCV/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "60429647edd15c5b522e9e042bd2f909df54a970",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/RISCV/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "f440fe2cb82a962506adffacce40eadc54a4caa2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Sparc/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "7579bfed75a2831680b7e0b6b0a7e06dc2ddc588",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Sparc/CMakeLists.txt" : {
      "ObjectId" : "312215cf6cdeb3a28f643d6d02292facd7d9d316",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Sparc/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "7359c6a0bcb2063e30e8f3b525a90c65e25cdcc7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Sparc/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "a285a8337a811e00f2d0354ac97bb14a985dd38a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Sparc/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "c4dcdb5ba662dd22763e44dd574a63455a8c5a4a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/Sparc/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "9633e03a3847c9207c3afbe34c4c9237cadde49c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/SystemZ/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "ad19a565030bb1c7bb06cdeab84698119e03b7e7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/SystemZ/CMakeLists.txt" : {
      "ObjectId" : "138e14a25b70f78d053d46155c1b1aecdef42a45",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/SystemZ/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "4b94bcd1f5f1e6bd9cd6d2755e0c3de70f26b7ec",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/SystemZ/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "21b023ce1f7b65ae1dea4a04923c345a04153be9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/SystemZ/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "1aa8c76e8bc6414661f6a55c60b6d29cfe0b1921",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/SystemZ/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1ebc669e59af1361310697abd17ce3b8ca752e0f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/WebAssembly/CMakeLists.txt" : {
      "ObjectId" : "68b68bd797b5f85f68b15438d403afb7ba7b66af",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/WebAssembly/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "5e55e2958aeb167a239665919be415489172a852",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/WebAssembly/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "5394b67d2b87f5827d566421770f06e2441ac345",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/WebAssembly/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "13c0fe91590840e14ae6698522f499e6767c1e92",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/WebAssembly/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "ef6e4d2b617a294a08abd466c887432de1cc55b5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "b022a41b192f3b58753a19a718f9aea01700c916",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/CMakeLists.txt" : {
      "ObjectId" : "44400813094b739316aa2af048614827882edc87",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "43702826c9bcc479890ea878f0e54e4969d72c0a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "686a37e614988c42bda29988c82b8e823fc3f8ac",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "8d0d9fa1215c793382e030a794c684fa82d1b978",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1d8a8c1c118e72671dc577eeed258136802a7d1d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/X86/Utils/CMakeLists.txt" : {
      "ObjectId" : "b2697467f26a458efc484c1f0118c736e7dc59e1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/XCore/CMakeLists.txt" : {
      "ObjectId" : "0a609ef76f4417764350ad26a1c3703f4094dd4f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/XCore/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "1ed10c02c356ea9d50357d22ad0f760b7966d68b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/XCore/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "53cf84da7be98bc7e19deb3eddf2e5fcd010ab9b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/XCore/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "a14cf5ce2ac1498231a1958d398791fe1bc3f227",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Target/XCore/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "462f2d405304b65e6acf59e8beedd54ef16f2001",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Testing/CMakeLists.txt" : {
      "ObjectId" : "fc23e64eeb7a439011c9dd162b83cae7cbc4ca59",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Testing/Support/CMakeLists.txt" : {
      "ObjectId" : "8ab6fd9a25af62f1612798ed718dd9d78f504db7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ToolDrivers/CMakeLists.txt" : {
      "ObjectId" : "28da36bba20915e7c08a6d1cd15690986d905142",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ToolDrivers/llvm-dlltool/CMakeLists.txt" : {
      "ObjectId" : "52bd5cba86f4321f4f5f6863fa7dfcd5fccf44a3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/ToolDrivers/llvm-lib/CMakeLists.txt" : {
      "ObjectId" : "ab53a6843446a430c780408e1b8b6fcc752cd241",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/CMakeLists.txt" : {
      "ObjectId" : "67bdeb27212dc57a9d47115ac9de220775cd85ec",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/Coroutines/CMakeLists.txt" : {
      "ObjectId" : "1c635bd9db08ac6cb85fb44615aeb4e499476f54",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/Hello/CMakeLists.txt" : {
      "ObjectId" : "4a55dd9c04b8019b37efe6b2d55513d23aea70ae",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from the hello plugin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/lib/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "397561746f863aa93fbed2e9f03f39cb19d94470",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/InstCombine/CMakeLists.txt" : {
      "ObjectId" : "5cbe804ce3ec03f47d5212f94dc17531d9903f6e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/Instrumentation/CMakeLists.txt" : {
      "ObjectId" : "66fdcb3ccc49da9648501f861c41ce1f3bc352c0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/ObjCARC/CMakeLists.txt" : {
      "ObjectId" : "114471eb6f6e14010438e06defdde918a02c598c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/Scalar/CMakeLists.txt" : {
      "ObjectId" : "0562d3882f8b5238f010009e16ca783d337c595e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "972e47f9270a0dd6f07dcfd00551a4daac114079",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/Transforms/Vectorize/CMakeLists.txt" : {
      "ObjectId" : "7622ed6d194ff23cd1803a285d4364a860fb364c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/WindowsManifest/CMakeLists.txt" : {
      "ObjectId" : "0bf5f421c18b7cab3f667c60c12627390d71171a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/lib/XRay/CMakeLists.txt" : {
      "ObjectId" : "8d558209d8ee7cac1497133780bdbe45ad5f366b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/CMakeLists.txt" : {
      "ObjectId" : "32617fd4ba62979a59379bfb18cc9c90022c1266",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Discover the projects that use CMake in the subdirectories.\n\n# Note that explicit cmake invocation is required every time a new project is\n\n# added or removed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Also add in libc++ and compiler-rt trees if present (and we have\n\n# a sufficiently recent version of CMake where required).\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC isn't quite working with libc++ yet, disable it until issues are\n\n# fixed.\n\n# FIXME: LLVM_FORCE_BUILD_RUNTIME is currently used by libc++ to force\n\n# enable the in-tree build when targeting clang-cl.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add the projects in reverse order of their dependencies so that the\n\n# dependent projects can see the target names of their dependencies.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/projects/compiler-rt/CMakeLists.txt" : {
      "ObjectId" : "4b953b212829a697b08c52ad67c6d37434f05b6a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build for CompilerRT.\n\n#\n\n# An important constraint of the build is that it only produces libraries\n\n# based on the ability of the host toolchain to target various platforms.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if compiler-rt is built as a standalone project.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add path for custom compiler-rt modules.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check that the shadow scale value is valid.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Find Python interpreter.\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Define default arguments to lit.\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# We support running instrumented tests when we're not cross compiling\n\n# and target a UNIX-like system or Windows.\n\n# We can run tests on Android even when we are cross-compiling.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# COMPILER_RT_DEBUG_PYBOOL is used by lit.common.configured.in.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Mac OS X prior to 10.9 had problems with exporting symbols from\n\n# libc++/libc++abi.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#================================\n\n# Setup Compiler Flags\n\n#================================\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Override any existing /W flags with /W4. This is what LLVM does.  Failing to\n\n# remove other /W[0-4] flags will result in a warning about overriding a\n\n# previous flag.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Emulate C99 and C++11's __func__ for MSVC prior to 2013 CTP.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Provide some common commmandline flags for Sanitizer runtimes.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The following is a workaround for powerpc64le. This is the only architecture\n\n# that requires -fno-function-sections to work properly. If lacking, the ASan\n\n# Linux test function-sections-are-bad.cc fails with the following error:\n\n# 'undefined symbol: __sanitizer_unaligned_load32'.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Replace the /M[DT][d] flags with /MT, and strip any definitions of _DEBUG,\n\n# which cause definition mismatches at link time.\n\n# FIXME: In fact, sanitizers should support both /MT and /MD, see PR20214.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# VS 2015 (version 1900) added support for thread safe static initialization.\n\n# However, ASan interceptors run before CRT initialization, which causes the\n\n# new thread safe code to crash. Disable this feature for now.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# If we're using MSVC,\n\n# always respect the optimization flags set by CMAKE_BUILD_TYPE instead.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Build with optimization, unless we're in debug mode.\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Determine if we should restrict stack frame sizes.\n\n# Stack frames on PowerPC and Mips and in debug biuld can be much larger than\n\n# anticipated.\n\n# FIXME: Fix all sanitizers and add -Wframe-larger-than to\n\n# SANITIZER_COMMON_FLAGS\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Build sanitizer runtimes with debug info.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Use /Z7 instead of /Zi for the asan runtime. This avoids the LNK4099\n\n# warning from the MS linker complaining that it can't find the 'vc140.pdb'\n\n# file used by our object library compilations.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Sanitizers cannot be built with -fmodules. The interceptors intentionally\n\n# don't include system headers, which is incompatible with modules.\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Turn off several warnings.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set common link flags.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Warnings to turn off for all libraries, not just sanitizers.\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Silence MSVC linker warnings caused by empty object files. The\n\n# sanitizer libraries intentionally use ifdefs that result in empty\n\n# files, rather than skipping these files in the build system.\n\n# Ideally, we would pass this flag only for the libraries that need\n\n# it, but CMake doesn't seem to have a way to set linker flags for\n\n# individual static libraries, so we enable the suppression flag for\n\n# the whole compiler-rt project.\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# If we have a valid source tree, generate llvm-lit into the bin directory.\n\n# The user can still choose to have the check targets *use* a different lit\n\n# by specifying -DLLVM_EXTERNAL_LIT, but we generate it regardless.\n",
        "Line" : 376,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 27
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/AddCompilerRT.cmake" : {
      "ObjectId" : "139b6140011c4b122af25856b5766eafaf138f11",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For RUNTIME_OUTPUT_DIRECTORY variable, Multi-configuration generators\n\n# append a per-configuration subdirectory to the specified directory.\n\n# To avoid the appended folder, the configuration specific variable must be\n\n# set 'RUNTIME_OUTPUT_DIRECTORY_${CONF}':\n\n# RUNTIME_OUTPUT_DIRECTORY_DEBUG, RUNTIME_OUTPUT_DIRECTORY_RELEASE, ...\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Tries to add an \"object library\" target for a given list of OSs and/or\n\n# architectures with name \"<name>.<arch>\" for non-Darwin platforms if\n\n# architecture can be targeted, and \"<name>.<os>\" for Darwin platforms.\n\n# add_compiler_rt_object_libraries(<name>\n\n#                                  OS <os names>\n\n#                                  ARCHS <architectures>\n\n#                                  SOURCES <source files>\n\n#                                  CFLAGS <compile flags>\n\n#                                  DEFS <compile definitions>)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Strip out -msse3 if this isn't macOS.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Takes a list of object library targets, and a suffix and appends the proper\n\n# TARGET_OBJECTS string to the output variable.\n\n# format_object_libs(<output> <suffix> ...)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Xcode will try to compile asm files as C ('clang -x c'), and that will fail.\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Pass ASM file directly to the C++ compiler.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Adds static or shared runtime for a list of architectures and operating\n\n# systems and puts it in the proper directory in the build and install trees.\n\n# add_compiler_rt_runtime(<name>\n\n#                         {STATIC|SHARED}\n\n#                         ARCHS <architectures>\n\n#                         OS <os list>\n\n#                         SOURCES <source files>\n\n#                         CFLAGS <compile flags>\n\n#                         LINK_FLAGS <linker flags>\n\n#                         DEFS <compile definitions>\n\n#                         LINK_LIBS <linked libraries> (only for shared library)\n\n#                         OBJECT_LIBS <object libraries to use as sources>\n\n#                         PARENT_TARGET <convenience parent target>)\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Until we support this some other way, build compiler-rt runtime without LTO\n\n# to allow non-LTO projects to link with it.\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Strip out -msse3 if this isn't macOS.\n",
        "Line" : 149,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# If the parent targets aren't created we should create them\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# The parent install target specifies the parent component to scrape up\n\n# anything not installed by the individual install targets, and to handle\n\n# installation when running the multi-configuration generators.\n",
        "Line" : 205,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If you are using a multi-configuration generator we don't generate\n\n# per-library install rules, so we fall back to the parent target COMPONENT\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Ad-hoc sign the dylibs\n",
        "Line" : 255,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# We only want to generate per-library install targets if you aren't using\n\n# an IDE because the extra targets get cluttered in IDEs.\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If you have a parent target specified, we bind the new install target\n\n# to the parent install target.\n",
        "Line" : 285,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# when cross compiling, COMPILER_RT_TEST_COMPILER_CFLAGS help\n\n# in compilation and linking of unittests.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unittests support.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# clang doesn't support exceptions on Windows yet.\n",
        "Line" : 325,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# We should teach clang to understand \"#pragma intrinsic\", see PR19898.\n",
        "Line" : 328,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Clang doesn't support SEH on Windows yet.\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# gtest use a lot of stuff marked as deprecated on Windows.\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Compile and register compiler-rt tests.\n\n# generate_compiler_rt_tests(<output object files> <test_suite> <test_name>\n\n#                           <test architecture>\n\n#                           KIND <custom prefix>\n\n#                           SUBDIR <subdirectory for testing binary>\n\n#                           SOURCES <sources to compile>\n\n#                           RUNTIME <tests runtime to link in>\n\n#                           CFLAGS <compile-time flags>\n\n#                           COMPILE_DEPS <compile-time dependencies>\n\n#                           DEPS <dependencies>\n\n#                           LINK_FLAGS <flags to use during linking>\n\n# )\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Link objects into a single executable with COMPILER_RT_TEST_COMPILER,\n\n# using specified link flags. Make executable a part of provided\n\n# test_suite.\n\n# add_compiler_rt_test(<test_suite> <test_name> <arch>\n\n#                      SUBDIR <subdirectory for binary>\n\n#                      OBJECTS <object files>\n\n#                      DEPS <deps (e.g. runtime libs)>\n\n#                      LINK_FLAGS <link flags>)\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Use host compiler in a standalone build, and just-built Clang otherwise.\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# If we're not on MSVC, include the linker flags from CMAKE but override them\n\n# with the provided link flags. This ensures that flags which are required to\n\n# link programs at all are included, but the changes needed for the test\n\n# trump. With MSVC we can't do that because CMake is set up to run link.exe\n\n# when linking, not the compiler. Here, we hack it to use the compiler\n\n# because we want to use -fsanitize flags.\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Make the test suite depend on the binary.\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Install in Clang resource directory.\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Builds custom version of libc++ and installs it in <prefix>.\n\n# Can be used to build sanitized versions of libc++ for running unit tests.\n\n# add_custom_libcxx(<name> <prefix>\n\n#                   DEPS <list of build deps>\n\n#                   CFLAGS <list of compile flags>)\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Configure lit configuration files, including compiler-rt specific variables.\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/BuiltinTests.cmake" : {
      "ObjectId" : "a6bf8644ad5229492f77bc49566ebfb9896c1771",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function takes an OS and a list of architectures and identifies the\n\n# subset of the architectures list that the installed toolchain can target.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/CompilerRTCompile.cmake" : {
      "ObjectId" : "556ee78969ca731166c3377a3b0c0b44ca0aa58d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Windows, CMAKE_*_FLAGS are built for MSVC but we use the GCC clang.exe,\n\n# which uses completely different flags. Translate some common flag types, and\n\n# drop the rest.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Insert an empty string in the list to simplify processing.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Canonicalize /flag to -flag.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make space separated -D and -U flags into joined flags.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Pass through basic command line macro definitions (-DNDEBUG).\n",
        "Line" : 17,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Canonicalize normal optimization flags to -O2.\n",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Compile a sanitizer test with a freshly built clang\n\n# for a given architecture, adding the result to the object list.\n\n#  - obj_list: output list of objects, populated by path\n\n#              of a generated object file.\n\n#  - source:   source file of a test.\n\n#  - arch:     architecture to compile for.\n\n# sanitizer_test_compile(<obj_list> <source> <arch>\n\n#                        KIND <custom namespace>\n\n#                        COMPILE_DEPS <list of compile-time dependencies>\n\n#                        DEPS <list of dependencies>\n\n#                        CFLAGS <list of flags>\n\n# )\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Write out architecture-specific flags into TARGET_CFLAGS variable.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Compile a source into an object file with COMPILER_RT_TEST_COMPILER using\n\n# a provided compile flags and dependenices.\n\n# clang_compile(<object> <source>\n\n#               CFLAGS <list of compile flags>\n\n#               DEPS <list of dependencies>)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Ignore unknown warnings. CMAKE_CXX_FLAGS may contain GCC-specific options\n\n# which are not supported by Clang.\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On Darwin, there are no system-wide C++ headers and the just-built clang is\n\n# therefore not able to compile C++ files unless they are copied/symlinked into\n\n# ${LLVM_BINARY_DIR}/include/c++\n\n# The just-built clang is used to build compiler-rt unit tests. Let's detect\n\n# this before we try to build the tests and print out a suggestion how to fix\n\n# it.\n\n# On other platforms, this is currently not an issue.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake" : {
      "ObjectId" : "a25540bf46d1bd8a53fe4c40efc41432f6471b70",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On OS X SDKs can be installed anywhere on the base system and xcode-select can\n\n# set the default Xcode to use. This function finds the SDKs that are present in\n\n# the current Xcode.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Let's first try the internal SDK, otherwise use the public SDK.\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# There isn't a clear mapping of what architectures are supported with a given\n\n# target platform, but ld's version output does list the architectures it can\n\n# link for.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If auto-detecting fails, fall back to a default set\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This function takes an OS and a list of architectures and identifies the\n\n# subset of the architectures list that the installed toolchain can target.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The simple program will build for x86_64h on the simulator because it is \n\n# compatible with x86_64 libraries (mostly), but since x86_64h isn't actually\n\n# a valid or useful architecture for the iOS simulator we should drop it.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# This function checks the host cpusubtype to see if it is post-haswell. Haswell\n\n# and later machines can run x86_64h binaries. Haswell is cpusubtype 8.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Read and process the exclude file into a list of symbols\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# this function takes an OS, architecture and minimum version and provides a\n\n# list of builtin functions to exclude\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# adds a single builtin library for a single OS & ARCH\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make a copy of the compilation flags.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Strip out any inappropriate flags for the target.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generates builtin libraries for all operating systems specified in ARGN. Each\n\n# OS library is constructed by lipo-ing together single-architecture libraries.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Don't build cc_kext libraries for simulator platforms\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# By not specifying MIN_VERSION this only reads the OS and OS-arch lists.\n\n# We don't want to filter out the builtins that are present in libSystem\n\n# because kexts can't link libSystem.\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# In addition to the builtins cc_kext includes some profile sources\n",
        "Line" : 307,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# We put the x86 sim slices into the archives for their base OS\n",
        "Line" : 329,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# this is a hacky opt-out. If you can't target both intel and arm\n\n# architectures we bail here.\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# x86 targets are hard float by default, but the complain about the\n\n# float ABI flag, so don't pass it unless we're targeting arm.\n",
        "Line" : 415,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 19
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/CompilerRTLink.cmake" : {
      "ObjectId" : "05c535f623b339a456a6817f51ce9ccd89748ca8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link a shared library with COMPILER_RT_TEST_COMPILER.\n\n# clang_link_shared(<output.so>\n\n#                   OBJECTS <list of input objects>\n\n#                   LINK_FLAGS <list of link flags>\n\n#                   DEPS <list of dependencies>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/CompilerRTUtils.cmake" : {
      "ObjectId" : "9f79a9b920db58359307a516d99cc1e6ea3fac21",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Because compiler-rt spends a lot of time setting up custom compile flags,\n\n# define a handy helper function for it. The compile flags setting in CMake\n\n# has serious issues that make its syntax challenging at best.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the variable var_PYBOOL to True if var holds a true-ish string,\n\n# otherwise set it to False.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Appends value to all lists in ARGN, if the condition is true.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Appends value to all strings in ARGN, if the condition is true.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Takes ${ARGN} and puts only supported architectures in @out_var list.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add $arch as supported with no additional flags.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# test_target_arch(<arch> <def> <target flags...>)\n\n# Checks if architecture is supported: runs host compiler with provided\n\n# flags to verify that:\n\n#   1) <def> is defined (if non-empty)\n\n#   2) simple file can be successfully built.\n\n# If successful, saves target flags for this architecture.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Bail out if we cannot target the architecture we plan to test.\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# must be checked before __MIPS\n",
        "Line" : 182,
        "CharPositionInLine" : 19
      },
      "9" : {
        "Text" : "# Make use of LLVM CMake modules.\n\n# --cmakedir is supported since llvm r291218 (4.0 release)\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get some LLVM variables from LLVMConfig.\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Backwards compatibility: this variable used to be called\n\n# COMPILER_RT_TEST_TARGET_TRIPLE.\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Determine if test target triple is specified explicitly, and doesn't match the\n\n# default.\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Filter out generic versions of routines that are re-implemented in\n\n# architecture specific manner.  This prevents multiple definitions of the\n\n# same symbols, making the symbol selection non-deterministic.\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/HandleCompilerRT.cmake" : {
      "ObjectId" : "cff5031ec9b23c4bafd969f1989198197a871bda",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/Modules/SanitizerUtils.cmake" : {
      "ObjectId" : "c80fc3b1eefc226b202af7d0ec42c41342554629",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a target \"<name>-<arch>-symbols\" that would generate the list of\n\n# symbols that need to be exported from sanitizer runtime \"<name>\". Function\n\n# interceptors are exported automatically, user can also provide files with\n\n# symbol names that should be exported as well.\n\n#   add_sanitizer_rt_symbols(<name>\n\n#                            ARCHS <architectures>\n\n#                            PARENT_TARGET <convenience parent target>\n\n#                            EXTRA <files with extra symbols to export>)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This function is only used on Darwin, where undefined symbols must be specified\n\n# in the linker invocation.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add target to check code style for sanitizer runtimes.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/base-config-ix.cmake" : {
      "ObjectId" : "b208f085240844ec03e87c438306f6b4bbc4d814",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The CompilerRT build system requires CMake version 2.8.8 or higher in order\n\n# to use its support for building convenience \"libraries\" as a collection of\n\n# .o files. This is particularly useful in producing larger, more complex\n\n# runtime libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Top level target used to build all compiler-rt libraries.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setting these variables from an LLVM build is sufficient that compiler-rt can\n\n# construct the output paths, so it can behave as if it were in-tree here.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compute the Clang version from the LLVM version.\n\n# FIXME: We should be able to reuse CLANG_VERSION variable calculated\n\n#        in Clang cmake files, instead of copying the rules here.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Setup the paths where compiler-rt runtimes and headers should be stored.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Use just-built Clang to compile/link tests on all platforms, except for\n\n# Windows where we need to use clang-cl instead.\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Take output dir and install path from the user.\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Use a host compiler to compile/link tests.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# On Darwin if /usr/include doesn't exist, the user probably has Xcode but not\n\n# the command line tools. If this is the case, we need to find the OS X\n\n# sysroot to pass to clang.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Find and run MSVC (not clang-cl) and get its version. This will tell clang-cl\n\n# what version of MSVC to pretend to be so that the STL works.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Find and run MSVC (not clang-cl) and get its version. This will tell\n\n# clang-cl what version of MSVC to pretend to be so that the STL works.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Add this flag into the host build if this is clang-cl.\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Add this flag to test compiles to suppress clang's auto-detection\n\n# logic.\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Generate the COMPILER_RT_SUPPORTED_ARCH list.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Examine compiler output to determine target architecture.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Supported archs for Apple platforms are generated later\n",
        "Line" : 137,
        "CharPositionInLine" : 20
      },
      "16" : {
        "Text" : "# Strip out -nodefaultlibs when calling TEST_BIG_ENDIAN. Configuration\n\n# will fail with this option when building with a sanitizer.\n",
        "Line" : 152,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Gcc doesn't accept -m32/-m64 so we do the next best thing and use\n\n# -mips32r2/-mips64r2. We don't use -mips1/-mips3 because we want to match\n\n# clang's default CPU's. In the 64-bit case, we must also specify the ABI\n\n# since the default ABI differs between gcc and clang.\n\n# FIXME: Ideally, we would build the N32 library too.\n",
        "Line" : 167,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 18
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/builtin-config-ix.cmake" : {
      "ObjectId" : "bdb2529b5ee203772bdbe6f823d016a40f3e7b92",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make all the tests only check the compiler\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check host compiler support for certain flags\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We're setting the flag manually for each target OS\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Need to build a 10.4 compatible libclang_rt\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# don't include the Haswell slice in the 10.4 compatibility library\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If we're not building the builtins standalone, just rely on the  tests in\n\n# config-ix.cmake to tell us what to build. Otherwise we need to do some leg\n\n# work here...\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Architectures supported by compiler-rt libraries.\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/caches/Apple.cmake" : {
      "ObjectId" : "cdee3c088057297c823475797107288f0e379824",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style builds of compiler-rt.\n\n# This configuration matches Apple uses when shipping Xcode releases.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/cmake/config-ix.cmake" : {
      "ObjectId" : "9e0c4774829fcaf99df3753dc14904c8b9847f66",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CodeGen options.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MinGW warns if -fvisibility-inlines-hidden is used.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Debug info flags.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Warnings.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Symbols.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Libraries.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Android's libstdc++ has a dependency on libdl.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Linker flags.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Architectures.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# List of all architectures we can target.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Try to compile a very simple source file to ensure we can target the given\n\n# platform. We use the results of these tests to build only the various target\n\n# runtime libraries supported by our current compilers cross-compiling\n\n# abilities.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Detect whether the current target platform is 32-bit or 64-bit, and setup\n\n# the correct commandline flags needed to attempt to target 32-bit and 64-bit.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Returns a list of architecture specific target cflags in @out_var list.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This is only called in constructing cflags for tests executing on the\n\n# host. This will need to all be cleaned up to support building tests\n\n# for cross-targeted hardware (i.e. iOS).\n",
        "Line" : 149,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Returns a compiler and CFLAGS that should be used to run tests for the\n\n# specific architecture.  When cross-compiling, this is controled via\n\n# COMPILER_RT_TEST_COMPILER and COMPILER_RT_TEST_COMPILER_CFLAGS.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This is only true if we are cross-compiling.\n\n# Build all tests with host compiler and use host tools.\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Note: In order to target x86_64h on OS X the minimum deployment target must\n\n# be 10.8 or higher.\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We're setting the flag manually for each target OS\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Figure out which arches to use for each OS\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# for list_intersect\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Architectures supported by compiler-rt libraries.\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# LSan and UBSan common files should be available on all architectures\n\n# supported by other sanitizers (even if they build into dummy object files).\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# See if the DIA SDK is available and usable.\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# TODO: Add builtins support.\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "3rd/templight/llvm/projects/compiler-rt/include/CMakeLists.txt" : {
      "ObjectId" : "f7efb102ab6310fee25304e4ec54f5f4e978d13c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy compiler-rt headers to the build tree.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install sanitizer headers.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install xray headers.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# don't add this for IDEs.\n",
        "Line" : 57,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/CMakeLists.txt" : {
      "ObjectId" : "b3731f653a01a1655ada728fda7572eba0edf491",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First, add the subdirectories which contain feature-based runtime libraries\n\n# and several convenience helper libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hoist the building of sanitizer_common on whether we're building either the\n\n# sanitizers or xray (or both).\n\n#\n\n#TODO: Refactor sanitizer_common into smaller pieces (e.g. flag parsing, utils).\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/asan/CMakeLists.txt" : {
      "ObjectId" : "fbd72f69298f6d0780dd2121bcccd09246ab3a24",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the AddressSanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Android, -z global does not do what it is documented to do.\n\n# On Android, -z global moves the library ahead in the lookup order,\n\n# placing it right after the LD_PRELOADs. This is used to compensate for the fact\n\n# that Android linker does not look at the dependencies of the main executable\n\n# that aren't dependencies of the current DSO when resolving symbols from said DSO.\n\n# As a net result, this allows running ASan executables without LD_PRELOAD-ing the\n\n# ASan runtime library.\n\n# The above is applicable to L MR1 or newer.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compile ASan sources into an object library.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build ASan runtimes shipped with Clang.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build separate libraries for each target.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The Solaris 11.4 linker supports a subset of GNU ld version scripts,\n\n# but requires a special option to enable it.\n",
        "Line" : 178,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# The only purpose of RTAsan_dynamic_version_script_dummy is to\n\n# carry a dependency of the shared runtime on the version script.\n\n# Replacing it with a straightforward\n\n# add_dependencies(clang_rt.asan-dynamic-${arch} clang_rt.asan-dynamic-${arch}-version-list)\n\n# generates an order-only dependency in ninja.\n",
        "Line" : 211,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/asan/scripts/CMakeLists.txt" : {
      "ObjectId" : "e5ab8ebed024211d4b8c18a367608d1ef1f4dd11",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/asan/tests/CMakeLists.txt" : {
      "ObjectId" : "67a8fafaba3c581abd2b8d002b8d07c460801ab5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Testing rules for AddressSanitizer.\n\n#\n\n# These are broken into two buckets. One set of tests directly interacts with\n\n# the runtime library and checks its functionality. These are the\n\n# no-instrumentation tests.\n\n#\n\n# Another group of tests relies upon the ability to compile the test with\n\n# address sanitizer instrumentation pass. These tests form \"integration\" tests\n\n# and have some elements of version skew -- they test the *host* compiler's\n\n# instrumentation against the just-built runtime library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This will ensure the target linker is used\n\n# during cross compilation\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -gline-tables-only must be enough for ASan, so use it if possible.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use -D instead of definitions to please custom compile command.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable exceptions on Windows until they work reliably.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# x86_64 FreeBSD 9.2 additionally requires libc++ to build the tests.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Unit tests on Mac depend on Foundation.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO(eugenis): move all -l flags above to _LIBS?\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Main AddressSanitizer unit tests.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# AddressSanitizer unit tests with dynamic runtime (on platforms where it's\n\n# not the default).\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ASan benchmarks (not actively used now).\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Closure to keep the values.\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# With the MSVC CRT, the choice between static and dynamic CRT is made at\n\n# compile time with a macro. Simulate the effect of passing /MD to clang-cl.\n",
        "Line" : 193,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Otherwise, reuse ASAN_INST_TEST_OBJECTS.\n",
        "Line" : 206,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Uninstrumented tests.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Add static ASan runtime that will be linked with uninstrumented tests.\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Test w/o ASan instrumentation. Link it with ASan statically.\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# FIXME: .arch?\n",
        "Line" : 278,
        "CharPositionInLine" : 34
      },
      "20" : {
        "Text" : "# Test with ASan instrumentation. Link with ASan dynamic runtime.\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Setup correct output directory and link flags.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Add unit tests to the test suite.\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 23
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/builtins/CMakeLists.txt" : {
      "ObjectId" : "0b50b5bb8d239a5f62aea7aae6a34ac6bd4c1a6b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This directory contains a large amount of C code which provides\n\n# generic implementations of the core runtime library along with optimized\n\n# architecture-specific code in various subdirectories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Need to add a mechanism for logging errors when builtin source files are\n\n# added to a sub-directory and not this CMakeLists file.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These sources work on all x86 variants, but only x86 variants.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MSVC\n",
        "Line" : 274,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Use C versions of functions when building on MSVC\n\n# MSVC's assembler takes Intel syntax, not AT&T syntax.\n\n# Also use only MSVC compilable builtin implementations.\n",
        "Line" : 275,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# if (NOT MSVC)\n",
        "Line" : 285,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "# TODO the EABI sources should only be added to EABI targets\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# macho_embedded archs\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These flags would normally be added to CMAKE_C_FLAGS by the llvm\n\n# cmake step. Add them manually if this is a standalone build.\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# NOTE: some architectures (e.g. i386) have multiple names.  Ensure that\n\n# we catch them all.\n",
        "Line" : 519,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Filter out generic versions of routines that are re-implemented in\n\n# architecture specific manner.  This prevents multiple definitions of the\n\n# same symbols, making the symbol selection non-deterministic.\n",
        "Line" : 528,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Needed for clear_cache on debug mode, due to r7's usage in inline asm.\n\n# Release mode already sets it via -O2/3, Debug mode doesn't.\n",
        "Line" : 539,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 12
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/builtins/Darwin-excludes/CMakeLists.txt" : {
      "ObjectId" : "266e422152436475a5942ca47653a7640b1ce177",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/builtins/macho_embedded/CMakeLists.txt" : {
      "ObjectId" : "266e422152436475a5942ca47653a7640b1ce177",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/cfi/CMakeLists.txt" : {
      "ObjectId" : "6c531445626a60eabadf41277ce1b7983e385705",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/dfsan/CMakeLists.txt" : {
      "ObjectId" : "2c486bff821bb2ade60cc846fb99b402f94187e9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runtime library sources and build flags.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent clang from generating libc calls.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Static runtime library.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/esan/CMakeLists.txt" : {
      "ObjectId" : "2012ab642bf1c3ee478a311e92230c4ee3018a12",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the EfficiencySanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO(bruening): add tests via add_subdirectory(tests)\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "9769be52ae0145f37846f7fff8be15840a449839",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/fuzzer/tests/CMakeLists.txt" : {
      "ObjectId" : "dac8773597e8c6aabe2002bba7fc879d026f2166",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/hwasan/CMakeLists.txt" : {
      "ObjectId" : "15013c09cdfc31c5bb72c6c41d6e2b251041e9f1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runtime library sources and build flags.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent clang from generating libc calls.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On Android, -z global does not do what it is documented to do.\n\n# On Android, -z global moves the library ahead in the lookup order,\n\n# placing it right after the LD_PRELOADs. This is used to compensate for the fact\n\n# that Android linker does not look at the dependencies of the main executable\n\n# that aren't dependencies of the current DSO when resolving symbols from said DSO.\n\n# As a net result, this allows running ASan executables without LD_PRELOAD-ing the\n\n# ASan runtime library.\n\n# The above is applicable to L MR1 or newer.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Static runtime library.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The only purpose of RTHWAsan_dynamic_version_script_dummy is to\n\n# carry a dependency of the shared runtime on the version script.\n\n# Replacing it with a straightforward\n\n# add_dependencies(clang_rt.asan-dynamic-${arch} clang_rt.asan-dynamic-${arch}-version-list)\n\n# generates an order-only dependency in ninja.\n",
        "Line" : 116,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# if(COMPILER_RT_INCLUDE_TESTS)\n\n#   add_subdirectory(tests)\n\n# endif()\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/interception/CMakeLists.txt" : {
      "ObjectId" : "18d25948105d700cbb2fb3626eafb73e0ddc7059",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the runtime interception helper library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/interception/tests/CMakeLists.txt" : {
      "ObjectId" : "1da0a455bf331798b2ffb532602df4d9815f73ee",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -gline-tables-only must be enough for these tests, so use it if possible.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# x86_64 FreeBSD 9.2 additionally requires libc++ to build the tests. Also,\n\n# 'libm' shall be specified explicitly to build i386 tests.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Adds static library which contains interception object file\n\n# (universal binary on Mac and arch-specific object files on Linux).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Interception unit tests testsuite.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adds interception tests for architecture.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We use just-built clang to build interception unittests, so we must\n\n# be sure that produced binaries would work.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/lsan/CMakeLists.txt" : {
      "ObjectId" : "60da3e1868716d1886e24a42939c0b5bc796f431",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/msan/CMakeLists.txt" : {
      "ObjectId" : "598ae54588c19900f54318ac54d83a5b0ce252df",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runtime library sources and build flags.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent clang from generating libc calls.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Static runtime library.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/msan/tests/CMakeLists.txt" : {
      "ObjectId" : "b460231783b871c660839a8ec68fdd831d23b287",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unittest sources and build flags.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Don't need -stdlib=libc++ because we explicitly list libc++.so in the linker\n\n# inputs.\n\n# FIXME: we build libcxx without cxxabi and need libstdc++ to provide it.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Main MemorySanitizer unit tests.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Adds MSan unit tests and benchmarks for architecture.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build gtest instrumented with MSan.\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Instrumented tests.\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Instrumented loadable module objects.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Instrumented loadable library tests.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We should only build MSan unit tests if we can build instrumented libcxx.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/profile/CMakeLists.txt" : {
      "ObjectId" : "91d67ec365c5a7eb91c962ef59072e1264732352",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This appears to be a C-only warning banning the use of locals in aggregate\n\n# initializers. All other compilers accept this, though.\n\n# nonstandard extension used : 'identifier' : cannot be initialized using address of automatic variable\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/safestack/CMakeLists.txt" : {
      "ObjectId" : "5a1bac2912b7305735c5940dc61b020f514695dc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build universal binary on APPLE.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Otherwise, build separate libraries for each target.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/sanitizer_common/CMakeLists.txt" : {
      "ObjectId" : "e0226ae4975f9145d08773be34ca554c077b574d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build system for the common Sanitizer runtime support library components.\n\n# These components are shared between AddressSanitizer and ThreadSanitizer.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libc functions stubs. These sources should be linked instead of\n\n# SANITIZER_LIBCDEP_SOURCES when sanitizer_common library must not depend on\n\n# libc.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Explicitly list all sanitizer_common headers. Not all of these are\n\n# included in sanitizer_common source files, but we need to depend on\n\n# headers when building our custom unit tests.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# With -pedantic, our .S files raise warnings about empty macro arguments\n\n# from __USER_LABEL_PREFIX__ being an empty arg to GLUE().  Unfortunately,\n\n# there is no simple way to test for an empty define, nor to disable just\n\n# that warning or to disable -pedantic.  There is also no simple way to\n\n# remove -pedantic from just this file (we'd have to remove from\n\n# CMAKE_C*_FLAGS and re-add as a source property to all the non-.S files).\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Solaris ld doesn't support the non-standard GNU ld extension of adding\n\n# __start_SECNAME and __stop_SECNAME labels to sections whose names are\n\n# valid C identifiers.  Instead we add our own definitions for the\n\n# __sancov_guards section.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Unit tests for common sanitizer runtime.\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/sanitizer_common/tests/CMakeLists.txt" : {
      "ObjectId" : "1bccaa78f39bd69a2bab41978361695443951f75",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: use SANITIZER_COMMON_SUPPORTED_ARCH here\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable exceptions on Windows until they work reliably.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# -gline-tables-only must be enough for these tests, so use it if possible.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MSVC linker is allocating 1M for the stack by default, which is not\n\n# enough for the unittests. Some unittests require more than 2M.\n\n# The default stack size for clang is 8M.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# x86_64 FreeBSD 9.2 additionally requires libc++ to build the tests. Also,\n\n# 'libm' shall be specified explicitly to build i386 tests.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Adds static library which contains sanitizer_common object file\n\n# (universal binary on Mac and arch-specific object files on Linux).\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Sanitizer_common unit tests testsuite.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Adds sanitizer tests for architecture.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Test that the libc-independent part of sanitizer_common is indeed\n\n# independent of libc, by linking this binary without libc (here) and\n\n# executing it (unit test in sanitizer_nolibc_test.cc).\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We use just-built clang to build sanitizer_common unittests, so we must\n\n# be sure that produced binaries would work.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Setup correct output directory and link flags.\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add unit test to test suite.\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/scudo/CMakeLists.txt" : {
      "ObjectId" : "4d26a3477feb6b8e3bffc92ae0545ebc721f76cb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SANITIZER_COMMON_CFLAGS include -fno-builtin, but we actually want builtins!\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable the SSE 4.2 instruction set for scudo_crc32.cpp, if available.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable the AArch64 CRC32 feature for scudo_crc32.cpp, if available.\n\n# Note that it is enabled by default starting with armv8.1-a.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/stats/CMakeLists.txt" : {
      "ObjectId" : "6be36a7cb56872019eb79bd8bfb2d5831c8d295f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/tsan/CMakeLists.txt" : {
      "ObjectId" : "3697ecb2138145d21cdb386f269754972cc0d363",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the ThreadSanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SANITIZER_COMMON_CFLAGS contains -fPIC, but it's performance-critical for\n\n# TSan runtime to be built with -fPIE to reduce the number of register spills.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add extra debug information to TSan runtime. This configuration is rarely\n\n# used, but we need to support it so that debug output will not bitrot.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Assume Linux\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Build and check Go runtime.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Sanity check for Go runtime.\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Make sure that non-platform-specific files don't include any system headers.\n\n# FreeBSD does not install a number of Clang-provided headers for the compiler\n\n# in the base system due to incompatibilities between FreeBSD's and Clang's\n\n# versions. As a workaround do not use --sysroot=. on FreeBSD until this is\n\n# addressed.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build libcxx instrumented with TSan.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/tsan/dd/CMakeLists.txt" : {
      "ObjectId" : "07fc300535cd9505e22046e8e53b3ca5e3e37c4a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the experimental deadlock detector runtime library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Deadlock detector is currently supported on 64-bit Linux only.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/tsan/tests/CMakeLists.txt" : {
      "ObjectId" : "ad8d02ed331f3dd6f2aa912aa1c7747967be6a94",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a static library for test dependencies.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# add_tsan_unittest(<name>\n\n#                   SOURCES <sources list>\n\n#                   HEADERS <extra headers list>)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/tsan/tests/rtl/CMakeLists.txt" : {
      "ObjectId" : "a34f08ea965b820ad17ff531be7d7a61a2f585a6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/tsan/tests/unit/CMakeLists.txt" : {
      "ObjectId" : "c08508d507917ba3f20fc7d5a637f24a03d4c5ec",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/ubsan/CMakeLists.txt" : {
      "ObjectId" : "ea4f6e895ec0056b24dfca578f806c7410c8a2d7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the undefined behavior sanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Common parts of UBSan runtime.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Initializer of standalone UBSan runtime.\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Common parts of UBSan runtime.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# C++-specific parts of UBSan runtime. Requires a C++ ABI library.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Dummy target if we don't have C++ ABI library.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Standalone UBSan runtimes.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/ubsan_minimal/CMakeLists.txt" : {
      "ObjectId" : "54860a3d27645a4f8a875f6e4fa11d22389f934d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the undefined behavior sanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Common parts of UBSan runtime.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Initializer of standalone UBSan runtime.\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Standalone UBSan runtimes.\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/xray/CMakeLists.txt" : {
      "ObjectId" : "5547600b943ae64d22162d1e1408b713424475a1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the XRay runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# XRay runtime library implementation files.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We only support running on osx for now.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/xray/tests/CMakeLists.txt" : {
      "ObjectId" : "e54e63f27890cbdc8fbbd1049b0063bd71710ace",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/lib/xray/tests/unit/CMakeLists.txt" : {
      "ObjectId" : "62d01f2395813b229d29e96dc0c26f24c2fd7af6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/CMakeLists.txt" : {
      "ObjectId" : "ab16f42d33d4ff5e4b07ecc0425133de0416a107",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed for lit support in standalone builds.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BlocksRuntime (and most of builtins) testsuites are not yet ported to lit.\n\n# add_subdirectory(BlocksRuntime)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When ANDROID, we build tests with the host compiler (i.e. CMAKE_C_COMPILER),\n\n# and run tests with tools from the host toolchain.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use LLVM utils and Clang from the same build tree.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Run sanitizer tests only if we're sure that clang would produce\n\n# working binaries.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CFI tests require diagnostic mode, which is implemented in UBSan.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# cfi testing is gated on ubsan\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Now that we've traversed all the directories and know all the lit testsuites,\n\n# introduce a rule to run to run all of them.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "3rd/templight/llvm/projects/compiler-rt/test/asan/CMakeLists.txt" : {
      "ObjectId" : "739ae56e782bca28564b4740161678439eae4037",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Before Windows 8 (CMAKE_SYSTEM_VERSION 6.2), reserving large regions of shadow\n\n# memory allocated physical memory for page tables, which made it very\n\n# unreliable. Remove the asan tests from check-all in this configuration.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# iOS and iOS simulator test suites\n\n# These are not added into \"check-all\", in order to run these tests, use\n\n# \"check-asan-iossim-x86_64\" and similar. They also require that an extra env\n\n# variable to select which iOS device or simulator to use, e.g.:\n\n# SANITIZER_IOSSIM_TEST_DEVICE_IDENTIFIER=\"iPhone 6\"\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add unit tests.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: support unit test in the android test runner\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Reset EXCLUDE_FROM_ALL to its initial value.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/projects/compiler-rt/test/builtins/CMakeLists.txt" : {
      "ObjectId" : "cabf767223cce68513bcd91776c2cac124c614cf",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test cases.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Unit tests.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#TODO: Add support for Apple.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/test/cfi/CMakeLists.txt" : {
      "ObjectId" : "c7fadde530954db401d204f1ace0f075841f3343",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: enable ThinLTO tests after fixing http://llvm.org/pr32741\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/test/dfsan/CMakeLists.txt" : {
      "ObjectId" : "04035faeddfe9bab5b46ad99ee7f10a3a4aa70fe",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/esan/CMakeLists.txt" : {
      "ObjectId" : "bbdcd51af786c0a1d1ce58edacd993ad6df7877d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(bruening): add Unit/ tests as well\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/test/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "bd511123255b2b36306fb6ecfadc0942bedfae12",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libFuzzer unit tests.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# LIT-based libFuzzer tests.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/projects/compiler-rt/test/hwasan/CMakeLists.txt" : {
      "ObjectId" : "972c73250cf3ad053c016e08aae7f389a8149535",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/interception/CMakeLists.txt" : {
      "ObjectId" : "ff9e4b0adb86dbbfe48ffb12d76f19dd77b0fd39",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests. There are currently no unit tests capable to running on Apple or\n\n# Android targets.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/test/lsan/CMakeLists.txt" : {
      "ObjectId" : "3324928ddb1c129cc193ca8a613889f321b1c739",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/msan/CMakeLists.txt" : {
      "ObjectId" : "7919a6cd2ea0328f029b104a743d38c437cfda2a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/profile/CMakeLists.txt" : {
      "ObjectId" : "5a4cfa1012b081bd84096c5228e20f6efb04fb5f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/safestack/CMakeLists.txt" : {
      "ObjectId" : "c56e81a3ce21dccace9631c0ef77d411e0045828",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some tests require LTO, so add a dependency on the relevant LTO plugin.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/test/sanitizer_common/CMakeLists.txt" : {
      "ObjectId" : "8b210a08aa57099eb2ce79372019f432748f8ec8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a separate config for each tool we support.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: support unit test in the android test runner\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/projects/compiler-rt/test/scudo/CMakeLists.txt" : {
      "ObjectId" : "513168b189d6923a0a3e1dfb560a17bc0aac9d90",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/tsan/CMakeLists.txt" : {
      "ObjectId" : "2b1d3004b1def5728ca69d381058b497e52770dd",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# iOS and iOS simulator test suites\n\n# These are not added into \"check-all\", in order to run these tests, use\n\n# \"check-tsan-iossim-x86_64\" and similar. They also require an extra environment\n\n# variable to select which iOS device or simulator to use, e.g.:\n\n# SANITIZER_IOSSIM_TEST_DEVICE_IDENTIFIER=\"iPhone 6\"\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/test/ubsan/CMakeLists.txt" : {
      "ObjectId" : "7791681472fda5342ba60a9d85cae6c0e8f8285c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(wwchrome): Re-enable ubsan for asan win 64-bit when ready.\n\n# Disable ubsan with AddressSanitizer tests for Windows 64-bit.\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/test/ubsan_minimal/CMakeLists.txt" : {
      "ObjectId" : "712654e9451863cb1f232a799f59433b8300d8a2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/projects/compiler-rt/test/xray/CMakeLists.txt" : {
      "ObjectId" : "b51b3cd0ccd8036d8dec624584b395499bfbc530",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add unit tests.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/projects/compiler-rt/unittests/CMakeLists.txt" : {
      "ObjectId" : "88f9865a6e7d78f46db1c4ada570af0e1bb8af88",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed for lit support in standalone builds.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/runtimes/CMakeLists.txt" : {
      "ObjectId" : "37939658168df50309da0ff97e897f86c6e9f83c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file handles building LLVM runtime sub-projects.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Runtimes are different from tools or other drop-in projects because runtimes\n\n# should be built with the LLVM toolchain from the build directory. This file is\n\n# a first step to formalizing runtime build interfaces.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In the current state this file only works with compiler-rt, other runtimes\n\n# will work as the runtime build interface standardizes.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all subdirectories containing CMake projects\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Side-by-side subprojects layout.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If this file is acting as a top-level CMake invocation, this code path is\n\n# triggered by the external project call for the runtimes target below.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the root project's CMake modules, and the LLVM build's modules to the\n\n# CMake module path.\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some of the runtimes will conditionally use the compiler-rt sanitizers\n\n# to make this work smoothly we ensure that compiler-rt is added first in\n\n# the list of sub-projects. This allows other sub-projects to have checks\n\n# like `if(TARGET asan)` to enable building with asan.\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# LLVMConfig.cmake contains a bunch of CMake variables from the LLVM build.\n\n# This file is installed as part of LLVM distributions, so this can be used\n\n# either from a build directory or an installed LLVM.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Setting these variables will allow the sub-build to put their outputs into\n\n# the library and bin directories of the top-level build.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# This variable makes sure that e.g. llvm-lit is found.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# TODO: Clean this up as part of an interface standardization\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# The subdirectories need to treat this as standalone builds\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Setting a variable to let sub-projects detect which other projects\n\n# will be included under here.\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# We do this in two loops so that HAVE_* is set for each runtime before the\n\n# other runtimes are added.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Between each sub-project we want to cache and clear the LIT properties\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# if this is included from LLVM's CMake\n",
        "Line" : 228,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# If compiler-rt is present we need to build the builtin libraries first. This\n\n# is required because the other runtimes need the builtin libraries present\n\n# before the just-built compiler can pass the configuration tests.\n",
        "Line" : 281,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# We don't need to depend on the builtins if we're building instrumented\n\n# because the next stage will use the same compiler used to build this stage.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# We create a list the names of all the runtime projects in all uppercase and\n\n# with dashes turned to underscores. This gives us the CMake variable prefixes\n\n# for all variables that will apply to runtimes.\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Builtins were built separately above\n",
        "Line" : 353,
        "CharPositionInLine" : 29
      },
      "22" : {
        "Text" : "# runtime_register_target(target)\n\n#   Utility function to register external runtime target.\n",
        "Line" : 371,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Builtins were built separately above\n",
        "Line" : 422,
        "CharPositionInLine" : 29
      },
      "24" : {
        "Text" : "# Create a runtimes target that uses this file as its top-level CMake file.\n\n# The runtimes target is a configuration of all the runtime libraries\n\n# together in a single CMake invocaiton.\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# TODO: This is a hack needed because the libcxx headers are copied into the\n\n# build directory during configuration. Without that step the clang in the\n\n# build directory cannot find the C++ headers in certain configurations.\n\n# I need to build a mechanism for runtime projects to provide CMake code\n\n# that executes at LLVM configuration time to handle this case.\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "3rd/templight/llvm/test/CMakeLists.txt" : {
      "ObjectId" : "6cf5103bf44c4614f781aad242d718ce3261e0dd",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't include check-llvm into check-all without LLVM_BUILD_TOOLS.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the depends list as a variable so that it can grow conditionally.\n\n# NOTE: Sync the substitutions in test/lit.cfg when adding to this list.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If Intel JIT events are supported, depend on a tool that tests the listener.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Clear all non-OCaml cross-target dependencies when building out-of-tree.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Setup a legacy alias for 'check-llvm'. This will likely change to be an\n\n# alias for 'check-all' at some point in the future.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/CMakeLists.txt" : {
      "ObjectId" : "b654b8c5cb8e0d1f24d4acc8b8faa9d48422733c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file will recurse into all subdirectories that contain CMakeLists.txt\n\n# Setting variables that match the pattern LLVM_TOOL_{NAME}_BUILD to Off will\n\n# prevent traversing into a directory.\n\n#\n\n# The only tools that need to be explicitly added are ones that have explicit\n\n# ordering requirements.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Iterates all the subdirectories to create CMake options to enable/disable\n\n# traversing each directory.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build polly before the tools: the tools link against polly when\n\n# LINK_POLLY_INTO_TOOLS is set.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add LTO, llvm-ar, llvm-config, and llvm-profdata before clang, ExternalProject\n\n# requires targets specified in DEPENDS to exist before the call to\n\n# ExternalProject_Add.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Projects supported via LLVM_EXTERNAL_*_SOURCE_DIR need to be explicitly\n\n# specified.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automatically add remaining sub-directories containing a 'CMakeLists.txt'\n\n# file as external projects.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add subprojects specified using LLVM_EXTERNAL_PROJECTS\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/tools/bugpoint-passes/CMakeLists.txt" : {
      "ObjectId" : "e32b0a3aa34f3be8917523c4fd010ccb7e7b9c26",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from this plugin.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/bugpoint/CMakeLists.txt" : {
      "ObjectId" : "72c597379c8b1aa7e836bf222809019dd0c0cc41",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure LLVMTarget can resolve dependences in Polly.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/CMakeLists.txt" : {
      "ObjectId" : "2eee8e6148f77b70da4cf9f5e2287ce9d6336179",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we are not building as a part of LLVM, build Clang as an\n\n# standalone project, using LLVM as an external library:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Assertions should follow llvm-config's.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.\n\n# CMake assumes slashes as PATH.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check prebuilt llvm/utils.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Note: path not really used, except for checking if lit was found\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 152,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 160,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 168,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Make sure that our source directory is on the current cmake module path so that\n\n# we can include cmake files from this directory.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Don't look for libxml if we're using MSan, since uninstrumented third party\n\n# code may call MSan interceptors like strlen, leading to false positives.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# OpenMP offloading requires at least sm_35 because we use shuffle instructions\n\n# to generate efficient code for reductions and the atomicMax instruction on\n\n# 64-bit integers in the implementation of conditional lastprivate.\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The libdir suffix must exactly match whatever LLVM's configuration used.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unlike PACKAGE_VERSION, CLANG_VERSION does not include LLVM_VERSION_SUFFIX.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Configure the Version.inc file.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add appropriate flags for GCC\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Enable -pedantic for Clang even if it's not enabled for LLVM.\n",
        "Line" : 325,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Determine HOST_LINK_VERSION on Darwin.\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Clang version information\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# All targets below may depend on all tablegen'd files.\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Force target to be built as soon as possible. Clang modules builds depend\n\n# header-wise on it as they ship all headers from the umbrella folders. Building\n\n# an entire module might include header, which depends on intrinsics_gen.\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# this line is needed as a cleanup to ensure that any CMakeCaches with the old\n\n# default value get updated to the new default.\n",
        "Line" : 457,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold\n",
        "Line" : 553,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work\n\n# using the just-built compiler, and we need to override DYLD_LIBRARY_PATH\n\n# so that the host object file tools will use the just-built libLTO.\n\n# However if System Integrity Protection is enabled the DYLD variables\n\n# will be scrubbed from the environment of any base system commands. This\n\n# includes /bin/sh, which ninja uses when executing build commands. To\n\n# work around the envar being filtered away we pass it in as a CMake\n\n# variable, and have LLVM's CMake append the envar to the archiver calls.\n",
        "Line" : 557,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# We don't need to depend on compiler-rt if we're building instrumented\n\n# because the next stage will use the same compiler used to build this stage.\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Use the current tools for LTO instead of the instrumented ones\n",
        "Line" : 637,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Find all variables that start with BOOTSTRAP_ and populate a variable with\n\n# them.\n",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Populate the passthrough variables\n",
        "Line" : 669,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# We shouldn't need to set this here, but INSTALL_DIR doesn't\n\n# seem to work, so instead I'm passing this through\n",
        "Line" : 690,
        "CharPositionInLine" : 16
      },
      "33" : {
        "Text" : "# exclude really-install from main target\n",
        "Line" : 706,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# exclude from main target\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 35
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/3-stage-base.cmake" : {
      "ObjectId" : "46c747edd77848f0dfe98d3f807aff253fea9bcc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/3-stage.cmake" : {
      "ObjectId" : "49bce39dfc981b8b7b52dff96e17ceb0f18dd4b3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Android-stage2.cmake" : {
      "ObjectId" : "6720517590ab9320845760866f186fea90fbde42",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Android.cmake" : {
      "ObjectId" : "6fbc4a53951e3a2b64b1c37f4c9db5510758b2ff",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for an Android toolchain build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Apple-stage1.cmake" : {
      "ObjectId" : "518088801318a6ee1c21c8ee4a1966656119e12f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style bootstrap builds. It can be\n\n# used on any Darwin system to approximate Apple Clang builds.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disabling embedded darwin compiler-rt on stage1 builds is required because we\n\n# don't build stage1 to support arm code generation.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#bootstrap\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Apple-stage2-ThinLTO.cmake" : {
      "ObjectId" : "54e54e306e7a6b627cf70e3c68ac584f83e992e5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style stage2 ThinLTO bootstrap. It is\n\n# specified by the stage1 build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Apple-stage2.cmake" : {
      "ObjectId" : "d58e4b6fafd5b1dee0814ba827556cc21f740f24",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for Apple-style stage2 bootstrap. It is\n\n# specified by the stage1 build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make unit tests (if present) part of the ALL target\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generating Xcode toolchains is useful for developers wanting to build and use\n\n# clang without installing over existing tools.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# setup toolchain\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# test args\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/BaremetalARM.cmake" : {
      "ObjectId" : "73f797d9c4b1578df23c11d36233d462ce3f5c45",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Builtins\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/DistributionExample-stage2.cmake" : {
      "ObjectId" : "894ea6af6c39eed4b025cdbb161ed0a11e770699",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for the second stage of a simple distribution\n\n# bootstrap build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setup toolchain\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/DistributionExample.cmake" : {
      "ObjectId" : "551f4ee07eaccacb6aacc77ef1ada7e2c24d92d9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for a simple distribution bootstrap build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only build the native target in stage1 since it is a throwaway build.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optimize the stage1 compiler, but don't LTO it because that wastes time.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup vendor-specific settings.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setting up the stage2 LTO option needs to be done on the stage1 build so that\n\n# the proper LTO library dependencies can be connected.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Expose stage2 targets through the stage1 build configuration.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup the bootstrap build.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Fuchsia-stage2.cmake" : {
      "ObjectId" : "7ad2d9c60765084bd6d3e0dc6224ccddad1b6011",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for the second stage of a Fuchsia toolchain\n\n# build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup toolchain.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/Fuchsia.cmake" : {
      "ObjectId" : "0d8159294e27c6a86c5c3ab33a985f57ed14e06a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up a CMakeCache for a Fuchsia toolchain build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup the bootstrap build.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/PGO-stage2-instrumented.cmake" : {
      "ObjectId" : "858c07f562650965e2b881a81989f22000a916bb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/PGO-stage2.cmake" : {
      "ObjectId" : "2080cd405f2a6351a66b029221f683ceda08b27e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/cmake/caches/PGO.cmake" : {
      "ObjectId" : "7e4a001129cb9d0c256185728dbf2c5d383a225b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/cmake/modules/AddClang.cmake" : {
      "ObjectId" : "c09a8423f9f6d51afa2ecd237210bc66009f2793",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Syntax:\n\n# clang_tablegen output-file [tablegen-arg ...] SOURCE source-file\n\n# [[TARGET cmake-target-name] [DEPENDS extra-dependency ...]]\n\n#\n\n# Generates a custom command for invoking tblgen as\n\n#\n\n# tblgen source-file -o=output-file tablegen-arg ...\n\n#\n\n# and, if cmake-target-name is provided, creates a custom target for\n\n# executing the custom command depending on output-file. It is\n\n# possible to list more files to depend after DEPENDS.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Add public headers\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# It may contain unparsed unknown args.\n",
        "Line" : 80,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Always generate install targets\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "be6d1d7257bc106ca3fd3abe653710b1081cf7a4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate a list of CMake library targets so that other CMake projects can\n\n# link against them. LLVM calls its version of this file LLVMExports.cmake, but\n\n# the usual CMake convention seems to be ${Project}Targets.cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep this in sync with llvm/cmake/CMakeLists.txt!\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate ClangConfig.cmake for the build tree.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate ClangConfig.cmake for the install tree.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Construct the proper number of get_filename_component(... PATH)\n\n# calls to compute the installation prefix.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/cmake/modules/FindZ3.cmake" : {
      "ObjectId" : "779ef928da1bb819b01d19435982350926e3a243",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set Z3_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/cmake/modules/ProtobufMutator.cmake" : {
      "ObjectId" : "5f23f33f4c73799c8c2cd4aa09c3ff7b2c48ee84",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/docs/CMakeLists.txt" : {
      "ObjectId" : "d2956c18f80c558ed583ddefce1a14fe9d7f6c0e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/examples/AnnotateFunctions/CMakeLists.txt" : {
      "ObjectId" : "5684abf2380d14ccea063a5629737560fc36cd36",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/examples/CMakeLists.txt" : {
      "ObjectId" : "8c2654840a98827964ce8793702ae8de33ff55c2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/examples/PrintFunctionNames/CMakeLists.txt" : {
      "ObjectId" : "f5f818866ca60e9f89489d04b23532c87a076f4e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from the plugin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MSVC mangles symbols differently, and\n",
        "Line" : 3,
        "CharPositionInLine" : 15
      },
      "2" : {
        "Text" : "# PrintFunctionNames.export contains C++ symbols.\n",
        "Line" : 4,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 3
    },
    "3rd/templight/llvm/tools/clang/examples/analyzer-plugin/CMakeLists.txt" : {
      "ObjectId" : "0d5b2754cafec4c664175fae58cee1929d4b88f1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/examples/clang-interpreter/CMakeLists.txt" : {
      "ObjectId" : "3084238844802363545360fcb2065464007f4d2a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/CMakeLists.txt" : {
      "ObjectId" : "253a09b1012fbb1ed22808a79989363e2a2c6aa8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/AST/CMakeLists.txt" : {
      "ObjectId" : "942d08d585fec34e15de252f0fdadb35cef0d2a8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/Basic/CMakeLists.txt" : {
      "ObjectId" : "821c405913c8b1b19a94aa407b34337331d291fe",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ARM NEON\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/include/clang/CMakeLists.txt" : {
      "ObjectId" : "feb81f0686caca1828bb21ab29fde0db2659dd96",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/Config/config.h.cmake" : {
      "ObjectId" : "5f420195e85cc22e5ec73c98c86478fd9bad80db",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* This generated file is for internal use. Do not include it from headers. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Default linker to use. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Default C++ stdlib to use. */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Default runtime library to use. */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Default objcopy to use */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Default OpenMP runtime used by -fopenmp. */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Default architecture for OpenMP offloading to Nvidia GPUs. */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Multilib suffix for libdir. */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Relative directory for resource files */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Directories clang will search for headers */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Directories clang will search for configuration files */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Default <path> to all compiler invocations for --sysroot=<path>. */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Directory where gcc is installed. */",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if we have libxml2 */",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if we have z3 and want to build it */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define if we have sys/resource.h (rlimits) */",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* The LLVM product name and version */",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* pass --build-id to ld */",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* enable x86 relax relocations by default */",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable each functionality of modules */",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "3rd/templight/llvm/tools/clang/include/clang/Driver/CMakeLists.txt" : {
      "ObjectId" : "a9d988047920b0d845e69f0e03f1ef88b68d4556",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/Parse/CMakeLists.txt" : {
      "ObjectId" : "2cc7e54b3b01a2bf84539eb07f02c60d8ca19bee",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/Sema/CMakeLists.txt" : {
      "ObjectId" : "5a48b901d2bfbda8ad3d798754f602d8c2147acd",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/Serialization/CMakeLists.txt" : {
      "ObjectId" : "d91513da99979d5a6b8e55e4d6759a86c0f5d5b1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/include/clang/StaticAnalyzer/Checkers/CMakeLists.txt" : {
      "ObjectId" : "37dd9e848296898357110497b9d4513ff6b5d69d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/ARCMigrate/CMakeLists.txt" : {
      "ObjectId" : "b716a20fe63f9fc8aaa97bbcce6ae6cfc312c8da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/AST/CMakeLists.txt" : {
      "ObjectId" : "a6f1027856c79cec32ff72af80978bed6aa12e4e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/ASTMatchers/CMakeLists.txt" : {
      "ObjectId" : "b49528ede2272c20408ab190687530602031e09f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/ASTMatchers/Dynamic/CMakeLists.txt" : {
      "ObjectId" : "82c12a47fa9397bbf3e289adeb164fbea0fe6881",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The registry source file ends up generating a lot of sections for each\n\n# matcher. Each matcher appears to get a vtable and several methods. Each\n\n# method needs .text, .pdata, .xdata, and .debug sections, adding to the\n\n# section multiplier. By default MSVC has a 2^16 limit on the number of\n\n# sections in an object file, and this needs more than that.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "fdc9e6cee8e16fa28e9fb2121af31af4690dd932",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Basic/CMakeLists.txt" : {
      "ObjectId" : "d0c9b902f67e15c6532808d1d56e79460e6ed7c7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The VC revision include that we want to generate.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create custom target to generate the VC revision include.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Mark the generated header as being generated.\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Tell Version.cpp that it needs to build with -DHAVE_SVN_VERSION_INC.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Not producing a VC revision include.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Being able to force-set the SVN revision in cases where it isn't available\n\n# is useful for performance tracking, and matches compatibility from autoconf.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "3rd/templight/llvm/tools/clang/lib/CMakeLists.txt" : {
      "ObjectId" : "b3fa93555b0729761459bb3f8f8306d8e42ecce9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "84248cc647199721917742486d28b6700413bb3c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# In a standard Clang+LLVM build, we need to generate intrinsics before\n\n# building codegen. In a standalone build, LLVM is already built and we don't\n\n# need this dependency. Furthermore, LLVM doesn't export it so we can't have\n\n# this dependency.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/lib/CrossTU/CMakeLists.txt" : {
      "ObjectId" : "632b5072ad6ab3ea3089f89a5bf9be73c6cae9b1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Driver/CMakeLists.txt" : {
      "ObjectId" : "5bf91f2be98114dd519cbba949980c9827d32cc2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVCToolChain.cpp uses version.dll.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/lib/Edit/CMakeLists.txt" : {
      "ObjectId" : "a7fa9c28e1f611bce8afe9411d46ef93bf55fba3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Format/CMakeLists.txt" : {
      "ObjectId" : "42e6d53d9fe6ea55adc4425a5abf53b4092be096",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Frontend/CMakeLists.txt" : {
      "ObjectId" : "ba3bd7d28c7034e4a5c6cf645fb735f21b88764f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Frontend/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "61a22b5b13b4d9f4f2e41e64e9ab5cf5ff65a6fa",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/FrontendTool/CMakeLists.txt" : {
      "ObjectId" : "7e11be0ce4c5832f0d77282192b526e610871e7b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Headers/CMakeLists.txt" : {
      "ObjectId" : "97ba3edea1c5fd1d4abf351167e96ef318a585af",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate arm_neon.h\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't add this for IDE's.\n",
        "Line" : 153,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/lib/Index/CMakeLists.txt" : {
      "ObjectId" : "c9fbfafcf9460cc3533176bc380c2aa12d5ba3b9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Lex/CMakeLists.txt" : {
      "ObjectId" : "38df144adf9abc5cf13a7710dff32dc2026f54da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Add -maltivec when ARCH is PowerPC.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/lib/Parse/CMakeLists.txt" : {
      "ObjectId" : "b868696eb6bb3c6b4c5c8a505e6b9ed934ceebf7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "16550b1b710ef9f0dc4d863ddca69eabdb1425da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Sema/CMakeLists.txt" : {
      "ObjectId" : "7d9ae621c93d65f0745b455dbf83383e079d56e5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Serialization/CMakeLists.txt" : {
      "ObjectId" : "95b33c388c56ab5e77bdc14d1b02b183e840f167",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/StaticAnalyzer/CMakeLists.txt" : {
      "ObjectId" : "3d1509254f52ff5f442a091cd462be57b6760c65",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/StaticAnalyzer/Checkers/CMakeLists.txt" : {
      "ObjectId" : "7ab9c6114eae3bfca4549975e0ade7519d40eb9b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/StaticAnalyzer/Core/CMakeLists.txt" : {
      "ObjectId" : "5ac4f942f37372bad33ab79a9271f5f90249052e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link Z3 if the user wants to build it.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/lib/StaticAnalyzer/Frontend/CMakeLists.txt" : {
      "ObjectId" : "e3ca91aec9cd180fc51f1d1597a62ad1d9f739f6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Tooling/ASTDiff/CMakeLists.txt" : {
      "ObjectId" : "578d8ca0cbc11c7ab360f3c56203fa554b20a76d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Tooling/CMakeLists.txt" : {
      "ObjectId" : "ee681bbb45aec6b3b18941bedec466d6b3143cdf",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Tooling/Core/CMakeLists.txt" : {
      "ObjectId" : "b3024793580f1bf49e7957a94530a875b1d97477",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/lib/Tooling/Refactoring/CMakeLists.txt" : {
      "ObjectId" : "402b5d3c6ac4a312a2aefb7453c89c15e65bbcc2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/runtime/CMakeLists.txt" : {
      "ObjectId" : "af8ab163c7cdf3d575abdd03cbe2aeb1dfc1f884",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Set the install directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use special command for Makefiles to support parallelism.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Fallback to the external path, if the other one isn't available.\n\n# This is the same behavior (try \"internal\", then check the LLVM_EXTERNAL_...\n\n# variable) as in add_llvm_external_project\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is \"\"\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add compiler-rt as an external project.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find all variables that start with COMPILER_RT and populate a variable with\n\n# them.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add top-level targets that build specific compiler-rt runtimes.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add binaries that compiler-rt tests depend on.\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add top-level targets for various compiler-rt test suites.\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add special target to run all compiler-rt test suites.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Add special target to run all compiler-rt test suites.\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "3rd/templight/llvm/tools/clang/test/CMakeLists.txt" : {
      "ObjectId" : "4b0e94b666b44e50f6837896e5638369043bc3ae",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test runner infrastructure for Clang. This configures the Clang test trees\n\n# for use by Lit, and delegates to LLVM's lit test handlers.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set HAVE_LIBZ according to recorded LLVM_ENABLE_ZLIB value. This\n\n# value is forced to 0 if zlib was not found, so it is fine to use it\n\n# instead of HAVE_LIBZ (not recorded).\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#LIT ${LLVM_LIT}\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add a legacy target spelling: clang-test\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: This logic can be removed once all buildbots have moved\n\n# debuginfo-test from clang/test to llvm/projects or monorepo.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/tools/CMakeLists.txt" : {
      "ObjectId" : "1e48ab9c7105143730cd4abcec196561a87d546c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We support checking out the clang-tools-extra repository into the 'extra'\n\n# subdirectory. It contains tools developed as part of the Clang/LLVM project\n\n# on top of the Clang tooling platform. We keep them in a separate repository\n\n# to keep the primary Clang repository small and focused.\n\n# It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libclang may require clang-tidy in clang-tools-extra.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/tools/arcmt-test/CMakeLists.txt" : {
      "ObjectId" : "2b456be2fcdd7970501f3dafa4ed97a6b972f0ba",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/c-arcmt-test/CMakeLists.txt" : {
      "ObjectId" : "08ac93c176db1295c328cc90d2a7ae42ae59caff",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/c-index-test/CMakeLists.txt" : {
      "ObjectId" : "d38c7bb28709ea3ce34fd53d246296aafad09b05",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If libxml2 is available, make it available for c-index-test.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't add this for IDE's.\n",
        "Line" : 60,
        "CharPositionInLine" : 37
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/tools/clang-check/CMakeLists.txt" : {
      "ObjectId" : "c5ace26c2914ed9123a1c9361094b9c617cda4ee",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-diff/CMakeLists.txt" : {
      "ObjectId" : "09bebf2cb6e5fe6935ac5f04555cdecf3bac9275",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-format-vs/CMakeLists.txt" : {
      "ObjectId" : "1d44a47a3137bebd28e4b8b5417ab5f320ca3337",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build number added to Clang version to ensure that new VSIX can be upgraded\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/tools/clang-format/CMakeLists.txt" : {
      "ObjectId" : "a295e8cd0b2ac01de7ff67db1c17535c4a115164",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-format/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "87ae05b62d1977716335845e3dbd2f6dbd9170c2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-func-mapping/CMakeLists.txt" : {
      "ObjectId" : "ae28e28d532df2f204f6aaa2a88fc81930d34b39",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "b351ec51652de6f833f8ef04a02ad65c860e0507",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hack to bypass LLVM's cmake sources check and allow multiple libraries and\n\n# executables from this directory.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create protobuf .h and .cc files, and put them in a library for use by\n\n# clang-proto-fuzzer components.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Build and include libprotobuf-mutator\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Build the protobuf->C++ translation library and driver.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Build the protobuf fuzzer\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/tools/clang-fuzzer/handle-cxx/CMakeLists.txt" : {
      "ObjectId" : "caf1dba7af676336cf24acbaa894bf0017bf0fd1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-fuzzer/proto-to-cxx/CMakeLists.txt" : {
      "ObjectId" : "910b793e0e0d94e6681231af0bd9b84472e82396",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hack to bypass LLVM's CMake source checks so we can have both a library and\n\n# an executable built from this directory.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/tools/clang-import-test/CMakeLists.txt" : {
      "ObjectId" : "836efac8ac3e1e7916b01e3069ba599bf1bfca40",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-offload-bundler/CMakeLists.txt" : {
      "ObjectId" : "8718015be76a274f7bb4d9b5b5e9d6a09852ae1a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-refactor/CMakeLists.txt" : {
      "ObjectId" : "d2029066b9b76fe8070e6084f33021a4792eb7d1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/clang-rename/CMakeLists.txt" : {
      "ObjectId" : "9689e1c6804d4e982a7266d72705e16a7c316d7b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/diagtool/CMakeLists.txt" : {
      "ObjectId" : "beb6c35457c4816e71633b982c14fb474cef3eb1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/driver/CMakeLists.txt" : {
      "ObjectId" : "22a498422aef0e2f5e41fa1f49ab766f5c9380a1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins. This must be before add_clang_executable as it reads\n\n# LLVM_NO_DEAD_STRIP.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent versioning if the buildhost is targeting for Win32.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Support plugins.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure plist creation for OS X.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is a test to ensure the actual order file works with the linker.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Passing an empty order file disables some linker layout optimizations.\n\n# To work around this and enable workflows for re-linking when the order file\n\n# changes we check during configuration if the file is empty, and make it a\n\n# configuration dependency.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "3rd/templight/llvm/tools/clang/tools/libclang/CMakeLists.txt" : {
      "ObjectId" : "44406378207bbfefb7d792fc3d04904ae9383479",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Avoid LNK4197 not to spceify libclang.def here.\n\n# Each functions is exported as \"dllexport\" in include/clang-c.\n\n# KB835326\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# FIXME: _CINDEX_LIB_ affects dllexport/dllimport on Win32.\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a\n\n# component and an install-component target, so add a dummy libclang-headers\n\n# target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# don't add this for IDE's.\n",
        "Line" : 150,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/tools/clang/tools/scan-build-py/tests/functional/exec/CMakeLists.txt" : {
      "ObjectId" : "42ee1d11db828a41a8ee43725b90f6d3434262ca",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/scan-build/CMakeLists.txt" : {
      "ObjectId" : "380379300b099d4d5553440e5633cc1b1ddf2337",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/scan-view/CMakeLists.txt" : {
      "ObjectId" : "b305ca562a72b9797df5cfcbed0abdb9b4a359ca",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/tools/templight/CMakeLists.txt" : {
      "ObjectId" : "bfcf598a2bf68d5da356b4f5167ed2b1dfe6849a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the templight++ symlink in the build directory.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create the templight-cl symlink in the build directory.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create the templight-cl symlinks at installation time.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure plist creation for OS X.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/tools/templight/Makefile" : {
      "ObjectId" : "ea0e87b2d0f1a0c5cf411eac3c762e651c047899",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##===- tools/templight/Makefile ----------------------------*- Makefile -*-===##\n\n#\n\n#                     The LLVM Compiler Infrastructure\n\n#\n\n# This file is distributed under the University of Illinois Open Source\n\n# License. See LICENSE.TXT for details.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include tool version information on OS X.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include this here so we can get the configuration of the targets that have\n\n# been configured for construction. We have to do this early so we can set up\n\n# LINK_COMPONENTS before including Makefile.rules\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Have the option of not supporting plugins. This is important for startup\n\n# performance.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the tool version information values.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/tools/clang/tools/templight/templight_symlink.cmake" : {
      "ObjectId" : "43e1e47ba5f2bb2648dffa5b75600f6ae2745455",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to execute this script at installation time because the\n\n# DESTDIR environment variable may be unset at configuration time.\n\n# See PR8397.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_EXECUTABLE_SUFFIX is undefined on cmake scripts. See PR9286.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/unittests/AST/CMakeLists.txt" : {
      "ObjectId" : "9839cdb1f2ec2aa14c899720d9984cbcebd3feb9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/ASTMatchers/CMakeLists.txt" : {
      "ObjectId" : "a876fc2d3360521b03baa1664e0e49245d914f48",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# By default MSVC has a 2^16 limit on the number of sections in an object file,\n\n# and this needs more than that.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/unittests/ASTMatchers/Dynamic/CMakeLists.txt" : {
      "ObjectId" : "848a820adeadbd6e07328a9287080e8d92b599f6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Analysis/CMakeLists.txt" : {
      "ObjectId" : "0056f82402aae74d36a5d69faedc93bcb63a0cdb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Basic/CMakeLists.txt" : {
      "ObjectId" : "b46c067dc2efe433837537420b2f5a2d9205b449",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/CMakeLists.txt" : {
      "ObjectId" : "090de3b06e060de0668b0b3725397ef44e5df515",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_clang_unittest(test_dirname file1.cpp file2.cpp)\n\n#\n\n# Will compile the list of files together and link against the clang\n\n# Produces a binary named 'basename(test_dirname)'.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: libclang unit tests are disabled on Windows due\n\n# to failures, mostly in libclang.VirtualFileOverlay_*.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/unittests/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "856dbce08ea9b0945d6e864a219ab319bf802af5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/CrossTU/CMakeLists.txt" : {
      "ObjectId" : "652d91612fb4dd0f035cb50a4606ced7d18545cc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Driver/CMakeLists.txt" : {
      "ObjectId" : "b8c800f59eaf7bd610b26d507d04631e4e307b1c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Format/CMakeLists.txt" : {
      "ObjectId" : "18e4432308db2acb5c221c176a14ca5fa36044db",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Frontend/CMakeLists.txt" : {
      "ObjectId" : "f3c4336ea22fa5771db589c608648b71602268c6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Lex/CMakeLists.txt" : {
      "ObjectId" : "ea6f9fd234020348276c9e4819a72910b89bdf50",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Rename/CMakeLists.txt" : {
      "ObjectId" : "b625a7a691fbb39d7b5750b662fec5e73bd3834b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We'd like clang/unittests/Tooling/RewriterTestContext.h in the test.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/unittests/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "8edd9ba8f830ed9380a9ea0e462e85507301141d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Sema/CMakeLists.txt" : {
      "ObjectId" : "16fae820dfe407e7e6ffe48c4c5af1d674d88011",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/StaticAnalyzer/CMakeLists.txt" : {
      "ObjectId" : "4ca0be50e5c2632ff55f5147634ff485019e0ac8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/unittests/Tooling/CMakeLists.txt" : {
      "ObjectId" : "557d1007ae2c6b3c6b795dae0e88cc84a26ffdf7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# By default MSVC has a 2^16 limit on the number of sections in an object file,\n\n# and this needs more than that.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/unittests/libclang/CMakeLists.txt" : {
      "ObjectId" : "36f6089787d26cdcda6e35e8dfdef947181ed1d5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/utils/ABITest/layout/Makefile" : {
      "ObjectId" : "0520625fcf29f850a47fe9e095adfabd2ced6810",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Usage: make test.N.report \n\n#\n\n# COUNT can be over-ridden to change the number of tests generated per\n\n# file, and TESTARGS is used to change the type generation. Make sure\n\n# to 'make clean' after changing either of these parameters.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/tools/clang/utils/ABITest/return-types-32/Makefile" : {
      "ObjectId" : "df1c53f1a16685ef1e8c5a9c54e1847030cde915",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/utils/ABITest/return-types-64/Makefile" : {
      "ObjectId" : "9616e45cba949cfbdfa6a6c5d3cc70ed1e06bca2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/utils/ABITest/single-args-32/Makefile" : {
      "ObjectId" : "9ff417fc29e592d5448b669262b9e83bd66c1642",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/utils/ABITest/single-args-64/Makefile" : {
      "ObjectId" : "b8acb70c1354dd00f2a33a964637480e8486e3e9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Usage: make test.N.report \n\n#\n\n# COUNT can be over-ridden to change the number of tests generated per\n\n# file, and TESTARGS is used to change the type generation. Make sure\n\n# to 'make clean' after changing either of these parameters.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/utils/ClangVisualizers/CMakeLists.txt" : {
      "ObjectId" : "16d118a421bad824bcf3433cce3457e6ffdc7860",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do this by hand instead of using add_llvm_utilities(), which\n\n# tries to create a corresponding executable, which we don't want.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/clang/utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "dba0c94ac0e427551e0bd145b4a0ceaaeb72523f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/clang/utils/perf-training/CMakeLists.txt" : {
      "ObjectId" : "39f9a4ca3c130f2dcf72923d696a45d42e27c880",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# All test suites added here should be excuded from check-all\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/dsymutil/CMakeLists.txt" : {
      "ObjectId" : "1dcb2116f34b5cf9c4afa41d8e6236d1591d7209",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/gold/CMakeLists.txt" : {
      "ObjectId" : "d2580329acabd23ae17d9224a37c16fa01eeb35a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llc/CMakeLists.txt" : {
      "ObjectId" : "4f8181a1b6577e33b04fd4f479b06672d84e801b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/lli/CMakeLists.txt" : {
      "ObjectId" : "f02e19313b7915eaf016f732297e9d9fd1bccaaf",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/lli/ChildTarget/CMakeLists.txt" : {
      "ObjectId" : "f08ce57c29533518fb979770cdbd9b162a29d56e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-ar/CMakeLists.txt" : {
      "ObjectId" : "2970a59beee22ad88bd23616806003b5f3be7d9c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-as-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "4d75ad4825a8fa56d3ede4d6e698c113dc634fb1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-as/CMakeLists.txt" : {
      "ObjectId" : "3a157a3d4098a16129af5dd2b7a856bc6f97fa99",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-bcanalyzer/CMakeLists.txt" : {
      "ObjectId" : "15d51ee7a9d75d6bba97d625a953703b9f6d448c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-c-test/CMakeLists.txt" : {
      "ObjectId" : "bce0f4a5a4209d0f025de0837aa08d5356a52e1a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We should only have llvm-c-test use libLLVM if libLLVM is built with the\n\n# default list of components. Using libLLVM with custom components can result in\n\n# build failures.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/llvm-cat/CMakeLists.txt" : {
      "ObjectId" : "61e5f9d004e7d0bc49484753a5955a7bc5f1bdfa",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-cfi-verify/CMakeLists.txt" : {
      "ObjectId" : "7a008a66770c8301ab564190f8f1a8446d676491",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-cfi-verify/lib/CMakeLists.txt" : {
      "ObjectId" : "cd728e004b260075fd8da4ebf08413e6bef2a03f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-config/CMakeLists.txt" : {
      "ObjectId" : "f59402ac4b0a10ead74b0e0eb217617a96cd2a65",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the llvm-config tool.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compute the substitution values for various items.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If it's an option, pass it without changes.\n",
        "Line" : 19,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Otherwise assume it's a library name we need to link with.\n",
        "Line" : 22,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Fetch target specific compile options, e.g. RTTI option\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use configure_file to create BuildVariables.inc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use the C++ link flags, since they should be a superset of C link flags.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set build-time environment(s).\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add the dependency on the generation step.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rd/templight/llvm/tools/llvm-cov/CMakeLists.txt" : {
      "ObjectId" : "d0416b06f9cde3620594d618ab5b8ca755bec133",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-cvtres/CMakeLists.txt" : {
      "ObjectId" : "e912030e205ee060d7a250547ffa3f56c05dcdce",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-cxxdump/CMakeLists.txt" : {
      "ObjectId" : "ada886e888734225f53b575365ded0b89be2f112",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-cxxfilt/CMakeLists.txt" : {
      "ObjectId" : "2a78acad80a8169736a428d1d5e58c023fc864f7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-demangle-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "34a04b43fafdea02980d68dd803b1bdd29ba7043",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-diff/CMakeLists.txt" : {
      "ObjectId" : "703ed97cb0b01dd9b4c77a24e6f77f8e1dcd73f9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-dis/CMakeLists.txt" : {
      "ObjectId" : "5804754ba696ed229f563751cffa9024bf3a37e5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-dwarfdump/CMakeLists.txt" : {
      "ObjectId" : "77620e0faaf81baf525f1f998da30012dededf9b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-dwarfdump/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "318c4f7bfce44be75b62d077e4504671636fc5a5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-dwp/CMakeLists.txt" : {
      "ObjectId" : "1b5fbddc1f75090349579cf537bd43e5d77247d7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-extract/CMakeLists.txt" : {
      "ObjectId" : "ce2a78d5d3865f2614e391308bcfb59109f2e175",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-go/CMakeLists.txt" : {
      "ObjectId" : "20393f728f8f1c2c87337c9feed583e538b5806f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-isel-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "21f3d14f174989531080e95e69afaed9ffbe4bec",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-jitlistener/CMakeLists.txt" : {
      "ObjectId" : "61f8420a7ae590c8d07e428729492f21d83b0946",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool is excluded from the CMake build if Intel JIT events are disabled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/llvm-link/CMakeLists.txt" : {
      "ObjectId" : "051489f94bc92f88199d300eb51341267b6b58e5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-lto/CMakeLists.txt" : {
      "ObjectId" : "f0b385b7993d210d86bc4880a254cc46525ce191",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-lto2/CMakeLists.txt" : {
      "ObjectId" : "9be12d71ed793e18b670c4f7bb03be5dbc7c9d2b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-mc-assemble-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "3545d53503b716fb208d6f75908a6e6b2b1658c0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-mc-disassemble-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "60b08062d09f086a69be3a811afd83fdc42c45ba",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-mc/CMakeLists.txt" : {
      "ObjectId" : "15c6dda1b258633669721a93d27e2e284e6bfd3e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-mcmarkup/CMakeLists.txt" : {
      "ObjectId" : "0a51e99f1953e70205321e81eb06f320a05e7ef6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-modextract/CMakeLists.txt" : {
      "ObjectId" : "8484b3b0fb73ab729a80b0106813922f5a034165",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-mt/CMakeLists.txt" : {
      "ObjectId" : "e4e99468092145af4cccd0b6ef0571868aad2b61",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-nm/CMakeLists.txt" : {
      "ObjectId" : "f093cc4328ae830aedc7a6e13441f5a31677a155",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-objcopy/CMakeLists.txt" : {
      "ObjectId" : "05aa727ab9d832572f2f08b9b46e55a62effce00",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-objdump/CMakeLists.txt" : {
      "ObjectId" : "177c98166ef1f74007833fd4c748f6d07fbd5a4d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-opt-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "d2fb07f96fc8f3811eb58e2ba2f1d14554146cf2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-opt-report/CMakeLists.txt" : {
      "ObjectId" : "777537a54c0ff47cbb3976bdabf4f32d7a7725ad",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-pdbutil/CMakeLists.txt" : {
      "ObjectId" : "ab4ce1ac30e0e400e80961170c3076214ee0a823",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-profdata/CMakeLists.txt" : {
      "ObjectId" : "49641c482f29fc60eee9bd7b64107e71c8d2e3f1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-rc/CMakeLists.txt" : {
      "ObjectId" : "e5c0eb25d7bc3832a9c8812959f7912f187d49c1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-readobj/CMakeLists.txt" : {
      "ObjectId" : "dafc9e10cfa12c8d6533d79cd6a1e60c376a25e1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-rtdyld/CMakeLists.txt" : {
      "ObjectId" : "c1acbe5846bdb549808e5812352076f7f83b446d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-shlib/CMakeLists.txt" : {
      "ObjectId" : "b2109c8758dfc5e57f5f6a3b7ea430c53b992331",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool creates a shared library from the LLVM libraries. Generating this\n\n# library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake\n\n# commandline. By default the shared library only exports the LLVM C API.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libLLVM.so should not have any dependencies on any other LLVM\n\n# shared libraries. When using the \"all\" pseudo-component,\n\n# LLVM_AVAILABLE_LIBS is added to the dependencies, which may\n\n# contain shared libraries (e.g. libLTO).\n\n#\n\n# Also exclude libLLVMTableGen for the following reasons:\n\n#  - it is only used by internal *-tblgen utilities;\n\n#  - it pollutes the global options space.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: It should be \"GNU ld for elf\"\n",
        "Line" : 43,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "# GNU ld doesn't resolve symbols in the version script.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Solaris ld does not accept global: *; so there is no way to version *all* global symbols\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# To get the export list for a single llvm library:\n\n# nm ${LIB_PATH} | awk \"/T _LLVM/ { print $3 }\" | sort -u | sed -e \"s/^_//g\" > ${LIB_PATH}.exports\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "3rd/templight/llvm/tools/llvm-size/CMakeLists.txt" : {
      "ObjectId" : "7ef4f1769b840ab65394628e7e9fa6eeb50862b5",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-special-case-list-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "f4ebf7a8ce7b70e15428bf9b1603086849b25ee7",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-split/CMakeLists.txt" : {
      "ObjectId" : "52eedeb9f53f32fe9352d6a495c57ceefae81229",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-stress/CMakeLists.txt" : {
      "ObjectId" : "139ab9e0d8f967de4381d1cafd84401644e49411",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-strings/CMakeLists.txt" : {
      "ObjectId" : "390f117513978289c77013acf7b24fff54f17457",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/llvm-symbolizer/CMakeLists.txt" : {
      "ObjectId" : "d9b05208afd8d9ed634c9d5c2956585da9c3d045",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: As we plan to execute llvm-symbolizer binary from compiler-rt\n\n# libraries, it has to be compiled for all supported targets (x86_64, i386 etc).\n\n# This means that we need LLVM libraries to be compiled for these\n\n# targets as well. Currently, there is no support for such a build strategy.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/llvm-xray/CMakeLists.txt" : {
      "ObjectId" : "b1df67f9b770cc05f955d3b041bb1e17dbdeb0ef",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/lto/CMakeLists.txt" : {
      "ObjectId" : "6e913519a809a3afa6115665561e9272d4e52c60",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/msbuild/CMakeLists.txt" : {
      "ObjectId" : "9d132ea58d5d9dc48822c4b0cc1f0c278522ff4b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPack will install a registry key in this format that we wish to reference.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/obj2yaml/CMakeLists.txt" : {
      "ObjectId" : "36dcfd92dfee7ccffa8a4e4b1163c661ec8efc55",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/opt-viewer/CMakeLists.txt" : {
      "ObjectId" : "19b60693308201fbc0b530f6e92a1eddf725b1a3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/opt/CMakeLists.txt" : {
      "ObjectId" : "dedc25143cf4458bd5a2befa05465674a6025fbe",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/tools/sancov/CMakeLists.txt" : {
      "ObjectId" : "e92b1fcbb86257a2adbff3cce4123804c23a48eb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/sanstats/CMakeLists.txt" : {
      "ObjectId" : "198f6692531d5870ed4e92b194bf23b6f84b2e9a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/verify-uselistorder/CMakeLists.txt" : {
      "ObjectId" : "74f7195c9066a18067eabafa58fa10ffb3e25fc0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/tools/xcode-toolchain/CMakeLists.txt" : {
      "ObjectId" : "d433c52febf1e53d339ab9d9398e04d2d4641c8a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OS X 10.11 El Capitan has just been released. One of the new features, System\n\n# Integrity Protection, prevents modifying the base OS install, even with sudo.\n\n# This prevents LLVM developers on OS X from being able to easily install new\n\n# system compilers. The feature can be disabled, but to make it easier for\n\n# developers to work without disabling SIP, this file can generate an Xcode\n\n# toolchain. Xcode toolchains are a mostly-undocumented feature that allows\n\n# multiple copies of low level tools to be installed to different locations, and\n\n# users can easily switch between them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setting an environment variable TOOLCHAINS to the toolchain's identifier will\n\n# result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To make this work with Xcode 7.1 and later you can install the toolchain this\n\n# file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the\n\n# path specified by $CMAKE_INSTALL_PREFIX/Toolchains\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file generates a custom install-xcode-toolchain target which constructs\n\n# and installs a toolchain with the identifier in the pattern:\n\n# org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the\n\n# system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the\n\n# in the environment.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Example usage:\n\n# cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On\n\n#   -DCMAKE_INSTALL_PREFIX=$PWD/install\n\n# ninja install-xcode-toolchain\n\n# export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains\n\n# export TOOLCHAINS=org.llvm.3.8.0svn\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# `xcrun -find clang` should return the installed clang, and `clang --version`\n\n# should show 3.8.0svn.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need\n\n# to detect it manually here.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If detecting Xcode version failed, set a crazy high version so we default\n\n# to the newest.\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Xcode 8 requires CompatibilityVersion 2\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Xcode 7.3 (the first version supporting external toolchains) requires\n\n# CompatibilityVersion 1\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "3rd/templight/llvm/tools/yaml2obj/CMakeLists.txt" : {
      "ObjectId" : "adeac2331a6b6dc288eeb48594fa3ab6cd468e3d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/ADT/CMakeLists.txt" : {
      "ObjectId" : "c0d511000f610f32d6eb530a09f6ffefd5bb5e14",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Analysis/CMakeLists.txt" : {
      "ObjectId" : "65f2aeda4180cbff03cb4f1646790c0a032a0421",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "1920bfaa3aac7b1dcb35266088ab0732f7735109",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/BinaryFormat/CMakeLists.txt" : {
      "ObjectId" : "631936795b6c6cb460399f6188b76fe0dc16464f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "4d06f8008d389eb56ea8e6bd710e4c9fb5bf64c4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/CMakeLists.txt" : {
      "ObjectId" : "94aca0566256a945a53536ae361bef3197451580",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "05b72ce05b7ba1074a2bc8b97f5ca1c052bfea93",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/CodeGen/GlobalISel/CMakeLists.txt" : {
      "ObjectId" : "075bb44bc330b322d6dab3f1575aafb2702b7358",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "579fdb202cf4ee50833ba4c209f8f52437fd8b8e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/DebugInfo/CodeView/CMakeLists.txt" : {
      "ObjectId" : "d06ccfaba72a9b86143d40c03ba486175c129006",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "f490097a21a75a69e587880f2ee47d553281287b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/DebugInfo/MSF/CMakeLists.txt" : {
      "ObjectId" : "20f3b2ab3dcdd350cbd44346ed9e3af802f43c84",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "b19ee2cf43a5132408cfe8e7f7dec14ca6bd7af9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/ExecutionEngine/CMakeLists.txt" : {
      "ObjectId" : "302de9943ffe4c3e3e4095e1aab940503e57332e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include MCJIT tests only if native arch is a built JIT target.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/unittests/ExecutionEngine/MCJIT/CMakeLists.txt" : {
      "ObjectId" : "e29787f8f426e3504b4b1c45c8ba90b0526d6c83",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/ExecutionEngine/Orc/CMakeLists.txt" : {
      "ObjectId" : "dd0281d0b73ded62aebc81c076bb28daf252040f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/FuzzMutate/CMakeLists.txt" : {
      "ObjectId" : "c4a5fcf4f14ce177b8995ef9661a6a8f25d3ea7c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/IR/CMakeLists.txt" : {
      "ObjectId" : "83f9dfd31765525734ee0bc852cc2b2e8849defc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HACK: Declare a couple of source files as optionally compiled to satisfy the\n\n# missing-file-checker in LLVM's weird CMake build.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/unittests/LineEditor/CMakeLists.txt" : {
      "ObjectId" : "70d7497fed973019de5b9541f83bb4915d2fb05a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Linker/CMakeLists.txt" : {
      "ObjectId" : "05f45c0a8ce8880b991242e37dbfcf86b76f28d1",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/MC/CMakeLists.txt" : {
      "ObjectId" : "c760c0267a9cf68ce70489240565862c5a96d1d4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/MI/CMakeLists.txt" : {
      "ObjectId" : "595497f3d96034ec2c917f1d8efb0897e468e135",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Object/CMakeLists.txt" : {
      "ObjectId" : "e1376bffbc0f59a760a5cc568daf22c50f70c8c2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/ObjectYAML/CMakeLists.txt" : {
      "ObjectId" : "baed10b8730f0bca1560e503f7bc041b316220eb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Option/CMakeLists.txt" : {
      "ObjectId" : "07f7b91d5f5b7f1b59338a5c920d44e80e43ddb6",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "366ed5482bf2c51087961ac831ca140629719963",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Support/CMakeLists.txt" : {
      "ObjectId" : "299106e0dbf739d5aa932d8cfcdb16386fa2b0be",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable all warning for AlignOfTest.cpp,\n\n# as it does things intentionally, and there is no reliable way of\n\n# disabling all warnings for all the compilers by using pragmas.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ManagedStatic.cpp uses <pthread>.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/unittests/Support/DynamicLibrary/CMakeLists.txt" : {
      "ObjectId" : "4f060e4020d12e39627766c3b7920e53a2befd47",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Revert -Wl,-z,nodelete on this test since it relies on the file\n\n# being unloaded.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/unittests/Target/AArch64/CMakeLists.txt" : {
      "ObjectId" : "76f6c8226a8d5ac703e26644e7c39253a1bba84c",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Target/CMakeLists.txt" : {
      "ObjectId" : "9015029b0970d28f821b5ed34e8b76ad65fb7524",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Transforms/CMakeLists.txt" : {
      "ObjectId" : "e2570a3b6537a56d1e283eabf68e836b077b8828",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "ee33a5fcd1b39aed74bec730d30c0c945e45e776",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Transforms/Scalar/CMakeLists.txt" : {
      "ObjectId" : "2762799d612459dfa8e239c75a964fd1131fd231",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "e2bb0af0f773715547e773b04a3f3d198f17ca4b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/XRay/CMakeLists.txt" : {
      "ObjectId" : "30bccd1bbe6264d4d92e34065bab2f9f748ffd38",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/tools/CMakeLists.txt" : {
      "ObjectId" : "5ac4c950efe79db9abcfe7d568f5045d7c7af5c9",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/unittests/tools/llvm-cfi-verify/CMakeLists.txt" : {
      "ObjectId" : "e47bbdf7f13125f4e385724083932c362e716633",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/FileCheck/CMakeLists.txt" : {
      "ObjectId" : "32e948a1a19eb8ad73a29e9620fb9403d6b438f0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/KillTheDoctor/CMakeLists.txt" : {
      "ObjectId" : "72d994fb9953ac6fb3d8670d954831e8621717ae",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/LLVMVisualizers/CMakeLists.txt" : {
      "ObjectId" : "9fdc8906e55aea789e9120a214b82b004363154a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do this by hand instead of using add_llvm_utilities(), which\n\n# tries to create a corresponding executable, which we don't want.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/templight/llvm/utils/PerfectShuffle/CMakeLists.txt" : {
      "ObjectId" : "ed70760a43e425b4730a809abc1ddb2e4f2836da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "0944d54a4273dc11b0b596f661127438d218bccc",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/count/CMakeLists.txt" : {
      "ObjectId" : "4e0d371334e473d643d791ae839ea51a953f0c7f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/lit/CMakeLists.txt" : {
      "ObjectId" : "43caf09f1402b824d68016f7242eea0b51758027",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The configured file is not placed in the correct location\n\n# until the tests are run as we need to copy it into\n\n# a copy of the tests folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lit's test suite creates output files next to the sources which makes the\n\n# source tree dirty. This is undesirable because we do out of source builds.\n\n# To work around this the tests and the configuration file are copied into the\n\n# build directory just before running them. The tests are not copied over at\n\n# configure time (i.e. `file(COPY ...)`) because this could lead to stale\n\n# tests being run.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add rules for lit's own test suite\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For IDEs\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "3rd/templight/llvm/utils/llvm-lit/CMakeLists.txt" : {
      "ObjectId" : "670175c81851125d83371c467940e06808ea6808",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/not/CMakeLists.txt" : {
      "ObjectId" : "29c7b0218521d4cdbc32d8105391a4d0c43e2e62",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/templight/llvm/utils/unittest/CMakeLists.txt" : {
      "ObjectId" : "5b5cbf5d745f9b52921f7f6fce451b90a47b216f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Experimental CMake build script for Google Test.\n\n#\n\n# Consider this a prototype.  It will change drastically.  For now,\n\n# this is only for people on the cutting edge.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n\n########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where gtest's .h files can be found.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# LLVM requires C++11 but gtest doesn't correctly detect the availability\n\n# of C++11 on MSVC, so we force it on.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Depends on llvm::raw_ostream\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# This is a library meant only for the build tree.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "3rd/templight/llvm/utils/unittest/UnitTestMain/CMakeLists.txt" : {
      "ObjectId" : "32f0f25a60ffcde4f151a8bf7fedcd8b5ba2b1fb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Depends on llvm::cl\n",
        "Line" : 8,
        "CharPositionInLine" : 10
      },
      "1" : {
        "Text" : "# This library is not meant to be in the install tree, only the build tree.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rd/templight/llvm/utils/yaml-bench/CMakeLists.txt" : {
      "ObjectId" : "cd04b33d0a296ae2c15a228ac74026601f4e3b64",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/termcap/CMakeLists.txt" : {
      "ObjectId" : "57b73c913f04f6a2af11300a36a6f40a99425b7a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2017, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/termcap/src/CMakeLists.txt" : {
      "ObjectId" : "036f4e7d198c3655f21cf17cd85d5a781913645f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2017, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/wineditline/CMakeLists.txt" : {
      "ObjectId" : "ee3f8200d9bfce25eff5798073ff12f293b10dc2",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rd/yaml-cpp/CMakeLists.txt" : {
      "ObjectId" : "cc4d59480ab28e70c8cc3a2c4ea1008a12d21da0",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2018, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rd/yaml-cpp/src/CMakeLists.txt" : {
      "ObjectId" : "2490ecc3604cf646411e96718b5ddf9727d0a365",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2018, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "a52d3e9c7e618cd46fd465831d068f2bd5adbd3a",
      "LastModified" : "2018-08-26T11:40:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Version macros\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Windows workaround\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Warnings, C++11, etc\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Workaround on some systems (OSX + clang + Boost 1.55)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sanitizers\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Code coverage\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Profiling\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The \"internal\" Templight build\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Templight\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Boost\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Pthreads\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Readline\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Unit testing\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Recursing\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Debian package\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This argument is needed, so the generated archive will not have\n\n# /usr/local prefix for all files\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "app/CMakeLists.txt" : {
      "ObjectId" : "7cbcb87b2464ecefa4c8ba2012a2a835508838ee",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "app/metashell/CMakeLists.txt" : {
      "ObjectId" : "9b179976cc000b47e2af2d86a15409739eff9358",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Metashell\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Wave\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Readline\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Just\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Program_options\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Regex\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# yaml-cpp\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Mpark.Variant\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#############################################\n\n# Install a custom Templight with Metashell #\n\n#############################################\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Windows header files\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "app/reference_gen/CMakeLists.txt" : {
      "ObjectId" : "05471afd68e409ac1621dec6be63b8eaec84ac1e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2017, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Metashell\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Wave\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Program_options\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Regex\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Just\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# yaml-cpp\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Mpark.Variant\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "c07a66216e6c51e907661595710db28c003cadfb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Boost Software License - Version 1.0 - August 17th, 2003\n\n#\n\n# Permission is hereby granted, free of charge, to any person or organization\n\n# obtaining a copy of the software and accompanying documentation covered by\n\n# this license (the \"Software\") to use, reproduce, display, distribute,\n\n# execute, and transmit the Software, and to prepare derivative works of the\n\n# Software, and to permit third-parties to whom the Software is furnished to\n\n# do so, all subject to the following:\n\n# \n\n# The copyright notices in the Software and this entire statement, including\n\n# the above license grant, this restriction and the following disclaimer,\n\n# must be included in all copies of the Software, in whole or in part, and\n\n# all derivative works of the Software, unless such copies or derivative\n\n# works are solely in the form of machine-executable object code generated by\n\n# a source language processor.\n\n# \n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n\n# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n\n# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2014-06-21, Abel Sinkovics\n\n# - Make the list of excluded directories configurable\n\n#\n\n# USAGE:\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage: \n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#  \n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target   # Name for custom target.\n\n#\t\t\t\ttest_driver          # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage             # Name of output directory.\n\n#                               \"'/usr/*';'tests/*'\" # Files to exclude from the report.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 76,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCC\n",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors. \n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Param _exclude_files  The list of excluded files. Wildcards (eg. /usr/*) can be used.\n\n#                       To pass multiple arguments, use semicolons. Eg:\n\n#                         \"'/usr/*';'tests/*'\"\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 104,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 108,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Setup target\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Run tests\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 135,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 146,
        "CharPositionInLine" : 9
      },
      "17" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 150,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 169,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 22
    },
    "cmake/Modules/Compiler.cmake" : {
      "ObjectId" : "d6da0f8083a88c713e6f33f3571d2aedc8eb12c4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindEditline.cmake" : {
      "ObjectId" : "51ae4409bab528698a7d4a007d0fe1b801b234da",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for the module\n\n#  EDITLINE_INCLUDEDIR   Set this if the module can not find the Editline\n\n#                        headers\n\n#  EDITLINE_LIBRARYDIR   Set this if the module can not find the Editline\n\n#                        library\n\n#  EDITLINE_DEBUG        Set this for verbose output\n\n#\n\n# This module will define the following:\n\n#   EDITLINE_FOUND\n\n#   EDITLINE_INCLUDE_DIR\n\n#   EDITLINE_LIBRARY\n\n#   EDITLINE_DLL (only on Windows)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set EDITLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindGCC.cmake" : {
      "ObjectId" : "67d7d59219662b13fab1ae84c291aeefcb5ee751",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for the module\n\n#  GCC_BINARYDIR  Set this if the module can not find the compiler\n\n#  GCC_DEBUG      Set this for verbose output\n\n#\n\n# This module will define the following:\n\n#   GCC_FOUND\n\n#   GCC_BINARY\n\n#   GXX_FOUND\n\n#   GXX_BINARY\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The default gcc/g++ binary on OS X is symlinked to clang\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GCC_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Done\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindMSVC.cmake" : {
      "ObjectId" : "7faf77dd248ee8bc5e4bdf0ae1aa87856379aa32",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for the module\n\n#  MSVC_BINARYDIR  Set this if the module can not find the compiler\n\n#  MSVC_DEBUG      Set this for verbose output\n\n#\n\n# This module will define the following:\n\n#   MSVC_FOUND\n\n#   MSVC_CL_BINARY\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The cl.exe\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MSVC_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Done\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindReadline.cmake" : {
      "ObjectId" : "8c9adbd6ec6d52763196d198750944c7a4a62060",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for the module\n\n#  READLINE_INCLUDEDIR   Set this if the module can not find the Readline\n\n#                        headers\n\n#  READLINE_LIBRARYDIR   Set this if the module can not find the Readline\n\n#                        library\n\n#  READLINE_DEBUG        Set this for verbose output\n\n#\n\n# This module will define the following:\n\n#   READLINE_FOUND\n\n#   READLINE_INCLUDE_DIR\n\n#   READLINE_LIBRARY\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindRt.cmake" : {
      "ObjectId" : "1d0c69e77f594704d7706085332d10337e39290a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for the module\n\n#  RT_LIBRARYDIR   Set this if the module can not find the rt library\n\n#  RT_DEBUG        Set this for verbose output\n\n#\n\n# This module will define the following:\n\n#   RT_FOUND\n\n#   RT_LIBRARY\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set RT_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindTemplight.cmake" : {
      "ObjectId" : "f4acc59e99122ce5a8c1296e06c12135e951dd63",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for the module\n\n#  TEMPLIGHT_BINARYDIR  Set this if the module can not find the templight binary\n\n#  TEMPLIGHT_DEBUG      Set this for verbose output\n\n#\n\n# This module will define the following:\n\n#   TEMPLIGHT_FOUND\n\n#   TEMPLIGHT_HEADERS (the path to the headers used by templight)\n\n#   TEMPLIGHT_BINARY\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The templight binary\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TEMPLIGHT_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The standard Clang header files\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Done\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/MetashellSystemTest.cmake" : {
      "ObjectId" : "0cfe38805ab1a5c415357542275b33baed36808a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/MetashellTemplight.cmake" : {
      "ObjectId" : "5560ad064b045bcc4511f8340780e7337e1884c8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make a copy for running from the build's output dir\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Install the headers on the target system\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Headers used by Templight on Windows\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# templight\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Templight binary\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Templight headers\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Libcxx headers\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 8
    },
    "cmake/Modules/Platform.cmake" : {
      "ObjectId" : "546214fbab8ffd47b8e2deca1e95ff8cff8526fb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Including this file defines the following:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  SUSE_LINUX on SuSE\n\n#  FEDORA_LINUX on Fedora and Red Hat\n\n#  UBUNTU_LINUX on Ubuntu\n\n#  DEBIAN_LINUX on Debian\n\n#  FREE_BSD on FreeBSD\n\n#  OPEN_BSD on OpenBSD\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  PLATFORM_CPACK_GENERATOR: the platform's native CPACK_GENERATOR value where\n\n#                            available\n\n#  PLATFORM_NAME:            the name of the current platform\n\n#  PLATFORM_VERSION:         the distribution's version\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "521283263d415555568f9668f0f67e006430b530",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/core/CMakeLists.txt" : {
      "ObjectId" : "1a950d5a24986104c4b06febc4110915e555deeb",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# mIndent\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Mpark.Variant\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "lib/data/CMakeLists.txt" : {
      "ObjectId" : "25fd70f74081ce848d443f2bc3ead53337ee3e75",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Just\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mpark.Variant\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "lib/process/CMakeLists.txt" : {
      "ObjectId" : "70cfd23b86ead68fa366ce226c6c09358c2e0b62",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/readline/CMakeLists.txt" : {
      "ObjectId" : "d31422c7dcd1b3d78fcfbc68049ca7b337cec2c3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Readline\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mpark.Variant\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "lib/replace_part/CMakeLists.txt" : {
      "ObjectId" : "cd120493ca622707f5615a65f0d7aa3936612b6e",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2017, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Just\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "4ca20358f3082a24f6ab7cc74532b42949bc1df8",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/system/CMakeLists.txt" : {
      "ObjectId" : "a775ae41f8d6a1bb5562e1b77117396de78ac758",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/system/app/CMakeLists.txt" : {
      "ObjectId" : "1d64232762a19c3273bf64485f294316d8718eb4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/system/app/core/CMakeLists.txt" : {
      "ObjectId" : "1787f37a7ed55bf6f84bbcca40a08eb4461999c4",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Gtest\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Boost\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/system/app/mdb/CMakeLists.txt" : {
      "ObjectId" : "b340eb82c81b4acb754954c57442ce025bdc9a4d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2014, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Gtest\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Boost\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/system/app/pdb/CMakeLists.txt" : {
      "ObjectId" : "1203a4dfe1f80d965b0234df6c50402d29ad6a0b",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2017, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Gtest\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Boost\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/system/app/pp/CMakeLists.txt" : {
      "ObjectId" : "e3914c601116d39b4dccddb701c89f2269ea0c97",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Gtest\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Boost\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/system/app/self/CMakeLists.txt" : {
      "ObjectId" : "0c4acdfc0fb1d45b7c07e981dba17f9e18bfa39a",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2017, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Gtest\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Boost\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Code coverage\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/system/lib/CMakeLists.txt" : {
      "ObjectId" : "4738e80ab3b8b7ba9c9aa5c1e9e6bbd4b747b9c3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2015, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Gtest\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/unit/CMakeLists.txt" : {
      "ObjectId" : "5078dc5338755550514315ad3b2cd52c6ea114d3",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Wave\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Program_options\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Regex\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Gtest\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Gmock\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Just\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# yaml-cpp\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Mpark.Variant\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Code coverage\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########################################################\n\n# Copying files next to the Metashell binary on Windows #\n\n#########################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "d6189864f3e135102bf1e4363be95dba59881d36",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2018, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/demo_server/CMakeLists.txt" : {
      "ObjectId" : "25e93c5f8df01272cd0b3fa78aa21f715c04085d",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2018, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/demo_server/test/CMakeLists.txt" : {
      "ObjectId" : "668e436bccc5f52b00f7dc12365361944362464f",
      "LastModified" : "2018-08-25T10:15:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Metashell - Interactive C++ template metaprogramming shell\n\n# Copyright (C) 2018, Abel Sinkovics (abel@sinkovics.hu)\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 606,
    "CMAKESOURCE" : 5,
    "MAKEFILE" : 6
  },
  "ElapsedTime" : 5874
}