{
  "Repository" : "6640394",
  "Revision" : "HEAD",
  "ObjectId" : "aec1e6d416bcda83179b1ee911db3c837f5b230b",
  "CommitTime" : "2019-03-11T00:56:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d6d7e5dc2ef31612301dc6efe9bb034c01c5239f",
      "LastModified" : "2017-10-07T15:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CMAKE_VERBOSE_MAKEFILE ON)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# *NOTE: For now we assume some variation of GCC Compiler (or MingW for Windows binaries)\n\n# VC++ users should not use CMake yet but rather the build-mg.bat file in mk/windoze\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build type\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add additional CMake modules\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#        ADD_DEFINITIONS(\"-Qunused-arguments -Wno-switch\")\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# read version\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMAKE_SIZEOF_VOID_P=8 => 64bit\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "## Compiler flags, CPACK configuration and other Apple specific code.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Common generic GNU type compiler options that work with all generic GCC compatible compilers\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# For gcc warning options see: http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For tons of verbose warnings add: -Wall\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\t\tADD_DEFINITIONS(\"-Wreturn-type -fno-strict-aliasing -frounding-math  -fsignaling-nans -mfpmath=sse -msse -rdynamic\")\n\n#\t\tADD_DEFINITIONS(\"-Wuninitialized -Wsign-compare -Wunused-function -Wunused-variable -Wreturn-type -fno-strict-aliasing -frounding-math  -fsignaling-nans -rdynamic\")\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\t\tADD_DEFINITIONS(\"-Wreturn-type -fno-strict-aliasing -frounding-math  -fsignaling-nans -mfpmath=sse -msse -DUNICODE\")\n\n#\t\tADD_DEFINITIONS(\"-Wuninitialized -Wsign-compare -Wunused-function -Wunused-variable -Wreturn-type -fno-strict-aliasing -frounding-math  -fsignaling-nans -DUNICODE\")\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# CLang specific Compiler Options\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# GCC specific Compiler Options\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#                IF(NOT MINGW)\n\n#                        set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -rdynamic\")\n\n#                        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -rdynamic\")\n\n#                ENDIF()\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall\")\t\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#MESSAGE(STATUS \"*TEST: Checking for max SSE LEVEL [${FORCE_MAX_SSE_LEVEL}]\")\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Debug compiler flags\n",
        "Line" : 196,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Release compiler flags\n",
        "Line" : 199,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "## Strip binary\n",
        "Line" : 202,
        "CharPositionInLine" : 78
      },
      "21" : {
        "Text" : "# Release with debug info compiler flags\n",
        "Line" : 205,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Release minimum size compiler flags\n",
        "Line" : 208,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "## Strip binary\n",
        "Line" : 210,
        "CharPositionInLine" : 84
      },
      "24" : {
        "Text" : "# see if this fixes compile issue for tomreyn: libpthread.so.0: error adding symbols: DSO missing from command line\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Get the git revision info for the binary\n",
        "Line" : 222,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# The stuff below gets GIT Global Revision # but ONLY when calling cmake!\n\n# the FindGit.cmake module is part of the standard distribution\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Get the current commit SHA1\n",
        "Line" : 236,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "# Get the current version counter\n",
        "Line" : 244,
        "CharPositionInLine" : 12
      },
      "29" : {
        "Text" : "# ^ someday this intermediate step may be removed\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#SET(PKG_DATADIR ${CUSTOM_DATA_INSTALL_PATH_VALUE})\n\n#SET(PKG_BINDIR ${MEGAGLEST_BIN_INSTALL_PATH})\n\n# ^ hard to tell for what it is needed and most likely both were set to wrong values, so let's try to not use them\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# We do some funky character escaping to get the right stuff written out to \n\n# the final Makefile so we get the GIT Global Revsion #\n",
        "Line" : 323,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Win32 specific Compiler Flags\n",
        "Line" : 329,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# We don't wanna see bug reports with deprecation warnings from OSes where game isn't\n\n# actively developed, and where usually those warnings can make \"make log\" completely unreadable.\n\n# Main targets are: bsd and macos\n",
        "Line" : 337,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# This variable may be sometimes necessary to set manually.\n",
        "Line" : 342,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Check if sources exist\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#if(wxWidgets_FOUND)\n",
        "Line" : 404,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "#else()\n\n#  MESSAGE(STATUS \"WARNING... the following game tools will NOT be built since we cannot find wxWidgets on this machine\")\n\n#  MESSAGE(STATUS \"map editor, g3d viewer\")\n\n#endif()\n",
        "Line" : 407,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Check if data exist\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#get_directory_property( DirDefs COMPILE_DEFINITIONS )\n\n#MESSAGE(STATUS \">>>> NOTICE Compiler definitions used: ${DirDefs}\")\n\n#MESSAGE(STATUS \"END of compile defs...\")\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# CPack configuration shared accross platforms\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#SET(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README\")\n\n#SET(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/COPYING\")\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#required\n",
        "Line" : 451,
        "CharPositionInLine" : 53
      },
      "43" : {
        "Text" : "#MESSAGE( STATUS \"=====> DirDefs: \" ${DirDefs} )\n\n#MESSAGE(STATUS \"*** Compiler definitions are [${COMPILE_DEFINITIONS}]\")\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 44
    },
    "mk/cmake/Modules/CurlGetConfig.cmake" : {
      "ObjectId" : "a583889f5dd910ce992551654b30bdf758b7cef1",
      "LastModified" : "2017-08-27T07:07:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Curl Get Config\n\n#\n\n# IF we are using a system that supports curl-config use it.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 19,
        "CharPositionInLine" : 7
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 20,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# run the curl-config program to get --static-libs\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "mk/cmake/Modules/FindCppUnit.cmake" : {
      "ObjectId" : "8bb054f93c1de5bca9d85787324a343a791877e7",
      "LastModified" : "2015-08-20T14:43:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# http://root.cern.ch/viewvc/trunk/cint/reflex/cmake/modules/FindCppUnit.cmake\n\n#\n\n# - Find CppUnit\n\n#\n\n# This module finds the CppUnit include directory and library\n\n#\n\n# It sets the following variables:\n\n#  CPPUNIT_FOUND       - Set to false, or undefined, if CppUnit isn't found.\n\n#  CPPUNIT_INCLUDE_DIR - The CppUnit include directory.\n\n#  CPPUNIT_LIBRARY     - The CppUnit library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If CPPUNIT_ROOT was defined in the environment, use it.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If CPPUNIT_INCLUDEDIR was defined in the environment, use it.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If CPPUNIT_LIBRARYDIR was defined in the environment, use it.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now find CPPUNIT_INCLUDE_DIR\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# now find CPPUNIT_LIBRARY\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# show which CppUnit was found only if not quiet\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#message(STATUS \"Found CppUnit: ${CPPUNIT_LIBRARY}\")\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# fatal error if CppUnit is required but not found\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "mk/cmake/Modules/FindFTGL.cmake" : {
      "ObjectId" : "e2078cc19e04c72a1973b6ea8d307bf425a89100",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n# Try to find the FTGL libraries\n\n# Once done this will define\n\n#\n\n# FTGL_FOUND          - system has ftgl\n\n# FTGL_INCLUDE_DIR    - path to FTGL/FTGL.h\n\n# FTGL_LIBRARY        - the library that must be included\n\n# FTGL_LIBRARY_PATH   - the library path\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #1 Searching for FTGL lib in custom path: [${FTGL_LIBRARY_PATH}]\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "mk/cmake/Modules/FindFontConfig.cmake" : {
      "ObjectId" : "6d2d612de132a6ec0848d63d2605ed24d84615f7",
      "LastModified" : "2016-01-18T19:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FONTCONFIG\n\n# Find the native FONTCONFIG headers and libraries.\n\n#\n\n#  FONTCONFIG_INCLUDE_DIR -  where to find fontconfig.h, etc.\n\n#  FONTCONFIG_LIBRARIES    - List of libraries when using FONTCONFIG.\n\n#  FONTCONFIG_FOUND        - True if FONTCONFIG found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Report the results.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "mk/cmake/Modules/FindFriBiDi.cmake" : {
      "ObjectId" : "2ea91778c8acb43fb6a6773904b265a494aa1065",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the native FriBiDI includes and library\n\n#\n\n#\n\n# This module defines\n\n#  FRIBIDI_INCLUDE_DIR, where to find fribidi.h, etc.\n\n#  FRIBIDI_LIBRARIES, the libraries to link against to use FriBiDi.\n\n#  PNG_DEFINITIONS - You should ADD_DEFINITONS(${PNG_DEFINITIONS}) before compiling code that includes png library files.\n\n#  FRIBIDI_FOUND, If false, do not try to use PNG.\n\n# also defined, but not for general use are\n\n#  FRIBIDI_LIBRARY, where to find the FriBiDi library.\n\n#\n\n# If this module finds an old version of fribidi, then this module will run\n\n# add_definitions(-DOLD_FRIBIDI)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set variable in temp var, otherwise FIND_PATH might fail\n\n# unset isn't present in the required version of cmake.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MESSAGE(STATUS \"** Searching for library names: [${FRIBIDI_NAMES}] ...\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# fribidi >= 0.10.5\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# fribidi <= 0.10.4\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "mk/cmake/Modules/FindGLEW.cmake" : {
      "ObjectId" : "06731923127c02dc0e8203e864af0609f4ab54eb",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGLEW\n\n# --------\n\n#\n\n# Find the OpenGL Extension Wrangler Library (GLEW)\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` target ``GLEW::GLEW``,\n\n# if GLEW has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   GLEW_INCLUDE_DIRS - include directories for GLEW\n\n#   GLEW_LIBRARIES - libraries to link against GLEW\n\n#   GLEW_FOUND - true if GLEW has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Benjamin Eikel\n\n# Copyright 2015 filux <heross(@@)o2.pl>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "mk/cmake/Modules/FindGLIB2.cmake" : {
      "ObjectId" : "24dd58d85e1233fd73697e317641306dfc423754",
      "LastModified" : "2015-08-20T14:43:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# http://opensource.bolloretelecom.eu/projects/boc-wimax/browser/cmake/modules/FindGLIB2.cmake?rev=8f5b254534bd304923d4cc7bc7e9d6552c119ea2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find GLib2\n\n# Once done this will define\n\n#\n\n#  GLIB2_FOUND - system has GLib2\n\n#  GLIB2_INCLUDE_DIRS - the GLib2 include directory\n\n#  GLIB2_LIBRARIES - Link these to use GLib2\n\n#\n\n#  HAVE_GLIB_GREGEX_H  glib has gregex.h header and \n\n#                      supports g_regex_match_simple\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#  Copyright (c) 2006 Philippe Bernery <philippe.bernery@gmail.com>\n\n#  Copyright (c) 2007 Daniel Gollub <dgollub@suse.de>\n\n#  Copyright (c) 2007 Alban Browaeys <prahal@yahoo.com>\n\n#  Copyright (c) 2008 Michael Bell <michael.bell@web.de>\n\n#  Copyright (c) 2008 Bjoern Ricks <bjoern.ricks@googlemail.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## Glib\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Look for glib2 include dir and libraries w/o pkgconfig\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#MESSAGE(STATUS \"Glib headers: ${_glib2_include_DIR}\")\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Handle dependencies\n\n# libintl\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# libiconv\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "##\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# show the GLIB2_INCLUDE_DIRS and GLIB2_LIBRARIES variables only in the advanced view\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Check if system has a newer version of glib\n\n# which supports g_regex_match_simple\n",
        "Line" : 211,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Reset CMAKE_REQUIRED_INCLUDES\n",
        "Line" : 216,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 12
    },
    "mk/cmake/Modules/FindGoogleBreakpad.cmake" : {
      "ObjectId" : "89f5a9ec1a99cde5977f809239845c0a31ec1417",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find Google BreakPad\n\n# Find the Google BreakPad includes and library\n\n# This module defines\n\n#  BREAKPAD_EXCEPTION_HANDLER_INCLUDE_DIR, where to find exception_handler.h, etc.\n\n#  BREAKPAD_EXCEPTION_HANDLER_LIBRARIES, the libraries needed to use Google BreakPad.\n\n#  BREAKPAD_EXCEPTION_HANDLER_FOUND, If false, do not try to use Google BreakPad.\n\n# also defined, but not for general use are\n\n#  BREAKPAD_EXCEPTION_HANDLER_LIBRARY, where to find the Google BreakPad library.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#common/breakpad_types.h\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#SET(GoogleBreakpad_FIND_COMPONENTS common exception_handler client)\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#IF(CMAKE_TRACE)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ENDIF(CMAKE_TRACE)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#string(TOUPPER ${COMPONENT} UPPERCOMPONENT)\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\t\tIF(CMAKE_TRACE)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t\tENDIF(CMAKE_TRACE)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tIF(CMAKE_TRACE)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\tENDIF(CMAKE_TRACE)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tIF(CMAKE_TRACE)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tENDIF(CMAKE_TRACE)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#SET(BREAKPAD_FOUND FALSE)\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "mk/cmake/Modules/FindIrcclient.cmake" : {
      "ObjectId" : "13bdb544cc45ae010efd67bdc8d771494e93546f",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate ircclient library\n\n# This module defines\n\n#  IRCCLIENT_FOUND, if false, do not try to link to IRCCLIENT\n\n#  IRCCLIENT_LIBRARY, the libircclient variant\n\n#  IRCCLIENT_INCLUDE_DIR, where to find libircclient.h and family)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"libircclient.h\"\n\n# and not\n\n#  #include <libircclient/libircclient.h>\n\n# This is because, the ircclient location is not standardized and may exist\n\n# in locations other than libircclient/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Mark Vejvoda\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 36,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 37,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 38,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set IRCCLIENT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "mk/cmake/Modules/FindLIBVLC.cmake" : {
      "ObjectId" : "756c579a8e0422fe24a34c39c639715976d9658e",
      "LastModified" : "2016-01-18T19:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake module to search for LIBVLC (VLC library)\n\n# Authors: Rohit Yadav <rohityadav89@gmail.com>\n\n#          Harald Sitter <apachelogger@ubuntu.com>\n\n#\n\n# If it's found it sets LIBVLC_FOUND to TRUE\n\n# and following variables are set:\n\n#    LIBVLC_INCLUDE_DIR\n\n#    LIBVLC_LIBRARY\n\n#    LIBVLC_VERSION\n\n#    LIBVLC_VERSION_PRE_V2\n\n#    LIBVLC_VERSION_PRE_1_1_0\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find_path and find_library normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Put here path to custom location\n\n#example: /home/user/vlc/include etc..\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#mingw\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# dream on libvlc doesn't support static linking\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#IF(WANT_STATIC_LIBS)\n\n#    set(LIBVLC_LIB_NAMES libvlc.a ${LIBVLC_LIB_NAMES})\n\n#    set(LIBVLC_LIB_CORE_NAMES libvlccore.a ${LIBVLC_LIB_CORE_NAMES})\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    message(STATUS \"Looking for LIBVLC static libs\")\n\n#ENDIF()\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Put here path to custom location\n\n#example: /home/user/vlc/lib etc..\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#mingw\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#mingw\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# implement means to detect version on windows (vlc --version && regex? ... ultimately we would get it from a header though...)\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# only activate once version detection can be guaranteed (which is currently not the case on windows)\n\n#     set(LIBVLC_FOUND FALSE)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "mk/cmake/Modules/FindLUA.cmake" : {
      "ObjectId" : "dfc1d795ab85fd8ffbcfe05fd846c6e6fd2f2341",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLua\n\n# -------\n\n#\n\n#\n\n#\n\n# Locate Lua library This module defines\n\n#\n\n# ::\n\n#\n\n#   LUA_FOUND          - if false, do not try to link to Lua\n\n#   LUA_LIBRARIES      - both lua and lualib\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\n\n#   LUA_VERSION_STRING - the version of Lua found\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\n\n#\n\n#\n\n#\n\n# Note that the expected include convention is\n\n#\n\n# ::\n\n#\n\n#   #include \"lua.h\"\n\n#\n\n# and not\n\n#\n\n# ::\n\n#\n\n#   #include <lua/lua.h>\n\n#\n\n# This is because, the lua location is not standardized and may exist in\n\n# locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Copyright 2013 Rolf Eike Beer <eike@sf-mail.de>\n\n# Copyright 2015 filux <heross(@@)o2.pl>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Fink\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 126,
        "CharPositionInLine" : 13
      },
      "7" : {
        "Text" : "# Blastwave\n",
        "Line" : 127,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "# at least in mac ports, static lib is without numbers in name\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# At least 5.[012] have different ways to express the version\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "mk/cmake/Modules/FindMiniupnpc.cmake" : {
      "ObjectId" : "5fedfbf0767f995f219d2d569de3a94fd235f1e9",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate miniupnp library\n\n# This module defines\n\n#  MINIUPNP_FOUND, if false, do not try to link to miniupnp\n\n#  MINIUPNP_LIBRARY, the miniupnp variant\n\n#  MINIUPNP_INCLUDE_DIR, where to find miniupnpc.h and family)\n\n#  MINIUPNPC_VERSION_PRE1_6 --> set if we detect the version of miniupnpc is\n\n#                               pre 1.6\n\n#  MINIUPNPC_VERSION_PRE1_5 --> set if we detect the version of miniupnpc is\n\n#                               pre 1.5\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"miniupnpc.h\"\n\n# and not\n\n#  #include <miniupnpc/miniupnpc.h>\n\n# This is because, the miniupnpc location is not standardized and may exist\n\n# in locations other than miniupnpc/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Mark Vejvoda\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#find_path(MINIUPNP_INCLUDE_DIR miniupnpc.h\n\n#   PATH_SUFFIXES miniupnpc)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#message(STATUS \"Finding miniupnpc.h result: ${MINIUPNP_INCLUDE_DIR}\")\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#find_library(MINIUPNP_LIBRARY miniupnpc)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#message(STATUS \"Finding miniupnpc lib result: ${MINIUPNP_LIBRARY}\")\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#message (STATUS \"Found the miniupnpc libraries at ${MINIUPNP_LIBRARY}\")\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(STATUS \"Detecting version of miniupnpc in path: ${MINIUPNP_INCLUDE_DIR}\")\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "mk/cmake/Modules/FindOGG.cmake" : {
      "ObjectId" : "83d5a9652f4edadb98081a85dd5d7a33442bab23",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines\n\n#  OGG_FOUND\n\n#  OGG_INCLUDE_DIR\n\n#  OGG_LIBRARY\n\n#  VORBIS_LIBRARY\n\n#  VORBIS_FILE_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check for cache to avoid littering log\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#on macos the vorbisfile library is part of the vorbisone...\n\n#IF(NOT APPLE)\n\n# comment above is full of lies\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ENDIF(NOT APPLE)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "mk/cmake/Modules/FindSDL2.cmake" : {
      "ObjectId" : "d1bc1fe2bec457d8e9871045bfd5f5e095d24501",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 83,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 84,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY is ${SDL2_LIBRARY}\")\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "mk/cmake/Modules/FindXercesC.cmake" : {
      "ObjectId" : "933525f9a88783573fc736dab9dbef789d0907ed",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Xerces-C\n\n# Find the Xerces-C includes and library\n\n#\n\n#  XERCESC_INCLUDE_DIR - Where to find xercesc include sub-directory.\n\n#  XERCESC_LIBRARIES   - List of libraries when using Xerces-C.\n\n#  XERCESC_FOUND       - True if Xerces-C found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF (XERCESC_INCLUDE_DIR)\n\n# Already in cache, be silent.\n\n#SET(XERCESC_FIND_QUIETLY TRUE)\n\n#ENDIF (XERCESC_INCLUDE_DIR)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FIND_PATH(XERCESC_INCLUDE_DIR xercesc\n\n#\tPATH_SUFFIXES DOM/dom.hpp)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET(XERCESC_NAMES xerces-c2_8_0 xerces-c xerces-c_3 xerces-c_2 Xerces)\n\n#FIND_LIBRARY(XERCESC_LIBRARY NAMES ${XERCESC_NAMES} )\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XERCESC_FOUND to\n\n# TRUE if all listed variables are TRUE.\n\n#INCLUDE(FindPackageHandleStandardArgs)\n\n#FIND_PACKAGE_HANDLE_STANDARD_ARGS(XercesC DEFAULT_MSG XERCESC_LIBRARY XERCESC_INCLUDE_DIR)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#IF(XERCESC_FOUND)\n\n#\tSET( XERCESC_LIBRARIES ${XERCESC_LIBRARY} )\n\n#ELSE(XERCESC_FOUND)\n\n#\tSET( XERCESC_LIBRARIES )\n\n#ENDIF(XERCESC_FOUND)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MARK_AS_ADVANCED( XERCESC_LIBRARY XERCESC_INCLUDE_DIR )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################### NEW CODE BELOW\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# - Try to find Xerces-C\n\n# Once done this will define\n\n#\n\n#  XERCESC_FOUND - system has Xerces-C\n\n#  XERCESC_INCLUDE - the Xerces-C include directory\n\n#  XERCESC_LIBRARY - Link these to use Xerces-C\n\n#  XERCESC_VERSION - Xerces-C found version\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# in cache already\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#MESSAGE(STATUS \"Found cached Xerces-C lib [${XERCESC_LIBRARY}]\")\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#MESSAGE(STATUS \"Current Xerces-C lib [${XERCESC_LIBRARY}] XERCESC_INCLUDE [${XERCESC_INCLUDE}\")\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#SET(XERCESC_LIBRARY \"-Bstatic ${XERCESC_LIBRARY} -Bdynamic -licuuc -licudata\")\n",
        "Line" : 87,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 13
    },
    "mk/cmake/Modules/ReqVersAndStaticConf.cmake" : {
      "ObjectId" : "c9bc8db79ffffce8e0e342eb37c41a5eed094c51",
      "LastModified" : "2017-04-01T12:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Required Versions And Static Config\n\n#\n\n# Things related with \"Static build\" and optional versioning.\n\n#\n\n# By assumption in general all should be done in the way that the default dynamic\n\n# compilation should work even without this file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# shared lib\n",
        "Line" : 12,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# wxWidgets for tools\n",
        "Line" : 30,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# wxWidgets by default are not available static\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# only libs not used by shared lib\n",
        "Line" : 42,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 5
    },
    "mk/cmake/Modules/SpecialMacros.cmake" : {
      "ObjectId" : "61b3eacb52c40c4d2cd46f2d752d57b332979db3",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# special macros SpecialMacros.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#macro(special_add_library lib)\n\n#  if (WIN32)\n\n#    add_library(${lib} STATIC ${ARGN})\n\n#  else (WIN32)\n\n#    add_library(${lib} SHARED ${ARGN})\n\n#  endif (WIN32)\n\n#endmacro(special_add_library)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check for SSE extensions\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# check for X87 support\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "mk/cmake/Modules/Toolchain-linux32.cmake" : {
      "ObjectId" : "6444190392d721aae09ba6ff87479b408e1e9c24",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Target operating system and architecture\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C/C++ compilers\n\n#set( CMAKE_C_COMPILER gcc -m32 )\n\n#set( CMAKE_CXX_COMPILER g++ -m32 )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set( CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} -m32)\n\n#set( CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS} -m32)\n\n#set( CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} -m32)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look for libraries in lib32\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CMAKE_FIND_ROOT_PATH  /usr/lib32)\n\n#set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n\n#set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n\n#set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "mk/cmake/Modules/Toolchain-mingw32.cmake" : {
      "ObjectId" : "9080a2603925e398dd8262fa86569f5326a669cf",
      "LastModified" : "2015-11-05T19:45:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n\n#SET(CMAKE_C_COMPILER i586-mingw32msvc-gcc)\n\n#SET(CMAKE_CXX_COMPILER i586-mingw32msvc-g++)\n\n#SET(CMAKE_RC_COMPILER i586-mingw32msvc-windres)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n\n#SET(CMAKE_FIND_ROOT_PATH  /usr/i586-mingw32msvc ${PROJECT_SOURCE_DIR}/source/win32_deps/lib)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_definitions(-std=c++0x)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "mk/macos/CMakeLists.txt" : {
      "ObjectId" : "a587c35c22aafd065c164a5d13e4d921cae7de15",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Anything <= 10.3 isn't supported. We want 32-bit Intel/PPC on 10.4, 10.5.\n\n# On 10.6 32/64-bit Intel. On >= 10.7 unset architecture mean default 64-bit Intel.\n\n# Using oldest available sdk with current Xcode is recommended.\n\n# User needs to be able to change these options.\n\n# So we must only set the values the first time CMake is run, or we\n\n# will overwrite any changes the user sets.\n\n# FORCE is used because the options are not reflected in the UI otherwise.\n\n# Seems like a good place to add version specific compiler flags too.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Include extra paths to search for includes; this is the default system wide macports and X11 path.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#LINK_DIRECTORIES(/opt/local/lib)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##install part\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This file is in git CRLF but that causes the cpack run to fail\n\n#CONFIGURE_FILE(\"${CMAKE_CURRENT_SOURCE_DIR}/docs/COPYRIGHT.source_code.txt\"\n\n#\t\"${CMAKE_CURRENT_BINARY_DIR}/docs/COPYRIGHT.source_code.txt\" NEWLINE_STYLE UNIX)\n\n#SET(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_BINARY_DIR}/docs/COPYRIGHT.source_code.txt\")\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This changes Info.plist from something with variables and CMakeisms to\n\n# something that can be installed on disk.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use bundle generator (OSX has 3 other options if you feel adventurous)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "source/g3d_viewer/CMakeLists.txt" : {
      "ObjectId" : "cfed04c859f0c0d8577d5bcfd6fae5f3736618c6",
      "LastModified" : "2017-04-01T12:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# common libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Was required at least on bsd and macos.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ^ This is not needed here (once, globally is enough) if every find run returns the same status.\n\n# With wx this is not so 100% sure.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# It was noticed that when using MinGW gcc it is essential that 'core' is mentioned before 'base'.\n\n# Optimal order most likely is gl > core > base, in some cases it may do difference.\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# wxWidgets include (this will do all the magic to configure everything)\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#########################################################################################\n\n# megaglest G3D Model Viewer\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#    ${GLEST_LIB_INCLUDE_ROOT}platform/${SDL_VERSION_SNAME}\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 181,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 184,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# on mac <> --help sometimes hangs, so we need \"NOT APPLE\" ^ or some timeout here for now\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Requires an install prefix for the items below to work\n",
        "Line" : 232,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Installation of the program\n",
        "Line" : 234,
        "CharPositionInLine" : 9
      },
      "12" : {
        "Text" : "# Installation of the program manpage file\n",
        "Line" : 242,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Installation of the program config and image files\n",
        "Line" : 248,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 14
    },
    "source/glest_game/CMakeLists.txt" : {
      "ObjectId" : "76b5de40d8bdeb53a3fe0ff546c10c98b77de58f",
      "LastModified" : "2017-10-07T15:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################################################################################\n\n# common libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default\n",
        "Line" : 99,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# mageia\n",
        "Line" : 102,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#########################################################################################\n\n# megaglest game\n",
        "Line" : 175,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#INCLUDE_DIRECTORIES( ${GLEST_LIB_INCLUDE_ROOT}platform/${SDL_VERSION_SNAME} )\n",
        "Line" : 221,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 249,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 252,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Force the git revision stamp (${GIT_COMMIT_COUNT}.${GIT_SHA1}) file to be touched so the compile stamp is always right\n",
        "Line" : 257,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Requires an install prefix for the items below to work\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Installation of the program\n",
        "Line" : 334,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Installation of the program manpage file\n",
        "Line" : 342,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 11
    },
    "source/glest_map_editor/CMakeLists.txt" : {
      "ObjectId" : "2e73c0d16419dc91e3f06856bf95a4542764c74d",
      "LastModified" : "2017-04-01T12:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# common libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Was required at least on bsd and macos.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ^ This is not needed here (once, globally is enough) if every find run returns the same status.\n\n# With wx this is not so 100% sure.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# It was noticed that when using MinGW gcc it is essential that 'core' is mentioned before 'base'.\n\n# Optimal order most likely is gl > core > base, in some cases it may do difference.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# wxWidgets include (this will do all the magic to configure everything)\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#########################################################################################\n\n# megaglest map editor\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#    ${GLEST_LIB_INCLUDE_ROOT}platform/${SDL_VERSION_SNAME}\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 162,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 165,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# on mac <> --help sometimes hangs, so we need \"NOT APPLE\" ^ or some timeout here for now\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Requires an install prefix for the items below to work\n",
        "Line" : 222,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Installation of the program\n",
        "Line" : 224,
        "CharPositionInLine" : 9
      },
      "12" : {
        "Text" : "# Installation of the program manpage file\n",
        "Line" : 232,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Installation of the program config and image files\n",
        "Line" : 238,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 14
    },
    "source/shared_lib/CMakeLists.txt" : {
      "ObjectId" : "ce05d12287a0a050947dd4ce817baecbbe460a38",
      "LastModified" : "2018-04-11T00:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################################################################################\n\n# streflop\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IMPORTANT: should come BEFORE finding packages\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########################################################################################\n\n# common libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# default\n",
        "Line" : 95,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# mageia\n",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#include_directories( ${BREAKPAD_EXCEPTION_HANDLER_INCLUDE_DIR} )\n\n#SET(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${BREAKPAD_EXCEPTION_HANDLER_LIBRARIES})\n",
        "Line" : 252,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#########################################################################################\n\n# megaglest lib\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#IF(NOT WANT_STATIC_LIBS)\n",
        "Line" : 366,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# ^ This test doesn't work, some general problem with irc_get_version\n",
        "Line" : 408,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "#MESSAGE(STATUS \"INCLUDE_DIR_TO_GLOB: ${INCLUDE_DIR_TO_GLOB}\")\n",
        "Line" : 435,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "#MESSAGE(STATUS \"INCLUDE FILES GLOBBED: ${INC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 437,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "#MESSAGE(STATUS \"SRC_DIR_TO_GLOB: ${SRC_DIR_TO_GLOB}\")\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#MESSAGE(STATUS \"SRC_DIR_TO_GLOB: ${SRC_DIR_TO_GLOB}\")\n",
        "Line" : 448,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 455,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 458,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#MESSAGE(STATUS \"Source files: ${MG_INCLUDE_FILES}\")\n\n#MESSAGE(STATUS \"Source files: ${MG_SOURCE_FILES}\")\n\n#MESSAGE(STATUS \"Include dirs: ${INCLUDE_DIRECTORIES}\")\n",
        "Line" : 463,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "#MESSAGE(STATUS \"Building shared game library as a STATIC library and saving to [${LIBRARY_OUTPUT_PATH}]\")\n",
        "Line" : 482,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#IF(MINIUPNP_DEBUG_BUILD)\n",
        "Line" : 507,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# REMOVE_DEFINITIONS(\"-DDEBUG\")\n",
        "Line" : 508,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#ENDIF()\n",
        "Line" : 509,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 22
    },
    "source/shared_lib/include/streflop/CMakeLists.txt" : {
      "ObjectId" : "5efa9188066a5cac5c247bbb88bf8780eb06a0b1",
      "LastModified" : "2017-02-06T00:48:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/shared_lib/include/streflop/libm/flt-32/Makefile" : {
      "ObjectId" : "f4bfb65924297f7e0b5917a74dc6f02bd3424331",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile automatically generated by import.pl\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/shared_lib/sources/libircclient/Makefile" : {
      "ObjectId" : "2dc117dfba4cdbe453d878fea823ce54ca4c7b87",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile 84 2009-01-10 01:37:29Z chromerium $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/shared_lib/sources/libircclient/build/source/libircclient/Makefile" : {
      "ObjectId" : "2dc117dfba4cdbe453d878fea823ce54ca4c7b87",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile 84 2009-01-10 01:37:29Z chromerium $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/shared_lib/sources/platform/miniupnpc/Makefile" : {
      "ObjectId" : "90162e2fcf4f4b94f917d31d1552d16d717445ad",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile,v 1.131 2015/10/08 16:15:46 nanard Exp $\n\n# MiniUPnP Project\n\n# http://miniupnp.free.fr/\n\n# http://miniupnp.tuxfamily.org/\n\n# https://github.com/miniupnp/miniupnp\n\n# (c) 2005-2015 Thomas Bernard\n\n# to install use :\n\n# $ make DESTDIR=/tmp/dummylocation install\n\n# or\n\n# $ INSTALLPREFIX=/usr/local make install\n\n# or\n\n# $ make install (default INSTALLPREFIX is /usr)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#AR = gar\n\n#CFLAGS = -O -g -DDEBUG\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CFLAGS += -D_POSIX_C_SOURCE=200112L\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CFLAGS += -ansi\n\n# -DNO_GETADDRINFO\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# see http://code.google.com/p/jnaerator/\n\n#JNAERATOR = jnaerator-0.9.7.jar\n\n#JNAERATOR = jnaerator-0.9.8-shaded.jar\n\n#JNAERATORARGS = -library miniupnpc\n\n#JNAERATOR = jnaerator-0.10-shaded.jar\n\n#JNAERATOR = jnaerator-0.11-shaded.jar\n\n# https://repo1.maven.org/maven2/com/nativelibs4java/jnaerator/0.12/jnaerator-0.12-shaded.jar\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#JNAERATORBASEURL = http://jnaerator.googlecode.com/files/\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# APIVERSION is used to build SONAME\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# HEADERS to install\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# library names\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Linux/BSD/etc.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# install directories\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tvalidateminixml validateminiwget\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# clean python stuff\n",
        "Line" : 206,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#python setup.py clean\n\n# clean jnaerator stuff\n",
        "Line" : 212,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#\t$(CC) -dynamiclib $(LDFLAGS) -Wl,-install_name,$(SONAME) -o $@ $^\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ftp tool supplied with OpenBSD can download files from http.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# make .deb packages\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install .deb packages\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DO NOT DELETE THIS LINE -- make depend depends on it.\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19,
      "Errorlog" : "line 221:33 token recognition error at: '\\s'\nline 221:47 token recognition error at: '\\1'\n"
    },
    "source/shared_lib/sources/streflop/CMakeLists.txt" : {
      "ObjectId" : "6a5a30c8473746ea89b2ce3cd42b4134ef64695f",
      "LastModified" : "2016-11-18T01:07:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################################################################################\n\n# streflop\n\n#if (NOT $ENV{CXX} MATCHES \"icpc\")\n\n#\tSET(cxxflags \"${cxxflags} -mfpmath=sse -msse\")\n\n#endif (NOT $ENV{CXX} MATCHES \"icpc\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/steamshim_parent/Makefile" : {
      "ObjectId" : "8b97586b60929bc66cd84382849818970ea5c837",
      "LastModified" : "2018-04-11T00:11:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# STEAMWORKS\t\t\t?= /home/softcoder/Code/steamworks_sdk/sdk\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# WINDRES\t\t\t?= windres\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# RES\t\t\t:= resources.rc\n\n# RESOBJ\t\t:= resources.o\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# $(TARGET).exe: $(SRC) $(RESOBJ)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# $(RESOBJ): $(RES)\n\n#\t$(WINDRES) $< $@\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\trm -f $(TARGET) $(TARGET).exe $(RESOBJ)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "source/tests/CMakeLists.txt" : {
      "ObjectId" : "820b696f12af6c7f9e71bab5246a7d3fc8413661",
      "LastModified" : "2018-04-11T00:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################################################################################\n\n# megaglest_tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################################################################################\n\n# megaglest test code\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#MESSAGE(STATUS \"INCLUDE_DIR_TO_GLOB: ${INCLUDE_DIR_TO_GLOB}\")\n",
        "Line" : 138,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#MESSAGE(STATUS \"INCLUDE FILES GLOBBED: ${INC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 140,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#MESSAGE(STATUS \"SRC_DIR_TO_GLOB: ${SRC_DIR_TO_GLOB}\")\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#MESSAGE(STATUS \"SRC_DIR_TO_GLOB: ${SRC_DIR_TO_GLOB}\")\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 158,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#MESSAGE(STATUS \"SRC_FILES_FROM_THIS_DIR: ${SRC_FILES_FROM_THIS_DIR}\")\n",
        "Line" : 161,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "#MESSAGE(STATUS \"Source files: ${MG_INCLUDE_FILES}\")\n\n#MESSAGE(STATUS \"Source files: ${MG_SOURCE_FILES}\")\n\n#MESSAGE(STATUS \"Include dirs: ${INCLUDE_DIRECTORIES}\")\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Run the unit tests after build\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "source/tools/glexemel/CMakeLists.txt" : {
      "ObjectId" : "9caa94088289a67a3409a08f0fcd315af16cd6bb",
      "LastModified" : "2018-04-11T00:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# glexemel\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 29,
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 3817
}