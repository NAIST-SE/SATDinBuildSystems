{
  "Repository" : "2045",
  "Revision" : "HEAD",
  "ObjectId" : "9c40260043e8f146642ae54fc0e6bae2a76f9f79",
  "CommitTime" : "2019-04-16T17:17:56Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "88eb9ec10a2346e04b564265b02b13dc1fac99ec",
      "LastModified" : "2019-02-14T11:57:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build script for the libgit2 project\n\n#\n\n# Building (out of source build):\n\n# > mkdir build && cd build\n\n# > cmake .. [-DSETTINGS=VALUE]\n\n# > cmake --build .\n\n#\n\n# Testing:\n\n# > ctest -V\n\n#\n\n# Install:\n\n# > cmake --build . --target install\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add find modules to the path\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Added in CMake 3.0\n",
        "Line" : 34,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Build options\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This option must match the settings used in your program, in particular if you\n\n# are linking statically\n",
        "Line" : 78,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# If you want to embed a copy of libssh2 into libgit2, pass a\n\n# path to libssh2\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# By default, libgit2 is built with WinHTTP.  To use the built-in\n\n# HTTP transport, invoke CMake with the \"-DWINHTTP=OFF\" argument.\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Enable MSVC CRTDBG memory leak reporting when in debug mode.\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Platform specific compilation flags\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# /GF - String pooling\n\n# /MP - Parallel build\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# /Gd - explicitly set cdecl calling convention\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# /Zi - Create debugging information\n\n# /Od - Disable optimization\n\n# /D_DEBUG - #define _DEBUG\n\n# /MTd - Statically link the multithreaded debug version of the CRT\n\n# /MDd - Dynamically link the multithreaded debug version of the CRT\n\n# /RTC1 - Run time checks\n",
        "Line" : 146,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# /DNDEBUG - Disables asserts\n\n# /MT - Statically link the multithreaded release version of the CRT\n\n# /MD - Dynamically link the multithreaded release version of the CRT\n\n# /O2 - Optimize for speed\n\n# /Oy - Enable frame pointer omission (FPO) (otherwise CMake will automatically turn it off)\n\n# /GL - Link time code generation (whole program optimization)\n\n# /Gy - Function-level linking\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# /Oy- - Disable frame pointer omission (FPO)\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# /O1 - Optimize for size\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# /IGNORE:4221 - Ignore empty compilation units\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# /DYNAMICBASE - Address space load randomization (ASLR)\n\n# /NXCOMPAT - Data execution prevention (DEP)\n\n# /LARGEADDRESSAWARE - >2GB user address space on x86\n\n# /VERSION - Embed version information in PE header\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# /DEBUG - Create a PDB\n\n# /LTCG - Link time code generation (whole program optimization)\n\n# /OPT:REF /OPT:ICF - Fold out duplicate code at link step\n\n# /INCREMENTAL:NO - Required to use /LTCG\n\n# /DEBUGTYPE:cv,fixup - Additional data embedded in the PDB (requires /INCREMENTAL:NO, so not on for Debug)\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Same linker settings for DLL as EXE\n",
        "Line" : 188,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# MinGW and MSYS always do PIC and complain if we tell them to\n",
        "Line" : 212,
        "CharPositionInLine" : 20
      },
      "20" : {
        "Text" : "# MinGW >= 3.14 uses the C99-style stdio functions\n\n# automatically, but forks like mingw-w64 still want\n\n# us to define this in order to use them\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Build Debug by default\n",
        "Line" : 247,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Using a multi-configuration generator eg MSVC or Xcode\n\n# that uses CMAKE_CONFIGURATION_TYPES and not CMAKE_BUILD_TYPE\n",
        "Line" : 252,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# The actual sanitizer link target will be added when linking the fuzz\n\n# targets.\n",
        "Line" : 257,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Tests\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake/Modules/AddCFlagIfSupported.cmake" : {
      "ObjectId" : "b7aaa7910a969afe106300e301ebb905f0b382b3",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Append compiler flag to CMAKE_C_FLAGS if compiler supports it\n\n# ADD_C_FLAG_IF_SUPPORTED(<flag>)\n\n#  <flag> - the compiler flag to test\n\n# This internally calls the CHECK_C_COMPILER_FLAG macro.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CheckPrototypeDefinition.cmake" : {
      "ObjectId" : "244b9b53b413b4a15df5bc356a88c303e0ba2cba",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the protoype we expect is correct.\n\n# check_prototype_definition(FUNCTION PROTOTYPE RETURN HEADER VARIABLE)\n\n#  FUNCTION - The name of the function (used to check if prototype exists)\n\n#  PROTOTYPE- The prototype to check.\n\n#  RETURN - The return value of the function.\n\n#  HEADER - The header files required.\n\n#  VARIABLE - The variable to store the result.\n\n# Example:\n\n#  check_prototype_definition(getpwent_r\n\n#   \"struct passwd *getpwent_r(struct passwd *src, char *buf, int buflen)\"\n\n#   \"NULL\"\n\n#   \"unistd.h;pwd.h\"\n\n#   SOLARIS_GETPWENT_R)\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2010-2011 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/EnableWarnings.cmake" : {
      "ObjectId" : "72e1523c4617b525be63b43f21e319be04b5d84e",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindCoreFoundation.cmake" : {
      "ObjectId" : "e86ccbf03b991d18e9b78d5add34261a20f7447e",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find CoreFoundation.framework\n\n# This will define :\n\n#\n\n# COREFOUNDATION_FOUND\n\n# COREFOUNDATION_LIBRARIES\n\n# COREFOUNDATION_LDFLAGS\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGSSAPI.cmake" : {
      "ObjectId" : "37357c4cd4bb9d56a65d0f4adf76f7c9202dea95",
      "LastModified" : "2019-04-07T23:20:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GSSAPI\n\n# Once done this will define\n\n#\n\n#  KRB5_CONFIG - Path to krb5-config\n\n#  GSSAPI_ROOT_DIR - Set this variable to the root installation of GSSAPI\n\n#\n\n# Read-Only variables:\n\n#  GSSAPI_FLAVOR_MIT - set to TURE if MIT Kerberos has been found\n\n#  GSSAPI_FLAVOR_HEIMDAL - set to TRUE if Heimdal Kerberos has been found\n\n#  GSSAPI_FOUND - system has GSSAPI\n\n#  GSSAPI_INCLUDE_DIR - the GSSAPI include directory\n\n#  GSSAPI_LIBRARIES - Link these to use GSSAPI\n\n#  GSSAPI_DEFINITIONS - Compiler switches required for using GSSAPI\n\n#\n\n#=============================================================================\n\n#  Copyright (c) 2013 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if we have MIT KRB5\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Get the include dir\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Check for HEIMDAL\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# show the GSSAPI_INCLUDE_DIRS and GSSAPI_LIBRARIES variables only in the advanced view\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindHTTP_Parser.cmake" : {
      "ObjectId" : "d92bf75cc600d48eb60f992407d1b69006f1e94f",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find http-parser\n\n#\n\n# Defines the following variables:\n\n#\n\n# HTTP_PARSER_FOUND - system has http-parser\n\n# HTTP_PARSER_INCLUDE_DIR - the http-parser include directory\n\n# HTTP_PARSER_LIBRARIES - Link these to use http-parser\n\n# HTTP_PARSER_VERSION_MAJOR - major version\n\n# HTTP_PARSER_VERSION_MINOR - minor version\n\n# HTTP_PARSER_VERSION_STRING - the version of http-parser found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the header and library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Found the header, read version\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set HTTP_PARSER_FOUND\n\n# to TRUE if all listed variables are TRUE\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Hide advanced variables\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set standard variables\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindIconv.cmake" : {
      "ObjectId" : "3c66cdad41cfd7820455666444385d1fc39433a7",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Iconv\n\n# Once done this will define\n\n#\n\n# ICONV_FOUND - system has Iconv\n\n# ICONV_INCLUDE_DIR - the Iconv include directory\n\n# ICONV_LIBRARIES - Link these to use Iconv\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# split iconv into -L and -l linker options, so we can\n\n# set them for pkg-config\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindPkgLibraries.cmake" : {
      "ObjectId" : "49311c382a84f3eff5edd527fc4e878cfdd21672",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function will find and set up a pkg-config based module.\n\n# If a pc-file was found, it will resolve library paths to\n\n# absolute paths. Furthermore, the function will automatically\n\n# fall back to use static libraries in case no dynamic libraries\n\n# were found.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindSecurity.cmake" : {
      "ObjectId" : "487f7e500b50f1f461655d17128a68764a16fd6b",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Security.framework\n\n# This will define :\n\n#\n\n# SECURITY_FOUND\n\n# SECURITY_LIBRARIES\n\n# SECURITY_LDFLAGS\n\n# SECURITY_HAS_SSLCREATECONTEXT\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindStatNsec.cmake" : {
      "ObjectId" : "fa550a21438b194ec95fc97ecf556bff50aedbf5",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindmbedTLS.cmake" : {
      "ObjectId" : "93297555e818812b013a5b7887b198de2cecb679",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find mbedTLS\n\n# Once done this will define\n\n#\n\n# Read-Only variables\n\n#  MBEDTLS_FOUND - system has mbedTLS\n\n#  MBEDTLS_INCLUDE_DIR - the mbedTLS include directory\n\n#  MBEDTLS_LIBRARY_DIR - the mbedTLS library directory\n\n#  MBEDTLS_LIBRARIES - Link these to use mbedTLS\n\n#  MBEDTLS_LIBRARY - path to mbedTLS library\n\n#  MBEDX509_LIBRARY - path to mbedTLS X.509 library\n\n#  MBEDCRYPTO_LIBRARY - path to mbedTLS Crypto library\n\n#\n\n# Hint\n\n#  MBEDTLS_ROOT_DIR can be pointed to a local mbedTLS installation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# split mbedTLS into -L and -l linker options, so we can set them for pkg-config\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/Modules/IdeSplitSources.cmake" : {
      "ObjectId" : "e2e09b4ce15443f3a335fb5d92b58bfa09c38ee1",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function splits the sources files up into their appropriate\n\n# subdirectories.  This is especially useful for IDEs like Xcode and\n\n# Visual Studio, so that you can navigate into the libgit2_clar project,\n\n# and see the folders within the tests folder (instead of just seeing all\n\n# source and tests in a single folder.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/http-parser/CMakeLists.txt" : {
      "ObjectId" : "4a8bafd2f133811aa3904c357c4bbaae901137fc",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/regex/CMakeLists.txt" : {
      "ObjectId" : "141b54c4ce2ed5ff7fb41e4373b5fd59dbee3291",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/winhttp/CMakeLists.txt" : {
      "ObjectId" : "148ac3ebc954c21e4f7c183dcc78f3a774c96fe8",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/zlib/CMakeLists.txt" : {
      "ObjectId" : "afa5a19afc6e7c026fd1dc31c67f4531ecf80e76",
      "LastModified" : "2019-04-07T23:20:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "05e344df1d4ac63e04b2b316250605f8cdd7296c",
      "LastModified" : "2019-04-07T23:20:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ensure that we do not use deprecated functions internally\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "fuzzers/CMakeLists.txt" : {
      "ObjectId" : "ea0612322172c63ad6e60ca3d3b57c79498dcf29",
      "LastModified" : "2019-01-10T14:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b056c9a9b97d0e1acc2d64a55c500e5c32cd4e77",
      "LastModified" : "2019-04-07T23:20:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This variable will contain the libraries we need to put into\n\n# libgit2.pc's Requires.private. That is, what we're linking to or\n\n# what someone who's statically linking us needs to link to.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This will be set later if we use the system's http-parser library or\n\n# use iconv (OSX) and will be written to the Libs.private field in the\n\n# pc file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Installation paths\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set a couple variables to be substituted inside the .pc file.\n\n# We can't just use LIB_INSTALL_DIR in the .pc file, as passing them as absolue\n\n# or relative paths is both valid and supported by cmake.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable tracing\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find required dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Since MinGW does not come with headers or an import library for winhttp,\n\n# we have to include a private header and generate our own import library\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# We try to find any packages our backends might use\n",
        "Line" : 131,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Auto-select TLS backend\n",
        "Line" : 139,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Backend was explicitly set\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Check that we can find what's required for the selected backend\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Check for an Homebrew installation\n",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# OpenSUSE Leap 42.1\n\n# Ubuntu 14.04, FreeBSD\n\n# Ubuntu 16.04\n\n# Debian 7\n",
        "Line" : 207,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# mbedTLS has no pkgconfig file, hence we can't require it\n\n# https://github.com/ARMmbed/mbedtls/issues/228\n\n# For now, pass its link flags as our own\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# WinHTTP setup was handled in the WinHTTP-specific block above\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Specify sha1 implementation\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# mbedTLS has no pkgconfig file, hence we can't require it\n\n# https://github.com/ARMmbed/mbedtls/issues/228\n\n# For now, pass its link flags as our own\n",
        "Line" : 289,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Include POSIX regex when it is required\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optional external dependency: http-parser\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optional external dependency: zlib\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Optional external dependency: libssh2\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Optional external dependency: libgssapi\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Optional external dependency: iconv\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Collect sourcefiles\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# On Windows use specific platform sources\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Determine architecture of the machine\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This is required for Xcode to actually link the libgit2 library\n\n# when using only object libraries.\n",
        "Line" : 473,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Compile and link libgit2\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Workaround for Cmake bug #0011240 (see http://public.kitware.com/Bug/view.php?id=11240)\n\n# Win64+MSVC+static libs = linker error\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Precompiled headers\n",
        "Line" : 513,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# Install\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "aaa8ed109f768c4812283f9a697ab8b4a0faad11",
      "LastModified" : "2019-04-07T23:20:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ensure that we do not use deprecated functions internally\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already handled by a global INCLUDE_DIRECTORY()\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Precompiled headers\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 21
  },
  "ElapsedTime" : 1021
}