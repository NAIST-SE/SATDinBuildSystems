{
  "Repository" : "53933124",
  "Revision" : "HEAD",
  "ObjectId" : "cb1d42010dbc02a743d8473ee18b2bfafdc572f1",
  "CommitTime" : "2019-04-16T02:25:48Z",
  "Files" : {
    "build/CMakeLists.txt" : {
      "ObjectId" : "bbb2db3c97ad0c7570d52aad506f3fb89329ffb0",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tencent is pleased to support the open source community by making xLua available.\r\n\n# Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\r\n\n# Licensed under the MIT License (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\r\n\n# http://opensource.org/licenses/MIT\r\n\n# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set_target_properties ( xlua PROPERTIES FRAMEWORK TRUE )\r\n\n#set_target_properties ( xlua PROPERTIES MACOSX_RPATH TRUE )\r\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "build/cmake/android.toolchain.cmake" : {
      "ObjectId" : "a19d19b5b09041c7df34f4d4d119a5b44e87cbec",
      "LastModified" : "2016-12-20T10:08:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r10d\n\n#  Requires cmake 2.6.3 or newer (2.8.9 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (and newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - ARMv5TE based CPU with software floating point operations\n\n#        \"armeabi-v7a\" - ARMv7 based devices with hardware FPU instructions\n\n#            this ABI target is used by default\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP\n\n#        \"x86\" - IA-32 instruction set\n\n#        \"mips\" - MIPS32 instruction set\n\n#\n\n#      64-bit ABIs for NDK r10 and newer:\n\n#        \"arm64-v8a\" - ARMv8 AArch64 instruction set\n\n#        \"x86_64\" - Intel64 instruction set (r1)\n\n#        \"mips64\" - MIPS64 instruction set (r6)\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#      Note: building for \"android-L\" requires explicit configuration.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r10c the possible values are:\n\n#\n\n#        * aarch64-linux-android-4.9\n\n#        * aarch64-linux-android-clang3.4\n\n#        * aarch64-linux-android-clang3.5\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-4.8\n\n#        * arm-linux-androideabi-4.9 (default)\n\n#        * arm-linux-androideabi-clang3.4\n\n#        * arm-linux-androideabi-clang3.5\n\n#        * mips64el-linux-android-4.9\n\n#        * mips64el-linux-android-clang3.4\n\n#        * mips64el-linux-android-clang3.5\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-4.8\n\n#        * mipsel-linux-android-4.9\n\n#        * mipsel-linux-android-clang3.4\n\n#        * mipsel-linux-android-clang3.5\n\n#        * x86-4.6\n\n#        * x86-4.8\n\n#        * x86-4.9\n\n#        * x86-clang3.4\n\n#        * x86-clang3.5\n\n#        * x86_64-4.9\n\n#        * x86_64-clang3.4\n\n#        * x86_64-clang3.5\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"armeabi-v6 with VFP\"\n\n#      (is forced to be ON) ABI.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS or ARM64_V8A or X86_64 or MIPS64\n\n#    will be set true, mutually exclusive. NEON option will be set true\n\n#    if VFP is set to NEON.\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable to suppress \"unused variable\" warning\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# inherit settings in recursive loads\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one is important\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this one not so much\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# rpath makes low sense for Android\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NDK search paths\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# known ABIs\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# API level defaults\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# detect current host platform\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 386,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 404,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# remember found paths\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# try to detect change\n",
        "Line" : 432,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# android NDK layout\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 471,
        "CharPositionInLine" : 71
      },
      "23" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 476,
        "CharPositionInLine" : 71
      },
      "24" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 480,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 487,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#message(\"machine: !${__machine}!\\narch: !${__arch}!\\nversion: !${__version}!\\ntoolchain: !${__toolchain}!\\n\")\n",
        "Line" : 568,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 602,
        "CharPositionInLine" : 39
      },
      "31" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# choose target ABI\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# set target ABI options\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 691,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 719,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# choose toolchain\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# choose native API level\n",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# adjust API level\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# validate\n",
        "Line" : 797,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# remember target ABI\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 827,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 906,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 916,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# clang\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# do nothing\n",
        "Line" : 983,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 993,
        "CharPositionInLine" : 42
      },
      "50" : {
        "Text" : "# before r8d\n",
        "Line" : 1001,
        "CharPositionInLine" : 46
      },
      "51" : {
        "Text" : "# before r7\n",
        "Line" : 1006,
        "CharPositionInLine" : 42
      },
      "52" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1018,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# android support sfiles\n",
        "Line" : 1044,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# android support sfiles\n",
        "Line" : 1062,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1080,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1082,
        "CharPositionInLine" : 137
      },
      "57" : {
        "Text" : "# r7-r8\n",
        "Line" : 1084,
        "CharPositionInLine" : 110
      },
      "58" : {
        "Text" : "# before r7\n",
        "Line" : 1086,
        "CharPositionInLine" : 36
      },
      "59" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1106,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# TODO: check if .so file exists before the renaming\n",
        "Line" : 1109,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# ccache support\n",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1126,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Use gcc-ar if we have it for better LTO support.\n",
        "Line" : 1151,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1175,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1198,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1220,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1235,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# NDK flags\n",
        "Line" : 1243,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1260,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1287,
        "CharPositionInLine" : 62
      },
      "72" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1294,
        "CharPositionInLine" : 72
      },
      "73" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1297,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1308,
        "CharPositionInLine" : 91
      },
      "75" : {
        "Text" : "# STL\n",
        "Line" : 1323,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# C objects:\n",
        "Line" : 1334,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1352,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# before r7\n",
        "Line" : 1353,
        "CharPositionInLine" : 40
      },
      "79" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1354,
        "CharPositionInLine" : 1
      },
      "80" : {
        "Text" : "# linker flags\n",
        "Line" : 1374,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1378,
        "CharPositionInLine" : 1
      },
      "82" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1385,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# after r8b\n",
        "Line" : 1406,
        "CharPositionInLine" : 48
      },
      "84" : {
        "Text" : "# version 4.6\n",
        "Line" : 1414,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "# cache flags\n",
        "Line" : 1436,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1447,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# finish flags\n",
        "Line" : 1453,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# pie/pic\n",
        "Line" : 1470,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# configure rtti\n",
        "Line" : 1480,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1489,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1500,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1502,
        "CharPositionInLine" : 111
      },
      "93" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1505,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# setup output directories\n",
        "Line" : 1542,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1559,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1571,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# where is the target environment\n\n# http://www.vtk.org/Wiki/CMake_Cross_Compiling\n\n# we need to use find_path in our custorm modules, so disable it.\n\n# set( CMAKE_FIND_ROOT_PATH \"${ANDROID_TOOLCHAIN_ROOT}/bin\" \"${ANDROID_TOOLCHAIN_ROOT}/${ANDROID_TOOLCHAIN_MACHINE_NAME}\" \"${ANDROID_SYSROOT}\" \"${CMAKE_INSTALL_PREFIX}\" \"${CMAKE_INSTALL_PREFIX}/share\" )\n",
        "Line" : 1575,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1580,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1586,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1608,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1630,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1667,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1669,
        "CharPositionInLine" : 1
      },
      "104" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1671,
        "CharPositionInLine" : 37
      },
      "105" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1675,
        "CharPositionInLine" : 1
      },
      "106" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK : path to your NDK install\n\n#   NDK_CCACHE : path to your ccache executable\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   ARM64_V8A : TRUE for arm64-v8a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   X86_64 : TRUE if configured for x86_64\n\n#   MIPS : TRUE if configured for mips\n\n#   MIPS64 : TRUE if configured for mips64\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : from r5 to r10d; set only for NDK\n\n#   ANDROID_NDK_RELEASE_NUM : numeric ANDROID_NDK_RELEASE version (1000*major+minor)\n\n#   ANDROID_ARCH_NAME : \"arm\", \"x86\", \"mips\", \"arm64\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1680,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 107
    },
    "build/cmake/android.windows.toolchain.cmake" : {
      "ObjectId" : "df8299f5560b2f3ea72586026382b70ee57598d7",
      "LastModified" : "2017-09-11T10:55:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default values for configurable variables.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Export configurable variables for the try_compile() command.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Standard cross-compiling stuff.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ABI.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# STL.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sysroot.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Toolchain.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Clang can fail to compile if CMake doesn't correctly supply the target and\n\n# external toolchain, but to do so, CMake needs to already know that the\n\n# compiler is clang. Tell CMake that the compiler is really clang, but don't\n\n# use CMakeForceCompiler, since we still want compile checks. We only want\n\n# to skip the compiler ID detection step.\n",
        "Line" : 252,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Generic flags.\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Debug and release flags.\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Toolchain and ABI specific flags.\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Disable integrated-as for better compatibility.\n",
        "Line" : 338,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# STL specific flags.\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Configuration specific flags.\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CMake automatically forwards all compiler flags to the linker,\n\n# and clang doesn't like having -Wa flags being used for linking.\n\n# To prevent CMake from doing this would require meddling with\n\n# the CMAKE_<LANG>_COMPILE_OBJECT rules, which would get quite messy.\n",
        "Line" : 452,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Convert these lists into strings.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set or retrieve the cached flags.\n\n# This is necessary in case the user sets/changes flags in subsequent\n\n# configures. If we included the Android flags in here, they would get\n\n# overwritten.\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Compatibility for read-only variables.\n\n# Read-only variables for compatibility with the other toolchain file.\n\n# We'll keep these around for the existing projects that still use them.\n\n# TODO: All of the variables here have equivalents in our standard set of\n\n# configurable variables, so we can remove these once most of our users migrate\n\n# to those variables.\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "build/cmake/iOS.cmake" : {
      "ObjectId" : "d0a6c40732246205dc2890dd9e2aa1ec87f5958e",
      "LastModified" : "2017-09-11T10:55:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard settings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force the compilers to gcc for iOS\n\n#include (CMakeForceCompiler)\n\n#CMAKE_FORCE_C_COMPILER (/usr/bin/clang Apple)\n\n#CMAKE_FORCE_CXX_COMPILER (/usr/bin/clang++ Apple)\n\n#set(CMAKE_AR ar CACHE FILEPATH \"\" FORCE)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT\n\n# Note Xcode 4.3 changed the installation location, choose the most recent one available\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# set the architecture for iOS \n\n# NOTE: Currently both ARCHS_STANDARD_32_BIT and ARCHS_UNIVERSAL_IPHONE_OS set armv7 only, so set both manually\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n\n#set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)\n\n#set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n\n#set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# http://stackoverflow.com/questions/14171740/cmake-with-ios-toolchain-cant-find-threads\n\n# http://public.kitware.com/Bug/view.php?id=12288\n\n# Fix for try_compile\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# http://stackoverflow.com/questions/11198878/how-do-you-specify-a-universal-ios-application-when-building-through-cmake\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "build/cmake/ios.toolchain.cmake" : {
      "ObjectId" : "8ca8e716f5d4c293086e43a9d693b4eaae546309",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of the ios-cmake project. It was retrieved from\n\n# https://github.com/cristeab/ios-cmake.git, which is a fork of\n\n# https://code.google.com/p/ios-cmake/. Which in turn is based off of\n\n# the Platform/Darwin.cmake and Platform/UnixPaths.cmake files which\n\n# are included with CMake 2.8.4\n\n#\n\n# The ios-cmake project is licensed under the new BSD license.\n\n#\n\n# Copyright (c) 2014, Bogdan Cristea and LTE Engineering Software,\n\n# Kitware, Inc., Insight Software Consortium.  All rights reserved.\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This file is based off of the Platform/Darwin.cmake and\n\n# Platform/UnixPaths.cmake files which are included with CMake 2.8.4\n\n# It has been altered for iOS development.\n\n#\n\n# Updated by Alex Stewart (alexs.mac@gmail.com)\n\n#\n\n# *****************************************************************************\n\n#      Now maintained by Alexander Widerberg (widerbergaren [at] gmail.com)\n\n#                      under the BSD-3-Clause license\n\n#                   https://github.com/leetal/ios-cmake\n\n# *****************************************************************************\n\n#\n\n#                           INFORMATION / HELP\n\n#\n\n# The following variables control the behaviour of this toolchain:\n\n#\n\n# IOS_PLATFORM: OS (default) or SIMULATOR or SIMULATOR64 or TVOS or SIMULATOR_TVOS or WATCHOS or SIMULATOR_WATCHOS\n\n#    OS = Build for iPhoneOS.\n\n#    OS64 = Build for arm64 arm64e iPhoneOS.\n\n#    SIMULATOR = Build for x86 i386 iPhone Simulator.\n\n#    SIMULATOR64 = Build for x86_64 iPhone Simulator.\n\n#    TVOS = Build for AppleTVOS.\n\n#    SIMULATOR_TVOS = Build for x86_64 AppleTV Simulator.\n\n#    WATCHOS = Build for armv7k arm64_32 for WatchOS.\n\n#    SIMULATOR_WATCHOS = Build for x86_64 for Watch Simulator.\n\n# CMAKE_OSX_SYSROOT: Path to the iOS SDK to use.  By default this is\n\n#    automatically determined from IOS_PLATFORM and xcodebuild, but\n\n#    can also be manually specified (although this should not be required).\n\n# CMAKE_IOS_DEVELOPER_ROOT: Path to the Developer directory for the iOS platform\n\n#    being compiled for.  By default this is automatically determined from\n\n#    CMAKE_OSX_SYSROOT, but can also be manually specified (although this should\n\n#    not be required).\n\n# ENABLE_BITCODE: (1|0) Enables or disables bitcode support. Default 1 (true)\n\n# ENABLE_ARC: (1|0) Enables or disables ARC support. Default 1 (true, ARC enabled by default)\n\n# ENABLE_VISIBILITY: (1|0) Enables or disables symbol visibility support. Default 0 (false, visibility hidden by default)\n\n# IOS_ARCH: (armv7 armv7s armv7k arm64 arm64e arm64_32 i386 x86_64) If specified, will override the default architectures for the given IOS_PLATFORM\n\n#    OS = armv7 armv7s arm64 arm64e (if applicable)\n\n#    OS64 = arm64 arm64e (if applicable)\n\n#    SIMULATOR = i386\n\n#    SIMULATOR64 = x86_64\n\n#    TVOS = arm64\n\n#    SIMULATOR_TVOS = x86_64 (i386 has since long been deprecated)\n\n#    WATCHOS = armv7k arm64_32 (if applicable)\n\n#    SIMULATOR_WATCHOS = x86_64 (i386 has since long been deprecated)\n\n#\n\n# This toolchain defines the following variables for use externally:\n\n#\n\n# XCODE_VERSION: Version number (not including Build version) of Xcode detected.\n\n# IOS_SDK_VERSION: Version of iOS SDK being used.\n\n# CMAKE_OSX_ARCHITECTURES: Architectures being compiled for (generated from\n\n#    IOS_PLATFORM).\n\n#\n\n# This toolchain defines the following macros for use externally:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE XCODE_VARIANT)\n\n#   A convenience macro for setting xcode specific properties on targets.\n\n#   Available variants are: All, Release, RelWithDebInfo, Debug, MinSizeRel\n\n#   example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\" \"all\").\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#   A macro used to find executable programs on the host system, not within the\n\n#   iOS environment.  Thanks to the android-cmake project for providing the\n\n#   command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix for PThread library not in path\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cache what generator is used\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get the Xcode version being used.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default to building for iPhoneOS if not specified otherwise, and we cannot\n\n# determine the platform from the CMAKE_OSX_ARCHITECTURES variable. The use\n\n# of CMAKE_OSX_ARCHITECTURES is such that try_compile() projects can correctly\n\n# determine the value of IOS_PLATFORM from the root project, as\n\n# CMAKE_OSX_ARCHITECTURES is propagated to them by CMake.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the platform name and architectures for use in xcodebuild commands\n\n# from the specified IOS_PLATFORM name.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Specify minimum version of deployment target.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Unless specified, SDK version 2.0 is used by default as minimum target version (watchOS).\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Unless specified, SDK version 8.0 is used by default as minimum target version (iOS, tvOS).\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Use bitcode or not\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Unless specified, enable bitcode support by default\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Use ARC or not\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Unless specified, enable ARC support by default\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Use hidden visibility or not\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unless specified, disable symbols visibility by default\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Get the SDK version information.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Find the Developer root for the specific iOS platform being compiled for\n\n# from CMAKE_OSX_SYSROOT.  Should be ../../ from SDK specified in\n\n# CMAKE_OSX_SYSROOT.  There does not appear to be a direct way to obtain\n\n# this information from xcrun or xcodebuild.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Find the C & C++ compilers for the specified SDK.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Find (Apple's) libtool.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Configure libtool to be used instead of ar + ranlib to build static libraries.\n\n# This is required on Xcode 7+, but should also work on previous versions of\n\n# Xcode.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Get the version of Darwin (OS X) of the host.\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Standard settings.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Force unset of OS X-specific deployment target (otherwise autopopulated),\n\n# required as of cmake 2.8.10.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Set the architectures for which to build.\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Change the type of target generated for try_compile() so it'll work when cross-compiling\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant.\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Note that only Xcode 7+ supports the newer more specific:\n\n# -m${XCODE_IOS_PLATFORM}-version-min flags, older versions of Xcode use:\n\n# -m(ios/ios-simulator)-version-min instead.\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Xcode 7.0+ uses flags we can build directly from XCODE_IOS_PLATFORM.\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# SIMULATOR or SIMULATOR64 both use -mios-simulator-version-min.\n",
        "Line" : 379,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Hidden visibilty is required for C++ on iOS.\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# In order to ensure that the updated compiler flags are used in try_compile()\n\n# tests, we have to forcibly set them in the CMake cache, not merely set them\n\n# in the local scope.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old\n\n# build tree (where install_name_tool was hardcoded) and where\n\n# CMAKE_INSTALL_NAME_TOOL isn't in the cache and still cmake didn't fail in\n\n# CMakeFindBinUtils.cmake (because it isn't rerun) hardcode\n\n# CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did\n\n# before, Alex.\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths.\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Default to searching for frameworks first.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Set up the default search directories for frameworks.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Only search the specified iOS SDK, not the remainder of the host filesystem.\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# This little macro lets you set any XCode specific property.\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# This macro lets you find executable programs on the host system.\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "build/lua-5.1.5/Makefile" : {
      "ObjectId" : "209a1324418c25c7b0abc766fe6bd338df5b203f",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for installing Lua\n\n# see INSTALL for installation instructions\n\n# see src/Makefile and src/luaconf.h for further customization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# You probably want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h (and also with etc/lua.pc).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then you\n\n# may have to run ranlib on the installed liblua.a (do \"make ranlib\").\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# If you don't have install you can use cp instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Utilities.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# What to install.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and INSTALL in a case-insensitive OS\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo private config parameters\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# echo config parameters as Lua code\n\n# uncomment the last sed expression if you want nil instead of empty strings\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-e 's/\"\"/nil/'\n",
        "Line" : 122,
        "CharPositionInLine" : 58
      },
      "17" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "build/lua-5.1.5/etc/Makefile" : {
      "ObjectId" : "6d00008d98157eb4c3c83db0e74682f756c8104d",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for Lua etc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MYLIBS= -lm -Wl,-E -ldl -lreadline -lhistory -lncurses\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "build/lua-5.1.5/src/Makefile" : {
      "ObjectId" : "e0d4c9fa649c74f961ff77d29f980c662b749eeb",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for building Lua\n\n# see ../INSTALL for installation instructions\n\n# see ../Makefile and luaconf.h for further customization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DLL needs all object files\n",
        "Line" : 51,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# convenience targets for popular platforms\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use this on Mac OS X 10.3-\n\n#\t$(MAKE) all MYCFLAGS=-DLUA_USE_MACOSX\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "build/lua-5.3.3/CMakeLists.txt" : {
      "ObjectId" : "385363a860849b767b28df6f0db4cd7c8f1792e8",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2015 LuaDist.\n\n# Created by Peter Drahoš, Peter Kapec\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## CONFIGURATION\n\n# Default configuration (we assume POSIX by default)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#2DO: LUAI_* and LUAL_* settings, for now defaults are used.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This will set up relative paths to lib\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Direct path to installation\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Windows systems\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Paths (Double escapes needed)\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Posix systems (incl. Cygwin)\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Apple and Linux specific\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "## SETUP\n\n# Optional libraries\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setup needed variables and libraries\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# On POSIX Lua links to standard math library \"m\"\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Link to dynamic linker library \"dl\"\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Add readline\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "## SOURCES\n\n# Generate luaconf.h\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Sources and headers\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Use modified loadlib\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "## BUILD\n\n# Create lua library\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Create static library, this is needed to compile luac in the 5.1.x Lua series\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# On windows a variant of the lua interpreter without console output needs to be built\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#install_lua_module ( strict etc/strict.lua )\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#install_test ( test/ )\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "build/lua-5.3.3/Makefile" : {
      "ObjectId" : "c795dd7930ad3359c8f2813063de779b134d1fcf",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "build/lua-5.3.3/cmake/FindLua.cmake" : {
      "ObjectId" : "7fb7ca3f4f9de67e22efade7d6827f3ecdef6a51",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua \n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "build/lua-5.3.3/cmake/FindReadline.cmake" : {
      "ObjectId" : "5401a9b4273fa11de9abcf5c94b3e78f2a73c303",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Readline\n\n# Once done this will define\n\n#  READLINE_FOUND - System has readline\n\n#  READLINE_INCLUDE_DIRS - The readline include directories\n\n#  READLINE_LIBRARIES - The libraries needed to use readline\n\n#  READLINE_DEFINITIONS - Compiler switches required for using readline\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "build/lua-5.3.3/cmake/dist.cmake" : {
      "ObjectId" : "310ef94cc9ddf4880e577520fe6258cd3e2e4236",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library.\n\n# Provides sane project defaults and macros common to LuaDist CMake builds.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Extract information from dist.info\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reads field `name` from dist.info string `DIST_INFO` into variable `var`.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## 2DO: Parse DIST_DEPENDS and try to install Dependencies with automatically using externalproject_add\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)\n\n# Primary paths\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Secondary paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tweaks and other defaults\n\n# Setting CMAKE to use loose block and search for find modules in source directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In MSVC, prevent warnings that can occur when using standard libraries.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPath and relative linking\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## MACROS\n\n# Parser macro\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# install_executable ( executable_targets )\n\n# Installs any executables generated using \"add_executable\".\n\n# USE: install_executable ( lua )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# install_library ( library_targets )\n\n# Installs any libraries generated using \"add_library\" into apropriate places.\n\n# USE: install_library ( libexpat )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# helper function for various install_* functions, for PATTERN/REGEX args.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# install_header ( files/directories [INTO destination] )\n\n# Install a directories or files into header destination.\n\n# USE: install_header ( lua.h luaconf.h ) or install_header ( GL )\n\n# USE: install_header ( mylib.h INTO mylib )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# install_data ( files/directories [INTO destination] )\n\n# This installs additional data files or directories.\n\n# USE: install_data ( extra data.dat )\n\n# USE: install_data ( image1.png image2.png INTO images )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# INSTALL_DOC ( files/directories [INTO destination] )\n\n# This installs documentation content\n\n# USE: install_doc ( doc/ doc.pdf )\n\n# USE: install_doc ( index.html INTO html )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install_example ( files/directories [INTO destination]  )\n\n# This installs additional examples\n\n# USE: install_example ( examples/ exampleA )\n\n# USE: install_example ( super_example super_data INTO super)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# install_test ( files/directories [INTO destination] )\n\n# This installs tests and test files, DOES NOT EXECUTE TESTS\n\n# USE: install_test ( my_test data.sql )\n\n# USE: install_test ( feature_x_test INTO x )\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# install_foo ( files/directories [INTO destination] )\n\n# This installs optional or otherwise unneeded content\n\n# USE: install_foo ( etc/ example.doc )\n\n# USE: install_foo ( icon.png logo.png INTO icons)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## CTest defaults\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## CPack defaults\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "build/lua-5.3.3/cmake/lua.cmake" : {
      "ObjectId" : "a0f3e67d1f90d70496efbd5b13843a4896176d58",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library for Lua.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahos\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of (Lua module name, file path) pairs.\n\n# Used internally by add_lua_test.  Built by add_lua_module.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# utility function: appends path `path` to path `basepath`, properly\n\n# handling cases when `path` may be relative or absolute.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install_lua_executable ( target source )\n\n# Automatically generate a binary wrapper for lua application and install it\n\n# The wrapper and the source of the application will be placed into /bin\n\n# If the application source did not have .lua suffix then it will be added\n\n# USE: lua_executable ( sputnik src/sputnik.lua )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# _target is CMake-compatible target name for module (e.g. socket_core).\n\n# _module is relative path of target (e.g. socket/core),\n\n#   without extension (e.g. .lua/.so/.dll).\n\n# _MODULE_SRC is list of module source files (e.g. .lua and .c files).\n\n# _MODULE_NAMES is list of module names (e.g. socket.core).\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Lua source module\n",
        "Line" : 194,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : "# Lua C binary module\n",
        "Line" : 211,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "# add_lua_module\n\n# Builds a Lua source module into a destination locatable by Lua\n\n# require syntax.\n\n# Binary modules are also supported where this function takes sources and\n\n# libraries to compile separated by LINK keyword.\n\n# USE: add_lua_module ( socket.http src/http.lua )\n\n# USE2: add_lua_module ( mime.core src/mime.c )\n\n# USE3: add_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n\n# USE4: add_lua_module ( ssl.context ssl.core ALL_IN_ONE src/context.c src/ssl.c )\n\n#   This form builds an \"all-in-one\" module (e.g. ssl.so or ssl.dll containing\n\n#   both modules ssl.context and ssl.core).  The CMake target name will be\n\n#   ssl_all_in_one.\n\n# Also sets variable _module_path (relative path where module typically\n\n# would be installed).\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install_lua_module\n\n# This is the same as `add_lua_module` but also installs the module.\n\n# USE: install_lua_module ( socket.http src/http.lua )\n\n# USE2: install_lua_module ( mime.core src/mime.c )\n\n# USE3: install_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds string representing Lua table mapping Lua modules names to file\n\n# paths.  Used internally.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# avoids cmake complaint\n",
        "Line" : 268,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "# add_lua_test ( _testfile [ WORKING_DIRECTORY _working_dir ] )\n\n# Runs Lua script `_testfile` under CTest tester.\n\n# Optional named argument `WORKING_DIRECTORY` is current working directory to\n\n# run test under (defaults to ${CMAKE_CURRENT_BINARY_DIR}).\n\n# Both paths, if relative, are relative to ${CMAKE_CURRENT_SOURCE_DIR}.\n\n# Any modules previously defined with install_lua_module are automatically\n\n# preloaded (via package.preload) prior to running the test script.\n\n# Under LuaDist, set test=true in config.lua to enable testing.\n\n# USE: add_lua_test ( test/test1.lua [args...] [WORKING_DIRECTORY dir])\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Write wrapper script.\n\n# Note: One simple way to allow the script to find modules is\n\n# to just put them in package.preload.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# note: CMake 2.6 (unlike 2.8) lacks WORKING_DIRECTORY parameter.\n",
        "Line" : 328,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# see also http://gdcm.svn.sourceforge.net/viewvc/gdcm/Sandbox/CMakeModules/UsePythonTest.cmake\n\n# Note: ${CMAKE_CFG_INTDIR} is a command-line argument to allow proper\n\n# expansion by the native build tool.\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Converts Lua source file `_source` to binary string embedded in C source\n\n# file `_target`.  Optionally compiles Lua source to byte code (not available\n\n# under LuaJIT2, which doesn't have a bytecode loader).  Additionally, Lua\n\n# versions of bin2c [1] and luac [2] may be passed respectively as additional\n\n# arguments.\n\n#\n\n# [1] http://lua-users.org/wiki/BinToCee\n\n# [2] http://lua-users.org/wiki/LuaCompilerInLua\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "build/lua-5.3.3/src/Makefile" : {
      "ObjectId" : "d71c75c8732257fefa4c3ff279589f05d6f74d2a",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "build/lua-5.3.4/Makefile" : {
      "ObjectId" : "119110d2f01054adddec43ea75dba1a744e7e5f8",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "build/lua-5.3.4/src/Makefile" : {
      "ObjectId" : "d71c75c8732257fefa4c3ff279589f05d6f74d2a",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "build/lua-5.3.5/Makefile" : {
      "ObjectId" : "119110d2f01054adddec43ea75dba1a744e7e5f8",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "build/lua-5.3.5/src/Makefile" : {
      "ObjectId" : "64c78f775ba0eddb6e3a98c74bfebb2252f382ac",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "build/luac/CMakeLists.txt" : {
      "ObjectId" : "f523560e00cca1df8722fdec9b45e25ece90e403",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tencent is pleased to support the open source community by making xLua available.\r\n\n# Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\r\n\n# Licensed under the MIT License (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\r\n\n# http://opensource.org/licenses/MIT\r\n\n# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/luajit-2.1.0b2/Makefile" : {
      "ObjectId" : "f6446ba4d3f7473885617b444cd6c18a7690d7a8",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT top level Makefile for installation. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Note: src/Makefile has many more configurable options.\n\n#\n\n# ##### This Makefile is NOT useful for Windows! #####\n\n# For MSVC, please follow the instructions given in src/msvcbuild.bat.\n\n# For MinGW and Cygwin, cd to src and run make with the Makefile there.\n\n#\n\n# Copyright (C) 2005-2016 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#\n\n# Change the installation path as needed. This automatically adjusts\n\n# the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "build/luajit-2.1.0b2/src/Makefile" : {
      "ObjectId" : "a601d609e51a000de5c2be1819da86d9daaae2f1",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2016 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= $(DEFAULT_CC) -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to generate debug information:\n\n#CCDEBUG= -g\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Static mode creates a static library and a statically linked luajit.\n\n#BUILDMODE= static\n\n#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT\n\n#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n##############################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. This option cannot be enabled on x64, since realloc usually\n\n# doesn't return addresses in the right address range.\n\n# OTOH this option is mandatory for Valgrind's memcheck tool on x64 and\n\n# the only way to get useful results from it for all other architectures.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##############################################################################\n\n# Host system detection.\n\n##############################################################################\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Use Clang for OSX host.\n\n# XXX:remove this when build Android on OSX (mark by u0u0)\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##############################################################################\n\n# Target system detection.\n\n##############################################################################\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 532,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#Q=\n\n#E= @:\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25,
      "Errorlog" : "line 556:19 token recognition error at: '\\m'\nline 557:19 token recognition error at: '\\b'\nline 614:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 615:29 token recognition error at: '\\1'\nline 616:24 token recognition error at: '\\S'\nline 617:22 token recognition error at: '\\S'\nline 618:21 token recognition error at: '\\S'\nline 713:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    },
    "build/luajit-2.1.0b3/Makefile" : {
      "ObjectId" : "0f9330893fdea4de73d0da82c49aa336f4e556d5",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT top level Makefile for installation. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Note: src/Makefile has many more configurable options.\n\n#\n\n# ##### This Makefile is NOT useful for Windows! #####\n\n# For MSVC, please follow the instructions given in src/msvcbuild.bat.\n\n# For MinGW and Cygwin, cd to src and run make with the Makefile there.\n\n#\n\n# Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#\n\n# Change the installation path as needed. This automatically adjusts\n\n# the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "build/luajit-2.1.0b3/src/Makefile" : {
      "ObjectId" : "f56465d1384300978c0917234ed20df6eb38845b",
      "LastModified" : "2019-03-26T05:41:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= $(DEFAULT_CC) -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to generate debug information:\n\n#CCDEBUG= -g\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Static mode creates a static library and a statically linked luajit.\n\n#BUILDMODE= static\n\n#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT\n\n#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n# Enable GC64 mode for x64.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_GC64\n\n#\n\n##############################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. This option cannot be enabled on x64 without GC64, since\n\n# realloc usually doesn't return addresses in the right address range.\n\n# OTOH this option is mandatory for Valgrind's memcheck tool on x64 and\n\n# the only way to get useful results from it for all other architectures.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##############################################################################\n\n# Host system detection.\n\n##############################################################################\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##############################################################################\n\n# Target system detection.\n\n##############################################################################\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 533,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#Q=\n\n#E= @:\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24,
      "Errorlog" : "line 557:19 token recognition error at: '\\m'\nline 558:19 token recognition error at: '\\b'\nline 615:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 616:29 token recognition error at: '\\1'\nline 617:24 token recognition error at: '\\S'\nline 618:22 token recognition error at: '\\S'\nline 619:21 token recognition error at: '\\S'\nline 714:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "MAKEFILE" : 13
  },
  "ElapsedTime" : 3664
}