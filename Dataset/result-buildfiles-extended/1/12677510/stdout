{
  "Repository" : "12677510",
  "Revision" : "HEAD",
  "ObjectId" : "d97d5e63b19d7f283482ecea884dbd922e203b3e",
  "CommitTime" : "2019-04-11T11:27:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e9225831c8409ac1ea446838bb0cf05a5ea1b7d9",
      "LastModified" : "2019-03-23T15:12:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use ccache if available, has to be before \"project()\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support both Unix Makefiles and Ninja\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 3.1 added this policy\n",
        "Line" : 13,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# git sha\n",
        "Line" : 45,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Turning ENABLE_GTEST_DEBUG_MODE ON will cause assertions and exceptions to halt the test case and unwind.\n\n# Turn this option OFF for automated testing.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# we are making python a required dependency, so find it here...starting off by requiring at least 2.7\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# No Problem\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# so that any source can #include <ConfiguredFunctions.hh>\n",
        "Line" : 155,
        "CharPositionInLine" : 58
      },
      "10" : {
        "Text" : "#### Create interface for JSON for Modern C++ so we can include it in targets\n\n# add_library( ModernJSON INTERFACE )\n\n# target_include_directories( ModernJSON INTERFACE \"${CMAKE_SOURCE_DIR}/third_party/nlohmann\" \"${CMAKE_SOURCE_DIR}/third_party/doj\" )\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# E+ required libraries\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Kiva\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# EPLaunch workflow files should be configured\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# of course E+ itself\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# this _should_ find the xelatex compiler, but for some reason it isn't populating for me\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# so we'll create a cache variable which will be available to the add_subdirectory call below\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# and we'll simply take the found pdflatex compiler path and replace pdflatex with xelatex\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# and then verify it actually exists at that location...which it should pretty much every time...\n",
        "Line" : 275,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# and if it does, just add the doc/CMakeLists commands\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# and if it doesn't, clearly state why it fails\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# some parameters are simply not needed for everyday building\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/BuildDocumentation.cmake" : {
      "ObjectId" : "81d3f05a587281aa3977b637b84a2a6b7fdea1c2",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Caller needs to set:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# XELATEX, the path to the xelatex compiler\n\n# INNAME, the name of the input tex file\n\n# OUTNAME, the pretty output name for the pdf\n\n# ORIGINAL_CMAKE_SOURCE_DIR, the root of the source repo\n\n# ORIGINAL_CMAKE_BINARY_DIR, the root fo the build tree\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# this will get more complicated as we add things like bibtex and makeindex, for now just execute xelatex twice and rename the output\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeAddFortranSubdirectory.cmake" : {
      "ObjectId" : "e486b48a836ee765ab58ffb3774d751bc1ee4864",
      "LastModified" : "2014-09-30T18:18:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Use MinGW gfortran from VS if a fortran compiler is not found.\n\n# The 'add_fortran_subdirectory' function adds a subdirectory\n\n# to a project that contains a fortran only sub-project. The module\n\n# will check the current compiler and see if it can support fortran.\n\n# If no fortran compiler is found and the compiler is MSVC, then\n\n# this module will find the MinGW gfortran.  It will then use\n\n# an external project to build with the MinGW tools.  It will also\n\n# create imported targets for the libraries created.  This will only\n\n# work if the fortran code is built into a dll, so BUILD_SHARED_LIBS\n\n# is turned on in the project.  In addition the CMAKE_GNUtoMS option\n\n# is set to on, so that the MS .lib files are created.\n\n# Usage is as follows:\n\n#  cmake_add_fortran_subdirectory(\n\n#   <subdir>                # name of subdirectory\n\n#   PROJECT <project_name>  # project name in subdir top CMakeLists.txt\n\n#   ARCHIVE_DIR <dir>       # dir where project places .lib files\n\n#   RUNTIME_DIR <dir>       # dir where project places .dll files\n\n#   LIBRARIES <lib>...      # names of library targets to import\n\n#   LINK_LIBRARIES          # link interface libraries for LIBRARIES\n\n#    [LINK_LIBS <lib> <dep>...]...\n\n#   CMAKE_COMMAND_LINE ...  # extra command line flags to pass to cmake\n\n#   NO_EXTERNAL_INSTALL     # skip installation of external project\n\n#   )\n\n# Relative paths in ARCHIVE_DIR and RUNTIME_DIR are interpreted with respect\n\n# to the build directory corresponding to the source directory in which the\n\n# function is invoked.\n\n#\n\n# Limitations:\n\n#\n\n# NO_EXTERNAL_INSTALL is required for forward compatibility with a\n\n# future version that supports installation of the external project\n\n# binaries during \"make install\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011-2012 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for a MinGW gfortran.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Validate the MinGW gfortran we found.\n\n#if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#  set(_mingw_target \"Target:.*64.*mingw\")\n\n#else()\n\n#  set(_mingw_target \"Target:.*mingw32\")\n\n#endif()\n\n#execute_process(COMMAND \"${MINGW_GFORTRAN}\" -v\n\n#  ERROR_VARIABLE out ERROR_STRIP_TRAILING_WHITESPACE)\n\n#if(NOT \"${out}\" MATCHES \"${_mingw_target}\")\n\n#  string(REPLACE \"\\n\" \"\\n  \" out \"  ${out}\")\n\n#  message(FATAL_ERROR\n\n#    \"MINGW_GFORTRAN is set to\\n\"\n\n#    \"  ${MINGW_GFORTRAN}\\n\"\n\n#    \"which is not a MinGW gfortran for this architecture.  \"\n\n#    \"The output from -v does not match \\\"${_mingw_target}\\\":\\n\"\n\n#    \"${out}\\n\"\n\n#    \"Set MINGW_GFORTRAN to a proper MinGW gfortran for this architecture.\"\n\n#    )\n\n#endif()\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Configure scripts to run MinGW tools with the proper PATH.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Parse arguments to function\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# if we are not using MSVC without fortran support\n\n# then just use the usual add_subdirectory to build\n\n# the fortran library\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# if we have MSVC without Intel fortran then setup\n\n# external projects to build with mingw fortran\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# use the same directory that add_subdirectory would have used\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# create build and configure wrapper scripts\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# create the external project\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# make the external project always run make with each build\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# create imported targets for all libraries\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# now setup link libraries for targets\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# process current target and target_libs\n",
        "Line" : 187,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# zero out target and target_libs\n",
        "Line" : 189,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# save the current target and set start to FALSE\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# append the lib to target_libs\n",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# process anything that is left in target and target_libs\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cmake/CompilerFlags.cmake" : {
      "ObjectId" : "bef7ed283a5b65a942847dd187bdab34fabc7e86",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler-agnostic compiler flags first\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Align ObjexxFCL arrays to 64B\n",
        "Line" : 3,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : "# Initialize ObjexxFCL arrays to aid debugging\n",
        "Line" : 4,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : "# Make sure expat is compiled as a static library\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Visual C++ (VS 2013)\n",
        "Line" : 9,
        "CharPositionInLine" : 68
      },
      "5" : {
        "Text" : "# Disabled Warnings: Enable some of these as more serious warnings are addressed\n\n#  4068 Unknown pragma\n\n#  4101 Unreferenced local variable\n\n#  4102 Unreferenced label\n\n#  4244 Narrowing conversions\n\n#  4258 Definition from the loop is ignored\n\n#  4355 Passing this pointer in class initializer (object is incomplete so bases/members can only use this in limited ways)\n\n#  4996 Deprecated functions (/D_SCL_SECURE_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS)\n\n#  4503 The decorated name was longer than the compiler limit (4096), and was truncated.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# COMPILER FLAGS\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Enables multi-processor compilation of source within a single project\n",
        "Line" : 24,
        "CharPositionInLine" : 31
      },
      "8" : {
        "Text" : "# Increase to /W2 then /W3 as more serious warnings are addressed (using regex to avoid VC override warnings)\n",
        "Line" : 25,
        "CharPositionInLine" : 76
      },
      "9" : {
        "Text" : "# Disables warning messages listed above\n",
        "Line" : 27,
        "CharPositionInLine" : 91
      },
      "10" : {
        "Text" : "# Avoid build errors due to STL/Windows min-max conflicts\n",
        "Line" : 28,
        "CharPositionInLine" : 38
      },
      "11" : {
        "Text" : "# Excludes rarely used services and headers from compilation\n",
        "Line" : 29,
        "CharPositionInLine" : 49
      },
      "12" : {
        "Text" : "#    ADD_CXX_DEFINITIONS(\"-d2SSAOptimizer-\") # this disables this optimizer which has known major issues\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# ADDITIONAL RELEASE-MODE-SPECIFIC FLAGS\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Disable buffer overrun checks for performance in release mode\n",
        "Line" : 33,
        "CharPositionInLine" : 40
      },
      "15" : {
        "Text" : "# ADDITIONAL DEBUG-MODE-SPECIFIC FLAGS\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Disable inlining\n",
        "Line" : 36,
        "CharPositionInLine" : 38
      },
      "17" : {
        "Text" : "# Runtime checks\n",
        "Line" : 37,
        "CharPositionInLine" : 40
      },
      "18" : {
        "Text" : "# Floating point model\n",
        "Line" : 38,
        "CharPositionInLine" : 44
      },
      "19" : {
        "Text" : "# Triggers code in main.cc to catch floating point NaNs\n",
        "Line" : 39,
        "CharPositionInLine" : 46
      },
      "20" : {
        "Text" : "# g++/Clang\n",
        "Line" : 41,
        "CharPositionInLine" : 83
      },
      "21" : {
        "Text" : "# COMPILER FLAGS\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Faster compiler processing\n",
        "Line" : 91,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# Enable C++11 features in g++\n",
        "Line" : 92,
        "CharPositionInLine" : 38
      },
      "24" : {
        "Text" : "# Turn on warnings about constructs/situations that may be non-portable or outside of the standard\n",
        "Line" : 93,
        "CharPositionInLine" : 37
      },
      "25" : {
        "Text" : "# Turn on warnings\n",
        "Line" : 95,
        "CharPositionInLine" : 41
      },
      "26" : {
        "Text" : "# Don't warn on attributes Clang doesn't know\n",
        "Line" : 97,
        "CharPositionInLine" : 43
      },
      "27" : {
        "Text" : "# g++\n",
        "Line" : 100,
        "CharPositionInLine" : 36
      },
      "28" : {
        "Text" : "# Suppress unused-but-set warnings until more serious ones are addressed\n",
        "Line" : 101,
        "CharPositionInLine" : 88
      },
      "29" : {
        "Text" : "# ADDITIONAL GCC-SPECIFIC FLAGS\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# g++\n",
        "Line" : 110,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# Improve debug run solution stability\n",
        "Line" : 111,
        "CharPositionInLine" : 49
      },
      "32" : {
        "Text" : "# Disable optimizations that may have concealed NaN behavior\n\n# Standard container debug mode (bounds checking, ...)\n",
        "Line" : 112,
        "CharPositionInLine" : 52
      },
      "33" : {
        "Text" : "# ADD_CXX_RELEASE_DEFINITIONS(\"-finline-limit=2000\") # More aggressive inlining   This is causing unit test failures on Ubuntu 14.04\n",
        "Line" : 114,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Produces debugging information specifically for gdb\n",
        "Line" : 117,
        "CharPositionInLine" : 37
      },
      "35" : {
        "Text" : "# ADD_CXX_RELEASE_DEFINITIONS(\"-Ofast\") # -Ofast (or -ffast-math) needed to auto-vectorize floating point loops\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Disabled Warnings: Enable some of these as more serious warnings are addressed\n\n#   161 Unrecognized pragma\n\n#   177 Variable declared but never referenced\n\n#   488 Template parameter not used ...\n\n#   809 Exception specification consistency warnings that fire in gtest code\n\n#   869 Parameter never referenced\n\n#  1786 Use of deprecated items\n\n#  2259 Non-pointer conversions may lose significant bits\n\n#  3280 Declaration hides variable\n\n# 10382 xHOST remark\n\n# 11074 Inlining inhibited\n\n# 11075 Inlining inhibited\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# COMPILER FLAGS\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Skip banner text\n",
        "Line" : 137,
        "CharPositionInLine" : 35
      },
      "39" : {
        "Text" : "# Specify C++11 language\n",
        "Line" : 138,
        "CharPositionInLine" : 39
      },
      "40" : {
        "Text" : "# Enables standard C++ features without disabling Microsoft extensions\n",
        "Line" : 139,
        "CharPositionInLine" : 42
      },
      "41" : {
        "Text" : "# Enable \"all\" warnings\n",
        "Line" : 140,
        "CharPositionInLine" : 33
      },
      "42" : {
        "Text" : "# Disable warnings listed above\n",
        "Line" : 141,
        "CharPositionInLine" : 95
      },
      "43" : {
        "Text" : "# Avoid build errors due to STL/Windows min-max conflicts\n",
        "Line" : 142,
        "CharPositionInLine" : 38
      },
      "44" : {
        "Text" : "# Excludes rarely used services and headers from compilation\n",
        "Line" : 143,
        "CharPositionInLine" : 49
      },
      "45" : {
        "Text" : "# Optimization options that had no significant benefit for EnergyPlus\n\n#  /Qipo instead of /Qip\n\n#  /Qopt-prefetch\n\n#  /Qparallel\n\n#  /Qunroll-aggressive\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# ADDITIONAL RELEASE-MODE-SPECIFIC FLAGS\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Agressive optimization\n",
        "Line" : 152,
        "CharPositionInLine" : 39
      },
      "48" : {
        "Text" : "# Faster division\n",
        "Line" : 153,
        "CharPositionInLine" : 47
      },
      "49" : {
        "Text" : "# Better optimization via strict aliasing rules\n",
        "Line" : 154,
        "CharPositionInLine" : 48
      },
      "50" : {
        "Text" : "# Inter-procedural optimnization within a single file\n",
        "Line" : 155,
        "CharPositionInLine" : 40
      },
      "51" : {
        "Text" : "# Aggressive inlining\n",
        "Line" : 156,
        "CharPositionInLine" : 55
      },
      "52" : {
        "Text" : "# ADD_CXX_RELEASE_DEFINITIONS(\"/fp:fast=2\") # Aggressive optimizations on floating-point data\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# ADDITIONAL DEBUG-MODE-SPECIFIC FLAGS\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Use source-specified floating point precision\n",
        "Line" : 160,
        "CharPositionInLine" : 44
      },
      "55" : {
        "Text" : "# Initialize local variables to unusual values to help detect use uninitialized\n",
        "Line" : 161,
        "CharPositionInLine" : 42
      },
      "56" : {
        "Text" : "# Enables runtime checking of the stack (buffer over and underruns; pointer verification) and uninitialized variables\n",
        "Line" : 162,
        "CharPositionInLine" : 53
      },
      "57" : {
        "Text" : "# Enable stack checking for all functions\n",
        "Line" : 163,
        "CharPositionInLine" : 38
      },
      "58" : {
        "Text" : "# Buffer overrun detection\n",
        "Line" : 164,
        "CharPositionInLine" : 37
      },
      "59" : {
        "Text" : "# Tells the compiler to generate extra code after every function call to ensure fp stack is as expected\n",
        "Line" : 165,
        "CharPositionInLine" : 50
      },
      "60" : {
        "Text" : "# Enables traceback on error\n",
        "Line" : 166,
        "CharPositionInLine" : 44
      },
      "61" : {
        "Text" : "# Disabled Warnings: Enable some of these as more serious warnings are addressed\n\n#   161 Unrecognized pragma\n\n#   177 Variable declared but never referenced\n\n#   488 Template parameter not used ...\n\n#   809 Exception specification consistency warnings that fire in gtest code\n\n#   869 Parameter never referenced\n\n#  1786 Use of deprecated items\n\n#  2259 Non-pointer conversions may lose significant bits\n\n#  3280 Declaration hides variable\n\n# 10382 xHOST remark\n\n# 11074 Inlining inhibited\n\n# 11075 Inlining inhibited\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# COMPILER FLAGS\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Specify C++11 language\n",
        "Line" : 184,
        "CharPositionInLine" : 38
      },
      "64" : {
        "Text" : "# Enable \"all\" warnings\n",
        "Line" : 185,
        "CharPositionInLine" : 33
      },
      "65" : {
        "Text" : "# Disable warnings listed above\n",
        "Line" : 186,
        "CharPositionInLine" : 94
      },
      "66" : {
        "Text" : "# Optimization options that had no significant benefit for EnergyPlus\n\n#  -ipo instead of -ip\n\n#  -opt-prefetch\n\n#  -parallel\n\n#  -unroll-aggressive\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# ADDITIONAL RELEASE-MODE-SPECIFIC FLAGS\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Agressive optimization\n",
        "Line" : 199,
        "CharPositionInLine" : 39
      },
      "69" : {
        "Text" : "# ADD_CXX_RELEASE_DEFINITIONS(\"-Ofast\") # More aggressive optimizations (instead of -O3) (enables -no-prec-div and -fp-model fast=2)\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Faster division (enabled by -Ofast)\n",
        "Line" : 201,
        "CharPositionInLine" : 48
      },
      "71" : {
        "Text" : "# Enables more aggressive optimizations on floating-point data\n",
        "Line" : 202,
        "CharPositionInLine" : 47
      },
      "72" : {
        "Text" : "# Enables inter-procedural optimnization within a single file\n",
        "Line" : 203,
        "CharPositionInLine" : 39
      },
      "73" : {
        "Text" : "# Enables more aggressive inlining\n",
        "Line" : 204,
        "CharPositionInLine" : 54
      },
      "74" : {
        "Text" : "# ADDITIONAL DEBUG-MODE-SPECIFIC FLAGS\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# Strict language conformance: Performance impact so limit to debug build\n",
        "Line" : 207,
        "CharPositionInLine" : 46
      },
      "76" : {
        "Text" : "# Use source-specified floating point precision\n",
        "Line" : 208,
        "CharPositionInLine" : 50
      },
      "77" : {
        "Text" : "# Initialize local variables to unusual values to help detect use uninitialized\n",
        "Line" : 209,
        "CharPositionInLine" : 42
      },
      "78" : {
        "Text" : "# Enables runtime checking of the stack (buffer over and underruns; pointer verification) and uninitialized variables\n",
        "Line" : 210,
        "CharPositionInLine" : 53
      },
      "79" : {
        "Text" : "# Buffer overrun detection\n",
        "Line" : 211,
        "CharPositionInLine" : 56
      },
      "80" : {
        "Text" : "# Check the floating point stack after every function call\n",
        "Line" : 212,
        "CharPositionInLine" : 49
      },
      "81" : {
        "Text" : "# Enables traceback on error\n",
        "Line" : 213,
        "CharPositionInLine" : 44
      },
      "82" : {
        "Text" : "# COMPILER TYPE\n",
        "Line" : 215,
        "CharPositionInLine" : 9
      },
      "83" : {
        "Text" : "# Add Color Output if Using Ninja:\n\n# Wave to do it before the folders are imported etc (here is the perfect place)\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# We use \"add_compile_options\" instead of just appending to CXX_FLAGS\n\n# That way it'll work for pretty much everything including Fortran stuff\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Clang\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# g++\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# On some older gcc, it doesn't say that it's supported, but it works anyways\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 88
    },
    "cmake/Install.cmake" : {
      "ObjectId" : "f0d2b595eade33b7ad629da2fbd52f7ba45d4d10",
      "LastModified" : "2019-04-08T16:53:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some docs are generated on the fly here, create a dir for the 'built' files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the output variables listing\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the example file summary\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the example file objects link\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the change log, only if we do have a github token in the environment\n\n# Watch out! GITHUB_TOKEN could go out of scope by the time install target is run.\n\n# Better to move this condition into the install CODE.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install files that are in the current repo\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# weather files\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO Remove version from file name or generate\n\n# These files names are stored in variables because they also appear as start menu shortcuts later.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# calcsoilsurftemp is now built from source, just need to install the batch run script\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/ProjectMacros.cmake" : {
      "ObjectId" : "88e5ba1d6a120c3697463ef36c00f37833a8a650",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add google tests macro\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create source groups automatically based on file path\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create test targets\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disabled Warnings:\n\n# 1684 conversion from pointer to same-sized integral type (potential portability problem) - Due to gtest...\n",
        "Line" : 37,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# don't link base name\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# also link base name\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Named arguments\n\n# IDF_FILE <filename> IDF input file\n\n# EPW_FILE <filename> EPW weather file\n\n#\n\n# Optional Arguments\n\n# DESIGN_DAY_ONLY force design day simulation\n\n# ANNUAL_SIMULATION force annual simulation\n\n# EXPECT_FATAL Expect simulation to fail\n\n# PERFORMANCE Tag test as performance analysis\n\n# COST <integer> Cost of this simulation relative to other simulations.\n\n#                Higher cost simulations run earlier in an attempt to enhance\n\n#                test parallelization and reduce overall test run time.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMake Parse Arguments: will set the value of variables starting with 'ADD_SIM_TEST_', eg: 'ADD_SIM_TEST_IDF_FILE'\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# If passed argument \"ANNUAL_SIMULATION\" or global cache variables\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Note JM 2018-11-23: -r means \"Call ReadVarEso\", which unless you actually have BUILD_FORTRAN=TRUE shouldn't exist\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add -r flag if BUILD_FORTRAN is on, regardless of whether we run regression/performance tests\n\n# So that it'll produce the CSV output automatically for convenience\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Now, if you don't have BUILD_FORTRAN, but you actually need that because of regression/performance testing, we issue messages\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# For performance testing, it's more problematic, because that'll cut on the ReadVarEso time\n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# DO_REGRESSION_TESTING shouldn't really occur here since EnergyPlus/CMakeLists.txt will throw an error if BUILD_FORTRAN isn't enabled\n\n# Not that bad, just a dev warning\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Added the expect_fatal here to detect files that are expected to fatal error properly\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Note, CMake / CTest doesn't seem to validate if this dependent name actually exists,\n\n# but it does seem to honor the requirement\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# On dynamic exes, this function copies in dependencies of the target\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/RunCallbackTest.cmake" : {
      "ObjectId" : "b27b9f29df76c7fa3f987c7f96c04160830b2f85",
      "LastModified" : "2018-03-23T13:38:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up for convenience\n",
        "Line" : 1,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Currently the TestEnergyPlusCallbacks runner does not exit. Give it an idf and supporting files so that it will run.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find and execute the test executable, passing the argument of the directory to run in\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Clean up\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Check the outputs and return appropriately\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/RunRegression.cmake" : {
      "ObjectId" : "a8335c7a500325de7bdb697cbf8f6b28774c55c0",
      "LastModified" : "2018-12-17T12:32:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These need to be defined by the caller\n\n# IDF_FILE\n\n# BINARY_DIR\n\n# PYTHON_EXECUTABLE\n\n# REGRESSION_SCRIPT_PATH\n\n# REGRESSION_BASELINE_PATH\n\n# REGRESSION_BASELINE_SHA\n\n# COMMIT_SHA\n\n# DEVICE_ID\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/RunSimulation.cmake" : {
      "ObjectId" : "e31fb3495fac71107e0d0df0642e736916a1b835",
      "LastModified" : "2018-12-20T12:10:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These need to be defined by the caller\n\n# SOURCE_DIR\n\n# BINARY_DIR\n\n# ENERGYPLUS_EXE\n\n# IDF_FILE\n\n# EPW_FILE\n\n# BUILD_FORTRAN\n\n# TEST_FILE_FOLDER\n\n# ENERGYPLUS_FLAGS\n\n# RUN_CALLGRIND\n\n# VALGRIND\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create path variables\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy IDD to Executable directory if it is not already there\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Clean up old test directory\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Read the file contents to check for special cases\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convert flags back to CMake list\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use EPMacro if necessary\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# first bring in all imf files into the run folder\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# find the appropriate executable file\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# windows\n",
        "Line" : 55,
        "CharPositionInLine" : 9
      },
      "10" : {
        "Text" : "# Move EPMacro to executable directory\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Parametric preprocessor next\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# this handles the LBuildingAppGRotPar parametric file\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# this handles the LBuildingAppGRotPar and ParametricInsulation-5ZoneAirCooled parametric files\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# this shouldn't happen unless a new parametric file is added with a different processed filename\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# parametric preprocessor definitions detected\n",
        "Line" : 89,
        "CharPositionInLine" : 11
      },
      "16" : {
        "Text" : "# Run ExpandObjects independently if there are ground heat transfer objects\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Copy files needed for Slab\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Find and run slab\n",
        "Line" : 107,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Then copy slab results into the expanded file\n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Copy files needed for Basement\n",
        "Line" : 118,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Find and run basement\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Then copy basement results into the expanded file\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# expand objects found something and created expanded.idf\n",
        "Line" : 132,
        "CharPositionInLine" : 10
      },
      "24" : {
        "Text" : "# Move to executable directory\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Move to executable directory\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# build fortran\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# message(${VALGRIND_COMMAND} \"${ENERGYPLUS_EXE}\" -w \"${EPW_PATH}\" -d \"${OUTPUT_DIR_PATH}\" ${ENERGYPLUS_FLAGS_LIST} \"${IDF_PATH}\")\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "cmake/TargetArch.cmake" : {
      "ObjectId" : "3761e4df8a3ef05c2db48ce07eb4cbbfa585419e",
      "LastModified" : "2014-09-30T18:18:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "00d44cc5b69767d2872f14a87660e6619c195034",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the only thing that really needs to be set outside of here is the XELATEX variable, the path to the xelatex compiler\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let's create a folder to drop ONLY PDFs in once they are built, this will allow easy upload to s3\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add a configure rule to the header file though\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add each of the documents, they have their own CMakeLists.txt files\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "doc/acknowledgments/CMakeLists.txt" : {
      "ObjectId" : "c57f3b0f5163105961dcfe81d2005f8c43470356",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of inluded images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/auxiliary-programs/CMakeLists.txt" : {
      "ObjectId" : "f515bda5d9c03725318d6deb84640b19b76a5540",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of inluded images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/ems-application-guide/CMakeLists.txt" : {
      "ObjectId" : "02f1eb81a2dbb0c21b099f43e21dc2a5f61cb01d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowldgements/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of inluded images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/engineering-reference/CMakeLists.txt" : {
      "ObjectId" : "e49f0592e0e3b5d6e348c1c8b489519fcbdf34b1",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n#  grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's/^/  /g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of inluded images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/essentials/CMakeLists.txt" : {
      "ObjectId" : "e5f52db5e9af63d43565db98cd80edb38aa1611a",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/external-interfaces-application-guide/CMakeLists.txt" : {
      "ObjectId" : "9fae045728c23453b5e15a8d9e68b4a5a723be43",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/getting-started/CMakeLists.txt" : {
      "ObjectId" : "4ba5f4bc7a406cb81556662f52547747aff5590e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/input-output-reference/CMakeLists.txt" : {
      "ObjectId" : "899d98e1d4fef45ee3b7252b8c56cb4a487f47a8",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/input-output-reference/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of inluded images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/interface-developer/CMakeLists.txt" : {
      "ObjectId" : "a2f9059cda6724d2f9671cf5316de46aa9208317",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/module-developer/CMakeLists.txt" : {
      "ObjectId" : "496a1ba99bc79eec0eff695149a65bcc54bd365e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/output-details-and-examples/CMakeLists.txt" : {
      "ObjectId" : "8d639784c90d9e50d1274479e2a9ba90ef142e63",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/plant-application-guide/CMakeLists.txt" : {
      "ObjectId" : "b85ceb6d1cbb3a25b4930c14bac0f85dc90b2aeb",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/tips-and-tricks-using-energyplus/CMakeLists.txt" : {
      "ObjectId" : "e492100341b545cc1cf7d91f12a87fd752a8f87f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/using-energyplus-for-compliance/CMakeLists.txt" : {
      "ObjectId" : "6f8fc6606f961821ad75bdd69759bfe0778b86c9",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to get the list of input files, go to the root of the document folder, and:\n\n# grep -r '\\\\input{' * | cut -d ':' -f 2 | cut -c 8- | rev | cut -c 2- | rev | sed 's|^|  ${CMAKE_SOURCE_DIR}/doc/acknowledgments/|g' | sed 's/$/.tex/g'\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to get the list of included images, go to the root of the document folder and:\n\n# grep -r '\\\\includegraphics' * | cut -d ':' -f 2 | rev | cut -d '{' -f 1 | rev | cut -d '}' -f 1 | sed 's/^/  /g' | sort -n -t'.' -k 1.14\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "idd/CMakeLists.txt" : {
      "ObjectId" : "b7a0d2117dd36e4ab547bf31981d384785c8677c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "performance_tests/CMakeLists.txt" : {
      "ObjectId" : "b3229fe98ba8c6ad6a68fc539bba645d1f1b6cb4",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Force an annual simulation like this\n\n# ADD_SIMULATION_TEST(IDF_FILE 1ZoneEvapCooler.idf EPW_FILE GBR_London.Gatwick.037760_IWEC.epw ANNUAL_SIMULATION)\n\n# or set the TEST_ANNUAL_SIMULATION cache variable to true and all files will run annual\n\n# that is unless DESIGN_DAY_ONLY is set like this\n\n# ADD_SIMULATION_TEST(IDF_FILE 1ZoneEvapCooler.idf EPW_FILE GBR_London.Gatwick.037760_IWEC.epw DESIGN_DAY_ONLY)\n\n# This will override any attempt to run an annual simulation.  Use DESIGN_DAY_ONLY for files without annual run periods\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ADD_SIMULATION_TEST(IDF_FILE 10zone1vav.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ADD_SIMULATION_TEST(IDF_FILE 20zone1vav.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n\n# ADD_SIMULATION_TEST(IDF_FILE 30zone1vav.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ADD_SIMULATION_TEST(IDF_FILE 40zone1vav.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ADD_SIMULATION_TEST(IDF_FILE 50zone1vav.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n\n# ADD_SIMULATION_TEST(IDF_FILE 60Zone1PVAV.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n\n# ADD_SIMULATION_TEST(IDF_FILE 60Zone1VAV.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n\n# ADD_SIMULATION_TEST(IDF_FILE 60zone2PVAV.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n\n# ADD_SIMULATION_TEST(IDF_FILE 60zone3PVAV.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n\n# ADD_SIMULATION_TEST(IDF_FILE 60zone6PVAV.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ADD_SIMULATION_TEST(IDF_FILE benchmarklargeofficenew_usa_ca_san_francisco.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw PERFORMANCE COST 8)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "scripts/dev/generate_embeddable_epJSON_schema/CMakeLists.txt" : {
      "ObjectId" : "aa98df33d6103aecf1756d7932f11cc9dfd67580",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/dev/generate_embeddable_epJSON_schema/generate_embedded_epJSON_schema.cmake" : {
      "ObjectId" : "c8aafc61cb14b92eac09632b90bbb02cd39b104d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/AppGPostProcess/CMakeLists.txt" : {
      "ObjectId" : "88d59578169f67ffe7591eb33183308edea7fe92",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/Basement/CMakeLists.txt" : {
      "ObjectId" : "5bf23f86fd1a14d9a6e341c271aea50f9736251e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/CalcSoilSurfTemp/CMakeLists.txt" : {
      "ObjectId" : "baf6e0eecf308db81f5c077dbff0706053c3cb4d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/ConvertESOMTR/CMakeLists.txt" : {
      "ObjectId" : "88756e131904147eafd838994a09bee8e9394d68",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/EnergyPlus/AirflowNetwork/CMakeLists.txt" : {
      "ObjectId" : "b8b531307a2b9bca62bb958d9075c766a460be74",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a static library\n\n# this will be linked statically to create the DLL and also the unit tests\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/EnergyPlus/CMakeLists.txt" : {
      "ObjectId" : "60a9c4b5682361b3cd6ad6e7edb0229cf0a2834d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# public API headers go in the src/EnergyPlus/public folder\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message( $<TARGET_PROPERTY:airflownetworklib,INTERFACE_INCLUDE_DIRECTORIES> )\n\n#include_directories($<TARGET_PROPERTY:airflownetworklib,INTERFACE_INCLUDE_DIRECTORIES>)\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first we will create a static library of EnergyPlus\n\n# this will be linked statically to create the DLL and also the unit tests\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# second we will create the shared library that is actually packaged with EnergyPlus\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# windows\n",
        "Line" : 670,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# windows\n",
        "Line" : 688,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Build the test executable\n",
        "Line" : 699,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "src/ExpandObjects/CMakeLists.txt" : {
      "ObjectId" : "f4fdbac39a6ab02cf047d2311b3b412459141eb5",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# windows\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "src/HVAC-Diagram/CMakeLists.txt" : {
      "ObjectId" : "21d9c6e38618007cddf1bbbd5304384858002904",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/ParametricPreprocessor/CMakeLists.txt" : {
      "ObjectId" : "aca07e57e41b810bf21a61e4c27e0e11f8f22213",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/ReadVars/CMakeLists.txt" : {
      "ObjectId" : "8310f0221aa7b5350540dc6b005998e217a327a1",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/Slab/CMakeLists.txt" : {
      "ObjectId" : "7d413ebf7a53f2b78ffc7dded2d32694ad7e20ed",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/Transition/CMakeLists.txt" : {
      "ObjectId" : "b3fc24543bea66157cf32f1303fd2ad226cc0afc",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first create a static library of shared stuff\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Set release flags to be empty\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# then create all the binaries using just the Transition source and the appropriate version of the main sub\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# then install all the support files\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "testfiles/CMakeLists.txt" : {
      "ObjectId" : "865a12317d1d7aa4573013da3be05ae0fa6c5ebf",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Force an annual simulation like this\n\n# ADD_SIMULATION_TEST(IDF_FILE 1ZoneEvapCooler.idf EPW_FILE GBR_London.Gatwick.037760_IWEC.epw ANNUAL_SIMULATION)\n\n# or set the TEST_ANNUAL_SIMULATION cache variable to true and all files will run annual\n\n# that is unless DESIGN_DAY_ONLY is set like this\n\n# ADD_SIMULATION_TEST(IDF_FILE 1ZoneEvapCooler.idf EPW_FILE GBR_London.Gatwick.037760_IWEC.epw DESIGN_DAY_ONLY)\n\n# This will override any attempt to run an annual simulation.  Use DESIGN_DAY_ONLY for files without annual run periods\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Putting a couple files first because they are very long running and CI ends up running them while all the others are done\n\n# Hopefully putting them up here will get them to start sooner and better distribute CI resources over the build time\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Expected to Fatal\n",
        "Line" : 238,
        "CharPositionInLine" : 121
      },
      "3" : {
        "Text" : "# ASHRAE 90.1-2016 \"Prototype Buildings\"\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ADD_SIMULATION_TEST(IDF_FILE ASHRAE9012016_ApartmentMidRise_Denver.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw)\n\n#ADD_SIMULATION_TEST(IDF_FILE ASHRAE9012016_Hospital_Denver.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw)\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ADD_SIMULATION_TEST(IDF_FILE ASHRAE9012016_OutPatientHealthCare_Denver.idf EPW_FILE USA_CO_Golden-NREL.724666_TMY3.epw)\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Additional files in subdirectories\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Macro files\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# External interface files -- note they don't work on Mac\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ExpandObjects dependent files\n",
        "Line" : 656,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Parametric preprocessor dependent files\n",
        "Line" : 681,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Basement/slab dependent files\n",
        "Line" : 685,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Additional files in subdirectories that depend on ExpandObjects\n",
        "Line" : 688,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "third_party/BCVTB/CMakeLists.txt" : {
      "ObjectId" : "960819a2de1d849c8f59999410102bb5a502b02d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/DElight/CMakeLists.txt" : {
      "ObjectId" : "bcbd28b506ac68b54bd711d11518395350d2cb44",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/EP-Launch-Lite/Makefile" : {
      "ObjectId" : "58ad94892aeeda7c6c06ab5a1df5c905b3881416",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "third_party/EP-Launch-Lite/docs/Makefile" : {
      "ObjectId" : "f14e7106f1cf5ffef0fc28254850c206cf683a86",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Expat/CMakeLists.txt" : {
      "ObjectId" : "2259f5e48d3938d7654a2d1956c435286525341f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/Expat/ConfigureChecks.cmake" : {
      "ObjectId" : "a29c3fa7cddcffeaef4b0d96b3d2d4845738e270",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#/* Define to 1 if you have the ANSI C header files. */\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to lazy to implement:\n\n#set(WORDS_BIGENDIAN ON)\n\n#/* 1234 = LIL_ENDIAN, 4321 = BIGENDIAN */\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#/* Define to specify how much context to retain around the current parse point. */\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#/* Define to make parameter entity parsing functionality available. */\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#/* Define to make XML Namespaces functionality available. */\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Expat/amiga/Makefile" : {
      "ObjectId" : "8450dd5ed88ab2aedd38c32639636fe4a48e1315",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for AmigaOS\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Set these for SDK installation.\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#?.o quiet\n",
        "Line" : 62,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "#?.o quiet\n",
        "Line" : 63,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 4
    },
    "third_party/Expat/expat_config.h.cmake" : {
      "ObjectId" : "25d79a6d5e671f1eadef3bdf4f7d08d7ee4eff9e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* expat_config.h.in.  Generated from configure.in by autoheader.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* 1234 = LIL_ENDIAN, 4321 = BIGENDIAN */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the `bcopy' function. */",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the <fcntl.h> header file. */",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the `getpagesize' function. */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if you have the <inttypes.h> header file. */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the `memmove' function. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the <memory.h> header file. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have a working `mmap' system call. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the <stdlib.h> header file. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the <strings.h> header file. */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <string.h> header file. */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the ANSI C header files. */",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* whether byteorder is bigendian */",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to specify how much context to retain around the current parse\n   point. */",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to make parameter entity parsing functionality available. */",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to make XML Namespaces functionality available. */",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define to __FUNCTION__ or \"\" if `__func__' does not conform to ANSI C. */",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to `long' if <sys/types.h> does not define. */",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to `unsigned' if <sys/types.h> does not define. */",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "third_party/FMI/CMakeLists.txt" : {
      "ObjectId" : "bf2ea77ebd5f599af46c8aa974be2ee762abc29d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/FMUParser/CMakeLists.txt" : {
      "ObjectId" : "9ae39c0ec7c9430506f2eac37664b565d50266e7",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_LIBRARY( parser SHARED ${SRC} )\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/ObjexxFCL/CMakeLists.txt" : {
      "ObjectId" : "81b740857481f8c46d1306b74870ac89e48b050c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CREATE_TEST_TARGETS( ${target_name} \"${test_src}\" \"\" )\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/SQLite/CMakeLists.txt" : {
      "ObjectId" : "8fff338fb34404ad76b7b5b44db082b707f3146b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# visual c++ (VS 2013)\n",
        "Line" : 2,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# override fp:strict in debug builds\n",
        "Line" : 4,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : "# g++/Clang\n",
        "Line" : 6,
        "CharPositionInLine" : 83
      },
      "3" : {
        "Text" : "# COMPILER TYPE\n",
        "Line" : 12,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 4
    },
    "third_party/Windows-CalcEngine/CMakeLists.txt" : {
      "ObjectId" : "069548794a7e96e71ad843662d5a7bf08bf9e684",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# google test will not be created by this project if this is not main project. Main project is expected to handle google test.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set( BUILD_WCE_TESTING OFF )\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Do not need gtest since it will be processed by E+\n",
        "Line" : 24,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : "# include(CMakeLists-GTest.txt)\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Prevent GoogleTest from overriding our compiler/linker options\n",
        "Line" : 32,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# when building with Visual Studio\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Add googletest directly to our build. This adds\n\n# the following targets: gtest, gtest_main, gmock\n\n# and gmock_main\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Now simply link your own targets against gtest, gmock,\n\n# etc. as appropriate\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# foreach( _variableName ${SOURCES})\n\n#   message( STATUS \"${_variableName}\" )\n\n# endforeach()\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "third_party/Windows-CalcEngine/cmake/WCECompilerFlags.cmake" : {
      "ObjectId" : "4ec400853c6fa5477f922d90291ef224bd52d974",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure expat is compiled as a static library\n\n# ADD_DEFINITIONS(\"-DXML_STATIC\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# g++/Clang\n",
        "Line" : 4,
        "CharPositionInLine" : 80
      },
      "2" : {
        "Text" : "# COMPILER FLAGS\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Faster compiler processing\n",
        "Line" : 12,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "# set (CMAKE_CXX_FLAGS \"-std=c++11 -stdlib=libc++\")\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Enable C++11 features in g++\n",
        "Line" : 15,
        "CharPositionInLine" : 44
      },
      "6" : {
        "Text" : "# Enable C++11 features in g++\n",
        "Line" : 17,
        "CharPositionInLine" : 42
      },
      "7" : {
        "Text" : "# Turn on warnings about constructs/situations that may be non-portable or outside of the standard\n",
        "Line" : 20,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "# Turn on warnings\n",
        "Line" : 22,
        "CharPositionInLine" : 41
      },
      "9" : {
        "Text" : "# g++\n",
        "Line" : 24,
        "CharPositionInLine" : 35
      },
      "10" : {
        "Text" : "# Suppress unused-but-set warnings until more serious ones are addressed\n",
        "Line" : 25,
        "CharPositionInLine" : 88
      },
      "11" : {
        "Text" : "# ADDITIONAL DEBUG-MODE-SPECIFIC FLAGS\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# g++\n",
        "Line" : 32,
        "CharPositionInLine" : 36
      },
      "13" : {
        "Text" : "# Improve debug run solution stability\n",
        "Line" : 33,
        "CharPositionInLine" : 49
      },
      "14" : {
        "Text" : "# Disable optimizations that may have concealed NaN behavior\n",
        "Line" : 34,
        "CharPositionInLine" : 52
      },
      "15" : {
        "Text" : "# Produces debugging information specifically for gdb\n",
        "Line" : 37,
        "CharPositionInLine" : 37
      },
      "16" : {
        "Text" : "# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "third_party/Windows-CalcEngine/cmake/WCEInternalUtils.cmake" : {
      "ObjectId" : "4fb7ab9b10104fde184f37378a1d5c7174a3b441",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 16
    },
    "third_party/Windows-CalcEngine/cmake/WCEProjectMacros.cmake" : {
      "ObjectId" : "ce0682ebcf4530fe65a4a0bd5e0491e67f59f0c7",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add google tests macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create source groups automatically based on file path\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create test targets\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# don't link base name\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# also link base name\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "third_party/Windows-CalcEngine/src/CMakeLists.txt" : {
      "ObjectId" : "174035e4dc2707653216829f225a7cfb0437e55b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/Windows-CalcEngine/src/Chromogenics/CMakeLists.txt" : {
      "ObjectId" : "3e80a9a93c591f82f6ae29573df7df463211725a",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n\n# include_directories( include )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generates the static library from the SOURCES\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Windows-CalcEngine/src/Common/CMakeLists.txt" : {
      "ObjectId" : "0a98278bdcbd4c959987ea49fb8c7ca78effbbc9",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n\n# include_directories( src ${CMAKE_SOURCE_DIR}/Common/src )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third_party/Windows-CalcEngine/src/Gases/CMakeLists.txt" : {
      "ObjectId" : "a431ce06a3dd77f28144a90bf48b24808e5b596b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third_party/Windows-CalcEngine/src/MultiLayerOptics/CMakeLists.txt" : {
      "ObjectId" : "a1f7d6c8f94fe5e172d240f79e5461c2017c554b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n\n# include_directories( include )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generates the static library from the SOURCES\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Windows-CalcEngine/src/SingleLayerOptics/CMakeLists.txt" : {
      "ObjectId" : "c181d0752aa6ff35393edaba8cbdc1936d655339",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n\n# include_directories( include )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generates the static library from the SOURCES\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Windows-CalcEngine/src/SpectralAveraging/CMakeLists.txt" : {
      "ObjectId" : "a7c47204384d8d6651c12931eb13d94cab58527e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n\n# include_directories( include )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generates the static library from the SOURCES\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Windows-CalcEngine/src/Tarcog/CMakeLists.txt" : {
      "ObjectId" : "61cc93fa916909f68c9e97fc3cd1041dab809fb3",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n\n# include_directories( include )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generates the static library from the SOURCES\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/Windows-CalcEngine/src/Viewer/CMakeLists.txt" : {
      "ObjectId" : "47d27b7c74d3a7ad59c732137b31078fbaccb385",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first include header files of this project itself\n\n# include_directories( include )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure to connect to header files of common variables\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# collect all source files and add them to the SOURCES list\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generates the static library from the SOURCES\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install will be used by master projects to get information on destination of library files\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third_party/cmake/kiva.cmake" : {
      "ObjectId" : "4aab6b8472f34b957935e1cc115cd4a466108a4c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/CMakeLists.txt" : {
      "ObjectId" : "7ef9936d8d51e4945aaf1097ed55d37ebac8ffa7",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# guard against in-source builds\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Alias Eigen_*_DIR to Eigen3_*_DIR:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# guard against bad build-type strings\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n\n# retrieve version infomation                                               #\n\n#############################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# automatically parse the version number\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if we are not in a mercurial clone\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the mercurial program is absent or this will leave the EIGEN_HG_CHANGESET string empty,\n\n# but won't stop CMake.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# if this is the default (aka development) branch, extract the mercurial changeset number from the hg tip output...\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#...and show it next to the version number\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#set(CMAKE_CXX_STANDARD 03)\n\n#set(CMAKE_CXX_EXTENSIONS OFF)\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#############################################################################\n\n# find how to link to the standard libraries                                #\n\n#############################################################################\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Disable pkgconfig only for native Windows builds\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We assume that other compilers are partly compatible with GNUCC\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# clang outputs some warnings for unknown flags that are not caught by check_cxx_compiler_flag\n\n# adding -Werror turns such warnings into errors\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#ei_add_cxx_compiler_flag(\"-Weverything\")              # clang\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#  ei_add_cxx_compiler_flag(\"-Wconversion\")\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# -Wshadow is insanely too strict with gcc, hopefully it will become usable with gcc 6\n\n# if(NOT CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"5.0.0\"))\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# disable ICC's \"operands are evaluated in unspecified order\" remark\n\n# disable ICC's \"warning #2304: non-explicit constructor with single argument may cause implicit type conversion\" produced by -Wnon-virtual-dtor\n",
        "Line" : 190,
        "CharPositionInLine" : 56
      },
      "18" : {
        "Text" : "# The -ansi flag must be added last, otherwise it is also used as a linker flag by check_cxx_compiler_flag making it fails\n\n# Moreover we should not set both -strict-ansi and -ansi\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# disable clang warning: argument unused during compilation: '-ansi'\n",
        "Line" : 197,
        "CharPositionInLine" : 56
      },
      "20" : {
        "Text" : "# C4127 - conditional expression is constant\n\n# C4714 - marked as __forceinline not inlined (I failed to deactivate it selectively)\n\n#         We can disable this warning in the unit tests since it is clear that it occurs\n\n#         because we are oftentimes returning objects that have a destructor or may\n\n#         throw exceptions - in particular in the unit tests we are throwing extra many\n\n#         exceptions to cover indexing errors.\n\n# C4505 - unreferenced local function has been removed (impossible to deactive selectively)\n",
        "Line" : 312,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# replace all /Wx by /W4\n",
        "Line" : 321,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# arch is not supported on 64 bit systems, SSE is enabled automatically.\n",
        "Line" : 336,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# Backward compatibility support for EIGEN_INCLUDE_INSTALL_DIR\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# similar to set_target_properties but append the property instead of overwriting it\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# if the property wasn't previously set, ${previous} is now \"previous-NOTFOUND\" which cmake allows catching with plain if()\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 443,
        "CharPositionInLine" : 27
      },
      "27" : {
        "Text" : "# add SYCL\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# must be after test and unsupported, for configuring buildtests.in\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# TODO: consider also replacing EIGEN_BUILD_BTL by a custom target \"make btl\"?\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Interface libraries require at least CMake 3.0\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Imported target support\n",
        "Line" : 536,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Export as title case Eigen\n",
        "Line" : 545,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Eigen does not provide components\n",
        "Line" : 555,
        "CharPositionInLine" : 39
      },
      "34" : {
        "Text" : "# Remove CMAKE_SIZEOF_VOID_P from Eigen3ConfigVersion.cmake since Eigen does\n\n# not depend on architecture specific settings or libraries. More\n\n# specifically, an Eigen3Config.cmake generated from a 64 bit target can be\n\n# used for 32 bit targets as well (and vice versa).\n",
        "Line" : 557,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# The Eigen target will be located in the Eigen3 namespace. Other CMake\n\n# targets can refer to it using Eigen3::Eigen.\n",
        "Line" : 568,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Export Eigen3 package to CMake registry such that it can be easily found by\n\n# CMake even if it has not been installed to a standard directory.\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Fallback to legacy Eigen3Config.cmake without the imported target\n",
        "Line" : 578,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# If CMakePackageConfigHelpers module is available (CMake >= 2.8.8)\n\n# create a relocatable Config file, otherwise leave the hardcoded paths\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Eigen does not provide components\n",
        "Line" : 590,
        "CharPositionInLine" : 41
      },
      "40" : {
        "Text" : "# The PACKAGE_* variables are defined by the configure_package_config_file\n\n# but without it we define them manually to the hardcoded paths\n",
        "Line" : 593,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Add uninstall target\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "third_party/eigen/CTestConfig.cmake" : {
      "ObjectId" : "0039bf8acd810f7cbd107de6c5fcc493043c37c7",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/Eigen/CMakeLists.txt" : {
      "ObjectId" : "9eb502b792d4a9607e2d323f2d8114939b43c209",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/CMakeLists.txt" : {
      "ObjectId" : "38ff9f483284b1749b0adba445e82f99612c515c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   SET(CMAKE_Fortran_FLAGS \"-g0 -O3 -DNDEBUG\")\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find_package(MKL)\n\n# if (MKL_FOUND)\n\n#   add_definitions(-DHAVE_MKL)\n\n#   set(DEFAULT_LIBRARIES ${MKL_LIBRARIES})\n\n# endif (MKL_FOUND)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if we cannot find it easily, then we don't need it!\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/eigen/bench/btl/cmake/FindACML.cmake" : {
      "ObjectId" : "4989fa2f4c60a2c4afe2242b32c02f1c4e9dd705",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/cmake/FindATLAS.cmake" : {
      "ObjectId" : "4136a989d61565965f03cd1704f9284a83e8c8b0",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# search the default lapack lib link to it\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#   if(ATLAS_REFERENCE_LAPACK)\n\n#     set(ATLAS_LIBRARIES ${ATLAS_LIBRARIES} ${ATLAS_REFERENCE_LAPACK})\n\n#   endif()\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/bench/btl/cmake/FindBLAZE.cmake" : {
      "ObjectId" : "dba4c89f2de55e394a148388cf594babc8cbf11f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find eigen2 headers\n\n# Once done this will define\n\n#\n\n#  BLAZE_FOUND - system has blaze lib\n\n#  BLAZE_INCLUDE_DIR - the blaze include directory\n\n#\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Adapted from FindEigen.cmake:\n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "third_party/eigen/bench/btl/cmake/FindBlitz.cmake" : {
      "ObjectId" : "92880bbed7cc687dee65ba2419e236e383c26479",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find blitz lib\n\n# Once done this will define\n\n#\n\n#  BLITZ_FOUND - system has blitz lib\n\n#  BLITZ_INCLUDES - the blitz include directory\n\n#  BLITZ_LIBRARIES - The libraries needed to use blitz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2007, Allen Winter, <winter@kde.org>\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(FindLibraryWithDebug)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/eigen/bench/btl/cmake/FindCBLAS.cmake" : {
      "ObjectId" : "ce0f2f2b2d2d09973e45e8169a39d9f3cb738a50",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include(FindLibraryWithDebug)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/cmake/FindGMM.cmake" : {
      "ObjectId" : "5049c64edcea43027c7875c9efa328a849cdb53f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# in cache already\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/cmake/FindMKL.cmake" : {
      "ObjectId" : "f4d7c6ebe7dd629d20b7579ee6efa4dad989edcf",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/cmake/FindMTL4.cmake" : {
      "ObjectId" : "3de4909802be09039c847931d323a81b8998fa50",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find eigen2 headers\n\n# Once done this will define\n\n#\n\n#  MTL4_FOUND - system has eigen2 lib\n\n#  MTL4_INCLUDE_DIR - the eigen2 include directory\n\n#\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Adapted from FindEigen.cmake:\n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "third_party/eigen/bench/btl/cmake/FindOPENBLAS.cmake" : {
      "ObjectId" : "2a091943645d64c86dcae8b01211dbec129167da",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/cmake/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "7f122edcddd304b99fc1fd67ab1ca023a46edcb2",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME (DEFAULT_MSG|\"Custom failure message\") VAR1 ... )\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED and QUIET argument to FIND_PACKAGE() and\n\n# it also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is found if all variables listed are TRUE.\n\n# Example:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2 DEFAULT_MSG LIBXML2_LIBRARIES LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARIES and \n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR, \n\n# independent whether QUIET was used or not.\n\n#\n\n# If it is found, the location is reported using the VAR1 argument, so \n\n# here a message \"Found LibXml2: /usr/lib/libxml2.so\" will be printed out.\n\n# If the second argument is DEFAULT_MSG, the message in the failure case will \n\n# be \"Could NOT find LibXml2\", if you don't like this message you can specify\n\n# your own custom failure message there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/cmake/FindTvmet.cmake" : {
      "ObjectId" : "26a29d965d125b34b1fff2c6bbfc2b5bf52e42df",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find tvmet headers\n\n# Once done this will define\n\n#\n\n#  TVMET_FOUND - system has tvmet lib\n\n#  TVMET_INCLUDE_DIR - the tvmet include directory\n\n#\n\n# Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n\n# Adapted from FindEigen.cmake:\n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "third_party/eigen/bench/btl/cmake/MacroOptionalAddSubdirectory.cmake" : {
      "ObjectId" : "545048b684371ec6b8bdab3aaee2415b15b321a0",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_OPTIONAL_ADD_SUBDIRECTORY() combines ADD_SUBDIRECTORY() with an OPTION()\n\n# MACRO_OPTIONAL_ADD_SUBDIRECTORY( <dir> )\n\n# If you use MACRO_OPTIONAL_ADD_SUBDIRECTORY() instead of ADD_SUBDIRECTORY(),\n\n# this will have two effects\n\n# 1 - CMake will not complain if the directory doesn't exist\n\n#     This makes sense if you want to distribute just one of the subdirs\n\n#     in a source package, e.g. just one of the subdirs in kdeextragear.\n\n# 2 - If the directory exists, it will offer an option to skip the \n\n#     subdirectory.\n\n#     This is useful if you want to compile only a subset of all\n\n#     directories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/bench/btl/data/CMakeLists.txt" : {
      "ObjectId" : "6af2a366f77ac4923d84584f1e7e4d7a834123bc",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/libs/BLAS/CMakeLists.txt" : {
      "ObjectId" : "0272ccad07a4a0eab515a79178b46fac1fcd83fe",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we are inside Eigen and blas/lapack interface is compilable\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/libs/STL/CMakeLists.txt" : {
      "ObjectId" : "4cfc2dcf298fbd1baba1fb0202f3b9d48bae2bd1",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/libs/blaze/CMakeLists.txt" : {
      "ObjectId" : "e99a0855c997e908ecab1044adef58eb587ec263",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: The newest blaze version requires C++14.\n\n# Ideally, we should set this depending on the version of Blaze we found\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/libs/blitz/CMakeLists.txt" : {
      "ObjectId" : "880ab7338564d89aaa919e7af064faf06b27e44e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/libs/eigen2/CMakeLists.txt" : {
      "ObjectId" : "a2e8fc6da0948e1207d634ee9aca120aa8fc1352",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EIGEN2_FOUND\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/libs/eigen3/CMakeLists.txt" : {
      "ObjectId" : "00cae23d3a74f3cfe14b2ecf8335145aa185a419",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# unless EIGEN3_INCLUDE_DIR is defined, let's use current Eigen version\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#     if(BUILD_btl_eigen3_adv)\n\n#       target_link_libraries(btl_eigen3_adv ${MKL_LIBRARIES})\n\n#     endif(BUILD_btl_eigen3_adv)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/bench/btl/libs/gmm/CMakeLists.txt" : {
      "ObjectId" : "bc2586243092771e0b1f9919c6a093f522b8d685",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/libs/mtl4/CMakeLists.txt" : {
      "ObjectId" : "14b47a808c990500baadcef95268a8636b2e3bd1",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/libs/tensors/CMakeLists.txt" : {
      "ObjectId" : "09d6d8e43ee4de933fd273105b56f42c7f75a701",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# unless TENSOR_INCLUDE_DIR is defined, let's use current Eigen version\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "third_party/eigen/bench/btl/libs/tvmet/CMakeLists.txt" : {
      "ObjectId" : "25b565b972360f99d49dc7560bd7989ba1f24682",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/btl/libs/ublas/CMakeLists.txt" : {
      "ObjectId" : "bdb58bea1ba0c7aedec5b82f1c6b8f2c2c443c89",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/bench/spbench/CMakeLists.txt" : {
      "ObjectId" : "029ba6d6be57b404e697fe9c399a1d5401553ae1",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find_library(PARDISO_LIBRARIES pardiso412-GNU450-X86-64)\n\n# if(PARDISO_LIBRARIES)\n\n#   add_definitions(\"-DEIGEN_PARDISO_SUPPORT\")\n\n#   set(SPARSE_LIBS ${SPARSE_LIBS} ${PARDISO_LIBRARIES})\n\n# endif(PARDISO_LIBRARIES)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check that the PASTIX found is a version without MPI\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/blas/CMakeLists.txt" : {
      "ObjectId" : "9887d58043b611c5b717cb0fd871f36d4ab0065b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 50,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 1
    },
    "third_party/eigen/blas/testing/CMakeLists.txt" : {
      "ObjectId" : "3ab8026ea3e4dd051697be9303e3ad5a5576d72a",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_custom_target(level1)\n\n# add_dependencies(level1 sblat1)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/EigenConfigureTesting.cmake" : {
      "ObjectId" : "3a824397f398bca7927acda55bb3bc86385fe71e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configure the \"site\" and \"buildname\" \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# retrieve and store the build string\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check whether /bin/bash exists (disabled as not used anymore)\n\n# find_file(EIGEN_BIN_BASH_EXISTS \"/bin/bash\" PATHS \"/\" NO_DEFAULT_PATH)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This call activates testing and generates the DartConfiguration.tcl\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Overwrite default DartConfiguration.tcl such that ctest can build our unit tests.\n\n# Recall that our unit tests are not in the \"all\" target, so we have to explicitely ask ctest to build our custom 'buildtests' target.\n\n# At this stage, we can also add custom flags to the build tool through the user defined EIGEN_TEST_BUILD_FLAGS variable.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# try to grab the default flags\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# some documentation of this function would be nice\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# configure Eigen related testing options\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "third_party/eigen/cmake/EigenDetermineOSVersion.cmake" : {
      "ObjectId" : "9246fa67c82994c3bfa124fcd1859b1ac0bd3624",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The utility function DetermineOSVersion aims at providing an\n\n# improved version of the CMake variable ${CMAKE_SYSTEM} on Windows\n\n# machines.\n\n#\n\n# Usage:\n\n#  include(EigenDetermineOSVersion)\n\n#  DetermineOSVersion(OS_VERSION)\n\n#  message(\"OS: ${OS_VERSION}\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - A little helper variable which should not be directly called\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/cmake/EigenDetermineVSServicePack.cmake" : {
      "ObjectId" : "fed78194d2faea19f50f2dabc0157f419d6e45d3",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code is almost identical to the CMake version. The only difference is that we remove\n\n# _DetermineVSServicePack_FastCheckVersionWithCompiler which lead to errors on some systems.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Call helper function to determine VS version\n",
        "Line" : 16,
        "CharPositionInLine" : 16
      },
      "2" : {
        "Text" : "# temporary fix, until CMake catches up\n",
        "Line" : 19,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 3
    },
    "third_party/eigen/cmake/EigenTesting.cmake" : {
      "ObjectId" : "a92a2978b0daad8d1709be22167ee09879b997ac",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#internal. See documentation of ei_add_test for details.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let the user pass flags.\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# it could be that some cmake module provides a bad library string \" \"  (just spaces),\n\n# and that severely breaks target_link_libraries (\"can't link to -l-lstdc++\" errors).\n\n# so we check for strings containing only spaces.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# notice: no double quotes around ${libs_to_link} here. It may be a list.\n",
        "Line" : 95,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Specify target and test labels accoirding to EIGEN_CURRENT_SUBPROJECT\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# SYCL\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add a custom target for the generated integration header\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# let the user pass flags.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# it could be that some cmake module provides a bad library string \" \"  (just spaces),\n\n# and that severely breaks target_link_libraries (\"can't link to -l-lstdc++\" errors).\n\n# so we check for strings containing only spaces.\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# notice: no double quotes around ${libs_to_link} here. It may be a list.\n",
        "Line" : 190,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Specify target and test labels according to EIGEN_CURRENT_SUBPROJECT\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Macro to add a test\n\n#\n\n# the unique mandatory parameter testname must correspond to a file\n\n# <testname>.cpp which follows this pattern:\n\n#\n\n# #include \"main.h\"\n\n# void test_<testname>() { ... }\n\n#\n\n# Depending on the contents of that file, this macro can have 2 behaviors,\n\n# see below.\n\n#\n\n# The optional 2nd parameter is libraries to link to.\n\n#\n\n# A. Default behavior\n\n#\n\n# this macro adds an executable <testname> as well as a ctest test\n\n# named <testname> too.\n\n#\n\n# On platforms with bash simply run:\n\n#   \"ctest -V\" or \"ctest -V -R <testname>\"\n\n# On other platform use ctest as usual\n\n#\n\n# B. Multi-part behavior\n\n#\n\n# If the source file matches the regexp\n\n#    CALL_SUBTEST_[0-9]+|EIGEN_TEST_PART_[0-9]+\n\n# then it is interpreted as a multi-part test. The behavior then depends on the\n\n# CMake option EIGEN_SPLIT_LARGE_TESTS, which is ON by default.\n\n#\n\n# If EIGEN_SPLIT_LARGE_TESTS is OFF, the behavior is the same as in A (the multi-part\n\n# aspect is ignored).\n\n#\n\n# If EIGEN_SPLIT_LARGE_TESTS is ON, the test is split into multiple executables\n\n#   test_<testname>_<N>\n\n# where N runs from 1 to the greatest occurence found in the source file. Each of these\n\n# executables is built passing -DEIGEN_TEST_PART_N. This allows to split large tests\n\n# into smaller executables.\n\n#\n\n# Moreover, targets <testname> are still generated, they\n\n# have the effect of building all the parts of the test.\n\n#\n\n# Again, ctest -R allows to run all matching tests.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# adds a failtest, i.e. a test that succeed if the program fails to compile\n\n# note that the test runner for these is CMake itself, when passed -DEIGEN_FAILTEST=ON\n\n# so here we're just running CMake commands immediately, we're not adding any targets.\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# print a summary of the different options\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# vectorization / alignment options\n",
        "Line" : 484,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# uncomment anytime you change the ei_get_compilerver_from_cxx_version_string macro\n\n# ei_test_get_compilerver_from_cxx_version_string()\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# if the sitename is not yet set, try to set it\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# in case it is already set, enforce lower case\n",
        "Line" : 524,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# on windows system, we use a modified CMake script\n",
        "Line" : 532,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# on all other system we rely on ${CMAKE_CXX_COMPILER}\n\n# supporting a \"--version\" or \"/version\" flag\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Extract compiler name and version from a raw version string\n\n# WARNING: if you edit thid macro, then please test it by  uncommenting\n\n# the testing macro call in ei_init_testing() of the EigenTesting.cmake file.\n\n# See also the ei_test_get_compilerver_from_cxx_version_string macro at the end of the file\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# extract possible compiler names\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# combine them\n",
        "Line" : 573,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# extract possible version numbers\n\n# first try to extract 3 isolated numbers:\n",
        "Line" : 588,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# try to extract 2 isolated ones:\n",
        "Line" : 592,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# try to extract 3:\n",
        "Line" : 595,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# try to extract 2:\n",
        "Line" : 598,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# helper macro for testing ei_get_compilerver_from_cxx_version_string\n\n# STR: raw version string\n\n# REFNAME: expected compiler name\n\n# REFVER: expected compiler version\n",
        "Line" : 698,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# macro for testing ei_get_compilerver_from_cxx_version_string\n\n# feel free to add more version strings\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "third_party/eigen/cmake/EigenUninstall.cmake" : {
      "ObjectId" : "4dae8c85c8701e8cf676acc88c65065577d7e353",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ CMake Uninstall Template #######################\n\n# CMake Template file for uninstallation of files\n\n# mentioned in 'install_manifest.txt'\n\n#\n\n# Used by uinstall target\n\n#################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/FindAdolc.cmake" : {
      "ObjectId" : "937e549904e260bb7b0b4e6ba1ee82369938e7fd",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/cmake/FindBLAS.cmake" : {
      "ObjectId" : "e3395bc10ec08c14869fa7d28bb8ebfdff4b30a9",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2016 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find BLAS library\n\n# This module finds an installed fortran library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#    is found\n\n#  BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n\n#    and -L).\n\n#  BLAS_COMPILER_FLAGS - uncached list of required compiler flags (including -I for mkl headers).\n\n#  BLAS_LIBRARIES - uncached list of libraries (using full path name) to\n\n#    link against to use BLAS\n\n#  BLAS95_LIBRARIES - uncached list of libraries (using full path name)\n\n#    to link against to use BLAS95 interface\n\n#  BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n\n#    is found\n\n#  BLA_STATIC  if set on this determines what kind of linkage we do (static)\n\n#  BLA_VENDOR  if set checks only the specified vendor, if not set checks\n\n#     all the possibilities\n\n#  BLAS_VENDOR_FOUND stores the BLAS vendor found \n\n#  BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DBLAS_DIR=path/to/blas):\n\n#  BLAS_DIR            - Where to find the base directory of blas\n\n#  BLAS_INCDIR         - Where to find the header files\n\n#  BLAS_LIBDIR         - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: BLAS_DIR, BLAS_INCDIR, BLAS_LIBDIR\n\n# For MKL case and if no paths are given as hints, we will try to use the MKLROOT\n\n# environment variable\n\n#  BLAS_VERBOSE Print some additional information during BLAS libraries detection\n\n##########\n\n### List of vendors (BLA_VENDOR) valid in this module\n\n########## List of vendors (BLA_VENDOR) valid in this module\n\n##  Open (for OpenBlas), Eigen (for EigenBlas), Goto, ATLAS PhiPACK,\n\n##  CXML, DXML, SunPerf, SCSL, SGIMATH, IBMESSL, IBMESSLMT\n\n##  Intel10_32 (intel mkl v10 32 bit), Intel10_64lp (intel mkl v10 64 bit,lp thread model, lp64 model),\n\n##  Intel10_64lp_seq (intel mkl v10 64 bit,sequential code, lp64 model),\n\n##  Intel( older versions of mkl 32 and 64 bit),\n\n##  ACML, ACML_MP, ACML_GPU, Apple, NAS, Generic\n\n# C/CXX should be enabled to use Intel mkl\n\n###\n\n# We handle different modes to find the dependency\n\n#\n\n# - Detection if already installed on the system\n\n#   - BLAS libraries can be detected from different ways\n\n#     Here is the order of precedence:\n\n#     1) we look in cmake variable BLAS_LIBDIR or BLAS_DIR (we guess the libdirs) if defined\n\n#     2) we look in environment variable BLAS_LIBDIR or BLAS_DIR (we guess the libdirs) if defined\n\n#     3) we look in common environnment variables depending on the system (INCLUDE, C_INCLUDE_PATH, CPATH - LIB, DYLD_LIBRARY_PATH, LD_LIBRARY_PATH)\n\n#     4) we look in common system paths depending on the system, see for example paths contained in the following cmake variables:\n\n#       - CMAKE_PLATFORM_IMPLICIT_INCLUDE_DIRECTORIES, CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES\n\n#       - CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES, CMAKE_C_IMPLICIT_LINK_DIRECTORIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Some macros to print status when search for headers and libs\n\n# This macro informs why the _lib_to_find file has not been found\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# save _libname upper/lower case\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# print status\n\n#message(\" \")\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This macro informs why the _lib_to_find file has not been found\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# save _libname upper/lower case\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# print status\n\n#message(\" \")\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#message(\" \")\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check the language being used\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 256,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Print status if not found\n\n# -------------------------\n",
        "Line" : 266,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Print status if not found\n\n# -------------------------\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 338,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# system variables\n",
        "Line" : 353,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# set paths where to look for\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Try to find the fftw header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 399,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# libiomp5\n\n# --------\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# libgomp\n\n# -------\n",
        "Line" : 428,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# choose one or another depending on the compilo\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# m\n",
        "Line" : 448,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# Fortran\n",
        "Line" : 458,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 530,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 541,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# old version\n",
        "Line" : 548,
        "CharPositionInLine" : 5
      },
      "31" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 551,
        "CharPositionInLine" : 5
      },
      "32" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 556,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# old version\n",
        "Line" : 569,
        "CharPositionInLine" : 5
      },
      "34" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 572,
        "CharPositionInLine" : 5
      },
      "35" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 602,
        "CharPositionInLine" : 3
      },
      "36" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 613,
        "CharPositionInLine" : 3
      },
      "37" : {
        "Text" : "# old version\n",
        "Line" : 616,
        "CharPositionInLine" : 5
      },
      "38" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 619,
        "CharPositionInLine" : 5
      },
      "39" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 628,
        "CharPositionInLine" : 3
      },
      "40" : {
        "Text" : "# old version\n",
        "Line" : 641,
        "CharPositionInLine" : 5
      },
      "41" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 644,
        "CharPositionInLine" : 5
      },
      "42" : {
        "Text" : "#older vesions of intel mkl libs\n",
        "Line" : 661,
        "CharPositionInLine" : 3
      },
      "43" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\n",
        "Line" : 709,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# OpenBlas\n",
        "Line" : 733,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# openblas (http://www.openblas.net/)\n",
        "Line" : 737,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# EigenBlas\n",
        "Line" : 761,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# eigenblas (http://eigen.tuxfamily.org/index.php?title=Main_Page)\n",
        "Line" : 765,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# eigenblas (http://eigen.tuxfamily.org/index.php?title=Main_Page)\n",
        "Line" : 784,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 811,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 836,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 864,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 892,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 951,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 979,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# BLAS in IBM ESSL library (requires generic BLAS lib, too)\n",
        "Line" : 1007,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# BLAS in IBM ESSL_MT library (requires generic BLAS lib, too)\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 1062,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# try to find acml in \"standard\" paths\n",
        "Line" : 1069,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\n\n# We'll just use the same directory twice\n",
        "Line" : 1105,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# ACML\n",
        "Line" : 1232,
        "CharPositionInLine" : 65
      },
      "63" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 1235,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 1290,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "third_party/eigen/cmake/FindBLASEXT.cmake" : {
      "ObjectId" : "0fe7fb84931bacf4f7879be412c6abf37c44d175",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2016 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find BLAS EXTENDED for MORSE projects: find include dirs and libraries\n\n#\n\n# This module allows to find BLAS libraries by calling the official FindBLAS module\n\n# and handles the creation of different library lists whether the user wishes to link\n\n# with a sequential BLAS or a multihreaded (BLAS_SEQ_LIBRARIES and BLAS_PAR_LIBRARIES).\n\n# BLAS is detected with a FindBLAS call then if the BLAS vendor is Intel10_64lp, ACML\n\n# or IBMESSLMT then the module attempts to find the corresponding multithreaded libraries.\n\n#\n\n# The following variables have been added to manage links with sequential or multithreaded\n\n# versions:\n\n#  BLAS_INCLUDE_DIRS  - BLAS include directories\n\n#  BLAS_LIBRARY_DIRS  - Link directories for BLAS libraries\n\n#  BLAS_SEQ_LIBRARIES - BLAS component libraries to be linked (sequential)\n\n#  BLAS_PAR_LIBRARIES - BLAS component libraries to be linked (multithreaded)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013-2016 Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# macro to factorize this call\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add a cache variable to let the user specify the BLAS vendor\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# First try to detect two cases:\n\n# 1: only SEQ libs are handled\n\n# 2: both SEQ and PAR libs are handled\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# detect the cases where SEQ and PAR libs are handled\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Intel case\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###\n\n# look for include path if the BLAS vendor is Intel\n\n###\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# gather system include paths\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# find mkl.h inside known include paths\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## Print status if not found\n\n## -------------------------\n\n#if (NOT BLAS_mkl.h_INCLUDE_DIRS AND MORSE_VERBOSE)\n\n#    Print_Find_Header_Status(blas mkl.h)\n\n#endif ()\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "###\n\n# look for libs\n\n###\n\n# if Intel 10 64 bit -> look for sequential and multithreaded versions\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "## look for the sequential version\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "## look for the multithreaded version\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# ACML case\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "## look for the sequential version\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "## look for the multithreaded version\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# IBMESSL case\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "## look for the sequential version\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "## look for the multithreaded version\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# define the SEQ libs as the BLAS_LIBRARIES\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# extract libs paths\n\n# remark: because it is not given by find_package(BLAS)\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# check that BLAS has been found\n\n# ---------------------------------\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "third_party/eigen/cmake/FindCholmod.cmake" : {
      "ObjectId" : "23239c300f1b2004794e9968a825a45fa5bb5ccd",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cholmod lib usually requires linking to a blas and lapack library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/FindComputeCpp.cmake" : {
      "ObjectId" : "07ebed61b9b3eabf8ea5c92ebb2c276bb391c0c8",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindComputeCpp\n\n#---------------\n\n#\n\n#   Copyright 2016 Codeplay Software Ltd.\n\n#\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n\n#   you may not use these files except in compliance with the License.\n\n#   You may obtain a copy of the License at\n\n#\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n#\n\n#   Unless required by applicable law or agreed to in writing, software\n\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n#   See the License for the specific language governing permissions and\n\n#   limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################\n\n#  FindComputeCpp.cmake\n\n#########################\n\n#\n\n#  Tools for finding and building with ComputeCpp.\n\n#\n\n#  User must define COMPUTECPP_PACKAGE_ROOT_DIR pointing to the ComputeCpp\n\n#   installation.\n\n#\n\n#  Latest version of this file can be found at:\n\n#    https://github.com/codeplaysoftware/computecpp-sdk\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Require CMake version 3.2.2 or higher\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check that a supported host compiler can be found\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Require at least gcc 4.8\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Require the GCC dual ABI to be disabled for 5.1 or higher\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Require at least clang 3.6\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Find OpenCL package\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find ComputeCpp packagee\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Obtain the path to compute++\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Obtain the path to computecpp_info\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Obtain the path to the ComputeCpp runtime library\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Obtain the ComputeCpp include directory\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Obtain the package version\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Obtain the device compiler flags\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check if the platform is supported\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "####################\n\n#   __build_sycl\n\n####################\n\n#\n\n#  Adds a custom target for running compute++ and adding a dependency for the\n\n#  resulting integration header.\n\n#\n\n#  targetName : Name of the target.\n\n#  sourceFile : Source file to be compiled.\n\n#  binaryDir : Intermediate directory to output the integration header.\n\n#\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Retrieve source file name.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Set the path to the Sycl file.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Add any user-defined include to the device compiler\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Convert argument list format\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Add custom command for running compute++\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add a custom target for the generated integration header\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Add a dependency on the integration header\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Set the host compiler C++ standard to C++11\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Disable GCC dual ABI on GCC 5.1 and higher\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#######################\n\n#  add_sycl_to_target\n\n#######################\n\n#\n\n#  Adds a SYCL compilation custom command associated with an existing\n\n#  target and sets a dependancy on that new command.\n\n#\n\n#  targetName : Name of the target to add a SYCL to.\n\n#  sourceFile : Source file to be compiled for SYCL.\n\n#  binaryDir : Intermediate directory to output the integration header.\n\n#\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Add custom target to run compute++ and generate the integration header\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Link with the ComputeCpp runtime library\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "third_party/eigen/cmake/FindEigen2.cmake" : {
      "ObjectId" : "a834b887286045fcdc381633ec95bf204834aadf",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen2 2.0.3)\n\n# to require version 2.0.3 to newer of Eigen2.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib with correct version\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN2_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "third_party/eigen/cmake/FindEigen3.cmake" : {
      "ObjectId" : "9e969786089ca8ea3801be8b084c51a5782f09b5",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# search first if an Eigen3Config.cmake is available in the system,\n\n# if successful this would set EIGEN3_INCLUDE_DIR and the rest of\n\n# the script will work as usual\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "third_party/eigen/cmake/FindFFTW.cmake" : {
      "ObjectId" : "6c4dc9ab495d5ab56b6b3943b2c53200b35c5ee8",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the FFTW library\n\n#\n\n# Usage:\n\n#   find_package(FFTW [REQUIRED] [QUIET] )\n\n#     \n\n# It sets the following variables:\n\n#   FFTW_FOUND               ... true if fftw is found on the system\n\n#   FFTW_LIBRARIES           ... full path to fftw library\n\n#   FFTW_INCLUDES            ... fftw include directory\n\n#\n\n# The following variables will be checked by the function\n\n#   FFTW_USE_STATIC_LIBS    ... if true, only static libraries are found\n\n#   FFTW_ROOT               ... if set, the libraries are exclusively searched\n\n#                               under this path\n\n#   FFTW_LIBRARY            ... fftw library to use\n\n#   FFTW_INCLUDE_DIR        ... fftw include directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#If environment variable FFTWDIR is specified, it has same effect as FFTW_ROOT\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if we can use PkgConfig\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Determine from PKG\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Check whether to search static or dynamic libs\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#find libs\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#find includes\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "third_party/eigen/cmake/FindGLEW.cmake" : {
      "ObjectId" : "54da20f12bdba627f0d90fb8d225e4995b92ea7c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2009 Boudewijn Rempt <boud@valdyas.org>                                                                                          \n\n#                                                                                                                                                \n\n# Redistribution and use is allowed according to the terms of the BSD license.                                                                   \n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file. \n\n# \n\n# - try to find glew library and include files\n\n#  GLEW_INCLUDE_DIR, where to find GL/glew.h, etc.\n\n#  GLEW_LIBRARIES, the libraries to link against\n\n#  GLEW_FOUND, If false, do not try to use GLEW.\n\n# Also defined, but not for general use are:\n\n#  GLEW_GLEW_LIBRARY = the full path to the glew library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These values for Apple could probably do with improvement.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is -lXi and -lXmu required on all platforms that have it?\n\n# If not, we need some way to figure out what platform we are on.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#The following deprecated settings are for backwards compatibility with CMake1.4\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third_party/eigen/cmake/FindGMP.cmake" : {
      "ObjectId" : "1f0273960142810512c933c53e2ff8de7ab9d428",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GNU Multiple Precision Arithmetic Library (GMP)\n\n# See http://gmplib.org/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/FindGSL.cmake" : {
      "ObjectId" : "bf411a7f9814843a67465198cb61c82e59c4beff",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find gnu scientific library GSL\n\n# See \n\n# http://www.gnu.org/software/gsl/  and\n\n# http://gnuwin32.sourceforge.net/packages/gsl.htm\n\n#\n\n# Once run this will define: \n\n# \n\n# GSL_FOUND       = system has GSL lib\n\n#\n\n# GSL_LIBRARIES   = full path to the libraries\n\n#    on Unix/Linux with additional linker flags from \"gsl-config --libs\"\n\n# \n\n# CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially \"`gsl-config --cxxflags`\"\n\n#\n\n# GSL_INCLUDE_DIR      = where to find headers \n\n#\n\n# GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix\n\n# GSL_EXE_LINKER_FLAGS = rpath on Unix\n\n#\n\n# Felix Woelk 07/2004\n\n# Jan Woetzel\n\n#\n\n# www.mip.informatik.uni-kiel.de\n\n# --------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JW tested with gsl-1.8, Windows XP, MSVS 7.1\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#MESSAGE(\"DBG\\n\"\n\n#  \"GSL_GSL_LIBRARY=${GSL_GSL_LIBRARY}\\n\"\n\n#  \"GSL_GSLCBLAS_LIBRARY=${GSL_GSLCBLAS_LIBRARY}\\n\"\n\n#  \"GSL_LIBRARIES=${GSL_LIBRARIES}\")\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# MESSAGE(\"DBG GSL_CONFIG ${GSL_CONFIG}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# set CXXFLAGS to be fed into CXX_FLAGS by the user:\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# set INCLUDE_DIRS to prefix+include\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# set link libraries and link flags\n\n#SET(GSL_LIBRARIES \"`${GSL_CONFIG} --libs`\")\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# extract link dirs for rpath  \n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# extract version\n",
        "Line" : 117,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# split version as major/minor\n",
        "Line" : 122,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# split off the link dirs (for rpath)\n\n# use regular expression to match wildcard equivalent \"-L*<endchar>\"\n\n# with <endchar> is a space or a semicolon\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES_WITH_PREFIX=${GSL_LINK_DIRECTORIES_WITH_PREFIX}\")\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# remove prefix -L because we need the pure directory for LINK_DIRECTORIES\n",
        "Line" : 136,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES=${GSL_LINK_DIRECTORIES}\")\n\n#      MESSAGE(\"DBG  GSL_EXE_LINKER_FLAGS=${GSL_EXE_LINKER_FLAGS}\")\n",
        "Line" : 142,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#      ADD_DEFINITIONS(\"-DHAVE_GSL\")\n\n#      SET(GSL_DEFINITIONS \"-DHAVE_GSL\")\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 15
    },
    "third_party/eigen/cmake/FindGoogleHash.cmake" : {
      "ObjectId" : "f6a81a02ce9dbac0710ef2b5e46eb8b9c5aa5999",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# let's make sure it compiles with the current compiler\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/FindHWLOC.cmake" : {
      "ObjectId" : "a831b5c725acc0b88dfba169e3ed477dd5bf2910",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find HWLOC include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(HWLOC\n\n#               [REQUIRED]) # Fail with error if hwloc is not found\n\n#\n\n# This module finds headers and hwloc library.\n\n# Results are reported in variables:\n\n#  HWLOC_FOUND           - True if headers and requested libraries were found\n\n#  HWLOC_INCLUDE_DIRS    - hwloc include directories\n\n#  HWLOC_LIBRARY_DIRS    - Link directories for hwloc libraries\n\n#  HWLOC_LIBRARIES       - hwloc component libraries to be linked\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DHWLOC_DIR=path/to/hwloc):\n\n#  HWLOC_DIR             - Where to find the base directory of hwloc\n\n#  HWLOC_INCDIR          - Where to find the header files\n\n#  HWLOC_LIBDIR          - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: HWLOC_DIR, HWLOC_INCDIR, HWLOC_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optionally use pkg-config to detect include/library dirs (if pkg-config is available)\n\n# -------------------------------------------------------------------------------------\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if(NOT HWLOC_INCLUDE_DIRS)\n\n#    message(\"${Magenta}HWLOC_INCLUDE_DIRS is empty using PkgConfig.\"\n\n#        \"Perhaps the path to hwloc headers is already present in your\"\n\n#        \"C(PLUS)_INCLUDE_PATH environment variable.${ColourReset}\")\n\n#endif()\n",
        "Line" : 76,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# set paths where to look for\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Try to find the hwloc header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# set paths where to look for\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Try to find the hwloc lib in the given paths\n\n# ----------------------------------------------\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set cmake variables (respects naming convention)\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# HWLOC\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# test link\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# check that HWLOC has been found\n\n# -------------------------------\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# test headers to guess the version\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "third_party/eigen/cmake/FindLAPACK.cmake" : {
      "ObjectId" : "2fcae2199f5f55f707089108301eb2c0a350671d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find LAPACK library\n\n#\n\n# This module finds an installed library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n# The approach follows mostly that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface\n\n#    is found\n\n#  LAPACK_INCLUDE_DIR - Directories containing the LAPACK header files\n\n#  LAPACK_DEFINITIONS - Compilation options to use LAPACK\n\n#  LAPACK_LINKER_FLAGS - Linker flags to use LAPACK (excluding -l\n\n#    and -L).\n\n#  LAPACK_LIBRARIES_DIR - Directories containing the LAPACK libraries.\n\n#     May be null if LAPACK_LIBRARIES contains libraries name using full path.\n\n#  LAPACK_LIBRARIES - List of libraries to link against LAPACK interface.\n\n#     May be null if the compiler supports auto-link (e.g. VC++).\n\n#  LAPACK_USE_FILE - The name of the cmake module to include to compile\n\n#     applications or libraries using LAPACK.\n\n#\n\n# This module was modified by CGAL team:\n\n# - find libraries for a C++ compiler, instead of Fortran\n\n# - added LAPACK_INCLUDE_DIR, LAPACK_DEFINITIONS and LAPACK_LIBRARIES_DIR\n\n# - removed LAPACK95_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# check_function_exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found and DEFINITIONS to the required definitions.\n\n# Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"DEBUG: check_lapack_libraries(${_list} in ${_path} with ${_blas})\")\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check for the existence of the libraries given by _list\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# search first in ${_path}\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# if not found, search in environment variables and system\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test this combination of libraries with the Fortran/f2c interface.\n\n# We test the Fortran interface first as it is well standardized.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some C++ linkers require the f2c library to link with Fortran libraries.\n\n# I do not know which ones, thus I just add the f2c library if it is available.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_DEFINITIONS = ${CMAKE_REQUIRED_DEFINITIONS}\")\n\n#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n\n# Check if function exists with f2c calling convention (ie a trailing underscore)\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# If not found, test this combination of libraries with a C interface.\n\n# A few implementations (ie ACML) provide a C interface. Unfortunately, there is no standard.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# on failure\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(\"DEBUG: ${DEFINITIONS} = ${${DEFINITIONS}}\")\n\n#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# main\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# LAPACK requires BLAS\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# reset variables\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# unused (yet)\n",
        "Line" : 158,
        "CharPositionInLine" : 32
      },
      "18" : {
        "Text" : "#\n\n# If Unix, search for LAPACK function in possible libraries\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#intel mkl lapack?\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#acml lapack?\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Apple LAPACK library?\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Generic LAPACK library?\n\n# This configuration *must* be the last try as this library is notably slow.\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Add variables to cache\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#message(\"DEBUG: LAPACK_INCLUDE_DIR = ${LAPACK_INCLUDE_DIR}\")\n\n#message(\"DEBUG: LAPACK_DEFINITIONS = ${LAPACK_DEFINITIONS}\")\n\n#message(\"DEBUG: LAPACK_LINKER_FLAGS = ${LAPACK_LINKER_FLAGS}\")\n\n#message(\"DEBUG: LAPACK_LIBRARIES = ${LAPACK_LIBRARIES}\")\n\n#message(\"DEBUG: LAPACK_LIBRARIES_DIR = ${LAPACK_LIBRARIES_DIR}\")\n\n#message(\"DEBUG: LAPACK_FOUND = ${LAPACK_FOUND}\")\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "third_party/eigen/cmake/FindMPFR.cmake" : {
      "ObjectId" : "aa4c2cd7d29c65f88dd63b5507b9f1aeeeb3f7a6",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR library\n\n# See http://www.mpfr.org/\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(MPFR 2.3.0)\n\n# to require version 2.3.0 to newer of MPFR.\n\n#\n\n# Once done this will define\n\n#\n\n#  MPFR_FOUND - system has MPFR lib with correct version\n\n#  MPFR_INCLUDES - the MPFR include directory\n\n#  MPFR_LIBRARIES - the MPFR library\n\n#  MPFR_VERSION - MPFR version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2010 Jitse Niesen, <jitse@maths.leeds.ac.uk>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MPFR_INCLUDES\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MPFR_FIND_VERSION to 1.0.0 if no minimum version is specified\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set MPFR_VERSION\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check whether found version exceeds minimum version\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set MPFR_LIBRARIES\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Epilogue\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "third_party/eigen/cmake/FindMetis.cmake" : {
      "ObjectId" : "da2f1f1d7b056f97a185b9da672bfc2cd4cbb220",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find METIS include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(METIS\n\n#               [REQUIRED]             # Fail with error if metis is not found\n\n#              )\n\n#\n\n# This module finds headers and metis library.\n\n# Results are reported in variables:\n\n#  METIS_FOUND           - True if headers and requested libraries were found\n\n#  METIS_INCLUDE_DIRS    - metis include directories\n\n#  METIS_LIBRARY_DIRS    - Link directories for metis libraries\n\n#  METIS_LIBRARIES       - metis component libraries to be linked\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DMETIS_DIR=path/to/metis):\n\n#  METIS_DIR             - Where to find the base directory of metis\n\n#  METIS_INCDIR          - Where to find the header files\n\n#  METIS_LIBDIR          - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: METIS_DIR, METIS_INCDIR, METIS_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Try to find the metis header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try to find the metis lib in the given paths\n\n# ----------------------------------------------\n\n# call cmake macro to find the lib path\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set cmake variables\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# METIS\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# m\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# test link\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# check that METIS has been found\n\n# ---------------------------------\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# TODO: Add possibility to check for specific functions in the library\n\n#\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "third_party/eigen/cmake/FindPTSCOTCH.cmake" : {
      "ObjectId" : "1396d05824d182d756a15ab9db14397689ea8565",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2016 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find PTSCOTCH include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(PTSCOTCH\n\n#               [REQUIRED]             # Fail with error if ptscotch is not found\n\n#               [COMPONENTS <comp1> <comp2> ...] # dependencies\n\n#              )\n\n#\n\n#  PTSCOTCH depends on the following libraries:\n\n#   - Threads\n\n#   - MPI\n\n#\n\n#  COMPONENTS can be some of the following:\n\n#   - ESMUMPS: to activate detection of PT-Scotch with the esmumps interface\n\n#\n\n# This module finds headers and ptscotch library.\n\n# Results are reported in variables:\n\n#  PTSCOTCH_FOUND            - True if headers and requested libraries were found\n\n#  PTSCOTCH_LINKER_FLAGS     - list of required linker flags (excluding -l and -L)\n\n#  PTSCOTCH_INCLUDE_DIRS     - ptscotch include directories\n\n#  PTSCOTCH_LIBRARY_DIRS     - Link directories for ptscotch libraries\n\n#  PTSCOTCH_LIBRARIES        - ptscotch component libraries to be linked\n\n#  PTSCOTCH_INCLUDE_DIRS_DEP - ptscotch + dependencies include directories\n\n#  PTSCOTCH_LIBRARY_DIRS_DEP - ptscotch + dependencies link directories\n\n#  PTSCOTCH_LIBRARIES_DEP    - ptscotch libraries + dependencies\n\n#  PTSCOTCH_INTSIZE          - Number of octets occupied by a SCOTCH_Num\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DPTSCOTCH=path/to/ptscotch):\n\n#  PTSCOTCH_DIR              - Where to find the base directory of ptscotch\n\n#  PTSCOTCH_INCDIR           - Where to find the header files\n\n#  PTSCOTCH_LIBDIR           - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: PTSCOTCH_DIR, PTSCOTCH_INCDIR, PTSCOTCH_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013-2016 Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the version to find\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# means we look for esmumps library\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# PTSCOTCH depends on Threads, try to find it\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# PTSCOTCH depends on MPI, try to find it\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try to find the ptscotch header in the given paths\n\n# -------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# call cmake macro to find the header path\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Try to find the ptscotch lib in the given paths\n\n# ----------------------------------------------\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# set cmake variables\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# PTSCOTCH\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# MPI\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# THREADS\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 321,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# test link\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# save link with dependencies\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Check the size of SCOTCH_Num\n\n# ---------------------------------\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#stdio.h and stdint.h should be included by scotch.h directly\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# check that PTSCOTCH has been found\n\n# ---------------------------------\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\n\n# TODO: Add possibility to check for specific functions in the library\n\n#\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "third_party/eigen/cmake/FindPastix.cmake" : {
      "ObjectId" : "470477fdccb95ef8977536589dba5851c16fa7d7",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find PASTIX include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(PASTIX\n\n#               [REQUIRED] # Fail with error if pastix is not found\n\n#               [COMPONENTS <comp1> <comp2> ...] # dependencies\n\n#              )\n\n#\n\n#  PASTIX depends on the following libraries:\n\n#   - Threads, m, rt\n\n#   - MPI\n\n#   - HWLOC\n\n#   - BLAS\n\n#\n\n#  COMPONENTS are optional libraries PASTIX could be linked with,\n\n#  Use it to drive detection of a specific compilation chain\n\n#  COMPONENTS can be some of the following:\n\n#   - MPI: to activate detection of the parallel MPI version (default)\n\n#        it looks for Threads, HWLOC, BLAS, MPI and ScaLAPACK libraries\n\n#   - SEQ: to activate detection of the sequential version (exclude MPI version)\n\n#   - STARPU: to activate detection of StarPU version\n\n#   it looks for MPI version of StarPU (default behaviour)\n\n#   if SEQ and STARPU are given, it looks for a StarPU without MPI\n\n#   - STARPU_CUDA: to activate detection of StarPU with CUDA\n\n#   - STARPU_FXT: to activate detection of StarPU with FxT\n\n#   - SCOTCH: to activate detection of PASTIX linked with SCOTCH\n\n#   - PTSCOTCH: to activate detection of PASTIX linked with SCOTCH\n\n#   - METIS: to activate detection of PASTIX linked with SCOTCH\n\n#\n\n# This module finds headers and pastix library.\n\n# Results are reported in variables:\n\n#  PASTIX_FOUND            - True if headers and requested libraries were found\n\n#  PASTIX_LINKER_FLAGS     - list of required linker flags (excluding -l and -L)\n\n#  PASTIX_INCLUDE_DIRS     - pastix include directories\n\n#  PASTIX_LIBRARY_DIRS     - Link directories for pastix libraries\n\n#  PASTIX_LIBRARIES        - pastix libraries\n\n#  PASTIX_INCLUDE_DIRS_DEP - pastix + dependencies include directories\n\n#  PASTIX_LIBRARY_DIRS_DEP - pastix + dependencies link directories\n\n#  PASTIX_LIBRARIES_DEP    - pastix libraries + dependencies\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DPASTIX_DIR=path/to/pastix):\n\n#  PASTIX_DIR              - Where to find the base directory of pastix\n\n#  PASTIX_INCDIR           - Where to find the header files\n\n#  PASTIX_LIBDIR           - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: PASTIX_DIR, PASTIX_INCDIR, PASTIX_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the version to find\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# means we look for the sequential version of PaStiX (without MPI)\n",
        "Line" : 96,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# means we look for the MPI version of PaStiX (default)\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# means we look for PaStiX with StarPU\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# means we look for PaStiX with StarPU + CUDA\n",
        "Line" : 110,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# means we look for PaStiX with StarPU + FxT\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Dependencies detection\n\n# ----------------------\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Required dependencies\n\n# ---------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add math library to the list of extra\n\n# it normally exists on all common systems provided with a C compiler\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Try to find librt (libposix4 - POSIX.1b Realtime Extensions library)\n\n# on Unix systems except Apple ones because it does not exist on it\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# PASTIX depends on HWLOC\n\n#------------------------\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# PASTIX depends on BLAS\n\n#-----------------------\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Optional dependencies\n\n# ---------------------\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# PASTIX may depend on MPI\n\n#-------------------------\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# allows to use an external mpi compilation by setting compilers with\n\n# -DMPI_C_COMPILER=path/to/mpicc -DMPI_Fortran_COMPILER=path/to/mpif90\n\n# at cmake configure\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# PASTIX may depend on STARPU\n\n#----------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# create list of components in order to make a single call to find_package(starpu...)\n\n# we explicitly need a StarPU version built with hwloc\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# StarPU may depend on MPI\n\n# allows to use an external mpi compilation by setting compilers with\n\n# -DMPI_C_COMPILER=path/to/mpicc -DMPI_Fortran_COMPILER=path/to/mpif90\n\n# at cmake configure\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# set the list of optional dependencies we may discover\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# PASTIX may depends on SCOTCH\n\n#-----------------------------\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# PASTIX may depends on PTSCOTCH\n\n#-------------------------------\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# PASTIX may depends on METIS\n\n#----------------------------\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Error if pastix required and no partitioning lib found\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Looking for PaStiX\n\n# ------------------\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Try to find the pastix header in the given paths\n\n# ---------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Try to find the pastix lib in the given paths\n\n# ------------------------------------------------\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# create list of libs to find\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# set cmake variables (respects naming convention)\n",
        "Line" : 468,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# PASTIX\n",
        "Line" : 491,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# STARPU\n",
        "Line" : 501,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# CUDA\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# MPI\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# HWLOC\n",
        "Line" : 550,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# BLAS\n",
        "Line" : 568,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# SCOTCH\n",
        "Line" : 583,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# PTSCOTCH\n",
        "Line" : 595,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# METIS\n",
        "Line" : 607,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Fortran\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# EXTRA LIBS such that pthread, m, rt\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 644,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# test link\n",
        "Line" : 655,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# save link with dependencies\n",
        "Line" : 662,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# check that PASTIX has been found\n\n# ---------------------------------\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "third_party/eigen/cmake/FindSPQR.cmake" : {
      "ObjectId" : "1e958c3c1b7210602e2cdb4c4e92d42187f58156",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPQR lib usually requires linking to a blas and lapack library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SPQR lib requires Cholmod, colamd and amd as well. \n\n# FindCholmod.cmake can be used to find those packages before finding spqr\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/cmake/FindScotch.cmake" : {
      "ObjectId" : "89d295ac2eb782e87c3ca8cf003b048c00bb2974",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n# @copyright (c) 2009-2014 The University of Tennessee and The University\n\n#                          of Tennessee Research Foundation.\n\n#                          All rights reserved.\n\n# @copyright (c) 2012-2014 Inria. All rights reserved.\n\n# @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria, Univ. Bordeaux. All rights reserved.\n\n#\n\n###\n\n#\n\n# - Find SCOTCH include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(SCOTCH\n\n#               [REQUIRED]             # Fail with error if scotch is not found\n\n#               [COMPONENTS <comp1> <comp2> ...] # dependencies\n\n#              )\n\n#\n\n#  COMPONENTS can be some of the following:\n\n#   - ESMUMPS: to activate detection of Scotch with the esmumps interface\n\n#\n\n# This module finds headers and scotch library.\n\n# Results are reported in variables:\n\n#  SCOTCH_FOUND           - True if headers and requested libraries were found\n\n#  SCOTCH_INCLUDE_DIRS    - scotch include directories\n\n#  SCOTCH_LIBRARY_DIRS    - Link directories for scotch libraries\n\n#  SCOTCH_LIBRARIES       - scotch component libraries to be linked\n\n#  SCOTCH_INTSIZE         - Number of octets occupied by a SCOTCH_Num\n\n#\n\n# The user can give specific paths where to find the libraries adding cmake\n\n# options at configure (ex: cmake path/to/project -DSCOTCH=path/to/scotch):\n\n#  SCOTCH_DIR             - Where to find the base directory of scotch\n\n#  SCOTCH_INCDIR          - Where to find the header files\n\n#  SCOTCH_LIBDIR          - Where to find the library files\n\n# The module can also look for the following environment variables if paths\n\n# are not given as cmake variable: SCOTCH_DIR, SCOTCH_INCDIR, SCOTCH_LIBDIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012-2013 Inria\n\n# Copyright 2012-2013 Emmanuel Agullo\n\n# Copyright 2012-2013 Mathieu Faverge\n\n# Copyright 2012      Cedric Castagnede\n\n# Copyright 2013      Florent Pruvost\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file MORSE-Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of Morse, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the version to find\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# means we look for esmumps library\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# SCOTCH may depend on Threads, try to find it\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Looking for include\n\n# -------------------\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add system include paths to search include\n\n# ------------------------------------------\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Try to find the scotch header in the given paths\n\n# -------------------------------------------------\n\n# call cmake macro to find the header path\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Looking for lib\n\n# ---------------\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add system library paths to search lib\n\n# --------------------------------------\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Try to find the scotch lib in the given paths\n\n# ----------------------------------------------\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# call cmake macro to find the lib path\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If found, add path to cmake variable\n\n# ------------------------------------\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# set cmake variables\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# check a function to validate the find\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# SCOTCH\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# THREADS\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# set required libraries for link\n",
        "Line" : 275,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# test link\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# save link with dependencies\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Check the size of SCOTCH_Num\n\n# ---------------------------------\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#stdio.h and stdint.h should be included by scotch.h directly\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# check that SCOTCH has been found\n\n# ---------------------------------\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# TODO: Add possibility to check for specific functions in the library\n\n#\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "third_party/eigen/cmake/FindStandardMathLibrary.cmake" : {
      "ObjectId" : "711b0e4b4f1d82323123088b4ef04cd0836b5f9f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find how to link to the standard math library, if anything at all is needed to do.\n\n# On most platforms this is automatic, but for example it's not automatic on QNX.\n\n#\n\n# Once done this will define\n\n#\n\n#  STANDARD_MATH_LIBRARY_FOUND - we found how to successfully link to the standard math library\n\n#  STANDARD_MATH_LIBRARY - the name of the standard library that one has to link to.\n\n#                            -- this will be left empty if it's automatic (most platforms).\n\n#                            -- this will be set to \"m\" on platforms where one must explicitly\n\n#                               pass the \"-lm\" linker flag.\n\n#\n\n# Copyright (c) 2010 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# a little test program for c++ math functions.\n\n# notice the std:: is required on some platforms such as QNX\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first try compiling/linking the test program without any linker flags\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the test program linked successfully without any linker flag.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# the test program did not link successfully without any linker flag.\n\n# This is a very uncommon case that so far we only saw on QNX. The next try is the\n\n# standard name 'm' for the standard math library.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# the test program linked successfully when linking to the 'm' library\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# the test program still doesn't link successfully\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "third_party/eigen/cmake/FindSuperLU.cmake" : {
      "ObjectId" : "f38146e06c229d99df6bd80c6b00407e5a69a425",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Umfpack lib usually requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check whether struct mem_usage_t is globally defined\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# at least 5.0\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# at least 4.3\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# at least 4.0\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "third_party/eigen/cmake/FindUmfpack.cmake" : {
      "ObjectId" : "53cf0b49b2e23d3b8e8334e2ee53e69e313f6fbd",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Umfpack lib usually requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/RegexUtils.cmake" : {
      "ObjectId" : "b59dfc340f524d25add382306ba143e662baabdb",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/cmake/UseEigen3.cmake" : {
      "ObjectId" : "a38bac82d5df40d5cbc086bcdcdcfbece8499919",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#                                               -*- cmake -*-\n\n#\n\n#  UseEigen3.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/eigen/cmake/language_support.cmake" : {
      "ObjectId" : "ddba509459fdc3677002789f558c11fc3f0cc57f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/modules/language_support.cmake\n\n#\n\n# Temporary additional general language support is contained within this\n\n# file.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This additional function definition is needed to provide a workaround for\n\n# CMake bug 9220.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On debian testing (cmake 2.6.2), I get return code zero when calling \n\n# cmake the first time, but cmake crashes when running a second time\n\n# as follows:\n\n#\n\n#  -- The Fortran compiler identification is unknown\n\n#  CMake Error at /usr/share/cmake-2.6/Modules/CMakeFortranInformation.cmake:7 (GET_FILENAME_COMPONENT):\n\n#    get_filename_component called with incorrect number of arguments\n\n#  Call Stack (most recent call first):\n\n#    CMakeLists.txt:3 (enable_language)\n\n#\n\n# My workaround is to invoke cmake twice.  If both return codes are zero, \n\n# it is safe to invoke ENABLE_LANGUAGE(Fortran OPTIONAL)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"DEBUG: language = ${language}\")\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Second run\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Temporary tests of the above function.\n\n#workaround_9220(CXX CXX_language_works)\n\n#message(\"CXX_language_works = ${CXX_language_works}\")\n\n#workaround_9220(CXXp CXXp_language_works)\n\n#message(\"CXXp_language_works = ${CXXp_language_works}\")\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "third_party/eigen/demos/CMakeLists.txt" : {
      "ObjectId" : "b0d2eddbb8eaaf87a668274fbe63bddfb02ac792",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/demos/mandelbrot/CMakeLists.txt" : {
      "ObjectId" : "5c500e064dec6a01c8b203e250f746d26b7e626f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/demos/opengl/CMakeLists.txt" : {
      "ObjectId" : "299aa441df95a47c84443068c95ad19ecee42516",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/doc/CMakeLists.txt" : {
      "ObjectId" : "8ff7559885e1bc2369bb7ba8fa2873569ea6ce90",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set some Doxygen flags\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(EIGEN_DOXY_TAGFILES                 \"\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/eigen/doc/examples/CMakeLists.txt" : {
      "ObjectId" : "f7a19055fce2693d956bd3c5b843bf285f12307c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/doc/snippets/CMakeLists.txt" : {
      "ObjectId" : "1baf32fbac0274410133f90070f21368991c7910",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/doc/special_examples/CMakeLists.txt" : {
      "ObjectId" : "66ba4deeeb1f2f4989506c3903b1fc867ba93ee6",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/failtest/CMakeLists.txt" : {
      "ObjectId" : "1a73f05e629067a275b3c14d41bb7f4d654fad3c",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/lapack/CMakeLists.txt" : {
      "ObjectId" : "6df1fa9584bba2556c01cb660669ce3d1afc2a70",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download lapack and install sources and testing at the right place\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The following comes from lapack/TESTING/CMakeLists.txt\n\n# Get Python\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  string(REPLACE \"/STACK:10000000\" \"/STACK:900000000000000000\"\n\n#    CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\")\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# ======== SINGLE RFP LIN TESTS ========================\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n#\n\n# ======== SINGLE EIG TESTS ===========================\n\n#\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# ======== DOUBLE LIN TESTS ===========================\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\n\n# ======== DOUBLE RFP LIN TESTS ========================\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# ======== DOUBLE EIG TESTS ===========================\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n# ======== COMPLEX RFP LIN TESTS ========================\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\n\n# ======== COMPLEX EIG TESTS ===========================\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\n\n# ======== COMPLEX16 LIN TESTS ========================\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\n\n# ======== COMPLEX16 RFP LIN TESTS ========================\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#\n\n# ======== COMPLEX16 EIG TESTS ===========================\n",
        "Line" : 361,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# ======== SINGLE-DOUBLE PROTO LIN TESTS ==============\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# ======== COMPLEX-COMPLEX16 LIN TESTS ========================\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "third_party/eigen/scripts/CMakeLists.txt" : {
      "ObjectId" : "0d9a631a9dd0d46b726703af0e51d5f49fddf029",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/test/CMakeLists.txt" : {
      "ObjectId" : "0747aa6cb65a40a47fdee2685a2798f93c481ea0",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate split test header file only if it does not yet exist\n\n# in order to prevent a rebuild everytime cmake is configured\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check if we have a Fortran compiler\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for a default Lapack library to complete Eigen's one\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# configure blas/lapack (use Eigen's ones)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check that the PASTIX found is a version without MPI\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# # ei_add_test(denseLM)\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# boost MP unit test\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CUDA unit tests\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "third_party/eigen/unsupported/CMakeLists.txt" : {
      "ObjectId" : "9a5666105a95bfac9c18c2913f14ad74d998162b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 5,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 1
    },
    "third_party/eigen/unsupported/Eigen/CMakeLists.txt" : {
      "ObjectId" : "631a060145bd633e573e65e2db885cf78a970a01",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/unsupported/Eigen/CXX11/CMakeLists.txt" : {
      "ObjectId" : "385ed240c20773bf47cdfd6765ad6227508a9ae8",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/unsupported/Eigen/src/EulerAngles/CMakeLists.txt" : {
      "ObjectId" : "40af550e8a92987c7846e53e22d30c180a368492",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/unsupported/doc/CMakeLists.txt" : {
      "ObjectId" : "9e9ab98007eb189f2625f7fdd3c232c2d3da4e3b",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/unsupported/doc/examples/CMakeLists.txt" : {
      "ObjectId" : "c47646dfca9d76e45cf929d74508e32698d96ee3",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/unsupported/doc/snippets/CMakeLists.txt" : {
      "ObjectId" : "f0c5cc2a84dd65edd575963bf648a1481f9b1dde",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/eigen/unsupported/test/CMakeLists.txt" : {
      "ObjectId" : "3a8775a1cc189738296d555255820d26fe6942fb",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate split test header file only if it does not yet exist\n\n# in order to prevent a rebuild everytime cmake is configured\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this test seems to never have been successful on x87, so is considered to contain a FP-related bug.\n\n# see thread: \"non-linear optimization test summary\"\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: The following test names are prefixed with the cxx11 string, since historically\n\n# the tests depended on c++11. This isn't the case anymore so we ought to rename them.\n\n# FIXME: Old versions of MSVC fail to compile this code, so we just disable these tests\n\n# when using visual studio. We should make the check more strict to enable the tests for\n\n# newer versions of MSVC.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This test requires __uint128_t which is only available on 64bit systems\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# It should be safe to always run these tests as there is some fallback code for\n\n# older compiler that don't support cxx11.\n\n# This is already set if EIGEN_TEST_CXX11 is enabled:\n\n# set(CMAKE_CXX_STANDARD 11)\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#  ei_add_test(cxx11_tensor_symmetry)\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# These tests needs nvcc\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure to compile without the -pedantic, -Wundef, -Wnon-virtual-dtor\n\n# and -fno-check-new flags since they trigger thousands of compilation warnings\n\n# in the CUDA runtime\n\n# Also remove -ansi that is incompatible with std=c++11.\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# otherwise the flag has already been added because of the above set(CMAKE_CXX_STANDARD 11)\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Contractions require arch 3.0 or higher\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# The random number generation code requires arch 3.5 or greater.\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "third_party/gtest/CMakeLists.txt" : {
      "ObjectId" : "8d2b552ef7ad9f18d6d3293efedfea7c9964324f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/gtest/googlemock/CMakeLists.txt" : {
      "ObjectId" : "09dbe0a70a43a71e0060aaa6f85ac86fe84344aa",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 56,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 62,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n\n# install(TARGETS gmock gmock_main\n\n#   DESTINATION lib)\n\n# install(DIRECTORY ${gmock_SOURCE_DIR}/include/gmock\n\n#   DESTINATION include)\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 163,
        "CharPositionInLine" : 43
      },
      "23" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "third_party/gtest/googlemock/Makefile.am" : {
      "ObjectId" : "9adbc5163dd7191a14a887a384fb5d6d2956b44d",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "third_party/gtest/googlemock/make/Makefile" : {
      "ObjectId" : "7c13e05fa961dd3a37ee05def12de08ce0e86a88",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "third_party/gtest/googletest/CMakeLists.txt" : {
      "ObjectId" : "ee6386407d36d78d9489428975ecf6ab87ac0a25",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n\n# install(TARGETS gtest gtest_main\n\n#   DESTINATION lib)\n\n# install(DIRECTORY ${gtest_SOURCE_DIR}/include/gtest\n\n#   DESTINATION include)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 232,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "third_party/gtest/googletest/Makefile.am" : {
      "ObjectId" : "29797e4e9de4e1d5e5f93bba14288de87f623946",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "third_party/gtest/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "777b91ed4b8caa226ea55cfa61fe7ec433ffb452",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 83,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 126,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "third_party/gtest/googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "third_party/gtest/googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "third_party/kiva-ep/CMakeLists.txt" : {
      "ObjectId" : "372d11e295e48d66a562d92d90597684c7160547",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Testing\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/kiva-ep/cmake/FindGcov.cmake" : {
      "ObjectId" : "715da6ede4ef862fd8745f6be1bc2aec0a749608",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2016 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include required Modules\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for gcov binary.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Gcov evaluation is dependend on the used compiler. Check gcov support for\n\n# each compiler that is used. If gcov binary was already found for this\n\n# compiler, do not try to find it again.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Some distributions like OSX (homebrew) ship gcov with the compiler\n\n# version appended as gcov-x. To find this binary we'll build the\n\n# suggested binary name with the compiler version.\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Some distributions like Debian ship llvm-cov with the compiler\n\n# version appended as llvm-cov-x.y. To find this binary we'll build\n\n# the suggested binary name with the compiler version.\n",
        "Line" : 39,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# llvm-cov prior version 3.5 seems to be not working with coverage\n\n# evaluation tools, but these versions are compatible with the gcc\n\n# gcov tool.\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# set additional parameters\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Fall back to gcov binary if llvm-cov was not found or is\n\n# incompatible. This is the default on OSX, but may crash on\n\n# recent Linux versions.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add a new global target for all gcov targets. This target could be used to\n\n# generate the gcov files for the whole project instead of calling <TARGET>-gcov\n\n# for each target.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This function will add gcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# Gcov on any source file of <TNAME> once and store the gcov file in the same\n\n# directory.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# call gcov\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add target for gcov evaluation of <TNAME>\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# add evaluation target to the global gcov target.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "third_party/kiva-ep/cmake/FindLcov.cmake" : {
      "ObjectId" : "a7bb92c282b0289f07fe1feb9599c8c3d19e86c3",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2016 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configuration\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for Gcov which is used by Lcov.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This function will add lcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# geninfo on any source file of <TNAME> once and store the info file in the same\n\n# directory.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# capture initial coverage data\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# capture coverage data after execution\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# include required Modules\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for required lcov binaries.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# enable genhtml C++ demangeling, if c++filt is found.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# enable no-external flag for lcov, if available.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If Lcov was not found, exit module now.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create directories to be used.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This function will merge lcov files to a single target file. Additional lcov\n\n# flags may be set with setting LCOV_EXTRA_FLAGS before calling this function.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Remove ${OUTFILE} from ${ARGV} and generate lcov parameters with files.\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Generate merged file.\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Add a new global target to generate initial coverage reports for all targets.\n\n# This target will be used to generate the global initial info file, which is\n\n# used to gather even empty report data.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This function will add initial capture of coverage data for target <TNAME>,\n\n# which is needed to get also data for objects, which were not loaded at\n\n# execution time. It will call geninfo for every source file of <TNAME> once and\n\n# store the info file in the same directory.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 132,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# generate empty coverage files\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 175,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add geninfo file generation to global lcov-geninfo target\n",
        "Line" : 181,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 193,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 199,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Add a new global target to generate coverage reports for all targets. This\n\n# target will be used to generate the global info file.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This function will add capture of coverage data for target <TNAME>, which is\n\n# needed to get also data for objects, which were not loaded at execution time.\n\n# It will call geninfo for every source file of <TNAME> once and store the info\n\n# file in the same directory.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 240,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Generate coverage files. If no .gcda file was generated during\n\n# execution, the empty coverage file will be used instead.\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 270,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# add geninfo file generation to global lcov-capture target\n",
        "Line" : 275,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Add target for generating html output for this target only.\n",
        "Line" : 281,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 298,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 304,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Add a new global target for all lcov targets. This target could be used to\n\n# generate the lcov html output for the whole project instead of calling\n\n# <TARGET>-geninfo and <TARGET>-genhtml for each target. It will also be\n\n# used to generate a html site for all project data together instead of one\n\n# for each target.\n",
        "Line" : 309,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Add a new global target to generate the lcov html report for the whole project\n\n# instead of calling <TARGET>-genhtml for each target (to create an own report\n\n# for each target). Instead of the lcov target it does not require geninfo for\n\n# all targets, so you have to call <TARGET>-geninfo to generate the info files\n\n# the targets you'd like to have in your report or lcov-geninfo for generating\n\n# info files for all targets before calling lcov-genhtml.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "third_party/kiva-ep/cmake/Findcodecov.cmake" : {
      "ObjectId" : "112507846f665d9667b745e2082ca14c69011f00",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2016 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add an option to choose, if coverage should be enabled or not. If enabled\n\n# marked targets will be build with coverage support and appropriate targets\n\n# will be added. If disabled coverage will be ignored for *ALL* targets.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gcc and clang\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# gcc and clang fallback\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# To avoid error messages about CMP0051, this policy will be set to new. There\n\n# will be no problem, as TARGET_OBJECTS generator expressions will be filtered\n\n# with a regular expression from the sources.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation. If coverage is disabled or not supported, this function will\n\n# simply do nothing.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# only add coverage for target, if coverage is support and enabled.\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Add global target to gather coverage information after all targets have been\n\n# added. Other evaluation functions could be added here, after checks for the\n\n# specific module have been passed.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add lcov evaluation\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Exit this module, if coverage is disabled. add_coverage is defined before this\n\n# return, so this module can be exited now safely without breaking any build-\n\n# scripts.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find the reuired flags foreach language.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Coverage flags are not dependend on language, but the used compiler. So\n\n# instead of searching flags foreach language, search flags foreach compiler\n\n# used.\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# CheckFortranCompilerFlag was introduced in CMake 3.x. To be\n\n# compatible with older Cmake versions, we will check if this\n\n# module is present before we use it. Otherwise we will define\n\n# Fortran coverage support as not available.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Helper function to get the language of a source file.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Helper function to get the relative path of the source file destination path.\n\n# This path is needed by FindGcov and FindLcov cmake files to locate the\n\n# captured data.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If expression was found, SOURCEFILE is a generator-expression for an\n\n# object library. Currently we found no way to call this function automatic\n\n# for the referenced target, so it must be called in the directoryso of the\n\n# object library definition.\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# get the right path for file\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Check if all sources for target use the same compiler. If a target uses\n\n# e.g. C and Fortran mixed and uses different compilers (e.g. clang and\n\n# gfortran) this can trigger huge problems, because different compilers may\n\n# use different implementations for code coverage.\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# If expression was found, FILE is a generator-expression for an object\n\n# library. Object libraries will be ignored.\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# enable coverage for target\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Add gcov files generated by compiler to clean target.\n",
        "Line" : 235,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Include modules for parsing the collected data and output it in a readable\n\n# format (like gcov and lcov).\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "third_party/kiva-ep/cmake/Install.cmake" : {
      "ObjectId" : "072d5ed794dc798e576c00a60a1af29ec3927e8f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Normal release files LICENSE, Change log, and README\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Examples and WeatherData\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Libraries\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "third_party/kiva-ep/cmake/TargetArch.cmake" : {
      "ObjectId" : "3761e4df8a3ef05c2db48ce07eb4cbbfa585419e",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "third_party/kiva-ep/src/libkiva/CMakeLists.txt" : {
      "ObjectId" : "5e48ba8f6ee5ebeb75e186d8b5b606283fddc6ae",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default version number\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/kiva-ep/test/CMakeLists.txt" : {
      "ObjectId" : "67ef8322a3030dda37b9c1f6d5fb62862603f1a8",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/kiva-ep/test/unit/CMakeLists.txt" : {
      "ObjectId" : "3bfa6da52c876a7aa409ea3049ccc953a552409f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/kiva-ep/vendor/CMakeLists.txt" : {
      "ObjectId" : "f06212e9c914a025bb1734d5c780a60f1261e427",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/re2/BUILD" : {
      "ObjectId" : "30ce32094f8d7b2b03efe5e525251f45f92a796a",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bazel (http://bazel.io/) BUILD file for RE2.",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Darwin doesn't need `-pthread' when linking and it appears that\n# older versions of Clang will warn about the unused command line\n# argument, so just don't pass it.",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "third_party/re2/CMakeLists.txt" : {
      "ObjectId" : "2ac014e6e468e46dad43cb19054ce3e5ed8373ff",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015 The RE2 Authors.  All Rights Reserved.\n\n# Use of this source code is governed by a BSD-style\n\n# license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Old enough to support Ubuntu Trusty.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake seems to have no way to enable/disable testing per subproject,\n\n# so we provide an option similar to BUILD_TESTING, but just for RE2.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# See http://www.kitware.com/blog/home/post/939 for details.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# CMake defaults to /W3, but some users like /W4 (or /Wall) and /WX,\n\n# so we disable various warnings that aren't particularly helpful.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Without a byte order mark (BOM), Visual Studio assumes that the source\n\n# file is encoded using the current user code page, so we specify UTF-8.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# See https://stackoverflow.com/questions/38139631 for details.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# visual c++ (VS 2013)\n",
        "Line" : 55,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# g++/Clang\n",
        "Line" : 57,
        "CharPositionInLine" : 83
      },
      "9" : {
        "Text" : "# COMPILER TYPE\n",
        "Line" : 63,
        "CharPositionInLine" : 9
      },
      "10" : {
        "Text" : "# install(FILES ${RE2_HEADERS} DESTINATION include/re2)\n\n# install(TARGETS re2 ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "third_party/re2/Makefile" : {
      "ObjectId" : "f001f0640ce6efb59428c3a7e3492a344cbf087f",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n\n# Use of this source code is governed by a BSD-style\n\n# license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To build against ICU for full Unicode properties support,\n\n# uncomment the next two lines:\n\n# CCICU=$(shell pkg-config icu-uc --cflags) -DRE2_USE_ICU\n\n# LDICU=$(shell pkg-config icu-uc --libs)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To build against PCRE for testing or benchmarking,\n\n# uncomment the next two lines:\n\n# CCPCRE=-I/usr/local/include -DUSEPCRE\n\n# LDPCRE=-L/usr/local/lib -lpcre\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# can override\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# required\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Variables mandated by GNU, the arbiter of all good taste on the internet.\n\n# http://www.gnu.org/prep/standards/standards.html\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Work around the weirdness of sed(1) on Darwin. :/\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ABI version\n\n# http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# To rebuild the Tables generated by Perl and Python scripts (requires Internet\n\n# access for Unicode data), uncomment the following line:\n\n# REBUILD_TABLES=1\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The SunOS linker does not support wildcards. :(\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We use TESTOFILES for testing the shared lib, only it is built differently.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test the shared lib, falling back to the static lib for private symbols\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# re2_fuzzer is a target for fuzzers like libFuzzer and AFL. This fake fuzzing\n\n# is simply a way to check that the target builds and then to run it against a\n\n# fixed set of inputs. To perform real fuzzing, refer to the documentation for\n\n# libFuzzer (llvm.org/docs/LibFuzzer.html) and AFL (lcamtuf.coredump.cx/afl/).\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Keep gmake from deleting intermediate files it creates.\n\n# This makes repeated builds faster and preserves debug info on OS X.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "third_party/re2/re2_test.bzl" : {
      "ObjectId" : "c0eb6541961e1964ca695e0a5ae0864d568864d9",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines a Bazel macro that instantiates a native cc_test rule for an RE2 test.",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third_party/zlib/CMakeLists.txt" : {
      "ObjectId" : "a1c2806ec6832af4ea829551baaef0c979424304",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake_minimum_required(VERSION 2.4.4)\n\n#set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#project(zlib C)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# clear variable\n",
        "Line" : 38,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n\n#    # If we're doing an out of source build and the user has a zconf.h\n\n#    # in their source tree...\n\n#    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h)\n\n#        message(FATAL_ERROR\n\n#            \"You must remove ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h \"\n\n#            \"from the source tree.  This file is included with zlib \"\n\n#            \"but CMake generates this file for you automatically \"\n\n#            \"in the build directory.\")\n\n#  endif()\n\n#endif()\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#============================================================================\n\n# minizip\n\n#============================================================================\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#IF( NOT APPLE )\n\n#INSTALL(TARGETS miniziplib\n\n#  RUNTIME DESTINATION bin \n\n#  LIBRARY DESTINATION lib )\n\n#ENDIF()\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_executable(minizip \"contrib/minizip/minizip.c\")\n\n#target_link_libraries(minizip miniziplib)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#add_executable(miniunz \"contrib/minizip/miniunz.c\")\n\n#target_link_libraries(miniunz miniziplib)\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "third_party/zlib/Makefile" : {
      "ObjectId" : "6bba86c73fca2abda416baa1a7cf883b3494fb29",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "third_party/zlib/contrib/minizip/Makefile" : {
      "ObjectId" : "84eaad20d4fb19b00965268dd75d7e9b66c8cc21",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tst/EnergyPlus/unit/CMakeLists.txt" : {
      "ObjectId" : "a71a9a97f771af9c5aef2cc444eeb945eca1c193",
      "LastModified" : "2019-03-25T02:12:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Executable name will be EnergyPlus_tests\n\n# Execute energyplus_tests --help for options using gtest runner\n\n# Execute energyplus_tests with no arguments to run all tests\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 162,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 9,
    "AUTOMAKE" : 2,
    "BAZEL" : 2
  },
  "ElapsedTime" : 15640
}