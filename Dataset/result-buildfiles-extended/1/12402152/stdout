{
  "Repository" : "12402152",
  "Revision" : "HEAD",
  "ObjectId" : "f021ca2d52da262e14706498190de5fe7859e00b",
  "CommitTime" : "2019-04-05T13:59:45Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "de11696965c046108e1820cf799ee9e9b464cfe3",
      "LastModified" : "2019-04-05T11:55:22Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2001-2004, Roger Dingledine\n\n# Copyright (c) 2004-2006, Roger Dingledine, Nick Mathewson\n\n# Copyright (c) 2007-2019, The Tor Project, Inc.\n\n# See LICENSE for licensing information\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"Common\" libraries used to link tor's utility code.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Variants of the above for linking the testing variant of tor (for coverage\n\n# and tests)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal crypto libraries used in Tor\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variants of the above for linking the testing variant of tor (for coverage\n\n# and tests)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# All static libraries used to link tor.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Variants of the above for linking the testing variant of tor (for coverage\n\n# and tests)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All libraries used to link tor-cov\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## This tells etags how to find mockable function definitions.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# not \"edge\"\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#install-data-local:\n\n#\t$(INSTALL) -m 755 -d $(LOCALSTATEDIR)/lib/tor\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Allows to override rpmbuild with rpmbuild-md5 from fedora-packager so that\n\n# building for EL5 won't fail on https://bugzilla.redhat.com/show_bug.cgi?id=490613\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Use automake's dist-gzip target to build the tarball\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#end of dist-rpm\n",
        "Line" : 216,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Only use shellcheck if it is present\n",
        "Line" : 225,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Note that test-network requires a copy of Chutney in $CHUTNEY_PATH.\n\n# Chutney can be cloned from https://git.torproject.org/chutney.git .\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Run all available tests using automake's test-driver\n\n# only run IPv6 tests if we can ping6 ::1 (localhost)\n\n# only run IPv6 tests if we can ping ::1 (localhost)\n\n# some IPv6 tests will fail without an IPv6 DNS server (see #16971 and #17011)\n\n# only run mixed tests if we have a tor-stable binary\n\n# Try the syntax for BSD ping6, Linux ping6, and Linux ping -6,\n\n# because they're incompatible\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We can't delete the gcno files, because they are created when tor is compiled\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Avoid strlcpy.c, strlcat.c, aes.c, OpenBSD_malloc_Linux.c, sha256.c,\n\n# tinytest*.[ch]\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This relies on some internal details of how automake implements\n\n# distcheck.  We check two directories because automake-1.15 changed\n\n# from $(distdir)/_build to $(distdir)/_build/sub.\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Similarly, this relies on automake internals to run file on an\n\n# intermittent core file whose provenance is not known to us.  See\n\n# ticket 26787.\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21,
      "Errorlog" : "line 173:43 token recognition error at: '\\W'\nline 173:63 token recognition error at: '\\W'\nline 173:68 token recognition error at: '\\1'\n"
    },
    "src/ext/ed25519/ref10/Makefile" : {
      "ObjectId" : "9b0ba7ad45038e02b511c053e7ece1cb39108a09",
      "LastModified" : "2014-08-26T14:08:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/ext/timeouts/Makefile" : {
      "ObjectId" : "554ebb9ddddcc46c9ed76c8d8d4365ad6f931462",
      "LastModified" : "2016-05-09T18:06:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# NOTE: GNU Make 3.81 won't export MAKEFLAGS if .POSIX is specified, but\n\n# Solaris make won't export MAKEFLAGS unless .POSIX is specified.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# USER-MODIFIABLE MACROS\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# END MACROS\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 12952
}