{
  "Repository" : "22100213",
  "Revision" : "HEAD",
  "ObjectId" : "7d33fc40cd5fddf0ad383c5ff6f8565790af6cee",
  "CommitTime" : "2019-04-15T20:35:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "8f48ac6f4a1aaffd47a3c1b5c4c56fb7b6b23118",
      "LastModified" : "2019-04-02T06:45:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Must stay before the project() command:\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Users building with Eclipse should set CMAKE_ECLIPSE_VERSION through the\n\n# command line to their current version of Eclipse:\n\n#set(CMAKE_ECLIPSE_VERSION \"4.6.0\" CACHE STRING \"Eclipse version\" FORCE)\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# The default target is Debug:\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set required C and C++ standards and check GCC version:\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We might want to build using the old C++ ABI, even when using a new GCC version:\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Cache name suffix examples: \"\" = ~/.config/RawTherapee, \"5\" = ~/.config/RawTherapee-5, \"_testing\" = ~/.config/RawTherapee_testing\n\n# Use \"\" for stable releases and \"5-dev\" for anything else.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# By default we don't use a specific processor target, so PROC_TARGET_NUMBER is set to 0.\n\n# Specify other values to optimize for specific processor architecture as listed in ProcessorTargets.cmake:\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set special compilation flags for rtengine which get added to CMAKE_CXX_FLAGS:\n\n# Some Linux distros build with -O2 instead of -O3. We explicitly enable auto vectorization by using -ftree-vectorize\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Loads the ProcessorTargets list:\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If PROC_FORCED_LABEL exists, its value is loaded in PROC_LABEL to override the one from ProcessorTargets:\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the proc flags to the build flags:\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Stop compilation on typos such as std:swap (missing colon will be detected as unused label):\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Special treatment for x87 and x86-32 SSE (see GitHub issue #4324)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# On i386 Linux we can fix unaligned SSE malloc (see GitHub issue #4432)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add additional paths. Look in the MinGW path first, then in the Gtkmm path.\n\n# If you wish to build some dependent libraries, you have to install them in MinGW to use them:\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Set minimum system version\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#option(TARGET32BIT \"Build for 32-bit architecture when ON, otherwise 64-bit. Default is OFF\" OFF)\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set installation directories:\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Respect CMAKE_INSTALL_LIBDIR if set\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Enforce absolute paths for non-bundle builds:\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# MyMutex:\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# MyRWMutex:\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check for libraries:\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Check for libcanberra-gtk3 (sound events on Linux):\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Using LTO with older versions of binutils requires setting extra flags\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# check for libfftw3f_omp\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Find out whether we are building out of source:\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Remove files which could require manual work.\n\n# We will remove this after some time to have a clean build system without file modifications in the source tree again. (?)\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Check for generated files in the source tree which should not be there when doing an out-of-source build.\n\n# Without checking for this it might happen that old versions are used for the compilation:\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "### Start generating AboutThisBuild.txt\n\n# Set the platform bit-depth:\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Get compiler name and version.\n\n# Only CMake > 2.8.7 knows CMAKE_*_COMPILER_VERSION\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Get C++ and linker flags for rtengine (the GUI's C++ flags may have fewer flags):\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "### End generating AboutThisBuild.txt\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# The standard location for man pages in Linux is /usr/share/man\n\n# Use \"manpath\" to see the search paths for man pages on your system.\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# check whether the used version of lensfun has lfDatabase::LoadDirectory\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# the NO_DEFAULT_PATH is to make sure we find the lensfun version we\n\n# want, and not the system's one (e.g. if we have a custom version\n\n# installed in a non-standard location)\n",
        "Line" : 538,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# LENSFUN_LIBRARY_DIRS can be empty if lensfun is installed in the\n\n# default path. In this case, adding NO_DEFAULT_PATH would make\n\n# find_library fail...\n",
        "Line" : 543,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 37
    },
    "ProcessorTargets.cmake" : {
      "ObjectId" : "aa06b29ee7fe4d8d4256a67101d82dee7c779ce7",
      "LastModified" : "2015-07-10T10:00:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We have to create a label variable if we want to display it in AboutThisBuild.txt...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This first choice should be used for official releases\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This second choice should be used for your own build only\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The later choices is intended to be used if you want to provide specific builds, but it should match your own processor\n\n# You can cross compile but you have to know what you're doing, this mechanism has not been designed for that\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(PROC_TARGET__LABEL procLabel CACHE STRING \"Processor- label\")\n\n#set(PROC_TARGET__FLAGS \"procFlags\" CACHE STRING \"Processor- flags\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "UpdateInfo.cmake" : {
      "ObjectId" : "d1f532506142d3d8ccf63dd293982e6e85b27a57",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmakefile executed within a makefile target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If we find ReleaseInfo.cmake we use the info from there and don't need Git to be installed\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we look for the git command in this paths by order of preference\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Linux\n",
        "Line" : 13,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# Fail if Git is not installed\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Get version description.\n\n# Depending on whether you checked out a branch (dev) or a tag (release),\n\n# \"git describe\" will return \"5.0-gtk2-2-g12345678\" or \"5.0-gtk2\", respectively.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Get branch name.\n\n# Will return empty if you checked out a commit or tag. Empty string handled later.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Get commit hash.\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Get commit date, YYYY-MM-DD.\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Get number of commits since tagging. This is what \"GIT_DESCRIBE\" uses.\n\n# Works when checking out branch, tag or commit.\n\n# Get a list of all tags in repo:\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Replace newlines with semicolons so that it can be split:\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get number of commits since branching.\n\n# Works when checking out branch, tag or commit.\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If user checked-out something which is not a branch, use the description as branch name.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Create numeric version.\n\n# This version is nonsense, either don't use it at all or use it only where you have no other choice, e.g. Inno Setup's VersionInfoVersion.\n\n# Strip everything after hyphen, e.g. \"5.0-gtk2\" -> \"5.0\", \"5.1-rc1\" -> \"5.1\" (ergo BS).\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# 32 bits builds has to be installable on 64 bits system, to support WinXP/64.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# installing in 32 bits mode even on 64 bits OS and architecture\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Restricting the 64 bits builds to 64 bits systems only\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# installing in 64 bits mode for all 64 bits processors, even for itanium architecture\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# set part of the output archive name\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# build version.h from template\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# build AboutThisBuild.txt from template\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/modules/FindKLT.cmake" : {
      "ObjectId" : "f6d28d999af8ef04607abaf8c3c81b0c817aeeeb",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find KLT\n\n# Once done this will define\n\n#\n\n#  KLT_FOUND - system has KLT\n\n#  KLT_INCLUDE_DIRS - the KLT include directory\n\n#  KLT_LIBRARIES - Link these to use KLT\n\n#  KLT_DEFINITIONS - Compiler switches required for using KLT\n\n#\n\n#  Copyright (c) 2009 Andreas Schneider <mail@cynapses.org>\n\n#  updated for KLT by Dan Horák\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindMacIntegration.cmake" : {
      "ObjectId" : "a67c31baa7ef2c369817161b6d338785a55fe207",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the native GtkOSXApplication includes and library\n\n#\n\n# This module defines\n\n#  MACINTEGRATION_INCLUDE_DIR, where to find gtkosxapplication.h, etc.\n\n#  MACINTEGRATION_LIBRARIES, the libraries to link against to use GtkOSXApplication.\n\n#  MACINTEGRATION_FOUND, If false, do not try to use GtkOSXApplication.\n\n# also defined, but not for general use are\n\n#  MACINTEGRATION_LIBRARY, where to find the GtkOSXApplication library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 henrik andersson\n\n#=============================================================================\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MACINTEGRATION_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindUnalignedMalloc.cmake" : {
      "ObjectId" : "4ddfb2afcb35383df087026ef952bf763771982f",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of RawTherapee.\n\n#\n\n# Copyright (C) 2018 Flössie <floessie.mail@gmail.com>\n\n#\n\n# RawTherapee is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# RawTherapee is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with RawTherapee.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindX87Math.cmake" : {
      "ObjectId" : "b25ba32925a9239570c6cbb1ef5d67ee29dbbff0",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of RawTherapee.\n\n#\n\n# Copyright (C) 2018 Flössie <floessie.mail@gmail.com>\n\n#\n\n# RawTherapee is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# RawTherapee is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with RawTherapee.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rtdata/CMakeLists.txt" : {
      "ObjectId" : "46722ba01ad0ae71f88f196109edd0c316743c17",
      "LastModified" : "2019-04-02T06:45:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake escapes first item quote character. Do not remove 'DUMMY_VARIABLE='\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "rtengine/CMakeLists.txt" : {
      "ObjectId" : "a1037f5a3271a7283b10ee7048278968842daed1",
      "LastModified" : "2019-04-02T06:45:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# It may be nice to store library version too\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rtexif/CMakeLists.txt" : {
      "ObjectId" : "9747b03fbffe22ebe0cb7ec498718d2e948f5f5e",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtgui/CMakeLists.txt" : {
      "ObjectId" : "3af955be8394699e0e0def7e259977433c1957ad",
      "LastModified" : "2019-04-15T10:08:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common source files for both CLI and non-CLI execautables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# At the time of writing CMake has no module finder for gtkmacintegration so here we have it hard-coded, if installed via macports it should be in /opt/local/...\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Excluding libatomic needed by Clang/FreeBSD, #3636\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create config.h which defines where data are stored\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create new executables targets\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add dependencies to executables targets\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Define a target specific definition to use in code\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set executables targets properties, i.e. output filename and compile flags\n\n# for \"Debug\" builds, open a console in all cases for Windows version\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add linked libraries dependencies to executables targets\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Install executables\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "win.cmake" : {
      "ObjectId" : "9c292b2df76bf188d1b4cc2d3c3b4389beff6a0e",
      "LastModified" : "2018-12-08T23:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use the 'Debug'          build type to have a non optimized,        with    debugging information, with a console executable\r\n\n# Use the 'Release'        build type to have an    optimized,        without debugging information, console free executable\r\n\n# Use the 'RelWithDebInfo' build type to have an    optimized,        without debugging information, with a console executable\r\n\n# Use the 'MinSizeRel'     build type to have the smallest possible,  without debugging information, console free executable\r\n\n#set(CMAKE_BUILD_TYPE Release CACHE STRING \"Between: None Debug Release RelWithDebInfo MinSizeRel.\")\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set WITH_MYFILE_MMAP to OFF if you experience crash with thumbnail creation (it should be slower, but more reliable)\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This line will let you chose the target number, and the associated processor\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you want to force the target processor name when PROC_TARGET_NUMBER = 0 or 2,\r\n\n# uncomment the next line and replace labelWithoutQuotes by its value\r\n\n#set(PROC_LABEL labelWithoutQuotes CACHE STRING \"Target Processor label\")\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Important: MinGW-w64 user may need to specify the -m32 or -m64 flag in CMAKE_CXX_FLAGS,\r\n\n# CMAKE_C_FLAGS and CMAKE_EXE_LINKER_FLAGS to select between 32/64bit build\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Uncomment the next line and set the right value to override the default value (special compiling flags for RTEngine)\r\n\n#set(RTENGINE_CXX_FLAGS \"-funroll-loops\" CACHE STRING \"Special compilation flags for RTEngine\")\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 7469
}