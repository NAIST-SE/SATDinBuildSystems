{
  "Repository" : "604000",
  "Revision" : "HEAD",
  "ObjectId" : "17a42caa216b631c558839a0e44cf849fbca8e6e",
  "CommitTime" : "2019-04-18T23:33:21Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "2decf95031ab445376581eecc151ad63ef0554db",
      "LastModified" : "2019-03-30T03:07:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Figure out how to build audacious plugin via CMake\n\n# TODO: Figure out how to build XMPlay plugin via CMake\n\n# TODO: Figure out why MinGW-w64 doesn't build\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# May need to see if it is possible to get these to work on non-Windows systems too\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Build choices\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable support for the resource compiler when using MinGW\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Not 100% sure this is needed, but in the past, MinGW's command for compiling resources was incorrect\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Update the version\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Update the version\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Find the relevant packages\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# If building the CLI, we need to include AO as well\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# If building Audacious, we need to make sure we can find its pkg-config module as well as GTK's\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Set compiler flags\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add other projects and subdirectories as needed\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Option Summary\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build Summary\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Install Summary\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Makefile" : {
      "ObjectId" : "efa217626285a5e3d43a52cef8681145482b80b6",
      "LastModified" : "2018-08-20T18:08:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###############################\n\n# vgmstream makefile\n\n###############################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### defs\n\n# currently aimed to WIN32 builds but vgmstream_cli should work for others (or use autotools instead)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### tools\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# same thing, the above should be available\n\n#CC = i686-w64-mingw32-gcc\n\n#AR = i686-w64-mingw32-ar\n\n#STRIP = i686-w64-mingw32-strip\n\n#WINDRES = i686-w64-mingw32-windres\n\n#DLLTOOL = i686-w64-mingw32-dlltool\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# (old crosscompile, not used anymore?)\n\n#CC = i586-mingw32msvc-gcc\n\n#AR = i586-mingw32msvc-ar\n\n#STRIP = i586-mingw32msvc-strip\n\n#WINDRES = i586-mingw32msvc-windres\n\n#DLLTOOL = i586-mingw32msvc-dlltool\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "### targets\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tgit archive --format zip --output vgmstream-`./version.sh`.zip master\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#deprecated: buildfullrelease sourceball mingwbin mingw_test mingw_winamp mingw_xmplay\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "audacious/CMakeLists.txt" : {
      "ObjectId" : "342284b3995cbf7c4c7206f188cdffb318d09b8e",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link to the vgmstream library and audacious library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove the prefix and set output name\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include compile definitions for Audacious and GTK, as well as the version string\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include compile flags for Audacious and GTK\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure that the binary directory is included (for version.h) as well as the Audacious and GTK include directories\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure that whatever compiler we use can handle these features\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install the plugin\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/CMakeLists.txt" : {
      "ObjectId" : "29ee2d63f48f53e0aeeb39e221dbe46fe39b1e39",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CLI\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link to the vgmstream library\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the preprocessor definitions\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Link to the getopt library\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Make sure that the binary directory is included (for version.h), as well as the getopt library include directory\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Include the version string\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Also, on MinGW when using GCC, these flags need to be included to prevent requiring MinGW's runtime DLLs from being included, which does unfortunately increase the size of the EXE\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Install the DLLs\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Include the version string\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Install the CLI program\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO: Make it so vgmstream123 can build with Windows (this probably needs a libao.dll included with vgmstream, though)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# vgmstream123\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Link to the vgmstream library as well as libao\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Add AO include directory\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Include the version string\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Install vgmstream123\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "cli/Makefile" : {
      "ObjectId" : "23a93c1f05a507d32f66406919db2b4f476258de",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# CLI tools\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### main defs\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -DUSE_ALLOCA\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ifdef VGM_DEBUG\n\n#  CFLAGS += -DVGM_DEBUG_OUTPUT -O0\n\n#  CFLAGS += -Wold-style-definition -Woverflow -Wpointer-arith -Wstrict-prototypes -pedantic -std=gnu90 -fstack-protector -Wformat\n\n#endif\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### external libs\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#if WIN32\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "### targets\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindAO.cmake" : {
      "ObjectId" : "c9c1ae2e8811dbd9c6e4ee65bad9524951cfa55e",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "cmake/FindFFmpeg.cmake" : {
      "ObjectId" : "c424e2a76c984d38ed141d088002e27c03fb8322",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: ts=2 sw=2\n\n# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)\n\n#\n\n# Once done this will define\n\n#  FFMPEG_FOUND         - System has the all required components.\n\n#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.\n\n#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.\n\n#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.\n\n#\n\n# For each of the components it will additionally set.\n\n#   - AVCODEC\n\n#   - AVDEVICE\n\n#   - AVFORMAT\n\n#   - AVFILTER\n\n#   - AVUTIL\n\n#   - POSTPROC\n\n#   - SWSCALE\n\n# the following variables will be defined\n\n#  <component>_FOUND        - System has <component>\n\n#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers\n\n#  <component>_LIBRARIES    - Link these to use <component>\n\n#  <component>_DEFINITIONS  - Compiler switches required for using <component>\n\n#  <component>_VERSION      - The components version\n\n#\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2011, Michael Jansen, <kde@michael-jansen.biz>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comes from https://github.com/snikulov/cmake-modules/blob/master/FindFFmpeg.cmake\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The default components were taken from a survey over other FindFFMPEG.cmake files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n### Macro: set_component_found\n\n#\n\n# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(STATUS \"  - ${_component} found.\")\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# message(STATUS \"  - ${_component} not found.\")\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\n\n### Macro: find_component\n\n#\n\n# Checks for the given component by invoking pkgconfig and then looking up the libraries and\n\n# include directories.\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Check for cached results. If there are skip the costly part.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check for all possible component.\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Check if the required components were found and add their stuff to the FFMPEG_* vars.\n",
        "Line" : 106,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# message(STATUS \"Required component ${_component} present.\")\n",
        "Line" : 109,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# message(STATUS \"Required component ${_component} missing.\")\n",
        "Line" : 114,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Build the include path with duplicates removed.\n",
        "Line" : 118,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# cache the vars.\n",
        "Line" : 123,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Now set the noncached _FOUND vars for the components.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Compile the list of required vars\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Give a nice error message if some of the required vars are missing.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindMPG123.cmake" : {
      "ObjectId" : "1bebaf83ff58ad01e3fe3d3ed765c685bbacf816",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mpg123\n\n# Find the native mpg123 includes and library\n\n#\n\n#  MPG123_INCLUDE_DIR - where to find mpg123.h\n\n#  MPG123_LIBRARIES   - List of libraries when using mpg123.\n\n#  MPG123_FOUND       - True if mpg123 found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comes from https://github.com/coelckers/gzdoom/blob/master/cmake/FindMPG123.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# MARK_AS_ADVANCED(MPG123_LIBRARIES MPG123_INCLUDE_DIR)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MPG123_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindOgg.cmake" : {
      "ObjectId" : "4426c3c52f383485235c844b5d0f262c7d95bd08",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ogg\n\n# Find the native ogg includes and libraries\n\n#\n\n#  OGG_INCLUDE_DIRS - where to find ogg.h, etc.\n\n#  OGG_LIBRARIES    - List of libraries when using ogg.\n\n#  OGG_FOUND        - True if ogg found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comes from https://github.com/erikd/libsndfile/blob/master/cmake/FindOgg.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# MSVC built ogg may be named ogg_static.\n\n# The provided project files name the library with the lib prefix.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OGG_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindVorbis.cmake" : {
      "ObjectId" : "4c1b0186d911f1dbdbd88b438fc82fcaa87ac6e6",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbisenc\n\n# Find the native vorbisenc includes and libraries\n\n#\n\n#  VORBIS_INCLUDE_DIRS - where to find vorbis.h, etc.\n\n#  VORBIS_LIBRARIES    - List of libraries when using vorbis.\n\n#  VORBIS_FOUND        - True if vorbis found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comes from https://github.com/erikd/libsndfile/blob/master/cmake/FindVorbis.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindVorbisFile.cmake" : {
      "ObjectId" : "33a6a44a71fb556f8ffd46ba335b89f40e92218b",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbisfile\n\n# Find the native vorbisfile includes and libraries\n\n#\n\n#  VORBISFILE_INCLUDE_DIRS - where to find vorbisfile.h, etc.\n\n#  VORBISFILE_LIBRARIES    - List of libraries when using vorbisfile.\n\n#  VORBISFILE_FOUND        - True if vorbisfile found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adapted from https://github.com/erikd/libsndfile/blob/master/cmake/FindVorbisEnc.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBISFILE_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/fdk-aac.cmake" : {
      "ObjectId" : "2c75f1d748d7d645e63cba1c68f6e2a1bbb6e72a",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ALthough fdk-aac does have a Visual Studio project for Windows, this will also cover other compilers and platforms\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup source groups, mainly for Visual Studio\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up the proper include directories\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that whatever compiler we use can handle these features\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up position-independent code\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/mp4v2.cmake" : {
      "ObjectId" : "4dd5dddda14562da9fc10c922022d33075593973",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# qaac doesn't have a Visual Studio project for Windows, so this not only allows things to build for Visual Studio, but also covers other compilers and platforms\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup source groups, mainly for Visual Studio\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the preprocessor definitions\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set up the proper include directories\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure that whatever compiler we use can handle these features\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set up position-independent code\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/vgmstream.cmake" : {
      "ObjectId" : "b33c3f116c3f3b2a0280c733d37ce90aeb8238d4",
      "LastModified" : "2019-03-30T03:07:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup a target to have the proper preprocessor definitions, include directories, dependencies and link libraries\n\n# Can take either 1 argument, the target, or 2 arguments, the target and a boolean that, if set to TRUE, will add the link libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Common preprocessor definitions and include directories\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Set up position-independent code for all targets\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Include libm on non-Windows systems\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Installs the DLLs to the given install prefix\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Paths to the DLLs\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# List of DLLs to check for install\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Loop over DLLs and only install if the USE_* is set for that DLL\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 8
    },
    "ext_libs/CMakeLists.txt" : {
      "ObjectId" : "af8c7be5f1401db5489721766b9256b7fcb5206c",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext_libs/Getopt/CMakeLists.txt" : {
      "ObjectId" : "95f65f3753f73bfc780449d454163d60c3a8b692",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext_libs/Makefile" : {
      "ObjectId" : "826cf54fe4bf5bf79589f0651c85f954774576d1",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# external libs\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# needed?\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "fb2k/CMakeLists.txt" : {
      "ObjectId" : "ad79c68e9685c906d14b73d77d8ac3f91df4e456",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: Although this does include a section for handling MinGW, it might not be possible to build the foobar2000 component using MinGW using only CMake, as foobar2000's SDK only includes Visual Studio projects\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup source groups, mainly for Visual Studio\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link to the vgmstream library and foobar2000's shared library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove the prefix and set the suffix to .dll\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the preprocessor definitions\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure that the binary directory is included (for version.h), as well as foobar2000's include directories and the WTL include directory\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add dependencies to foobar2000's SDK\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure that whatever compiler we use can handle these features\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include the version string\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Also, on MinGW when using GCC, these flags need to be included to prevent requiring MinGW's runtime DLLs from being included, which does unfortunately increase the size of the DLL\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Install the DLLs\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Install the component\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e4d8dcad0adbb667f1482243464d52d5288e5e10",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# stack_allow.h is not being used, so no need to include it in the sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup source groups, mainly for Visual Studio\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up the proper include directories\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/Makefile" : {
      "ObjectId" : "43a77db04562d6b8bb0a4a4157b902d62cd65a98",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# main vgmstream code\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# automatically get all possible .o by finding all .c\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#vgmstream-deps:\n\n#\t$(CC) $(CFLAGS) -M -o vgmstream-deps\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "winamp/CMakeLists.txt" : {
      "ObjectId" : "0e301d3371b19ce4ae5ce7ee3d2e68356cffa684",
      "LastModified" : "2019-03-30T03:07:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup source groups, mainly for Visual Studio\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link to the vgmstream library\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove the prefix and set the suffix to .dll\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add the preprocessor definitions\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure that the binary directory is included (for version.h)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include the version string\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Also, on MinGW when using GCC, these flags need to be included to prevent requiring MinGW's runtime DLLs from being included, which does unfortunately increase the size of the DLL\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Install the DLLs\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install the plugin\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "winamp/Makefile" : {
      "ObjectId" : "d936f5f1d2709bb6e7561c8479d90b3aeea9e674",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Winamp plugin\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cross-compile\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### main defs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### external libs\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### targets\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "xmplay/CMakeLists.txt" : {
      "ObjectId" : "82ebe0d796eedfa7a56415444ca07abbdc1654e7",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link to the vgmstream library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove the prefix and set the suffix to .dll\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure that the binary directory is included (for version.h)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include the version string\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Also, on MinGW when using GCC, these flags need to be included to prevent requiring MinGW's runtime DLLs from being included, which does unfortunately increase the size of the DLL\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Install the DLLs\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install the plugin\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "xmplay/Makefile" : {
      "ObjectId" : "0abd7ae49d05cbd1f804a36d6b7ffc920768ab60",
      "LastModified" : "2019-03-21T05:15:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# XMPlay plugin\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cross-compile\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### main defs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### external libs\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### targets\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 18,
    "MAKEFILE" : 6
  },
  "ElapsedTime" : 2094
}