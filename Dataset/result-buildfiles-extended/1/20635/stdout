{
  "Repository" : "20635",
  "Revision" : "HEAD",
  "ObjectId" : "62c5b2a01d77f5bbb0a6d909a9ee9b6705088cc7",
  "CommitTime" : "2019-04-16T20:54:19Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f6263092a633a3724fc07bb16aa840b460b278b4",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2009-2018 The ESPResSo project\n\n# Copyright (C) 2009,2010 \n\n#   Max-Planck-Institute for Polymer Research, Theory Group\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMake internal vars\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cmake modules/macros are in a subdirectory to keep this file cleaner\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On Mac OS X, first look for other packages, then frameworks\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "######################################################################\n\n# User input options\n\n######################################################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Write compile commands to file, for various tools...\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# choose the name of the config file\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check which config file to use\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Pretty function\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Libraries\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If we build either interface turn on script interface\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We need the parallel hdf5 version!\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check for the h5xx submodule and try to check it out if not found or update it\n\n# if found.\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Try to find git\n",
        "Line" : 305,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# MPI\n\n#\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# CMake < 3.9\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Workaround for https://gitlab.kitware.com/cmake/cmake/issues/18349\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Workaround for https://gitlab.kitware.com/cmake/cmake/issues/18349\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#######################################################################\n\n# Boost\n\n#######################################################################\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# old Boost.MPI versions contain a use-after-free bug that seems to only cause crashes on 32-bit architectures\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Boost 1.64 has incompatible Serialization and MPI modules, see\n\n# https://svn.boost.org/trac10/ticket/12723 . Some distributions, like Fedora,\n\n# have backported the patch.\n",
        "Line" : 404,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#\n\n# Paths\n\n#\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Flags\n\n#\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# C++ standard\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# drop 'lib' prefix from all libraries\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# disable warnings from -Wextra\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# disable warnings from -Wextra\n",
        "Line" : 451,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# disable warnings from -Wextra\n",
        "Line" : 455,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# G++ and Intel don't know this flag\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# older versions don't support -Wno-pedantic which we need in src/python\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# workaround for compiler crash related to decltype() and variadic template usage inside Boost\n",
        "Line" : 475,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# prevent 80-bit arithmetic on old Intel processors\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\n\n# Testing\n\n#######################################################################\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#\n\n# Subdirectories\n\n#\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\n\n# Feature summary\n\n#\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "cmake/FindCUDA.cmake" : {
      "ObjectId" : "fbe29f9a0637b65373b529b73687dffa04c3fa30",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_LINK_LIBRARIES_KEYWORD (Default \"\")\n\n#    -- The <PRIVATE|PUBLIC|INTERFACE> keyword to use for internal\n\n#       target_link_libraries calls. The default is to use no keyword which\n\n#       uses the old \"plain\" form of target_link_libraries. Note that is matters\n\n#       because whatever is used inside the FindCUDA module must also be used\n\n#       outside - the two forms of target_link_libraries cannot be mixed.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from within VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\n\n#                             Required for separable compilation.\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 438,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 440,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 445,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 500,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 509,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 570,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 572,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 642,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 659,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 662,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 665,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 679,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 685,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compute the version.\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 714,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 725,
        "CharPositionInLine" : 21
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 748,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 752,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 764,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 782,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 785,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 799,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 803,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 814,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 820,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 837,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 859,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 869,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 877,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 886,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 903,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 910,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 920,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 929,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 965,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 967,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 980,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 982,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 986,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1007,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1032,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "##############################################################################\n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1077,
        "CharPositionInLine" : 8
      },
      "95" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1084,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1090,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1095,
        "CharPositionInLine" : 8
      },
      "98" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1106,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1125,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1151,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1155,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1166,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1169,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1171,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1175,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1178,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1184,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1187,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1205,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1207,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1217,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1222,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1226,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Emulation.\n",
        "Line" : 1228,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1231,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1257,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1267,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1277,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1280,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1289,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1294,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1299,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1309,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1312,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# STATIC\n",
        "Line" : 1318,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1324,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1326,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1332,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1341,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1344,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1348,
        "CharPositionInLine" : 6
      },
      "134" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1368,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1374,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1379,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1391,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1394,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1397,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1399,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1406,
        "CharPositionInLine" : 6
      },
      "142" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1429,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1437,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1450,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1468,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1479,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1483,
        "CharPositionInLine" : 31
      },
      "148" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1487,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1499,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1502,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1509,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1517,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1524,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1541,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1554,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1557,
        "CharPositionInLine" : 8
      },
      "157" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1561,
        "CharPositionInLine" : 8
      },
      "158" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1575,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1580,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1588,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1603,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1609,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1621,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1627,
        "CharPositionInLine" : 27
      },
      "165" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1632,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1640,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1644,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1652,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1657,
        "CharPositionInLine" : 6
      },
      "170" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1667,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1674,
        "CharPositionInLine" : 4
      },
      "172" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1679,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1685,
        "CharPositionInLine" : 6
      },
      "174" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1717,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1726,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1729,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1734,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Add the library.\n",
        "Line" : 1738,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1745,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1760,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1770,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1779,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1781,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1784,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# Add the library.\n",
        "Line" : 1788,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1795,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1804,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1814,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 1820,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1831,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1834,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1842,
        "CharPositionInLine" : 0
      },
      "193" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1851,
        "CharPositionInLine" : 0
      },
      "194" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1860,
        "CharPositionInLine" : 0
      },
      "195" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1869,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1879,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1892,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1905,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1911,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1922,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 201
    },
    "cmake/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7b5389ec51fdad7df760df0666809105e3239c09",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Extra output\n\n#\n\n# input_file:FILEPATH=<>   Path to dependecy file in makefile format\n\n#\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "28cc1e99ead5fd01707161d7ba6d72b2464e7a70",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 77,
        "CharPositionInLine" : 69
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 78,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 79,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Generate the code\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 54
    },
    "cmake/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "8fb44d80a80c2538c9367a304c26ebae0002a906",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 179,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 183,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cmake/FindCython.cmake" : {
      "ObjectId" : "e8774d947d588bee8044b91c468f0ac5efa6ef38",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Cython compiler.\n\n#\n\n# This code sets the following variables:\n\n#\n\n#  CYTHON_EXECUTABLE\n\n#\n\n# See also UseCython.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#=============================================================================\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set minimal accepted version\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use the Cython executable that lives next to the Python executable\n\n# if it is a local installation.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check version\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindFFTW3.cmake" : {
      "ObjectId" : "3a16e1ca223da6564634121fa4288d3bf719b9fc",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2009,2010 Christoph Junghans\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n# - Find FFTW3\n\n# Find the native FFTW3 includes and library, double precision\n\n#\n\n#  FFTW3_INCLUDE_DIR    - where to find fftw3.h\n\n#  FFTW3_LIBRARIES   - List of libraries when using FFTW.\n\n#  FFTW3_FOUND       - True if FFTW found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FFTW_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindNumPy.cmake" : {
      "ObjectId" : "a57cd9151d58a01fe8401cc2266e82a0dd64d1ba",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPythonModule.cmake" : {
      "ObjectId" : "8d3dee1d77f5ac6e96373d8a33f85ae4d1f4b0d1",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if a Python module is installed\n\n# Found at http://www.cmake.org/pipermail/cmake/2011-January/041666.html\n\n# To use do: find_python_module(PyQt4 REQUIRED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A module's location is usually a directory, but for binary modules\n\n# it's a .so file.\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/FindSphinx.cmake" : {
      "ObjectId" : "6a6aa6b6ff12f7bc279c8173f2441dea655b2752",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sphinx switched at some point from returning ther version\n\n# on stdout to printing it at stderr. Since we do not know\n\n# ther version yet, we use stdout if it matches a version\n\n# regex, or stderr otherwise.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/MyConfig.cmake" : {
      "ObjectId" : "577ed655adc08bbf5065e4bf17e24f10a86d1965",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2011 Olaf Lenz\n\n# Copyright (C) 2015 The ESPResSo Project\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n# This cmake script is used to find out what myconfig header to use.\n\n# It needs the variables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# heed the environment variable \"ESPRESSO_MYCONFIG\"\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# test whether MYCONFIG_NAME is found in the object or source dir\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use the default if it is not\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Clear variable, otherwise cmake must be run by hand to detect myconfig\n\n# Also prevents find_file from skipping when variable is already set\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/version.cmake" : {
      "ObjectId" : "a630119b2d9484d4e788816e53eb1bbc9bf2120b",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/CMakeLists.txt" : {
      "ObjectId" : "d1a7b7dcf251116fcea625aa0f3e46d183182cb8",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2009,2010,2011,2012,2015 The ESPResSo project\n\n# Copyright (C) 2009,2010 \n\n#   Max-Planck-Institute for Polymer Research, Theory Group\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "e7acd92547beef9abf148c650e63d98d3dcb86d9",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "cb108013416a5ec694a916e27865a6da3f5e073b",
      "LastModified" : "2019-03-05T13:00:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/logo/CMakeLists.txt" : {
      "ObjectId" : "ded9cfb02f500f81cca5cef5b93528bf3d6c4a9f",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/sphinx/CMakeLists.txt" : {
      "ObjectId" : "17a7d4fcabc5c369f4d780bcbb961d15a85b044c",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configured documentation tools and\n\n# intermediate build results\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Sphinx cache with pickled ReST documents\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# HTML output directory\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Sphinx configuration file\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Copy the figure directory to the build dir\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Files to be copied to the build directory\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Place files to be excluded from SPHINX documentation\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "doc/tutorials/01-lennard_jones/CMakeLists.txt" : {
      "ObjectId" : "3facaefeaafacbfeb40d61acaf86b5adb3efa2e4",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/02-charged_system/CMakeLists.txt" : {
      "ObjectId" : "ffa020a7b5d384a7e6b682a0300339f7efcaa309",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/04-lattice_boltzmann/CMakeLists.txt" : {
      "ObjectId" : "b737382772a9a76d35d5cafbf52a4d2fd6aee151",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/05-raspberry_electrophoresis/CMakeLists.txt" : {
      "ObjectId" : "f676fc44bfd87f7c9604f9c77f8055e6827ce2aa",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/06-active_matter/CMakeLists.txt" : {
      "ObjectId" : "ce94837c8fb3df3b48bc4ae59486832cd17a6973",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/07-electrokinetics/CMakeLists.txt" : {
      "ObjectId" : "35f14a3c9b038afd6cb7b45407e4fa9cd4795f2d",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we assume the tex filename is the same as the directory name\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/tutorials/08-visualization/CMakeLists.txt" : {
      "ObjectId" : "871731d56959f8d49acabd7f39045928d74487d5",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/09-swimmer_reactions/CMakeLists.txt" : {
      "ObjectId" : "afae089d0607c3c279240df7791c54a23d7ec13f",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorials/10-reaction_ensemble/CMakeLists.txt" : {
      "ObjectId" : "b333ad94adf83076f640aa31d6876969a1d06ecf",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we assume the tex filename is the same as the directory name\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/tutorials/CMakeLists.txt" : {
      "ObjectId" : "d5dc292c7a001404bd408d7cf0d3c81026028d8f",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2009-2018 The ESPResSo project\n\n# Copyright (C) 2009,2010 \n\n#   Max-Planck-Institute for Polymer Research, Theory Group\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Here: add new directory\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### here: add the appropriate tutorial target after DEPENDS\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "doc/tutorials/XX-tutorial-template/CMakeLists.txt" : {
      "ObjectId" : "eb89a998e254594761ca3b58702c0f88ccc75a94",
      "LastModified" : "2019-01-22T13:26:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we assume the tex filename is the same as the directory name\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME here: for the          XX  give it a proper number (01, 02...)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libs/CMakeLists.txt" : {
      "ObjectId" : "a8a5a68505c83504fabc5b08271025c53a1f4994",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "maintainer/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "fb0bad8776f99983167cedb16d57c156c3bc3ca3",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenMPI 3.0 and higher checks the number of processes against the number of CPUs\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# default values\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# parallel schemes\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "f04c8ae9e12dbfe9c6f05cdd5711d3789448f2d3",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2009-2018 The ESPResSo project\n\n# Copyright (C) 2009,2010 \n\n#   Max-Planck-Institute for Polymer Research, Theory Group\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for the unit tests\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run unit tests on check\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# unit_test function\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build tests only when testing\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If NUM_PROC is given, set up MPI parallel test case\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OpenMPI 3.0 and higher checks the number of processes against the number of CPUs\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "src/config/CMakeLists.txt" : {
      "ObjectId" : "618e4e59c603105bbf101df6fc1d744aba8d8162",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parse repository info from git if available\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "82b88c19c44aa2ef2180cd3fb457aba9644275c5",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Subdirectories\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/core/cluster_analysis/CMakeLists.txt" : {
      "ObjectId" : "354bdd8613a0d48ed1cd83704572397ac9f7021f",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/grid_based_algorithms/CMakeLists.txt" : {
      "ObjectId" : "443e349830a3c29199126a522dcbe3a8efab86ab",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/grid_based_algorithms/lbboundaries/CMakeLists.txt" : {
      "ObjectId" : "b93cecec5d98b417b499f211f2574c778aba7a9e",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/io/CMakeLists.txt" : {
      "ObjectId" : "cb6d8f6455012e10f22921de9d4b5019b80802a2",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/io/mpiio/CMakeLists.txt" : {
      "ObjectId" : "365c58295f9312a57f2d514e530437d4d8145f61",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/io/reader/CMakeLists.txt" : {
      "ObjectId" : "1b9ee38735cdf69fd1efe2d12d579cb81742dd05",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/io/writer/CMakeLists.txt" : {
      "ObjectId" : "f76ea461ed8b2647d6883628b044b3e9441275a3",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include the h5xx C++ library for h5md\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/core/object-in-fluid/CMakeLists.txt" : {
      "ObjectId" : "8b137891791fe96927ad78e64b0aad7bded08bdc",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/shapes/CMakeLists.txt" : {
      "ObjectId" : "268172df6ae1826c0f362a971673f1e0e4129b34",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "e34604cc238380c0db090720c7670d4e27407363",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2010-2018 The ESPResSo project\n\n# Copyright (C) 2002,2003,2004,2005,2006,2007,2008,2009,2010 \n\n#   Max-Planck-Institute for Polymer Research, Theory Group\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is part of ESPResSo.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>. \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add tests here\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/pdbparser/CMakeLists.txt" : {
      "ObjectId" : "c58d79e8cb7e5d4f60ee90c9730eaaebedc8a6fc",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pdbparser/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "2c430a98fdba95b4eff587a6567de5b68c0bb2c7",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/profiler/CMakeLists.txt" : {
      "ObjectId" : "e8546ef3a937fd8ea803e1bea80342b1d079a53d",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/python/CMakeLists.txt" : {
      "ObjectId" : "ff61549225406a058aa810038c822f9102db2d9e",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure pypresso for build dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure pypresso for install dir\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make a target for pypresso, so that things can depend on it\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/python/espressomd/CMakeLists.txt" : {
      "ObjectId" : "164b6ba29e7c79797488fcc5f62a12a089975017",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013-2018 The ESPResSo project\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make the cython_SRC, cython_HEADER and cython_AUX a cached variable to\n\n# be able to extend it in the subdirectories.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/python/espressomd/io/CMakeLists.txt" : {
      "ObjectId" : "65ac3f7bb23631ed46e58a224ecd9ffee53e9b2b",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/python/espressomd/io/writer/CMakeLists.txt" : {
      "ObjectId" : "ed80aec4b9deba0e6c53abc275d259608860c3c9",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/python/object_in_fluid/CMakeLists.txt" : {
      "ObjectId" : "37c646e16d6e998b670e5dce64f0f9df55dde558",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013-2018 The ESPResSo project\n\n#\n\n# This file is part of ESPResSo.\n\n#\n\n# ESPResSo is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ESPResSo is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/scafacos/CMakeLists.txt" : {
      "ObjectId" : "4cd28c1baf65e5694dcd1aa024350481ff98744d",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/script_interface/CMakeLists.txt" : {
      "ObjectId" : "b32bca86c98795382956068277134877c4c2ed6c",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/CMakeLists.txt" : {
      "ObjectId" : "53400255873ac394e1715dee940c95008b8d4000",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/cmake/CMakeLists.txt" : {
      "ObjectId" : "f88ea945860deff72cf84d9cfa9ae92b1aa21994",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# obtain Python*_SITEARCH without find_package(Python*)\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "testsuite/python/CMakeLists.txt" : {
      "ObjectId" : "2ac7ecf6a06103c9d56b879d6644ce2308a9623b",
      "LastModified" : "2019-04-16T11:41:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenMPI 3.0 and higher checks the number of processes against the number of CPUs\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Checkpointing tests: semicolon-separated list of mutually-compatible features.\n\n# Separate features with hyphens, use a period to add an optional flag.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "testsuite/scripts/CMakeLists.txt" : {
      "ObjectId" : "7e10a2010e1ef1858bfd4a6ad8efadcc6f32bd23",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testsuite/scripts/samples/CMakeLists.txt" : {
      "ObjectId" : "a415d071799aa23114c89a69c4aa7d65b3f2b4ad",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# forward arguments\n",
        "Line" : 2,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : "# configure Python module importlib_wrapper.py\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create a local copy of the samples\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cleanup\n",
        "Line" : 15,
        "CharPositionInLine" : 79
      },
      "CommentCount" : 4
    },
    "testsuite/scripts/tutorials/CMakeLists.txt" : {
      "ObjectId" : "cbf691d0d8ef31cc47661d26f716dd369cc5a0d6",
      "LastModified" : "2019-04-16T12:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# forward arguments\n",
        "Line" : 2,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# configure Python module importlib_wrapper.py\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create a local copy of the tutorials\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cleanup\n",
        "Line" : 15,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 60
  },
  "ElapsedTime" : 23163
}