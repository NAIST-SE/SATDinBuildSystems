{
  "Repository" : "6699387",
  "Revision" : "HEAD",
  "ObjectId" : "7ce35162029fd4eb8e6182b2d192d5bd1fe6b7cd",
  "CommitTime" : "2019-04-15T09:03:42Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0cb1b25f91bc538f9cc09504ea4851427714e45d",
      "LastModified" : "2019-01-22T10:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for ninja\n",
        "Line" : 25,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : "# options shared by all targets\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# hints for FindSDL\n",
        "Line" : 62,
        "CharPositionInLine" : 88
      },
      "3" : {
        "Text" : "# Python check\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Get locations of Qt binary executables & libs (libs are for distros, not for linking)\n\n# first set up some hints\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try to find Qt translations\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "### Common definitions for the Qt-based apps\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# more efficient QString construction using % operator\n",
        "Line" : 115,
        "CharPositionInLine" : 59
      },
      "8" : {
        "Text" : "# provide full qDebug log context to our custom handler. This may also affect libsimulator, which is why it is here\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# QUIET not working on WIN32?\n",
        "Line" : 136,
        "CharPositionInLine" : 27
      },
      "10" : {
        "Text" : "# if(NOT WIN32)\n",
        "Line" : 139,
        "CharPositionInLine" : 9
      },
      "11" : {
        "Text" : "# this prevents FindSDL from appending SDLmain lib to the results, which we don't want\n",
        "Line" : 145,
        "CharPositionInLine" : 33
      },
      "12" : {
        "Text" : "# Check for a file that is typically left from a OpenTX 2.1 build and abort if found\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Windows-specific includes and libs shared by sub-projects\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Bitmaps.cmake" : {
      "ObjectId" : "f5281c0d3b129d45ca605b51dd844e7ee9a00790",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindFox.cmake" : {
      "ObjectId" : "1100c710d79d515a7da623fcca05d19b10aadf80",
      "LastModified" : "2016-07-22T15:35:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Imported from the DeskVox project (LPGL 2.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindPhonon.cmake" : {
      "ObjectId" : "23ec18dfc1086d7941d6876fdd8cb9c0efa30511",
      "LastModified" : "2016-07-22T15:35:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libphonon\n\n# Once done this will define\n\n#\n\n#  PHONON_FOUND    - system has Phonon Library\n\n#  PHONON_INCLUDES - the Phonon include directory\n\n#  PHONON_LIBS     - link these to use Phonon\n\n#  PHONON_VERSION  - the version of the Phonon Library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already found, nothing more to do except figuring out the version\n",
        "Line" : 26,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# As discussed on kde-buildsystem: first look at CMAKE_PREFIX_PATH, then at the suggested PATHS (kde4 install dir)\n",
        "Line" : 33,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# then at the default system locations (CMAKE_SYSTEM_PREFIX_PATH, i.e. /usr etc.)\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "cmake/FindSDL.cmake" : {
      "ObjectId" : "b2abd3042042393792aa01d5763672fc97332ce1",
      "LastModified" : "2016-12-23T23:11:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL\n\n# -------\n\n#\n\n# Locate SDL library\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   SDL_FOUND, if false, do not try to link to SDL\n\n#   SDL_LIBRARY, the name(s) of the library(ies) to link against\n\n#   SDL_LIBSDL, the full path and name of libSDL (or SDL.[lib|dll].\n\n#   SDL_LIBSDLMAIN, full path and name of libSDLmain (or SDLmain.lib).\n\n#   SDL_LIBRARY_PATH, the full path to the found libSDL\n\n#   SDL_INCLUDE_DIR, where to find SDL.h\n\n#   SDL_VERSION_STRING, human-readable string containing the version of SDL\n\n#\n\n#\n\n#\n\n# This module responds to the flag:\n\n#\n\n# ::\n\n#\n\n#   SDL_BUILDING_LIBRARY\n\n#     If this is defined, then no SDL_main will be linked in because\n\n#     only applications need main().\n\n#     Otherwise, it is assumed you are building an application and this\n\n#     module will attempt to locate and set the proper link flags\n\n#     as part of the returned SDL_LIBRARY variable.\n\n#\n\n#\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version.  (Other versions link to -lSDLmain which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL_LIBSDL in your\n\n# configuration and no SDL_LIBRARY, it means CMake did not find your SDL\n\n# library (SDL.dll, libsdl.so, SDL.framework, etc).  Set\n\n# SDL_LIBSDL to point to your SDL library, and configure again.\n\n# Similarly, if you see an empty SDL_LIBSDLMAIN, you should set this\n\n# value as appropriate.  These values are used to generate the final\n\n# SDL_LIBRARY variable, but when these values are unset, SDL_LIBRARY\n\n# does not get created.\n\n#\n\n#\n\n#\n\n# $SDLDIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDLDIR used in building SDL.  l.e.galup 9-20-02\n\n#\n\n# Modified by Eric Wing.  Added code to assist with automated building\n\n# by using environmental variables and providing a more\n\n# controlled/consistent search behavior.  Added new modifications to\n\n# recognize OS X frameworks and additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL\n\n# guidelines.  Added a search for SDLmain which is needed by some\n\n# platforms.  Added a search for threads which is needed by some\n\n# platforms.  Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of SDL_LIBRARY to\n\n# override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention is #include\n\n# \"SDL.h\", not <SDL/SDL.h>.  This is done for portability reasons\n\n# because not all systems place things in SDL/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Modified for OpenTx by Maxim Paperno 19-Dec-2016\n\n# Added SDL_LIBSDL, SDL_LIBSDLMAIN & SDL_LIBRARY_PATH, removed SDLMAIN_LIBRARY,\n\n#  SDL_LIBRARY_TEMP, and fixed bug with recursive appending of supporting \n\n#  libraries to cached SDL_LIBRARY_TEMP variable.\n\n#\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n#CMake - Cross Platform Makefile Generator\n\n#Copyright 2000-2015 Kitware, Inc.\n\n#Copyright 2000-2011 Insight Software Consortium\n\n#All rights reserved.\n\n#\n\n#Redistribution and use in source and binary forms, with or without\n\n#modification, are permitted provided that the following conditions\n\n#are met:\n\n#\n\n#* Redistributions of source code must retain the above copyright\n\n#  notice, this list of conditions and the following disclaimer.\n\n#\n\n#* Redistributions in binary form must reproduce the above copyright\n\n#  notice, this list of conditions and the following disclaimer in the\n\n#  documentation and/or other materials provided with the distribution.\n\n#\n\n#* Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#  nor the names of their contributors may be used to endorse or promote\n\n#  products derived from this software without specific prior written\n\n#  permission.\n\n#\n\n#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n#\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n#LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n#A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n#HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n#SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n#LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n#DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n#THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#------------------------------------------------------------------------------\n\n#\n\n#The above copyright and license notice applies to distributions of\n\n#CMake in source and binary form.  Some source files contain additional\n\n#notices of original copyright by their contributors; see each source\n\n#for details.  Third-party software packages supplied with CMake under\n\n#compatible licenses provide their own copyright notices documented in\n\n#corresponding subdirectories.\n\n#\n\n#------------------------------------------------------------------------------\n\n#\n\n#CMake was initially developed by Kitware with the following sponsorship:\n\n#\n\n# * National Library of Medicine at the National Institutes of Health\n\n#   as part of the Insight Segmentation and Registration Toolkit (ITK).\n\n#\n\n# * US National Labs (Los Alamos, Livermore, Sandia) ASC Parallel\n\n#   Visualization Initiative.\n\n#\n\n# * National Alliance for Medical Image Computing (NAMIC) is funded by the\n\n#   National Institutes of Health through the NIH Roadmap for Medical Research,\n\n#   Grant U54 EB005149.\n\n#\n\n# * Kitware, Inc.\n\n#=============================================================================\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\n",
        "Line" : 146,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# SDL-1.1 is the name used by FreeBSD ports...\n\n# don't confuse it for the version number.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDLmain. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDLmain for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SDL may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDLmain -lSDL\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDLmain\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# For OS X, SDL uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDLmain -lSDL\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "cmake/FindXercesC.cmake" : {
      "ObjectId" : "4431cbdf598e871cd10eb7a8be552b769c04a8fe",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Xerces-C\n\n# The following setings are defined\n\n# XERCESC_ROOT_DIR, the root of the include and lib directory\n\n# XERCESC_INCLUDE_DIR, the full path of the include dir (ADVANCED)\n\n# XERCESC_LIBRARIES, the name of the xerces-c library (ADVANCED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for a root installation\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# try to find the header\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the library\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: There should be a better way of handling this?\n\n# FIXME: How can we test to see if the lib dir isn't\n\n# FIXME: one of the default dirs?\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/FindXsd.cmake" : {
      "ObjectId" : "1e50f6269c03a3a936be27f98d4f1f75b170cf1d",
      "LastModified" : "2016-12-23T23:11:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Xsd from code synthesis include paths and binary\n\n# Xsd can be found at http://codesynthesis.com/products/xsd/\n\n# Written by Frederic Heem, frederic.heem _at_ telsey.it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\n\n# XSD_INCLUDE_DIR, where to find elements.hxx, etc.\n\n# XSD_EXECUTABLE, where is the xsd compiler\n\n# XSD_FOUND, If false, don't try to use xsd\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Macros.cmake" : {
      "ObjectId" : "c8ca02aa0c21c8e2d570d629badf36b9e214d6c0",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "companion/src/CMakeLists.txt" : {
      "ObjectId" : "fd7233eb2d735c7bfab2d5e09ca80aba95b3debc",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This the name that the user will see in the generated DMG and what the application\n\n# will be called under /Applications. We include the version string to make installing\n\n# different versions for different eeproms easier, i.e. without manually renaming\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On OS X we copy dfu-util to the application bundle. This the path from which we copy\n\n# the binary (default homebrew path)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disabled by default\n",
        "Line" : 30,
        "CharPositionInLine" : 70
      },
      "3" : {
        "Text" : "# Disabled by default\n",
        "Line" : 35,
        "CharPositionInLine" : 71
      },
      "4" : {
        "Text" : "# Disabled by default\n",
        "Line" : 44,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# set in top-level CMakeLists\n",
        "Line" : 63,
        "CharPositionInLine" : 40
      },
      "6" : {
        "Text" : "# silence lots of warnings regarding \"insecure\" use of functions (sprintf, strcpy, etc)\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# GUI (WinMain) app\n",
        "Line" : 81,
        "CharPositionInLine" : 36
      },
      "8" : {
        "Text" : "# is this even needed?\n",
        "Line" : 86,
        "CharPositionInLine" : 87
      },
      "9" : {
        "Text" : "# struct packing breaks on MinGW w/out -mno-ms-bitfields: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991 & http://stackoverflow.com/questions/24015852/struct-packing-and-alignment-with-mingw\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# ensure gnu++11 in CXX_FLAGS with CMake < 3.1\n",
        "Line" : 100,
        "CharPositionInLine" : 13
      },
      "11" : {
        "Text" : "############# Do macro replacements on input files #############\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "############# Translations ###############\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Generate .qm files and assemble resource (qrc) file.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# available Companion translations (src/translations/*.ts)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# .ts -> .qm\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add Qt translations if found\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Some languages have all translations in one qt_*.qm file and others break them up into modules, in which case we need qt_base_*.qm\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# don't want to match \"qt_help_*.qm\"\n",
        "Line" : 135,
        "CharPositionInLine" : 54
      },
      "19" : {
        "Text" : "# exceptions not matched by the GLOB\n",
        "Line" : 136,
        "CharPositionInLine" : 96
      },
      "20" : {
        "Text" : "# Dynamically create translations.qrc file (XML) from all collected translation files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add file with full path and file name (w/out path) as alias to be used in actual code\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "### Add optional \"translations\" target for updating .ts files\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "############# Common lib ###############\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# used in simulator\n\n# used by node\n",
        "Line" : 168,
        "CharPositionInLine" : 22
      },
      "25" : {
        "Text" : "############# Supporting libraries ###############\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "############# Companion ###############\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "############# Standalone simulator ###############\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "############# Install ####################\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Generate list of simulator plugins, used by all platforms\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# the current flavour is not automatically added if build in the current cmake iteration, so always\n\n# add its library name to be sure\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# https://cmake.org/cmake/help/v3.0/policy/CMP0026.html\n",
        "Line" : 332,
        "CharPositionInLine" : 33
      },
      "32" : {
        "Text" : "# Linux specific code\n",
        "Line" : 360,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Just copy supporting DLLs to build folder\n",
        "Line" : 373,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Full Windows installation with all supporting files\n",
        "Line" : 377,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# companion & simulator binaries\n",
        "Line" : 380,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# supporting utilities\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# WIN_DO_FULL_INSTALL\n",
        "Line" : 389,
        "CharPositionInLine" : 11
      },
      "38" : {
        "Text" : "# Qt dlls\n",
        "Line" : 391,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# ICU dlls\n",
        "Line" : 396,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Qt5.7+ doesn't use icu dlls anymore, hence optional\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# SDL dll\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# this is also used by NSIS installer script\n",
        "Line" : 403,
        "CharPositionInLine" : 38
      },
      "43" : {
        "Text" : "# libeay (SSL) dlls  (used by QtNetwork)\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# this is also used by NSIS installer script\n",
        "Line" : 410,
        "CharPositionInLine" : 23
      },
      "45" : {
        "Text" : "# Mingw-w64 comes with the required DLLs\n",
        "Line" : 411,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# check the user-configured WIN_EXTRA_LIBS_PATH for an OpenSSL folder\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# most build setups will still have the (now legacy) PyQt dependency, so check for that next\n",
        "Line" : 417,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# the \"slow\" way -- look for an OpenSSL install\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# C++/system dlls, depends on compiler\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# This would be \"system32\" for a 64-bit build or on x86... but how to tell?\n",
        "Line" : 434,
        "CharPositionInLine" : 46
      },
      "51" : {
        "Text" : "# WIN32 install\n",
        "Line" : 445,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "############# Packaging ####################\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Create Windows installer with NSIS (only works for MSVC for now)\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../targets/windows/${SIMULATOR_NSI_IN_FILE} ${PROJECT_BINARY_DIR}/companion/simulator.nsi @ONLY)\n",
        "Line" : 461,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "#  add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/companion/simulator-install.exe\n\n#    COMMAND \"${NSIS_EXE}\" ARGS ${PROJECT_BINARY_DIR}/companion/simulator.nsi\n\n#    DEPENDS simulator ${PROJECT_BINARY_DIR}/companion/simulator.nsi\n\n#    COMMENT \"Simulator Windows NSIS Installer\")\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#    DEPENDS ${PROJECT_BINARY_DIR}/companion/simulator-windows.exe\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#    SOURCES ${PROJECT_BINARY_DIR}/companion/simulator.nsi\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# The file stripping is deliberately disabled, with the stripped file we get\n\n# very poor trace-backs from the users when they report Companion crash\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Qt5 + Cmake + Mac is poorly documented. A lot of this is guesswork\n\n# and trial and error. Do not hesitate to fix it for the better\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Use a non standard Info.plist that adds Retina support flags\n",
        "Line" : 506,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Write qt.conf to tell qt where to find it plugins\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# menu file\n",
        "Line" : 524,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# manually add the required plugins\n",
        "Line" : 527,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Todo is there a nicer way to get the QT Plugin directory name?!\n",
        "Line" : 531,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Add icon\n",
        "Line" : 540,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# Copy dfu-util and avrdude, resolve symlink first\n",
        "Line" : 547,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# Include depencies (adding frameworks, fixing the embbeded libraries)\n\n# I get write errors without setting BU_CHMOD_BUNDLE_ITEMS even though it is\n\n# technically a hack (that is already is in the Bundle library ...)\n",
        "Line" : 557,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# set(CPACK_GENERATOR \"TGZ\")  # for quick testing\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 69
    },
    "companion/src/firmwares/CMakeLists.txt" : {
      "ObjectId" : "b6b8fcaba4e1550c66b455fcd53d61bebec64eb1",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "companion/src/generaledit/CMakeLists.txt" : {
      "ObjectId" : "827c37ddfa9263c3eea100db1104251e7527d552",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "companion/src/modeledit/CMakeLists.txt" : {
      "ObjectId" : "6c0ca893b98852e9dde46d4ba7953971eef5d8c8",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# templates.cpp\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# node.cpp  ## node and edge are built in common lib because also used by simulator\n\n# edge.cpp  ## commenting them here avoids a \"duplicate target\" warning eg. from ninja\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# templates.h\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# node.h\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "companion/src/shared/CMakeLists.txt" : {
      "ObjectId" : "1692c70dcc2d17b7b3bf2124061c325287289928",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "companion/src/simulation/CMakeLists.txt" : {
      "ObjectId" : "20de5301d92a75eb0f1f68a05b843e7c74e1d3b2",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# simulator.h\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "companion/src/storage/CMakeLists.txt" : {
      "ObjectId" : "b779ca75daa14a236eb798b111a9cfb33e387094",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "companion/src/thirdparty/maxlibqt/src/widgets/CMakeLists.txt" : {
      "ObjectId" : "1f7c606b8275393c4e5db08112988b6b524b2e5f",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\t\"${CMAKE_CURRENT_LIST_DIR}/ScrollableMessageBox.cpp\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t\"${CMAKE_CURRENT_LIST_DIR}/TreeComboBox.cpp\"\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t\"${CMAKE_CURRENT_LIST_DIR}/ScrollableMessageBox.h\"\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t\"${CMAKE_CURRENT_LIST_DIR}/TreeComboBox.h\"\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# need to push this upstream\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "companion/src/thirdparty/miniz/CMakeLists.txt" : {
      "ObjectId" : "5056900b3adb32b8ae4e597be1f26468e056223e",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "companion/src/thirdparty/qcustomplot/CMakeLists.txt" : {
      "ObjectId" : "9bccbd622f3f4c1a41c3ddf2b59db7c2a39eecaf",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/Mega2560/MEGA2560.pro" : {
      "ObjectId" : "3cb03fb277e8b2c24f0cc920f56f45e48e8b9ed0",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "radio/src/CMakeLists.txt" : {
      "ObjectId" : "38be1e3508ee6175bc0ff64648b3642931b206fc",
      "LastModified" : "2018-08-30T08:37:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# since we reset all default CMAKE compiler flags for firmware builds, provide an alternate way for user to specify additional flags.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# silence lots of warnings regarding \"insecure\" use of functions (sprintf, strcpy, etc) from Lua code\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# this is for pthread.h\n",
        "Line" : 412,
        "CharPositionInLine" : 43
      },
      "3" : {
        "Text" : "##### firmware target #####\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# trick to remove the -rdynamic and --out-implib issues\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# similar for -mmacosx-version-min=\"\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# reset some CMake default flags which assume optimization levels/etc\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# customize linker command\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ensure gnu++11 in CXX_FLAGS with CMake < 3.1\n",
        "Line" : 457,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# these are in addition to CMAKE_CXX_FLAGS\n",
        "Line" : 481,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Use newlib nano, which saves a few kilobytes.\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Lua needs %g and %f\n",
        "Line" : 491,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Nano's malloc does work well with lua, use our own\n",
        "Line" : 494,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# We fetch Mike's bootloader as it is not included inside OpenTX\n",
        "Line" : 505,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# OS X might only have \"awk\"\n",
        "Line" : 525,
        "CharPositionInLine" : 104
      },
      "15" : {
        "Text" : "# AVR\n",
        "Line" : 540,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# bogus \"uninitialized\" warnings from ld\n",
        "Line" : 548,
        "CharPositionInLine" : 54
      },
      "17" : {
        "Text" : "# ARM or AVR\n",
        "Line" : 605,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 18
    },
    "radio/src/bitmaps/128x64/CMakeLists.txt" : {
      "ObjectId" : "9119629ff80bfc6fa50330fae07784d7d5d7fcb7",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/bitmaps/212x64/CMakeLists.txt" : {
      "ObjectId" : "c7e4b0fece334a99cc2a05e34e8841b2572c12d6",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/bitmaps/480x272/CMakeLists.txt" : {
      "ObjectId" : "26cfd2d44539a3fa16b731e1b45657a5cee0cc70",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/bitmaps/CMakeLists.txt" : {
      "ObjectId" : "e723cf31379d7a1563973629ca288235f14074a0",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/fonts/480x272/CMakeLists.txt" : {
      "ObjectId" : "09a68efdb1e58eed57750f2d367c8604ab879282",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(FONT \"Kanit/Kanit-Regular\")\n\n#set(FONT_BOLD \"Kanit/Kanit-Bold\")\n\n#set(FONT_OFFSET -2)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(FONT \"Ubuntu/Ubuntu-Regular\")\n\n#set(FONT_BOLD \"Ubuntu/Ubuntu-Bold\")\n\n#set(FONT_OFFSET 1)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "radio/src/fonts/CMakeLists.txt" : {
      "ObjectId" : "4f9b537cfc34d5bd41aa93ef08c87504a3d92691",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/gui/CMakeLists.txt" : {
      "ObjectId" : "5c3ad1cf961fc5874bf17616e358bfc4778c1870",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/gui/common/stdlcd/CMakeLists.txt" : {
      "ObjectId" : "32683c3072a4f6d90eb416182bf7d0a66c61a038",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/lua/CMakeLists.txt" : {
      "ObjectId" : "28a1638489bcdd3b736a44dde73b29e79ec09110",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/9x/CMakeLists.txt" : {
      "ObjectId" : "67131794c41d1335846097261eb9aff59bcc1c70",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/common/arm/CMakeLists.txt" : {
      "ObjectId" : "12b5da77b7e4cb0faf83cd0be2b0bddbb26bc754",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO rename to XJT_EU_ONLY\n",
        "Line" : 11,
        "CharPositionInLine" : 78
      },
      "CommentCount" : 1
    },
    "radio/src/targets/common/arm/stm32/CMakeLists.txt" : {
      "ObjectId" : "3c7c046bfbfa93f824a52c09fa1be57e4988c047",
      "LastModified" : "2018-06-04T05:44:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/common/arm/stm32/bootloader/CMakeLists.txt" : {
      "ObjectId" : "770e03d3a0f499a64cdeca3286d7a120256cd727",
      "LastModified" : "2018-06-30T15:40:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO if the files order is different (these 2 SRC sections exchanged), the bootloader hangs for 20s in USB init. Why?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use smaller nano libc\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "radio/src/targets/common/arm/stm32/f2/CMakeLists.txt" : {
      "ObjectId" : "1dec044f29ef89383289063821b26cff7f102255",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/common/arm/stm32/f4/CMakeLists.txt" : {
      "ObjectId" : "297c76dba07af614ed25148a60cf385170c1b035",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/common/avr/CMakeLists.txt" : {
      "ObjectId" : "d94bac83f5ddae6bae25cda15b0093678c4b490e",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/gruvin9x/CMakeLists.txt" : {
      "ObjectId" : "158cba68fd283acb6ff68cc8f6ab12dcfaef8839",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/horus/CMakeLists.txt" : {
      "ObjectId" : "565b102b64861c13c07868dcbf29321879178571",
      "LastModified" : "2018-07-05T17:04:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for size report script\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "radio/src/targets/mega2560/CMakeLists.txt" : {
      "ObjectId" : "299d8ae461889e01720ece810caa235d01e7ccd5",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "radio/src/targets/simu/CMakeLists.txt" : {
      "ObjectId" : "284c2a446936829cd6c9bc356a403f72dc91be3e",
      "LastModified" : "2018-07-05T17:04:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set in top-level CMakeLists\n",
        "Line" : 38,
        "CharPositionInLine" : 80
      },
      "1" : {
        "Text" : "# Prepare the \"all-simu-libs\" target to build simulator libraries for *every* supported PCB type (PCB_TYPES list)\n\n#  (a fast build machine or corresponding amount of patience is recommended for this target).\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Ensure parallel builds with GCC make (try with MAKEFLAGS but this seems to be getting clobbered somewhere).\n\n# otherwise 'make' may complain: \"warning: jobserver unavailable: using -j1...\" and build single-threaded.  (Ninja always rocks this.)\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# struct packing breaks on MinGW w/out -mno-ms-bitfields: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991 & http://stackoverflow.com/questions/24015852/struct-packing-and-alignment-with-mingw\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# ensure gnu++11 in CXX_FLAGS with CMake < 3.1\n",
        "Line" : 84,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# OS X compiler no longer automatically includes /Library/Frameworks in search path\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "radio/src/targets/sky9x/CMakeLists.txt" : {
      "ObjectId" : "883ac3d80b584b3c6cf25131e0404de15442f936",
      "LastModified" : "2018-07-05T17:04:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for size report\n",
        "Line" : 21,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# for size report\n",
        "Line" : 34,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# for size report\n",
        "Line" : 49,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# for size report\n",
        "Line" : 60,
        "CharPositionInLine" : 34
      },
      "CommentCount" : 4
    },
    "radio/src/targets/taranis/CMakeLists.txt" : {
      "ObjectId" : "6505a65213200d2ff451f837ca4121a8d66e7fbc",
      "LastModified" : "2018-07-05T17:04:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for size report\n",
        "Line" : 11,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : "# for size report\n",
        "Line" : 35,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# for size report\n",
        "Line" : 50,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# for size report\n",
        "Line" : 66,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# for size report\n",
        "Line" : 83,
        "CharPositionInLine" : 34
      },
      "CommentCount" : 5
    },
    "radio/src/tests/CMakeLists.txt" : {
      "ObjectId" : "881adf0285f623db2851aa2e9db53d1b0809df9e",
      "LastModified" : "2018-07-05T17:04:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# struct packing breaks on MinGW w/out -mno-ms-bitfields: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991 & http://stackoverflow.com/questions/24015852/struct-packing-and-alignment-with-mingw\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# ensure gnu++11 in CXX_FLAGS with CMake < 3.1\n",
        "Line" : 38,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 2
    },
    "radio/src/thirdparty/Lua/Makefile" : {
      "ObjectId" : "bd9515fd84dad9bfbbdb51bdce3f7a2cf6fb5b8b",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "radio/src/thirdparty/Lua/src/Makefile" : {
      "ObjectId" : "fea895bc065711b62bee958d248397e7cb77c9fe",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "radio/src/translations/CMakeLists.txt" : {
      "ObjectId" : "5861862e3d3141e76cf99adb9d97ff8b1850926b",
      "LastModified" : "2018-05-21T08:45:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 43,
    "QMAKE" : 1,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 10031
}