{
  "Repository" : "23967750",
  "Revision" : "HEAD",
  "ObjectId" : "5fb77b684f8c1fcc3595ecede348bab44a570900",
  "CommitTime" : "2016-04-08T13:13:58Z",
  "Files" : {
    "avinash/auth/node_modules/body-parser/node_modules/bytes/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/body-parser/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/auth/node_modules/express/node_modules/escape-html/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/express/node_modules/qs/Makefile" : {
      "ObjectId" : "31cc899d4ad78f3c0db311c5530b06e340e3cd2a",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "5f339bf34743cfff261c4656f1e3d98d3900f390",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/hawk/node_modules/boom/Makefile" : {
      "ObjectId" : "884ec6db159e9b72a99602b668b2e28fcb890949",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "e605d6c049d83bf59240a5f9cc27269ac56ae0d5",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/mime-types/Makefile" : {
      "ObjectId" : "ceaf011fb86c74745326bbb9a7b47225961709d7",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/auth/node_modules/passport/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/ext/Font-Awesome/src/3.2.1/Makefile" : {
      "ObjectId" : "7359665afb4b7328f22bf2767479039bf989fe6b",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/ext/Font-Awesome/src/Makefile" : {
      "ObjectId" : "bd98b53a238fedf76e985c3f303f6fd974f2e6ce",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tsass ${FA_SCSS_MODERN} ${FA_CSS_MODERN}\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avinash/site/ext/socket.io-client/tags/1.3.6/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/buffer/node_modules/is-array/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/Makefile" : {
      "ObjectId" : "7be01de7e329ee88a7fcda24dc12a3b609e56d23",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/Makefile" : {
      "ObjectId" : "7be01de7e329ee88a7fcda24dc12a3b609e56d23",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/labeled-stream-splicer/node_modules/stream-splicer/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/module-deps/node_modules/stream-combiner2/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/stream-http/node_modules/foreach/Makefile" : {
      "ObjectId" : "eae41178666a0e7f624dd07f1e9fc8d8e38e038b",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/stream-http/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/vm-browserify/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/browserify/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/site/node_modules/express-winston/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/express-winston/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/site/node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-16T20:25:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/Makefile" : {
      "ObjectId" : "4acf1e524b8ea1533bb0af28df27d87a7854dc5c",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/Makefile" : {
      "ObjectId" : "5046cedf951e1a6829b6781848c35f90560033e6",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/Makefile" : {
      "ObjectId" : "068eb5f06b8b7e72e1bb8d703cae0cc160358f44",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "37848c9225a509dc4cebc85091167275734b8ea9",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "9739162d3ee4662a14450e5737cc392efe6c4bb6",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "avinash/site/node_modules/socket.io/node_modules/has-binary-data/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/backo2/Makefile" : {
      "ObjectId" : "9987df81aae366edffe9f845b048f7fe8a0c90db",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-bind/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/Makefile" : {
      "ObjectId" : "203b4b59b368202c47fef4ac614e05906fb9e56b",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-inherit/Makefile" : {
      "ObjectId" : "ebbc52a3df3bf5bd55c578ef664efbf555a3d822",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/Makefile" : {
      "ObjectId" : "068eb5f06b8b7e72e1bb8d703cae0cc160358f44",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/node_modules/global/Makefile" : {
      "ObjectId" : "eee4830a33170d3122c4bf5c8bb731ccf4e46bab",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "fd8f028f9b18c5adb35506c48200ef5ca965312b",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "40540445ef852a5e91291c85aa3278e7332a5ff9",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/object-component/Makefile" : {
      "ObjectId" : "b6b98504ec9ce79a7abfb6b8b7c10426c234c963",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/socket.io/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "56fae7221cfd7d61a7f040e06166e70feeb809f4",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "avinash/site/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "avinash/site/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "714c701f8e28d36f95b95417d95904cd0aef9202",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "avinash/site/public/javascripts/ext/socket.io/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2015-09-30T12:24:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/connect-redis/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2015-12-15T02:59:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/auth/node_modules/express-session/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-15T10:01:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/auth/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-15T10:01:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/auth/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/auth/node_modules/mongodb/node_modules/kerberos/build/Makefile" : {
      "ObjectId" : "2befe1cd961320cd74cae7db86c5f4fde06771bb",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "common/apps/auth/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/auth/node_modules/mongoose/node_modules/hooks-fixed/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongoose/node_modules/kareem/Makefile" : {
      "ObjectId" : "f71ba900895bb9079f6c39a8f47dd1342720fe9b",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "b0bb0819b7703ad4840145ed3df36afe6ba4614a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongoose/node_modules/mquery/Makefile" : {
      "ObjectId" : "dbb2831855fd93ecc008039e5a033d653804b6c1",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongoose/node_modules/mquery/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/auth/node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/mongoose/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/auth/node_modules/passport-facebook/node_modules/passport-oauth2/node_modules/oauth/Makefile" : {
      "ObjectId" : "7723a3900d8df91445057f5cd89ffbdd7c5bc8bf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Run all tests\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "common/apps/auth/node_modules/passport-google-oauth2/node_modules/passport-oauth2/node_modules/oauth/Makefile" : {
      "ObjectId" : "7723a3900d8df91445057f5cd89ffbdd7c5bc8bf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Run all tests\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "common/apps/auth/node_modules/passport/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/landing/public/javascripts/ext/socket.io/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/body-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "common/apps/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/apps/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/express-bunyan-logger/Makefile" : {
      "ObjectId" : "95d2b6db66b05cacf06baf6e0a6a5c90811b5ab1",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/express-session/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/express-winston/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/express-winston/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/ioredis/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/jshashes/Makefile" : {
      "ObjectId" : "cdfce90478ea203c4be5fadca0f3920c0728efd8",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/kerberos/build/Makefile" : {
      "ObjectId" : "fdd1d85fd6d838bf1d16356479bfeb013a73443d",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "common/apps/node_modules/less/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/less/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/less/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/less/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/less/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/verror/Makefile" : {
      "ObjectId" : "00faa97de520890d9b1fe77fe3184909069d0405",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/less/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/node_modules/mongoose/node_modules/hooks-fixed/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongoose/node_modules/kareem/Makefile" : {
      "ObjectId" : "f71ba900895bb9079f6c39a8f47dd1342720fe9b",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongoose/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/apps/node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "b0bb0819b7703ad4840145ed3df36afe6ba4614a",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongoose/node_modules/mquery/Makefile" : {
      "ObjectId" : "dbb2831855fd93ecc008039e5a033d653804b6c1",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/mongoose/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-01-22T14:19:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/node-docker-monitor/node_modules/dockerode/node_modules/docker-modem/node_modules/split-ca/Makefile" : {
      "ObjectId" : "412fd540cec4f8d8970bceecaa0062805f576a3d",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/verror/Makefile" : {
      "ObjectId" : "00faa97de520890d9b1fe77fe3184909069d0405",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/apps/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/redbird/node_modules/valid-url/Makefile" : {
      "ObjectId" : "143589a16388cca6cf4600311ae62bdd0200ad11",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-02-02T13:53:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/apps/node_modules/wiziq-node-docker/node_modules/dockerode/node_modules/docker-modem/node_modules/split-ca/Makefile" : {
      "ObjectId" : "412fd540cec4f8d8970bceecaa0062805f576a3d",
      "LastModified" : "2016-02-16T06:06:27Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/ext/redis-3.0.7/Makefile" : {
      "ObjectId" : "e614ede891f2dd183a3ae41ea1ac3b63fe2e7634",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Top level makefile, the real shit is at src/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "common/ext/redis-3.0.7/deps/Makefile" : {
      "ObjectId" : "1f623ea7b11d7aaffd5f07eaaf8fcefc84ace0f5",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Redis dependency Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 5:8 token recognition error at: '\"\\0'\nline 6:11 token recognition error at: '\\0'\nline 7:10 token recognition error at: '\\0'\nline 8:10 token recognition error at: '\\0'\nline 9:11 token recognition error at: '\\0'\nline 10:10 token recognition error at: '\\0'\nline 81:80 token recognition error at: '\" lib/libjemalloc.a\\n\\n.PHONY: jemalloc\\n\u0000'\n"
    },
    "common/ext/redis-3.0.7/deps/hiredis/Makefile" : {
      "ObjectId" : "ddcc4e4f69df93da363680b8ac657d7aca2d692f",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hiredis Makefile\n\n# Copyright (C) 2010-2011 Salvatore Sanfilippo <antirez at gmail dot com>\n\n# Copyright (C) 2010-2011 Pieter Noordhuis <pcnoordhuis at gmail dot com>\n\n# This file is released under the BSD license, see the COPYING file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# redis-server configuration used for testing\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fallback to gcc when $CC is not in $PATH.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Platform-specific overrides\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Deps (use make dep to generate this)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Binaries:\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Installation related variables and target\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/ext/redis-3.0.7/deps/linenoise/Makefile" : {
      "ObjectId" : "1dd894b49e9b992c8d9b22de75b30d21fcb63e81",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/ext/redis-3.0.7/deps/lua/Makefile" : {
      "ObjectId" : "209a1324418c25c7b0abc766fe6bd338df5b203f",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for installing Lua\n\n# see INSTALL for installation instructions\n\n# see src/Makefile and src/luaconf.h for further customization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# You probably want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h (and also with etc/lua.pc).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then you\n\n# may have to run ranlib on the installed liblua.a (do \"make ranlib\").\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# If you don't have install you can use cp instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Utilities.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# What to install.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and INSTALL in a case-insensitive OS\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo private config parameters\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# echo config parameters as Lua code\n\n# uncomment the last sed expression if you want nil instead of empty strings\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-e 's/\"\"/nil/'\n",
        "Line" : 122,
        "CharPositionInLine" : 58
      },
      "17" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "common/ext/redis-3.0.7/deps/lua/etc/Makefile" : {
      "ObjectId" : "6d00008d98157eb4c3c83db0e74682f756c8104d",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for Lua etc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MYLIBS= -lm -Wl,-E -ldl -lreadline -lhistory -lncurses\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "common/ext/redis-3.0.7/deps/lua/src/Makefile" : {
      "ObjectId" : "f3bba2f8123bbbec5c907098ee5509725e298eff",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile for building Lua\n\n# see ../INSTALL for installation instructions\n\n# see ../Makefile and luaconf.h for further customization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DLL needs all object files\n",
        "Line" : 52,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# convenience targets for popular platforms\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use this on Mac OS X 10.3-\n\n#\t$(MAKE) all MYCFLAGS=-DLUA_USE_MACOSX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "common/ext/redis-3.0.7/src/Makefile" : {
      "ObjectId" : "bfb5d4730a995b995f8d0ac2813ad702b63fc75f",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Redis Makefile\n\n# Copyright (C) 2009 Salvatore Sanfilippo <antirez at gmail dot com>\n\n# This file is released under the BSD license, see the COPYING file\n\n#\n\n# The Makefile composes the final FINAL_CFLAGS and FINAL_LDFLAGS using\n\n# what is needed for Redis plus the standard CFLAGS and LDFLAGS passed.\n\n# However when building the dependencies (Jemalloc, Lua, Hiredis, ...)\n\n# CFLAGS and LDFLAGS are propagated to the dependencies, so to pass\n\n# flags only to be used when compiling / linking Redis itself REDIS_CFLAGS\n\n# and REDIS_LDFLAGS are used instead (this is the case of 'make gcov').\n\n#\n\n# Dependencies are stored in the Makefile.dep file. To rebuild this file\n\n# Just use 'make dep', but this is only needed by developers.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default settings\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default allocator\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Backwards compatibility for selecting an allocator\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Override default settings if possible\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# SunOS\n",
        "Line" : 58,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Darwin (nothing to do)\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# AIX\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# All the other OSes (notably Linux)\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Include paths to dependencies\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10,
      "Errorlog" : "line 101:8 token recognition error at: '\"\\0'\nline 102:11 token recognition error at: '\\0'\nline 103:10 token recognition error at: '\\0'\nline 104:10 token recognition error at: '\\0'\nline 105:11 token recognition error at: '\\0'\nline 106:10 token recognition error at: '\\0'\nline 242:40 token recognition error at: '\"\\n\\nsrc/help.h:\\n\\t@../utils/generate-command-help.rb > help.h\\n\\ninstall: all\\n\\t@mkdir -p $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_BENCHMARK_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_CLI_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_CHECK_DUMP_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_CHECK_AOF_NAME) $(INSTALL_BIN)\\n\\t@ln -sf $(REDIS_SERVER_NAME) $(INSTALL_BIN)/$(REDIS_SENTINEL_NAME)\\n\u0000'\n"
    },
    "common/ext/socket.io-client/tags/1.3.6/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/body-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/proxy/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "common/proxy/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/proxy/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/proxy/node_modules/node-docker-monitor/node_modules/dockerode/node_modules/docker-modem/node_modules/split-ca/Makefile" : {
      "ObjectId" : "412fd540cec4f8d8970bceecaa0062805f576a3d",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/redbird/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "common/proxy/node_modules/redbird/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/proxy/node_modules/redbird/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/proxy/node_modules/redbird/node_modules/valid-url/Makefile" : {
      "ObjectId" : "143589a16388cca6cf4600311ae62bdd0200ad11",
      "LastModified" : "2016-02-22T13:55:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/body-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-02T06:32:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/services/cms/node_modules/bunyan/Makefile" : {
      "ObjectId" : "3c6ea9a0386ff76742181c7ec0768d44049f4ece",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine -- \"~/opt/node-VER\"):\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "common/services/cms/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/services/cms/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/services/cms/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/services/cms/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/services/cms/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/services/cms/node_modules/mongoose/node_modules/hooks-fixed/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongoose/node_modules/kareem/Makefile" : {
      "ObjectId" : "f71ba900895bb9079f6c39a8f47dd1342720fe9b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongoose/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/services/cms/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "common/services/cms/node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "314c36148687632d90051a03ffd1a91304cc6535",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongoose/node_modules/mquery/Makefile" : {
      "ObjectId" : "dbb2831855fd93ecc008039e5a033d653804b6c1",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongoose/node_modules/mquery/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/services/cms/node_modules/mongoose/node_modules/mquery/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/services/cms/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "common/session/v1/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/session/v1/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/session/v1/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/opentok/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/opentok/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/opentok/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/opentok/node_modules/xmljson/node_modules/xmlbuilder/Makefile" : {
      "ObjectId" : "151d11bb93cf43d650d0b02b679466a98b80d75c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "d8a1781bc017926bd0ae935cff9b46cdac8eee49",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "common/session/v1/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v1/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "4829909555956cfe1b37fc1e87f1e5e9a5e45f11",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "common/session/v2/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "common/session/v2/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "common/session/v2/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/session/v2/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/opentok/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/opentok/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/opentok/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/session/v2/node_modules/opentok/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/verror/Makefile" : {
      "ObjectId" : "00faa97de520890d9b1fe77fe3184909069d0405",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "common/session/v2/node_modules/opentok/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/opentok/node_modules/xmljson/node_modules/xmlbuilder/Makefile" : {
      "ObjectId" : "151d11bb93cf43d650d0b02b679466a98b80d75c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "d8a1781bc017926bd0ae935cff9b46cdac8eee49",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "common/session/v2/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "common/session/v2/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "4829909555956cfe1b37fc1e87f1e5e9a5e45f11",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "pawan/cms/node_modules/body-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/cms/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/cms/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "pawan/cms/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "pawan/cms/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "pawan/cms/node_modules/mongoose/node_modules/hooks-fixed/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongoose/node_modules/kareem/Makefile" : {
      "ObjectId" : "f71ba900895bb9079f6c39a8f47dd1342720fe9b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongoose/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "pawan/cms/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "pawan/cms/node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "314c36148687632d90051a03ffd1a91304cc6535",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongoose/node_modules/mquery/Makefile" : {
      "ObjectId" : "dbb2831855fd93ecc008039e5a033d653804b6c1",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongoose/node_modules/mquery/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/cms/node_modules/mongoose/node_modules/mquery/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/cms/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/dockerode/node_modules/dockerode/node_modules/docker-modem/node_modules/split-ca/Makefile" : {
      "ObjectId" : "412fd540cec4f8d8970bceecaa0062805f576a3d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/dockerode/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/ext/socket.io-client/tags/1.3.6/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/buffer/node_modules/is-array/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/Makefile" : {
      "ObjectId" : "7be01de7e329ee88a7fcda24dc12a3b609e56d23",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/Makefile" : {
      "ObjectId" : "7be01de7e329ee88a7fcda24dc12a3b609e56d23",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/labeled-stream-splicer/node_modules/stream-splicer/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/module-deps/node_modules/stream-combiner2/node_modules/through2/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/stream-http/node_modules/foreach/Makefile" : {
      "ObjectId" : "eae41178666a0e7f624dd07f1e9fc8d8e38e038b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/stream-http/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/vm-browserify/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/browserify/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/node_modules/express-winston/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/express-winston/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/opentok/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/opentok/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/opentok/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/opentok/node_modules/xmljson/node_modules/xmlbuilder/Makefile" : {
      "ObjectId" : "151d11bb93cf43d650d0b02b679466a98b80d75c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/Makefile" : {
      "ObjectId" : "4acf1e524b8ea1533bb0af28df27d87a7854dc5c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/Makefile" : {
      "ObjectId" : "5046cedf951e1a6829b6781848c35f90560033e6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/Makefile" : {
      "ObjectId" : "068eb5f06b8b7e72e1bb8d703cae0cc160358f44",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "37848c9225a509dc4cebc85091167275734b8ea9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "9739162d3ee4662a14450e5737cc392efe6c4bb6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "pawan/node_modules/socket.io/node_modules/has-binary-data/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/backo2/Makefile" : {
      "ObjectId" : "9987df81aae366edffe9f845b048f7fe8a0c90db",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-bind/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/Makefile" : {
      "ObjectId" : "203b4b59b368202c47fef4ac614e05906fb9e56b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-inherit/Makefile" : {
      "ObjectId" : "ebbc52a3df3bf5bd55c578ef664efbf555a3d822",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/Makefile" : {
      "ObjectId" : "068eb5f06b8b7e72e1bb8d703cae0cc160358f44",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/node_modules/global/Makefile" : {
      "ObjectId" : "eee4830a33170d3122c4bf5c8bb731ccf4e46bab",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "fd8f028f9b18c5adb35506c48200ef5ca965312b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "40540445ef852a5e91291c85aa3278e7332a5ff9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/object-component/Makefile" : {
      "ObjectId" : "b6b98504ec9ce79a7abfb6b8b7c10426c234c963",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/socket.io/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "56fae7221cfd7d61a7f040e06166e70feeb809f4",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "pawan/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "714c701f8e28d36f95b95417d95904cd0aef9202",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "pawan/proxy/node_modules/redbird/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "pawan/proxy/node_modules/redbird/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "pawan/proxy/node_modules/redbird/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/proxy/node_modules/redbird/node_modules/valid-url/Makefile" : {
      "ObjectId" : "143589a16388cca6cf4600311ae62bdd0200ad11",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pawan/public/javascripts/ext/socket.io/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/bunyan/Makefile" : {
      "ObjectId" : "082f3ca7140530e2a529d351f174a441356878ea",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#PATH=\"$(NODEOPT)/iojs-v2.2/bin:$(PATH)\" make distclean all test\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#---- check\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "saurabh/vcRtcApp/lib/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "saurabh/vcRtcApp/lib/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "3a89298fbd036f675a0537f6590135dd3138d4da",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "83aaf0c0c635d867fa599e0c59677592055c9b01",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/lib/node_modules/opentok/node_modules/xmljson/node_modules/xmlbuilder/Makefile" : {
      "ObjectId" : "151d11bb93cf43d650d0b02b679466a98b80d75c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/bunyan/Makefile" : {
      "ObjectId" : "082f3ca7140530e2a529d351f174a441356878ea",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#PATH=\"$(NODEOPT)/iojs-v2.2/bin:$(PATH)\" make distclean all test\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#---- check\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "saurabh/vcRtcApp/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "saurabh/vcRtcApp/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "saurabh/vcRtcApp/node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/Makefile" : {
      "ObjectId" : "4acf1e524b8ea1533bb0af28df27d87a7854dc5c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/Makefile" : {
      "ObjectId" : "5046cedf951e1a6829b6781848c35f90560033e6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/Makefile" : {
      "ObjectId" : "068eb5f06b8b7e72e1bb8d703cae0cc160358f44",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "212a3cf1e396da9f4ef0bc1833909c473dde513b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "1182352900d662eb42f6ed85c48dad01063e8a5f",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/has-binary-data/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/backo2/Makefile" : {
      "ObjectId" : "9987df81aae366edffe9f845b048f7fe8a0c90db",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-bind/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/Makefile" : {
      "ObjectId" : "203b4b59b368202c47fef4ac614e05906fb9e56b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-inherit/Makefile" : {
      "ObjectId" : "ebbc52a3df3bf5bd55c578ef664efbf555a3d822",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/Makefile" : {
      "ObjectId" : "068eb5f06b8b7e72e1bb8d703cae0cc160358f44",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/node_modules/global/Makefile" : {
      "ObjectId" : "eee4830a33170d3122c4bf5c8bb731ccf4e46bab",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "7c912e72f0a6ff481969e7857eba819acb31b14b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "86b8d5615128c15177f8e2818b1b14603bfadb53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/object-component/Makefile" : {
      "ObjectId" : "b6b98504ec9ce79a7abfb6b8b7c10426c234c963",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/node_modules/socket.io/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/bunyan/Makefile" : {
      "ObjectId" : "082f3ca7140530e2a529d351f174a441356878ea",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#PATH=\"$(NODEOPT)/iojs-v2.2/bin:$(PATH)\" make distclean all test\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#---- check\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "saurabh/vcRtcApp/resource/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "saurabh/vcRtcApp/resource/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "3a89298fbd036f675a0537f6590135dd3138d4da",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "83aaf0c0c635d867fa599e0c59677592055c9b01",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/resource/node_modules/opentok/node_modules/xmljson/node_modules/xmlbuilder/Makefile" : {
      "ObjectId" : "151d11bb93cf43d650d0b02b679466a98b80d75c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/test/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "saurabh/vcRtcApp/test/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/auth/node_modules/connect-redis/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/auth/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/auth/node_modules/passport-google-oauth2/node_modules/passport-oauth2/node_modules/oauth/Makefile" : {
      "ObjectId" : "7723a3900d8df91445057f5cd89ffbdd7c5bc8bf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Run all tests\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "somanshu/common/apps/auth/node_modules/passport/node_modules/pause/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/landing/public/javascripts/ext/socket.io/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/body-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "somanshu/common/apps/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "somanshu/common/apps/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/express-session/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/express-winston/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/express-winston/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/ioredis/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/jade/node_modules/transformers/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/jade/node_modules/transformers/node_modules/css/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/jshashes/Makefile" : {
      "ObjectId" : "cdfce90478ea203c4be5fadca0f3920c0728efd8",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/kerberos/build/Makefile" : {
      "ObjectId" : "fdd1d85fd6d838bf1d16356479bfeb013a73443d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "somanshu/common/apps/node_modules/less/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/less/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/less/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/less/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "1deeb5fdff465f865d5a1ad58e4b223df4a712fd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/less/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/verror/Makefile" : {
      "ObjectId" : "00faa97de520890d9b1fe77fe3184909069d0405",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Tools\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/apps/node_modules/less/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "somanshu/common/apps/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "somanshu/common/apps/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/hooks-fixed/Makefile" : {
      "ObjectId" : "1db5d6538e4adb2ef8ae9142c05e9420e912820b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/kareem/Makefile" : {
      "ObjectId" : "f71ba900895bb9079f6c39a8f47dd1342720fe9b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/mongodb/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/Makefile" : {
      "ObjectId" : "36e120248c5a29b81721be0f296ec843530c4ddf",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# cp -R ./HISTORY.md ./docs/content/meta/release-notes.md\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/mpath/Makefile" : {
      "ObjectId" : "b0bb0819b7703ad4840145ed3df36afe6ba4614a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/mquery/Makefile" : {
      "ObjectId" : "dbb2831855fd93ecc008039e5a033d653804b6c1",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/muri/Makefile" : {
      "ObjectId" : "e6337bddfdc67fcfcbb491feda0c7b2480983b83",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/regexp-clone/Makefile" : {
      "ObjectId" : "6c8fb751677818fb46d2b4bcf70ce67c4b2c620f",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/mongoose/node_modules/sliced/Makefile" : {
      "ObjectId" : "2ad4e4713deaf89aa97737c92c20a3aa43177b59",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/apps/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/ext/socket.io-client/tags/1.3.6/Makefile" : {
      "ObjectId" : "c0024732ca01edbed213a58a96709fe764570ef9",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "somanshu/common/proxy/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "somanshu/common/proxy/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/bunyan/Makefile" : {
      "ObjectId" : "1a0b5be98433e9d31e4e34bce7d3b2821e789c69",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---- Tools\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On SunOS (e.g. SmartOS) we expect to run the test suite as the\n\n# root user -- necessary to run dtrace. Therefore `pfexec` isn't\n\n# necessary.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#---- Files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All test files *except* dtrace.test.js.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---- Targets\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure all version-carrying files have the same version.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---- test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test will all node supported versions (presumes install locations I use on\n\n# my machine).\n\n# Note: 'test10' is last so (if all is well) I end up with a binary\n\n# dtrace-provider build for node 0.10 (my current version).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---- check\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/bunyan/node_modules/dtrace-provider/libusdt/Makefile" : {
      "ObjectId" : "2ea157fc480f6e0f82ca631ef7fa7879dbed987c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC_BUILD - set this to \"universal\" to build a 2-way fat library \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ARCH set, disable universal build on the mac\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main library build\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tracepoints build. \n\n#\n\n# If on Darwin and building a universal library, manually assemble a\n\n# two-way fat object file from both the 32 and 64 bit tracepoint asm\n\n# files.\n\n#\n\n# Otherwise, just choose the appropriate asm file based on the build\n\n# architecture.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Darwin, not universal\n",
        "Line" : 94,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# not Darwin; FreeBSD and Illumos\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# testing\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/Makefile" : {
      "ObjectId" : "fa5da71a6d0d34afeca5499bece067a1f2a9d35c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/dolphin/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/proxy/node_modules/redbird/node_modules/valid-url/Makefile" : {
      "ObjectId" : "143589a16388cca6cf4600311ae62bdd0200ad11",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "somanshu/common/session/node_modules/jquery-deferred/Makefile" : {
      "ObjectId" : "c618c43621f04fec421d923f7c35769c83e6fe18",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/opentok/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/opentok/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/opentok/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/opentok/node_modules/request/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/opentok/node_modules/xmljson/node_modules/xmlbuilder/Makefile" : {
      "ObjectId" : "151d11bb93cf43d650d0b02b679466a98b80d75c",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/restler/node_modules/qs/Makefile" : {
      "ObjectId" : "600a700ec64ed7a3d601b37ae6fd0d838328423d",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/restler/node_modules/yaml/Makefile" : {
      "ObjectId" : "60438c761733d2a7e0f97a9a4c0a49d0cd46cf53",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/winston/node_modules/eyes/Makefile" : {
      "ObjectId" : "a121deaf0329b69548eb3614ade44a9bcf1ce64a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/winston/node_modules/stack-trace/Makefile" : {
      "ObjectId" : "a7ce31d3f4b3754f44d038df2d93fe2b6f294bee",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/ws/Makefile" : {
      "ObjectId" : "00f19fa01ca24d8d4e807fdb9493a75a50d3042a",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/ws/node_modules/bufferutil/build/Makefile" : {
      "ObjectId" : "d8a1781bc017926bd0ae935cff9b46cdac8eee49",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "somanshu/common/session/node_modules/ws/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "somanshu/common/session/node_modules/ws/node_modules/utf-8-validate/build/Makefile" : {
      "ObjectId" : "4829909555956cfe1b37fc1e87f1e5e9a5e45f11",
      "LastModified" : "2016-03-28T12:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 502
  },
  "ElapsedTime" : 7872
}