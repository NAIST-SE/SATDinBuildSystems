{
  "Repository" : "34911337",
  "Revision" : "HEAD",
  "ObjectId" : "cc70d3fe67b03af80e1020a0a1f722e97bd8bebd",
  "CommitTime" : "2019-04-18T01:04:28Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "209ffdcde0ef9cde7785ce21ab408a5ac9b8abd6",
      "LastModified" : "2018-10-21T02:28:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Makefile.am" : {
      "ObjectId" : "e334db5e5156e671549ac7a712ea966acbb122da",
      "LastModified" : "2019-04-05T15:46:41Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Include paths\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# libredex: the optimizer's guts\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# redex-all: the main executable\n\n#\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# function names in stack traces\n",
        "Line" : 346,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "#\n\n# redex: Python driver script\n\n#\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake_modules/Commons.cmake" : {
      "ObjectId" : "cff3992765ceaee244fab3225416d631508bfac4",
      "LastModified" : "2019-01-29T20:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Static library is not installed on default path in MacOS because it conflicts with Xcode Version\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindJsonCpp.cmake" : {
      "ObjectId" : "28fca2f9f4872fd1e1f4d67dc64826a270c6b30c",
      "LastModified" : "2017-09-27T20:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find jsoncpp - Overarching find module\n\n# This is a over-arching find module to find older jsoncpp versions and those sadly built\n\n# without JSONCPP_WITH_CMAKE_PACKAGE=ON, as well as those built with the cmake config file.\n\n# It also wraps the different versions of the module.\n\n#\n\n# On CMake 3.0 and newer:\n\n#  JsonCpp::JsonCpp - Imported target (possibly an interface/alias) to use:\n\n#  if anything is populated, this is. If both shared and static are found, then\n\n#  this will be the static version on DLL platforms and shared on non-DLL platforms.\n\n#  JsonCpp::JsonCppShared - Imported target (possibly an interface/alias) for a\n\n#  shared library version.\n\n#  JsonCpp::JsonCppStatic - Imported target (possibly an interface/alias) for a\n\n#  static library version.\n\n#\n\n# On all CMake versions: (Note that on CMake 2.8.10 and earlier, you may need to use JSONCPP_INCLUDE_DIRS)\n\n#  JSONCPP_LIBRARY - wraps JsonCpp::JsonCpp or equiv.\n\n#  JSONCPP_LIBRARY_IS_SHARED - if we know for sure JSONCPP_LIBRARY is shared, this is true-ish. We try to \"un-set\" it if we don't know one way or another.\n\n#  JSONCPP_LIBRARY_SHARED - wraps JsonCpp::JsonCppShared or equiv.\n\n#  JSONCPP_LIBRARY_STATIC - wraps JsonCpp::JsonCppStatic or equiv.\n\n#  JSONCPP_INCLUDE_DIRS - Include directories - should (generally?) not needed if you require CMake 2.8.11+ since it handles target include directories.\n\n#\n\n#  JSONCPP_FOUND - True if JsonCpp was found.\n\n#\n\n# Original Author:\n\n# 2016 Ryan Pavlik <ryan.pavlik@gmail.com>\n\n# Incorporates work from the module contributed to VRPN under the same license:\n\n# 2011 Philippe Crassous (ENSAM ParisTech / Institut Image) p.crassous _at_ free.fr\n\n#\n\n# Copyright Philippe Crassous 2011.\n\n# Copyright Sensics, Inc. 2016.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sets __jsoncpp_have_jsoncpplib based on whether or not we have a real imported jsoncpp_lib target.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We make interface libraries. If an actual config module made it, it would be an imported library.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#message(STATUS \"__jsoncpp_have_jsoncpplib ${__jsoncpp_have_jsoncpplib}\")\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Ensure that if this is TRUE later, it's because we set it.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# See if we find a CMake config file - there is no harm in calling this more than once,\n\n# and we need to call it at least once every CMake invocation to create the original\n\n# imported targets, since those don't stick around like cache variables.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build a string to help us figure out when to invalidate our cache variables.\n\n# start with where we found jsoncpp\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# part of the string to indicate if we found a real jsoncpp_lib (and what kind)\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Can't do this - different runtimes, incompatible ABI, etc.\n",
        "Line" : 77,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#osvr_stash_map_config(DEBUG DEBUG RELWITHDEBINFO RELEASE MINSIZEREL NONE)\n",
        "Line" : 81,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Appending, just in case using project or upstream fixes this.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# part of the string to indicate if we found jsoncpp_lib_static\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# If we found something, and it's not the exact same as what we've found before...\n\n# NOTE: The contents of this \"if\" block update only (internal) cache variables!\n\n# (since this will only get run the first CMake pass that finds jsoncpp or that finds a different/updated install)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#message(\"Updating jsoncpp cache variables! ${__jsoncpp_info_string}\")\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# if(__jsoncpp_have_jsoncpplib) is equivalent to if(TARGET jsoncpp_lib) except it excludes our\n\n# \"invented\" jsoncpp_lib interface targets, made for convenience purposes after this block.\n",
        "Line" : 120,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# A veritable cache of riches - we have both shared and static!\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# DLL platforms: static library should be default\n",
        "Line" : 129,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# Other platforms - might require PIC to be linked into shared libraries, so safest to prefer shared.\n",
        "Line" : 133,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# Well, only one variant, but we know for sure that it's static.\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# We were able to figure out the mystery library is static!\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# We were able to figure out the mystery library is shared!\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# One variant, and we have no idea if this is just an old version or if\n\n# this is shared based on the target name alone. Hmm.\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Now, we need include directories. Can't just limit this to old CMakes, since\n\n# new CMakes might be used to build projects designed to support older ones.\n",
        "Line" : 162,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# As a convenience...\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# OK, so we couldn't get it from the target... maybe we can figure it out from jsoncpp_DIR.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# take off the jsoncpp component\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# take off the cmake component\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# take off the lib component\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# take off one more component in case of multiarch lib\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Now, search.\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Note - this does not set it in the cache, in case we find it better at some point in the future!\n",
        "Line" : 209,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "# Create any missing namespaced targets from the config module.\n",
        "Line" : 222,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Hide the stuff we didn't, and no longer, need.\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Still nothing after looking for the config file: must go \"old-school\"\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Invoke pkgconfig for hints\n",
        "Line" : 273,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# OK, if pkg-config wasn't able to give us a library name suggestion, then we may\n\n# have to resort to some intense old logic.\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# bit of a generalization but close...\n",
        "Line" : 298,
        "CharPositionInLine" : 15
      },
      "37" : {
        "Text" : "# end of old logic\n",
        "Line" : 339,
        "CharPositionInLine" : 9
      },
      "38" : {
        "Text" : "# Actually go looking.\n",
        "Line" : 341,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# We already know that the target doesn't exist, let's make it.\n\n# TODO don't know why we get errors like:\n\n# error: 'JsonCpp::JsonCpp-NOTFOUND', needed by 'bin/osvr_json_to_c', missing and no known rule to make it\n\n# when we do the imported target commented out below. So, instead, we make an interface\n\n# target with an alias. Hmm.\n",
        "Line" : 360,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "#add_library(JsonCpp::JsonCpp UNKNOWN IMPORTED)\n\n#set_target_properties(JsonCpp::JsonCpp PROPERTIES\n\n#\tIMPORTED_LOCATION \"${JsonCpp_LIBRARY}\"\n\n#\tINTERFACE_INCLUDE_DIRECTORIES \"${JsonCpp_INCLUDE_DIR}\"\n\n#\tIMPORTED_LINK_INTERFACE_LANGUAGES \"CXX\")\n",
        "Line" : 366,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 41
    },
    "cmake_modules/FindZlib.cmake" : {
      "ObjectId" : "2cf09fbabfd5dc55f69e6deb5cfdd63b021f329c",
      "LastModified" : "2018-09-13T19:33:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n\n# Tries to find ZLIB headers and libraries.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#  find_package(ZLIB)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  ZLIB_HOME - When set, this path is inspected instead of standard library\n\n#             locations as the root of the ZLIB installation.\n\n#             The environment variable ZLIB_HOME overrides this variable.\n\n#\n\n# - Find ZLIB (zlib.h, libz.a, libz.so, and libz.so.1)\n\n# This module defines\n\n#  ZLIB_INCLUDE_DIR, directory containing headers\n\n#  ZLIB_LIBS, directory containing zlib libraries\n\n#  ZLIB_STATIC_LIB, path to libz.a\n\n#  ZLIB_SHARED_LIB, path to libz's shared library\n\n#  ZLIB_FOUND, whether zlib has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try the parameterized roots, if they exist\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Only look for the static library\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "examples/ProguardExample/app/proguard-rules.pro" : {
      "ObjectId" : "c826586337e875b5aff90045a00117b59105efb8",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/Synth/synth-example/proguard-rules.pro" : {
      "ObjectId" : "e9caf6359a57bf16f1e99659ce6fb7b1eb9334bf",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "sparta/CMakeLists.txt" : {
      "ObjectId" : "71646ee69057fea9cd76053516305bab3e2101c7",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################################\n\n# Add sparta interface library\n\n###################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################\n\n# install and export\n\n###################################################\n\n# Must use GNUInstallDirs to install libraries into correct\n\n# locations on all platforms.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 'make install' to the correct locations (provided by GNUInstallDirs).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is for Windows\n",
        "Line" : 41,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : "# This makes the project importable from the build directory\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################################\n\n# test\n\n###################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sparta/cmake_modules/Commons.cmake" : {
      "ObjectId" : "708d378d1371d8d33eafc85f1b0c51f506804d94",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download and unpack googletest at configure time\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Prevent overriding the parent project's compiler/linker\n\n# settings on Windows\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Add googletest directly to our build. This defines\n\n# the gtest and gtest_main targets.\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The gtest/gtest_main targets carry header search path\n\n# dependencies automatically when using CMake 2.8.11 or\n\n# later. Otherwise we have to add them here ourselves.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "test/Makefile.am" : {
      "ObjectId" : "16f10bc5b03b09c370cef6056f087a02cf962545",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "test/instr/AccessMarkingTest.pro" : {
      "ObjectId" : "2363f39d0a85fb4844a7e5218eb8a5b950175b0a",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Keep @KeepForRedexTest\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep classes with @Test or @Before methods\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/instr/EmptyClassesTest.pro" : {
      "ObjectId" : "31106df4197ef7ef5a29a4e87b441af2dc7d1d52",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/instr/FinalInlineV2Test.pro" : {
      "ObjectId" : "2363f39d0a85fb4844a7e5218eb8a5b950175b0a",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Keep @KeepForRedexTest\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep classes with @Test or @Before methods\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/instr/MethodDevirtualizationTest.pro" : {
      "ObjectId" : "2363f39d0a85fb4844a7e5218eb8a5b950175b0a",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Keep @KeepForRedexTest\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep classes with @Test or @Before methods\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/instr/RemoveBuildersTest.pro" : {
      "ObjectId" : "c0c5a9af9e19446fa94d2f3bd2fa922976e79801",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/instr/RenameClassesTest.pro" : {
      "ObjectId" : "996ebd8f6e77d23620b31be8fd8242646ff6f3de",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/instr/SimplifyString.pro" : {
      "ObjectId" : "ae72eb58194b921b1077f0c6f45fcb95c238855c",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit test will have -dontoptimize from somewhere, so this is technically\n\n# has no effect.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/instr/StripDebugInfoTest.pro" : {
      "ObjectId" : "31106df4197ef7ef5a29a4e87b441af2dc7d1d52",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/instr/nopg.pro" : {
      "ObjectId" : "b06b45622d31746f97e2eba13a2670311cee2160",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/instr/nopg_keep_testinfra.pro" : {
      "ObjectId" : "c5b12f97abe4afbb0923acfc80bdde6900f59757",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep @KeepForRedexTest\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/instr/optimizeenums.pro" : {
      "ObjectId" : "f10d2db92ce8f427251d21d47b585f5df9c0036e",
      "LastModified" : "2019-03-16T00:06:37Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/instr/transformenums.pro" : {
      "ObjectId" : "d01432a724a7e05599b7aeecad8d98cf53d5c60c",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Don't muck with test infra\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/integ/Makefile.am" : {
      "ObjectId" : "581d976e8637cff9f0c02fc4b8b023b82220b37e",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "test/obfuscation-e2e/hierarchy/config.pro" : {
      "ObjectId" : "7194eed7fb621b88ea7becaac26296fbf0234704",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Allow the fields of class Alpha to be renamed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/obfuscation-e2e/simple/config.pro" : {
      "ObjectId" : "5b0a44d1389a3cfa53b52a0efa9fd5e3315e6e85",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Allow the fields of class Alpha to be renamed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/obfuscation-e2e/simple/nopg.pro" : {
      "ObjectId" : "213844f91b85d3555b08575fde9d48440d31b221",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/pg-config-e2e/proguard_config1.pro" : {
      "ObjectId" : "aca40fedcf115c67f6781d4aab407c498ce525c1",
      "LastModified" : "2019-02-25T16:48:18Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Configuration for ProGuard matcher e2e tests.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DoNotStrip Annotation\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DontKillMe Annotation\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# view AndroidManifest.xml #generated:6\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# view AndroidManifest.xml #generated:13\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "test/unit/Makefile.am" : {
      "ObjectId" : "a59b65cc9b2a58f4aecaf46b99f977fb61f7da8c",
      "LastModified" : "2019-02-22T01:24:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 6,
    "QMAKE" : 18,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 1532
}