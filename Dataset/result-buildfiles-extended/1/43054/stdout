{
  "Repository" : "43054",
  "Revision" : "HEAD",
  "ObjectId" : "be6c37d7bc20e1f01e26b724d5fd5802e6ce3092",
  "CommitTime" : "2019-04-18T17:22:21Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "71c8aea258771e41ecb584709180a4309e09af2a",
      "LastModified" : "2018-11-04T11:47:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Meta Makefile\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use this to pass arguments to configure. Leave empty to keep previous args.\n\n#CONFIGUREARGS=\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set this to any generic make options you'd otherwise would have to\n\n# pass on the command line. (Using the magic MAKEFLAGS variable\n\n# directly here might not work all the time due to the $(DO_MAKE)\n\n# recursion.)\n\n#MAKE_FLAGS=\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set to a flag for parallelizing make, e.g. -j2. It's given to make\n\n# at the level where it's most effective.\n\n#MAKE_PARALLEL=-j`test -f /proc/cpuinfo && grep ^processor /proc/cpuinfo | wc -l || echo 1`\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tip: Remove \"-r\" from the line below if you don't want to rebuild\n\n# from scratch every time you upgrade the kernel.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This evaluates to a proper make command.\n\n# Regardless of whether the make sets $(MAKE) or not.\n\n# Priority is $(MAKE) before ${MAKE} before make.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Used internally in this file to start a submake to expand\n\n# $(BUILDDIR), $(MAKE_CMD) etc.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Used to avoid make compatibility problems.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This target should always be executed indirectly through a $(DO_MAKE).\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# FIXME: The refdoc stuff ought to use $(BUILDDIR) too.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Don't make bin/pike if we're recursing with a $(METATARGET) since we\n\n# don't want the backquote expression which usually is part of\n\n# $(BUILDDIR) to be expanded in that script. It's better to evaluate\n\n# it when the script is run, so that it can choose the build directory\n\n# for the right architecture.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#! Creates tags files src/TAGS (C-level methods) and lib/modules/TAGS\n\n#! (pike-level methods). The typical use case for an etags file is finding the\n\n#! file and line where a class or method was defined. This feature is by\n\n#! default bound to the keyboard sequence Meta-. in emacs.\n\n#! @note\n\n#!   Finding C-level methods isn't trivial even with the src/TAGS table loaded;\n\n#!   this make target could use some improvement.\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12,
      "Errorlog" : "line 440:106 token recognition error at: '\\2'\n"
    },
    "lib/modules/Calendar.pmod/tzdata/Makefile" : {
      "ObjectId" : "d8d8e215e26b3157477be31eb8428f597a66b7f9",
      "LastModified" : "2019-01-08T10:51:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Make and install tzdb code and data.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is in the public domain, so clarified as of\n\n# 2009-05-17 by Arthur David Olson.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package name for the code distribution.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Version number for the distribution, overridden in the 'tarballs' rule below.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Email address for bug reports.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Choose source data features.  To get new features right away, use:\n\n#\tDATAFORM=\tvanguard\n\n# To wait a while before using new features, to give downstream users\n\n# time to upgrade zic (the default), use:\n\n#\tDATAFORM=\tmain\n\n# To wait even longer for new features, use:\n\n#\tDATAFORM=\trearguard\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Change the line below for your timezone (after finding the one you want in\n\n# one of the $(TDATA) source files, or adding it to a source file).\n\n# Alternatively, if you discover you've got the wrong timezone, you can just\n\n#\tzic -l rightzone\n\n# to correct things.\n\n# Use the command\n\n#\tmake zonenames\n\n# to get a list of the values you can use for LOCALTIME.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If you want something other than Eastern United States time as a template\n\n# for handling POSIX-style timezone environment variables,\n\n# change the line below (after finding the timezone you want in the\n\n# one of the $(TDATA) source files, or adding it to a source file).\n\n# When a POSIX-style environment variable is handled, the rules in the\n\n# template file are used to determine \"spring forward\" and \"fall back\" days and\n\n# times; the environment variable itself specifies UT offsets of standard and\n\n# daylight saving time.\n\n# Alternatively, if you discover you've got the wrong timezone, you can just\n\n#\tzic -p rightzone\n\n# to correct things.\n\n# Use the command\n\n#\tmake zonenames\n\n# to get a list of the values you can use for POSIXRULES.\n\n# If you want POSIX compatibility, use \"America/New_York\".\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Also see TZDEFRULESTRING below, which takes effect only\n\n# if the time zone files cannot be accessed.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Installation locations.\n\n#\n\n# The defaults are suitable for Debian, except that if REDO is\n\n# posix_right or right_posix then files that Debian puts under\n\n# /usr/share/zoneinfo/posix and /usr/share/zoneinfo/right are instead\n\n# put under /usr/share/zoneinfo-posix and /usr/share/zoneinfo-leaps,\n\n# respectively.  Problems with the Debian approach are discussed in\n\n# the commentary for the right_posix rule (below).\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Destination directory, which can be used for staging.\n\n# 'make DESTDIR=/stage install' installs under /stage (e.g., to\n\n# /stage/etc/localtime instead of to /etc/localtime).  Files under\n\n# /stage are not intended to work as-is, but can be copied by hand to\n\n# the root directory later.  If DESTDIR is empty, 'make install' does\n\n# not stage, but installs directly into production locations.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Everything is installed into subdirectories of TOPDIR, and used there.\n\n# TOPDIR should be empty (meaning the root directory),\n\n# or a directory name that does not end in \"/\".\n\n# TOPDIR should be empty or an absolute name unless you're just testing.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The default local timezone is taken from the file TZDEFAULT.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The subdirectory containing installed program and data files, and\n\n# likewise for installed files that can be shared among architectures.\n\n# These should be relative file names.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# \"Compiled\" timezone information is placed in the \"TZDIR\" directory\n\n# (and subdirectories).\n\n# TZDIR_BASENAME should not contain \"/\" and should not be \".\", \"..\" or empty.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The \"tzselect\" and (if you do \"make INSTALL\") \"date\" commands go in:\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The \"zdump\" command goes in:\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The \"zic\" command goes in:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Manual pages go in subdirectories of. . .\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Library functions are put in an archive in LIBDIR.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Types to try, as an alternative to time_t.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# What kind of TZif data files to generate.\n\n# (TZif is the binary time zone data format that zic generates.)\n\n# If you want only POSIX time, with time values interpreted as\n\n# seconds since the epoch (not counting leap seconds), use\n\n#\tREDO=\t\tposix_only\n\n# below.  If you want only \"right\" time, with values interpreted\n\n# as seconds since the epoch (counting leap seconds), use\n\n#\tREDO=\t\tright_only\n\n# below.  If you want both sets of data available, with leap seconds not\n\n# counted normally, use\n\n#\tREDO=\t\tposix_right\n\n# below.  If you want both sets of data available, with leap seconds counted\n\n# normally, use\n\n#\tREDO=\t\tright_posix\n\n# below.  POSIX mandates that leap seconds not be counted; for compatibility\n\n# with it, use \"posix_only\" or \"posix_right\".  Use POSIX time on systems with\n\n# leap smearing; this can work better than unsmeared \"right\" time with\n\n# applications that are not leap second aware, and is closer to unsmeared\n\n# \"right\" time than unsmeared POSIX time is (e.g., 0.5 vs 1.0 s max error).\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# To install data in text form that has all the information of the TZif data,\n\n# (optionally incorporating leap second information), use\n\n#\tTZDATA_TEXT=\ttzdata.zi leapseconds\n\n# To install text data without leap second information (e.g., because\n\n# REDO='posix_only'), use\n\n#\tTZDATA_TEXT=\ttzdata.zi\n\n# To avoid installing text data, use\n\n#\tTZDATA_TEXT=\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# For backward-compatibility links for old zone names, use\n\n#\tBACKWARD=\tbackward\n\n# If you also want the link US/Pacific-New, even though it is confusing\n\n# and is planned to be removed from the database eventually, use\n\n#\tBACKWARD=\tbackward pacificnew\n\n# To omit these links, use\n\n#\tBACKWARD=\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If you want out-of-scope and often-wrong data from the file 'backzone', use\n\n#\tPACKRATDATA=\tbackzone\n\n# To omit this data, use\n\n#\tPACKRATDATA=\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The name of a locale using the UTF-8 encoding, used during self-tests.\n\n# The tests are skipped if the name does not appear to work on this system.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Since \".\" may not be in PATH...\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Non-default libraries needed to link.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Add the following to the end of the \"CFLAGS=\" line as needed to override\n\n# defaults specified in the source code.  \"-DFOO\" is equivalent to \"-DFOO=1\".\n\n#  -DDEPRECATE_TWO_DIGIT_YEARS for optional runtime warnings about strftime\n\n#\tformats that generate only the last two digits of year numbers\n\n#  -DEPOCH_LOCAL if the 'time' function returns local time not UT\n\n#  -DEPOCH_OFFSET=N if the 'time' function returns a value N greater\n\n#\tthan what POSIX specifies, assuming local time is UT.\n\n#\tFor example, N is 252460800 on AmigaOS.\n\n#  -DHAVE_DECL_ASCTIME_R=0 if <time.h> does not declare asctime_r\n\n#  -DHAVE_DECL_ENVIRON if <unistd.h> declares 'environ'\n\n#  -DHAVE_DIRECT_H if mkdir needs <direct.h> (MS-Windows)\n\n#  -DHAVE_GENERIC=0 if _Generic does not work\n\n#  -DHAVE_GETTEXT if 'gettext' works (e.g., GNU/Linux, FreeBSD, Solaris)\n\n#  -DHAVE_INCOMPATIBLE_CTIME_R if your system's time.h declares\n\n#\tctime_r and asctime_r incompatibly with the POSIX standard\n\n#\t(Solaris when _POSIX_PTHREAD_SEMANTICS is not defined).\n\n#  -DHAVE_INTTYPES_H if you have a non-C99 compiler with <inttypes.h>\n\n#  -DHAVE_LINK=0 if your system lacks a link function\n\n#  -DHAVE_LOCALTIME_R=0 if your system lacks a localtime_r function\n\n#  -DHAVE_LOCALTIME_RZ=0 if you do not want zdump to use localtime_rz\n\n#\tlocaltime_rz can make zdump significantly faster, but is nonstandard.\n\n#  -DHAVE_POSIX_DECLS=0 if your system's include files do not declare\n\n#\tfunctions like 'link' or variables like 'tzname' required by POSIX\n\n#  -DHAVE_SNPRINTF=0 if your system lacks the snprintf function\n\n#  -DHAVE_STDBOOL_H if you have a non-C99 compiler with <stdbool.h>\n\n#  -DHAVE_STDINT_H if you have a non-C99 compiler with <stdint.h>\n\n#  -DHAVE_STRFTIME_L if <time.h> declares locale_t and strftime_l\n\n#  -DHAVE_STRDUP=0 if your system lacks the strdup function\n\n#  -DHAVE_STRTOLL=0 if your system lacks the strtoll function\n\n#  -DHAVE_SYMLINK=0 if your system lacks the symlink function\n\n#  -DHAVE_SYS_STAT_H=0 if your compiler lacks a <sys/stat.h>\n\n#  -DHAVE_SYS_WAIT_H=0 if your compiler lacks a <sys/wait.h>\n\n#  -DHAVE_TZSET=0 if your system lacks a tzset function\n\n#  -DHAVE_UNISTD_H=0 if your compiler lacks a <unistd.h>\n\n#  -Dlocale_t=XXX if your system uses XXX instead of locale_t\n\n#  -DRESERVE_STD_EXT_IDS if your platform reserves standard identifiers\n\n#\twith external linkage, e.g., applications cannot define 'localtime'.\n\n#  -Dssize_t=long on hosts like MS-Windows that lack ssize_t\n\n#  -DSUPPRESS_TZDIR to not prepend TZDIR to file names; this has\n\n#\tsecurity implications and is not recommended for general use\n\n#  -DTHREAD_SAFE to make localtime.c thread-safe, as POSIX requires;\n\n#\tnot needed by the main-program tz code, which is single-threaded.\n\n#\tAppend other compiler flags as needed, e.g., -pthread on GNU/Linux.\n\n#  -Dtime_tz=\\\"T\\\" to use T as the time_t type, rather than the system time_t\n\n#\tThis is intended for internal use only; it mangles external names.\n\n#  -DTZ_DOMAIN=\\\"foo\\\" to use \"foo\" for gettext domain name; default is \"tz\"\n\n#  -DTZ_DOMAINDIR=\\\"/path\\\" to use \"/path\" for gettext directory;\n\n#\tthe default is system-supplied, typically \"/usr/lib/locale\"\n\n#  -DTZDEFRULESTRING=\\\",date/time,date/time\\\" to default to the specified\n\n#\tDST transitions if the time zone files cannot be accessed\n\n#  -DUNINIT_TRAP if reading uninitialized storage can cause problems\n\n#\tother than simply getting garbage data\n\n#  -DUSE_LTZ=0 to build zdump with the system time zone library\n\n#\tAlso set TZDOBJS=zdump.o and CHECK_TIME_T_ALTERNATIVES= below.\n\n#  -DZIC_MAX_ABBR_LEN_WO_WARN=3\n\n#\t(or some other number) to set the maximum time zone abbreviation length\n\n#\tthat zic will accept without a warning (the default is 6)\n\n#  $(GCC_DEBUG_FLAGS) if you are using recent GCC and want lots of checking\n\n# Select instrumentation via \"make GCC_INSTRUMENT='whatever'\".\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\n\n# If your system has a \"GMT offset\" field in its \"struct tm\"s\n\n# (or if you decide to add such a field in your system's \"time.h\" file),\n\n# add the name to a define such as\n\n#\t-DTM_GMTOFF=tm_gmtoff\n\n# to the end of the \"CFLAGS=\" line.  If not defined, the code attempts to\n\n# guess TM_GMTOFF from other macros; define NO_TM_GMTOFF to suppress this.\n\n# Similarly, if your system has a \"zone abbreviation\" field, define\n\n#\t-DTM_ZONE=tm_zone\n\n# and define NO_TM_ZONE to suppress any guessing.  These two fields are not\n\n# required by POSIX, but are widely available on GNU/Linux and BSD systems.\n\n#\n\n# The next batch of options control support for external variables\n\n# exported by tzcode.  In practice these variables are less useful\n\n# than TM_GMTOFF and TM_ZONE.  However, most of them are standardized.\n\n# #\n\n# # To omit or support the external variable \"tzname\", add one of:\n\n# #\t-DHAVE_TZNAME=0\n\n# #\t-DHAVE_TZNAME=1\n\n# # to the \"CFLAGS=\" line.  \"tzname\" is required by POSIX 1988 and later.\n\n# # If not defined, the code attempts to guess HAVE_TZNAME from other macros.\n\n# # Warning: unless time_tz is also defined, HAVE_TZNAME=1 can cause\n\n# # crashes when combined with some platforms' standard libraries,\n\n# # presumably due to memory allocation issues.\n\n# #\n\n# # To omit or support the external variables \"timezone\" and \"daylight\", add\n\n# #\t-DUSG_COMPAT=0\n\n# #\t-DUSG_COMPAT=1\n\n# # to the \"CFLAGS=\" line; \"timezone\" and \"daylight\" are inspired by\n\n# # Unix Systems Group code and are required by POSIX 2008 (with XSI) and later.\n\n# # If not defined, the code attempts to guess USG_COMPAT from other macros.\n\n# #\n\n# # To support the external variable \"altzone\", add\n\n# #\t-DALTZONE\n\n# # to the end of the \"CFLAGS=\" line; although \"altzone\" appeared in\n\n# # System V Release 3.1 it has not been standardized.\n\n#\n\n# If you want functions that were inspired by early versions of X3J11's work,\n\n# add\n\n#\t-DSTD_INSPIRED\n\n# to the end of the \"CFLAGS=\" line.  This arranges for the functions\n\n# \"tzsetwall\", \"offtime\", \"timelocal\", \"timegm\", \"timeoff\",\n\n# \"posix2time\", and \"time2posix\" to be added to the time conversion library.\n\n# \"tzsetwall\" is like \"tzset\" except that it arranges for local wall clock\n\n# time (rather than the timezone specified in the TZ environment variable)\n\n# to be used.\n\n# \"offtime\" is like \"gmtime\" except that it accepts a second (long) argument\n\n# that gives an offset to add to the time_t when converting it.\n\n# \"timelocal\" is equivalent to \"mktime\".\n\n# \"timegm\" is like \"timelocal\" except that it turns a struct tm into\n\n# a time_t using UT (rather than local time as \"timelocal\" does).\n\n# \"timeoff\" is like \"timegm\" except that it accepts a second (long) argument\n\n# that gives an offset to use when converting to a time_t.\n\n# \"posix2time\" and \"time2posix\" are described in an included manual page.\n\n# X3J11's work does not describe any of these functions.\n\n# Sun has provided \"tzsetwall\", \"timelocal\", and \"timegm\" in SunOS 4.0.\n\n# These functions may well disappear in future releases of the time\n\n# conversion package.\n\n#\n\n# If you don't want functions that were inspired by NetBSD, add\n\n#\t-DNETBSD_INSPIRED=0\n\n# to the end of the \"CFLAGS=\" line.  Otherwise, the functions\n\n# \"localtime_rz\", \"mktime_z\", \"tzalloc\", and \"tzfree\" are added to the\n\n# time library, and if STD_INSPIRED is also defined the functions\n\n# \"posix2time_z\" and \"time2posix_z\" are added as well.\n\n# The functions ending in \"_z\" (or \"_rz\") are like their unsuffixed\n\n# (or suffixed-by-\"_r\") counterparts, except with an extra first\n\n# argument of opaque type timezone_t that specifies the timezone.\n\n# \"tzalloc\" allocates a timezone_t value, and \"tzfree\" frees it.\n\n#\n\n# If you want to allocate state structures in localtime, add\n\n#\t-DALL_STATE\n\n# to the end of the \"CFLAGS=\" line.  Storage is obtained by calling malloc.\n\n#\n\n# NIST-PCTS:151-2, Version 1.4, (1993-12-03) is a test suite put\n\n# out by the National Institute of Standards and Technology\n\n# which claims to test C and Posix conformance.  If you want to pass PCTS, add\n\n#\t-DPCTS\n\n# to the end of the \"CFLAGS=\" line.\n\n#\n\n# If you want strict compliance with XPG4 as of 1994-04-09, add\n\n#\t-DXPG4_1994_04_09\n\n# to the end of the \"CFLAGS=\" line.  This causes \"strftime\" to always return\n\n# 53 as a week number (rather than 52 or 53) for January days before\n\n# January's first Monday when a \"%V\" format is used and January 1\n\n# falls on a Friday, Saturday, or Sunday.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Linker flags.  Default to $(LFLAGS) for backwards compatibility\n\n# to release 2012h and earlier.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# For leap seconds, this Makefile uses LEAPSECONDS='-L leapseconds' in\n\n# submake command lines.  The default is no leap seconds.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# The zic command and its arguments.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# How to use zic to install TZif files.\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# The name of a Posix-compliant 'awk' on your system.\n\n# Older 'mawk' versions, such as the 'mawk' in Ubuntu 16.04, might dump core;\n\n# on Ubuntu you can work around this with\n\n#\tAWK=\t\tgawk\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# The full path name of a Posix-compliant shell, preferably one that supports\n\n# the Korn shell's 'select' statement as an extension.\n\n# These days, Bash is the most popular.\n\n# It should be OK to set this to /bin/sh, on platforms where /bin/sh\n\n# lacks 'select' or doesn't completely conform to Posix, but /bin/bash\n\n# is typically nicer if it works.\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Name of curl <https://curl.haxx.se/>, used for HTML validation.\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The path where SGML DTDs are kept and the catalog file(s) to use when\n\n# validating HTML 4.01.  The default should work on both Debian and Red Hat.\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# The name, arguments and environment of a program to validate HTML 4.01.\n\n# See <http://openjade.sourceforge.net/doc/> for a validator, and\n\n# <https://validator.w3.org/source/> for a validation library.\n\n# Set VALIDATE=':' if you do not have such a program.\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# since Makefile macros cannot contain '#'.\n\n# TAB_CHAR is a single tab character, in single quotes.\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# These characters are Latin-1, and so are likely to be displayable\n\n# even in editors with limited character sets.\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# This IPA symbol is represented in Unicode as the composition of\n\n# U+0075 and U+032F, and U+032F is not considered alphabetic by some\n\n# grep implementations that do not grok composition.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Non-ASCII non-letters that OK_CHAR allows, as these characters are\n\n# useful in commentary.\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# OK_CHAR matches any character allowed in the distributed files.\n\n# This is the same as SAFE_CHAR, except that UNUSUAL_OK_CHARSET and\n\n# multibyte letters are also allowed so that commentary can contain a\n\n# few safe symbols and people's names and can quote non-English sources.\n\n# Other non-letters are limited to ASCII renderings for the\n\n# convenience of maintainers using XEmacs 21.5.34, which by default\n\n# mishandles Unicode characters U+0100 and greater.\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# SAFE_LINE matches a line of safe characters.\n\n# SAFE_SHARP_LINE is similar, except any OK character can follow '#';\n\n# this is so that comments can contain non-ASCII characters.\n\n# OK_LINE matches a line of OK characters.\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Flags to give 'tar' when making a distribution.\n\n# Try to use flags appropriate for GNU tar.\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Flags to give 'gzip' when making a distribution.\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "###############################################################################\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#MAKE=\t\tmake\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# EIGHT_YARDS is just a yard short of the whole ENCHILADA.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Consult these files when deciding whether to rebuild the 'version' file.\n\n# This list is not the same as the output of 'git ls-files', since\n\n# .gitignore is not distributed.\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# And for the benefit of csh users on systems that assume the user\n\n# shell should be used to handle commands in Makefiles. . .\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# These files can be tailored by setting BACKWARD and PACKRATDATA.\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# This file has a version comment that attempts to capture any tailoring\n\n# via BACKWARD, DATAFORM, PACKRATDATA, and REDO.\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Arguments to pass to submakes of install_data.\n\n# They can be overridden by later submake arguments.\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# In earlier versions of this makefile, the other two directories were\n\n# subdirectories of $(TZDIR).  However, this led to configuration errors.\n\n# For example, with posix_right under the earlier scheme,\n\n# TZ='right/Australia/Adelaide' got you localtime with leap seconds,\n\n# but gmtime without leap seconds, which led to problems with applications\n\n# like sendmail that subtract gmtime from localtime.\n\n# Therefore, the other two directories are now siblings of $(TZDIR).\n\n# You must replace all of $(TZDIR) to switch from not using leap seconds\n\n# to using them, or vice versa.\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# This obsolescent rule is present for backwards compatibility with\n\n# tz releases 2014g through 2015g.  It should go away eventually.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# dummy.zd is not a real file; it is mentioned here only so that the\n\n# top-level 'make' does not have a syntax error.\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Rule used only by submakes invoked by the $(TZS_NEW) rule.\n\n# It is separate so that GNU 'make -j' can run instances in parallel.\n",
        "Line" : 680,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# If $(TZS) exists but 'make check_tzs' fails, a maintainer should inspect the\n\n# failed output and fix the inconsistency, perhaps by running 'make force_tzs'.\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#' && \\\n\t\t! grep -Env $(SAFE_LINE) $(MANS) date.1 $(MANTXTS) \\\n\t\t\t$(MISC) $(SOURCES) $(WEB_PAGES) \\\n\t\t\tCONTRIBUTING LICENSE README \\\n\t\t\tversion tzdata.zi && \\\n\t\t! grep -Env $(SAFE_LINE)'|^UNUSUAL_OK_'$(OK_CHAR)'*$$' \\\n\t\t\tMakefile && \\\n\t\t! grep -Env $(SAFE_SHARP_LINE) $(TDATA_TO_CHECK) backzone \\\n\t\t\tleapseconds yearistype.sh zone.tab && \\\n\t\t! grep -Env $(OK_LINE) $(ENCHILADA); \\\n\t}\n",
        "Line" : 743,
        "CharPositionInLine" : 9
      },
      "61" : {
        "Text" : "# Check that zishrink.awk does not alter the data, and that ziguard.awk\n\n# preserves main-format data.\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Set the timestamps to those of the git repository, if available,\n\n# and if the files have not changed since then.\n\n# This uses GNU 'touch' syntax 'touch -d@N FILE',\n\n# where N is the number of seconds since 1970.\n\n# If git or GNU 'touch' is absent, don't bother to sync with git timestamps.\n\n# Also, set the timestamp of each prebuilt file like 'leapseconds'\n\n# to be the maximum of the files it depends on.\n",
        "Line" : 874,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# The zics below ensure that each data file can stand on its own.\n\n# We also do an all-files run to catch links to links.\n",
        "Line" : 908,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#]/ { print $$3 }' <zone1970.tab` && \\\n\t\tif test $@ = $(TIME_T_ALTERNATIVES_HEAD); then \\\n\t\t  range_target=; \\\n\t\telse \\\n\t\t  range_target=to$$range.tzs; \\\n\t\tfi && \\\n\t\t(cd $@.dir && \\\n\t\t  $(MAKE) TOPDIR=\"$$wd/$@.dir\" \\\n\t\t    CFLAGS='$(CFLAGS) -Dtime_tz='\"'$@'\" \\\n\t\t    REDO='$(REDO)' \\\n\t\t\tD=$$wd/$@.dir \\\n\t\t    TZS_YEAR=\"$$range\" TZS_CUTOFF_FLAG=\"-t $$range\" \\\n\t\t    install $$range_target) && \\\n\t\ttest $@ = $(TIME_T_ALTERNATIVES_HEAD) || { \\\n\t\t  (cd $(TIME_T_ALTERNATIVES_HEAD).dir && \\\n\t\t    $(MAKE) TOPDIR=\"$$wd/$@.dir\" \\\n\t\t      TZS_YEAR=\"$$range\" TZS_CUTOFF_FLAG=\"-t $$range\" \\\n\t\t\tD=$$wd/$@.dir \\\n\t\t      to$$range.tzs) && \\\n\t\t  diff -u $(TIME_T_ALTERNATIVES_HEAD).dir/to$$range.tzs \\\n\t\t\t  $@.dir/to$$range.tzs && \\\n\t\t  if diff -q Makefile Makefile 2>/dev/null; then \\\n\t\t    quiet_option='-q'; \\\n\t\t  else \\\n\t\t    quiet_option=''; \\\n\t\t  fi && \\\n\t\t    diff $$quiet_option -r $(TIME_T_ALTERNATIVES_HEAD).dir/etc \\\n\t\t\t\t\t   $@.dir/etc && \\\n\t\t    diff $$quiet_option -r \\\n\t\t      $(TIME_T_ALTERNATIVES_HEAD).dir/usr/share \\\n\t\t      $@.dir/usr/share; \\\n\t\t}\n",
        "Line" : 937,
        "CharPositionInLine" : 21
      },
      "65" : {
        "Text" : "# These *_version rules are intended for use if VERSION is set by some\n\n# other means.  Ordinarily these rules are used only by the above\n\n# non-_version rules, which set VERSION on the 'make' command line.\n",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 66,
      "Errorlog" : "line 726:27 token recognition error at: '\\1'\nline 727:31 token recognition error at: '\\1'\nline 729:26 token recognition error at: '\\1'\nline 740:12 token recognition error at: '\\3'\nline 740:16 token recognition error at: '\\2'\nline 757:15 token recognition error at: '\\f'\nline 757:19 token recognition error at: '\\v'\n"
    },
    "packaging/windows/Makefile" : {
      "ObjectId" : "4a1e2680e35f9956292d0d8ad3cb5e7da069c463",
      "LastModified" : "2002-08-05T14:38:02Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "refdoc/Makefile" : {
      "ObjectId" : "8322b3e66faaa760947ce135b639151564c781e2",
      "LastModified" : "2016-12-08T20:49:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Main Makefile for extracting AutoDoc mk II to XML\n\n#\n\n# Henrik Grubbstr�m 2001-02-02\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make devel can be used if changes are made only to the CSS or JS and you\n\n# don't feel like recompiling the entire doc to test the changes\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These are the actual build targets for making manuals...\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sub targets used by the above targets.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Directories\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Development targets\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Cleanup\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 6852
}