{
  "Repository" : "82533",
  "Revision" : "HEAD",
  "ObjectId" : "41c519f6cdef5a1c68b369e760781652ece7fec9",
  "CommitTime" : "2016-03-08T03:54:32Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "cf47cf8a7cc0a66238554e6a1a8fd4d492fb0fc6",
      "LastModified" : "2013-08-24T04:24:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of SWGANH which is released under the MIT license.\n\n# See file LICENSE or go to http://swganh.com/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent in-source builds unless they are forced. In-source builds tend to\n\n# pollute the source directories with generated cmake and other build related\n\n# files.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# current version\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the path for custom cmake scripts\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Redirect output files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DLL should be in the same directory as EXE under Windows\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n## Global Configuration Options\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Some automated systems need an xml report which requires a second run of the\n\n# tests. To prevent these unnecessary runnings during normal builds the\n\n# following option is set with a default of false.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## compiler checks\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use the static/multithreaded libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check for a vendor directory in the source directory and in\n\n# the directory above.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# make sure the source directory and the binary directory (where any generated\n\n# files will be found) are automatically searched for includes\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "6ba652e8ac66c646b10e98a93ae6649728e7f66d",
      "LastModified" : "2012-05-23T22:10:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/datatable_reader/CMakeLists.txt" : {
      "ObjectId" : "531ff386a8d0701a130047c83a04b2c320bed6e8",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/tre_archiver/CMakeLists.txt" : {
      "ObjectId" : "e63fd2a0e6360fa37c0570ae78cd5d1a081906da",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/tre_reader/CMakeLists.txt" : {
      "ObjectId" : "5e9988e2058b929f6895130474520f00e7b70e3c",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/tre_unpacker/CMakeLists.txt" : {
      "ObjectId" : "d4caf61a1bbc3f87b72d0eb31e1d05adb36cb4b9",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "9be2d3ace116ec93b8c8c67af036bec14e0a75bf",
      "LastModified" : "2012-05-23T22:10:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Authentication\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/phpbb_auth/CMakeLists.txt" : {
      "ObjectId" : "46f470a07c131bc29f6365a32d7b17126eb2b798",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/smf_auth/CMakeLists.txt" : {
      "ObjectId" : "fe506a8f9cae495f8aae6c77de5d1753c0a61f83",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "a8e1330239384e6e5e582320f9d15794168a7d6e",
      "LastModified" : "2012-09-11T19:26:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## project executables\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## publish 14 core implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/swganh/CMakeLists.txt" : {
      "ObjectId" : "b36c0a5a723f9f490190827cfe1d02430d48d9fd",
      "LastModified" : "2013-08-24T04:24:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#python directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/swganh/app/CMakeLists.txt" : {
      "ObjectId" : "bb0a632695e4d0dbcabf7d70d5d3e46c769bf251",
      "LastModified" : "2013-07-01T16:40:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh/utilities/CMakeLists.txt" : {
      "ObjectId" : "2995cdddfaaea431d5e8f33ab15c9d1c5c7072b0",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/CMakeLists.txt" : {
      "ObjectId" : "b8a3b306d48f2e1ca0d82f0028f8a127e34c2dc9",
      "LastModified" : "2013-12-04T02:00:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/GameSystems/CMakeLists.txt" : {
      "ObjectId" : "b436ac4ce7e56da7a7e0478e5af712455ec1c072",
      "LastModified" : "2016-02-24T21:13:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/attributes/CMakeLists.txt" : {
      "ObjectId" : "81b9fc86d48f6971192a91b64a99f644a8adeb40",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/badge/CMakeLists.txt" : {
      "ObjectId" : "ee5695c9852e8ffae2cf1c86ce7dfb7079900097",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/chat/CMakeLists.txt" : {
      "ObjectId" : "af123009d23cfbe27718c6a87646b557148bdbef",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/combat/CMakeLists.txt" : {
      "ObjectId" : "14f813642dbca940838912b5111c56714efc2068",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/command/CMakeLists.txt" : {
      "ObjectId" : "a941eed05ffb6ae404fb20441fff75feea4595d1",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/equipment/CMakeLists.txt" : {
      "ObjectId" : "84bc467daa3a9319c957a17d085fa958d71bba12",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/map/CMakeLists.txt" : {
      "ObjectId" : "57d4d218fabb587d1b7454d8546fcdb1d1a29dd1",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/object/CMakeLists.txt" : {
      "ObjectId" : "a23bacee87ab92e105bee12008000e71ea4d8653",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/player/CMakeLists.txt" : {
      "ObjectId" : "e0dda4024e58c338b77dfee92f0a210af48670aa",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/simulation/CMakeLists.txt" : {
      "ObjectId" : "720a693c02a3f9bae315ca0b1b95cf1b894e5eaa",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/spawn/CMakeLists.txt" : {
      "ObjectId" : "974048c70d78e621809086cb5cc70cde39190af7",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/static/CMakeLists.txt" : {
      "ObjectId" : "c46ad83bbffeeb8a81020e25b39298e14522d781",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/sui/CMakeLists.txt" : {
      "ObjectId" : "06bffe4754bfae678f1f27b7de9a03c7e624abfa",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/terrain/CMakeLists.txt" : {
      "ObjectId" : "9c68a7323e599653b53e8b96540a16eefe0a022e",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/travel/CMakeLists.txt" : {
      "ObjectId" : "2ed963be22df02f38ddcfea3821743547797c4dc",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swganh_core/weather/CMakeLists.txt" : {
      "ObjectId" : "12bd8564bd7ee14b5646fa5c5ffda148e5d97def",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/ANHExecutable.cmake" : {
      "ObjectId" : "615161810148f44d75e56d70ccc2ec0ebe06fa2c",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AddANHExecutable is a standardized way to build binary executables in\n\n# the ANH project. Particularly on windows platforms this manages all the\n\n# machinary to set up a default environment to make building and then running\n\n# a simple task.\n\n#\n\n# Function Definition:\n\n#\n\n# AddANHExecutable(executable_name\n\n#                        MMOSERVER_DEPS [ARGS] [args1...]           # Dependencies on other MMOServer projects\n\n#                        ADDITIONAL_INCLUDE_DIRS [ARGS] [args1...]  # Additional directories to search for includes\n\n#                        ADDITIONAL_SOURCE_DIRS [ARGS] [args1...]   # Additional directories to search for files to include in the project\n\n#                        DEBUG_LIBRARIES [ARGS] [args1....]         # Additional debug libraries to link the project against\n\n#                        OPTIMIZED_LIBRARIES [ARGS] [args1...])     # Additional optimized libraries to link the project against\n\n#\n\n#\n\n########################\n\n# Simple Example Usage:\n\n########################\n\n#\n\n# include(ANHExecutable)\n\n#\n\n# AddANHExecutable(LoginServer)\n\n#\n\n#\n\n#########################\n\n# Complex Example Usage:\n\n#########################\n\n# include(ANHExecutable)\n\n#\n\n# AddANHExecutable(ZoneServer\n\n#     DEPENDS\n\n#         Utils\n\n#         Common\n\n#     SOURCES # disables source lookup and uses this list\n\n#         ${SOURCES}\n\n#     TEST_SOURCES # when source lookups are disabled use these tests\n\n#         ${TEST_SOURCES}\n\n#     ADDITIONAL_SOURCE_DIRS\n\n#         ${CMAKE_CURRENT_SOURCE_DIR}/glue_files\n\n#     ADDITIONAL_INCLUDE_DIRS\n\n#         ${LUA_INCLUDE_DIR}\n\n#         ${NOISE_INCLUDE_DIR}\n\n#         ${TOLUAPP_INCLUDE_DIR}\n\n#     DEBUG_LIBRARIES\n\n#         ${LUA_LIBRARY_DEBUG}\n\n#         ${NOISE_LIBRARY_DEBUG}\n\n#         ${TOLUAPP_LIBRARY_DEBUG}\n\n#     OPTIMIZED_LIBRARIES\n\n#         ${LUA_LIBRARY_RELEASE}\n\n#         ${NOISE_LIBRARY_RELEASE}\n\n#         ${TOLUAPP_LIBRARY_RELEASE}\n\n# )\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get information about the data passed in, helpful for checking if a value\n\n# has been set or not\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# load up all of the source and header files for the project\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# check to see if this application specifies an explicit main file\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# if unit tests have been specified break out the project into a library to make it testable\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Create the executable and link to it's library\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Link to some standard windows libs that all projects need.\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Create a custom built user configuration so that the \"run in debug mode\"\n\n# works without any issues.\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# On unix platforms put the built runtimes in the /bin directory.\n",
        "Line" : 177,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "tools/cmake/ANHLibrary.cmake" : {
      "ObjectId" : "b5c32f507dd891d94b4f9df8b0f6c2b8a297cca3",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AddMMOServerLibrary is a standardized way to build libraries in the MMOServer\n\n# project. Particularly on windows platforms this manages all the\n\n# machinary to set up a default environment and creating/building/running unit\n\n# unit tests an afterthought for developers.\n\n#\n\n# Function Definition:\n\n#\n\n# AddANHLibrary(library_name\n\n#     DEPENDS [ARGS] [args1...]           \t     # Dependencies on other MMOServer projects\n\n#     ADDITIONAL_INCLUDE_DIRS [ARGS] [args1...]  # Additional directories to search for includes\n\n#     ADDITIONAL_SOURCE_DIRS [ARGS] [args1...]   # Additional directories to search for files to include in the project\n\n#\n\n#\n\n########################\n\n# Simple Example Usage:\n\n########################\n\n#\n\n# include(ANHLibrary)\n\n#\n\n# AddANHLibrary(Common\n\n#     MMOSERVER_DEPS\n\n#         Utils\n\n# )\n\n#\n\n#\n\n#########################\n\n# Complex Example Usage:\n\n#########################\n\n# include(ANHLibrary)\n\n#\n\n# AddANHLibrary(ScriptEngine\n\n#     DEPENDS\n\n#         Utils\n\n#         Common\n\n#     SOURCES # disables source lookup and uses this list\n\n#         ${SOURCES}\n\n#     TEST_SOURCES # when source lookups are disabled use these tests\n\n#         ${TEST_SOURCES}\n\n#     ADDITIONAL_SOURCE_DIRS\n\n#         ${CMAKE_CURRENT_SOURCE_DIR}/glue_files\n\n#     ADDITIONAL_INCLUDE_DIRS\n\n#         ${LUA_INCLUDE_DIR}\n\n#         ${NOISE_INCLUDE_DIR}\n\n#         ${TOLUAPP_INCLUDE_DIR}\n\n#     DEBUG_LIBRARIES\n\n#         ${LUA_LIBRARY_DEBUG}\n\n#         ${NOISE_LIBRARY_DEBUG}\n\n#         ${TOLUAPP_LIBRARY_DEBUG}\n\n#     OPTIMIZED_LIBRARIES\n\n#         ${LUA_LIBRARY_RELEASE}\n\n#         ${NOISE_LIBRARY_RELEASE}\n\n#         ${TOLUAPP_LIBRARY_RELEASE}\n\n# )\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Grab all of the source files and all of the unit test files.\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# load up all of the source and header files for the project\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Group the source files based on the directory structure.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Remove the unit tests from the sources list.\n",
        "Line" : 101,
        "CharPositionInLine" : 50
      },
      "5" : {
        "Text" : "# get the number of .cc .cpp files\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create the Common library\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create an executable for the test and link it to turtle and anh\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# only link to the library if their are sources (header only libs\n\n# don't generate binaries)\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Create a custom built user configuration so that the \"run in debug mode\"\n\n# works without any issues.\n",
        "Line" : 188,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# add_custom_command(\n",
        "Line" : 194,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# TARGET ${name}_test\n\n# POST_BUILD\n\n# COMMAND $<TARGET_FILE:${name}_test>\n\n# WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${configuration}\n",
        "Line" : 195,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# )\n",
        "Line" : 199,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 13
    },
    "tools/cmake/ANHPlugin.cmake" : {
      "ObjectId" : "0697770526bc8263c3b5d88f66e2f3e7d48223b4",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AddMMOServerLibrary is a standardized way to build libraries in the MMOServer\n\n# project. Particularly on windows platforms this manages all the\n\n# machinary to set up a default environment and creating/building/running unit\n\n# unit tests an afterthought for developers.\n\n#\n\n# Function Definition:\n\n#\n\n# AddANHPlugin(library_name\n\n#     DEPENDS [ARGS] [args1...]           \t     # Dependencies on other MMOServer projects\n\n#     ADDITIONAL_INCLUDE_DIRS [ARGS] [args1...]  # Additional directories to search for includes\n\n#     ADDITIONAL_SOURCE_DIRS [ARGS] [args1...]   # Additional directories to search for files to include in the project\n\n#     DEBUG_LIBRARIES [ARGS] [args1....]         # Additional debug libraries to link the project against\n\n#     OPTIMIZED_LIBRARIES [ARGS] [args1...])     # Additional optimized libraries to link the project against\n\n#\n\n#\n\n########################\n\n# Simple Example Usage:\n\n########################\n\n#\n\n# include(ANHPlugin)\n\n#\n\n# AddANHPlugin(Common\n\n#     MMOSERVER_DEPS\n\n#         Utils\n\n# )\n\n#\n\n#\n\n#########################\n\n# Complex Example Usage:\n\n#########################\n\n# include(ANHPlugin)\n\n#\n\n# AddANHPlugin(ScriptEngine\n\n#     DEPENDS\n\n#         Utils\n\n#         Common\n\n#     SOURCES # disables source lookup and uses this list\n\n#         ${SOURCES}\n\n#     TEST_SOURCES # when source lookups are disabled use these tests\n\n#         ${TEST_SOURCES}\n\n#     ADDITIONAL_SOURCE_DIRS\n\n#         ${CMAKE_CURRENT_SOURCE_DIR}/glue_files\n\n#     ADDITIONAL_INCLUDE_DIRS\n\n#         ${LUA_INCLUDE_DIR}\n\n#         ${NOISE_INCLUDE_DIR}\n\n#         ${TOLUAPP_INCLUDE_DIR}\n\n#     DEBUG_LIBRARIES\n\n#         ${LUA_LIBRARY_DEBUG}\n\n#         ${NOISE_LIBRARY_DEBUG}\n\n#         ${TOLUAPP_LIBRARY_DEBUG}\n\n#     OPTIMIZED_LIBRARIES\n\n#         ${LUA_LIBRARY_RELEASE}\n\n#         ${NOISE_LIBRARY_RELEASE}\n\n#         ${TOLUAPP_LIBRARY_RELEASE}\n\n# )\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Grab all of the source files and all of the unit test files.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# check to see if this application specifies an explicit main file\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# if python bindings have been specified generate a module\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# if unit tests have been specified break out the project into a library to make it testable\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Create the Common library\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# If a project library was created link to it\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set the default output directory for binaries for convenience.\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# set the default output directory for the shared library for convenience\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "tools/cmake/ANHPythonBinding.cmake" : {
      "ObjectId" : "9620f6cd4affc67dd212c334aa3bc327a6bffbe5",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AddANHPythonBinding is a standardized way to build python modules in the swganh\n\n# project. Particularly on windows platforms this manages all the\n\n# machinary to set up a default environment and creating/building/running unit\n\n# unit tests an afterthought for developers.\n\n#\n\n# Function Definition:\n\n#\n\n# AddANHPythonBinding(library_name\n\n#     DEPENDS [ARGS] [args1...]           \t     # Dependencies on other swganh projects\n\n#     ADDITIONAL_INCLUDE_DIRS [ARGS] [args1...]  # Additional directories to search for includes\n\n#     ADDITIONAL_SOURCE_DIRS [ARGS] [args1...]   # Additional directories to search for files to include in the project\n\n#     DEBUG_LIBRARIES [ARGS] [args1....]         # Additional debug libraries to link the project against\n\n#     OPTIMIZED_LIBRARIES [ARGS] [args1...])     # Additional optimized libraries to link the project against\n\n#\n\n#\n\n########################\n\n# Simple Example Usage:\n\n########################\n\n#\n\n# include(ANHPYTHONLIBrary)\n\n#\n\n# AddANHPythonBinding(Common\n\n#     MMOSERVER_DEPS\n\n#         Utils\n\n# )\n\n#\n\n#\n\n#########################\n\n# Complex Example Usage:\n\n#########################\n\n# include(ANHPYTHONLIBrary)\n\n#\n\n# AddANHPythonBinding(ScriptEngine\n\n#     DEPENDS\n\n#         Utils\n\n#         Common\n\n#     SOURCES # disables source lookup and uses this list\n\n#         ${SOURCES}\n\n#     TEST_SOURCES # when source lookups are disabled use these tests\n\n#         ${TEST_SOURCES}\n\n#     ADDITIONAL_SOURCE_DIRS\n\n#         ${CMAKE_CURRENT_SOURCE_DIR}/glue_files\n\n#     ADDITIONAL_INCLUDE_DIRS\n\n#         ${LUA_INCLUDE_DIR}\n\n#         ${NOISE_INCLUDE_DIR}\n\n#         ${TOLUAPP_INCLUDE_DIR}\n\n#     DEBUG_LIBRARIES\n\n#         ${LUA_LIBRARY_DEBUG}\n\n#         ${NOISE_LIBRARY_DEBUG}\n\n#         ${TOLUAPP_LIBRARY_DEBUG}\n\n#     OPTIMIZED_LIBRARIES\n\n#         ${LUA_LIBRARY_RELEASE}\n\n#         ${NOISE_LIBRARY_RELEASE}\n\n#         ${TOLUAPP_LIBRARY_RELEASE}\n\n# )\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Grab all of the source files and all of the unit test files.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# load up all of the source and header files for the project\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Create the Common library\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/cmake/CMakeMacroParseArguments.cmake" : {
      "ObjectId" : "b3b5a2da6d540bf379cdfae3f28b19d67a83be11",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/FetchPreBuiltDependencies.cmake" : {
      "ObjectId" : "6317a3b10f2482a815dfc17b4156ba2e40cd3041",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/FindGlm.cmake" : {
      "ObjectId" : "0f4f85a38078a078782ad75b7360732cc53fc5f2",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/FindMysqlConnectorC.cmake" : {
      "ObjectId" : "e14e67639bd87c526dff910c62861998cf127f9b",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.\n\n#\n\n#   The MySQL Connector/C++ is licensed under the terms of the GPL\n\n#   <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most\n\n#   MySQL Connectors. There are special exceptions to the terms and\n\n#   conditions of the GPL as it is applied to this software, see the\n\n#   FLOSS License Exception\n\n#   <http://www.mysql.com/about/legal/licensing/foss-exception.html>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##########################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------- FIND MYSQL_INCLUDE_DIR ------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tADD_DEFINITIONS(\"${MYSQL_CXXFLAGS}\")\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------- FIND MYSQL_LIB_DIR -------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set lib path suffixes\n\n# dist = for mysql binary distributions\n\n# build = for custom built tree\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#mysqlclient may be in lib for some c/c distros\n",
        "Line" : 103,
        "CharPositionInLine" : 28
      },
      "7" : {
        "Text" : "# Test it\n\n#SET(__MYSQL_VERSION \"4.0.10\")\n\n# trim the string\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#SET(CMAKE_REQUIRED_LIBRARIES ${MYSQL_LIB})\n",
        "Line" : 176,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# For now this works only on *nix\n",
        "Line" : 178,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "#IF(MYSQLCPPCONN_DYNLOAD_MYSQL_LIB)\n",
        "Line" : 197,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#ADD_DEFINITIONS(\"-DDYNLOAD_MYSQL_LIB=\\\"${MYSQLCPPCONN_DYNLOAD_MYSQL_LIB}\\\"\")\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#ENDIF(MYSQLCPPCONN_DYNLOAD_MYSQL_LIB)\n",
        "Line" : 199,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 13
    },
    "tools/cmake/FindMysqlConnectorCpp.cmake" : {
      "ObjectId" : "4d53ad52302f00a5394f12c12c1ff7694be940e0",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/FindSphinx.cmake" : {
      "ObjectId" : "da12ee93de6affab30c13cd4ab769f304a6f5bc4",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - This module looks for Sphinx\n\n# Find the Sphinx documentation generator\n\n#\n\n# This modules defines\n\n#  SPHINX_EXECUTABLE\n\n#  SPHINX_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n# Copyright 2009-2011 Peter Colberg\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file COPYING-CMAKE-SCRIPTS for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/cmake/FindTBB.cmake" : {
      "ObjectId" : "abc7145ddf0c08c98f4098506a3d177d6db1bae5",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n#   Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n#   Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n#   e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n#   TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n#   in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n#   which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n#   which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n#       that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n#   find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#    endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n#       containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n#       (hence no else), instead I test if the user really specified\n\n#       the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n#       ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n#       variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n#       tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n#       variables, which now point to the directories of the lib files.\n\n#       It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n#       argument instead of the implicit PATHS as it isn't hard-coded\n\n#       but computed by system introspection. Searching the LIBRARY_PATH\n\n#       and LD_LIBRARY_PATH environment variables is now even more important\n\n#       that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n#       the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n#       Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "tools/cmake/FindTurtle.cmake" : {
      "ObjectId" : "3077210da3234e59750be046a99a2c497940f4e0",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/FindZLib.cmake" : {
      "ObjectId" : "7bc1963939e8418e8da168b038ef38559b155b72",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/GroupSourcesByFilesystem.cmake" : {
      "ObjectId" : "832c09ffdc50273ff7c931f78efaeeb1b754c385",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/PosixPostBuild.cmake" : {
      "ObjectId" : "faa7df4571563b08455c9d753db46f9cbb414a9d",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/Win32PostBuild.cmake" : {
      "ObjectId" : "36c32fdfc30e2e9d5e677c65fff8846261eec49f",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## create a target that gathers up the necessary dll's from the above\n\n## dependencies and places them in the runtime directory for this project\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/macros.cmake" : {
      "ObjectId" : "bc38f185b377d42faccc92546bf68ad0d1702a97",
      "LastModified" : "2013-06-18T01:49:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of SWGANH which is released under the MIT license.\n\n# See file LICENSE or go to http://swganh.com/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 48
  },
  "ElapsedTime" : 3147
}