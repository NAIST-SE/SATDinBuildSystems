{
  "Repository" : "29263609",
  "Revision" : "HEAD",
  "ObjectId" : "9b710dc0af681240eeb18d3e70bc8990afe21126",
  "CommitTime" : "2019-04-17T14:32:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b144be50f8431d3d061d436166aafe274fbdf85f",
      "LastModified" : "2018-12-20T18:39:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See docs/CMake.html for instructions about how to build LLVM with CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This should only apply if you are both on an Apple host, and targeting Apple.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if CMAKE_LIBTOOL is not set, try and find it with xcrun or find_program\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If DYLD_LIBRARY_PATH is set we need to set it on archiver commands\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Side-by-side subprojects layout: automatically set the\n\n# LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS\n\n# This allows an easy way of setting up a build directory for llvm and another\n\n# one for llvm+clang+... using the same sources.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# There is a widely spread opinion that clang-tools-extra should be merged\n\n# into clang. The following simulates it by always enabling clang-tools-extra\n\n# when enabling clang.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Build llvm with ccache if the package is present\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Some features of the LLVM build may be disallowed when dependency debugging is\n\n# enabled. In particular you cannot use ccache because we want to force compile\n\n# operations to always happen.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generate a CompilationDatabase (compile_commands.json file) for our build,\n\n# for use by clang_complete, YouCompleteMe, etc.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Unfortunatly Clang is too eager to search directories for module maps, which can cause the\n\n# installed version of the maps to be found when building LLVM from source. Therefore we turn off\n\n# the installation by default. See llvm.org/PR31905.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Configure CPack.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Sanity check our source directory to make sure that we are not trying to\n\n# generate an in-source build (unless on MSVC_IDE, where it is ok), and to make\n\n# sure that we don't have any stray generated files lying around in the tree\n\n# (which would end up getting picked up by header search, instead of the correct\n\n# versions).\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Each of them corresponds to llvm-config's.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --bindir\n\n# --libdir\n\n# --src-root\n\n# --includedir\n\n# --prefix\n",
        "Line" : 274,
        "CharPositionInLine" : 57
      },
      "17" : {
        "Text" : "# Note: LLVM_CMAKE_PATH does not include generated files\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# List of all targets to be built by default:\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List of targets with JIT support:\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Verify we are on a supported platform\n",
        "Line" : 394,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# If enabled, verify we are on a platform that supports oprofile.\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If enabled, verify we are on a platform that supports perf.\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define an option controlling whether we should build for 32-bit on 64-bit\n\n# platforms, where supported.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 462,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user to\n\n# override.\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Define options to control the inclusion and default build behavior for\n\n# components which may not strictly be necessary (tools, examples, and tests).\n\n#\n\n# This is primarily to support building smaller or faster project files.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# You can configure which libraries from LLVM you want to include in the\n\n# shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited\n\n# list of LLVM components. All component names handled by llvm-config are valid.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# A pool size of 1-2 is probably sufficient on a SSD. 3-4 should be fine\n\n# for spining disks. Anything higher may only help on slower mediums.\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# All options referred to from HandleLLVMOptions have to be specified\n\n# BEFORE this include, otherwise options will not be correctly set on\n\n# first cmake run\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Verify that we can find a Python 2 interpreter.  Python 3 is unsupported.\n\n# FIXME: We should support systems with only Python 3, but that requires work\n\n# on LLDB.\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "######\n\n# LLVMBuild Integration\n\n#\n\n# We use llvm-build to generate all the data required by the CMake based\n\n# build system in one swoop:\n\n#\n\n#  - We generate a file (a CMake fragment) in the object root which contains\n\n#    all the definitions that are required by CMake.\n\n#\n\n#  - We generate the library table used by llvm-config.\n\n#\n\n#  - We generate the dependencies for the CMake fragment, so that we will\n\n#    automatically reconfigure ourselves.\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Create the list of optional components that are enabled\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# On Win32, CMake doesn't properly handle piping the default output/error\n\n# streams into the GUI console. So, we explicitly catch and report them.\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Include the generated CMake fragment. This will define properties from the\n\n# LLVMBuild files in a format which is easy to consume from CMake, and will add\n\n# the dependencies so that CMake will reconfigure properly when the LLVMBuild\n\n# files change.\n",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "######\n",
        "Line" : 680,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Configure all of the various header file fragments LLVM uses which depend on\n\n# configuration variables.\n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# At this point, LLVMBUILDTOOL already checked all the targets passed in\n\n# LLVM_TARGETS_TO_BUILD and LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, so\n\n# this test just makes sure that any experimental targets were passed via\n\n# LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.\n",
        "Line" : 693,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Produce the target definition files, which provide a way for clients to easily\n\n# include various classes of targets.\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Configure the three LLVM configuration header files.\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Add target for generating source rpm package.\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# SVN_REVISION and GIT_COMMIT get set by the call to add_version_info_from_vcs.\n\n# DUMMY_VAR contains a version string which we don't care about.\n",
        "Line" : 755,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# They are not referenced. See set_output_directory().\n",
        "Line" : 774,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Work around a broken bfd ld behavior. When linking a binary with a\n\n# foo.so library, it will try to find any library that foo.so uses and\n\n# check its symbols. This is wasteful (the check was done when foo.so\n\n# was created) and can fail since it is not the dynamic linker and\n\n# doesn't know how to handle search paths correctly.\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# when crosscompiling import the executable targets from a file\n",
        "Line" : 802,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Dummy use to avoid CMake Warning: Manually-specified variables were not used\n\n# (this is a variable that CrossCompile sets on recursive invocations)\n",
        "Line" : 807,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# On FreeBSD, /usr/local/* is not used by default. In order to build LLVM\n\n# with libxml2, iconv.h, etc., we must add /usr/local paths.\n",
        "Line" : 812,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# special hack for Solaris to handle crazy system sys/regset.h\n",
        "Line" : 819,
        "CharPositionInLine" : 3
      },
      "51" : {
        "Text" : "# Make sure we don't get -rdynamic in every binary. For those that need it,\n\n# use export_executable_symbols(target).\n",
        "Line" : 823,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# People report that -O3 is unreliable on MinGW. The traditional\n\n# build also uses -O2 for that reason:\n",
        "Line" : 842,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Put this before tblgen. Else we have a circular dependence.\n",
        "Line" : 847,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# This utility is used to prevent crashing tests from calling Dr. Watson on\n\n# Windows.\n",
        "Line" : 913,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 918,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Do this last so that all lit targets have already been created.\n",
        "Line" : 949,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by \"*.def\"\n",
        "Line" : 975,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Installing the headers needs to depend on generating any public\n\n# tablegen'd headers.\n",
        "Line" : 995,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Custom target to install all libraries.\n",
        "Line" : 1006,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# This must be at the end of the LLVM root CMakeLists file because it must run\n\n# after all targets are created.\n",
        "Line" : 1028,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake\n",
        "Line" : 1061,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Override benchmark defaults so that when the library itself is updated these\n\n# modifications are not lost.\n",
        "Line" : 1067,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Since LLVM requires C++11 it is safe to assume that std::regex is available.\n",
        "Line" : 1074,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 65
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "43f88f72579240ccbc58d2298c30dca715031ab0",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/CMakeLists.txt" : {
      "ObjectId" : "20583682c3d750b01df13876a34bb91299c0dcf9",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/all_backends/CMakeLists.txt" : {
      "ObjectId" : "716a49cc3281b34a21f1fcf15e1a2682b11cea5e",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/analysis/CMakeLists.txt" : {
      "ObjectId" : "f8ca84ddbe33e8b8a7205ac80250d18bc067a4ce",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/backends/CMakeLists.txt" : {
      "ObjectId" : "18d62a857381491689bfdae8d8b4900f7dd54998",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/bitreader/CMakeLists.txt" : {
      "ObjectId" : "8d1610320e0e6c6d6ca2b9489c5449f04fd6ba66",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/bitwriter/CMakeLists.txt" : {
      "ObjectId" : "5a14498cb07e1372f9b80060bf547568a6820f12",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/executionengine/CMakeLists.txt" : {
      "ObjectId" : "ae9af088c025a1616de0d8529506d59532462e91",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/irreader/CMakeLists.txt" : {
      "ObjectId" : "87d269b48c7a3d0b372e1f4e7617dc2ef0d420f5",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/linker/CMakeLists.txt" : {
      "ObjectId" : "b6bc8ac1e83091130ae4cc1ecdffbac32cd2d2d7",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/llvm/CMakeLists.txt" : {
      "ObjectId" : "db7aee2adff9f147de17e17099fdcb81b9e525e6",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/target/CMakeLists.txt" : {
      "ObjectId" : "adee0fcec659a36352d94ea2fb21b75dc223bc22",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/transforms/CMakeLists.txt" : {
      "ObjectId" : "beb8694019b7a87c065d5eb5c1bad3844a3fb2b2",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/transforms/ipo/CMakeLists.txt" : {
      "ObjectId" : "4b8784fad67bb29707f063b1b52a810324e4d496",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/transforms/passmgr_builder/CMakeLists.txt" : {
      "ObjectId" : "b012863d8ec7ed57ccd1e6a47f4ed2964d88dabc",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/transforms/scalar_opts/CMakeLists.txt" : {
      "ObjectId" : "98c7c6861d2b117df95b39e4b1ab3ef7801af362",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/transforms/utils/CMakeLists.txt" : {
      "ObjectId" : "37f3eb7d8ecabdf895d6f1615f5cdf5813042c08",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/ocaml/transforms/vectorize/CMakeLists.txt" : {
      "ObjectId" : "af0ffce563f6e0d31b0fc53a25771efe368bc806",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/config-ix.cmake" : {
      "ObjectId" : "900c35ee4f0c9bb01c39097e8ba4b013b0c73505",
      "LastModified" : "2018-11-26T00:03:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We consider Cygwin as another Unix\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Used by check_symbol_exists:\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# x86_64 FreeBSD 9.2 requires libcxxrt to be specified explicitly.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include checks\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# older kernels use split files\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# library checks\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this could be Android\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Check for libpfm.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We want to find pthreads library and at the moment we do want to\n\n# have it reported as '-l<lib>' instead of '-pthread'.\n\n# TODO: switch to -pthread once the rest of the build system can deal with it.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't look for these libraries if we're using MSan, since uninstrumented third\n\n# party code may call MSan interceptors like strlen, leading to false positives.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Don't look for these libraries on Windows.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Skip libedit if using ASan as it contains memory leaks.\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# function checks\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Prevent check_symbol_exists from using API that is not supported for a given\n\n# deployment target.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# AddressSanitizer conflicts with lib/Support/Unix/Signals.inc\n\n# Avoid sigaltstack on Apple platforms, where backtrace() cannot handle it\n\n# (rdar://7089625) and _Unwind_Backtrace is unusable because it cannot unwind\n\n# past the signal handler after an assertion failure (rdar://29866587).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This check requires _GNU_SOURCE\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# available programs checks\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Define LLVM_HAS_ATOMICS if gcc or MSVC atomic builtins are supported.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Disable gcc's potentially uninitialized use analysis as it presents lots of\n\n# false positives.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Only recent versions of gcc make the distinction between -Wuninitialized\n\n# and -Wmaybe-uninitialized. If -Wmaybe-uninitialized isn't supported, just\n\n# turn off all uninitialized use warnings.\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Determine the native architecture.\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If build targets includes \"host\", then replace with native architecture.\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# We don't have an ASM parser for all architectures yet.\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# We don't have an disassembler for all architectures yet.\n",
        "Line" : 441,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# See if the DIA SDK is available and usable.\n",
        "Line" : 452,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Due to a bug in MSVC 2013's installation software, it is possible\n\n# for MSVC 2013 to write the DIA SDK into the Visual Studio 2012\n\n# install directory.  If this happens, the installation is corrupt\n\n# and there's nothing we can do.  It happens with enough frequency\n\n# though that we should handle it.  We do so by simply checking that\n\n# the DIA SDK folder exists.  Should this happen you will need to\n\n# uninstall VS 2012 and then re-install VS 2013.\n",
        "Line" : 455,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# FIXME: Signal handler return type, currently hardcoded to 'void'\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Check if threading primitives aren't supported on this platform\n",
        "Line" : 482,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Check if zlib is available in the system.\n",
        "Line" : 495,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# If we find doxygen and we want to enable doxygen by default create a\n\n# global aggregate doxygen target for generating llvm and any/all\n\n# subprojects doxygen documentation.\n",
        "Line" : 506,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Keep the version requirements in sync with bindings/ocaml/README.txt.\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Some systems still don't have pygments.lexers.c_cpp which was introduced in\n\n# version 2.0 in 2014...\n",
        "Line" : 614,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 33
    },
    "cmake/modules/AddLLVM.cmake" : {
      "ObjectId" : "baf52c1fe752c80d4ddc6270d9938fff2413ab5a",
      "LastModified" : "2018-12-22T10:44:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_REQUIRES_EH is an internal flag that individual targets can use to\n\n# force EH\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# LLVM_REQUIRES_RTTI is an internal flag that individual\n\n# targets can use to force RTTI\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Assume that;\n\n#   - LLVM_COMPILE_FLAGS is list.\n\n#   - PROPERTY COMPILE_FLAGS is string.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Update target props, since all sources are C++.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Gold and BFD ld require a version script rather than a plain list.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Don't write the \"local:\" line on OpenBSD.\n\n# in the export file, also add a linker script to version LLVM symbols (form: LLVM_N.M)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Force re-linking when the exports file changes. Actually, it\n\n# forces recompilation of the source file. The LINK_DEPENDS target\n\n# property only works for makefile-based generators.\n\n# FIXME: This is not safe because this will create the same target\n\n# ${native_export_file} in several different file:\n\n# - One where we emitted ${target_name}_exports\n\n# - One where we emitted the build command for the following object.\n\n# set_property(SOURCE ${first_source_file} APPEND PROPERTY\n\n#   OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${native_export_file})\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add dependency to *_exports later -- CMake issue 14747\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Detect what linker we have here\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Don't use linker optimizations in debug builds since it slows down the\n\n# linker in a context where the optimizations are not important.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Pass -O3 to the linker. This enabled different optimizations on different\n\n# linkers.\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# With gold gc-sections is always safe.\n",
        "Line" : 209,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Note that there is a bug with -Wl,--icf=safe so it is not safe\n\n# to enable. See https://sourceware.org/bugzilla/show_bug.cgi?id=17704.\n",
        "Line" : 212,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# ld64's implementation of -dead_strip breaks tools that use plugins.\n",
        "Line" : 218,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Object files are compiled with -ffunction-data-sections.\n\n# Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks\n\n# tools that use plugins. Always pass --gc-sections once we require\n\n# a newer linker.\n",
        "Line" : 225,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.\n\n# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,\n\n# or a certain builder, for eaxample, msbuild.exe, would be confused.\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# module_dir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.\n\n# It affects output of add_library(MODULE).\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# DLL platform\n",
        "Line" : 245,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# If on Windows and building with MSVC, add the resource script containing the\n\n# VERSIONINFO data to the project.  This embeds version resource information\n\n# into the output .exe or .dll.\n\n# TODO: Enable for MinGW Windows builds too.\n\n#\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set_windows_version_resource_properties(name resource_file...\n\n#   VERSION_MAJOR int\n\n#     Optional major version number (defaults to LLVM_VERSION_MAJOR)\n\n#   VERSION_MINOR int\n\n#     Optional minor version number (defaults to LLVM_VERSION_MINOR)\n\n#   VERSION_PATCHLEVEL int\n\n#     Optional patchlevel version number (defaults to LLVM_VERSION_PATCH)\n\n#   VERSION_STRING\n\n#     Optional version string (defaults to PACKAGE_VERSION)\n\n#   PRODUCT_NAME\n\n#     Optional product name string (defaults to \"LLVM\")\n\n#   )\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# llvm_add_library(name sources...\n\n#   SHARED;STATIC\n\n#     STATIC by default w/o BUILD_SHARED_LIBS.\n\n#     SHARED by default w/  BUILD_SHARED_LIBS.\n\n#   OBJECT\n\n#     Also create an OBJECT library target. Default if STATIC && SHARED.\n\n#   MODULE\n\n#     Target ${name} might not be created on unsupported platforms.\n\n#     Check with \"if(TARGET ${name})\".\n\n#   DISABLE_LLVM_LINK_LLVM_DYLIB\n\n#     Do not link this library to libLLVM, even if\n\n#     LLVM_LINK_LLVM_DYLIB is enabled.\n\n#   OUTPUT_NAME name\n\n#     Corresponds to OUTPUT_NAME in target properties.\n\n#   DEPENDS targets...\n\n#     Same semantics as add_dependencies().\n\n#   LINK_COMPONENTS components...\n\n#     Same as the variable LLVM_LINK_COMPONENTS.\n\n#   LINK_LIBS lib_targets...\n\n#     Same semantics as target_link_libraries().\n\n#   ADDITIONAL_HEADERS\n\n#     May specify header files for IDE generators.\n\n#   SONAME\n\n#     Should set SONAME link flags and create symlinks\n\n#   NO_INSTALL_RPATH\n\n#     Suppress default RPATH settings in shared libraries.\n\n#   PLUGIN_TOOL\n\n#     The tool (i.e. cmake target) that this plugin will link against\n\n#   )\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Pass through ADDITIONAL_HEADERS.\n",
        "Line" : 388,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Plugins that link against a tool are allowed even when plugins in general are not\n",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Generate objlib\n",
        "Line" : 418,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 420,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Do add_dependencies(obj) later due to CMake issue 14747.\n",
        "Line" : 428,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# static\n",
        "Line" : 435,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# DEPENDS has been appended to LLVM_COMMON_LIBS.\n",
        "Line" : 440,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# objlib\n",
        "Line" : 443,
        "CharPositionInLine" : 27
      },
      "29" : {
        "Text" : "# FIXME: Add name_static to anywhere in TARGET ${name}'s PROPERTY.\n",
        "Line" : 447,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# $<TARGET_OBJECTS> doesn't require compile flags.\n",
        "Line" : 474,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Set SOVERSION on shared libraries that lack explicit SONAME\n\n# specifier, on *nix systems that are not Darwin.\n",
        "Line" : 500,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Since 4.0.0, the ABI version is indicated by the major version\n",
        "Line" : 505,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 512,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# On DLL platforms symbols are imported from the tool by linking against it.\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Components have not been defined explicitly in CMake, so add the\n\n# dependency information for this library as defined by LLVMBuild.\n\n#\n\n# It would be nice to verify that we have the dependencies for this library\n\n# name, but using get_property(... SET) doesn't suffice to determine if a\n\n# property has been set to an empty value.\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# We can use PRIVATE since SO knows its dependent libs.\n",
        "Line" : 566,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Add dependencies also to objlibs.\n\n# CMake issue 14747 --  add_dependencies() might be ignored to objlib's user.\n",
        "Line" : 578,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Libraries that are meant to only be exposed via the build tree only are\n\n# never installed and are only exported as a target in the special build tree\n\n# config file.\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 639,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Generate objlib\n",
        "Line" : 702,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 704,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Note: the dummy.cpp source file provides no definitions. However,\n\n# it forces Xcode to properly link the static library.\n",
        "Line" : 718,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# $<TARGET_OBJECTS> doesn't require compile flags.\n",
        "Line" : 739,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 745,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# libpthreads overrides some standard library symbols, so main\n\n# executable must be linked with it in order to provide consistent\n\n# API for all shared libaries loaded by this executable.\n",
        "Line" : 770,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# The symbol file should contain the symbols we want the executable to\n\n# export\n",
        "Line" : 781,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Extract the symbols to export from the static libraries that the\n\n# executable links against.\n",
        "Line" : 785,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# We need to consider not just the direct link dependencies, but also the\n\n# transitive link dependencies. Do this by starting with the set of direct\n\n# dependencies, then the dependencies of those dependencies, and so on.\n",
        "Line" : 789,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# If something links against this executable then we want a\n\n# transitive link against only the libraries whose symbols\n\n# we aren't exporting.\n",
        "Line" : 828,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# The default import library suffix that cmake uses for cygwin/mingw is\n\n# \".dll.a\", but for clang.exe that causes a collision with libclang.dll,\n\n# where the import libraries of both get named libclang.dll.a. Use a suffix\n\n# of \".exe.a\" to avoid this.\n",
        "Line" : 832,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# On Windows auto-exporting everything doesn't work because of the limit on\n\n# the size of the exported symbol table, but on other platforms we can do\n\n# it without any trouble.\n",
        "Line" : 840,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# This is a macro that is used to create targets for executables that are needed\n\n# for development, but that are not intended to be installed by default.\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Custom add_subdirectory wrapper\n\n# Takes in a project name (i.e. LLVM), the subdirectory name, and an optional\n\n# path if it differs from the name.\n",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Treat it as in-tree subproject.\n",
        "Line" : 976,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Add external project that may want to be built as part of llvm such as Clang,\n\n# lld, and Polly. This adds two options. One for the source directory of the\n\n# project, which defaults to ${CMAKE_CURRENT_SOURCE_DIR}/${name}. Another to\n\n# enable or disable building it with everything else.\n\n# Additional parameter can be specified as the name of directory.\n",
        "Line" : 1007,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Generic support for adding a unittest.\n",
        "Line" : 1068,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Our current version of gtest does not properly recognize C++11 support\n\n# with MSVC, so it falls back to tr1 / experimental classes.  Since LLVM\n\n# itself requires C++11, we can safely force it on unconditionally so that\n\n# we don't have to fight with the buggy gtest check.\n",
        "Line" : 1074,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Some parts of gtest rely on this GNU extension, don't warn on it.\n",
        "Line" : 1090,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# gtest needs it for raw_ostream\n",
        "Line" : 1097,
        "CharPositionInLine" : 44
      },
      "60" : {
        "Text" : "# libpthreads overrides some standard library symbols, so main\n\n# executable must be linked with it in order to provide consistent\n\n# API for all shared libaries loaded by this executable.\n",
        "Line" : 1101,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Use for test binaries that call llvm::getInputFileDirectory(). Use of this\n\n# is discouraged.\n",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Generic support for adding a benchmark.\n",
        "Line" : 1124,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# FIXME: This should depend only on the libraries Go needs.\n",
        "Line" : 1141,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# This function canonicalize the CMake variables passed by names\n\n# from CMake boolean to 0/1 suitable for passing into Python or C++,\n\n# in place.\n",
        "Line" : 1167,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Configuration-time: See Unit/lit.site.cfg.in\n",
        "Line" : 1181,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# This function provides an automatic way to 'configure'-like generate a file\n\n# based on a set of common and custom variables, specifically targeting the\n\n# variables needed for the 'lit.site.cfg' files. This function bundles the\n\n# common variables that any Lit instance is likely to need, and custom\n\n# variables can be passed in.\n",
        "Line" : 1189,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# They below might not be the build tree but provided binary tree.\n",
        "Line" : 1214,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# SHLIBDIR points the build tree.\n",
        "Line" : 1220,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# FIXME: \"ENABLE_SHARED\" doesn't make sense, since it is used just for\n\n# plugins. We may rename it.\n",
        "Line" : 1224,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Override config_target_triple (and the env)\n",
        "Line" : 1247,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# This is expanded into the heading.\n",
        "Line" : 1249,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# This is expanded to; config.target_triple = \"\"+config.target_triple+\"\"\n",
        "Line" : 1256,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# llvm-lit needs suffix.py for multiprocess to find a main module.\n",
        "Line" : 1301,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# Allow individual projects to provide an override\n",
        "Line" : 1311,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# Cache this so we don't have to do it again and have subsequent calls\n\n# potentially disagree on the value.\n",
        "Line" : 1320,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# A raw function to create a lit target. This is used to implement the testuite\n\n# management functions.\n",
        "Line" : 1326,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Get the path to the lit to *run* tests with.  This can be overriden by\n\n# the user by specifying -DLLVM_EXTERNAL_LIT=<path-to-lit.py>\n",
        "Line" : 1336,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Tests should be excluded from \"Build Solution\".\n",
        "Line" : 1365,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# A function to add a set of lit test suites to be driven through 'check-*' targets.\n",
        "Line" : 1369,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# EXCLUDE_FROM_ALL excludes the test ${target} out of check-all.\n",
        "Line" : 1373,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Register the testsuites, params and depends for the global check rule.\n",
        "Line" : 1375,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# Produce a specific suffixed check rule.\n",
        "Line" : 1382,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# Search recursively for test directories by assuming anything not\n\n# in a directory called Inputs contains tests.\n",
        "Line" : 1395,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# Create a check- target for the directory.\n",
        "Line" : 1408,
        "CharPositionInLine" : 6
      },
      "85" : {
        "Text" : "# This got a bit gross... For multi-configuration generators the target\n\n# properties return the resolved value of the string, not the build system\n\n# expression. To reconstruct the platform-agnostic path we have to do some\n\n# magic. First we grab one of the types, and a type-specific path. Then from\n\n# the type-specific path we find the last occurrence of the type in the path,\n\n# and replace it with CMAKE_CFG_INTDIR. This allows the build step to be type\n\n# agnostic again.\n",
        "Line" : 1495,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# If you're not overriding the OUTPUT_DIR, we can make the link relative in\n\n# the same directory.\n",
        "Line" : 1503,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Make sure both the link and target are toolchain tools\n",
        "Line" : 1557,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Usage: llvm_codesign(name [ENTITLEMENTS file])\n",
        "Line" : 1615,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Avoid double-signing error: Since output overwrites input, Xcode runs\n\n# the post-build rule even if the actual build-step was skipped.\n",
        "Line" : 1638,
        "CharPositionInLine" : 6
      },
      "90" : {
        "Text" : "# $ORIGIN is not interpreted at link time by ld.bfd\n",
        "Line" : 1674,
        "CharPositionInLine" : 6
      },
      "91" : {
        "Text" : "# Figure out if we can track VC revisions.\n",
        "Line" : 1704,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Run from a subdirectory to force git to print an absolute path.\n",
        "Line" : 1716,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# some branchless cases (e.g. 'repo') may not yet have .git/logs/HEAD\n",
        "Line" : 1725,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# SVN 1.7\n\n# SVN 1.6\n",
        "Line" : 1731,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 95
    },
    "cmake/modules/AddLLVMDefinitions.cmake" : {
      "ObjectId" : "dab16236d3e9fa4d845c7325d99a8d04120e463d",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There is no clear way of keeping track of compiler command-line\n\n# options chosen via `add_definitions', so we need our own method for\n\n# using it on tools/llvm-config/CMakeLists.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Beware that there is no implementation of remove_llvm_definitions.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We don't want no semicolons on LLVM_DEFINITIONS:\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/AddOCaml.cmake" : {
      "ObjectId" : "02bab6846376bcf94699a940f5e3369f7f281954",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build rules for the OCaml language.\n\n# Assumes FindOCaml is used.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# add_ocaml_library(pkg_a OCAML mod_a OCAMLDEP pkg_b C mod_a_stubs PKG ctypes LLVM core)\n\n#\n\n# Unnamed parameters:\n\n#\n\n#   * Library name.\n\n#\n\n# Named parameters:\n\n#\n\n# OCAML     OCaml module names. Imply presence of a corresponding .ml and .mli files.\n\n# OCAMLDEP  Names of libraries this library depends on.\n\n# C         C stub sources. Imply presence of a corresponding .c file.\n\n# CFLAGS    Additional arguments passed when compiling C stubs.\n\n# PKG       Names of ocamlfind packages this library depends on.\n\n# LLVM      Names of LLVM libraries this library depends on.\n\n# NOCOPY    Do not automatically copy sources (.c, .ml, .mli) from the source directory,\n\n#           e.g. if they are generated.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's an option, pass it without changes.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Otherwise assume it's a library name we need to link with.\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# include -D/-UNDEBUG to match dump function visibility\n\n# regex from HandleLLVMOptions.cmake\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/AddSphinxTarget.cmake" : {
      "ObjectId" : "22e3dcb776aa222251d7e0310bfadba5e9358320",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create sphinx target\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handy function for creating the different Sphinx targets.\n\n#\n\n# ``builder`` should be one of the supported builders used by\n\n# the sphinx-build command.\n\n#\n\n# ``project`` should be the project name\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Quiet: no output other than errors and warnings.\n",
        "Line" : 35,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# Treat warnings as errors if requested\n",
        "Line" : 36,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# Source\n",
        "Line" : 37,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Output\n",
        "Line" : 38,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : "# When \"clean\" target is run, remove the Sphinx build directory\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# We need to remove ${SPHINX_DOC_TREE_DIR} when make clean is run\n\n# but we should only add this path once\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Handle installation\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# FIXME: We might not ship all the tools that these man pages describe\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Slash indicates contents of\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : "# '/.' indicates: copy the contents of the directory directly into\n\n# the specified destination, without recreating the last component\n\n# of ${SPHINX_BUILD_DIR} implicitly.\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "9cf22b436fa7367d56e69a1d6c23b8155be956a6",
      "LastModified" : "2019-04-12T20:47:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First for users who use an installed LLVM, create the LLVMExports.cmake file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Then for users who want to link against the LLVM build tree, provide the\n\n# normal targets and the build tree only targets.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake requires that all targets expressed as dependencies exist, so we can't\n\n# have intrinsics_gen in LLVM_COMMON_DEPENDS when it is written out, otherwise\n\n# projects building out of tree will have CMake errors. This only gets hit when\n\n# LLVM_ENABLE_MODULES=On. Eventually we should come up with a better solution to\n\n# this, but there is no easy solution.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate LLVMConfig.cmake for the build tree.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We need to use the full path to the LLVM Exports file to make sure we get the\n\n# one from the build tree. This is due to our cmake files being split between\n\n# this source dir and the binary dir in the build tree configuration and the\n\n# LLVM_CONFIG_CMAKE_DIR being the source directory. In contrast in the install\n\n# tree, both the generated LLVMExports.cmake file and the rest of the cmake\n\n# source files are put in the same cmake directory.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For compatibility with projects that include(LLVMConfig)\n\n# via CMAKE_MODULE_PATH, place API modules next to it.\n\n# This should be removed in the future.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate LLVMConfig.cmake for the install tree.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Construct the proper number of get_filename_component(... PATH)\n\n# calls to compute the installation prefix.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate LLVMConfigVersion.cmake for build and install tree.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "cmake/modules/CheckAtomic.cmake" : {
      "ObjectId" : "9a4cdf12a6223d8f51cf0f4bda61846dd6e85fb8",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# atomic builtins are required for threading support.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sometimes linking against libatomic is required for atomic ops, if\n\n# the platform doesn't support lock-free atomics.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This isn't necessary on MSVC, so avoid command-line switch annoyance\n\n# by only running on GCC-like hosts.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First check if atomics work without the library.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check for 64 bit atomic operations.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## TODO: This define is only used for the legacy atomic operations in\n\n## llvm's Atomic.h, which should be replaced.  Other code simply\n\n## assumes C++11 <atomic> works.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/CheckCompilerVersion.cmake" : {
      "ObjectId" : "adf500ad53a72236165c61176e908996337ba03f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the host compiler is new enough. LLVM requires at least GCC 4.8,\n\n# MSVC 2015 (Update 3), or Clang 3.1.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Otherwise, test that we aren't using too old of a version of libstdc++\n\n# with the Clang compiler. This is tricky as there is no real way to\n\n# check the version of libstdc++ directly. Instead we test for a known\n\n# bug in libstdc++4.6 that is fixed in libstdc++4.7.\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/modules/CheckLinkerFlag.cmake" : {
      "ObjectId" : "fe9d01a349cd8d55f5db93df76414d29f9c03908",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/ChooseMSVCCRT.cmake" : {
      "ObjectId" : "0e6e1aa55254e51480ba489e54c545c7a6accc25",
      "LastModified" : "2018-12-19T18:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The macro choose_msvc_crt() takes a list of possible\n\n# C runtimes to choose from, in the form of compiler flags,\n\n# to present to the user. (MTd for /MTd, etc)\n\n#\n\n# The macro is invoked at the end of the file.\n\n#\n\n# CMake already sets CRT flags in the CMAKE_CXX_FLAGS_* and\n\n# CMAKE_C_FLAGS_* variables by default. To let the user\n\n# override that for each build type:\n\n# 1. Detect which CRT is already selected, and reflect this in\n\n# LLVM_USE_CRT_* so the user can have a better idea of what\n\n# changes they're making.\n\n# 2. Replace the flags in both variables with the new flag via a regex.\n\n# 3. set() the variables back into the cache so the changes\n\n# are user-visible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Helper macros: ###\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trying to match the beginning or end of the string with stuff\n\n# like [ ^]+ didn't work, so use a bunch of parentheses instead.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find the selected-by-CMake CRT for each build type, if any.\n\n# Strip off the leading slash and any whitespace.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Replaces or adds a flag to a variable.\n\n# Expects 'flag' to be padded with spaces.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure this change gets reflected in the cache/gui.\n\n# CMake requires the docstring parameter whenever set() touches the cache,\n\n# so get the existing docstring and re-use that.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# List of valid CRTs for MSVC\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/CrossCompile.cmake" : {
      "ObjectId" : "b239816c8253928446e2d4bcf9fe205433211dd5",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Propagate LLVM_EXTERNAL_CLANG_SOURCE_DIR so that clang-tblgen can be built\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Escape semicolons in the targets list so that cmake doesn't expand\n\n# them to spaces.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/modules/DetermineGCCCompatible.cmake" : {
      "ObjectId" : "1369ebe9d0e212e57dcbf7f82a5d94d201a48eaf",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine if the compiler has GCC-compatible command-line syntax.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLibpfm.cmake" : {
      "ObjectId" : "202bb030e3803273ace553266d26303fb1b94de1",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake module for finding libpfm4.\n\n#\n\n# If successful, the following variables will be defined:\n\n# HAVE_LIBPFM\n\n#\n\n# Libpfm can be disabled by setting LLVM_ENABLE_LIBPFM to 0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindOCaml.cmake" : {
      "ObjectId" : "8eba2127df1b361d9b70728d9f09a85753eb3286",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() module for the OCaml language.\n\n# Assumes ocamlfind will be used for compilation.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(OCaml)\n\n#\n\n# If successful, the following variables will be defined:\n\n# OCAMLFIND\n\n# OCAML_VERSION\n\n# OCAML_STDLIB_PATH\n\n# HAVE_OCAMLOPT\n\n#\n\n# Also provides find_ocamlfind_package() macro.\n\n#\n\n# Example usage:\n\n#\n\n# find_ocamlfind_package(ctypes)\n\n#\n\n# In any case, the following variables are defined:\n\n#\n\n# HAVE_OCAML_${pkg}\n\n#\n\n# If successful, the following variables will be defined:\n\n#\n\n# OCAML_${pkg}_VERSION\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's optional and the constraint is not satisfied, pretend\n\n# it wasn't found.\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "9d252e8b70aef4abf8a8da21eb0248bea53137a6",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() Module for Sphinx documentation generator\n\n# http://sphinx-doc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Sphinx)\n\n#\n\n# If successful the following variables will be defined\n\n# SPHINX_FOUND\n\n# SPHINX_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set SPHINX_FOUND to true if SPHINX_EXECUTABLE exists\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide options for controlling different types of output\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/GenerateVersionFromCVS.cmake" : {
      "ObjectId" : "6b1c719834667d4c7f1338d947d1e8c03e76ae38",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   SRC               - Source directory\n\n#   HEADER_FILE       - The header file to write\n\n#\n\n# The output header will contain macros FIRST_REPOSITORY and FIRST_REVISION,\n\n# and SECOND_REPOSITORY and SECOND_REVISION if requested, where \"FIRST\" and\n\n# \"SECOND\" are substituted with the names specified in the input variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/GetHostTriple.cmake" : {
      "ObjectId" : "7b842450b726aefaa44377cb5e8212a66ec42668",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns the host triple.\n\n# Invokes config.guess\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/GetSVN.cmake" : {
      "ObjectId" : "f729395f6e4bab54317fdb94e7c844f34f0bbe5a",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   SOURCE_DIRS - A list of source directories.\n\n#   NAMES       - A list of macro prefixes for each of the source directories.\n\n#   HEADER_FILE - The header file to write\n\n#\n\n# The output header will contain macros <NAME>_REPOSITORY and <NAME>_REVISION,\n\n# where \"<NAME>\" and is substituted with the names specified in the input\n\n# variables, for each of the SOURCE_DIRS given.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If svn is a bat file, find_program(Subversion) doesn't find it.\n\n# Explicitly search for that here; Subversion_SVN_EXECUTABLE will override\n\n# the find_program call in FindSubversion.cmake.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Allow -DFIRST_SOURCE_DIR arguments until Clang migrates to the new\n\n# -DSOURCE_DIRS argument.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/HandleLLVMOptions.cmake" : {
      "ObjectId" : "49db3088bbc4ff3a453968ab1c260a01f14fa2f3",
      "LastModified" : "2018-12-19T18:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for interpreting the user defined LLVM_\n\n# options and executing the appropriate CMake commands to realize the users'\n\n# selections.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is commonly needed so make sure it's defined before we include anything\n\n# else.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ninja Job Pool support\n\n# The following only works with the Ninja generator in CMake >= 3.0.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# On non-Debug builds cmake automatically defines NDEBUG, so we\n\n# explicitly undefine it:\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# We don't need to do anything special to turn off ABI breaking checks.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Treat LLVM_ABI_BREAKING_CHECKS like \"FORCE_OFF\" when it has not been\n\n# defined.\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We use *.dylib rather than *.so on darwin.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Darwin-specific linker flags for loadable modules.\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Pass -Wl,-z,defs. This makes sure all symbols are defined. Otherwise a DSO\n\n# build might work on ELF but fail on MachO/COFF.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Pass -Wl,-z,nodelete. This makes sure our shared libraries are not unloaded\n\n# by dlclose(). We need that since the CLI API relies on cross-references\n\n# between global objects which became horribly broken when one of the libraries\n\n# is unloaded.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Xcode has -mdynamic-no-pic on by default, which overrides -fPIC. I don't\n\n# know how to disable this, so just force ENABLE_PIC off for now.\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# On Windows all code is PIC. MinGW warns if -fPIC is used.\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# MinGW warns if -fvisibility-inlines-hidden is used.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# FIXME: CMAKE_SIZEOF_VOID_P is still 8\n",
        "Line" : 242,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# If building on a GNU specific 32-bit system, make sure off_t is 64 bits\n\n# so that off_t can stored offset > 2GB.\n\n# Android until version N (API 24) doesn't support it.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# FIXME: It isn't handled in LLVM_BUILD_32_BITS.\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# For Xcode enable several build settings that correspond to\n\n# many warnings that are on by default in Clang but are\n\n# not enabled for historical reasons.  For versions of Xcode\n\n# that do not support these options they will simply\n\n# be ignored.\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# On Win32 using MS tools, provide an option to set the number of parallel jobs\n\n# to use.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set stack reserved size to ~10MB\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# CMake previously automatically set this value for MSVC builds, but the\n\n# behavior was changed in CMake 2.8.11 (Issue 12437) to use the MSVC default\n\n# value (1 MB) which is not enough for us in tasks such as parsing recursive\n\n# C++ templates in Clang.\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# FIXME: Also cygwin?\n",
        "Line" : 307,
        "CharPositionInLine" : 14
      },
      "24" : {
        "Text" : "# Pass -mbig-obj to mingw gas on Win64. COFF has a 2**16 section limit, and\n\n# on Win64, every COMDAT function creates at least 3 sections: .text, .pdata,\n\n# and .xdata.\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For MSVC 2013, disable iterator null pointer checking in debug mode,\n\n# especially so std::equal(nullptr, nullptr, nullptr) will not assert.\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Add definitions that make MSVC much less annoying.\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# For some reason MS wants to deprecate a bunch of standard functions...\n",
        "Line" : 333,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Tell MSVC to use the Unicode version of the Win32 APIs instead of ANSI.\n",
        "Line" : 342,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Allow users to request PDBs in release mode. CMake offeres the\n\n# RelWithDebInfo configuration, but it uses different optimization settings\n\n# (/Ob1 vs /Ob2 or -O2 vs -O3). LLVM provides this flag so that users can get\n\n# PDBs without changing codegen.\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# /DEBUG disables linker GC and ICF, but we want those in Release mode.\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# /Zc:strictStrings is incompatible with VS12's (Visual Studio 2013's)\n\n# debug mode headers. Instead of only enabling them in VS2013's debug mode,\n\n# we'll just enable them for Visual Studio 2015 (VS 14, MSVC_VERSION 1900)\n\n# and up.\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Disable string literal const->non-const type conversion.\n\n# \"When specified, the compiler requires strict const-qualification\n\n# conformance for pointers initialized by using string literals.\"\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# \"Generate Intrinsic Functions\".\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# \"Enforce type conversion rules\".\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# clang-cl and cl by default produce non-deterministic binaries because\n\n# link.exe /incremental requires a timestamp in the .obj file.  clang-cl\n\n# has the flag /Brepro to force deterministic binaries. We want to pass that\n\n# whenever you're building with clang unless you're passing /incremental\n\n# or using LTO (/Brepro with LTO would result in a warning about the flag\n\n# being unused, because we're not generating object files).\n\n# This checks CMAKE_CXX_COMPILER_ID in addition to check_cxx_compiler_flag()\n\n# because cl.exe does not emit an error on flags it doesn't understand,\n\n# letting check_cxx_compiler_flag() claim it understands all flags.\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Check if /INCREMENTAL is passed to the linker and complain that it\n\n# won't work with /Brepro.\n",
        "Line" : 396,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# MinGW and Cygwin are a bit stricter and lack things like\n\n# 'strdup', 'stricmp', etc in c++11 mode.\n",
        "Line" : 428,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# On Darwin -fmodules does not imply -fcxx-modules.\n",
        "Line" : 442,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Check that we can build code with modules enabled, and that repeatedly\n\n# including <cassert> still manages to respect NDEBUG properly.\n",
        "Line" : 455,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Disabled warnings.\n",
        "Line" : 475,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# Suppress ''modifier' : used more than once' (because of __forceinline combined with inline)\n\n# Suppress 'unary minus operator applied to unsigned type, result still unsigned'\n\n# Suppress 'qualifier applied to function type has no meaning; ignored'\n\n# Suppress ''argument' : conversion from 'type1' to 'type2', possible loss of data'\n\n# Suppress ''var' : definition from the for loop is ignored; the definition from the enclosing scope is used'\n\n# Suppress ''var' : conversion from 'size_t' to 'type', possible loss of data'\n\n# Suppress ''declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception'\n\n# Suppress 'behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized'\n\n# Suppress 'new behavior: elements of array 'array' will be default initialized'\n\n# Suppress ''this' : used in base member initializer list'\n\n# Suppress 'declaration of 'var' hides local variable'\n\n# Suppress 'declaration of 'var' hides function parameter'\n\n# Suppress 'declaration of 'var' hides class member'\n\n# Suppress 'declaration of 'var' hides global declaration'\n\n# Suppress ''identifier' : decorated name length exceeded, name was truncated'\n\n# Suppress ''derived class' : destructor could not be generated because a base class destructor is inaccessible'\n\n# Suppress 'function' : destructor never returns, potential memory leak\n\n# Suppress ''type' : forcing value to bool 'true' or 'false' (performance warning)'\n\n# Suppress 'unreferenced formal parameter'\n\n# Suppress 'conditional expression is constant'\n\n# Suppress 'assignment operator could not be generated'\n\n# Suppress 'unreferenced local function has been removed'\n\n# Suppress '<class> can never be instantiated'\n\n# Suppress 'default constructor could not be generated'\n\n# Suppress 'unreachable code'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'assignment within conditional expression'\n\n# Suppress 'cast truncates constant value'\n\n# Suppress 'potentially uninitialized local variable'\n\n# Suppress 'potentially uninitialized local pointer variable'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'interaction between '_setjmp' and C++ object destruction is non-portable'\n\n# Suppress 'unsafe mix of type <type> and type <type> in operation'\n\n# Suppress 'nonstandard extension used : non-constant aggregate initializer'\n\n# Suppress 'noexcept used with no exception handling mode specified; termination on exception is not guaranteed'\n\n# Suppress 'typedef: ignored on left of '' when no variable is declared'\n",
        "Line" : 476,
        "CharPositionInLine" : 14
      },
      "42" : {
        "Text" : "# C4592 is disabled because of false positives in Visual Studio 2015\n\n# Update 1. Re-evaluate the usefulness of this diagnostic with Update 2.\n",
        "Line" : 512,
        "CharPositionInLine" : 10
      },
      "43" : {
        "Text" : "# Suppress ''var': symbol will be dynamically initialized (implementation limitation)\n\n# Suppress ''operator' : zero extending 'type' to 'type' of greater size'\n",
        "Line" : 514,
        "CharPositionInLine" : 14
      },
      "44" : {
        "Text" : "# C4709 is disabled because of a bug with Visual Studio 2017 as of\n\n# v15.8.8. Re-evaluate the usefulness of this diagnostic when the bug\n\n# is fixed.\n",
        "Line" : 516,
        "CharPositionInLine" : 10
      },
      "45" : {
        "Text" : "# Suppress comma operator within array index expression\n",
        "Line" : 519,
        "CharPositionInLine" : 14
      },
      "46" : {
        "Text" : "# Ideally, we'd like this warning to be enabled, but MSVC 2013 doesn't\n\n# support the 'aligned' attribute in the way that clang sources requires (for\n\n# any code that uses the LLVM_ALIGNAS macro), so this is must be disabled to\n\n# avoid unwanted alignment warnings.\n\n# When we switch to requiring a version of MSVC that supports the 'alignas'\n\n# specifier (MSVC 2015?) this warning can be re-enabled.\n",
        "Line" : 521,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Suppress 'structure was padded due to __declspec(align())'\n",
        "Line" : 527,
        "CharPositionInLine" : 14
      },
      "48" : {
        "Text" : "# Promoted warnings.\n",
        "Line" : 529,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Promote 'enumerator in switch of enum is not handled' to level 1 warning.\n",
        "Line" : 530,
        "CharPositionInLine" : 14
      },
      "50" : {
        "Text" : "# Promoted warnings to errors.\n",
        "Line" : 532,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# Promote 'nonstandard extension used : class rvalue used as lvalue' to error.\n",
        "Line" : 533,
        "CharPositionInLine" : 14
      },
      "52" : {
        "Text" : "# Enable warnings\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Put /W4 in front of all the -we flags. cl.exe doesn't care, but for\n\n# clang-cl having /W4 after the -we flags will re-enable the warnings\n\n# disabled by -we.\n",
        "Line" : 539,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# CMake appends /W3 by default, and having /W3 followed by /W4 will result in\n\n# cl : Command line warning D9025 : overriding '/W3' with '/W4'.  Since this is\n\n# a command line warning and not a compiler warning, it cannot be suppressed except\n\n# by fixing the command line.\n",
        "Line" : 543,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# No MSVC equivalent available\n",
        "Line" : 551,
        "CharPositionInLine" : 6
      },
      "56" : {
        "Text" : "# Don't add -Wall for clang-cl, because it maps -Wall to -Weverything for\n\n# MSVC compatibility.  /W4 is added above instead.\n",
        "Line" : 562,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Turn off missing field initializer warnings for gcc to avoid noise from\n\n# false positives with empty {}. Turn them on otherwise (they're off by\n\n# default for clang).\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Disable -Wclass-memaccess, a C++-only warning from GCC 8 that fires on\n\n# LLVM's ADT classes.\n",
        "Line" : 593,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# The LLVM libraries have no stable C++ API, so -Wnoexcept-type is not useful.\n",
        "Line" : 598,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Check if -Wnon-virtual-dtor warns even though the class is marked final.\n\n# If it does, don't add it. So it won't be added on clang 3.4 and older.\n\n# This also catches cases when -Wnon-virtual-dtor isn't supported by\n\n# the compiler at all.  This flag is not activated for gcc since it will\n\n# incorrectly identify a protected non-virtual base when there is a friend\n\n# declaration. Don't activate this in general on Windows as this warning has\n\n# too many false positives on COM-style classes, which are destroyed with\n\n# Release() (PR32286).\n",
        "Line" : 602,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Enable -Wdelete-non-virtual-dtor if available.\n",
        "Line" : 622,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Check if -Wcomment is OK with an // comment ending with '\\' if the next\n\n# line is also a // comment.\n",
        "Line" : 625,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Enable -Wstring-conversion to catch misuse of string literals.\n",
        "Line" : 636,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Append -fno-omit-frame-pointer and turn on debug info to get better\n\n# stack traces.\n",
        "Line" : 646,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Use -O1 even in debug mode, otherwise sanitizers slowdown is too large.\n",
        "Line" : 653,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Keep frame pointers around.\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Use DWARF debug info with LLD.\n",
        "Line" : 661,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# Enable codeview otherwise.\n",
        "Line" : 664,
        "CharPositionInLine" : 6
      },
      "69" : {
        "Text" : "# Always ask the linker to produce symbols with asan.\n",
        "Line" : 667,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Turn on sanitizers if necessary.\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Turn on -gsplit-dwarf if requested\n",
        "Line" : 728,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# clang and gcc don't default-print colored diagnostics when invoked from Ninja.\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# lld doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Add flags for add_dead_strip().\n\n# FIXME: With MSVS, consider compiling with /Gy and linking with /OPT:REF?\n\n# But MinSizeRel seems to add that automatically, so maybe disable these\n\n# flags instead if LLVM_NO_DEAD_STRIP is set.\n",
        "Line" : 754,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Don't add -ffunction-section if it can be disabled with -fno-function-sections.\n\n# Doing so will break sanitizers.\n",
        "Line" : 763,
        "CharPositionInLine" : 6
      },
      "76" : {
        "Text" : "# Remove flags here, for exceptions and RTTI.\n\n# Each target property or source property should be responsible to control\n\n# them.\n\n# CL.EXE complains to override flags like \"/GR /GR-\".\n",
        "Line" : 772,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Provide public options to globally control RTTI and EH\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# If the linker supports it, enable the lto cache. This improves initial build\n\n# time a little since we re-link a lot of the same objects, and significantly\n\n# improves incremental build time.\n\n# FIXME: We should move all this logic into the clang driver.\n",
        "Line" : 830,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# This option makes utils/extract_symbols.py be used to determine the list of\n\n# symbols to export from LLVM tools. This is necessary when using MSVC if you\n\n# want to allow plugins, though note that the plugin has to explicitly link\n\n# against (exactly one) tool so we can't unilaterally turn on\n\n# LLVM_ENABLE_PLUGINS when it's enabled.\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Plugin support\n\n# FIXME: Make this configurable.\n",
        "Line" : 869,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# By default we should enable LLVM_ENABLE_IDE only for multi-configuration\n\n# generators. This option disables optional build system features that make IDEs\n\n# less usable.\n",
        "Line" : 881,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 82
    },
    "cmake/modules/HandleLLVMStdlib.cmake" : {
      "ObjectId" : "a0706d8e0846a52c310d5f8d80b902f467651101",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for setting the standard library to libc++\n\n# if the user has requested it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/LLVM-Config.cmake" : {
      "ObjectId" : "474a874a4426ec873351595752618499f5c88f38",
      "LastModified" : "2018-09-26T10:14:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# is_llvm_target_library(\n\n#   library\n\n#     Name of the LLVM library to check\n\n#   return_var\n\n#     Output variable name\n\n#   ALL_TARGETS;INCLUDED_TARGETS;OMITTED_TARGETS\n\n#     ALL_TARGETS - default looks at the full list of known targets\n\n#     INCLUDED_TARGETS - looks only at targets being configured\n\n#     OMITTED_TARGETS - looks only at targets that are not being configured\n\n# )\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets variable `return_var' to ON if `library' corresponds to a\n\n# LLVM supported target. To OFF if it doesn't.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If USE_SHARED is specified, then we link against libLLVM,\n\n# but also against the component libraries below. This is\n\n# done in case libLLVM does not contain all of the components\n\n# the target requires.\n\n#\n\n# Strip LLVM_DYLIB_COMPONENTS out of link_components.\n\n# To do this, we need special handling for \"all\", since that\n\n# may imply linking to libraries that are not included in\n\n# libLLVM.\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use plain form for legacy user.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This is Deprecated\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a variant intended for the final user:\n\n# Map LINK_COMPONENTS to actual libnames.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Inside LLVM itself available libs are in a global property.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Generally in our build system we avoid order-dependence. Unfortunately since\n\n# not all targets create the same set of libraries we actually need to ensure\n\n# that all build targets associated with a target are added before we can\n\n# process target dependencies.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Expand some keywords:\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Translate symbolic component names to real libraries:\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# add codegen, asmprinter, asmparser, disassembler\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# already processed\n",
        "Line" : 197,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# same case as in `native'.\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# already processed\n",
        "Line" : 209,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Link all the asm printers from all the targets\n",
        "Line" : 213,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Link all the asm parsers from all the targets\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Link all the descs from all the targets\n",
        "Line" : 227,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Link all the disassemblers from all the targets\n",
        "Line" : 234,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Link all the infos from all the targets\n",
        "Line" : 241,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Canonize the component name:\n",
        "Line" : 248,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# The component is unknown. Maybe is an omitted target?\n",
        "Line" : 252,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# A missing library to a directly referenced omitted target would be bad.\n",
        "Line" : 255,
        "CharPositionInLine" : 10
      },
      "22" : {
        "Text" : "# If it is not an omitted target we should assume it is a component\n\n# that hasn't yet been processed by CMake. Missing components will\n\n# cause errors later in the configuration, so we can safely assume\n\n# that this is valid here.\n",
        "Line" : 258,
        "CharPositionInLine" : 10
      },
      "23" : {
        "Text" : "# Perform a post-order traversal of the dependency graph.\n\n# This duplicates the algorithm used by llvm-config, originally\n\n# in tools/llvm-config/llvm-config.cpp, function ComputeLibsForComponents.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Expand dependencies while topologically sorting the list of libraries:\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Return just the libraries included in this build:\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "cmake/modules/LLVMExternalProjectUtils.cmake" : {
      "ObjectId" : "4d26a30f97becc8c58ce80d5b2374f10b4bbcc40",
      "LastModified" : "2018-11-16T04:46:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# llvm_ExternalProject_BuildCmd(out_var target)\n\n#   Utility function for constructing command lines for external project targets\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use special command for Makefiles to support parallelism.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# llvm_ExternalProject_Add(name source_dir ...\n\n#   USE_TOOLCHAIN\n\n#     Use just-built tools (see TOOLCHAIN_TOOLS)\n\n#   EXCLUDE_FROM_ALL\n\n#     Exclude this project from the all target\n\n#   NO_INSTALL\n\n#     Don't generate install targets for this project\n\n#   ALWAYS_CLEAN\n\n#     Always clean the sub-project before building\n\n#   CMAKE_ARGS arguments...\n\n#     Optional cmake arguments to pass when configuring the project\n\n#   TOOLCHAIN_TOOLS targets...\n\n#     Targets for toolchain tools (defaults to clang;lld)\n\n#   DEPENDS targets...\n\n#     Targets that this project depends on\n\n#   EXTRA_TARGETS targets...\n\n#     Extra targets in the subproject to generate targets for\n\n#   PASSTHROUGH_PREFIXES prefix...\n\n#     Extra variable prefixes (name is always included) to pass down\n\n#   )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all variables that start with a prefix and propagate them through\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add top-level targets\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/modules/LLVMInstallSymlink.cmake" : {
      "ObjectId" : "1a04de931ff7e04f0aae00cfa952d739c09b4467",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to execute this script at installation time because the\n\n# DESTDIR environment variable may be unset at configuration time.\n\n# See PR8397.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/LLVMProcessSources.cmake" : {
      "ObjectId" : "7cbd2863500cf1ef606db7b16c474580f51d3147",
      "LastModified" : "2018-11-16T04:46:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Replaces a compiler option or switch `old' in `var' by `new'.\n\n# If `old' is not in `var', appends `new' to `var'.\n\n# Example: llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-O2\")\n\n# If the option already is on the variable, don't add it:\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This adds .td and .h files to the Visual Studio solution:\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Don't reject hidden files. Some editors create backups in the\n\n# same directory as the file.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/TableGen.cmake" : {
      "ObjectId" : "3c84ae78a3497449946d0dd55825248b97b5e818",
      "LastModified" : "2018-12-20T18:39:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_TARGET_DEFINITIONS must contain the name of the .td file to process.\n\n# Extra parameters for `tblgen' may come after `ofn' parameter.\n\n# Adds the name of the generated file to TABLEGEN_OUTPUT.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Validate calling context.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use depfile instead of globbing arbitrary *.td(s)\n\n# DEPFILE is available for Ninja Generator with CMake>=3.7.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make output path relative to build.ninja, assuming located on\n\n# ${CMAKE_BINARY_DIR}.\n\n# CMake emits build targets as relative paths but Ninja doesn't identify\n\n# absolute path (in *.d) as relative path (in build.ninja)\n\n# Note that tblgen is executed on ${CMAKE_BINARY_DIR} as working directory.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# We need both _TABLEGEN_TARGET and _TABLEGEN_EXE in the  DEPENDS list\n\n# (both the target and the file) to have .inc files rebuilt on\n\n# a tablegen change, as cmake does not propagate file-level dependencies\n\n# of custom targets. See the following ticket for more information:\n\n# https://cmake.org/Bug/view.php?id=15858\n\n# The dependency on both, the target and the file, produces the same\n\n# dependency twice in the result file when\n\n# (\"${${project}_TABLEGEN_TARGET}\" STREQUAL \"${${project}_TABLEGEN_EXE}\")\n\n# but lets us having smaller and cleaner code here.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The file in LLVM_TARGET_DEFINITIONS may be not in the current\n\n# directory and local_tds may not contain it, so we must\n\n# explicitly list it here:\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# `make clean' must remove all those generated files:\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Creates a target for publicly exporting tablegen dependencies.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CMake-3.9 doesn't let compilation units depend on their dependent libraries.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# FIXME: It leaks to user, callee of add_tablegen.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Upgrade existing LLVM_TABLEGEN setting.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Effective tblgen executable to be used:\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Create an artificial dependency between tablegen projects, because they\n\n# compile the same dependencies, thus using the same build folders.\n\n# FIXME: A proper fix requires sequentially chaining tablegens.\n",
        "Line" : 149,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 13
    },
    "cmake/modules/VersionFromVCS.cmake" : {
      "ObjectId" : "552fe77cdfb6890d43b34ff0fc478e29577951b7",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds version control information to the variable VERS. For\n\n# determining the Version Control System used (if any) it inspects the\n\n# existence of certain subdirectories under SOURCE_DIR (if provided as an\n\n# extra argument, otherwise uses CMAKE_CURRENT_SOURCE_DIR).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Run from a subdirectory to force git to print an absoute path.\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Try to get a ref-id\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Get the repository URL\n",
        "Line" : 43,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Get the svn revision number for this git commit if one exists.\n",
        "Line" : 58,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# Get the git ref id\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/platforms/Android.cmake" : {
      "ObjectId" : "2a6f5a5e45b78d753e7f90e2198381ce544153db",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for Android NDK.\n\n# This is expected to be used with a standalone Android toolchain (see\n\n# docs/STANDALONE-TOOLCHAIN.html in the NDK on how to get one).\n\n#\n\n# Usage:\n\n# mkdir build; cd build\n\n# cmake ..; make\n\n# mkdir android; cd android\n\n# cmake -DLLVM_ANDROID_TOOLCHAIN_DIR=/path/to/android/ndk \\\n\n#   -DCMAKE_TOOLCHAIN_FILE=../../cmake/platforms/Android.cmake ../..\n\n# make <target>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/platforms/ClangClCMakeCompileRules.cmake" : {
      "ObjectId" : "a3bcf1c24a9186516616909996535d47abc91129",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# macOS paths usually start with /Users/*. Unfortunately, clang-cl interprets\n\n# paths starting with /U as macro undefines, so we need to put a -- before the\n\n# input file path to force it to be treated as a path. CMake's compilation rules\n\n# should be tweaked accordingly, but until that's done, and to support older\n\n# CMake versions, overriding compilation rules works well enough. This file will\n\n# be included by cmake after the default compilation rules have already been set\n\n# up, so we can just modify them instead of duplicating them entirely.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/platforms/WinMsvc.cmake" : {
      "ObjectId" : "f625d0e3c052412734b4f56af6722bada1ef4df3",
      "LastModified" : "2018-11-16T04:46:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cross toolchain configuration for using clang-cl on non-Windows hosts to\n\n# target MSVC.\n\n#\n\n# Usage:\n\n# cmake -G Ninja\n\n#    -DCMAKE_TOOLCHAIN_FILE=/path/to/this/file\n\n#    -DHOST_ARCH=[aarch64|arm64|armv7|arm|i686|x86|x86_64|x64]\n\n#    -DLLVM_NATIVE_TOOLCHAIN=/path/to/llvm/installation\n\n#    -DMSVC_BASE=/path/to/MSVC/system/libraries/and/includes\n\n#    -DWINSDK_BASE=/path/to/windows-sdk\n\n#    -DWINSDK_VER=windows sdk version folder name\n\n#\n\n# HOST_ARCH:\n\n#    The architecture to build for.\n\n#\n\n# LLVM_NATIVE_TOOLCHAIN:\n\n#   *Absolute path* to a folder containing the toolchain which will be used to\n\n#   build.  At a minimum, this folder should have a bin directory with a\n\n#   copy of clang-cl, clang, clang++, and lld-link, as well as a lib directory\n\n#   containing clang's system resource directory.\n\n#\n\n# MSVC_BASE:\n\n#   *Absolute path* to the folder containing MSVC headers and system libraries.\n\n#   The layout of the folder matches that which is intalled by MSVC 2017 on\n\n#   Windows, and should look like this:\n\n#\n\n# ${MSVC_BASE}\n\n#   include\n\n#     vector\n\n#     stdint.h\n\n#     etc...\n\n#   lib\n\n#     x64\n\n#       libcmt.lib\n\n#       msvcrt.lib\n\n#       etc...\n\n#     x86\n\n#       libcmt.lib\n\n#       msvcrt.lib\n\n#       etc...\n\n#\n\n# For versions of MSVC < 2017, or where you have a hermetic toolchain in a\n\n# custom format, you must use symlinks or restructure it to look like the above.\n\n#\n\n# WINSDK_BASE:\n\n#   Together with WINSDK_VER, determines the location of Windows SDK headers\n\n#   and libraries.\n\n#\n\n# WINSDK_VER:\n\n#   Together with WINSDK_BASE, determines the locations of Windows SDK headers\n\n#   and libraries.\n\n#\n\n# WINSDK_BASE and WINSDK_VER work together to define a folder layout that matches\n\n# that of the Windows SDK installation on a standard Windows machine.  It should\n\n# match the layout described below.\n\n#\n\n# Note that if you install Windows SDK to a windows machine and simply copy the\n\n# files, it will already be in the correct layout.\n\n#\n\n# ${WINSDK_BASE}\n\n#   Include\n\n#     ${WINSDK_VER}\n\n#       shared\n\n#       ucrt\n\n#       um\n\n#         windows.h\n\n#         etc...\n\n#   Lib\n\n#     ${WINSDK_VER}\n\n#       ucrt\n\n#         x64\n\n#         x86\n\n#           ucrt.lib\n\n#           etc...\n\n#       um\n\n#         x64\n\n#         x86\n\n#           kernel32.lib\n\n#           etc\n\n#\n\n# IMPORTANT: In order for this to work, you will need a valid copy of the Windows\n\n# SDK and C++ STL headers and libraries on your host.  Additionally, since the\n\n# Windows libraries and headers are not case-correct, this toolchain file sets\n\n# up a VFS overlay for the SDK headers and case-correcting symlinks for the\n\n# libraries when running on a case-sensitive filesystem.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When configuring CMake with a toolchain file against a top-level CMakeLists.txt,\n\n# it will actually run CMake many times, once for each small test program used to\n\n# determine what features a compiler supports.  Unfortunately, none of these\n\n# invocations share a CMakeCache.txt with the top-level invocation, meaning they\n\n# won't see the value of any arguments the user passed via -D.  Since these are\n\n# necessary to properly configure MSVC in both the top-level configuration as well as\n\n# all feature-test invocations, we set environment variables with the values so that\n\n# these environments get inherited by child invocations.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do some sanity checking to make sure we can find a native toolchain and\n\n# that the Windows SDK / MSVC STL directories look kosher.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Even though we're cross-compiling, we need some native tools (e.g. llvm-tblgen), and those\n\n# native tools have to be built before we can start doing the cross-build.  LLVM supports\n\n# a CROSS_TOOLCHAIN_FLAGS_NATIVE argument which consists of a list of flags to pass to CMake\n\n# when configuring the NATIVE portion of the cross-build.  By default we construct this so\n\n# that it points to the tools in the same location as the native clang-cl that we're using.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ensure all sub-configures use the top-level VFS overlay instead of generating their own.\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We need to preserve any flags that were passed in by the user. However, we\n\n# can't append to CMAKE_C_FLAGS and friends directly, because toolchain files\n\n# will be re-invoked on each reconfigure and therefore need to be idempotent.\n\n# The assignments to the _INITIAL cache variables don't use FORCE, so they'll\n\n# only be populated on the initial configure, and their values won't change\n\n# afterward.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Prevent CMake from attempting to invoke mt.exe. It only recognizes the slashed form and not the dashed form.\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Ensure all sub-configures use the top-level symlinks dir instead of generating their own.\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# See explanation for compiler flags above for the _INITIAL variables.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMake populates these with a bunch of unnecessary libraries, which requires\n\n# extra case-correcting symlinks and what not. Instead, let projects explicitly\n\n# control which libraries they require.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Allow clang-cl to work with macOS paths.\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/platforms/iOS.cmake" : {
      "ObjectId" : "69f8479721dfbabcc6c861c37ff45dab64c72c7f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for iOS.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "0f2681e0cd86bc89ad9db30a53764257089d1fef",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ./ suffix is needed to copy the contents of html directory without\n\n# appending html/ into LLVM_INSTALL_DOXYGEN_HTML_DIR.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ./ suffix is needed to copy the contents of html directory without\n\n# appending html/ into LLVM_INSTALL_OCAMLDOC_HTML_DIR.\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "examples/BrainF/CMakeLists.txt" : {
      "ObjectId" : "7b44b3a62756a4cc7be46c28828b343be564ed38",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5727066d6227b37e3615a9bc057a9cbf703322ca",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/ExceptionDemo/CMakeLists.txt" : {
      "ObjectId" : "793cf291ca6f110eae23c396e24c2ee3cd050bcd",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable EH and RTTI for this demo\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/Fibonacci/CMakeLists.txt" : {
      "ObjectId" : "e294a2523759a9a08ad2171e9ec3c20aa876a42f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/HowToUseJIT/CMakeLists.txt" : {
      "ObjectId" : "e86626d5cec646196a6071c82cc90c0ed7a86dcd",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/CMakeLists.txt" : {
      "ObjectId" : "947b5a3a3271ef394e0e12a8ee3cf20f755feecd",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/Chapter1/CMakeLists.txt" : {
      "ObjectId" : "72c9668f7d3af018e994f374041fd28892e4bbff",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/Chapter2/CMakeLists.txt" : {
      "ObjectId" : "ba6abd72d428274806ac4aedf09a223a6d10a047",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/Chapter3/CMakeLists.txt" : {
      "ObjectId" : "51800a64b1e30c967d54880f1c117b60827188d9",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/Chapter4/CMakeLists.txt" : {
      "ObjectId" : "7cd40a1da60dc2c1af054fa94063c31641cd3a47",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/Chapter5/CMakeLists.txt" : {
      "ObjectId" : "d5b832b495504f785a481a0fcbf1686488c57a5f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/CMakeLists.txt" : {
      "ObjectId" : "ef0240c0ca771138d8e4671cbc362fbe97df02b1",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/CMakeLists.txt" : {
      "ObjectId" : "3822cdd9e1c49faf47e01cc766f9d2b847ccaf0d",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter2/CMakeLists.txt" : {
      "ObjectId" : "e4f275d01d4059cc104a938214c32b672fcd4c2a",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter3/CMakeLists.txt" : {
      "ObjectId" : "8053c968f3dd978fc42b934d1e2bf885fd55cd6e",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter4/CMakeLists.txt" : {
      "ObjectId" : "fdc083e076819ff82661dfd33dd71cb4bd603e0a",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter5/CMakeLists.txt" : {
      "ObjectId" : "757d901ef525cba47edb36c25c6e0773c26c11e8",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter6/CMakeLists.txt" : {
      "ObjectId" : "ad50928a346cc8655480151b2fdd10cacb7f4799",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter7/CMakeLists.txt" : {
      "ObjectId" : "03220358ab715cbed13650630f53fbcb3dd2e5e1",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter8/CMakeLists.txt" : {
      "ObjectId" : "1bb1cd25af72d836db0f8670d13fcda00b059af1",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Kaleidoscope/Chapter9/CMakeLists.txt" : {
      "ObjectId" : "565a7ffd32eb908ca0728aeb91944b7466708911",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/ModuleMaker/CMakeLists.txt" : {
      "ObjectId" : "a73909a13bd48eadeaa9382dddc9c0c3b41002f2",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/ParallelJIT/CMakeLists.txt" : {
      "ObjectId" : "c42dfc85c14a035446e839076b5cd58e45290e99",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/llvm/CMakeLists.txt" : {
      "ObjectId" : "1d5ca3ba92b0e153b3424d83316cee9534522a4f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we're doing an out-of-tree build, copy a module map for generated\n\n# header files into the build area.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/llvm/Config/abi-breaking.h.cmake" : {
      "ObjectId" : "7ae401e5b8a8c7df2826869e3569d6a4cb517642",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/abi-breaking.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file controls the C++ ABI break introduced in LLVM public header. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to enable checks that alter the LLVM C++ ABI */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to enable reverse iteration of unordered llvm containers */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Allow selectively disabling link-time mismatch checking so that header-only\n   ADT content from LLVM can be used without linking libSupport. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "// ABI_BREAKING_CHECKS protection: provides link-time failure when clients build\n// mismatch with LLVM",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "// Use pragma with MSVC",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "// FIXME: Implement checks without weak.",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "include/llvm/Config/config.h.cmake" : {
      "ObjectId" : "03bbd74d6d325e1b42b095801eb9e2e3e7521c68",
      "LastModified" : "2018-11-26T00:03:39Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Exported configuration */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 to enable backtraces, and to 0 otherwise. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 to enable crash overrides, and to 0 otherwise. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 to enable crash memory dumps, and to 0 otherwise. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the `backtrace' function. */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if you have the <CrashReporterClient.h> header file. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* can use __crashreporter_info__ */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the declaration of `arc4random', and to 0 if you\n   don't. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_ALL_EXCEPT', and to 0 if you\n   don't. */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_INEXACT', and to 0 if you\n   don't. */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you\n   don't. */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the DIA SDK installed, and to 0 if you don't. */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if dlopen() is available on this platform. */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if dladdr() is available on this platform. */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the <errno.h> header file. */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have the <fcntl.h> header file. */",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to 1 if you have the <fenv.h> header file. */",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define if libffi is available on this platform. */",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to 1 if you have the <ffi/ffi.h> header file. */",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to 1 if you have the <ffi.h> header file. */",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the `futimens' function. */",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to 1 if you have the `futimes' function. */",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to 1 if you have the `getpagesize' function. */",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the `getrlimit' function. */",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to 1 if you have the `getrusage' function. */",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define to 1 if you have the `isatty' function. */",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to 1 if you have the `edit' library (-ledit). */",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to 1 if you have the `pfm' library (-lpfm). */",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have the `psapi' library (-lpsapi). */",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define to 1 if you have the `pthread' library (-lpthread). */",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have the `pthread_getname_np' function. */",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the `pthread_setname_np' function. */",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Define to 1 if you have the `z' library (-lz). */",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Define to 1 if you have the <link.h> header file. */",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to 1 if you have the `lseek64' function. */",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to 1 if you have the <mach/mach.h> header file. */",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to 1 if you have the `mallctl' function. */",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to 1 if you have the `mallinfo' function. */",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define to 1 if you have the <malloc.h> header file. */",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to 1 if you have the <malloc/malloc.h> header file. */",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Define to 1 if you have the `malloc_zone_statistics' function. */",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Define to 1 if you have the `posix_fallocate' function. */",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Define to 1 if you have the `posix_spawn' function. */",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if you have the `pread' function. */",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Have pthread_getspecific */",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to 1 if you have the <pthread.h> header file. */",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Have pthread_mutex_lock */",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Have pthread_rwlock_init */",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define to 1 if you have the `realpath' function. */",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define to 1 if you have the `sbrk' function. */",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Define to 1 if you have the `setenv' function. */",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to 1 if you have the `sched_getaffinity' function. */",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Define to 1 if you have the `CPU_COUNT' macro. */",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Define to 1 if you have the `setrlimit' function. */",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Define to 1 if you have the `sigaltstack' function. */",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Define to 1 if you have the <signal.h> header file. */",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to 1 if you have the `strerror' function. */",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to 1 if you have the `strerror_r' function. */",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if you have the `sysconf' function. */",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to 1 if you have the <sys/ioctl.h> header file. */",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if you have the <sys/mman.h> header file. */",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Define to 1 if you have the <sys/param.h> header file. */",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Define to 1 if you have the <sys/resource.h> header file. */",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Define to 1 if you have the <sys/time.h> header file. */",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Define to 1 if stat struct has st_mtimespec member .*/",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Define to 1 if stat struct has st_mtim member. */",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "/* Define if the setupterm() function is supported this platform. */",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "/* Define if the xar_open() function is supported this platform. */",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "/* Define to 1 if you have the <termios.h> header file. */",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "/* Define to 1 if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "/* Define to 1 if you have the <zlib.h> header file. */",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "/* Have host's _alloca */",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* Define to 1 if you have the `_chsize_s' function. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* Define to 1 if you have the `_Unwind_Backtrace' function. */",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "/* Have host's __alloca */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Have host's __ashldi3 */",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Have host's __ashrdi3 */",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "/* Have host's __chkstk */",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "/* Have host's __chkstk_ms */",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "/* Have host's __cmpdi2 */",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "/* Have host's __divdi3 */",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "/* Have host's __fixdfdi */",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "/* Have host's __fixsfdi */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "/* Have host's __floatdidf */",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "/* Have host's __lshrdi3 */",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "/* Have host's __main */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "/* Have host's __moddi3 */",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* Have host's __udivdi3 */",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Have host's __umoddi3 */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "/* Have host's ___chkstk */",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "/* Have host's ___chkstk_ms */",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "/* Target triple LLVM will generate code for by default */\n/* Doesn't use `cmakedefine` because it is allowed to be empty. */",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "/* Define if zlib compression is available */",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "/* Define if overriding target triple is enabled */",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "/* LLVM version information */",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "/* Whether tools show host and target info when invoked with --version */",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "/* Define if libxml2 is supported on this platform. */",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* Define to the extension used for shared libraries, say, \".so\". */",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* Define to the vendor of this package. */",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "/* Define as the return type of signal handlers (`int' or `void'). */",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "/* Define to a function implementing stricmp */",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "/* Define to a function implementing strdup */",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "/* Whether GlobalISel rule coverage is being collected */",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "/* Define to the default GlobalISel coverage file prefix */",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 114
    },
    "include/llvm/Config/llvm-config.h.cmake" : {
      "ObjectId" : "872a31553d11a772756a08a2c7dd5bb5818bdc58",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/llvm-config.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file enumerates variables from the LLVM configuration so that they\n   can be in exported headers and won't override package specific directives.\n   This is a C header that can be included in the llvm-c headers. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define if LLVM_ENABLE_DUMP is enabled */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Target triple LLVM will generate code for by default */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* LLVM architecture name for the native architecture, if available */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* LLVM name for the native AsmParser init function, if available */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* LLVM name for the native AsmPrinter init function, if available */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* LLVM name for the native Disassembler init function, if available */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* LLVM name for the native Target init function, if available */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* LLVM name for the native TargetInfo init function, if available */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* LLVM name for the native target MC init function, if available */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define if we have the perf JIT-support library */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* LLVM version string */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Whether LLVM records statistics for use with GetStatistics(),\n * PrintStatistics() or PrintStatisticsJSON()\n */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "include/llvm/IR/CMakeLists.txt" : {
      "ObjectId" : "830f3750c185847e8248bcb2983caf01b550452c",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/llvm/Support/CMakeLists.txt" : {
      "ObjectId" : "bba962a5de10643cdff3d3b4ea11449f71a41b87",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The VC revision include that we want to generate.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove ${version_inc} if it doesn't define a revision. This will force it\n\n# to be regenerated when toggling LLVM_APPEND_VC_REV from OFF to ON.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Create custom target to generate the VC revision include.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure ${version_inc} doesn't define a revision\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Mark the generated header as being generated.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "c57d8ef69d69b7d45a931af2176d6c4a08de0c04",
      "LastModified" : "2018-11-26T21:57:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "0d72723210591fbac9fcc52a92446095a2c498dc",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AsmParser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/BinaryFormat/CMakeLists.txt" : {
      "ObjectId" : "d645279d0ac59e547acd7ea5f9a82be0502f997b",
      "LastModified" : "2018-12-12T19:39:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "ff7e290cad1bbdc568b68286489c747d8f245de7",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Bitcode/Reader/CMakeLists.txt" : {
      "ObjectId" : "c24216ffa7086445a5482d928c74e9b160c97038",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Bitcode/Writer/CMakeLists.txt" : {
      "ObjectId" : "82dc6b24137de2d9c76a08fd805ea2154285caf7",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "f25c7a098558574e40d97f8e55102df491b3865d",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# `Demangle', `Support' and `TableGen' libraries are added on the top-level\n\n# CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/CodeGen/AsmPrinter/CMakeLists.txt" : {
      "ObjectId" : "3fb088ab6f0dd8f40e8dbf0fd90122a028cb573e",
      "LastModified" : "2018-11-26T00:03:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "e76f9f8ed4e7c90202ff9e6f7685a1fec364a13c",
      "LastModified" : "2018-12-12T19:39:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CodeGen/GlobalISel/CMakeLists.txt" : {
      "ObjectId" : "5f13692bbee1f454a7a442eecf377bb29826191f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CodeGen/MIRParser/CMakeLists.txt" : {
      "ObjectId" : "2eb5b844d0e11ee45521de9c84c4e6e7fd30376c",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CodeGen/SelectionDAG/CMakeLists.txt" : {
      "ObjectId" : "fd1e5e2cfc567eb77c96e2b1e750613990679c7c",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "e7be0a0617da6c30b26495d048c8b12864b889ec",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/CodeView/CMakeLists.txt" : {
      "ObjectId" : "1610ca469575307549c6dfb3fe1a415d2590a356",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "b4770e561f713efc504580d431e4ba2587b88e1c",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/MSF/CMakeLists.txt" : {
      "ObjectId" : "6f38de336ee02021f8fa881bde0a83ebca2e6b8d",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "d9d379f6d09129b1c3b6c297f6c8d563a08b15ff",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/Symbolize/CMakeLists.txt" : {
      "ObjectId" : "fe5c4bfc43217ed60d9e0b85394b6596cfce6d8d",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Demangle/CMakeLists.txt" : {
      "ObjectId" : "a681af979e45a07b087a7870e7915e2b6b6fdfa3",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/CMakeLists.txt" : {
      "ObjectId" : "c0dea0550fbf1f82eba3cd49cb2c8e49843f9861",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/IntelJITEvents/CMakeLists.txt" : {
      "ObjectId" : "e6c33b2ecc2a06b4d0ae0645cbae8c1ac42cc1d4",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/Interpreter/CMakeLists.txt" : {
      "ObjectId" : "7456b3dbe905ad82b33e6caae82bb3d9e4a9d27d",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that the path to libffi headers is on the command\n\n# line. That path can be a compiler's non-default path even when\n\n# FFI_INCLUDE_DIR was not used, because cmake has its own paths for\n\n# searching for headers (CMAKE_SYSTEM_INCLUDE_PATH, for instance):\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/ExecutionEngine/MCJIT/CMakeLists.txt" : {
      "ObjectId" : "b1e2bc3d635cf0bf5121f7b6671cd84434b79e8f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/OProfileJIT/CMakeLists.txt" : {
      "ObjectId" : "d585136eb0ace450d8c8d07f00cdcddc792b3c30",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/Orc/CMakeLists.txt" : {
      "ObjectId" : "9ca409f81cd312ef65c1b44dd92ef47c2e2852d7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/PerfJITEvents/CMakeLists.txt" : {
      "ObjectId" : "136cc429d02952f451f2a3ab742d6ccb5c02ebe5",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/RuntimeDyld/CMakeLists.txt" : {
      "ObjectId" : "3fa7ee6bb710d111493deb4d958a01f94fe47648",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/FuzzMutate/CMakeLists.txt" : {
      "ObjectId" : "1a1a9abb1c28fe3d287690c5b10bb6292e825786",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/IR/CMakeLists.txt" : {
      "ObjectId" : "2586f9872897002ce8d44025d05cae609f07c4c5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/IRReader/CMakeLists.txt" : {
      "ObjectId" : "87ea88039ef38047c26d9aef823450645125e51a",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/LTO/CMakeLists.txt" : {
      "ObjectId" : "1730df665d83b31a0e81edff4403d18a5eacfc2d",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/LineEditor/CMakeLists.txt" : {
      "ObjectId" : "0d2bada1e84f95b654838eca016982d7a179908f",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Linker/CMakeLists.txt" : {
      "ObjectId" : "8916fb3f725102e8a64704e312bba0ce245364d5",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MC/CMakeLists.txt" : {
      "ObjectId" : "ba36d99e8f7455a877ec44c076e8f9d2ab115f4c",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MC/MCDisassembler/CMakeLists.txt" : {
      "ObjectId" : "e940afc56f5b7fbce74447f5a695b3d1c777df42",
      "LastModified" : "2018-08-28T09:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MC/MCParser/CMakeLists.txt" : {
      "ObjectId" : "0c54e8e901931897ffe4e9fa118ef07a4a9d8701",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MCA/CMakeLists.txt" : {
      "ObjectId" : "bfd0782d1f7d5012b8f6798c8109eab278e38ba3",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Object/CMakeLists.txt" : {
      "ObjectId" : "fd5e7707c5411e83274456684dc0a515c9f4e002",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ObjectYAML/CMakeLists.txt" : {
      "ObjectId" : "d24f879836f9178032347bbe010f2af5f9aed508",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/OptRemarks/CMakeLists.txt" : {
      "ObjectId" : "8fefe1d986b5b2319865ad4e744f2aeabf1de421",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Option/CMakeLists.txt" : {
      "ObjectId" : "8eb086028da467e0d502b7d89f5260517f75c9a7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Passes/CMakeLists.txt" : {
      "ObjectId" : "d1b873c3fd7ac98ffd9d6f791f0ca34383cf788a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "3a981d8acf425c1dc921448855001a4469294e39",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ProfileData/Coverage/CMakeLists.txt" : {
      "ObjectId" : "035b8fdb8b3d69c1f3f7f4c4cfa77e813b1699a5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Support/CMakeLists.txt" : {
      "ObjectId" : "2a6810672b1da92a5146df21f5b761197ba1f29f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libuuid required for FOLDERID_Profile usage in lib/Support/Windows/Path.inc.\n\n# advapi32 required for CryptAcquireContextW in lib/Support/Windows/Path.inc.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# On BSDs, CMake returns a fully qualified path to the backtrace library.\n\n# We need to remove the path and the 'lib' prefix, to make it look like a\n\n# regular short library name, suitable for appending to a -l link flag.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Delay load shell32.dll if possible to speed up process startup.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# System\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "lib/TableGen/CMakeLists.txt" : {
      "ObjectId" : "e7bb0ada5fb1291147a2c3e66bcf5f87847e8602",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AArch64/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "cc0a9d86a14e45d35f3b265f0a2f0b593870291a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AArch64/CMakeLists.txt" : {
      "ObjectId" : "7778882d4915f3b338f6918e3e3ee97c9e8888ce",
      "LastModified" : "2018-12-18T08:50:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AArch64/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "d64c05b0adbcfc2e73be48dd5d6fb0a218689d03",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AArch64/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "363f50258d777ede9b5593a38e582658af761859",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AArch64/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "56eeba8a1d4b8483bc49023fd29cbd4e7b17e7b7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hack: we need to include 'main' target directory to grab private headers\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Target/AArch64/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "e236eed00be130ab99a322afdfbd5435cb631d48",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AArch64/Utils/CMakeLists.txt" : {
      "ObjectId" : "8ee03a7571b4c7f9c0b909ec69f7997c71d6b883",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "70be7bb6eb36a50404aa392ff6e616f7da95e515",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/CMakeLists.txt" : {
      "ObjectId" : "7d1219914823d558b2d4dd28ffcd74cc8fee1ec3",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "fb9231576919dc417a65b09563e0dac6f3b10500",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7191ff2c4577be4199aeea02aefec8dbf10491e5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "2d201bbbd7b8dec93cfcee59b43ae444e2e41c1e",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "961dc5509000980eb6dc26f2242bf7c8b6ef6e2a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AMDGPU/Utils/CMakeLists.txt" : {
      "ObjectId" : "01b80ebe8d3dc6bbdc622f58e99532bf4a9ad9d4",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARC/CMakeLists.txt" : {
      "ObjectId" : "5a7d9eee5ff4fc84dd87d25c9a295ecdcd5cf34a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARC/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "b692c4baf584992eaaa689e51077fcd3d1e04329",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARC/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "fd6b469cdfb7dc78d6577005012daa40b9888744",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARC/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "243198d253fe8281a475103a70b4ef79be37144a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARC/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "5f9b405481ff59ce9bfa33731e32692b9b913e7f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "66ed1df61a21f09d2ef88d4ed1ec2afc7f9e1e6f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/CMakeLists.txt" : {
      "ObjectId" : "d635c0add577abbec7970de8dba2d729dacc5506",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "2d9d534d6e527d0814039ca058269ab6149d7282",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "e59ec4bb77fa9a01aac18e8c90a66484bbe88519",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "cb5742ccc6e341bbf0e6b71e6d18cbbb99d2e14c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "03393a0102c12104faedd27a140209622bacd0e6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/ARM/Utils/CMakeLists.txt" : {
      "ObjectId" : "61bfe0ad73d05550f4389220283cc51c7fe37d24",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AVR/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "4ec01a60b2194a92d0ad85e9fc895817c0e7a76b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AVR/CMakeLists.txt" : {
      "ObjectId" : "40ce548bff2c4e1141ce78cc346f98ae9c6b68b3",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AVR/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "cfce8b7f080932e0b1ad876323d1d19e38896916",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AVR/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "0f3539a7d5efaa0eb8f39eb62d6bf10b79f4a0de",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AVR/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "eb7fe956cf34c868b2682f280f31830a08ea3038",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/AVR/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "557c55ae2f7251a31705af96c4db45768ec2eec6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/BPF/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "22fb4f0482925a7d365c2fdd77b33e8454268078",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/BPF/CMakeLists.txt" : {
      "ObjectId" : "c18adf859d352f46fc88b6695758cbb0454ccc37",
      "LastModified" : "2018-12-19T18:01:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/BPF/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "c6dd1b34ad1d9942396a54b68e93837be013951a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/BPF/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "f9e91619252c8d962091ec208ee1cb585e2b6b98",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/BPF/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "5fcd8743da536a3cf051aa5b6ba53a71cfd4652c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/BPF/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "ca0884614deb2250a304a16d52d5912bca6506b5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/CMakeLists.txt" : {
      "ObjectId" : "1e6abfacb79217465db19499a127268273f5d865",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Currently we do not allow libraries from lib to reference targets directly.\n\n# This property is used to enforce that convention. It is important because the\n\n# logic in llvm_map_components_to_libnames is order dependent on the target\n\n# libraries being created.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Target/Hexagon/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "bbfa92d59628e1855df3d918b4a748f615bcd18b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Hexagon/CMakeLists.txt" : {
      "ObjectId" : "3536aa81fb2156da6baa85fd8ae6c67f46df27d7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Hexagon/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "755a45e2df8bee314bc2d7a040bf2956e2a1c15a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Hexagon/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "2c5d0dab2848af193c64561bb47ebfc46b77f2c6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Hexagon/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "b9411f6925d26ba66c30c29b9d8c5cfa0ba7a229",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Lanai/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "3c88192ea6f0b8e65146f5eed438419a8d70a448",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Lanai/CMakeLists.txt" : {
      "ObjectId" : "c3ad807b312b8ee9650a240f919a26cb48ce591f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Lanai/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "785c98d8dff13c782acdffe67235e877974bac21",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Lanai/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7f76b895e6ecdccb4964b6e155c84a79740a59ba",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Lanai/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "16cde31e75975c38e1fc69fb49b9b6cd1cc4e90c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Lanai/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "01611b54b2d8db15d7f60d9ac85990e2228c3dd1",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/MSP430/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "bb484898afa0d26699bbb5aa09aa7b5fca8e41b8",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/MSP430/CMakeLists.txt" : {
      "ObjectId" : "2a0848fb3082156a109bd8bbd3fe09d15c39bbaa",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/MSP430/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "bc33b9067726f622dc1358543c3913d03fa336a8",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/MSP430/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "580a9ce71d9d7cbbce1bde0591f2e013249c33ec",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/MSP430/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "a2f468779f50d634f4391855cd4402aeeb9b9755",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/MSP430/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "fee5f434e79bb9602df3c8a0caa029060cb59d9f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Mips/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "f1675560853a861dd50e3765d09cde6e78dac0e3",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Mips/CMakeLists.txt" : {
      "ObjectId" : "2cacc0a0870caec9402136916070f090799d4847",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Mips/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "a64d02c47406f87721f0b30a4c9f4624fa0b0ef6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Mips/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "2a67fba796a67ab16e2d1b306c1e800ffdbf03ae",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Mips/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "c63af7c710cc2308f9333ab2128418d60c0dd363",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Mips/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "3347a99a43211bad544e07c0e4eff55596f021f6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/NVPTX/CMakeLists.txt" : {
      "ObjectId" : "d094620f1bf1975ef59733ec6c8f7f578f3f19bd",
      "LastModified" : "2018-12-27T03:40:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/NVPTX/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "bb6c8abc961fef807fb44ab95afbd5cc0767a482",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/NVPTX/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "9b4eadd59a31b2ca1b717b77f92d4bbb2979fbb8",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/NVPTX/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1beb40ea58e4a931a2e0eada484f26a0722e70d7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Nios2/CMakeLists.txt" : {
      "ObjectId" : "6393cc5fcb92a5f8cac8d98fd9f0326d7f71b754",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Nios2CodeGen should match with LLVMBuild.txt Nios2CodeGen\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Should match with \"subdirectories =  InstPrinter MCTargetDesc TargetInfo\" in LLVMBuild.txt\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "lib/Target/Nios2/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "dc50be755754a647b835d4fe6b6870ceeb0ee3b3",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Nios2/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "138832d33abf33e7bd164f9e71a34e0c38a7aa3e",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MCTargetDesc / CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Target/Nios2/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "394d2c2680b76a0403ac6741774fe1f49fc04fe6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/PowerPC/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "408858e424d5148642651ec137c158451162afcc",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/PowerPC/CMakeLists.txt" : {
      "ObjectId" : "3130d10fa5ed6eb279841576c533feb74929668b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/PowerPC/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "ca457df88d3ef0cd8abdba4dbb3ab8b6304af29c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/PowerPC/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "ab30a110f40ee9344ab0222d4942dd593f95179a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/PowerPC/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "3cea65ee4de614a504381426ace78c2e1f9e5ff0",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/PowerPC/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "c9548c7fe0cda84f45f77f3ecb42539b23e76314",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "10d0c89537ce3e1bed30626179c469370234ac7c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/CMakeLists.txt" : {
      "ObjectId" : "07c32cb315d0f1180c74721facd5ef1ebd68d6a6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "39bd2b7669f59a8bccbfd9ba78b15ef899fad41e",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "7f91743fb934380d45a8ee0b754645f54d8e57da",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "d9f4188aa75ce55fff139a91fb9f6d1b671c8771",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "f440fe2cb82a962506adffacce40eadc54a4caa2",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/RISCV/Utils/CMakeLists.txt" : {
      "ObjectId" : "727ab4a9fd771ac509df66bcec71b2f301330bc4",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Sparc/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "7579bfed75a2831680b7e0b6b0a7e06dc2ddc588",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Sparc/CMakeLists.txt" : {
      "ObjectId" : "e60fd4a86121dec99e91e0be71701d42e1296a5f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Sparc/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "7359c6a0bcb2063e30e8f3b525a90c65e25cdcc7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Sparc/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "a285a8337a811e00f2d0354ac97bb14a985dd38a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Sparc/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "c4dcdb5ba662dd22763e44dd574a63455a8c5a4a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/Sparc/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "9633e03a3847c9207c3afbe34c4c9237cadde49c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/SystemZ/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "ad19a565030bb1c7bb06cdeab84698119e03b7e7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/SystemZ/CMakeLists.txt" : {
      "ObjectId" : "f83b4242fb4262e137f19169134646e86ffb8610",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/SystemZ/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "4b94bcd1f5f1e6bd9cd6d2755e0c3de70f26b7ec",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/SystemZ/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "21b023ce1f7b65ae1dea4a04923c345a04153be9",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/SystemZ/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "1aa8c76e8bc6414661f6a55c60b6d29cfe0b1921",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/SystemZ/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1ebc669e59af1361310697abd17ce3b8ca752e0f",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/WebAssembly/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "bd4741d13984db8cff5103288c6f6423947ffe0e",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/WebAssembly/CMakeLists.txt" : {
      "ObjectId" : "549229ad572b25e45a0c1880b573d3b3064a1acb",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/WebAssembly/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "5e55e2958aeb167a239665919be415489172a852",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/WebAssembly/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "5394b67d2b87f5827d566421770f06e2441ac345",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/WebAssembly/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "0032a43db87f3e4700b84a92aeb275b14d395007",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/WebAssembly/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "ef6e4d2b617a294a08abd466c887432de1cc55b5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "b022a41b192f3b58753a19a718f9aea01700c916",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/CMakeLists.txt" : {
      "ObjectId" : "645ca49f2a1983e7ff0f1ec913928d7331f67786",
      "LastModified" : "2019-01-01T10:23:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "43702826c9bcc479890ea878f0e54e4969d72c0a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "a61efaed33a595efb6fa9cf124e759955777a63e",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "8d0d9fa1215c793382e030a794c684fa82d1b978",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "1d8a8c1c118e72671dc577eeed258136802a7d1d",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/X86/Utils/CMakeLists.txt" : {
      "ObjectId" : "b2697467f26a458efc484c1f0118c736e7dc59e1",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/XCore/CMakeLists.txt" : {
      "ObjectId" : "f7dbcbacb861634b0094a296f45e99a56d55ebfd",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/XCore/Disassembler/CMakeLists.txt" : {
      "ObjectId" : "1ed10c02c356ea9d50357d22ad0f760b7966d68b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/XCore/InstPrinter/CMakeLists.txt" : {
      "ObjectId" : "53cf84da7be98bc7e19deb3eddf2e5fcd010ab9b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/XCore/MCTargetDesc/CMakeLists.txt" : {
      "ObjectId" : "a14cf5ce2ac1498231a1958d398791fe1bc3f227",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/XCore/TargetInfo/CMakeLists.txt" : {
      "ObjectId" : "462f2d405304b65e6acf59e8beedd54ef16f2001",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Testing/CMakeLists.txt" : {
      "ObjectId" : "fc23e64eeb7a439011c9dd162b83cae7cbc4ca59",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Testing/Support/CMakeLists.txt" : {
      "ObjectId" : "c10a81015c584db44819c9c3911b760811526352",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/TextAPI/CMakeLists.txt" : {
      "ObjectId" : "7912e91fbf1c69c5441767f11545b8e59ddfa313",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ToolDrivers/CMakeLists.txt" : {
      "ObjectId" : "28da36bba20915e7c08a6d1cd15690986d905142",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ToolDrivers/llvm-dlltool/CMakeLists.txt" : {
      "ObjectId" : "52bd5cba86f4321f4f5f6863fa7dfcd5fccf44a3",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ToolDrivers/llvm-lib/CMakeLists.txt" : {
      "ObjectId" : "ab53a6843446a430c780408e1b8b6fcc752cd241",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/AggressiveInstCombine/CMakeLists.txt" : {
      "ObjectId" : "386314801e388f0fd9d63d2c13dea8ed046bb1cf",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/CMakeLists.txt" : {
      "ObjectId" : "74db9e53304da927887399a44058e3586ad0ee12",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Coroutines/CMakeLists.txt" : {
      "ObjectId" : "80a052a2d45dbdee76990da9b0e380d4d1f0e9c9",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Hello/CMakeLists.txt" : {
      "ObjectId" : "d9cd33a4938e82e5fd0812fbf78fd4399f4a1e4d",
      "LastModified" : "2019-01-01T10:23:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from the hello plugin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "7e2bca0f8f800d70c26fcf5db0311f57862b5384",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/InstCombine/CMakeLists.txt" : {
      "ObjectId" : "8a3a58e9ecc98be71f7d181a26fb4d4b87a3b44b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Instrumentation/CMakeLists.txt" : {
      "ObjectId" : "94461849d5094e3a9e0d0976db92fb3b61b2085d",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/ObjCARC/CMakeLists.txt" : {
      "ObjectId" : "114471eb6f6e14010438e06defdde918a02c598c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Scalar/CMakeLists.txt" : {
      "ObjectId" : "e3548ce5cd0afdd7472a9107d66939de49709ff6",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "eb3bad79129fd0081184c0e94036830ad916960b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Vectorize/CMakeLists.txt" : {
      "ObjectId" : "06eaadf58c3fce1f6b9c3531335d23d6ff06d370",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/WindowsManifest/CMakeLists.txt" : {
      "ObjectId" : "183017999f3b179727c63e85bb916a2d53a5c2c9",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/XRay/CMakeLists.txt" : {
      "ObjectId" : "c667083ed13ae429a0cf52e6886913147c080814",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/CMakeLists.txt" : {
      "ObjectId" : "c98a8824773384a4b289e702131e2bcb0a8abe84",
      "LastModified" : "2019-01-01T10:23:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Discover the projects that use CMake in the subdirectories.\n\n# Note that explicit cmake invocation is required every time a new project is\n\n# added or removed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Also add in libc++ and compiler-rt trees if present (and we have\n\n# a sufficiently recent version of CMake where required).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC isn't quite working with libc++ yet, disable it until issues are\n\n# fixed.\n\n# FIXME: LLVM_FORCE_BUILD_RUNTIME is currently used by libc++ to force\n\n# enable the in-tree build when targeting clang-cl.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add the projects in reverse order of their dependencies so that the\n\n# dependent projects can see the target names of their dependencies.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "runtimes/CMakeLists.txt" : {
      "ObjectId" : "42842409dca50a782bd1ed0b7cdb3576c9944936",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file handles building LLVM runtime sub-projects.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Runtimes are different from tools or other drop-in projects because runtimes\n\n# should be built with the LLVM toolchain from the build directory. This file is\n\n# a first step to formalizing runtime build interfaces.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In the current state this file only works with compiler-rt, other runtimes\n\n# will work as the runtime build interface standardizes.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all subdirectories containing CMake projects\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Side-by-side subprojects layout.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If this file is acting as a top-level CMake invocation, this code path is\n\n# triggered by the external project call for the runtimes target below.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the root project's CMake modules, and the LLVM build's modules to the\n\n# CMake module path.\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some of the runtimes will conditionally use the compiler-rt sanitizers\n\n# to make this work smoothly we ensure that compiler-rt is added first in\n\n# the list of sub-projects. This allows other sub-projects to have checks\n\n# like `if(TARGET asan)` to enable building with asan.\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# LLVMConfig.cmake contains a bunch of CMake variables from the LLVM build.\n\n# This file is installed as part of LLVM distributions, so this can be used\n\n# either from a build directory or an installed LLVM.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Setting these variables will allow the sub-build to put their outputs into\n\n# the library and bin directories of the top-level build.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# This variable makes sure that e.g. llvm-lit is found.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Avoid checking whether the compiler is working.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Enable warnings, otherwise -w gets added to the cflags by HandleLLVMOptions\n\n# resulting in unjustified successes by check_cxx_compiler_flag.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Handle common options used by all runtimes.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# TODO: Clean this up as part of an interface standardization\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# The subdirectories need to treat this as standalone builds\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Setting a variable to let sub-projects detect which other projects\n\n# will be included under here.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# We do this in two loops so that HAVE_* is set for each runtime before the\n\n# other runtimes are added.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Between each sub-project we want to cache and clear the LIT properties\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# if this is included from LLVM's CMake\n",
        "Line" : 211,
        "CharPositionInLine" : 7
      },
      "21" : {
        "Text" : "# If compiler-rt is present we need to build the builtin libraries first. This\n\n# is required because the other runtimes need the builtin libraries present\n\n# before the just-built compiler can pass the configuration tests.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# We don't need to depend on the builtins if we're building instrumented\n\n# because the next stage will use the same compiler used to build this stage.\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# We create a list the names of all the runtime projects in all uppercase and\n\n# with dashes turned to underscores. This gives us the CMake variable prefixes\n\n# for all variables that will apply to runtimes.\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Builtins were built separately above\n",
        "Line" : 345,
        "CharPositionInLine" : 29
      },
      "25" : {
        "Text" : "# runtime_register_target(target)\n\n#   Utility function to register external runtime target.\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Builtins were built separately above\n",
        "Line" : 430,
        "CharPositionInLine" : 29
      },
      "27" : {
        "Text" : "# Create a runtimes target that uses this file as its top-level CMake file.\n\n# The runtimes target is a configuration of all the runtime libraries\n\n# together in a single CMake invocaiton.\n",
        "Line" : 454,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# TODO: This is a hack needed because the libcxx headers are copied into the\n\n# build directory during configuration. Without that step the clang in the\n\n# build directory cannot find the C++ headers in certain configurations.\n\n# I need to build a mechanism for runtime projects to provide CMake code\n\n# that executes at LLVM configuration time to handle this case.\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 29
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "d2b2b8d11649969b9d389018917c350afed81e81",
      "LastModified" : "2019-01-04T22:48:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't include check-llvm into check-all without LLVM_BUILD_TOOLS.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the depends list as a variable so that it can grow conditionally.\n\n# NOTE: Sync the substitutions in test/lit.cfg when adding to this list.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If Intel JIT events are supported, depend on a tool that tests the listener.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Clear all non-OCaml cross-target dependencies when building out-of-tree.\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Setup a legacy alias for 'check-llvm'. This will likely change to be an\n\n# alias for 'check-all' at some point in the future.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "ddafc98d63bbcaedb058d186c52be87a0adca9b8",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file will recurse into all subdirectories that contain CMakeLists.txt\n\n# Setting variables that match the pattern LLVM_TOOL_{NAME}_BUILD to Off will\n\n# prevent traversing into a directory.\n\n#\n\n# The only tools that need to be explicitly added are ones that have explicit\n\n# ordering requirements.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Iterates all the subdirectories to create CMake options to enable/disable\n\n# traversing each directory.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build polly before the tools: the tools link against polly when\n\n# LINK_POLLY_INTO_TOOLS is set.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add LTO, llvm-ar, llvm-config, and llvm-profdata before clang, ExternalProject\n\n# requires targets specified in DEPENDS to exist before the call to\n\n# ExternalProject_Add.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Projects supported via LLVM_EXTERNAL_*_SOURCE_DIR need to be explicitly\n\n# specified.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automatically add remaining sub-directories containing a 'CMakeLists.txt'\n\n# file as external projects.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add subprojects specified using LLVM_EXTERNAL_PROJECTS\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tools/bugpoint-passes/CMakeLists.txt" : {
      "ObjectId" : "56a7eacebf1acd466b30d1de59d884bb3067fb9a",
      "LastModified" : "2019-01-04T22:48:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from this plugin.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/bugpoint/CMakeLists.txt" : {
      "ObjectId" : "654ecc496a919b498cc48b4cc9d11ecc600ed951",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure LLVMTarget can resolve dependences in Polly.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tools/dsymutil/CMakeLists.txt" : {
      "ObjectId" : "480f78fb1888cce4ca1a8794667e285c1a759bf4",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/gold/CMakeLists.txt" : {
      "ObjectId" : "72f76558c088c4d9925ddafba38156994a61b46e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llc/CMakeLists.txt" : {
      "ObjectId" : "4f8181a1b6577e33b04fd4f479b06672d84e801b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/lli/CMakeLists.txt" : {
      "ObjectId" : "42f6c2b2ede4b24d933454738de7c3775082e2aa",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/lli/ChildTarget/CMakeLists.txt" : {
      "ObjectId" : "f08ce57c29533518fb979770cdbd9b162a29d56e",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-ar/CMakeLists.txt" : {
      "ObjectId" : "191c684d5245eb90c79c4994a3e2b92d78f2c2fb",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-as-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "cda76a73e6017ce57c5ae1f77492ae722f03ba72",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-as/CMakeLists.txt" : {
      "ObjectId" : "3a157a3d4098a16129af5dd2b7a856bc6f97fa99",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-bcanalyzer/CMakeLists.txt" : {
      "ObjectId" : "15d51ee7a9d75d6bba97d625a953703b9f6d448c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-c-test/CMakeLists.txt" : {
      "ObjectId" : "bce0f4a5a4209d0f025de0837aa08d5356a52e1a",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We should only have llvm-c-test use libLLVM if libLLVM is built with the\n\n# default list of components. Using libLLVM with custom components can result in\n\n# build failures.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/llvm-cat/CMakeLists.txt" : {
      "ObjectId" : "61e5f9d004e7d0bc49484753a5955a7bc5f1bdfa",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cfi-verify/CMakeLists.txt" : {
      "ObjectId" : "ae12bec5e8073bf40ee0a4513ba4714ef4aafc67",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cfi-verify/lib/CMakeLists.txt" : {
      "ObjectId" : "82ca42e624a49daa7bd3752b101500b5641edd18",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-config/CMakeLists.txt" : {
      "ObjectId" : "a7db17386fb3bca91f9bceca49f551660e88aeef",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the llvm-config tool.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compute the substitution values for various items.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If it's an option, pass it without changes.\n",
        "Line" : 19,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Otherwise assume it's a library name we need to link with.\n",
        "Line" : 22,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Fetch target specific compile options, e.g. RTTI option\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The language standard potentially affects the ABI/API of LLVM, so we want\n\n# to make sure it is reported by llvm-config.\n\n# NOTE: We don't want to start extracting any random C/CXX flags that the\n\n# user may add that could affect the ABI.  We only want to extract flags\n\n# that have been added by the LLVM build system.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use configure_file to create BuildVariables.inc.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use the C++ link flags, since they should be a superset of C link flags.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set build-time environment(s).\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add the dependency on the generation step.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tools/llvm-cov/CMakeLists.txt" : {
      "ObjectId" : "c3afec86cba20dc3ddd055bad0acb2bab23b614d",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cvtres/CMakeLists.txt" : {
      "ObjectId" : "e912030e205ee060d7a250547ffa3f56c05dcdce",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cxxdump/CMakeLists.txt" : {
      "ObjectId" : "ada886e888734225f53b575365ded0b89be2f112",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cxxfilt/CMakeLists.txt" : {
      "ObjectId" : "2a78acad80a8169736a428d1d5e58c023fc864f7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cxxmap/CMakeLists.txt" : {
      "ObjectId" : "e180d3cd82fff20ce2aba25cff09b65fca084f20",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-demangle-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "0fe711cdb16c75db2b7da4513f9296802a5b026c",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-diff/CMakeLists.txt" : {
      "ObjectId" : "703ed97cb0b01dd9b4c77a24e6f77f8e1dcd73f9",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-dis/CMakeLists.txt" : {
      "ObjectId" : "5804754ba696ed229f563751cffa9024bf3a37e5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-dwarfdump/CMakeLists.txt" : {
      "ObjectId" : "77620e0faaf81baf525f1f998da30012dededf9b",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-dwarfdump/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "318c4f7bfce44be75b62d077e4504671636fc5a5",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-dwp/CMakeLists.txt" : {
      "ObjectId" : "1b5fbddc1f75090349579cf537bd43e5d77247d7",
      "LastModified" : "2018-12-17T08:08:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-elfabi/CMakeLists.txt" : {
      "ObjectId" : "bd3ec851887aba1571a950f564e37b7459a86434",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-exegesis/CMakeLists.txt" : {
      "ObjectId" : "a59e1b74024e3d6487bf6f26e4a17e4753aaef09",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link the native exegesis target if compiled and on the right host.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/llvm-exegesis/lib/AArch64/CMakeLists.txt" : {
      "ObjectId" : "a251b8ff683ea7aa577fe04b3e22baebdc3bddd1",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-exegesis/lib/CMakeLists.txt" : {
      "ObjectId" : "ef85056db0a4d2cb0bd2fd26a406a17462df5611",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-exegesis/lib/PowerPC/CMakeLists.txt" : {
      "ObjectId" : "89e33437952e4e3818d974877ac32c7d44ffdae0",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-exegesis/lib/X86/CMakeLists.txt" : {
      "ObjectId" : "912877dd6ed1f6744f9ae59a26a4f32adc75bd75",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-extract/CMakeLists.txt" : {
      "ObjectId" : "ce2a78d5d3865f2614e391308bcfb59109f2e175",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-go/CMakeLists.txt" : {
      "ObjectId" : "20393f728f8f1c2c87337c9feed583e538b5806f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-isel-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "dab124a64aca65931c49b650c31127e0c52164bb",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-jitlistener/CMakeLists.txt" : {
      "ObjectId" : "61f8420a7ae590c8d07e428729492f21d83b0946",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool is excluded from the CMake build if Intel JIT events are disabled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/llvm-link/CMakeLists.txt" : {
      "ObjectId" : "051489f94bc92f88199d300eb51341267b6b58e5",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-lto/CMakeLists.txt" : {
      "ObjectId" : "f0b385b7993d210d86bc4880a254cc46525ce191",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-lto2/CMakeLists.txt" : {
      "ObjectId" : "9be12d71ed793e18b670c4f7bb03be5dbc7c9d2b",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mc-assemble-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "fb6befd3c54ac89e764b8bdcacfe4bde04086996",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mc-disassemble-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "e055e0c6d9177faaa1e70c3a3e6200c2b66a9f03",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mc/CMakeLists.txt" : {
      "ObjectId" : "15c6dda1b258633669721a93d27e2e284e6bfd3e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mca/CMakeLists.txt" : {
      "ObjectId" : "1fceb08c1ca3d3b18f11a4fc1f3ed4e32996428a",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-modextract/CMakeLists.txt" : {
      "ObjectId" : "8484b3b0fb73ab729a80b0106813922f5a034165",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mt/CMakeLists.txt" : {
      "ObjectId" : "e4e99468092145af4cccd0b6ef0571868aad2b61",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-nm/CMakeLists.txt" : {
      "ObjectId" : "07ecce4e4451f9ee4feef37ea64727200db1fb2c",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-objcopy/CMakeLists.txt" : {
      "ObjectId" : "3b6c345b292b6fbe0b31aaea810af3b90ede36d3",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-objdump/CMakeLists.txt" : {
      "ObjectId" : "001fcb399fa6a355b0a2ae09f423892f290e4076",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-opt-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "97f72c86fa540af34183ef219c851c8431065d4f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-opt-report/CMakeLists.txt" : {
      "ObjectId" : "3aabc03ab3f21351b9176158d99159775efc845b",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-pdbutil/CMakeLists.txt" : {
      "ObjectId" : "e403d54eef5871974f115f93a858bf78defcbaaf",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-profdata/CMakeLists.txt" : {
      "ObjectId" : "49641c482f29fc60eee9bd7b64107e71c8d2e3f1",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-rc/CMakeLists.txt" : {
      "ObjectId" : "4cadc176691c8e9c0ad45f6b8c14769655bc67c7",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-readobj/CMakeLists.txt" : {
      "ObjectId" : "b0550f3401232ff6da60483dd98f74159fb00647",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-rtdyld/CMakeLists.txt" : {
      "ObjectId" : "c1acbe5846bdb549808e5812352076f7f83b446d",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-shlib/CMakeLists.txt" : {
      "ObjectId" : "187066e5ded245f7d532d6d86accbf794afc59be",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool creates a shared library from the LLVM libraries. Generating this\n\n# library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake\n\n# commandline. By default the shared library only exports the LLVM C API.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libLLVM.so should not have any dependencies on any other LLVM\n\n# shared libraries. When using the \"all\" pseudo-component,\n\n# LLVM_AVAILABLE_LIBS is added to the dependencies, which may\n\n# contain shared libraries (e.g. libLTO).\n\n#\n\n# Also exclude libLLVMTableGen for the following reasons:\n\n#  - it is only used by internal *-tblgen utilities;\n\n#  - it pollutes the global options space.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# FIXME: It should be \"GNU ld for elf\"\n",
        "Line" : 51,
        "CharPositionInLine" : 51
      },
      "3" : {
        "Text" : "# GNU ld doesn't resolve symbols in the version script.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Solaris ld does not accept global: *; so there is no way to version *all* global symbols\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# To get the export list for a single llvm library:\n\n# nm ${LIB_PATH} | awk \"/T _LLVM/ { print $3 }\" | sort -u | sed -e \"s/^_//g\" > ${LIB_PATH}.exports\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Build the LLVM-C.dll library that exports the C API.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# The python script needs to know whether symbols are prefixed with underscores or not.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Get the full name to the libs so the python script understands them.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Generate the exports file dynamically.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Finally link the target.\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "tools/llvm-size/CMakeLists.txt" : {
      "ObjectId" : "7ef4f1769b840ab65394628e7e9fa6eeb50862b5",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-special-case-list-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "381f07b1ae9109e187ccda062c33e12177f84ffa",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-split/CMakeLists.txt" : {
      "ObjectId" : "52eedeb9f53f32fe9352d6a495c57ceefae81229",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-stress/CMakeLists.txt" : {
      "ObjectId" : "139ab9e0d8f967de4381d1cafd84401644e49411",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-strings/CMakeLists.txt" : {
      "ObjectId" : "390f117513978289c77013acf7b24fff54f17457",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-symbolizer/CMakeLists.txt" : {
      "ObjectId" : "8185c296c501d489d9ed6bbd90d5f944129bfac1",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: As we plan to execute llvm-symbolizer binary from compiler-rt\n\n# libraries, it has to be compiled for all supported targets (x86_64, i386 etc).\n\n# This means that we need LLVM libraries to be compiled for these\n\n# targets as well. Currently, there is no support for such a build strategy.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/llvm-undname/CMakeLists.txt" : {
      "ObjectId" : "062f0052597e72f9a09f3e198dc685399f3f14a7",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-xray/CMakeLists.txt" : {
      "ObjectId" : "4b056d10758f9818b86e3db3a538d0e048d98e93",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-yaml-numeric-parser-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "34027431697f6dc4558a79c968dceeffb397fd09",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/lto/CMakeLists.txt" : {
      "ObjectId" : "6e913519a809a3afa6115665561e9272d4e52c60",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/obj2yaml/CMakeLists.txt" : {
      "ObjectId" : "c59fe650952b83a09dd7746d18fd7bad0d81bb89",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/opt-remarks/CMakeLists.txt" : {
      "ObjectId" : "a87beae1e8931505dfcb3e1a516dfb76db9fcd2f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/opt-viewer/CMakeLists.txt" : {
      "ObjectId" : "19b60693308201fbc0b530f6e92a1eddf725b1a3",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/opt/CMakeLists.txt" : {
      "ObjectId" : "f03d11516657f14a8cb877a2941a14f596d3b018",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/sancov/CMakeLists.txt" : {
      "ObjectId" : "2a7707289335d6fd894c41948d38546f24da51ea",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/sanstats/CMakeLists.txt" : {
      "ObjectId" : "198f6692531d5870ed4e92b194bf23b6f84b2e9a",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/verify-uselistorder/CMakeLists.txt" : {
      "ObjectId" : "74f7195c9066a18067eabafa58fa10ffb3e25fc0",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/xcode-toolchain/CMakeLists.txt" : {
      "ObjectId" : "6167f5f6bdd774613c2a579d33f7028833b51ee1",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OS X 10.11 El Capitan has just been released. One of the new features, System\n\n# Integrity Protection, prevents modifying the base OS install, even with sudo.\n\n# This prevents LLVM developers on OS X from being able to easily install new\n\n# system compilers. The feature can be disabled, but to make it easier for\n\n# developers to work without disabling SIP, this file can generate an Xcode\n\n# toolchain. Xcode toolchains are a mostly-undocumented feature that allows\n\n# multiple copies of low level tools to be installed to different locations, and\n\n# users can easily switch between them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setting an environment variable TOOLCHAINS to the toolchain's identifier will\n\n# result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To make this work with Xcode 7.1 and later you can install the toolchain this\n\n# file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the\n\n# path specified by $CMAKE_INSTALL_PREFIX/Toolchains\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file generates a custom install-xcode-toolchain target which constructs\n\n# and installs a toolchain with the identifier in the pattern:\n\n# org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the\n\n# system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the\n\n# in the environment.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Example usage:\n\n# cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On\n\n#   -DCMAKE_INSTALL_PREFIX=$PWD/install\n\n# ninja install-xcode-toolchain\n\n# export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains\n\n# export TOOLCHAINS=org.llvm.3.8.0svn\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# `xcrun -find clang` should return the installed clang, and `clang --version`\n\n# should show 3.8.0svn.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need\n\n# to detect it manually here.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If detecting Xcode version failed, set a crazy high version so we default\n\n# to the newest.\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Xcode 8 requires CompatibilityVersion 2\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Xcode 7.3 (the first version supporting external toolchains) requires\n\n# CompatibilityVersion 1\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "tools/yaml2obj/CMakeLists.txt" : {
      "ObjectId" : "adeac2331a6b6dc288eeb48594fa3ab6cd468e3d",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ADT/CMakeLists.txt" : {
      "ObjectId" : "098b6b67416b5080fd4a61bcd1bd300401796c93",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Analysis/CMakeLists.txt" : {
      "ObjectId" : "563b48d48741e714033e26dc58788fb95c7f6b12",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "1920bfaa3aac7b1dcb35266088ab0732f7735109",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/BinaryFormat/CMakeLists.txt" : {
      "ObjectId" : "82d76ecf64a886df030d4e009225ef27a156aa5d",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "b68cac7c8a6839c92ff501ab1ca93455270d4e81",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CMakeLists.txt" : {
      "ObjectId" : "459e89d707f5361b5894d998a832c93278ed1b83",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "5ef8c2afb8c1ef2fe946ccee1beea1e7233f0768",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CodeGen/GlobalISel/CMakeLists.txt" : {
      "ObjectId" : "60566cb2d59fd75d27deede674df898dd6938e86",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "579fdb202cf4ee50833ba4c209f8f52437fd8b8e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/CodeView/CMakeLists.txt" : {
      "ObjectId" : "70a7b8af14479d230d0c621f0ec44236eaa1f275",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "d97e573ea38f0a6320e2fd6d7b9d42177d9597ef",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/MSF/CMakeLists.txt" : {
      "ObjectId" : "0e48ab8f2f6b2a753504298d97f6e62a4cdce96e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "4edfd50c148d299c43e9f16aee63f577fe34dc85",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Demangle/CMakeLists.txt" : {
      "ObjectId" : "954f3d05eacb3a2d329e8000d1d7c3ac0ede1cb6",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ExecutionEngine/CMakeLists.txt" : {
      "ObjectId" : "302de9943ffe4c3e3e4095e1aab940503e57332e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include MCJIT tests only if native arch is a built JIT target.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/ExecutionEngine/MCJIT/CMakeLists.txt" : {
      "ObjectId" : "b5f8a14c41c1a5e35c3af83a53b466bb57513e4c",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ExecutionEngine/Orc/CMakeLists.txt" : {
      "ObjectId" : "019437d4ad5eeb7ad0ec5fc47854b677354b43cf",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/FuzzMutate/CMakeLists.txt" : {
      "ObjectId" : "c4a5fcf4f14ce177b8995ef9661a6a8f25d3ea7c",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/IR/CMakeLists.txt" : {
      "ObjectId" : "7498983b2609bb25b1f82ba2a892a090f844767d",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/LineEditor/CMakeLists.txt" : {
      "ObjectId" : "70d7497fed973019de5b9541f83bb4915d2fb05a",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Linker/CMakeLists.txt" : {
      "ObjectId" : "e94f4be8a2e9dcbf024f4de368737e8b2e2ecf91",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/MC/CMakeLists.txt" : {
      "ObjectId" : "c760c0267a9cf68ce70489240565862c5a96d1d4",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/MI/CMakeLists.txt" : {
      "ObjectId" : "595497f3d96034ec2c917f1d8efb0897e468e135",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Object/CMakeLists.txt" : {
      "ObjectId" : "e1376bffbc0f59a760a5cc568daf22c50f70c8c2",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ObjectYAML/CMakeLists.txt" : {
      "ObjectId" : "baed10b8730f0bca1560e503f7bc041b316220eb",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/OptRemarks/CMakeLists.txt" : {
      "ObjectId" : "94c74867cc4047d9c13140ac72bc50db9d741153",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Option/CMakeLists.txt" : {
      "ObjectId" : "07f7b91d5f5b7f1b59338a5c920d44e80e43ddb6",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Passes/CMakeLists.txt" : {
      "ObjectId" : "7e898763373d53e195afcb48b02a207e29aa9662",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed by LLVM's CMake checks because this file defines multiple targets.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If plugins are disabled, this test will disable itself at runtime. Otherwise,\n\n# reconfiguring with plugins disabled will leave behind a stale executable.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put plugin next to the unit test executable.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "unittests/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "366ed5482bf2c51087961ac831ca140629719963",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Support/CMakeLists.txt" : {
      "ObjectId" : "f9c877fc557773a985e7b7785b3f96f6c76f1b43",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable all warning for AlignOfTest.cpp,\n\n# as it does things intentionally, and there is no reliable way of\n\n# disabling all warnings for all the compilers by using pragmas.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ManagedStatic.cpp uses <pthread>.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "unittests/Support/DynamicLibrary/CMakeLists.txt" : {
      "ObjectId" : "1ea9826a3d155af918b0588f0b5f5757d69615f2",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed by LLVM's CMake checks because this file defines multiple targets.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# extract_symbols.py relies on all its library arguments being in the same\n\n# directory, so we must set the output directory in the same way as if\n\n# add_llvm_library was used.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Revert -Wl,-z,nodelete on this test since it relies on the file\n\n# being unloaded.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "unittests/Target/AArch64/CMakeLists.txt" : {
      "ObjectId" : "76f6c8226a8d5ac703e26644e7c39253a1bba84c",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Target/CMakeLists.txt" : {
      "ObjectId" : "9015029b0970d28f821b5ed34e8b76ad65fb7524",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Target/WebAssembly/CMakeLists.txt" : {
      "ObjectId" : "5ec82240b038ccb032934143a9bcedbcafab2f45",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/TextAPI/CMakeLists.txt" : {
      "ObjectId" : "d7208b2b060fa06fdff4387b9bb05e4d0e146e23",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/CMakeLists.txt" : {
      "ObjectId" : "b7f1817849ab51f7ad19ba454855c652ab32ff30",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "ee33a5fcd1b39aed74bec730d30c0c945e45e776",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/Scalar/CMakeLists.txt" : {
      "ObjectId" : "2762799d612459dfa8e239c75a964fd1131fd231",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "785b79865dc132dd431ec55b0dfa63934318410f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/Vectorize/CMakeLists.txt" : {
      "ObjectId" : "6e886bbe25af71b539e0d5f9596cd4a868cdf659",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/XRay/CMakeLists.txt" : {
      "ObjectId" : "a08098582ae8557157e0a063951eca72b920860e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/CMakeLists.txt" : {
      "ObjectId" : "e7c7dca68d49fffe461040932f407f4bece334e6",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/llvm-cfi-verify/CMakeLists.txt" : {
      "ObjectId" : "8f865463de1ba664def52ba6a5b98d3f9df03af7",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/llvm-exegesis/AArch64/CMakeLists.txt" : {
      "ObjectId" : "392efce26c00488477eb176050d8b87e1b9f1e8f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/llvm-exegesis/ARM/CMakeLists.txt" : {
      "ObjectId" : "b000974938f79a13704e6bc1c936fba1bbbe2133",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/llvm-exegesis/CMakeLists.txt" : {
      "ObjectId" : "05b2b3bc605c862f47acf1cec79ee1e6ac68b9ee",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/llvm-exegesis/PowerPC/CMakeLists.txt" : {
      "ObjectId" : "e8a53e3692aac900158d16ab4b3d728e8dfd3a8e",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/tools/llvm-exegesis/X86/CMakeLists.txt" : {
      "ObjectId" : "5078e7ba76c87d5209d06abffad5fa3d3eee66fe",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/FileCheck/CMakeLists.txt" : {
      "ObjectId" : "32e948a1a19eb8ad73a29e9620fb9403d6b438f0",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/KillTheDoctor/CMakeLists.txt" : {
      "ObjectId" : "72d994fb9953ac6fb3d8670d954831e8621717ae",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/LLVMVisualizers/CMakeLists.txt" : {
      "ObjectId" : "9fdc8906e55aea789e9120a214b82b004363154a",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do this by hand instead of using add_llvm_utilities(), which\n\n# tries to create a corresponding executable, which we don't want.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/PerfectShuffle/CMakeLists.txt" : {
      "ObjectId" : "ed70760a43e425b4730a809abc1ddb2e4f2836da",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "c88365a2b8cecfc8a58d0d49cfb63a9386beeaf3",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/CMakeLists.txt" : {
      "ObjectId" : "788ad48d1c4d55932f820395fd8927cd10d3f881",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell cmake 3.0+ that it's safe to clear the PROJECT_VERSION variable in the\n\n# call to project() below.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n\n# Support no if() IN_LIST operator\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n\n# may require downloading the source code.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This option can be used to disable building and running unit tests which depend on gtest\n\n# in cases where it is not possible to build or find a valid version of gtest.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: The --coverage flag needs to be removed when building assembly\n\n# tests for this to work.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 54,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# This option disables the building and running of the assembly verification tests\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# FIXME(kbobyrev): Document this change.\n\n# add_cxx_compiler_flag(-Werror RELEASE)\n\n# add_cxx_compiler_flag(-Werror RELWITHDEBINFO)\n\n# add_cxx_compiler_flag(-Werror MINSIZEREL)\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 157,
        "CharPositionInLine" : 52
      },
      "19" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Coverage build type\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Set up directories\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Build the targets\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "utils/benchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "d0d2099814402a3fc54ed2be2b61cd4f31d5c5f7",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add -Werror to ensure the compiler generates an error if the warning flag\n\n# doesn't exist.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "utils/benchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "c4c4d660f1eba1a484fcd2c2c11f7e94115ace31",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/benchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "88cebe3a1caac022b39199870c09d8804d45409b",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "utils/benchmark/cmake/HandleGTest.cmake" : {
      "ObjectId" : "7ce1a633d65a2e7102ce8df365b7a2874f08e727",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Since 10/Feb/2017 the googletest trunk has had a bug where\n\n# -Werror=unused-function fires during the build on OS X. This is a temporary\n\n# workaround to keep our travis bots from failing. It should be removed\n\n# once gtest is fixed.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use gmock_main instead of gtest_main because it initializes gtest as well.\n\n# Note: The libraries are listed in reverse order of their dependancies.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8 and older don't respect INTERFACE_INCLUDE_DIRECTORIES, so we\n\n# have to add the paths ourselves.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# FIXME: We don't currently require the gmock library to build the tests,\n\n# and it's likely we won't find it, so we don't try. As long as we've\n\n# found the gmock/gmock.h header and gtest_main that should be good enough.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "utils/benchmark/cmake/Modules/FindLLVMAr.cmake" : {
      "ObjectId" : "23469813cfab5946c86002cef85caa10e7165380",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/cmake/Modules/FindLLVMNm.cmake" : {
      "ObjectId" : "e56430a04f6e84629bb3e06ae511e6f14829319a",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/cmake/Modules/FindLLVMRanLib.cmake" : {
      "ObjectId" : "7b53e1a790590bdfc07adf41f0ae74b4a9b61ff0",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/cmake/llvm-toolchain.cmake" : {
      "ObjectId" : "fc119e52fd26a59786b3480f3e6c64c72b78ad8d",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/cmake/split_list.cmake" : {
      "ObjectId" : "67aed3fdc8579b7d9a6f06a73fa9b6844976e691",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "5b3d52270de5dd8ba6ca5611a730e501e5e08efd",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need extra libraries on Solaris\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Benchmark main library\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "utils/benchmark/test/AssemblyTests.cmake" : {
      "ObjectId" : "8605221ff71071535c88ea4fee0dad8cd310daa8",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/benchmark/test/CMakeLists.txt" : {
      "ObjectId" : "05ae804bfe3fbdd7bf4f96fd7c06cb69c9cc70c3",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Some tests use `<cassert>` to perform the test. Therefore we must\n\n# strip -DNDEBUG from the default CMake flags in DEBUG mode.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: These flags must be added after find_package(Threads REQUIRED) otherwise\n\n# they will break the configuration check.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Demonstration executable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some of the issues with DoNotOptimize only occur when optimization is enabled\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# libstdc++ provides different definitions within <map> between dialects. When\n\n# LTO is enabled and -Werror is specified GCC diagnoses this ODR violation\n\n# causing the test to fail to compile. To prevent this we explicitly disable\n\n# the warning.\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Attempt to work around flaky test failures when running on Appveyor servers.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################\n\n# GoogleTest Unit Tests\n\n###############################################################################\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Assembly Unit Tests\n\n###############################################################################\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################\n\n# Code Coverage Configuration\n\n###############################################################################\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the coverage command(s)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "utils/count/CMakeLists.txt" : {
      "ObjectId" : "4e0d371334e473d643d791ae839ea51a953f0c7f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/lit/CMakeLists.txt" : {
      "ObjectId" : "43caf09f1402b824d68016f7242eea0b51758027",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The configured file is not placed in the correct location\n\n# until the tests are run as we need to copy it into\n\n# a copy of the tests folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lit's test suite creates output files next to the sources which makes the\n\n# source tree dirty. This is undesirable because we do out of source builds.\n\n# To work around this the tests and the configuration file are copied into the\n\n# build directory just before running them. The tests are not copied over at\n\n# configure time (i.e. `file(COPY ...)`) because this could lead to stale\n\n# tests being run.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add rules for lit's own test suite\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For IDEs\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "utils/llvm-lit/CMakeLists.txt" : {
      "ObjectId" : "670175c81851125d83371c467940e06808ea6808",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/not/CMakeLists.txt" : {
      "ObjectId" : "29c7b0218521d4cdbc32d8105391a4d0c43e2e62",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/unittest/CMakeLists.txt" : {
      "ObjectId" : "5b5cbf5d745f9b52921f7f6fce451b90a47b216f",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Experimental CMake build script for Google Test.\n\n#\n\n# Consider this a prototype.  It will change drastically.  For now,\n\n# this is only for people on the cutting edge.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n\n########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where gtest's .h files can be found.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# LLVM requires C++11 but gtest doesn't correctly detect the availability\n\n# of C++11 on MSVC, so we force it on.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Depends on llvm::raw_ostream\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# This is a library meant only for the build tree.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "utils/unittest/UnitTestMain/CMakeLists.txt" : {
      "ObjectId" : "32f0f25a60ffcde4f151a8bf7fedcd8b5ba2b1fb",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Depends on llvm::cl\n",
        "Line" : 8,
        "CharPositionInLine" : 10
      },
      "1" : {
        "Text" : "# This library is not meant to be in the install tree, only the build tree.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "utils/yaml-bench/CMakeLists.txt" : {
      "ObjectId" : "cd04b33d0a296ae2c15a228ac74026601f4e3b64",
      "LastModified" : "2019-01-08T00:54:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 407,
    "CMAKESOURCE" : 3
  },
  "ElapsedTime" : 22124
}