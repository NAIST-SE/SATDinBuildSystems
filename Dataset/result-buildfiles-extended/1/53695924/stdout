{
  "Repository" : "53695924",
  "Revision" : "HEAD",
  "ObjectId" : "866ca76a585f877b2f87ddd1998c1b67a1db19c6",
  "CommitTime" : "2019-04-17T17:42:54Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "52347c4589bce5da8ff70ae12934bffabf3b5778",
      "LastModified" : "2019-04-12T09:59:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake based build of Subsurface\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Uncomment his to see all commands cmake actually executes\n\n# set(CMAKE_VERBOSE_MAKEFILE ON)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't process generated files - this is new in 3.10\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# global settings\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Options regarding usage of pkgconfig\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Library Handling\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Options regarding disabling parts of subsurface.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Options regarding enabling parts of subsurface\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Options regarding What should we build on subsurface\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#verify if Platform is correct and warn on wxit with example.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SUBSURFACE_SOURCE may be used in subdirectories (tests)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# TODO: This Compilation part should go on the Target specific CMake.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Warn about possible float conversion errors\n\n# Use NOT VERSION_LESS since VERSION_GREATER_EQUAL is not available\n\n# in currently used cmake version.\n",
        "Line" : 86,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# using Intel C++\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# every compiler understands -Wall\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# by detault optimize with -O2 even for debug builds\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# pkgconfig for required libraries\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The 'HandleFindXXX' are special libraries that subsurface needs\n\n# to find and configure in a few different ways because of a few\n\n# developers that prefer pkg-config over CMake, so we try to make\n\n# everyone happy. It also sets some variables for each library, so\n\n# if you think a module miss anything, take a look on the specific\n\n# module file.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Project Target specific configuration should go here,\n\n# if the configuration is too big or would disrupt the normal code flux,\n\n# move it somewhere else (another file) and include it.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# add pthread to the end of the library list on Linux\n\n# this is only needed on Ubuntu\n\n# but shouldn't hurt on other Linux versions\n\n# in some builds we appear to be missing libz for some strange reason...\n",
        "Line" : 176,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Add ssh2 at the end for openSUSE builds (for recent cmake?)\n",
        "Line" : 180,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Test for ARM processor (Raspberry Pi) and add libGLESv2 if found\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# when building for Android, the toolchain file requires all cmake modules\n\n# to be inside the CMAKE_FIND_ROOT_PATH - which prevents cmake from finding\n\n# our Qt installation. This is ugly, but it works.\n",
        "Line" : 227,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Windows Qt doesn't support BLE at all\n\n# the rest of them need at least 5.6 to be reasonable but really, you want 5.9.1\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#set up the subsurface_link_libraries variable\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# hack to build successfully on LGTM\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# include translations\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# create the executables\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# When building the mobile application in Android, link it and Qt will do the rest, when doing the mobile application on Desktop, create an executable.\n",
        "Line" : 305,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# the following is split across two commands since in cmake 3.12 this would result\n\n# in a non-sensical \"no sources given to target\" error if done all as one set of\n\n# arguments to the add_executable() call\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# add platform specific actions\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# build an automated html exporter\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# install Subsurface\n\n# first some variables with files that need installing\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# add all the translations that we may need\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# now for each platform the install instructions\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Android template directory\n",
        "Line" : 392,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# this is a HACK\n",
        "Line" : 420,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# this is a hack - but I don't know how else to find the macdeployqt program if it's not in the PATH\n",
        "Line" : 427,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# and another hack to get the QML Components in the right place\n",
        "Line" : 430,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# and with Qt 5.11 we need another library that isn't copied by macdeployqt\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Windows bundling rules\n\n# We don't have a helpful tool like macdeployqt for Windows, so we hardcode\n\n# which libs we need.\n\n# \"make install\", copies everything into a staging area\n\n# \"make installer\", uses makensis to create an installer executable\n",
        "Line" : 460,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# hack to work around the fact that we don't process the dependencies of plugins\n\n# as of Qt 5.11 this additional DLL is needed and it's only referenced in the qml DLLs\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# the script we created above is now added as a command to run at\n\n# install time - so this ensures that subsurface.exe has been\n\n# built before this is run\n",
        "Line" : 487,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# create the subsurface-x.y.z.exe installer - this needs to depend\n\n# on the install target but cmake doesn't allow that, so we depend\n\n# on the fake target instead\n",
        "Line" : 492,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# the syntax is odd, but this searches for libqtgeoservices_googlemaps.so\n\n# in the filesystem below our install-root\n\n# different Linux flavors put the plugin in different directories\n",
        "Line" : 507,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# useful for debugging CMake issues\n\n# print_all_variables()\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "Documentation/Makefile" : {
      "ObjectId" : "e2771465f0caa09d63671642d939d6c3c5ecc727",
      "LastModified" : "2017-04-12T14:46:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# in order for \"normal\" developers not to have to install asciidoc (which\n\n# brings in a couple hundred MB of dependencies) we now include both the\n\n# user-manual.txt and a copy of the generated .html file in git\n\n#\n\n# in order to avoid unnecessary thrash with minor version differences, when\n\n# submitting patches to the user manual, only submit the changes to the .txt\n\n# file - the maintainer will recreate the .html.git file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Alternatively::\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ReleaseNotes/Makefile" : {
      "ObjectId" : "0e5f477bdbb7879717530d2d15a2844794b4630a",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# in order for \"normal\" developers not to have to install asciidoc (which\n\n# brings in a couple hundred MB of dependencies) we now include both the\n\n# user-manual.txt and a copy of the generated .html file in git\n\n#\n\n# in order to avoid unnecessary thrash with minor version differences, when\n\n# submitting patches to the user manual, only submit the changes to the .txt\n\n# file - the maintainer will recreate the .html.git file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Alternatively::\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLIBGIT2.cmake" : {
      "ObjectId" : "87abb7f474e8ceb082989bc998b1eeee8bbbcc6f",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the LibGit2 Library\n\n# Once done this will define\n\n#\n\n#  LIBGIT2_FOUND - system has LibGit2\n\n#  LIBGIT2_INCLUDE_DIR - the LibGit2 include directory\n\n#  LIBGIT2_LIBRARIES\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLibdivecomputer.cmake" : {
      "ObjectId" : "bc45a52ca18d049393226b59c3c7757ff863f4a6",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the LIBDIVECOMPUTER Library\n\n# Once done this will define\n\n#\n\n#  LIBDIVECOMPUTER_FOUND - system has LIBDIVECOMPUTER\n\n#  LIBDIVECOMPUTER_INCLUDE_DIR - the LIBDIVECOMPUTER include directory\n\n#  LIBDIVECOMPUTER_LIBRARIES\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/HandleFindGit2.cmake" : {
      "ObjectId" : "ee1f1521b200bcdd4c14e1b5bc48d55d88d1b6b4",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# more libraries with special handling in case we build them ourselves\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for Android we need to force a static link against ssl and crypto\n\n# this is a bit hacky, but it seems to work\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# at least on my Mac I get the mixed case variable instead...\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/HandleFindGrantlee.cmake" : {
      "ObjectId" : "ab0faf4911f6d8879ec1aeceaf6c531b89be6ee3",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/HandleFindLibDiveComputer.cmake" : {
      "ObjectId" : "2f5bfeb32c32f07388bf4e66614f928682bfecba",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/HandleFtdiSupport.cmake" : {
      "ObjectId" : "b4ad685b39a77683e2023f081f56638f6e9caf4b",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/HandleUserManual.cmake" : {
      "ObjectId" : "226b8ca9e0c5e7312e8060e53903099d0fe4c2cf",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/HandleVersionGeneration.cmake" : {
      "ObjectId" : "4b52a68045dcfdbf7abc59e05c486ef8afd0b1f9",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate the ssrf-config.h every 'make'\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/MacroOutOfSourceBuild.cmake" : {
      "ObjectId" : "71a8ca4cc0e6c237d0cfcd5dd39851f8318b107f",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# \n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # Ensures that we do an out of source build\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/RunOnBuildDir.cmake" : {
      "ObjectId" : "5158dcaf46bcb2366b9d3e83a4a08013bdbc70c9",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install a few things so that one can run Subsurface from the build\n\n# directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/cmake_variables_helper.cmake" : {
      "ObjectId" : "832dd4cc818991e1d375df166380e4c550844271",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains helper macro to print env variables as status messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# print_variable\n\n#\n\n# Prints a status message with the value of the variable\n\n#\n\n# Parameters:\n\n#  variableName - A string containing the name of the variable to be printed\n\n#\n\n# Usage:\n\n#  print_variable(CMAKE_CURRENT_BINARY_DIR)\n\n#\n\n# Output:\n\n#  -- CMAKE_CURRENT_BINARY_DIR=/home/xxx/xxx\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# print_all_variables\n\n#\n\n# Prints a status message for all currently defined variables.\n\n#\n\n# Parameters:\n\n#  none\n\n#\n\n# Usage:\n\n#  print_all_variable()\n\n#\n\n# Output:\n\n#  -- ------------------------------ print variables ------------------------------\n\n#  -- CMAKE_CURRENT_BINARY_DIR=/home/xxx/xxx\n\n#  -- ....\n\n#  -- -----------------------------------------------------------------------------\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/dlllist.cmake" : {
      "ObjectId" : "fc6af976052256a8732975f7fe0e41c24cf5c776",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# figure out which command to use for objdump\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# figure out where we should search for libraries\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# since cmake doesn't appear to give us a variable with\n\n# all libraries we link against, grab the link.txt script\n\n# instead and drop the command name from it (before the\n\n# first space) -- this will fail if the full path for the\n\n# linker used contains a space...\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# finally run our win-ldd.pl script against that to\n\n# collect all the required dlls\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# replace newlines with semicolons so this is a cmake list\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# executing 'install' as a command seems hacky, but you\n\n# can't use the install() cmake function in a script\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/pkgconfig_helper.cmake" : {
      "ObjectId" : "f53a1064dfcadb6ba85514003058cf73cf5ade96",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/version.cmake" : {
      "ObjectId" : "338ef73de0def4dac9ac4f54710109dd8ebbe30a",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/CMakeLists.txt" : {
      "ObjectId" : "c55b5627d5a6d02c7e86dc6da1c6498eca8e6d8d",
      "LastModified" : "2019-04-12T09:59:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# compile the core library part in C, part in C++\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# classes to manage struct preferences for QWidget and QML\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#Subsurface Qt have the Subsurface structs QObjectified for easy access via QML.\n",
        "Line" : 197,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "desktop-widgets/CMakeLists.txt" : {
      "ObjectId" : "fbaff1d6c69f5454b39e058d2b99743ff88cff94",
      "LastModified" : "2019-04-14T22:30:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create the libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the interface, in C++\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the yearly statistics widget.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "desktop-widgets/preferences/CMakeLists.txt" : {
      "ObjectId" : "145567dbf27bd1ab6ead80a9e50b3d26acf63238",
      "LastModified" : "2019-04-12T09:59:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the profile widget\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "packaging/ios/Subsurface-mobile.pro" : {
      "ObjectId" : "1569929de17275a256526a27e509e90b5957c6a5",
      "LastModified" : "2019-04-12T15:19:07Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Additional import path used to resolve QML modules in Qt Creator's code model\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default rules for deployment.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Supress some warnings\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "packaging/ios/deployment.pri" : {
      "ObjectId" : "dc63e23a0cafacc707ddd6bc4baa4b4c763dd851",
      "LastModified" : "2019-03-22T02:30:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "profile-widget/CMakeLists.txt" : {
      "ObjectId" : "9376eede91c095f409b5262b3581e3612cabac12",
      "LastModified" : "2019-04-12T15:19:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the profile widget\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \tqmlprofile.h\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "qt-models/CMakeLists.txt" : {
      "ObjectId" : "449b450e743d8cfa7ae7e0550e038ab4a528b3ff",
      "LastModified" : "2019-04-12T15:19:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the data models that will interface\n\n# with the views.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# models used both mobile and desktop builds\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# models exclusively used in desktop builds\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# models exclusively used in mobile builds\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "smtk-import/CMakeLists.txt" : {
      "ObjectId" : "369dd80a188dbbe99d8005f72dbd33b77544a4e8",
      "LastModified" : "2019-04-12T15:19:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Modified from Subsurface's CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find needed packages and Qt5 components. Most of them needed by Subsurface\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for libsubsurface_corelib.a\n\n# A previous build of subsurface is needed (windows and linux)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set compiler flags and definitions\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We just want CLI mode on Linux. Silently drop it if cross building to Windows.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install instructions\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this ensures that smtk2ssrf.exe has been built before this is run\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# create the smtk2ssrf-x.y.z.exe installer - this needs to depend\n\n# on the install target but cmake doesn't allow that, so we depend\n\n# on the fake target instead\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# useful for debugging CMake issues\n\n# printll_variables()\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "smtk-import/cmake/Modules/dlllist.cmake" : {
      "ObjectId" : "6aa107f662e045831a97e8ab730a4893f8398151",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# figure out which command to use for objdump\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# figure out where we should search for libraries\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# since cmake doesn't appear to give us a variable with\n\n# all libraries we link against, grab the link.txt script\n\n# instead and drop the command name from it (before the\n\n# first space) -- this will fail if the full path for the\n\n# linker used contains a space...\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# finally run our win-ldd.pl script against that to\n\n# collect all the required dlls\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# replace newlines with semicolons so this is a cmake list\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# executing 'install' as a command seems hacky, but you\n\n# can't use the install() cmake function in a script\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "smtk-import/cmake/Modules/version.cmake" : {
      "ObjectId" : "1d6b0f4742d6752abc61118e9a72766771f379ad",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "22905463156e615fb0ba1adfb64589ed4369e692",
      "LastModified" : "2019-04-12T15:19:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QTest based tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Access test data (dive folder) from SUBSURFACE_SOURCE by default.\n\n# In cross compilation cases or when test will not be executed at build time\n\n# a differnt value can be set via cmake -DSUBSURFACE_TEST_DATA.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For windows case we expect tests to be executed\n\n# with WORKING_DIRECTORY pointing to folder where test data can be found\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Prepare a staging_tests folder\n\n# Test can run accessing data and dependecies for build time testing\n\n# or can be deployed for target testing\n\n# It inludes:\n\n#  - test data\n\n#  - test binaries (see TEST macro)\n\n#  - test binaries dependencies (see TEST macro)\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Check if we can run tests locally using wine\n\n# Add a fake test used to ensure data is deployed to WINDOWS_STAGING_TESTS before running\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Helper function TEST used to created rules to build, link, install and run tests\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Re-install dependencies in WINDOWS_STAGING_TESTS (and not in WINDOWSSTAGING)\n\n# to avoid packing testing related dlls in the installer\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Run test using wine\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set WINEPATH (%PATH%) to WINDOWS_STAGING_TESTS allowing wine to find dlls\n\n# WINEDEBUG=-all is used to avoid anoying winde debug outputs\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Build QML test runner\n\n# add_executable demands relative path, therefore ../ \n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SSRF test cases (TBD, convert to standard qTest setup)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# useful for debugging CMake issues\n\n# print_all_variables()\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "translations/CMakeLists.txt" : {
      "ObjectId" : "64a1e6bed4e5726380c52edc5aa6609831b1f5f6",
      "LastModified" : "2017-12-07T23:15:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# without this a \"make clean\" would delete the .ts files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# active translations - these will be built\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# disabled translations as they are below 40%:\n\n#\tsubsurface_hu.ts\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# enable the following two lines to recreate the .ts files\n\n#\n\n#\n\n#  DO NOT DO THIS MANUALLY -- USE THE SCRIPT IN ORDER TO FIX NUMERUSFORM\n\n#  =====================================================================\n\n# qt5_create_translation(TRANSLATION_MESSAGES ${CMAKE_SOURCE_DIR} ${TRANSLATION_FILES})\n\n# add_custom_target(translations_update DEPENDS ${TRANSLATION_MESSAGES})\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "QMAKE" : 2,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 9778
}