{
  "Repository" : "12518",
  "Revision" : "HEAD",
  "ObjectId" : "e49fe3610f5df8e1b30371b553bb17ed61a3ba70",
  "CommitTime" : "2017-07-18T14:01:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ac7e96395b2b1059508e5f20622112a1defcfdd5",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake --------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project ------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Git ----------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OS type ------------------------------------------------------------\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Architecture -------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# C++ flags ----------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# C++ 0x/11 ----------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if (${HAS_CXX11_THREAD})  IMMATURE IMPL?\n\n#  add_definitions (-DHAVE_CXX11_THREAD)\n\n#endif ()\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OpenMP  -------------------------------------------------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Core ---------------------------------------------------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# MATLAB --------------------------------------------------------------\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Linear algebra -----------------------------------------------------\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# OmniORB ------------------------------------------------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Fourier transform --------------------------------------------------\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Interpolations -----------------------------------------------------\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# OpenCL -------------------------------------------------------------\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# MPI ----------------------------------------------------------------\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#find_package (Scalapack)\n\n#if (${SCALAPACK_FOUND})\n\n#  message (STATUS \"Found Scalapack.\")\n\n#endif()\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# File IO ------------------------------------------------------------\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/AddCompilerFlag.cmake" : {
      "ObjectId" : "77eff4dd1de4cbfa1e05774ebf1e2e2f9d97b3d0",
      "LastModified" : "2014-02-07T10:03:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Add a given compiler flag to flags variables.\n\n# AddCompilerFlag(<flag> [<var>])\n\n# or\n\n# AddCompilerFlag(<flag> [C_FLAGS <var>] [CXX_FLAGS <var>] [C_RESULT <var>]\n\n#                        [CXX_RESULT <var>])\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2013 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compiling with FMA3 support may fail only at the assembler level.\n\n# In that case we need to have such an instruction in the test code\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Compiling with libc++ not only requires a compiler that understands it, but also\n\n# the libc++ headers itself\n",
        "Line" : 127,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "cmake/CMakeAddFortranSubdirectory.cmake" : {
      "ObjectId" : "abd910055cee449ce9351e996016ad75b5ac0f24",
      "LastModified" : "2014-08-20T18:48:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Use MinGW gfortran from VS if a fortran compiler is not found.\n\n# The 'add_fortran_subdirectory' function adds a subdirectory\n\n# to a project that contains a fortran only sub-project. The module\n\n# will check the current compiler and see if it can support fortran.\n\n# If no fortran compiler is found and the compiler is MSVC, then\n\n# this module will find the MinGW gfortran.  It will then use\n\n# an external project to build with the MinGW tools.  It will also\n\n# create imported targets for the libraries created.  This will only\n\n# work if the fortran code is built into a dll, so BUILD_SHARED_LIBS\n\n# is turned on in the project.  In addition the CMAKE_GNUtoMS option\n\n# is set to on, so that the MS .lib files are created.\n\n# Usage is as follows:\n\n#  cmake_add_fortran_subdirectory(\n\n#   <subdir>                # name of subdirectory\n\n#   PROJECT <project_name>  # project name in subdir top CMakeLists.txt\n\n#   ARCHIVE_DIR <dir>       # dir where project places .lib files\n\n#   RUNTIME_DIR <dir>       # dir where project places .dll files\n\n#   LIBRARIES <lib>...      # names of library targets to import\n\n#   LINK_LIBRARIES          # link interface libraries for LIBRARIES\n\n#    [LINK_LIBS <lib> <dep>...]...\n\n#   CMAKE_COMMAND_LINE ...  # extra command line flags to pass to cmake\n\n#   NO_EXTERNAL_INSTALL     # skip installation of external project\n\n#   )\n\n# Relative paths in ARCHIVE_DIR and RUNTIME_DIR are interpreted with respect\n\n# to the build directory corresponding to the source directory in which the\n\n# function is invoked.\n\n#\n\n# Limitations:\n\n#\n\n# NO_EXTERNAL_INSTALL is required for forward compatibility with a\n\n# future version that supports installation of the external project\n\n# binaries during \"make install\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011-2012 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for a MinGW gfortran.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Validate the MinGW gfortran we found.\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Configure scripts to run MinGW tools with the proper PATH.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Parse arguments to function\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# if we are not using MSVC without fortran support\n\n# then just use the usual add_subdirectory to build\n\n# the fortran library\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# if we have MSVC without Intel fortran then setup\n\n# external projects to build with mingw fortran\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# use the same directory that add_subdirectory would have used\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# create build and configure wrapper scripts\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# create the external project\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# make the external project always run make with each build\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# create imported targets for all libraries\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# now setup link libraries for targets\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# process current target and target_libs\n",
        "Line" : 187,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# zero out target and target_libs\n",
        "Line" : 189,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# save the current target and set start to FALSE\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# append the lib to target_libs\n",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# process anything that is left in target and target_libs\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cmake/CMakeCheckCompilerFlagCommonPatterns.cmake" : {
      "ObjectId" : "19b2bbcf3158ff519a01336e62b73973582781d9",
      "LastModified" : "2015-03-08T21:02:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2011 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011 Matthias Kretz <kretz@kde.org>\n\n# Copyright 2013 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do NOT include this module directly into any of your code. It is meant as\n\n# a library for Check*CompilerFlag.cmake modules. It's content may change in\n\n# any way between releases.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GNU\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# Intel\n\n# Intel\n",
        "Line" : 24,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : "# Intel\n",
        "Line" : 31,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 32,
        "CharPositionInLine" : 60
      },
      "5" : {
        "Text" : "# XL\n",
        "Line" : 35,
        "CharPositionInLine" : 70
      },
      "6" : {
        "Text" : "# AIX\n",
        "Line" : 36,
        "CharPositionInLine" : 69
      },
      "7" : {
        "Text" : "# PGI\n\n# Open64\n\n# Borland\n\n# SunStudio 12\n\n# Fujitsu\n",
        "Line" : 37,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 8
    },
    "cmake/CMakeDetermineFortranCompiler.cmake" : {
      "ObjectId" : "4d3fb907668a7de54fae84a6b2a18b2a459fe5f2",
      "LastModified" : "2015-03-08T21:02:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for Fortran programs\n\n# NOTE, a generator may set CMAKE_Fortran_COMPILER before\n\n# loading this file to force a compiler.\n\n# use environment variable FC first if defined by user, next use\n\n# the cmake variable CMAKE_GENERATOR_FC which can be defined by a generator\n\n# as a default compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prefer the environment variable CC\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# next try prefer the compiler specified by the generator\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# finally list compilers to try\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Known compilers:\n\n#  f77/f90/f95: generic compiler names\n\n#  g77: GNU Fortran 77 compiler\n\n#  gfortran: putative GNU Fortran 95+ compiler (in progress)\n\n#  fort77: native F77 compiler under HP-UX (and some older Crays)\n\n#  frt: Fujitsu F77 compiler\n\n#  pathf90/pathf95/pathf2003: PathScale Fortran compiler\n\n#  pgf77/pgf90/pgf95/pgfortran: Portland Group F77/F90/F95 compilers\n\n#  xlf/xlf90/xlf95: IBM (AIX) F77/F90/F95 compilers\n\n#  lf95: Lahey-Fujitsu F95 compiler\n\n#  fl32: Microsoft Fortran 77 \"PowerStation\" compiler\n\n#  af77: Apogee F77 compiler for Intergraph hardware running CLIX\n\n#  epcf90: \"Edinburgh Portable Compiler\" F90\n\n#  fort: Compaq (now HP) Fortran 90/95 compiler for Tru64 and Linux/Alpha\n\n#  ifc: Intel Fortran 95 compiler for Linux/x86\n\n#  efc: Intel Fortran 95 compiler for IA64\n\n#\n\n#  The order is 95 or newer compilers first, then 90,\n\n#  then 77 or older compilers, gnu is always last in the group,\n\n#  so if you paid for a compiler it is picked by default.\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Vendor-specific compiler names.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# we only get here if CMAKE_Fortran_COMPILER was specified using -D or a pre-made CMakeCache.txt\n",
        "Line" : 97,
        "CharPositionInLine" : 5
      },
      "8" : {
        "Text" : "# (e.g. via ctest) or set in CMAKE_TOOLCHAIN_FILE\n\n# if CMAKE_Fortran_COMPILER is a list of length 2, use the first item as\n\n# CMAKE_Fortran_COMPILER and the 2nd one as CMAKE_Fortran_COMPILER_ARG1\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# if a compiler was specified by the user but without path,\n\n# now try to find it with the full path\n\n# if it is found, force it into the cache,\n\n# if not, don't overwrite the setting (which was given by the user) with \"NOTFOUND\"\n\n# if the C compiler already had a path, reuse it for searching the CXX compiler\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Each entry in this list is a set of extra flags to try\n\n# adding to the compile line to see if it helps produce\n\n# a valid identification executable.\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Try compiling to an object file only.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Intel on windows does not preprocess by default.\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Build a small source file to identify the compiler.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Table of per-vendor compiler id flags with expected output.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Numerical Algorithms Group\n",
        "Line" : 145,
        "CharPositionInLine" : 53
      },
      "16" : {
        "Text" : "# Try to identify the compiler.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Fall back to old is-GNU test.\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Set old compiler and platform id variables.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# if we have a fortran cross compiler, they have usually some prefix, like\n\n# e.g. powerpc-linux-gfortran, arm-elf-gfortran or i586-mingw32msvc-gfortran , optionally\n\n# with a 3-component version number at the end (e.g. arm-eabi-gcc-4.5.2).\n\n# The other tools of the toolchain usually have the same prefix\n\n# NAME_WE cannot be used since then this test will fail for names lile\n\n# \"arm-unknown-nto-qnx6.3.0-gcc.exe\", where BASENAME would be\n\n# \"arm-unknown-nto-qnx6\" instead of the correct \"arm-unknown-nto-qnx6.3.0-\"\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# if \"llvm-\" is part of the prefix, remove it, since llvm doesn't have its own binutils\n\n# but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# configure variables set in this file for fast reload later on\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# IMMEDIATE must be here for compatibility mode <= 2.0\n",
        "Line" : 229,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 23
    },
    "cmake/CMakeFortranInformation.cmake" : {
      "ObjectId" : "512ec486497262561ec24f8bde076ae59468fca9",
      "LastModified" : "2015-03-08T21:02:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file sets the basic flags for the Fortran language in CMake.\n\n# It also loads the available platform file for the system-compiler\n\n# if it exists.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load compiler-specific information.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# since the gnu compiler has several names force g++\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We specify the compiler information in the system file for some\n\n# platforms, but this language may not have been enabled when the file\n\n# was first included.  Include it again to get the language info.\n\n# Remove this when all compiler info is removed from system files.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This should be included before the _INIT variables are\n\n# used to initialize the cache.  Since the rule variables\n\n# have if blocks on them, users can still define them here.\n\n# But, it should still be after the platform file so changes can\n\n# be made to those values.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Fortran needs cmake to do a requires step during its build process to\n\n# catch any modules\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create a set of shared library variable specific to Fortran\n\n# For 90% of the systems, these are the same flags as the C versions\n\n# so if these are not set just copy the flags from the c version\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# for most systems a module is the same as a shared library\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\n\n# copy the values from the LIBRARY variables\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# repeat for modules\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# avoid just having a space as the initial value for the cache\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# now define the following rule variables\n\n# CMAKE_Fortran_CREATE_SHARED_LIBRARY\n\n# CMAKE_Fortran_CREATE_SHARED_MODULE\n\n# CMAKE_Fortran_COMPILE_OBJECT\n\n# CMAKE_Fortran_LINK_EXECUTABLE\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# create a Fortran shared library\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# create a Fortran shared module just copy the shared library rule\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create a static archive incrementally for large object file counts.\n\n# If CMAKE_Fortran_CREATE_STATIC_LIBRARY is set it will override these.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# compile a Fortran file into an object file\n\n# (put -o after -c to workaround bug in at least one mpif77 wrapper)\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# link a fortran program\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set this variable so we can avoid loading this more than once.\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/CMakeParseArguments.cmake" : {
      "ObjectId" : "8553f38f5f090a2305c095ba5a8ef34427c19ed5",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n\n#                            \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 125,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/CMakeTestFortranCompiler.cmake" : {
      "ObjectId" : "b9e77c5f57ecb6fe299adf676b37e777363edd61",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2012 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\n\n# Assume the user has configured all compiler information.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Remove any cached result from an older CMake version.\n\n# We now store this in CMakeFortranCompiler.cmake.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\n\n# determine that that selected Fortran compiler can actually compile\n\n# and link the most basic of programs.   If not, a fatal error\n\n# is set and cmake stops processing commands and will not generate\n\n# any makefiles or projects.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Move result from cache to normal variable.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try to identify the ABI and configure it into CMakeFortranCompiler.cmake\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Test for Fortran 90 support by using an f90-specific construct.\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Re-configure to save learned information.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# IMMEDIATE must be here for compatibility mode <= 2.0\n",
        "Line" : 101,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 9
    },
    "cmake/CheckCCompilerFlag.cmake" : {
      "ObjectId" : "53f345473485b655dc4e8801f60008a5c3dfff5c",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckCCompilerFlag\n\n# ------------------\n\n#\n\n# Check whether the C compiler supports a given flag.\n\n#\n\n# CHECK_C_COMPILER_FLAG(<flag> <var>)\n\n#\n\n# ::\n\n#\n\n#   <flag> - the compiler flag\n\n#   <var>  - variable to store the result\n\n#            Will be created as an internal cache variable.\n\n#\n\n# This internally calls the check_c_source_compiles macro and sets\n\n# CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for\n\n# CheckCSourceCompiles for a listing of variables that can otherwise\n\n# modify the build.  The result only tells that the compiler does not\n\n# give an error message when it encounters the flag.  If the flag has\n\n# any effect or even a specific one is beyond the scope of this module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2011 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normalize locale during test compilation.\n",
        "Line" : 44,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 52,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# GNU\n",
        "Line" : 53,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 5
    },
    "cmake/CheckCSourceCompiles.cmake" : {
      "ObjectId" : "6e80fb535ccd38f89685c47b03612246eb565e9b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckCSourceCompiles\n\n# --------------------\n\n#\n\n# Check if given C source compiles and links into an executable\n\n#\n\n# CHECK_C_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])\n\n#\n\n# ::\n\n#\n\n#   <code>       - source code to try to compile, must define 'main'\n\n#   <var>        - variable to store whether the source code compiled\n\n#                  Will be created as an internal cache variable.\n\n#   <fail-regex> - fail if test output matches this regex\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckCXX11Features.cmake" : {
      "ObjectId" : "cec993e3824346680c75ae8d2a551f03bfe70fe1",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check which parts of the C++11 standard the compiler supports\n\n#\n\n# When found it will set the following variables\n\n#\n\n#  CXX11_COMPILER_FLAGS         - the compiler flags needed to get C++11 features\n\n#\n\n#  HAS_CXX11_AUTO               - auto keyword\n\n#  HAS_CXX11_AUTO_RET_TYPE      - function declaration with deduced return types\n\n#  HAS_CXX11_CLASS_OVERRIDE     - override and final keywords for classes and methods\n\n#  HAS_CXX11_CONSTEXPR          - constexpr keyword\n\n#  HAS_CXX11_CSTDINT_H          - cstdint header\n\n#  HAS_CXX11_DECLTYPE           - decltype keyword\n\n#  HAS_CXX11_FUNC               - __func__ preprocessor constant\n\n#  HAS_CXX11_INITIALIZER_LIST   - initializer list\n\n#  HAS_CXX11_LAMBDA             - lambdas\n\n#  HAS_CXX11_LIB_REGEX          - regex library\n\n#  HAS_CXX11_LONG_LONG          - long long signed & unsigned types\n\n#  HAS_CXX11_NULLPTR            - nullptr\n\n#  HAS_CXX11_RVALUE_REFERENCES  - rvalue references\n\n#  HAS_CXX11_SIZEOF_MEMBER      - sizeof() non-static members\n\n#  HAS_CXX11_STATIC_ASSERT      - static_assert()\n\n#  HAS_CXX11_VARIADIC_TEMPLATES - variadic templates\n\n#  HAS_CXX11_SHARED_PTR         - Shared Pointer\n\n#  HAS_CXX11_THREAD             - thread\n\n#  HAS_CXX11_MUTEX              - mutex \n\n#  HAS_CXX11_NOEXCEPT           - noexcept \n\n#  HAS_CXX11_CONDITIONAL        - conditional type definitions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011,2012 Rolf Eike Beer <eike@sf-mail.de>\n\n# Copyright 2012 Andreas Weis\n\n# Copyright 2014 Kaveh Vahedipour <kaveh@codeare.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Each feature may have up to 3 checks, every one of them in it's own file\n\n# FEATURE.cpp              - example that must build and return 0 when run\n\n# FEATURE_fail.cpp         - example that must build, but may not return 0 when run\n\n# FEATURE_fail_compile.cpp - example that must fail compilation\n\n#\n\n# The first one is mandatory, the latter 2 are optional and do not depend on\n\n# each other (i.e. only one may be present).\n\n#\n\n# Modification for std::thread (Kaveh Vahdipour, Forschungszentrum Juelich)\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n### Check for needed compiler flags\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cxx11_check_feature(\"cstdint\" HAS_CXX11_CSTDINT_H)\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#cxx11_check_feature(\"long_long\" HAS_CXX11_LONG_LONG)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "fab3a053d04ce670766f77bf416662c06d21e41b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckCXXCompilerFlag\n\n# --------------------\n\n#\n\n# Check whether the CXX compiler supports a given flag.\n\n#\n\n# CHECK_CXX_COMPILER_FLAG(<flag> <var>)\n\n#\n\n# ::\n\n#\n\n#   <flag> - the compiler flag\n\n#   <var>  - variable to store the result\n\n#\n\n# This internally calls the check_cxx_source_compiles macro and sets\n\n# CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for\n\n# CheckCXXSourceCompiles for a listing of variables that can otherwise\n\n# modify the build.  The result only tells that the compiler does not\n\n# give an error message when it encounters the flag.  If the flag has\n\n# any effect or even a specific one is beyond the scope of this module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2010 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normalize locale during test compilation.\n",
        "Line" : 43,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 51,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# GNU\n",
        "Line" : 52,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 5
    },
    "cmake/CheckCXXSourceCompiles.cmake" : {
      "ObjectId" : "6d52ec6b8d7645690d9ad3af510edb4144b60fb0",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckCXXSourceCompiles\n\n# ----------------------\n\n#\n\n# Check if given C++ source compiles and links into an executable\n\n#\n\n# CHECK_CXX_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])\n\n#\n\n# ::\n\n#\n\n#   <code>       - source code to try to compile, must define 'main'\n\n#   <var>        - variable to store whether the source code compiled\n\n#                  Will be created as an internal cache variable.\n\n#   <fail-regex> - fail if test output matches this regex\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckCXXSymbolExists.cmake" : {
      "ObjectId" : "084fbb422f5a607b4083e5d7108aefbf90d9aa3c",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckCXXSymbolExists\n\n# --------------------\n\n#\n\n# Check if a symbol exists as a function, variable, or macro in C++\n\n#\n\n# CHECK_CXX_SYMBOL_EXISTS(<symbol> <files> <variable>)\n\n#\n\n# Check that the <symbol> is available after including given header\n\n# <files> and store the result in a <variable>.  Specify the list of\n\n# files in one argument as a semicolon-separated list.\n\n# CHECK_CXX_SYMBOL_EXISTS() can be used to check in C++ files, as\n\n# opposed to CHECK_SYMBOL_EXISTS(), which works only for C.\n\n#\n\n# If the header files define the symbol as a macro it is considered\n\n# available and assumed to work.  If the header files declare the symbol\n\n# as a function or variable then the symbol must also be available for\n\n# linking.  If the symbol is a type or enum value it will not be\n\n# recognized (consider using CheckTypeSize or CheckCSourceCompiles).\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckFortranFunctionExists.cmake" : {
      "ObjectId" : "bd52f61b65f859ea8189bd3d30ca86520fce48e8",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckFortranFunctionExists\n\n# --------------------------\n\n#\n\n# macro which checks if the Fortran function exists\n\n#\n\n# CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)\n\n#\n\n# ::\n\n#\n\n#   FUNCTION - the name of the Fortran function\n\n#   VARIABLE - variable to store the result\n\n#              Will be created as an internal cache variable.\n\n#\n\n#\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    message(STATUS \"${OUTPUT}\")\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CheckFunctionExists.cmake" : {
      "ObjectId" : "d277c328226b30dd35ebabd11003ed4b69409f0d",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckFunctionExists\n\n# -------------------\n\n#\n\n# Check if a C function can be linked\n\n#\n\n# CHECK_FUNCTION_EXISTS(<function> <variable>)\n\n#\n\n# Check that the <function> is provided by libraries on the system and\n\n# store the result in a <variable>.  This does not verify that any\n\n# system header file declares the function, only that it can be found at\n\n# link time (consider using CheckSymbolExists).\n\n# <variable> will be created as an internal cache variable.\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckIncludeFile.cmake" : {
      "ObjectId" : "402b37c6aa0f40051dc04a554aeb33e7de8257c5",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckIncludeFile\n\n# ----------------\n\n#\n\n# macro which checks the include file exists.\n\n#\n\n# CHECK_INCLUDE_FILE(INCLUDE VARIABLE)\n\n#\n\n# ::\n\n#\n\n#   INCLUDE  - name of include file\n\n#   VARIABLE - variable to return result\n\n#              Will be created as an internal cache variable.\n\n#\n\n#\n\n#\n\n# an optional third argument is the CFlags to add to the compile line or\n\n# you can use CMAKE_REQUIRED_FLAGS\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckIncludeFileCXX.cmake" : {
      "ObjectId" : "eae1730fb8d7a9da54018f207299b11e98278d87",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckIncludeFileCXX\n\n# -------------------\n\n#\n\n# Check if the include file exists.\n\n#\n\n# ::\n\n#\n\n#   CHECK_INCLUDE_FILE_CXX(INCLUDE VARIABLE)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#   INCLUDE  - name of include file\n\n#   VARIABLE - variable to return result\n\n#              Will be created as an internal cache variable.\n\n#\n\n#\n\n#\n\n# An optional third argument is the CFlags to add to the compile line or\n\n# you can use CMAKE_REQUIRED_FLAGS.\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckMicCCompilerFlag.cmake" : {
      "ObjectId" : "eae725b790a5368270a814cc8be88cacfafb60b8",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the MIC C compiler supports a given flag.\n\n# CHECK_MIC_C_COMPILER_FLAG(<flag> <var>)\n\n#  <flag> - the compiler flag\n\n#  <var>  - variable to store the result\n\n# This internally calls the check_c_source_compiles macro.  See help\n\n# for CheckCSourceCompiles for a listing of variables that can\n\n# modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011-2013 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GNU\n\n# clang\n\n# GNU\n\n# GNU\n\n# GNU\n\n# MSVC\n\n# HP\n\n# SunPro\n\n# XL\n\n# Open64\n\n# ICC\n\n# ICC\n\n# ICC: File not found\n",
        "Line" : 62,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 3
    },
    "cmake/CheckMicCXXCompilerFlag.cmake" : {
      "ObjectId" : "c0444c4cc2d06a36041032225f495287d85f1b59",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the MIC CXX compiler supports a given flag.\n\n# CHECK_MIC_CXX_COMPILER_FLAG(<flag> <var>)\n\n#  <flag> - the compiler flag\n\n#  <var>  - variable to store the result\n\n# This internally calls the check_cxx_source_compiles macro.  See help\n\n# for CheckCXXSourceCompiles for a listing of variables that can\n\n# modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011-2013 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GNU\n\n# clang\n\n# GNU\n\n# GNU\n\n# GNU\n\n# MSVC\n\n# HP\n\n# SunPro\n\n# XL\n\n# Open64\n\n# ICC\n\n# ICC\n\n# ICC: File not found\n",
        "Line" : 62,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 3
    },
    "cmake/CheckStructHasMember.cmake" : {
      "ObjectId" : "6c15205921bd5cda67f6940fbdea78bf1a6052f3",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckStructHasMember\n\n# --------------------\n\n#\n\n# Check if the given struct or class has the specified member variable\n\n#\n\n# ::\n\n#\n\n#  CHECK_STRUCT_HAS_MEMBER(<struct> <member> <header> <variable>\n\n#                          [LANGUAGE <language>])\n\n#\n\n# ::\n\n#\n\n#   <struct> - the name of the struct or class you are interested in\n\n#   <member> - the member which existence you want to check\n\n#   <header> - the header(s) where the prototype should be declared\n\n#   <variable> - variable to store the result\n\n#   <language> - the compiler to use (C or CXX)\n\n#\n\n#\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n\n#\n\n#\n\n#\n\n# Example: CHECK_STRUCT_HAS_MEMBER(\"struct timeval\" tv_sec sys/select.h\n\n# HAVE_TIMEVAL_TV_SEC LANGUAGE C)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckTypeSize.cmake" : {
      "ObjectId" : "372a8ff78c9a1228da216a73f03888e07985f71e",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckTypeSize\n\n# -------------\n\n#\n\n# Check sizeof a type\n\n#\n\n# ::\n\n#\n\n#   CHECK_TYPE_SIZE(TYPE VARIABLE [BUILTIN_TYPES_ONLY]\n\n#                                 [LANGUAGE <language>])\n\n#\n\n# Check if the type exists and determine its size.  On return,\n\n# \"HAVE_${VARIABLE}\" holds the existence of the type, and \"${VARIABLE}\"\n\n# holds one of the following:\n\n#\n\n# ::\n\n#\n\n#    <size> = type has non-zero size <size>\n\n#    \"0\"    = type has arch-dependent size (see below)\n\n#    \"\"     = type does not exist\n\n#\n\n# Both ``HAVE_${VARIABLE}`` and ``${VARIABLE}`` will be created as internal\n\n# cache variables.\n\n#\n\n# Furthermore, the variable \"${VARIABLE}_CODE\" holds C preprocessor code\n\n# to define the macro \"${VARIABLE}\" to the size of the type, or leave\n\n# the macro undefined if the type does not exist.\n\n#\n\n# The variable \"${VARIABLE}\" may be \"0\" when CMAKE_OSX_ARCHITECTURES has\n\n# multiple architectures for building OS X universal binaries.  This\n\n# indicates that the type size varies across architectures.  In this\n\n# case \"${VARIABLE}_CODE\" contains C preprocessor tests mapping from\n\n# each architecture macro to the corresponding type size.  The list of\n\n# architecture macros is stored in \"${VARIABLE}_KEYS\", and the value for\n\n# each key is stored in \"${VARIABLE}-${KEY}\".\n\n#\n\n# If the BUILTIN_TYPES_ONLY option is not given, the macro checks for\n\n# headers <sys/types.h>, <stdint.h>, and <stddef.h>, and saves results\n\n# in HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H.  The type size\n\n# check automatically includes the available headers, thus supporting\n\n# checks of types defined in the headers.\n\n#\n\n# If LANGUAGE is set, the specified compiler will be used to perform the\n\n# check. Acceptable values are C and CXX\n\n#\n\n# Despite the name of the macro you may use it to check the size of more\n\n# complex expressions, too.  To check e.g.  for the size of a struct\n\n# member you can do something like this:\n\n#\n\n# ::\n\n#\n\n#   check_type_size(\"((struct something*)0)->member\" SIZEOF_MEMBER)\n\n#\n\n#\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n\n#   CMAKE_EXTRA_INCLUDE_FILES = list of extra headers to include\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Helper function.  DO NOT CALL DIRECTLY.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include header files.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Perform the check.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The check compiled.  Load information from the binary.\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Parse the information strings.\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Get the type size.\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Get the architecture map key.\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Update the architecture-to-size map.\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# The check failed to compile.\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# parse arguments\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# change to MATCHES for more keys\n",
        "Line" : 208,
        "CharPositionInLine" : 43
      },
      "14" : {
        "Text" : "# Optionally check for standard headers.\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Compute or load the size or size map.\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Create preprocessor code.\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindBLAS.cmake" : {
      "ObjectId" : "f4be63bb1bb1e03d7f166081e7e2d5e3da4fadbf",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find BLAS library\n\n# This module finds an installed fortran library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#    is found\n\n#  BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n\n#    and -L).\n\n#  BLAS_LIBRARIES - uncached list of libraries (using full path name) to\n\n#    link against to use BLAS\n\n#  BLAS95_LIBRARIES - uncached list of libraries (using full path name)\n\n#    to link against to use BLAS95 interface\n\n#  BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n\n#    is found\n\n#  BLA_STATIC  if set on this determines what kind of linkage we do (static)\n\n#  BLA_VENDOR  if set checks only the specified vendor, if not set checks\n\n#     all the possibilities\n\n#  BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n\n##########\n\n### List of vendors (BLA_VENDOR) valid in this module\n\n##  Goto,ATLAS PhiPACK,CXML,DXML,SunPerf,SCSL,SGIMATH,IBMESSL,Intel10_32 (intel mkl v10 32 bit),Intel10_64lp (intel mkl v10 64 bit,lp thread model, lp64 model),\n\n##  Intel10_64lp_seq (intel mkl v10 64 bit,sequential code, lp64 model),\n\n##  Intel( older versions of mkl 32 and 64 bit), ACML,ACML_MP,ACML_GPU,Apple, NAS, Generic\n\n# C/CXX should be enabled to use Intel mkl\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check the language being used\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#  message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# try to find acml in \"standard\" paths\n",
        "Line" : 283,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "#   list(GET _ACML_GPU_ROOT 0 _ACML_GPU_ROOT)\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\n\n# We'll just use the same directory twice\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\n",
        "Line" : 381,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# ACML\n",
        "Line" : 412,
        "CharPositionInLine" : 9
      },
      "24" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# old version\n",
        "Line" : 480,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 484,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# old version\n",
        "Line" : 511,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 515,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "#older vesions of intel mkl libs\n",
        "Line" : 524,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 32
    },
    "cmake/FindBoost.cmake" : {
      "ObjectId" : "99293c13ceae171beb293f49a2981ef5d1193fbc",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR         - Directory containing Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directory in Boost_LIBRARY_DIR and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost headers and some *static* libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON) # only find static libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2012 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2012 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 241,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 246,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 250,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR.\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR.\n",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# If Boost_LIBRARY_DIR is known then search only there.\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Good luck!\n",
        "Line" : 400,
        "CharPositionInLine" : 18
      },
      "24" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 401,
        "CharPositionInLine" : 32
      },
      "25" : {
        "Text" : "# Good luck!\n",
        "Line" : 402,
        "CharPositionInLine" : 18
      },
      "26" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 403,
        "CharPositionInLine" : 32
      },
      "27" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 410,
        "CharPositionInLine" : 36
      },
      "28" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 418,
        "CharPositionInLine" : 36
      },
      "29" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 421,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 425,
        "CharPositionInLine" : 14
      },
      "31" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 429,
        "CharPositionInLine" : 14
      },
      "32" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 434,
        "CharPositionInLine" : 12
      },
      "33" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 494,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 497,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 543,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 625,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 630,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 635,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 682,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 708,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 721,
        "CharPositionInLine" : 6
      },
      "61" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 734,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 756,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 781,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 806,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 821,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 827,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Clear Boost_LIBRARY_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 851,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 904,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 916,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 930,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 938,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 957,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 970,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1005,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1015,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1041,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1060,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1065,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1072,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1075,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1093,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1119,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1122,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1132,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1152,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1159,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1185,
        "CharPositionInLine" : 6
      },
      "97" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1198,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1213,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 1226,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 100
    },
    "cmake/FindDoxygen.cmake" : {
      "ObjectId" : "a456d9c9f351f7806bea6adea4a9b9892d4c707b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindDoxygen\n\n# -----------\n\n#\n\n# This module looks for Doxygen and the path to Graphviz's dot\n\n#\n\n# Doxygen is a documentation generation tool.  Please see\n\n# http://www.doxygen.org\n\n#\n\n# This module accepts the following optional variables:\n\n#\n\n# ::\n\n#\n\n#    DOXYGEN_SKIP_DOT       = If true this module will skip trying to find Dot\n\n#                             (an optional component often used by Doxygen)\n\n#\n\n#\n\n#\n\n# This modules defines the following variables:\n\n#\n\n# ::\n\n#\n\n#    DOXYGEN_EXECUTABLE     = The path to the doxygen command.\n\n#    DOXYGEN_FOUND          = Was Doxygen found or not?\n\n#    DOXYGEN_VERSION        = The version reported by doxygen --version\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    DOXYGEN_DOT_EXECUTABLE = The path to the dot program used by doxygen.\n\n#    DOXYGEN_DOT_FOUND      = Was Dot found or not?\n\n#    DOXYGEN_DOT_PATH       = The path to dot not including the executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For backwards compatibility support\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ===== Rationale for OS X AppBundle mods below =====\n\n#     With the OS X GUI version, Doxygen likes to be installed to /Applications and\n\n#     it contains the doxygen executable in the bundle. In the versions I've\n\n#     seen, it is located in Resources, but in general, more often binaries are\n\n#     located in MacOS.\n\n#\n\n#     NOTE: The official Doxygen.app that is distributed for OS X uses non-standard\n\n#     conventions.  Instead of the command-line \"doxygen\" tool being placed in\n\n#     Doxygen.app/Contents/MacOS, \"Doxywizard\" is placed there instead and\n\n#     \"doxygen\" is placed in Contents/Resources.  This is most likely done\n\n#     so that something happens when people double-click on the Doxygen.app\n\n#     package.  Unfortunately, CMake gets confused by this as when it sees the\n\n#     bundle it uses \"Doxywizard\" as the executable to use instead of\n\n#     \"doxygen\".  Therefore to work-around this issue we temporarily disable\n\n#     the app-bundle feature, just for this CMake module:\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  Save the old setting\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Disable the App-bundle detection feature\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#     FYI:\n\n#     In the older versions of OS X Doxygen, dot was included with the\n\n#     Doxygen bundle. But the new versions require you to download\n\n#     Graphviz.app which contains \"dot\" in it's bundle.\n\n# ============== End OSX stuff ================\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Find Doxygen...\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Find Dot...\n\n#\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The Doxyfile wants the path to Dot, not the entire path and executable\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#\n\n# Backwards compatibility...\n\n#\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Restore the old app-bundle setting setting\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Maintain the _FOUND variables as \"YES\" or \"NO\" for backwards compatibility\n\n# (allows people to stuff them directly into Doxyfile with configure_file())\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For backwards compatibility support\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/FindFFTW3.cmake" : {
      "ObjectId" : "eccfe9f45d9fc60c1bf6de6feded7411d9239788",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find FFTW3.\n\n# Usage: find_package(FFTW3 [COMPONENTS [single double long-double threads]])\n\n#\n\n# Variables used by this module:\n\n#  FFTW3_ROOT_DIR             - FFTW3 root directory\n\n# Variables defined by this module:\n\n#  FFTW3_FOUND                - system has FFTW3\n\n#  FFTW3_INCLUDE_DIR          - the FFTW3 include directory (cached)\n\n#  FFTW3_INCLUDE_DIRS         - the FFTW3 include directories\n\n#                               (identical to FFTW3_INCLUDE_DIR)\n\n#  FFTW3[FL]?_LIBRARY         - the FFTW3 library - double, single(F), \n\n#                               long-double(L) precision (cached)\n\n#  FFTW3[FL]?_THREADS_LIBRARY - the threaded FFTW3 library - double, single(F), \n\n#                               long-double(L) precision (cached)\n\n#  FFTW3_LIBRARIES            - list of all FFTW3 libraries found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2009-2010\n\n# ASTRON (Netherlands Institute for Radio Astronomy)\n\n# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands\n\n#\n\n# This file is part of the LOFAR software suite.\n\n# The LOFAR software suite is free software: you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License as published\n\n# by the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# The LOFAR software suite is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License along\n\n# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n# $Id: FindFFTW3.cmake 15918 2010-06-25 11:12:42Z loose $\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use double precision by default.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Loop over each component.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If using threads, we need to link against threaded libraries as well.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Keep a list of variable names that we need to pass on to\n\n# find_package_handle_standard_args().\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Search for all requested libraries.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for the header file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set FFTW_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindGSL.cmake" : {
      "ObjectId" : "e110d1cd178ee69a03d0791ccd62ae9df5bb62c5",
      "LastModified" : "2015-11-24T18:41:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## \n\n## Try to find gnu scientific library GSL  \n\n## (see http://www.gnu.org/software/gsl/)\n\n## Once run this will define: \n\n## \n\n## GSL_FOUND       = system has GSL lib\n\n##\n\n## GSL_LIBRARIES   = full path to the libraries\n\n##    on Unix/Linux with additional linker flags from \"gsl-config --libs\"\n\n## \n\n## CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially \"`gsl-config --cxxflags`\"\n\n##\n\n## GSL_INCLUDE_DIR      = where to find headers \n\n##\n\n## GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix\n\n## GSL_EXE_LINKER_FLAGS = rpath on Unix\n\n##\n\n## Felix Woelk 07/2004\n\n## minor corrections Jan Woetzel\n\n##\n\n## www.mip.informatik.uni-kiel.de\n\n## --------------------------------\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MSVC version of the lib is just called 'cblas'\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# MESSAGE(\"DBG GSL_CONFIG ${GSL_CONFIG}\")\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# set CXXFLAGS to be fed into CXX_FLAGS by the user:\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# set INCLUDE_DIRS to prefix+include\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# set link libraries and link flags\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "## extract link dirs for rpath  \n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "## split off the link dirs (for rpath)\n\n## use regular expression to match wildcard equivalent \"-L*<endchar>\"\n\n## with <endchar> is a space or a semicolon\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES_WITH_PREFIX=${GSL_LINK_DIRECTORIES_WITH_PREFIX}\")\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "## remove prefix -L because we need the pure directory for LINK_DIRECTORIES\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES=${GSL_LINK_DIRECTORIES}\")\n\n#      MESSAGE(\"DBG  GSL_EXE_LINKER_FLAGS=${GSL_EXE_LINKER_FLAGS}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#      ADD_DEFINITIONS(\"-DHAVE_GSL\")\n\n#      SET(GSL_DEFINITIONS \"-DHAVE_GSL\")\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# TODO: Avoid cmake complaints if GSL is not found\n",
        "Line" : 113,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 13
    },
    "cmake/FindHDF5.cmake" : {
      "ObjectId" : "91e9e95d2982149dcc041c30db938e622c69f417",
      "LastModified" : "2015-11-24T18:41:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindHDF5\n\n# --------\n\n#\n\n# Find HDF5, a library for reading and writing self describing array data.\n\n#\n\n#\n\n#\n\n# This module invokes the HDF5 wrapper compiler that should be installed\n\n# alongside HDF5.  Depending upon the HDF5 Configuration, the wrapper\n\n# compiler is called either h5cc or h5pcc.  If this succeeds, the module\n\n# will then call the compiler with the -show argument to see what flags\n\n# are used when compiling an HDF5 client application.\n\n#\n\n# The module will optionally accept the COMPONENTS argument.  If no\n\n# COMPONENTS are specified, then the find module will default to finding\n\n# only the HDF5 C library.  If one or more COMPONENTS are specified, the\n\n# module will attempt to find the language bindings for the specified\n\n# components.  The only valid components are C, CXX, Fortran, HL, and\n\n# Fortran_HL.  If the COMPONENTS argument is not given, the module will\n\n# attempt to find only the C bindings.\n\n#\n\n# On UNIX systems, this module will read the variable\n\n# HDF5_USE_STATIC_LIBRARIES to determine whether or not to prefer a\n\n# static link to a dynamic link for HDF5 and all of it's dependencies.\n\n# To use this feature, make sure that the HDF5_USE_STATIC_LIBRARIES\n\n# variable is set before the call to find_package.\n\n#\n\n# To provide the module with a hint about where to find your HDF5\n\n# installation, you can set the environment variable HDF5_ROOT.  The\n\n# Find module will then look in this path when searching for HDF5\n\n# executables, paths, and libraries.\n\n#\n\n# Both the serial and parallel HDF5 wrappers are considered and the first\n\n# directory to contain either one will be used.  In the event that both appear\n\n# in the same directory the serial version is preferentially selected. This\n\n# behavior can be reversed by setting the variable HDF5_PREFER_PARALLEL to\n\n# true.\n\n#\n\n# In addition to finding the includes and libraries required to compile\n\n# an HDF5 client application, this module also makes an effort to find\n\n# tools that come with the HDF5 distribution that may be useful for\n\n# regression testing.\n\n#\n\n# This module will define the following variables:\n\n#\n\n# ::\n\n#\n\n#   HDF5_INCLUDE_DIRS - Location of the hdf5 includes\n\n#   HDF5_INCLUDE_DIR - Location of the hdf5 includes (deprecated)\n\n#   HDF5_DEFINITIONS - Required compiler definitions for HDF5\n\n#   HDF5_C_LIBRARIES - Required libraries for the HDF5 C bindings.\n\n#   HDF5_CXX_LIBRARIES - Required libraries for the HDF5 C++ bindings\n\n#   HDF5_Fortran_LIBRARIES - Required libraries for the HDF5 Fortran bindings\n\n#   HDF5_HL_LIBRARIES - Required libraries for the HDF5 high level API\n\n#   HDF5_Fortran_HL_LIBRARIES - Required libraries for the high level Fortran\n\n#                               bindings.\n\n#   HDF5_LIBRARIES - Required libraries for all requested bindings\n\n#   HDF5_FOUND - true if HDF5 was found on the system\n\n#   HDF5_VERSION - HDF5 version in format Major.Minor.Release\n\n#   HDF5_LIBRARY_DIRS - the full set of library directories\n\n#   HDF5_IS_PARALLEL - Whether or not HDF5 was found with parallel IO support\n\n#   HDF5_C_COMPILER_EXECUTABLE - the path to the HDF5 C wrapper compiler\n\n#   HDF5_CXX_COMPILER_EXECUTABLE - the path to the HDF5 C++ wrapper compiler\n\n#   HDF5_Fortran_COMPILER_EXECUTABLE - the path to the HDF5 Fortran wrapper compiler\n\n#   HDF5_DIFF_EXECUTABLE - the path to the HDF5 dataset comparison tool\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2015 Axel Huebl, Helmholtz-Zentrum Dresden - Rossendorf\n\n# Copyright 2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This module is maintained by Will Dicharry <wdicharry@stellarscience.com>.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of the valid HDF5 components\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Validate the list of find components.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the extra specified components, ensuring that they are valid.\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Determine whether to search for serial or parallel executable first\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to find the HDF5 wrapper compilers\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#NAMES_PER_DIR\n",
        "Line" : 125,
        "CharPositionInLine" : 35
      },
      "9" : {
        "Text" : "# NAMES_PER_DIR\n",
        "Line" : 132,
        "CharPositionInLine" : 36
      },
      "10" : {
        "Text" : "#NAMES_PER_DIR\n",
        "Line" : 139,
        "CharPositionInLine" : 41
      },
      "11" : {
        "Text" : "# Invoke the HDF5 wrapper compiler.  The compiler return value is stored to the\n\n# return_value argument, the text output is stored to the output variable.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# do nothing\n",
        "Line" : 166,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Parse a compile line for definitions, includes, library paths, and libraries.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Match the include paths\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Match the definitions\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Match the library paths\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# now search for the library names specified in the compile line (match -l...)\n\n# match only -l's preceded by a space or comma\n\n# this is to exclude directory names like xxx-linux/\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# strip the -l from all of the library flags and add to the search list\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Try to find HDF5 using an installed hdf5-config.cmake\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# seed the initial lists of libraries to find with items we know we need\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# take a guess that the includes may be in the 'include' sibling\n\n# directory of a library directory.\n",
        "Line" : 270,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "# set the definitions for the language bindings.\n",
        "Line" : 277,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# find the HDF5 include directories\n",
        "Line" : 280,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# find the HDF5 libraries\n",
        "Line" : 305,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# According to bug 1643 on the CMake bug tracker, this is the\n\n# preferred method for searching for a static library.\n\n# See https://cmake.org/Bug/view.php?id=1643.  We search\n\n# first for the full static library name, but fall back to a\n\n# generic search on the name if the static search fails.\n",
        "Line" : 308,
        "CharPositionInLine" : 16
      },
      "26" : {
        "Text" : "# Append the libraries for this language binding to the list of all\n\n# required libraries.\n",
        "Line" : 334,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# We may have picked up some duplicates in various lists during the above\n\n# process for the language bindings (both the C and C++ bindings depend on\n\n# libz for example).  Remove the duplicates. It appears that the default\n\n# CMake behavior is to remove duplicates from the end of a list. However,\n\n# for link lines, this is incorrect since unresolved symbols are searched\n\n# for down the link line. Therefore, we reverse the list, remove the\n\n# duplicates, and then reverse it again to get the duplicates removed from\n\n# the beginning.\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# If the HDF5 include directory was found, open H5pubconf.h to determine if\n\n# HDF5 was compiled with parallel IO support\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# For backwards compatibility we set HDF5_INCLUDE_DIR to the value of\n\n# HDF5_INCLUDE_DIRS\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 30
    },
    "cmake/FindITK.cmake" : {
      "ObjectId" : "c9d39eb981f6933d61fc6cb4e0e41f26baabdeab",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindITK\n\n# -------\n\n#\n\n# Find an ITK installation or build tree.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When ITK is found, the ITKConfig.cmake file is sourced to setup the\n\n# location and configuration of ITK.  Please read this file, or\n\n# ITKConfig.cmake.in from the ITK source tree for the full list of\n\n# definitions.  Of particular interest is ITK_USE_FILE, a CMake source file\n\n# that can be included to set the include directories, library directories,\n\n# and preprocessor macros.  In addition to the variables read from\n\n# ITKConfig.cmake, this find module also defines\n\n#  ITK_DIR  - The directory containing ITKConfig.cmake.\n\n#             This is either the root of the build tree,\n\n#             or the lib/InsightToolkit directory.\n\n#             This is the only cache entry.\n\n#\n\n#  ITK_FOUND - Whether ITK was found.  If this is true,\n\n#              ITK_DIR is okay.\n\n#\n\n#  USE_ITK_FILE - The full path to the UseITK.cmake file.\n\n#                 This is provided for backward\n\n#                 compatibility.  Use ITK_USE_FILE\n\n#                 instead.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2010 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use the Config mode of the find_package() command to find ITKConfig.\n\n# If this succeeds (possibly because ITK_DIR is already set), the\n\n# command will have already loaded ITKConfig.cmake and set ITK_FOUND.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set USE_ITK_FILE for backward-compatibility.\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/FindIsmrmrd.cmake" : {
      "ObjectId" : "f09b5a8389188aeb0a3be59a717d588bb7bee128",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ISMRMRRD\n\n#   ISMRMRD_FOUND            - true if an ISMRMRD installation is found.\n\n#   ISMRMRD_INCLUDE_DIR      - where to find ismrmrd.h, etc.\n\n#   ISMRMRD_LIBRARIES        - libismrmrd.so and libismrmrd_xml.so\n\n#   ISMRMRD_SCHEMA_DIR       - where to find ismrmrd.xsd       \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(ISMRMRD_FOUND)\n\n#  message(\"ISMRMRD found ${ISMRMRD_LIBRARIES}\")\n\n#endif(ISMRMRD_FOUND)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindLAPACK.cmake" : {
      "ObjectId" : "093659c048dfbf2c6a297f865382e4b9b971e1ae",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface\n\n#    is found\n\n#  LAPACK_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n\n#    and -L).\n\n#  LAPACK_LIBRARIES - uncached list of libraries (using full path name) to\n\n#    link against to use LAPACK\n\n#  LAPACK95_LIBRARIES - uncached list of libraries (using full path name) to\n\n#    link against to use LAPACK95\n\n#  LAPACK95_FOUND - set to true if a library implementing the LAPACK f95\n\n#    interface is found\n\n#  BLA_STATIC  if set on this determines what kind of linkage we do (static)\n\n#  BLA_VENDOR  if set checks only the specified vendor, if not set checks\n\n#     all the possibilities\n\n#  BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n\n### List of vendors (BLA_VENDOR) valid in this module\n\n##  Intel(mkl), ACML,Apple, NAS, Generic\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: move this stuff to separate module\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#  message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#acml lapack\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Apple LAPACK library?\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#intel lapack\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# old\n",
        "Line" : 234,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# new >= 10.3\n",
        "Line" : 246,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# old\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# new >= 10.3\n",
        "Line" : 271,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 17
    },
    "cmake/FindMKL.cmake" : {
      "ObjectId" : "720904637f1e776f5d12657bd87fef4f8f139c64",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find INTEL MKL library\n\n#\n\n# This module finds the Intel Mkl libraries.\n\n#\n\n# This module sets the following variables:\n\n#  MKL_FOUND - set to true if a library implementing the CBLAS interface is found\n\n#  MKL_VERSION - best guess\n\n#  MKL_INCLUDE_DIR - path to include dir.\n\n#  MKL_LIBRARIES - list of libraries for base mkl\n\n#  MKL_LAPACK_LIBRARIES - list of libraries to add for lapack\n\n#  MKL_SCALAPACK_LIBRARIES - list of libraries to add for scalapack\n\n#  MKL_SOLVER_LIBRARIES - list of libraries to add for the solvers\n\n#  MKL_CDFT_LIBRARIES - list of libraries to add for the solvers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Includes\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Intel Compiler Suite\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Checks\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Kernel libraries dynamically loaded\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Paths\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try linking multiple libs\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This macro checks for the existence of the combination of libraries given by _list.\n\n# If the combination is found, this macro whether we can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# start checking\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Fin\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Check for version 10/11\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for older versions\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Include files\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Other libraries\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# LibIRC: intel compiler always links this; \n\n# gcc does not; but mkl kernels sometimes need it.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Final\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Standard termination\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/FindMPI.cmake" : {
      "ObjectId" : "48adf3c1e02067464f37608177e85c6a36c4b218",
      "LastModified" : "2015-11-24T18:41:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindMPI\n\n# -------\n\n#\n\n# Find a Message Passing Interface (MPI) implementation\n\n#\n\n# The Message Passing Interface (MPI) is a library used to write\n\n# high-performance distributed-memory parallel applications, and is\n\n# typically deployed on a cluster.  MPI is a standard interface (defined\n\n# by the MPI forum) for which many implementations are available.  All\n\n# of them have somewhat different include paths, libraries to link\n\n# against, etc., and this module tries to smooth out those differences.\n\n#\n\n# === Variables ===\n\n#\n\n# This module will set the following variables per language in your\n\n# project, where <lang> is one of C, CXX, or Fortran:\n\n#\n\n# ::\n\n#\n\n#    MPI_<lang>_FOUND           TRUE if FindMPI found MPI flags for <lang>\n\n#    MPI_<lang>_COMPILER        MPI Compiler wrapper for <lang>\n\n#    MPI_<lang>_COMPILE_FLAGS   Compilation flags for MPI programs\n\n#    MPI_<lang>_INCLUDE_PATH    Include path(s) for MPI header\n\n#    MPI_<lang>_LINK_FLAGS      Linking flags for MPI programs\n\n#    MPI_<lang>_LIBRARIES       All libraries to link MPI programs against\n\n#\n\n# Additionally, FindMPI sets the following variables for running MPI\n\n# programs from the command line:\n\n#\n\n# ::\n\n#\n\n#    MPIEXEC                    Executable for running MPI programs\n\n#    MPIEXEC_NUMPROC_FLAG       Flag to pass to MPIEXEC before giving\n\n#                               it the number of processors to run on\n\n#    MPIEXEC_PREFLAGS           Flags to pass to MPIEXEC directly\n\n#                               before the executable to run.\n\n#    MPIEXEC_POSTFLAGS          Flags to pass to MPIEXEC after other flags\n\n#\n\n# === Usage ===\n\n#\n\n# To use this module, simply call FindMPI from a CMakeLists.txt file, or\n\n# run find_package(MPI), then run CMake.  If you are happy with the\n\n# auto- detected configuration for your language, then you're done.  If\n\n# not, you have two options:\n\n#\n\n# ::\n\n#\n\n#    1. Set MPI_<lang>_COMPILER to the MPI wrapper (mpicc, etc.) of your\n\n#       choice and reconfigure.  FindMPI will attempt to determine all the\n\n#       necessary variables using THAT compiler's compile and link flags.\n\n#    2. If this fails, or if your MPI implementation does not come with\n\n#       a compiler wrapper, then set both MPI_<lang>_LIBRARIES and\n\n#       MPI_<lang>_INCLUDE_PATH.  You may also set any other variables\n\n#       listed above, but these two are required.  This will circumvent\n\n#       autodetection entirely.\n\n#\n\n# When configuration is successful, MPI_<lang>_COMPILER will be set to\n\n# the compiler wrapper for <lang>, if it was found.  MPI_<lang>_FOUND\n\n# and other variables above will be set if any MPI implementation was\n\n# found for <lang>, regardless of whether a compiler was found.\n\n#\n\n# When using MPIEXEC to execute MPI applications, you should typically\n\n# use all of the MPIEXEC flags as follows:\n\n#\n\n# ::\n\n#\n\n#    ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} PROCS\n\n#      ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS\n\n#\n\n# where PROCS is the number of processors on which to execute the\n\n# program, EXECUTABLE is the MPI program, and ARGS are the arguments to\n\n# pass to the MPI program.\n\n#\n\n# === Backward Compatibility ===\n\n#\n\n# For backward compatibility with older versions of FindMPI, these\n\n# variables are set, but deprecated:\n\n#\n\n# ::\n\n#\n\n#    MPI_FOUND           MPI_COMPILER        MPI_LIBRARY\n\n#    MPI_COMPILE_FLAGS   MPI_INCLUDE_PATH    MPI_EXTRA_LIBRARY\n\n#    MPI_LINK_FLAGS      MPI_LIBRARIES\n\n#\n\n# In new projects, please use the MPI_<lang>_XXX equivalents.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2011 Kitware, Inc.\n\n# Copyright 2010-2011 Todd Gamblin tgamblin@llnl.gov\n\n# Copyright 2001-2009 Dave Partyka\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include this to handle the QUIETLY and REQUIRED arguments\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# This part detects MPI compilers, attempting to wade through the mess of compiler names in\n\n# a sensible way.\n\n#\n\n# The compilers are detected in this order:\n\n#\n\n# 1. Try to find the most generic available MPI compiler, as this is usually set up by\n\n#    cluster admins.  e.g., if plain old mpicc is available, we'll use it and assume it's\n\n#    the right compiler.\n\n#\n\n# 2. If a generic mpicc is NOT found, then we attempt to find one that matches\n\n#    CMAKE_<lang>_COMPILER_ID. e.g. if you are using XL compilers, we'll try to find mpixlc\n\n#    and company, but not mpiicc.  This hopefully prevents toolchain mismatches.\n\n#\n\n# If you want to force a particular MPI compiler other than what we autodetect (e.g. if you\n\n# want to compile regular stuff with GNU and parallel stuff with Intel), you can always set\n\n# your favorite MPI_<lang>_COMPILER explicitly and this stuff will be ignored.\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Start out with the generic MPI compiler names, as these are most commonly used.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# GNU compiler names\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Intel MPI compiler names\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# PGI compiler names\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# XLC MPI Compiler names\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append vendor-specific compilers to the list if we either don't know the compiler id,\n\n# or if we know it matches the regular compiler.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# clean up the namespace here\n",
        "Line" : 165,
        "CharPositionInLine" : 48
      },
      "11" : {
        "Text" : "# Names to try for MPI exec\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Grab the path to MPI from the registry if we're on windows.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# MSMPI\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# The default path ends with a '\\' and doesn't mix with ';' when appending.\n",
        "Line" : 177,
        "CharPositionInLine" : 55
      },
      "15" : {
        "Text" : "# The SDK is installed separately from the runtime\n",
        "Line" : 181,
        "CharPositionInLine" : 53
      },
      "16" : {
        "Text" : "# MPICH\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Build a list of prefixes to search for MPI.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Intel MPI 5.0.1 will return a zero return code even when the\n\n# argument to the MPI compiler wrapper is unknown.  Attempt to\n\n# catch this case.\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\n\n# interrogate_mpi_compiler(lang try_libs)\n\n#\n\n# Attempts to extract compiler and linker args from an MPI compiler. The arguments set\n\n# by this function are:\n\n#\n\n#   MPI_<lang>_INCLUDE_PATH    MPI_<lang>_LINK_FLAGS     MPI_<lang>_FOUND\n\n#   MPI_<lang>_COMPILE_FLAGS   MPI_<lang>_LIBRARIES\n\n#\n\n# MPI_<lang>_COMPILER must be set beforehand to the absolute path to an MPI compiler for\n\n# <lang>.  Additionally, MPI_<lang>_INCLUDE_PATH and MPI_<lang>_LIBRARIES may be set\n\n# to skip autodetection.\n\n#\n\n# If try_libs is TRUE, this will also attempt to find plain MPI libraries in the usual\n\n# way.  In general, this is not as effective as interrogating the compilers, as it\n\n# ignores language-specific flags and libraries.  However, some MPI implementations\n\n# (Windows implementations) do not have compiler wrappers, so this approach must be used.\n\n#\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# MPI_${lang}_NO_INTERROGATE will be set to a compiler name when the *regular* compiler was\n\n# discovered to be the MPI compiler.  This happens on machines like the Cray XE6 that use\n\n# modules to set cc, CC, and ftn to the MPI compilers.  If the user force-sets another MPI\n\n# compiler, MPI_${lang}_COMPILER won't be equal to MPI_${lang}_NO_INTERROGATE, and we'll\n\n# inspect that compiler anew.  This allows users to set new compilers w/o rm'ing cache.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# If MPI is set already in the cache, don't bother with interrogating the compiler.\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Check whether the -showme:compile option works. This indicates that we have either OpenMPI\n\n# or a newer version of LAM-MPI, and implies that -showme:link will also work.\n",
        "Line" : 242,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# If we appear to have -showme:compile, then we should\n\n# also have -showme:link. Try it.\n",
        "Line" : 246,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# We probably have -showme:incdirs and -showme:libdirs as well,\n\n# so grab that while we're at it.\n",
        "Line" : 255,
        "CharPositionInLine" : 10
      },
      "25" : {
        "Text" : "# reset things here if something went wrong.\n",
        "Line" : 268,
        "CharPositionInLine" : 10
      },
      "26" : {
        "Text" : "# Older versions of LAM-MPI have \"-showme\". Try to find that.\n",
        "Line" : 274,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# MVAPICH uses -compile-info and -link-info.  Try them.\n",
        "Line" : 279,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# If we have compile-info, also have link-info.\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# make sure we got compile and link.  Reset vars if something's wrong.\n",
        "Line" : 292,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# MPICH just uses \"-show\". Try it.\n",
        "Line" : 299,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# We have our command lines, but we might need to copy MPI_COMPILE_CMDLINE\n\n# into MPI_LINK_CMDLINE, if we didn't find the link line.\n",
        "Line" : 305,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# Here, we're done with the interrogation part, and we'll try to extract args we care\n\n# about from what we learned from the compiler wrapper scripts.\n",
        "Line" : 316,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# If interrogation came back with something, extract our variable from the MPI command line\n",
        "Line" : 319,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Extract compile flags from the compile command line.\n",
        "Line" : 321,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Extract include paths from compile command line\n",
        "Line" : 333,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# try using showme:incdirs if extracting didn't work.\n",
        "Line" : 341,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# If all else fails, just search for mpi.h in the normal include paths.\n",
        "Line" : 347,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Extract linker paths from the link command line\n",
        "Line" : 356,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# try using showme:libdirs if extracting didn't work.\n",
        "Line" : 365,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# Extract linker flags from the link command line\n",
        "Line" : 371,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Extract the set of libraries to link against from the link command\n\n# line\n",
        "Line" : 382,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# add the compiler implicit directories because some compilers\n\n# such as the intel compiler have libraries that show up\n\n# in the showme list that can only be found in the implicit\n\n# link directories of the compiler.\n",
        "Line" : 386,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Determine full path names for all of the libraries that one needs\n\n# to link against in an MPI program\n",
        "Line" : 395,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# MPI_LIB is cached by find_library, but we don't want that.  Clear it first.\n",
        "Line" : 399,
        "CharPositionInLine" : 10
      },
      "45" : {
        "Text" : "# Sanity check MPI_LIBRARIES to make sure there are enough libraries\n",
        "Line" : 410,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# If we didn't have an MPI compiler script to interrogate, attempt to find everything\n\n# with plain old find functions.  This is nasty because MPI implementations have LOTS of\n\n# different library names, so this section isn't going to be very generic.  We need to\n\n# make sure it works for MS MPI, though, since there are no compiler wrappers for that.\n",
        "Line" : 419,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Decide between 32-bit and 64-bit libraries for Microsoft's MPI\n",
        "Line" : 428,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# Right now, we only know about the extra libs for C++.\n\n# We could add Fortran here (as there is usually libfmpich, etc.), but\n\n# this really only has to work with MS MPI on Windows.\n\n# Assume that other MPI's are covered by the compiler wrappers.\n",
        "Line" : 444,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# If we found MPI, set up all of the appropriate cache entries\n",
        "Line" : 464,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# clear out our temporary lib/header detectionv variable here.\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# finally set a found variable for each MPI language\n",
        "Line" : 476,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# This function attempts to compile with the regular compiler, to see if MPI programs\n\n# work with it.  This is a last ditch attempt after we've tried interrogating mpicc and\n\n# friends, and after we've tried to find generic libraries.  Works on machines like\n\n# Cray XE6, where the modules environment changes what MPI version cc, CC, and ftn use.\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# End definitions, commence real work here.\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Most mpi distros have some form of mpiexec which gives us something we can reliably look for.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# call get_filename_component twice to remove mpiexec and the directory it exists in (typically bin).\n\n# This gives us a fairly reliable base directory to search for /bin /lib and /include from.\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#=============================================================================\n\n# Backward compatibility input hacks.  Propagate the FindMPI hints to C and\n\n# CXX if the respective new versions are not defined.  Translate the old\n\n# MPI_LIBRARY and MPI_EXTRA_LIBRARY to respective MPI_${lang}_LIBRARIES.\n\n#\n\n# Once we find the new variables, we translate them back into their old\n\n# equivalents below.\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Old input variables.\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Set new vars based on their old equivalents, if the new versions are not already set.\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Special handling for MPI_LIBRARY and MPI_EXTRA_LIBRARY, which we nixed in the\n\n# new FindMPI.  These need to be merged into MPI_<lang>_LIBRARIES\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "#=============================================================================\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# This loop finds the compilers and sends them off for interrogation.\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# If the user supplies a compiler *name* instead of an absolute path, assume that we need to find THAT compiler.\n",
        "Line" : 578,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Get rid of our default list of names and just search for the name the user wants.\n",
        "Line" : 581,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "# If the user specifies a compiler, we don't want to try to search libraries either.\n",
        "Line" : 585,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# last ditch try -- if nothing works so far, just try running the regular compiler and\n\n# see if we can create an MPI executable.\n",
        "Line" : 599,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "#=============================================================================\n\n# More backward compatibility stuff\n\n#\n\n# Bare MPI sans ${lang} vars are set to CXX then C, depending on what was found.\n\n# This mimics the behavior of the old language-oblivious FindMPI.\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Note that we might still have found Fortran, but you'll need to use MPI_Fortran_FOUND\n",
        "Line" : 635,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Chop MPI_LIBRARIES into the old-style MPI_LIBRARY and MPI_EXTRA_LIBRARY, and set them in cache.\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#=============================================================================\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# unset these vars to cleanup namespace\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 71
    },
    "cmake/FindMatlab.cmake" : {
      "ObjectId" : "eae158535faf171173eb5f992840aacf9262dafc",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindMatlab\n\n# ----------\n\n#\n\n# Finds Matlab installations and provides Matlab tools and libraries to cmake.\n\n#\n\n# This package first intention is to find the libraries associated with Matlab\n\n# in order to be able to build Matlab extensions (mex files). It can also be\n\n# used:\n\n#\n\n# * run specific commands in Matlab\n\n# * declare Matlab unit test\n\n# * retrieve various information from Matlab (mex extensions, versions and\n\n#   release queries, ...)\n\n#\n\n# The module supports the following components:\n\n#\n\n# * ``MX_LIBRARY``, ``ENG_LIBRARY`` and ``MAT_LIBRARY``: respectively the MX,\n\n#   ENG and MAT libraries of Matlab\n\n# * ``MAIN_PROGRAM`` the Matlab binary program.\n\n# * ``MEX_COMPILER`` the MEX compiler.\n\n# * ``SIMULINK`` the Simulink environment.\n\n#\n\n# .. note::\n\n#\n\n#   The version given to the :command:`find_package` directive is the Matlab\n\n#   **version**, which should not be confused with the Matlab *release* name\n\n#   (eg. `R2014`).\n\n#   The :command:`matlab_get_version_from_release_name` and\n\n#   :command:`matlab_get_release_name_from_version` allow a mapping\n\n#   from the release name to the version.\n\n#\n\n# The variable :variable:`Matlab_ROOT_DIR` may be specified in order to give\n\n# the path of the desired Matlab version. Otherwise, the behaviour is platform\n\n# specific:\n\n#\n\n# * Windows: The installed versions of Matlab are retrieved from the\n\n#   Windows registry\n\n# * OS X: The installed versions of Matlab are given by the MATLAB\n\n#   paths in ``/Application``. If no such application is found, it falls back\n\n#   to the one that might be accessible from the PATH.\n\n# * Unix: The desired Matlab should be accessible from the PATH.\n\n#\n\n# Additional information is provided when :variable:`MATLAB_FIND_DEBUG` is set.\n\n# When a Matlab binary is found automatically and the ``MATLAB_VERSION``\n\n# is not given, the version is queried from Matlab directly.\n\n# On Windows, it can make a window running Matlab appear.\n\n#\n\n# The mapping of the release names and the version of Matlab is performed by\n\n# defining pairs (name, version).  The variable\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS` may be provided before the call to\n\n# the :command:`find_package` in order to handle additional versions.\n\n#\n\n# A Matlab scripts can be added to the set of tests using the\n\n# :command:`matlab_add_unit_test`. By default, the Matlab unit test framework\n\n# will be used (>= 2013a) to run this script, but regular ``.m`` files\n\n# returning an exit code can be used as well (0 indicating a success).\n\n#\n\n# Module Input Variables\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Users or projects may set the following variables to configure the module\n\n# behaviour:\n\n#\n\n# :variable:`Matlab_ROOT_DIR`\n\n#   the root of the Matlab installation.\n\n# :variable:`MATLAB_FIND_DEBUG`\n\n#   outputs debug information\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS`\n\n#   additional versions of Matlab for the automatic retrieval of the installed\n\n#   versions.\n\n#\n\n# Variables defined by the module\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Result variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_FOUND``\n\n#   ``TRUE`` if the Matlab installation is found, ``FALSE``\n\n#   otherwise. All variable below are defined if Matlab is found.\n\n# ``Matlab_ROOT_DIR``\n\n#   the final root of the Matlab installation determined by the FindMatlab\n\n#   module.\n\n# ``Matlab_MAIN_PROGRAM``\n\n#   the Matlab binary program. Available only if the component ``MAIN_PROGRAM``\n\n#   is given in the :command:`find_package` directive.\n\n# ``Matlab_INCLUDE_DIRS``\n\n#  the path of the Matlab libraries headers\n\n# ``Matlab_MEX_LIBRARY``\n\n#   library for mex, always available.\n\n# ``Matlab_MX_LIBRARY``\n\n#   mx library of Matlab (arrays). Available only if the component\n\n#   ``MX_LIBRARY`` has been requested.\n\n# ``Matlab_ENG_LIBRARY``\n\n#   Matlab engine library. Available only if the component ``ENG_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_MAT_LIBRARY``\n\n#   Matlab matrix library. Available only if the component ``MAT_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_LIBRARIES``\n\n#   the whole set of libraries of Matlab\n\n# ``Matlab_MEX_COMPILER``\n\n#   the mex compiler of Matlab. Currently not used.\n\n#   Available only if the component ``MEX_COMPILER`` is asked\n\n#\n\n# Cached variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_MEX_EXTENSION``\n\n#   the extension of the mex files for the current platform (given by Matlab).\n\n# ``Matlab_ROOT_DIR``\n\n#   the location of the root of the Matlab installation found. If this value\n\n#   is changed by the user, the result variables are recomputed.\n\n#\n\n# Provided macros\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_get_version_from_release_name`\n\n#   returns the version from the release name\n\n# :command:`matlab_get_release_name_from_version`\n\n#   returns the release name from the Matlab version\n\n#\n\n# Provided functions\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_add_mex`\n\n#   adds a target compiling a MEX file.\n\n# :command:`matlab_add_unit_test`\n\n#   adds a Matlab unit test file as a test to the project.\n\n# :command:`matlab_extract_all_installed_versions_from_registry`\n\n#   parses the registry for all Matlab versions. Available on Windows only.\n\n#   The part of the registry parsed is dependent on the host processor\n\n# :command:`matlab_get_all_valid_matlab_roots_from_registry`\n\n#   returns all the possible Matlab paths, according to a previously\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\n\n#   useful for the searching all possible Matlab installation.\n\n# :command:`matlab_get_mex_suffix`\n\n#   returns the suffix to be used for the mex files\n\n#   (platform/architecture dependent)\n\n# :command:`matlab_get_version_from_matlab_run`\n\n#   returns the version of Matlab, given the full directory of the Matlab\n\n#   program.\n\n#\n\n#\n\n# Known issues\n\n# ^^^^^^^^^^^^\n\n#\n\n# **Symbol clash in a MEX target**\n\n#   By default, every symbols inside a MEX\n\n#   file defined with the command :command:`matlab_add_mex` have hidden\n\n#   visibility, except for the entry point. This is the default behaviour of\n\n#   the MEX compiler, which lowers the risk of symbol collision between the\n\n#   libraries shipped with Matlab, and the libraries to which the MEX file is\n\n#   linking to. This is also the default on Windows platforms.\n\n#\n\n#   However, this is not sufficient in certain case, where for instance your\n\n#   MEX file is linking against libraries that are already loaded by Matlab,\n\n#   even if those libraries have different SONAMES.\n\n#   A possible solution is to hide the symbols of the libraries to which the\n\n#   MEX target is linking to. This can be achieved in GNU GCC compilers with\n\n#   the linker option ``-Wl,--exclude-libs,ALL``.\n\n#\n\n# **Tests using GPU resources**\n\n#   in case your MEX file is using the GPU and\n\n#   in order to be able to run unit tests on this MEX file, the GPU resources\n\n#   should be properly released by Matlab. A possible solution is to make\n\n#   Matlab aware of the use of the GPU resources in the session, which can be\n\n#   performed by a command such as ``D = gpuDevice()`` at the beginning of\n\n#   the test script (or via a fixture).\n\n#\n\n#\n\n# Reference\n\n# ^^^^^^^^^\n\n#\n\n# .. variable:: Matlab_ROOT_DIR\n\n#\n\n#    The root folder of the Matlab installation. If set before the call to\n\n#    :command:`find_package`, the module will look for the components in that\n\n#    path. If not set, then an automatic search of Matlab\n\n#    will be performed. If set, it should point to a valid version of Matlab.\n\n#\n\n# .. variable:: MATLAB_FIND_DEBUG\n\n#\n\n#    If set, the lookup of Matlab and the intermediate configuration steps are\n\n#    outputted to the console.\n\n#\n\n# .. variable:: MATLAB_ADDITIONAL_VERSIONS\n\n#\n\n#   If set, specifies additional versions of Matlab that may be looked for.\n\n#   The variable should be a list of strings, organised by pairs of release\n\n#   name and versions, such as follows::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"release_name1=corresponding_version1\"\n\n#         \"release_name2=corresponding_version2\"\n\n#         ...\n\n#         )\n\n#\n\n#   Example::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"R2013b=8.2\"\n\n#         \"R2013a=8.1\"\n\n#         \"R2012b=8.0\")\n\n#\n\n#   The order of entries in this list matters when several versions of\n\n#   Matlab are installed. The priority is set according to the ordering in\n\n#   this list.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The currently supported versions. Other version can be added by the user by\n\n# providing MATLAB_ADDITIONAL_VERSIONS\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# temporary folder for all Matlab runs\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_release_name\n\n#\n\n#   Returns the version of Matlab (17.58) from a release name (R2017k)\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_release_name_from_version\n\n#\n\n#   Returns the release name (R2017k) from the version of Matlab (17.58)\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extracts all the supported release names (R2017k...) of Matlab\n\n# internal use\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extracts all the supported versions of Matlab\n\n# internal use\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_extract_all_installed_versions_from_registry\n\n#\n\n#   This function parses the registry and founds the Matlab versions that are\n\n#   installed. The found versions are returned in `matlab_versions`.\n\n#   Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for\n\n#   The returned list contains all versions under\n\n#   ``HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB`` or an empty list in case an error\n\n#   occurred (or nothing found).\n\n#\n\n#   .. note::\n\n#\n\n#     Only the versions are provided. No check is made over the existence of the\n\n#     installation referenced in the registry,\n\n#\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\n\n# redirection of 64 bits applications\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# (internal)\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get the supported versions\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# this is a manual population of the versions we want to look for\n\n# this can be done as is, but preferably with the call to\n\n# matlab_get_supported_versions and variable\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# populating the versions we want to look for\n\n# set(matlab_supported_versions)\n",
        "Line" : 423,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# # Matlab 7\n\n# set(matlab_major 7)\n\n# foreach(current_matlab_minor RANGE 4 20)\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# # Matlab 8\n\n# set(matlab_major 8)\n\n# foreach(current_matlab_minor RANGE 0 5)\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 435,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# # taking into account the possible additional versions provided by the user\n\n# if(DEFINED MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 438,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# list(APPEND matlab_supported_versions MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 440,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# endif()\n",
        "Line" : 441,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# we order from more recent to older\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_all_valid_matlab_roots_from_registry\n\n#\n\n#   Populates the Matlab root with valid versions of Matlab.\n\n#   The returned matlab_roots is organized in pairs\n\n#   ``(version_number,matlab_root_path)``.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_all_valid_matlab_roots_from_registry(\n\n#         matlab_versions\n\n#         matlab_roots)\n\n#\n\n#   ``matlab_versions``\n\n#     the versions of each of the Matlab installations\n\n#   ``matlab_roots``\n\n#     the location of each of the Matlab installations\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The matlab_versions comes either from\n\n# extract_matlab_versions_from_registry_brute_force or\n\n# matlab_extract_all_installed_versions_from_registry.\n",
        "Line" : 479,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_mex_suffix\n\n#\n\n#   Returns the extension of the mex files (the suffixes).\n\n#   This function should not be called before the appropriate Matlab root has\n\n#   been found.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_mex_suffix(\n\n#         matlab_root\n\n#         mex_suffix)\n\n#\n\n#   ``matlab_root``\n\n#     the root of the Matlab installation\n\n#   ``mex_suffix``\n\n#     the variable name in which the suffix will be returned.\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# todo setup the extension properly. Currently I do not know if this is\n\n# sufficient for all win32 distributions.\n\n# there is also CMAKE_EXECUTABLE_SUFFIX that could be tweaked\n",
        "Line" : 520,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# we first try without suffix, since cmake does not understand a list with\n\n# one empty string element\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# this call should populate the cache automatically\n",
        "Line" : 540,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# the program has been found?\n",
        "Line" : 552,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_matlab_run\n\n#\n\n#   This function runs Matlab program specified on arguments and extracts its\n\n#   version.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_version_from_matlab_run(\n\n#         matlab_binary_path\n\n#         matlab_list_versions)\n\n#\n\n#   ``matlab_binary_path``\n\n#     the location of the `matlab` binary executable\n\n#   ``matlab_list_versions``\n\n#     the version extracted from Matlab\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# the log file is needed since on windows the command executes in a new\n\n# window and it is not possible to get back the answer of Matlab\n\n# the -wait command is needed on windows, otherwise the call returns\n\n# immediately after the program launches itself.\n",
        "Line" : 617,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# timeout set to 120 seconds, in case it does not start\n\n# note as said before OUTPUT_VARIABLE cannot be used in a platform\n\n# independent manner however, not setting it would flush the output of Matlab\n\n# in the current console (unix variant)\n",
        "Line" : 632,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# if successful, read back the log\n",
        "Line" : 666,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_unit_test\n\n#\n\n#   Adds a Matlab unit test to the test set of cmake/ctest.\n\n#   This command requires the component ``MAIN_PROGRAM``.\n\n#   The unit test uses the Matlab unittest framework (default, available\n\n#   starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``\n\n#   is given.\n\n#\n\n#   The function expects one Matlab test script file to be given.\n\n#   In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file\n\n#   should contain the script to be run, plus an exit command with the exit\n\n#   value. This exit value will be passed to the ctest framework (0 success,\n\n#   non 0 failure). Additional arguments accepted by :command:`add_test` can be\n\n#   passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).\n\n#\n\n#   ::\n\n#\n\n#     matlab_add_unit_test(\n\n#         NAME <name>\n\n#         UNITTEST_FILE matlab_file_containing_unittest.m\n\n#         [CUSTOM_MATLAB_COMMAND matlab_command_to_run_as_test]\n\n#         [UNITTEST_PRECOMMAND matlab_command_to_run]\n\n#         [TIMEOUT timeout]\n\n#         [ADDITIONAL_PATH path1 [path2 ...]]\n\n#         [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\n\n#         [TEST_ARGS arg1 [arg2 ...]]\n\n#         [NO_UNITTEST_FRAMEWORK]\n\n#         )\n\n#\n\n#   The function arguments are:\n\n#\n\n#   ``NAME``\n\n#     name of the unittest in ctest.\n\n#   ``UNITTEST_FILE``\n\n#     the matlab unittest file. Its path will be automatically\n\n#     added to the Matlab path.\n\n#   ``CUSTOM_MATLAB_COMMAND``\n\n#     Matlab script command to run as the test.\n\n#     If this is not set, then the following is run:\n\n#     ``runtests('matlab_file_name'), exit(max([ans(1,:).Failed]))``\n\n#     where ``matlab_file_name`` is the ``UNITTEST_FILE`` without the extension.\n\n#   ``UNITTEST_PRECOMMAND``\n\n#     Matlab script command to be ran before the file\n\n#     containing the test (eg. GPU device initialisation based on CMake\n\n#     variables).\n\n#   ``TIMEOUT``\n\n#     the test timeout in seconds. Defaults to 180 seconds as the\n\n#     Matlab unit test may hang.\n\n#   ``ADDITIONAL_PATH``\n\n#     a list of paths to add to the Matlab path prior to\n\n#     running the unit test.\n\n#   ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``\n\n#     a list of additional option in order\n\n#     to run Matlab from the command line.\n\n#     ``-nosplash -nodesktop -nodisplay`` are always added.\n\n#   ``TEST_ARGS``\n\n#     Additional options provided to the add_test command. These\n\n#     options are added to the default options (eg. \"CONFIGURATIONS Release\")\n\n#   ``NO_UNITTEST_FRAMEWORK``\n\n#     when set, indicates that the test should not\n\n#     use the unittest framework of Matlab (available for versions >= R2013a).\n\n#   ``WORKING_DIRECTORY``\n\n#     This will be the working directory for the test. If specified it will\n\n#     also be the output directory used for the log file of the test run.\n\n#     If not specifed the temporary directory ``${CMAKE_BINARY_DIR}/Matlab`` will\n\n#     be used as the working directory and the log location.\n\n#\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_mex\n\n#\n\n#   Adds a Matlab MEX target.\n\n#   This commands compiles the given sources with the current tool-chain in\n\n#   order to produce a MEX file. The final name of the produced output may be\n\n#   specified, as well as additional link libraries, and a documentation entry\n\n#   for the MEX file. Remaining arguments of the call are passed to the\n\n#   :command:`add_library` or :command:`add_executable` command.\n\n#\n\n#   ::\n\n#\n\n#      matlab_add_mex(\n\n#          NAME <name>\n\n#          [EXECUTABLE | MODULE | SHARED]\n\n#          SRC src1 [src2 ...]\n\n#          [OUTPUT_NAME output_name]\n\n#          [DOCUMENTATION file.txt]\n\n#          [LINK_TO target1 target2 ...]\n\n#          [...]\n\n#      )\n\n#\n\n#   ``NAME``\n\n#     name of the target.\n\n#   ``SRC``\n\n#     list of source files.\n\n#   ``LINK_TO``\n\n#     a list of additional link dependencies.  The target links to ``libmex``\n\n#     by default. If ``Matlab_MX_LIBRARY`` is defined, it also\n\n#     links to ``libmx``.\n\n#   ``OUTPUT_NAME``\n\n#     if given, overrides the default name. The default name is\n\n#     the name of the target without any prefix and\n\n#     with ``Matlab_MEX_EXTENSION`` suffix.\n\n#   ``DOCUMENTATION``\n\n#     if given, the file ``file.txt`` will be considered as\n\n#     being the documentation file for the MEX file. This file is copied into\n\n#     the same folder without any processing, with the same name as the final\n\n#     mex file, and with extension `.m`. In that case, typing ``help <name>``\n\n#     in Matlab prints the documentation contained in this file.\n\n#   ``MODULE`` or ``SHARED`` may be given to specify the type of library to be\n\n#     created. ``EXECUTABLE`` may be given to create an executable instead of\n\n#     a library. If no type is given explicitly, the type is ``SHARED``.\n\n#\n\n#   The documentation file is not processed and should be in the following\n\n#   format:\n\n#\n\n#   ::\n\n#\n\n#     % This is the documentation\n\n#     function ret = mex_target_output_name(input1)\n\n#\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# we do not need all this on Windows\n\n# pthread options\n",
        "Line" : 863,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# we should use try_compile instead, the link flags are discarded from\n\n# this compiler_flag function.\n\n#check_cxx_compiler_flag(-Wl,--exclude-libs,ALL HAS_SYMBOL_HIDING_CAPABILITY)\n",
        "Line" : 870,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# documentation\n",
        "Line" : 924,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# documentation\n",
        "Line" : 933,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# entry point in the mex file + taking care of visibility and symbol clashes.\n",
        "Line" : 935,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Apparently, compiling with -pthread generated the proper link flags\n\n# and some defines at compilation\n",
        "Line" : 943,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# if we do not do that, the symbols linked from eg. boost remain weak and\n\n# then clash with the ones defined in the matlab process. So by default\n\n# the symbols are hidden.\n\n# This also means that for shared libraries (like MEX), the entry point\n\n# should be explicitly declared with default visibility, otherwise Matlab\n\n# cannot find the entry point.\n\n# Note that this is particularly meaningful if the MEX wrapper itself\n\n# contains symbols that are clashing with Matlab (that are compiled in the\n\n# MEX file). In order to propagate the visibility options to the libraries\n\n# to which the MEX file is linked against, the -Wl,--exclude-libs,ALL\n\n# option should also be specified.\n",
        "Line" : 949,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#  get_target_property(\n\n#    _previous_link_flags\n\n#    ${${prefix}_NAME}\n\n#    LINK_FLAGS)\n\n#  if(NOT _previous_link_flags)\n\n#    set(_previous_link_flags)\n\n#  endif()\n",
        "Line" : 968,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,--exclude-libs,ALL\"\n\n#        # -Wl,--version-script=${_FindMatlab_SELF_DIR}/MatlabLinuxVisibility.map\"\n\n#    )\n\n#  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n\n#    # in this case, all other symbols become hidden.\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,-exported_symbol,_mexFunction\"\n\n#        #-Wl,-exported_symbols_list,${_FindMatlab_SELF_DIR}/MatlabOSXVisilibity.map\"\n\n#    )\n\n#  endif()\n",
        "Line" : 976,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# (internal)\n\n# Used to get the version of matlab, using caching. This basically transforms the\n\n# output of the root list, with possible unknown version, to a version\n\n#\n",
        "Line" : 1004,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# if the version is not trivial, we query matlab for that\n\n# we keep track of the location of matlab that induced this version\n\n#if(NOT DEFINED Matlab_PROG_VERSION_STRING_AUTO_DETECT)\n\n#  set(Matlab_PROG_VERSION_STRING_AUTO_DETECT \"\" CACHE INTERNAL \"internal matlab location for the discovered version\")\n\n#endif()\n",
        "Line" : 1010,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# the version is known, we just return it\n",
        "Line" : 1017,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#\n",
        "Line" : 1023,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# do we already have a matlab program?\n",
        "Line" : 1026,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# if not found, clear the dependent variables\n",
        "Line" : 1043,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# full real path for path comparison\n",
        "Line" : 1054,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# is it the same as the previous one?\n",
        "Line" : 1059,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# update the location of the program\n",
        "Line" : 1065,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# set the version into the cache\n",
        "Line" : 1078,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# warning, just in case several versions found (should not happen)\n",
        "Line" : 1081,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# return the updated value\n",
        "Line" : 1086,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# ###################################\n\n# Exploring the possible Matlab_ROOTS\n",
        "Line" : 1097,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# this variable will get all Matlab installations found in the current system.\n",
        "Line" : 1100,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# if the user specifies a possible root, we keep this one\n",
        "Line" : 1106,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# if Matlab_ROOT_DIR specified but erroneous\n",
        "Line" : 1109,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# NOTFOUND indicates the code below to search for the version automatically\n",
        "Line" : 1114,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# empty version\n",
        "Line" : 1116,
        "CharPositionInLine" : 72
      },
      "64" : {
        "Text" : "# cached version\n",
        "Line" : 1118,
        "CharPositionInLine" : 95
      },
      "65" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\n\n# one installation using the appropriate heuristics\n",
        "Line" : 1125,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# On WIN32, we look for Matlab installation in the registry\n\n# if unsuccessful, we look for all known revision and filter the existing\n\n# ones.\n",
        "Line" : 1130,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\n",
        "Line" : 1134,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\n",
        "Line" : 1138,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# filtering the results with the registry keys\n",
        "Line" : 1148,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# on mac, we look for the /Application paths\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\n\n# any other guess.\n",
        "Line" : 1154,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\n",
        "Line" : 1189,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\n\n# If set by the user, this wont change\n",
        "Line" : 1192,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# we then populate the list of roots, with empty version\n",
        "Line" : 1200,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# resolve symlinks\n",
        "Line" : 1205,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# get the directory (the command below has to be run twice)\n\n# this will be the matlab root\n",
        "Line" : 1208,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Matlab should be in bin\n",
        "Line" : 1211,
        "CharPositionInLine" : 93
      },
      "77" : {
        "Text" : "# take the first possible Matlab root\n",
        "Line" : 1234,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# adding a warning in case of ambiguity\n",
        "Line" : 1241,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# check if the root changed wrt. the previous defined one, if so\n\n# clear all the cached variables for being able to reconfigure properly\n",
        "Line" : 1249,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# internal\n",
        "Line" : 1265,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "#Matlab_PROG_VERSION_STRING_AUTO_DETECT\n",
        "Line" : 1268,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# Fix the version, in case this one is NOTFOUND\n",
        "Line" : 1282,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# i should be for intel\n",
        "Line" : 1309,
        "CharPositionInLine" : 32
      },
      "84" : {
        "Text" : "# This variable goes to the cache.\n",
        "Line" : 1355,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# internal\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\n\n# This is the function to be used below instead of the find_library directives.\n",
        "Line" : 1367,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# the MEX library/header are required\n",
        "Line" : 1379,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# the MEX extension is required\n",
        "Line" : 1398,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# the matlab root is required\n",
        "Line" : 1401,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# component Mex Compiler\n",
        "Line" : 1404,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# component Matlab program\n",
        "Line" : 1420,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Component MX library\n",
        "Line" : 1436,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Component ENG library\n",
        "Line" : 1452,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Component MAT library\n",
        "Line" : 1468,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Component Simulink\n",
        "Line" : 1484,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "cmake/FindNFFT3.cmake" : {
      "ObjectId" : "4de079de5707e03f4db91207319c40509a270f08",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find NFFT3.\n\n# Usage: find_package(NFFT3 [COMPONENTS [single double long-double threads]])\n\n#\n\n# Variables used by this module:\n\n#  NFFT3_ROOT_DIR             - NFFT3 root directory\n\n# Variables defined by this module:\n\n#  NFFT3_FOUND                - system has NFFT3\n\n#  NFFT3_INCLUDE_DIR          - the NFFT3 include directory (cached)\n\n#  NFFT3_INCLUDE_DIRS         - the NFFT3 include directories\n\n#                               (identical to NFFT3_INCLUDE_DIR)\n\n#  NFFT3[FL]?_LIBRARY         - the NFFT3 library - double, single(F), \n\n#                               long-double(L) precision (cached)\n\n#  NFFT3[FL]?_THREADS_LIBRARY - the threaded NFFT3 library - double, single(F), \n\n#                               long-double(L) precision (cached)\n\n#  NFFT3_LIBRARIES            - list of all NFFT3 libraries found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2009-2010\n\n# ASTRON (Netherlands Institute for Radio Astronomy)\n\n# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands\n\n#\n\n# This file is part of the LOFAR software suite.\n\n# The LOFAR software suite is free software: you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License as published\n\n# by the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# The LOFAR software suite is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License along\n\n# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n# $Id: FindNFFT3.cmake 15918 2010-06-25 11:12:42Z kvahed $\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use double precision by default.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Loop over each component.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If using threads, we need to link against threaded libraries as well.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Keep a list of variable names that we need to pass on to\n\n# find_package_handle_standard_args().\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Search for all requested libraries.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for the header file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set NFFT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindNIFTI.cmake" : {
      "ObjectId" : "d0a25b929f2f75514e37c3f94ba1c1389208eec5",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - FindNIFTI.cmake\n\n#\n\n# Author: Thomas Proeger\n\n#\n\n# This cmake find module looks for the header files and libraries from the \n\n# 'libnifti1-dev' package.\n\n#\n\n# The following variables will be exported:\n\n# \n\n# NIFTI_INCLUDE_DIR        - the directory that contains nifti1.h\n\n# NIFTI_NIFTICDF_LIBRARY   - the libnifticdf library file \n\n# NIFTI_NIFTIIO_LIBRARY    - the libniftiio library file\n\n# NIFTI_ZNZ_LIBRARY        - the libznz library file\n\n# NIFTI_FOUND              - TRUE if and only if ALL other variables have \n\n#                            correct values.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# INCLUDE directory\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# LIBRARY files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PNG_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# these variables are only visible in 'advanced mode' \n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindOmniORB.cmake" : {
      "ObjectId" : "c5f3001ef6022c627af6dbda72544ed54eb04f2d",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Find the omniORB libraries and include dir\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OMNIORB4_INCLUDE_DIR  - Directories to include to use omniORB\r\n\n# OMNIORB4_LIBRARIES    - Files to link against to use omniORB\r\n\n# OMNIORB4_IDL_COMPILER\r\n\n# OMNIORB4_FOUND        - When false, don't try to use omniORB\r\n\n# OMNIORB4_DIR          - (optional) Suggested installation directory to search\r\n\n# OMNIORB_IDL_FLAGS     - (optional) Set flags for to use corba\r\n\n# OMNIORB_CPP_FLAGS     - (optional) Set flags for to use corba\r\n\n#\r\n\n# OMNIORB4_DIR can be used to make it simpler to find the various include\r\n\n# directories and compiled libraries when omniORB was not installed in the\r\n\n# usual/well-known directories (e.g. because you made an in tree-source\r\n\n# compilation or because you installed it in an \"unusual\" directory).\r\n\n# Just set OMNIORB4_DIR it to your specific installation directory\r\n\n#\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### For the list of required libraries for omniORB see\r\n\n# http://www.omniorb-support.com/pipermail/omniorb-list/2005-May/026666.html\r\n\n# Basically, look at\r\n\n#  - omniORB-4.0.5/README.*\r\n\n#  - omniORB-4.0.5/readmes/*\r\n\n# Platfrom dependencies might (only?) happen for Win32/VC++ (sigh):\r\n\n# \"Because of a bug in VC++, unless you require the dynamic interfaces, it\r\n\n#  is suggested that you use a smaller stub library called msvcstub.lib.\"\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# mandatory on FC2 and graal\r\n\n# mandatory on FC2 and graal\r\n",
        "Line" : 117,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "#-DCORBA_IS_OMNIORB)\r\n",
        "Line" : 131,
        "CharPositionInLine" : 24
      },
      "5" : {
        "Text" : "# Generate all files required for a corba server app.\r\n\n# ORO_ADD_CORBA_SERVERS( foo_SRCS foo_HPPS file.idl ... ) \r\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake atrocity: if none of these OUTPUT files is used in a target in\r\n\n# the current CMakeLists.txt file, the ADD_CUSTOM_COMMAND is plainly\r\n\n# ignored and left out of the make files.\r\n",
        "Line" : 161,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 7
    },
    "cmake/FindOpenCL.cmake" : {
      "ObjectId" : "71d0f90828e52b16eba84f5d72fb2b8ee77dfdb7",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenCL\n\n# This module tries to find an OpenCL implementation on your system. It supports\n\n# AMD / ATI, Apple and NVIDIA implementations, but should work, too.\n\n#\n\n# To set manually the paths, define these environment variables:\n\n# OpenCL_INCPATH    - Include path (e.g. OpenCL_INCPATH=/opt/cuda/4.0/cuda/include)\n\n# OpenCL_LIBPATH    - Library path (e.h. OpenCL_LIBPATH=/usr/lib64/nvidia)\n\n#\n\n# Once done this will define\n\n#  OPENCL_FOUND        - system has OpenCL\n\n#  OPENCL_INCLUDE_DIRS  - the OpenCL include directory\n\n#  OPENCL_LIBRARIES    - link these to use OpenCL\n\n#\n\n# WIN32 should work, but is untested\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The AMD SDK currently installs both x86 and x86_64 libraries\n\n# This is only a hack to find out architecture\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# On Win32 search relative to the library\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Unix style platforms\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The AMD SDK currently does not place its headers\n\n# in /usr/include, therefore also search relative\n\n# to the library\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This is often the same, so clean up\n",
        "Line" : 76,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/FindOpenMP.cmake" : {
      "ObjectId" : "fead4a6da143a77782ab7d736c173ec4dcb03842",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenMP\n\n# ----------\n\n#\n\n# Finds OpenMP support\n\n#\n\n# This module can be used to detect OpenMP support in a compiler.  If\n\n# the compiler supports OpenMP, the flags required to compile with\n\n# OpenMP support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support OpenMP.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    OpenMP_C_FLAGS - flags to add to the C compiler for OpenMP support\n\n#    OpenMP_CXX_FLAGS - flags to add to the CXX compiler for OpenMP support\n\n#    OPENMP_FOUND - true if openmp is detected\n\n#\n\n#\n\n#\n\n# Supported compilers can be found at\n\n# http://openmp.org/wp/openmp-compilers/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2008-2009 André Rigland Brodtkorb <Andre.Brodtkorb@ifi.uio.no>\n\n# Copyright 2012 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Empty, if compiler automatically accepts openmp\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#GNU\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Microsoft Visual Studio\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#Intel windows\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#PathScale, Intel\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#Sun\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#HP\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#IBM XL C/c++\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#Portland Group, MIPSpro\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Move the flag that matches the compiler to the head of the list,\n\n# this is faster and doesn't clutter the output that much. If that\n\n# flag doesn't work we will still try all.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# sample openmp source code to test\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# check c compiler\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# check cxx compiler\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# use the same source for CXX as C for now\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "cmake/FindOpenSSL.cmake" : {
      "ObjectId" : "8b4b9883a379289d1e38c57586d664c5e9ef9960",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenSSL\n\n# -----------\n\n#\n\n# Find the OpenSSL encryption library.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``OpenSSL::SSL``\n\n#   The OpenSSL ``ssl`` library, if found.\n\n# ``OpenSSL::Crypto``\n\n#   The OpenSSL ``crypto`` library, if found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``OPENSSL_FOUND``\n\n#   System has the OpenSSL library.\n\n# ``OPENSSL_INCLUDE_DIR``\n\n#   The OpenSSL include directory.\n\n# ``OPENSSL_CRYPTO_LIBRARY``\n\n#   The OpenSSL crypto library.\n\n# ``OPENSSL_SSL_LIBRARY``\n\n#   The OpenSSL SSL library.\n\n# ``OPENSSL_LIBRARIES``\n\n#   All OpenSSL libraries.\n\n# ``OPENSSL_VERSION``\n\n#   This is set to ``$major.$minor.$revision$patch`` (e.g. ``0.9.8s``).\n\n#\n\n# Hints\n\n# ^^^^^\n\n#\n\n# Set ``OPENSSL_ROOT_DIR`` to the root directory of an OpenSSL installation.\n\n# Set ``OPENSSL_USE_STATIC_LIBS`` to ``TRUE`` to look for static libraries.\n\n# Set ``OPENSSL_MSVC_STATIC_RT`` set ``TRUE`` to choose the MT version of the lib.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2009-2011 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://www.slproweb.com/products/Win32OpenSSL.html\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# /MD and /MDd are the standard values - if someone wants to use\n\n# others, the libnames have to change here too\n\n# use also ssl and ssleay32 in debug as fallback for openssl < 0.9.8b\n\n# enable OPENSSL_MSVC_STATIC_RT to get the libs build /MT (Multithreaded no-DLL)\n\n# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:\n\n#   * MD for dynamic-release\n\n#   * MDd for dynamic-debug\n\n#   * MT for static-release\n\n#   * MTd for static-debug\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Implementation details:\n\n# We are using the libraries located in the VC subdir instead of the parent directory eventhough :\n\n# libeay32MD.lib is identical to ../libeay32.lib, and\n\n# ssleay32MD.lib is identical to ../ssleay32.lib\n\n# enable OPENSSL_USE_STATIC_LIBS to use the static libs located in lib/VC/static\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# same player, for MinGW\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Not sure what to pick for -say- intel, let's use the toplevel ones and hope someone report issues:\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# compat defines\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The version number is encoded as 0xMNNFFPPS: major minor fix patch status\n\n# The status gives if this is a developer or prerelease and is ignored here.\n\n# Major, minor, and fix directly translate into the version numbers shown in\n\n# the string. The patch field translates to the single character suffix that\n\n# indicates the bug fix state, which 00 -> nothing, 01 -> a, 02 -> b and so\n\n# on.\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# 96 is the ASCII code of 'a' minus 1\n",
        "Line" : 344,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Once anyone knows how OpenSSL would call the patch versions beyond 'z'\n\n# this should be updated to handle that, too. This has not happened yet\n\n# so it is simply ignored here for now.\n",
        "Line" : 347,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/FindPNG.cmake" : {
      "ObjectId" : "873c3dedeedc5cb18a3c71a03c6ee7532cce3707",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPNG\n\n# -------\n\n#\n\n# Find the native PNG includes and library\n\n#\n\n#\n\n#\n\n# This module searches libpng, the library for working with PNG images.\n\n#\n\n# It defines the following variables\n\n#\n\n# ::\n\n#\n\n#   PNG_INCLUDE_DIRS, where to find png.h, etc.\n\n#   PNG_LIBRARIES, the libraries to link against to use PNG.\n\n#   PNG_DEFINITIONS - You should add_definitons(${PNG_DEFINITIONS}) before compiling code that includes png library files.\n\n#   PNG_FOUND, If false, do not try to use PNG.\n\n#   PNG_VERSION_STRING - the version of the PNG library found (since CMake 2.8.8)\n\n#\n\n# Also defined, but not for general use are\n\n#\n\n# ::\n\n#\n\n#   PNG_LIBRARY, where to find the PNG library.\n\n#\n\n# For backward compatiblity the variable PNG_INCLUDE_DIR is also set.\n\n# It has the same value as PNG_INCLUDE_DIRS.\n\n#\n\n# Since PNG depends on the ZLib compression library, none of the above\n\n# will be defined unless ZLib can be found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenBSD\n",
        "Line" : 53,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : "# For compatiblity with versions prior to this multi-config search, honor\n\n# any PNG_LIBRARY that is already specified and skip the search.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set by select_library_configurations(), but we want the one from\n\n# find_package_handle_standard_args() below.\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# png.h includes zlib.h. Sigh.\n",
        "Line" : 94,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# for backward compatiblity\n",
        "Line" : 96,
        "CharPositionInLine" : 48
      },
      "7" : {
        "Text" : "# No need to define PNG_USE_DLL here, because it's default for Cygwin.\n",
        "Line" : 101,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PNG_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "939b882820f23a42a60030e400c14c4bce49ae88",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# internal helper macro\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# component handling\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# version handling:\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 182,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 188,
        "CharPositionInLine" : 10
      },
      "18" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 218,
        "CharPositionInLine" : 17
      },
      "19" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 229,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# print the result:\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 21
    },
    "cmake/FindPackageMessage.cmake" : {
      "ObjectId" : "a0349d3db99a3b446c421d9bdc14142ab278e72f",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/FindPkgConfig.cmake" : {
      "ObjectId" : "39d3a76abd852df4a32eab5f8d5672fa24a7e4cf",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - a pkg-config module for CMake\n\n#\n\n# Usage:\n\n#   pkg_check_modules(<PREFIX> [REQUIRED] [QUIET] <MODULE> [<MODULE>]*)\n\n#     checks for all the given modules\n\n#\n\n#   pkg_search_module(<PREFIX> [REQUIRED] [QUIET] <MODULE> [<MODULE>]*)\n\n#     checks for given modules and uses the first working one\n\n#\n\n# When the 'REQUIRED' argument was set, macros will fail with an error\n\n# when module(s) could not be found\n\n#\n\n# When the 'QUIET' argument is set, no status messages will be printed.\n\n#\n\n# It sets the following variables:\n\n#   PKG_CONFIG_FOUND          ... if pkg-config executable was found\n\n#   PKG_CONFIG_EXECUTABLE     ... pathname of the pkg-config program\n\n#   PKG_CONFIG_VERSION_STRING ... the version of the pkg-config program found\n\n#                                 (since CMake 2.8.8)\n\n#\n\n# For the following variables two sets of values exist; first one is the\n\n# common one and has the given PREFIX. The second set contains flags\n\n# which are given out when pkgconfig was called with the '--static'\n\n# option.\n\n#   <XPREFIX>_FOUND          ... set to 1 if module(s) exist\n\n#   <XPREFIX>_LIBRARIES      ... only the libraries (w/o the '-l')\n\n#   <XPREFIX>_LIBRARY_DIRS   ... the paths of the libraries (w/o the '-L')\n\n#   <XPREFIX>_LDFLAGS        ... all required linker flags\n\n#   <XPREFIX>_LDFLAGS_OTHER  ... all other linker flags\n\n#   <XPREFIX>_INCLUDE_DIRS   ... the '-I' preprocessor flags (w/o the '-I')\n\n#   <XPREFIX>_CFLAGS         ... all required cflags\n\n#   <XPREFIX>_CFLAGS_OTHER   ... the other compiler flags\n\n#\n\n#   <XPREFIX> = <PREFIX>        for common case\n\n#   <XPREFIX> = <PREFIX>_STATIC for static linking\n\n#\n\n# There are some special variables whose prefix depends on the count\n\n# of given modules. When there is only one module, <PREFIX> stays\n\n# unchanged. When there are multiple modules, the prefix will be\n\n# changed to <PREFIX>_<MODNAME>:\n\n#   <XPREFIX>_VERSION    ... version of the module\n\n#   <XPREFIX>_PREFIX     ... prefix-directory of the module\n\n#   <XPREFIX>_INCLUDEDIR ... include-dir of the module\n\n#   <XPREFIX>_LIBDIR     ... lib-dir of the module\n\n#\n\n#   <XPREFIX> = <PREFIX>  when |MODULES| == 1, else\n\n#   <XPREFIX> = <PREFIX>_<MODNAME>\n\n#\n\n# A <MODULE> parameter can have the following formats:\n\n#   {MODNAME}            ... matches any version\n\n#   {MODNAME}>={VERSION} ... at least version <VERSION> is required\n\n#   {MODNAME}={VERSION}  ... exactly version <VERSION> is required\n\n#   {MODNAME}<={VERSION} ... modules must not be newer than <VERSION>\n\n#\n\n# Examples\n\n#   pkg_check_modules (GLIB2   glib-2.0)\n\n#\n\n#   pkg_check_modules (GLIB2   glib-2.0>=2.10)\n\n#     requires at least version 2.10 of glib2 and defines e.g.\n\n#       GLIB2_VERSION=2.10.3\n\n#\n\n#   pkg_check_modules (FOO     glib-2.0>=2.10 gtk+-2.0)\n\n#     requires both glib2 and gtk2, and defines e.g.\n\n#       FOO_glib-2.0_VERSION=2.10.3\n\n#       FOO_gtk+-2.0_VERSION=2.8.20\n\n#\n\n#   pkg_check_modules (XRENDER REQUIRED xrender)\n\n#     defines e.g.:\n\n#       XRENDER_LIBRARIES=Xrender;X11\n\n#       XRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp\n\n#\n\n#   pkg_search_module (BAR     libxml-2.0 libxml2 libxml>=2)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Enrico Scholz <enrico.scholz@informatik.tu-chemnitz.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Common stuff ####\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is needed because the module name is \"PkgConfig\" but the name of\n\n# this variable has always been PKG_CONFIG_FOUND so this isn't automatically\n\n# handled by FPHSA.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Unsets the given variables\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Invokes pkgconfig, cleans up the result and sets variables\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#message(STATUS \"  ${_varname} ... ${_pkgconfig_invoke_result}\")\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Invokes pkgconfig two times; once without '--static' and once with\n\n# '--static'\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Splits given arguments into options and a package list\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# create a better addressable variable of the modules and calculate its size\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# give out status message telling checked module\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# iterate through module list and check whether they exist and match the required version\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# check whether version is given\n",
        "Line" : 218,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# handle the operands\n",
        "Line" : 229,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# create the final query which is of the format:\n\n# * --atleast-version <version> <pkg-name>\n\n# * --exact-version <version> <pkg-name>      \n\n# * --max-version <version> <pkg-name>\n\n# * --exists <pkg-name>\n",
        "Line" : 242,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# execute the query\n",
        "Line" : 261,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# evaluate result and tell failures\n",
        "Line" : 266,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# fail when requested\n",
        "Line" : 277,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# when we are here, we checked whether requested modules\n\n# exist. Now, go through them and set variables\n",
        "Line" : 282,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# iterate through all modules again and set individual variables\n",
        "Line" : 288,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# handle case when there is only one package required\n",
        "Line" : 290,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# set variables which are combined for multiple modules\n",
        "Line" : 307,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "###\n\n### User visible macros start here\n\n###\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "###\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# check cached value\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "###\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# check cached value\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# iterate through all modules and stop at the first working one.\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "### Local Variables:\n\n### mode: cmake\n\n### End:\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/FindScalapack.cmake" : {
      "ObjectId" : "97fd31eb96c914893e41fbad0766398e37e9114a",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################\n\n# BEGIN_COPYRIGHT\n\n#\n\n# This file is part of SciDB.\n\n# Copyright (C) 2008-2013 SciDB, Inc.\n\n#\n\n# SciDB is free software: you can redistribute it and/or modify\n\n# it under the terms of the AFFERO GNU General Public License as published by\n\n# the Free Software Foundation.\n\n#\n\n# SciDB is distributed \"AS-IS\" AND WITHOUT ANY WARRANTY OF ANY KIND,\n\n# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,\n\n# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See\n\n# the AFFERO GNU General Public License for the complete license terms.\n\n#\n\n# You should have received a copy of the AFFERO GNU General Public License\n\n# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>\n\n#\n\n# END_COPYRIGHT\n\n########################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SCALAPACK_FOUND\n\n# SCALAPACK_LIBRARIES\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# setup for the find_library\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# RedHat 5.4\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# name for search\n",
        "Line" : 33,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "# Fedora 11..17\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# name for search\n",
        "Line" : 39,
        "CharPositionInLine" : 36
      },
      "7" : {
        "Text" : "# name for search\n",
        "Line" : 41,
        "CharPositionInLine" : 31
      },
      "8" : {
        "Text" : "# name for search\n",
        "Line" : 43,
        "CharPositionInLine" : 43
      },
      "9" : {
        "Text" : "# Fedora 11\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# name for search\n",
        "Line" : 52,
        "CharPositionInLine" : 44
      },
      "11" : {
        "Text" : "# name for search\n",
        "Line" : 54,
        "CharPositionInLine" : 36
      },
      "12" : {
        "Text" : "#\n\n# do the find_library\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Ubuntu\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Ubuntu 11.04 has only libblacs-openmpi.so.1 which find_library does not match\n",
        "Line" : 76,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "#\n\n# fix repairable cases of failed find_library\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Ubuntu 11.04 has only /usr/lib/libscalapack-openmpi.so.1 only, find_library() misses it\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "#\n\n# check for completeness and set outputs\n\n#\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#MESSAGE(STATUS \"SCALAPACK_LIB_FOUND=${SCALAPACK_LIB_FOUND}\")\n\n#MESSAGE(STATUS \"SCALAPACK_LIBD=${SCALAPACK_LIB}\")\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#MESSAGE(STATUS \"BLACS_REQUIRED=${BLACS_REQUIRED}\")\n\n#MESSAGE(STATUS \"BLACS_LIB_FOUND=${BLACS_LIB_FOUND}\")\n\n#MESSAGE(STATUS \"BLACS_LIB=${BLACS_LIB}\")\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#MESSAGE(STATUS \"BLACS_C_INIT_REQUIRED=${BLACS_REQUIRED}\")\n\n#MESSAGE(STATUS \"BLACS_C_INIT_LIB_FOUND=${BLACS_C_INIT_LIB_FOUND}\")\n\n#MESSAGE(STATUS \"BLACS_C_INIT_LIB=${BLACS_C_INIT_LIB}\")\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# ScaLAPACK\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# BLACS\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# BLACS cinit\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 24
    },
    "cmake/FindTIFF.cmake" : {
      "ObjectId" : "a67d24d0a0a834dfdb4a09f5895dff1c73a7cbd1",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindTIFF\n\n# --------\n\n#\n\n# Find TIFF library\n\n#\n\n# Find the native TIFF includes and library This module defines\n\n#\n\n# ::\n\n#\n\n#   TIFF_INCLUDE_DIR, where to find tiff.h, etc.\n\n#   TIFF_LIBRARIES, libraries to link against to use TIFF.\n\n#   TIFF_FOUND, If false, do not try to use TIFF.\n\n#\n\n# also defined, but not for general use are\n\n#\n\n# ::\n\n#\n\n#   TIFF_LIBRARY, where to find the TIFF library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TIFF_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindThreads.cmake" : {
      "ObjectId" : "ec671bfc58011c3826c85aeb821fbf775e942ada",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindThreads\n\n# -----------\n\n#\n\n# This module determines the thread library of the system.\n\n#\n\n# The following variables are set\n\n#\n\n# ::\n\n#\n\n#   CMAKE_THREAD_LIBS_INIT     - the thread library\n\n#   CMAKE_USE_SPROC_INIT       - are we using sproc?\n\n#   CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?\n\n#   CMAKE_USE_PTHREADS_INIT    - are we using pthreads\n\n#   CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads\n\n#\n\n# For systems with multiple thread libraries, caller can set\n\n#\n\n# ::\n\n#\n\n#   CMAKE_THREAD_PREFER_PTHREAD\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do we have sproc?\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We have sproc\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do we have pthreads?\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# We have pthread.h\n\n# Let's check for the library now.\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check if pthread functions are in normal C library\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Do we have -lpthreads\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Ok, how about -lpthread\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# On sun also check for -lthread\n",
        "Line" : 86,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# If we did not found -lpthread, -lpthread, or -lthread, look for -pthread\n",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Use libcma if it exists and can be used.  It provides more\n\n# symbols than the plain pthread library.  CMA threads\n\n# have actually been deprecated:\n\n#   http://docs.hp.com/en/B3920-90091/ch12s03.html#d0e11395\n\n#   http://docs.hp.com/en/947/d8.html\n\n# but we need to maintain compatibility here.\n\n# The CMAKE_HP_PTHREADS setting actually indicates whether CMA threads\n\n# are available.\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "cmake/FindXSLTPROC.cmake" : {
      "ObjectId" : "7631929b3d7085e6d686b3f256927c80f5254d89",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindZLIB.cmake" : {
      "ObjectId" : "166e29181696345fd238b797ca99883c408cd851",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find zlib\n\n# Find the native ZLIB includes and library.\n\n# Once done this will define\n\n#\n\n#  ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.\n\n#  ZLIB_LIBRARIES      - List of libraries when using zlib.\n\n#  ZLIB_FOUND          - True if zlib found.\n\n#\n\n#  ZLIB_VERSION_STRING - The version of zlib found (x.y.z)\n\n#  ZLIB_VERSION_MAJOR  - The major version of zlib\n\n#  ZLIB_VERSION_MINOR  - The minor version of zlib\n\n#  ZLIB_VERSION_PATCH  - The patch version of zlib\n\n#  ZLIB_VERSION_TWEAK  - The tweak version of zlib\n\n#\n\n# The following variable are provided for backward compatibility\n\n#\n\n#  ZLIB_MAJOR_VERSION  - The major version of zlib\n\n#  ZLIB_MINOR_VERSION  - The minor version of zlib\n\n#  ZLIB_PATCH_VERSION  - The patch version of zlib\n\n#\n\n# An includer may set ZLIB_ROOT to a zlib installation root to tell\n\n# this module where to look.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search ZLIB_ROOT first if it is set.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Normal search.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Try each search configuration.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# only append a TWEAK version if it exists:\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FortranCInterface.cmake" : {
      "ObjectId" : "c59e1f839ee60dc038d4fb6bc783f01f3c0e7cdd",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Fortran/C Interface Detection\n\n# This module automatically detects the API by which C and Fortran\n\n# languages interact.  Variables indicate if the mangling is found:\n\n#   FortranCInterface_GLOBAL_FOUND = Global subroutines and functions\n\n#   FortranCInterface_MODULE_FOUND = Module subroutines and functions\n\n#                                    (declared by \"MODULE PROCEDURE\")\n\n# A function is provided to generate a C header file containing macros\n\n# to mangle symbol names:\n\n#   FortranCInterface_HEADER(<file>\n\n#                            [MACRO_NAMESPACE <macro-ns>]\n\n#                            [SYMBOL_NAMESPACE <ns>]\n\n#                            [SYMBOLS [<module>:]<function> ...])\n\n# It generates in <file> definitions of the following macros:\n\n#   #define FortranCInterface_GLOBAL (name,NAME) ...\n\n#   #define FortranCInterface_GLOBAL_(name,NAME) ...\n\n#   #define FortranCInterface_MODULE (mod,name, MOD,NAME) ...\n\n#   #define FortranCInterface_MODULE_(mod,name, MOD,NAME) ...\n\n# These macros mangle four categories of Fortran symbols,\n\n# respectively:\n\n#   - Global symbols without '_': call mysub()\n\n#   - Global symbols with '_'   : call my_sub()\n\n#   - Module symbols without '_': use mymod; call mysub()\n\n#   - Module symbols with '_'   : use mymod; call my_sub()\n\n# If mangling for a category is not known, its macro is left undefined.\n\n# All macros require raw names in both lower case and upper case.\n\n# The MACRO_NAMESPACE option replaces the default \"FortranCInterface_\"\n\n# prefix with a given namespace \"<macro-ns>\".\n\n#\n\n# The SYMBOLS option lists symbols to mangle automatically with C\n\n# preprocessor definitions:\n\n#   <function>          ==> #define <ns><function> ...\n\n#   <module>:<function> ==> #define <ns><module>_<function> ...\n\n# If the mangling for some symbol is not known then no preprocessor\n\n# definition is created, and a warning is displayed.\n\n# The SYMBOL_NAMESPACE option prefixes all preprocessor definitions\n\n# generated by the SYMBOLS option with a given namespace \"<ns>\".\n\n#\n\n# Example usage:\n\n#   include(FortranCInterface)\n\n#   FortranCInterface_HEADER(FC.h MACRO_NAMESPACE \"FC_\")\n\n# This creates a \"FC.h\" header that defines mangling macros\n\n# FC_GLOBAL(), FC_GLOBAL_(), FC_MODULE(), and FC_MODULE_().\n\n#\n\n# Example usage:\n\n#   include(FortranCInterface)\n\n#   FortranCInterface_HEADER(FCMangle.h\n\n#                            MACRO_NAMESPACE \"FC_\"\n\n#                            SYMBOL_NAMESPACE \"FC_\"\n\n#                            SYMBOLS mysub mymod:my_sub)\n\n# This creates a \"FCMangle.h\" header that defines the same FC_*()\n\n# mangling macros as the previous example plus preprocessor symbols\n\n# FC_mysub and FC_mymod_my_sub.\n\n#\n\n# Another function is provided to verify that the Fortran and C/C++\n\n# compilers work together:\n\n#   FortranCInterface_VERIFY([CXX] [QUIET])\n\n# It tests whether a simple test executable using Fortran and C (and\n\n# C++ when the CXX option is given) compiles and links successfully.\n\n# The result is stored in the cache entry FortranCInterface_VERIFIED_C\n\n# (or FortranCInterface_VERIFIED_CXX if CXX is given) as a boolean.\n\n# If the check fails and QUIET is not given the function terminates\n\n# with a FATAL_ERROR message describing the problem.  The purpose of\n\n# this check is to stop a build early for incompatible compiler\n\n# combinations.  The test is built in the Release configuration.\n\n#\n\n# FortranCInterface is aware of possible GLOBAL and MODULE manglings\n\n# for many Fortran compilers, but it also provides an interface to\n\n# specify new possible manglings.  Set the variables\n\n#   FortranCInterface_GLOBAL_SYMBOLS\n\n#   FortranCInterface_MODULE_SYMBOLS\n\n# before including FortranCInterface to specify manglings of the\n\n# symbols \"MySub\", \"My_Sub\", \"MyModule:MySub\", and \"My_Module:My_Sub\".\n\n# For example, the code:\n\n#   set(FortranCInterface_GLOBAL_SYMBOLS mysub_ my_sub__ MYSUB_)\n\n#     #                                  ^^^^^  ^^^^^^   ^^^^^\n\n#   set(FortranCInterface_MODULE_SYMBOLS\n\n#       __mymodule_MOD_mysub __my_module_MOD_my_sub)\n\n#     #   ^^^^^^^^     ^^^^^   ^^^^^^^^^     ^^^^^^\n\n#   include(FortranCInterface)\n\n# tells FortranCInterface to try given GLOBAL and MODULE manglings.\n\n# (The carets point at raw symbol names for clarity in this example\n\n# but are not needed.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Execute at most once in a project.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use CMake 2.8.0 behavior for this module regardless of including context.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Verify that C and Fortran are available.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# MinGW's make tool does not always like () in the path\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create the interface detection project if it does not exist.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Load the detection results.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Parse arguments.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Generate macro definitions.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generate symbol mangling definitions.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Module symbol name.  Parse \"<module>:<function>\" syntax.\n",
        "Line" : 185,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Global symbol name.\n",
        "Line" : 204,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Store the content.\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Check arguments.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Build the verification project if not yet built.\n",
        "Line" : 247,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Build a sample project which reports symbols.\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Report results.\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Error if compilers are incompatible.\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Restore including context policies.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "90c4f4b5b5fd14df0c66e52f941b7718ff27ef1f",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/GetPrerequisites.cmake" : {
      "ObjectId" : "e4018b670f266b7032e3ba611dc3e60f02988507",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# GetPrerequisites\n\n# ----------------\n\n#\n\n# Functions to analyze and list executable file prerequisites.\n\n#\n\n# This module provides functions to list the .dll, .dylib or .so files\n\n# that an executable or shared library file depends on.  (Its\n\n# prerequisites.)\n\n#\n\n# It uses various tools to obtain the list of required shared library\n\n# files:\n\n#\n\n# ::\n\n#\n\n#    dumpbin (Windows)\n\n#    objdump (MinGW on Windows)\n\n#    ldd (Linux/Unix)\n\n#    otool (Mac OSX)\n\n#\n\n# The following functions are provided by this module:\n\n#\n\n# ::\n\n#\n\n#    get_prerequisites\n\n#    list_prerequisites\n\n#    list_prerequisites_by_glob\n\n#    gp_append_unique\n\n#    is_file_executable\n\n#    gp_item_default_embedded_path\n\n#      (projects can override with gp_item_default_embedded_path_override)\n\n#    gp_resolve_item\n\n#      (projects can override with gp_resolve_item_override)\n\n#    gp_resolved_file_type\n\n#      (projects can override with gp_resolved_file_type_override)\n\n#    gp_file_type\n\n#\n\n# Requires CMake 2.6 or greater because it uses function, break, return\n\n# and PARENT_SCOPE.\n\n#\n\n# ::\n\n#\n\n#   GET_PREREQUISITES(<target> <prerequisites_var> <exclude_system> <recurse>\n\n#                     <exepath> <dirs> [<rpaths>])\n\n#\n\n# Get the list of shared library files required by <target>.  The list\n\n# in the variable named <prerequisites_var> should be empty on first\n\n# entry to this function.  On exit, <prerequisites_var> will contain the\n\n# list of required shared library files.\n\n#\n\n# <target> is the full path to an executable file.  <prerequisites_var>\n\n# is the name of a CMake variable to contain the results.\n\n# <exclude_system> must be 0 or 1 indicating whether to include or\n\n# exclude \"system\" prerequisites.  If <recurse> is set to 1 all\n\n# prerequisites will be found recursively, if set to 0 only direct\n\n# prerequisites are listed.  <exepath> is the path to the top level\n\n# executable used for @executable_path replacment on the Mac.  <dirs> is\n\n# a list of paths where libraries might be found: these paths are\n\n# searched first when a target without any path info is given.  Then\n\n# standard system locations are also searched: PATH, Framework\n\n# locations, /usr/lib...\n\n#\n\n# ::\n\n#\n\n#   LIST_PREREQUISITES(<target> [<recurse> [<exclude_system> [<verbose>]]])\n\n#\n\n# Print a message listing the prerequisites of <target>.\n\n#\n\n# <target> is the name of a shared library or executable target or the\n\n# full path to a shared library or executable file.  If <recurse> is set\n\n# to 1 all prerequisites will be found recursively, if set to 0 only\n\n# direct prerequisites are listed.  <exclude_system> must be 0 or 1\n\n# indicating whether to include or exclude \"system\" prerequisites.  With\n\n# <verbose> set to 0 only the full path names of the prerequisites are\n\n# printed, set to 1 extra informatin will be displayed.\n\n#\n\n# ::\n\n#\n\n#   LIST_PREREQUISITES_BY_GLOB(<glob_arg> <glob_exp>)\n\n#\n\n# Print the prerequisites of shared library and executable files\n\n# matching a globbing pattern.  <glob_arg> is GLOB or GLOB_RECURSE and\n\n# <glob_exp> is a globbing expression used with \"file(GLOB\" or\n\n# \"file(GLOB_RECURSE\" to retrieve a list of matching files.  If a\n\n# matching file is executable, its prerequisites are listed.\n\n#\n\n# Any additional (optional) arguments provided are passed along as the\n\n# optional arguments to the list_prerequisites calls.\n\n#\n\n# ::\n\n#\n\n#   GP_APPEND_UNIQUE(<list_var> <value>)\n\n#\n\n# Append <value> to the list variable <list_var> only if the value is\n\n# not already in the list.\n\n#\n\n# ::\n\n#\n\n#   IS_FILE_EXECUTABLE(<file> <result_var>)\n\n#\n\n# Return 1 in <result_var> if <file> is a binary executable, 0\n\n# otherwise.\n\n#\n\n# ::\n\n#\n\n#   GP_ITEM_DEFAULT_EMBEDDED_PATH(<item> <default_embedded_path_var>)\n\n#\n\n# Return the path that others should refer to the item by when the item\n\n# is embedded inside a bundle.\n\n#\n\n# Override on a per-project basis by providing a project-specific\n\n# gp_item_default_embedded_path_override function.\n\n#\n\n# ::\n\n#\n\n#   GP_RESOLVE_ITEM(<context> <item> <exepath> <dirs> <resolved_item_var>\n\n#                   [<rpaths>])\n\n#\n\n# Resolve an item into an existing full path file.\n\n#\n\n# Override on a per-project basis by providing a project-specific\n\n# gp_resolve_item_override function.\n\n#\n\n# ::\n\n#\n\n#   GP_RESOLVED_FILE_TYPE(<original_file> <file> <exepath> <dirs> <type_var>\n\n#                         [<rpaths>])\n\n#\n\n# Return the type of <file> with respect to <original_file>.  String\n\n# describing type of prerequisite is returned in variable named\n\n# <type_var>.\n\n#\n\n# Use <exepath> and <dirs> if necessary to resolve non-absolute <file>\n\n# values -- but only for non-embedded items.\n\n#\n\n# Possible types are:\n\n#\n\n# ::\n\n#\n\n#    system\n\n#    local\n\n#    embedded\n\n#    other\n\n#\n\n# Override on a per-project basis by providing a project-specific\n\n# gp_resolved_file_type_override function.\n\n#\n\n# ::\n\n#\n\n#   GP_FILE_TYPE(<original_file> <file> <type_var>)\n\n#\n\n# Return the type of <file> with respect to <original_file>.  String\n\n# describing type of prerequisite is returned in variable named\n\n# <type_var>.\n\n#\n\n# Possible types are:\n\n#\n\n# ::\n\n#\n\n#    system\n\n#    local\n\n#    embedded\n\n#    other\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# A file is not executable until proven otherwise:\n\n#\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If file name ends in .exe on Windows, *assume* executable:\n\n#\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# A clause could be added here that uses output or return value of dumpbin\n\n# to determine ${result_var}. In 99%+? practical cases, the exe name\n\n# match will be sufficient...\n\n#\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Use the information returned from the Unix shell command \"file\" to\n\n# determine if ${file_full} should be considered an executable file...\n\n#\n\n# If the file command's output contains \"executable\" and does *not* contain\n\n# \"text\" then it is likely an executable suitable for prerequisite analysis\n\n# via the get_prerequisites macro.\n\n#\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Replace the name of the file in the output with a placeholder token\n\n# (the string \" _file_full_ \") so that just in case the path name of\n\n# the file contains the word \"text\" or \"executable\" we are not fooled\n\n# into thinking \"the wrong thing\" because the file name matches the\n\n# other 'file' command output we are looking for...\n\n#\n",
        "Line" : 241,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#message(STATUS \"file_ov='${file_ov}'\")\n",
        "Line" : 250,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#message(STATUS \"executable!\")\n",
        "Line" : 252,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#message(STATUS \"but text, so *not* a binary executable!\")\n",
        "Line" : 254,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Also detect position independent executables on Linux,\n\n# where \"file\" gives \"shared object ... (uses shared libraries)\"\n",
        "Line" : 261,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# \"file\" version 5.22 does not print \"(used shared libraries)\"\n\n# but uses \"interpreter\"\n",
        "Line" : 268,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# On Windows and Linux, \"embed\" prerequisites in the same directory\n\n# as the executable by default:\n\n#\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# On the Mac, relative to the executable depending on the type\n\n# of the thing we are embedding:\n\n#\n",
        "Line" : 290,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# The assumption here is that all executables in the bundle will be\n\n# in same-level-directories inside the bundle. The parent directory\n\n# of an executable inside the bundle should be MacOS or a sibling of\n\n# MacOS and all embedded paths returned from here will begin with\n\n# \"@executable_path/../\" and will work from all executables in all\n\n# such same-level-directories inside the bundle.\n\n#\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# By default, embed things right next to the main bundle executable:\n\n#\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Embed .dylibs right next to the main bundle executable:\n\n#\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Embed frameworks in the embedded \"Frameworks\" directory (sibling of MacOS):\n\n#\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Provide a hook so that projects can override the default embedded location\n\n# of any given library by whatever logic they choose:\n\n#\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Is it already resolved?\n\n#\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#\n\n# @executable_path references are assumed relative to exepath\n\n#\n",
        "Line" : 352,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "#message(STATUS \"info: embedded item exists (${ri})\")\n",
        "Line" : 359,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "#\n\n# @loader_path references are assumed relative to the\n\n# PATH of the given \"context\" (presumably another library)\n\n#\n",
        "Line" : 370,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#message(STATUS \"info: embedded item exists (${ri})\")\n",
        "Line" : 379,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "#\n\n# @rpath references are relative to the paths built into the binaries with -rpath\n\n# We handle this case like we do for other Unixes\n\n#\n",
        "Line" : 390,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "#message(STATUS \"info: 'find_file' in exepath/dirs/rpaths (${ri})\")\n",
        "Line" : 399,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#message(STATUS \"info: 'find_file' in exepath/dirs (${ri})\")\n",
        "Line" : 413,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "#message(STATUS \"info: 'find_file' found framework (${fw})\")\n",
        "Line" : 429,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Using find_program on Windows will find dll files that are in the PATH.\n\n# (Converting simple file names into full path names if found.)\n\n#\n",
        "Line" : 437,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#message(STATUS \"info: 'find_program' in exepath/dirs (${ri})\")\n",
        "Line" : 446,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Provide a hook so that projects can override item resolution\n\n# by whatever logic they choose:\n\n#\n",
        "Line" : 454,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#    message(STATUS \"\n\n#******************************************************************************\n\n#warning: cannot resolve item '${item}'\n\n#\n\n#  possible problems:\n\n#    need more directories?\n\n#    need to use InstallRequiredSystemLibraries?\n\n#    run in install tree instead of build tree?\n\n#\n\n#    context='${context}'\n\n#    item='${item}'\n\n#    exepath='${exepath}'\n\n#    dirs='${dirs}'\n\n#    resolved_item_var='${resolved_item_var}'\n\n#******************************************************************************\n\n#\")\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#message(STATUS \"**\")\n",
        "Line" : 498,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# if cygwin, we can get the properly formed windows paths from cygpath\n",
        "Line" : 546,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Return type string based on computed booleans:\n\n#\n",
        "Line" : 594,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#message(STATUS \"gp_resolved_file_type: '${file}' '${resolved_file}'\")\n\n#message(STATUS \"                type: '${type}'\")\n",
        "Line" : 606,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Provide a hook so that projects can override the decision on whether a\n\n# library belongs to the system or not by whatever logic they choose:\n\n#\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#message(STATUS \"**\")\n",
        "Line" : 628,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# <setup-gp_tool-vars>\n\n#\n\n# Try to choose the right tool by default. Caller can set gp_tool prior to\n\n# calling this function to force using a different tool.\n\n#\n",
        "Line" : 674,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# This is how to check for cygwin, har!\n",
        "Line" : 686,
        "CharPositionInLine" : 27
      },
      "40" : {
        "Text" : "# Try harder. Maybe we're on MinGW\n",
        "Line" : 690,
        "CharPositionInLine" : 13
      },
      "41" : {
        "Text" : "# optional command to pre-filter gp_tool results\n",
        "Line" : 703,
        "CharPositionInLine" : 32
      },
      "42" : {
        "Text" : "# objdump generaates copious output so we create a grep filter to pre-filter results\n",
        "Line" : 729,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# When running dumpbin, it also needs the \"Common7/IDE\" directory in the\n\n# PATH. It will already be in the PATH if being run from a Visual Studio\n\n# command prompt. Add it to the PATH here in case we are running from a\n\n# different command prompt.\n\n#\n",
        "Line" : 743,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Use cmake paths as a user may have a PATH element ending with a backslash.\n\n# This will escape the list delimiter and create havoc!\n",
        "Line" : 750,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# only add to the path if it is not already in the path\n",
        "Line" : 753,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "#\n\n# </setup-gp_tool-vars>\n",
        "Line" : 768,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Track new prerequisites at each new level of recursion. Start with an\n\n# empty list at each level:\n\n#\n",
        "Line" : 781,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Run gp_cmd on the target:\n\n#\n",
        "Line" : 786,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# dumpbin error messages seem to go to stdout\n",
        "Line" : 797,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# Convert to a list of lines:\n\n#\n",
        "Line" : 816,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# check for install id and remove it from list, since otool -L can include a\n\n# reference to itself\n",
        "Line" : 821,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# second line is install name\n",
        "Line" : 834,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# trim\n",
        "Line" : 837,
        "CharPositionInLine" : 6
      },
      "54" : {
        "Text" : "#message(\"INSTALL ID is \\\"${gp_install_id}\\\"\")\n",
        "Line" : 839,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# Analyze each line for file names that match the regular expression:\n\n#\n",
        "Line" : 843,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Extract information from each candidate:\n",
        "Line" : 848,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Use the raw_item as the list entries returned by this function. Use the\n\n# gp_resolve_item function to resolve it to an actual full path file if\n\n# necessary.\n\n#\n",
        "Line" : 869,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Add each item unless it is excluded:\n\n#\n",
        "Line" : 875,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# If item was really added, this is the first time we have seen it.\n\n# Add it to unseen_prereqs so that we can recursively add *its*\n\n# prerequisites...\n\n#\n\n# But first: resolve its name to an absolute full path name such\n\n# that the analysis tools can simply accept it as input.\n\n#\n",
        "Line" : 898,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 60
    },
    "cmake/OptimizeForArchitecture.cmake" : {
      "ObjectId" : "edef8d6c9c80b08d683eccf69dc0474aad9b0dfb",
      "LastModified" : "2017-07-18T14:01:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine the host CPU feature set and determine the best set of compiler\n\n# flags to enable all supported SIMD relevant features. Alternatively, the\n\n# target CPU can be explicitly selected (for generating more generic binaries\n\n# or for targeting a different system).\n\n# Compilers provide e.g. the -march=native flag to achieve a similar result.\n\n# This fails to address the need for building for a different microarchitecture\n\n# than the current host.\n\n# The script tries to deduce all settings from the model and family numbers of\n\n# the CPU instead of reading the CPUID flags from e.g. /proc/cpuinfo. This makes\n\n# the detection more independent from the CPUID code in the kernel (e.g. avx2 is\n\n# not listed on older kernels).\n\n#\n\n# Usage:\n\n# OptimizeForArchitecture()\n\n# If either of Vc_SSE_INTRINSICS_BROKEN, Vc_AVX_INTRINSICS_BROKEN,\n\n# Vc_AVX2_INTRINSICS_BROKEN is defined and set, the OptimizeForArchitecture\n\n# macro will consequently disable the relevant features via compiler flags.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2016 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#  * Neither the names of contributing organizations nor the\n\n#    names of its contributors may be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# taken from the Intel ORM\n\n# http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n\n# CPUID Signature Values of Of Recent Intel Microarchitectures\n\n# 4E 5E       | Skylake microarchitecture\n\n# 3D 47 56    | Broadwell microarchitecture\n\n# 3C 45 46 3F | Haswell microarchitecture\n\n# 3A 3E       | Ivy Bridge microarchitecture\n\n# 2A 2D       | Sandy Bridge microarchitecture\n\n# 25 2C 2F    | Intel microarchitecture Westmere\n\n# 1A 1E 1F 2E | Intel microarchitecture Nehalem\n\n# 17 1D       | Enhanced Intel Core microarchitecture\n\n# 0F          | Intel Core microarchitecture\n\n#\n\n# Intel SDM Vol. 3C 35-1 / December 2016:\n\n# 57          | Xeon Phi 3200, 5200, 7200  [Knights Landing]\n\n# 85          | Future Xeon Phi\n\n# 8E 9E       | 7th gen. Core              [Kaby Lake]\n\n# 55          | Future Xeon                [Skylake w/ AVX512]\n\n# 4E 5E       | 6th gen. Core / E3 v5      [Skylake w/o AVX512]\n\n# 56          | Xeon D-1500                [Broadwell]\n\n# 4F          | Xeon E5 v4, E7 v4, i7-69xx [Broadwell]\n\n# 47          | 5th gen. Core / Xeon E3 v4 [Broadwell]\n\n# 3D          | M-5xxx / 5th gen.          [Broadwell]\n\n# 3F          | Xeon E5 v3, E7 v3, i7-59xx [Haswell-E]\n\n# 3C 45 46    | 4th gen. Core, Xeon E3 v3  [Haswell]\n\n# 3E          | Xeon E5 v2, E7 v2, i7-49xx [Ivy Bridge-E]\n\n# 3A          | 3rd gen. Core, Xeon E3 v2  [Ivy Bridge]\n\n# 2D          | Xeon E5, i7-39xx           [Sandy Bridge]\n\n# 2F          | Xeon E7\n\n# 2A          | Xeon E3, 2nd gen. Core     [Sandy Bridge]\n\n# 2E          | Xeon 7500, 6500 series\n\n# 25 2C       | Xeon 3600, 5600 series, Core i7, i5 and i3\n\n#\n\n# Values from the Intel SDE:\n\n# 5C | Goldmont\n\n# 5A | Silvermont\n\n# 57 | Knights Landing\n\n# 66 | Cannonlake\n\n# 55 | Skylake Server\n\n# 4E | Skylake Client\n\n# 3C | Broadwell (likely a bug in the SDE)\n\n# 3C | Haswell\n",
        "Line" : 88,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "# 57\n",
        "Line" : 130,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "# Knights Landing\n",
        "Line" : 131,
        "CharPositionInLine" : 44
      },
      "5" : {
        "Text" : "# 8E, 9E\n",
        "Line" : 138,
        "CharPositionInLine" : 62
      },
      "6" : {
        "Text" : "# 55\n",
        "Line" : 140,
        "CharPositionInLine" : 37
      },
      "7" : {
        "Text" : "# 4E, 5E\n",
        "Line" : 142,
        "CharPositionInLine" : 60
      },
      "8" : {
        "Text" : "# 3D, 47, 4F, 56\n",
        "Line" : 144,
        "CharPositionInLine" : 106
      },
      "9" : {
        "Text" : "# Itanium (not supported)\n",
        "Line" : 171,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "# NetBurst\n",
        "Line" : 173,
        "CharPositionInLine" : 35
      },
      "11" : {
        "Text" : "# Not sure whether this must be 3 or even 4 instead\n",
        "Line" : 175,
        "CharPositionInLine" : 34
      },
      "12" : {
        "Text" : "# 16h\n",
        "Line" : 182,
        "CharPositionInLine" : 35
      },
      "13" : {
        "Text" : "# 15h\n",
        "Line" : 184,
        "CharPositionInLine" : 35
      },
      "14" : {
        "Text" : "# 14h\n",
        "Line" : 190,
        "CharPositionInLine" : 35
      },
      "15" : {
        "Text" : "# 12h\n\n# 10h\n",
        "Line" : 192,
        "CharPositionInLine" : 35
      },
      "16" : {
        "Text" : "# I don't know the right number to put here. This is just a guess from the hardware I have access to\n",
        "Line" : 197,
        "CharPositionInLine" : 35
      },
      "17" : {
        "Text" : "# add this clause to remove it from the else clause\n",
        "Line" : 392,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# MSVC on 32 bit can select /arch:SSE2 (since 2010 also /arch:AVX)\n\n# MSVC on 64 bit cannot select anything (should have changed with MSVC 2010)\n",
        "Line" : 465,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# ICC (on Linux)\n",
        "Line" : 488,
        "CharPositionInLine" : 56
      },
      "20" : {
        "Text" : "# This is the Intel compiler, so SSE2 is a very reasonable baseline.\n",
        "Line" : 512,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# not MSVC and not ICC => GCC, Clang, Open64\n",
        "Line" : 516,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 22
    },
    "cmake/SelectLibraryConfigurations.cmake" : {
      "ObjectId" : "d7108562b1bdee824723f15ade932d4564495371",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# SelectLibraryConfigurations\n\n# ---------------------------\n\n#\n\n#\n\n#\n\n# select_library_configurations( basename )\n\n#\n\n# This macro takes a library base name as an argument, and will choose\n\n# good values for basename_LIBRARY, basename_LIBRARIES,\n\n# basename_LIBRARY_DEBUG, and basename_LIBRARY_RELEASE depending on what\n\n# has been found and set.  If only basename_LIBRARY_RELEASE is defined,\n\n# basename_LIBRARY will be set to the release value, and\n\n# basename_LIBRARY_DEBUG will be set to basename_LIBRARY_DEBUG-NOTFOUND.\n\n# If only basename_LIBRARY_DEBUG is defined, then basename_LIBRARY will\n\n# take the debug value, and basename_LIBRARY_RELEASE will be set to\n\n# basename_LIBRARY_RELEASE-NOTFOUND.\n\n#\n\n# If the generator supports configuration types, then basename_LIBRARY\n\n# and basename_LIBRARIES will be set with debug and optimized flags\n\n# specifying the library to be used for the given configuration.  If no\n\n# build type has been set or the generator in use does not support\n\n# configuration types, then basename_LIBRARY and basename_LIBRARIES will\n\n# take only the release value, or the debug value if the release one is\n\n# not set.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Will Dicharry <wdicharry@stellarscience.com>\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This macro was adapted from the FindQt4 CMake module and is maintained by Will\n\n# Dicharry <wdicharry@stellarscience.com>.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if the generator supports configuration types or CMAKE_BUILD_TYPE\n\n# is set, then set optimized and debug options.\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/TestMacro.cmake" : {
      "ObjectId" : "f9dcde0e41568c67ff38572525d47eb7fd560ba8",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/UserWarning.cmake" : {
      "ObjectId" : "0be6ad240d7fb29f603e364da5fe0e72951c4eac",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# developer (non-dashboard) build\n",
        "Line" : 3,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# dashboard build\n",
        "Line" : 6,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cmake/VcMacros.cmake" : {
      "ObjectId" : "4c3b8c899ff769ba6e2a306b24279b7bf7046d54",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macros for use with the Vc library. Vc can be found at http://code.compeng.uni-frankfurt.de/projects/vc\n\n#\n\n# The following macros are provided:\n\n# vc_determine_compiler\n\n# vc_set_preferred_compiler_flags\n\n#\n\n#=============================================================================\n\n# Copyright 2009-2013   Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# some distributions patch their GCC to return nothing or only major and minor version on -dumpversion.\n\n# In that case we must extract the version number from --version.\n",
        "Line" : 73,
        "CharPositionInLine" : 9
      },
      "2" : {
        "Text" : "# some distributions patch their GCC to be API incompatible to what the FSF released. In\n\n# those cases we require a macro to identify the distribution version\n",
        "Line" : 81,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "# old assembler doesn't know the xgetbv instruction\n",
        "Line" : 153,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "# if compiling for 32 bit x86 we need to use the -mfpmath=sse since the x87 is broken by design\n",
        "Line" : 166,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "##################################################################################################\n\n#                                             Open64                                             #\n\n##################################################################################################\n",
        "Line" : 197,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Open64 4.5.1 still doesn't ship immintrin.h\n",
        "Line" : 226,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "##################################################################################################\n\n#                                              GCC                                               #\n\n##################################################################################################\n",
        "Line" : 230,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# GCC gives bogus \"array subscript is above array bounds\" warnings in math.cpp\n",
        "Line" : 238,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# GCC 4.8 warns about stuff we don't care about\n\n# Some older GCC versions have problems to note that they don't support the flag\n",
        "Line" : 242,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# ABI version 4 is required to make __m128 and __m256 appear as different types. 0 should give us the latest version.\n",
        "Line" : 248,
        "CharPositionInLine" : 61
      },
      "11" : {
        "Text" : "# GCC 4.5.[01] fail at inlining some functions, creating functions with a single instructions,\n\n# thus creating a large overhead.\n",
        "Line" : 254,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "##################################################################################################\n\n#                                          Intel Compiler                                        #\n\n##################################################################################################\n",
        "Line" : 300,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# default ICC to -no-ansi-alias because otherwise tests/utils_sse fails. So far I suspect a miscompilation...\n",
        "Line" : 312,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Disable warning #13211 \"Immediate parameter to intrinsic call too large\". (sse/vector.tcc rotated(int))\n",
        "Line" : 322,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# disable warning #2928: the __GXX_EXPERIMENTAL_CXX0X__ macro is disabled when using GNU version 4.6 with the c++0x option\n\n# this warning just adds noise about problems in the compiler - but I'm only interested in seeing problems in Vc\n",
        "Line" : 326,
        "CharPositionInLine" : 9
      },
      "16" : {
        "Text" : "# Intel doesn't implement the XOP or FMA4 intrinsics\n",
        "Line" : 331,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "##################################################################################################\n\n#                                      Microsoft Visual Studio                                   #\n\n##################################################################################################\n",
        "Line" : 335,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Disable warning \"forcing value to bool\"\n\n# Disable warning about strdup vs. _strdup\n\n# Disable warning \"conversion from 'unsigned int' to 'float', possible loss of data\"\n\n# Disable warning \"unary minus operator applied to unsigned type, result still unsigned\"\n\n# Disable warning \"anachronism used : qualifiers on reference are ignored\" (this is about 'restrict' usage on references, stupid MSVC)\n\n# Disable warning \"destructor never returns, potential memory leak\" (warns about ~_UnitTest_Global_Object which we don't care about)\n\n# Disable warning \"/GS can not protect parameters and local variables from local buffer overrun because optimizations are disabled in function\" (I don't get it)\n",
        "Line" : 340,
        "CharPositionInLine" : 36
      },
      "19" : {
        "Text" : "# MSVC does not support inline assembly on 64 bit! :(\n\n# searching the help for xgetbv doesn't turn up anything. So just fall back to not supporting AVX on Windows :(\n\n# TODO: apparently MSVC 2010 SP1 added _xgetbv\n",
        "Line" : 350,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# get rid of the min/max macros\n",
        "Line" : 355,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# MSVC doesn't implement the XOP or FMA4 intrinsics\n",
        "Line" : 358,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "##################################################################################################\n\n#                                              Clang                                             #\n\n##################################################################################################\n",
        "Line" : 366,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# for now I don't know of any arguments I want to pass. -march and stuff is tried by OptimizeForArchitecture...\n",
        "Line" : 370,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# the LLVM assembler gets FMAs wrong (bug 15040)\n",
        "Line" : 374,
        "CharPositionInLine" : 9
      },
      "25" : {
        "Text" : "# disable these warnings because clang shows them for function overloads that were discarded via SFINAE\n",
        "Line" : 380,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# set_target_properties(${_target} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY \"libc++\")\n",
        "Line" : 385,
        "CharPositionInLine" : 9
      },
      "27" : {
        "Text" : "# helper macro for vc_compile_for_all_implementations\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# MSVC for 64bit does not recognize /arch:SSE2 anymore. Therefore we set override _ok if _impl\n\n# says SSE\n",
        "Line" : 439,
        "CharPositionInLine" : 9
      },
      "29" : {
        "Text" : "# Generate compile rules for the given C++ source file for all available implementations and return\n\n# the resulting list of object files in _obj\n\n# all remaining arguments are additional flags\n\n# Example:\n\n#   vc_compile_for_all_implementations(_objs src/trigonometric.cpp FLAGS -DCOMPILE_BLAH EXCLUDE Scalar)\n\n#   add_executable(executable main.cpp ${_objs})\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "6750c9a03c49230b8ca9b6addcea22794c28668a",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/api/CMakeLists.txt" : {
      "ObjectId" : "3a8b052e977e79cfbef6f4baa3410876df4ebca8",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/site/CMakeLists.txt" : {
      "ObjectId" : "036f6e57d07588552c267a8449a8b263e9e63cd9",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/site/xml/build.xml" : {
      "ObjectId" : "970f848e46672a4e6c1a74bcfdc4d52182f68193",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c42c2db18f4608ff53be2b7dcb07ecb4fde60781",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### codeared ###\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "### codeare ###\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test macro -------------------------------------------------------- \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set (TEST_CALL codeare -b ${PROJECT_SOURCE_DIR}/share/compressedsensing -c phantom_denoising.xml) \n\n#MP_TESTS (\"denoise_cs\" \"${TEST_CALL}\")\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#if (${GSL_FOUND})\n\n#   set (TEST_CALL codeare -b ${PROJECT_SOURCE_DIR}/share/gradients -c config_vdcs.xml) \n\n#   MP_TESTS (\"vdspiral\" \"${TEST_CALL}\")\n\n#endif()\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "936a8caeb2cc6b9756b200225b9ca63b3d2370e9",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/CMakeLists.txt" : {
      "ObjectId" : "58798f1b9133b5993a642fa2f833307460f5b159",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/curves/CMakeLists.txt" : {
      "ObjectId" : "88c05163602afabc81c663eb0fd0b3db882b2a3b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/curves/tests/CMakeLists.txt" : {
      "ObjectId" : "b4c7f8e92a71fe015c5b7dcea6134414d6a3a246",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/dwt/CMakeLists.txt" : {
      "ObjectId" : "0c7a8c543e5481f39041da67fc3331616bbf8efc",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/dwt/tests/CMakeLists.txt" : {
      "ObjectId" : "5fbb07af944de88a643717f96d7df9db11f9e147",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/ft/CMakeLists.txt" : {
      "ObjectId" : "27563d4c50f5fd8c86589d04629fe1399d55fa87",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.0\n",
        "Line" : 15,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 1
    },
    "src/matrix/ft/tests/CMakeLists.txt" : {
      "ObjectId" : "77d019143d0c97f75fd1f642cd2549e10d641629",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if(${MATLAB_FOUND})\n\n#   add_executable(t_fftshift t_fftshift.cpp)\n\n#   if (${MSVC})\n\n#     target_link_libraries (t_fftshift libmx libmat ${FFTW3_LIBRARIES} hdf5 hdf5_cpp)\n\n#   else()\n\n#     target_link_libraries (t_fftshift mx mat ${FFTW3_LIBRARIES} ${HDF5_LIBRARIES})\n\n#   endif()\n\n#   set (TEST_CALL t_fftshift)  \n\n#   MP_TESTS (\"fftshift\" \"${TEST_CALL}\")\n\n# endif()\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/matrix/ft/tests/cmake_install.cmake" : {
      "ObjectId" : "8f1344d71fc58d3b39f36864a20ad37989340226",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install script for directory: /Users/kvahed/git/codeare/src/matrix/ft\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the install prefix\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the install configuration name.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the component getting installed.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include the install script for each subdirectory.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/matrix/interp/CMakeLists.txt" : {
      "ObjectId" : "88c05163602afabc81c663eb0fd0b3db882b2a3b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/interp/tests/CMakeLists.txt" : {
      "ObjectId" : "77cce8f76dc6c41a5d674d2d411e0ff9dbb369ff",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  set_tests_properties (resample PROPERTIES ENVIRONMENT ${LD_ENV})\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/matrix/io/CMakeLists.txt" : {
      "ObjectId" : "88c05163602afabc81c663eb0fd0b3db882b2a3b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/io/tests/CMakeLists.txt" : {
      "ObjectId" : "95349723ac7103cb0ac59b37d1b55ccf78aeeea3",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if (${ITK_FOUND})\n\n#   add_executable (t_dicom t_dicom.cpp)\n\n#   add_test (dicom t_dicom)\n\n#   target_link_libraries (t_dicom ${OPENSSL_LIBRARIES} itksys ITKCommon ITKIOImageBase ITKIOGDCM)\n\n# endif ()\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/matrix/linalg/CMakeLists.txt" : {
      "ObjectId" : "88c05163602afabc81c663eb0fd0b3db882b2a3b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/linalg/tests/CMakeLists.txt" : {
      "ObjectId" : "1121d4f33e3afecae396048db0a143c034584b00",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/matrix/tests/CMakeLists.txt" : {
      "ObjectId" : "d756952510705f09446cc21a874ba357f565d6db",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable(t_speed t_speed.cpp)\n\n#add_test(speed t_speed)\n\n#target_link_libraries (t_speed ${Boost_CHRONO_LIBRARY}\n\n#  ${Boost_SYSTEM_LIBRARY} ${Boost_CHRONO_LIBRARY}\n\n#  ${Boost_TIMER_LIBRARY})\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/matrix/vector/CMakeLists.txt" : {
      "ObjectId" : "80bce7cae812c0c8ba6c672c20b4a7c3994fba88",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/CMakeLists.txt" : {
      "ObjectId" : "82e86c155243af86914bac67234b67aa20dcaf00",
      "LastModified" : "2017-03-15T15:08:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mongoose/CMakeLists.txt" : {
      "ObjectId" : "6d5cb40f248108f3942f6aead2dfd14927f4da18",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/optimisation/CMakeLists.txt" : {
      "ObjectId" : "d6a7b594b93630941881a51a7922d6124b045e45",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.0\n",
        "Line" : 2,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 1
    },
    "src/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "2ec6e9bef5dc69899b3fb8c36d87db0140af0a3b",
      "LastModified" : "2015-10-29T00:07:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 82,
    "ANT" : 1
  },
  "ElapsedTime" : 2331
}