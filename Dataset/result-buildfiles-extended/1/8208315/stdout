{
  "Repository" : "8208315",
  "Revision" : "HEAD",
  "ObjectId" : "e699d257fe860d4fd82709835e72438bd0cd1533",
  "CommitTime" : "2018-12-10T13:52:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a1dd8d959fcc88984dd64e1e1e32fd116c175c70",
      "LastModified" : "2018-10-15T18:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detects whether this is a top-level project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build tests, tutorials and python bindings\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# USE_STATIC_LIBRARY speeds up the generation of multiple binaries,\n\n# at the cost of a longer initial compilation time\n\n# (by default, static build is off since libigl is a header-only library)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All dependencies that are downloaded as cmake projects and tested on the auto-builds are ON\n\n# (by default, all build options are off)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### End\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### conditionally compile certain modules depending on libraries found on the system\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### Adding libIGL: choose the path to your local copy libIGL\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/CXXFeatures.cmake" : {
      "ObjectId" : "8689d0ae04deec2c41cf39c428b6d99f9418fec0",
      "LastModified" : "2018-10-14T23:35:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For CMake 3.8 and above, we can use meta features directly provided by CMake itself\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "################################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html\n\n# cxx_aggregate_default_initializers    Aggregate default initializers, as defined in N3605.\n\n# cxx_alias_templates                   Template aliases, as defined in N2258.\n\n# cxx_alignas                           Alignment control alignas, as defined in N2341.\n\n# cxx_alignof                           Alignment control alignof, as defined in N2341.\n\n# cxx_attributes                        Generic attributes, as defined in N2761.\n\n# cxx_attribute_deprecated              deprecated]] attribute, as defined in N3760.\n\n# cxx_auto_type                         Automatic type deduction, as defined in N1984.\n\n# cxx_binary_literals                   Binary literals, as defined in N3472.\n\n# cxx_constexpr                         Constant expressions, as defined in N2235.\n\n# cxx_contextual_conversions            Contextual conversions, as defined in N3323.\n\n# cxx_decltype_incomplete_return_types  Decltype on incomplete return types, as defined in N3276.\n\n# cxx_decltype                          Decltype, as defined in N2343.\n\n# cxx_decltype_auto                     decltype(auto) semantics, as defined in N3638.\n\n# cxx_default_function_template_args    Default template arguments for function templates, as defined in DR226\n\n# cxx_defaulted_functions               Defaulted functions, as defined in N2346.\n\n# cxx_defaulted_move_initializers       Defaulted move initializers, as defined in N3053.\n\n# cxx_delegating_constructors           Delegating constructors, as defined in N1986.\n\n# cxx_deleted_functions                 Deleted functions, as defined in N2346.\n\n# cxx_digit_separators                  Digit separators, as defined in N3781.\n\n# cxx_enum_forward_declarations         Enum forward declarations, as defined in N2764.\n\n# cxx_explicit_conversions              Explicit conversion operators, as defined in N2437.\n\n# cxx_extended_friend_declarations      Extended friend declarations, as defined in N1791.\n\n# cxx_extern_templates                  Extern templates, as defined in N1987.\n\n# cxx_final                             Override control final keyword, as defined in N2928, N3206 and N3272.\n\n# cxx_func_identifier                   Predefined __func__ identifier, as defined in N2340.\n\n# cxx_generalized_initializers          Initializer lists, as defined in N2672.\n\n# cxx_generic_lambdas                   Generic lambdas, as defined in N3649.\n\n# cxx_inheriting_constructors           Inheriting constructors, as defined in N2540.\n\n# cxx_inline_namespaces                 Inline namespaces, as defined in N2535.\n\n# cxx_lambdas                           Lambda functions, as defined in N2927.\n\n# cxx_lambda_init_captures              Initialized lambda captures, as defined in N3648.\n\n# cxx_local_type_template_args          Local and unnamed types as template arguments, as defined in N2657.\n\n# cxx_long_long_type                    long long type, as defined in N1811.\n\n# cxx_noexcept                          Exception specifications, as defined in N3050.\n\n# cxx_nonstatic_member_init             Non-static data member initialization, as defined in N2756.\n\n# cxx_nullptr                           Null pointer, as defined in N2431.\n\n# cxx_override                          Override control override keyword, as defined in N2928, N3206 and N3272.\n\n# cxx_range_for                         Range-based for, as defined in N2930.\n\n# cxx_raw_string_literals               Raw string literals, as defined in N2442.\n\n# cxx_reference_qualified_functions     Reference qualified functions, as defined in N2439.\n\n# cxx_relaxed_constexpr                 Relaxed constexpr, as defined in N3652.\n\n# cxx_return_type_deduction             Return type deduction on normal functions, as defined in N3386.\n\n# cxx_right_angle_brackets              Right angle bracket parsing, as defined in N1757.\n\n# cxx_rvalue_references                 R-value references, as defined in N2118.\n\n# cxx_sizeof_member                     Size of non-static data members, as defined in N2253.\n\n# cxx_static_assert                     Static assert, as defined in N1720.\n\n# cxx_strong_enums                      Strongly typed enums, as defined in N2347.\n\n# cxx_thread_local                      Thread-local variables, as defined in N2659.\n\n# cxx_trailing_return_types             Automatic function return type, as defined in N2541.\n\n# cxx_unicode_literals                  Unicode string literals, as defined in N2442.\n\n# cxx_uniform_initialization            Uniform initialization, as defined in N2640.\n\n# cxx_unrestricted_unions               Unrestricted unions, as defined in N2544.\n\n# cxx_user_literals                     User-defined literals, as defined in N2765.\n\n# cxx_variable_templates                Variable templates, as defined in N3651.\n\n# cxx_variadic_macros                   Variadic macros, as defined in N1653.\n\n# cxx_variadic_templates                Variadic templates, as defined in N2242.\n\n# cxx_template_template_parameters      Template template parameters, as defined in ISO/IEC 14882:1998.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/DownloadProject.cmake" : {
      "ObjectId" : "e300f42658a532b948852e6d92e43f1fd7c2374e",
      "LastModified" : "2018-10-14T23:35:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file LICENSE or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be.\n\n# The prefix must always be an absolute path.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of\n\n# the CMakeCache.txt to be copied across due to it not expecting there to\n\n# be a project within a project.  This causes the hard-coded paths in the\n\n# cache to be copied and builds to fail.  To mitigate this, we simply\n\n# remove the cache if it exists before we configure the new project.  It\n\n# is safe to do so because it will be re-generated.  Since this is only\n\n# executed at the configure step, it should not cause additional builds or\n\n# downloads.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n\n# Make sure to pass through CMAKE_MAKE_PROGRAM in case the main project\n\n# has this set to something not findable on the PATH.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/FindCORK.cmake" : {
      "ObjectId" : "5faee49df0bb9d14385e617be0be5b925c35eb3a",
      "LastModified" : "2018-10-14T23:35:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find CORK library and include path.\n\n# Once done this will define\n\n#\n\n# CORK_FOUND\n\n# CORK_INCLUDE_DIR\n\n# CORK_LIBRARIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMATLAB.cmake" : {
      "ObjectId" : "fdabd9783ac903935b19e6e1e7abdd583342ee67",
      "LastModified" : "2018-10-14T23:35:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindMatlab\n\n# ----------\n\n#\n\n# Finds Matlab installations and provides Matlab tools and libraries to cmake.\n\n#\n\n# This package first intention is to find the libraries associated with Matlab\n\n# in order to be able to build Matlab extensions (mex files). It can also be\n\n# used:\n\n#\n\n# * run specific commands in Matlab\n\n# * declare Matlab unit test\n\n# * retrieve various information from Matlab (mex extensions, versions and\n\n#   release queries, ...)\n\n#\n\n# The module supports the following components:\n\n#\n\n# * ``MX_LIBRARY``, ``ENG_LIBRARY`` and ``MAT_LIBRARY``: respectively the MX,\n\n#   ENG and MAT libraries of Matlab\n\n# * ``MAIN_PROGRAM`` the Matlab binary program.\n\n# * ``MEX_COMPILER`` the MEX compiler.\n\n# * ``SIMULINK`` the Simulink environment.\n\n#\n\n# .. note::\n\n#\n\n#   The version given to the :command:`find_package` directive is the Matlab\n\n#   **version**, which should not be confused with the Matlab *release* name\n\n#   (eg. `R2014`).\n\n#   The :command:`matlab_get_version_from_release_name` and\n\n#   :command:`matlab_get_release_name_from_version` allow a mapping\n\n#   from the release name to the version.\n\n#\n\n# The variable :variable:`Matlab_ROOT_DIR` may be specified in order to give\n\n# the path of the desired Matlab version. Otherwise, the behaviour is platform\n\n# specific:\n\n#\n\n# * Windows: The installed versions of Matlab are retrieved from the\n\n#   Windows registry\n\n# * OS X: The installed versions of Matlab are given by the MATLAB\n\n#   paths in ``/Application``. If no such application is found, it falls back\n\n#   to the one that might be accessible from the PATH.\n\n# * Unix: The desired Matlab should be accessible from the PATH.\n\n#\n\n# Additional information is provided when :variable:`MATLAB_FIND_DEBUG` is set.\n\n# When a Matlab binary is found automatically and the ``MATLAB_VERSION``\n\n# is not given, the version is queried from Matlab directly.\n\n# On Windows, it can make a window running Matlab appear.\n\n#\n\n# The mapping of the release names and the version of Matlab is performed by\n\n# defining pairs (name, version).  The variable\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS` may be provided before the call to\n\n# the :command:`find_package` in order to handle additional versions.\n\n#\n\n# A Matlab scripts can be added to the set of tests using the\n\n# :command:`matlab_add_unit_test`. By default, the Matlab unit test framework\n\n# will be used (>= 2013a) to run this script, but regular ``.m`` files\n\n# returning an exit code can be used as well (0 indicating a success).\n\n#\n\n# Module Input Variables\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Users or projects may set the following variables to configure the module\n\n# behaviour:\n\n#\n\n# :variable:`Matlab_ROOT_DIR`\n\n#   the root of the Matlab installation.\n\n# :variable:`MATLAB_FIND_DEBUG`\n\n#   outputs debug information\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS`\n\n#   additional versions of Matlab for the automatic retrieval of the installed\n\n#   versions.\n\n#\n\n# Variables defined by the module\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Result variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_FOUND``\n\n#   ``TRUE`` if the Matlab installation is found, ``FALSE``\n\n#   otherwise. All variable below are defined if Matlab is found.\n\n# ``Matlab_ROOT_DIR``\n\n#   the final root of the Matlab installation determined by the FindMatlab\n\n#   module.\n\n# ``Matlab_MAIN_PROGRAM``\n\n#   the Matlab binary program. Available only if the component ``MAIN_PROGRAM``\n\n#   is given in the :command:`find_package` directive.\n\n# ``Matlab_INCLUDE_DIRS``\n\n#  the path of the Matlab libraries headers\n\n# ``Matlab_MEX_LIBRARY``\n\n#   library for mex, always available.\n\n# ``Matlab_MX_LIBRARY``\n\n#   mx library of Matlab (arrays). Available only if the component\n\n#   ``MX_LIBRARY`` has been requested.\n\n# ``Matlab_ENG_LIBRARY``\n\n#   Matlab engine library. Available only if the component ``ENG_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_MAT_LIBRARY``\n\n#   Matlab matrix library. Available only if the component ``MAT_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_LIBRARIES``\n\n#   the whole set of libraries of Matlab\n\n# ``Matlab_MEX_COMPILER``\n\n#   the mex compiler of Matlab. Currently not used.\n\n#   Available only if the component ``MEX_COMPILER`` is asked\n\n#\n\n# Cached variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_MEX_EXTENSION``\n\n#   the extension of the mex files for the current platform (given by Matlab).\n\n# ``Matlab_ROOT_DIR``\n\n#   the location of the root of the Matlab installation found. If this value\n\n#   is changed by the user, the result variables are recomputed.\n\n#\n\n# Provided macros\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_get_version_from_release_name`\n\n#   returns the version from the release name\n\n# :command:`matlab_get_release_name_from_version`\n\n#   returns the release name from the Matlab version\n\n#\n\n# Provided functions\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_add_mex`\n\n#   adds a target compiling a MEX file.\n\n# :command:`matlab_add_unit_test`\n\n#   adds a Matlab unit test file as a test to the project.\n\n# :command:`matlab_extract_all_installed_versions_from_registry`\n\n#   parses the registry for all Matlab versions. Available on Windows only.\n\n#   The part of the registry parsed is dependent on the host processor\n\n# :command:`matlab_get_all_valid_matlab_roots_from_registry`\n\n#   returns all the possible Matlab paths, according to a previously\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\n\n#   useful for the searching all possible Matlab installation.\n\n# :command:`matlab_get_mex_suffix`\n\n#   returns the suffix to be used for the mex files\n\n#   (platform/architecture dependent)\n\n# :command:`matlab_get_version_from_matlab_run`\n\n#   returns the version of Matlab, given the full directory of the Matlab\n\n#   program.\n\n#\n\n#\n\n# Known issues\n\n# ^^^^^^^^^^^^\n\n#\n\n# **Symbol clash in a MEX target**\n\n#   By default, every symbols inside a MEX\n\n#   file defined with the command :command:`matlab_add_mex` have hidden\n\n#   visibility, except for the entry point. This is the default behaviour of\n\n#   the MEX compiler, which lowers the risk of symbol collision between the\n\n#   libraries shipped with Matlab, and the libraries to which the MEX file is\n\n#   linking to. This is also the default on Windows platforms.\n\n#\n\n#   However, this is not sufficient in certain case, where for instance your\n\n#   MEX file is linking against libraries that are already loaded by Matlab,\n\n#   even if those libraries have different SONAMES.\n\n#   A possible solution is to hide the symbols of the libraries to which the\n\n#   MEX target is linking to. This can be achieved in GNU GCC compilers with\n\n#   the linker option ``-Wl,--exclude-libs,ALL``.\n\n#\n\n# **Tests using GPU resources**\n\n#   in case your MEX file is using the GPU and\n\n#   in order to be able to run unit tests on this MEX file, the GPU resources\n\n#   should be properly released by Matlab. A possible solution is to make\n\n#   Matlab aware of the use of the GPU resources in the session, which can be\n\n#   performed by a command such as ``D = gpuDevice()`` at the beginning of\n\n#   the test script (or via a fixture).\n\n#\n\n#\n\n# Reference\n\n# ^^^^^^^^^\n\n#\n\n# .. variable:: Matlab_ROOT_DIR\n\n#\n\n#    The root folder of the Matlab installation. If set before the call to\n\n#    :command:`find_package`, the module will look for the components in that\n\n#    path. If not set, then an automatic search of Matlab\n\n#    will be performed. If set, it should point to a valid version of Matlab.\n\n#\n\n# .. variable:: MATLAB_FIND_DEBUG\n\n#\n\n#    If set, the lookup of Matlab and the intermediate configuration steps are\n\n#    outputted to the console.\n\n#\n\n# .. variable:: MATLAB_ADDITIONAL_VERSIONS\n\n#\n\n#   If set, specifies additional versions of Matlab that may be looked for.\n\n#   The variable should be a list of strings, organised by pairs of release\n\n#   name and versions, such as follows::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"release_name1=corresponding_version1\"\n\n#         \"release_name2=corresponding_version2\"\n\n#         ...\n\n#         )\n\n#\n\n#   Example::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"R2013b=8.2\"\n\n#         \"R2013a=8.1\"\n\n#         \"R2012b=8.0\")\n\n#\n\n#   The order of entries in this list matters when several versions of\n\n#   Matlab are installed. The priority is set according to the ordering in\n\n#   this list.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The currently supported versions. Other version can be added by the user by\n\n# providing MATLAB_ADDITIONAL_VERSIONS\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# temporary folder for all Matlab runs\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_release_name\n\n#\n\n#   Returns the version of Matlab (17.58) from a release name (R2017k)\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_release_name_from_version\n\n#\n\n#   Returns the release name (R2017k) from the version of Matlab (17.58)\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extracts all the supported release names (R2017k...) of Matlab\n\n# internal use\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extracts all the supported versions of Matlab\n\n# internal use\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_extract_all_installed_versions_from_registry\n\n#\n\n#   This function parses the registry and founds the Matlab versions that are\n\n#   installed. The found versions are returned in `matlab_versions`.\n\n#   Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for\n\n#   The returned list contains all versions under\n\n#   ``HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB`` or an empty list in case an error\n\n#   occurred (or nothing found).\n\n#\n\n#   .. note::\n\n#\n\n#     Only the versions are provided. No check is made over the existence of the\n\n#     installation referenced in the registry,\n\n#\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\n\n# redirection of 64 bits applications\n",
        "Line" : 366,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# (internal)\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get the supported versions\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# this is a manual population of the versions we want to look for\n\n# this can be done as is, but preferably with the call to\n\n# matlab_get_supported_versions and variable\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# populating the versions we want to look for\n\n# set(matlab_supported_versions)\n",
        "Line" : 425,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# # Matlab 7\n\n# set(matlab_major 7)\n\n# foreach(current_matlab_minor RANGE 4 20)\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 431,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# # Matlab 8\n\n# set(matlab_major 8)\n\n# foreach(current_matlab_minor RANGE 0 5)\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 437,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 438,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# # taking into account the possible additional versions provided by the user\n\n# if(DEFINED MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# list(APPEND matlab_supported_versions MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# endif()\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# we order from more recent to older\n",
        "Line" : 446,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_all_valid_matlab_roots_from_registry\n\n#\n\n#   Populates the Matlab root with valid versions of Matlab.\n\n#   The returned matlab_roots is organized in pairs\n\n#   ``(version_number,matlab_root_path)``.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_all_valid_matlab_roots_from_registry(\n\n#         matlab_versions\n\n#         matlab_roots)\n\n#\n\n#   ``matlab_versions``\n\n#     the versions of each of the Matlab installations\n\n#   ``matlab_roots``\n\n#     the location of each of the Matlab installations\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The matlab_versions comes either from\n\n# extract_matlab_versions_from_registry_brute_force or\n\n# matlab_extract_all_installed_versions_from_registry.\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_mex_suffix\n\n#\n\n#   Returns the extension of the mex files (the suffixes).\n\n#   This function should not be called before the appropriate Matlab root has\n\n#   been found.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_mex_suffix(\n\n#         matlab_root\n\n#         mex_suffix)\n\n#\n\n#   ``matlab_root``\n\n#     the root of the Matlab installation\n\n#   ``mex_suffix``\n\n#     the variable name in which the suffix will be returned.\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# todo setup the extension properly. Currently I do not know if this is\n\n# sufficient for all win32 distributions.\n\n# there is also CMAKE_EXECUTABLE_SUFFIX that could be tweaked\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# we first try without suffix, since cmake does not understand a list with\n\n# one empty string element\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# this call should populate the cache automatically\n",
        "Line" : 542,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# the program has been found?\n",
        "Line" : 554,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_matlab_run\n\n#\n\n#   This function runs Matlab program specified on arguments and extracts its\n\n#   version.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_version_from_matlab_run(\n\n#         matlab_binary_path\n\n#         matlab_list_versions)\n\n#\n\n#   ``matlab_binary_path``\n\n#     the location of the `matlab` binary executable\n\n#   ``matlab_list_versions``\n\n#     the version extracted from Matlab\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# the log file is needed since on windows the command executes in a new\n\n# window and it is not possible to get back the answer of Matlab\n\n# the -wait command is needed on windows, otherwise the call returns\n\n# immediately after the program launches itself.\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# timeout set to 120 seconds, in case it does not start\n\n# note as said before OUTPUT_VARIABLE cannot be used in a platform\n\n# independent manner however, not setting it would flush the output of Matlab\n\n# in the current console (unix variant)\n",
        "Line" : 634,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# if successful, read back the log\n",
        "Line" : 668,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_unit_test\n\n#\n\n#   Adds a Matlab unit test to the test set of cmake/ctest.\n\n#   This command requires the component ``MAIN_PROGRAM``.\n\n#   The unit test uses the Matlab unittest framework (default, available\n\n#   starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``\n\n#   is given.\n\n#\n\n#   The function expects one Matlab test script file to be given.\n\n#   In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file\n\n#   should contain the script to be run, plus an exit command with the exit\n\n#   value. This exit value will be passed to the ctest framework (0 success,\n\n#   non 0 failure). Additional arguments accepted by :command:`add_test` can be\n\n#   passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).\n\n#\n\n#   ::\n\n#\n\n#     matlab_add_unit_test(\n\n#         NAME <name>\n\n#         UNITTEST_FILE matlab_file_containing_unittest.m\n\n#         [CUSTOM_TEST_COMMAND matlab_command_to_run_as_test]\n\n#         [UNITTEST_PRECOMMAND matlab_command_to_run]\n\n#         [TIMEOUT timeout]\n\n#         [ADDITIONAL_PATH path1 [path2 ...]]\n\n#         [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\n\n#         [TEST_ARGS arg1 [arg2 ...]]\n\n#         [NO_UNITTEST_FRAMEWORK]\n\n#         )\n\n#\n\n#   The function arguments are:\n\n#\n\n#   ``NAME``\n\n#     name of the unittest in ctest.\n\n#   ``UNITTEST_FILE``\n\n#     the matlab unittest file. Its path will be automatically\n\n#     added to the Matlab path.\n\n#   ``CUSTOM_TEST_COMMAND``\n\n#     Matlab script command to run as the test.\n\n#     If this is not set, then the following is run:\n\n#     ``runtests('matlab_file_name'), exit(max([ans(1,:).Failed]))``\n\n#     where ``matlab_file_name`` is the ``UNITTEST_FILE`` without the extension.\n\n#   ``UNITTEST_PRECOMMAND``\n\n#     Matlab script command to be ran before the file\n\n#     containing the test (eg. GPU device initialisation based on CMake\n\n#     variables).\n\n#   ``TIMEOUT``\n\n#     the test timeout in seconds. Defaults to 180 seconds as the\n\n#     Matlab unit test may hang.\n\n#   ``ADDITIONAL_PATH``\n\n#     a list of paths to add to the Matlab path prior to\n\n#     running the unit test.\n\n#   ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``\n\n#     a list of additional option in order\n\n#     to run Matlab from the command line.\n\n#     ``-nosplash -nodesktop -nodisplay`` are always added.\n\n#   ``TEST_ARGS``\n\n#     Additional options provided to the add_test command. These\n\n#     options are added to the default options (eg. \"CONFIGURATIONS Release\")\n\n#   ``NO_UNITTEST_FRAMEWORK``\n\n#     when set, indicates that the test should not\n\n#     use the unittest framework of Matlab (available for versions >= R2013a).\n\n#   ``WORKING_DIRECTORY``\n\n#     This will be the working directory for the test. If specified it will\n\n#     also be the output directory used for the log file of the test run.\n\n#     If not specifed the temporary directory ``${CMAKE_BINARY_DIR}/Matlab`` will\n\n#     be used as the working directory and the log location.\n\n#\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_mex\n\n#\n\n#   Adds a Matlab MEX target.\n\n#   This commands compiles the given sources with the current tool-chain in\n\n#   order to produce a MEX file. The final name of the produced output may be\n\n#   specified, as well as additional link libraries, and a documentation entry\n\n#   for the MEX file. Remaining arguments of the call are passed to the\n\n#   :command:`add_library` or :command:`add_executable` command.\n\n#\n\n#   ::\n\n#\n\n#      matlab_add_mex(\n\n#          NAME <name>\n\n#          [EXECUTABLE | MODULE | SHARED]\n\n#          SRC src1 [src2 ...]\n\n#          [OUTPUT_NAME output_name]\n\n#          [DOCUMENTATION file.txt]\n\n#          [LINK_TO target1 target2 ...]\n\n#          [...]\n\n#      )\n\n#\n\n#   ``NAME``\n\n#     name of the target.\n\n#   ``SRC``\n\n#     list of source files.\n\n#   ``LINK_TO``\n\n#     a list of additional link dependencies.  The target links to ``libmex``\n\n#     by default. If ``Matlab_MX_LIBRARY`` is defined, it also\n\n#     links to ``libmx``.\n\n#   ``OUTPUT_NAME``\n\n#     if given, overrides the default name. The default name is\n\n#     the name of the target without any prefix and\n\n#     with ``Matlab_MEX_EXTENSION`` suffix.\n\n#   ``DOCUMENTATION``\n\n#     if given, the file ``file.txt`` will be considered as\n\n#     being the documentation file for the MEX file. This file is copied into\n\n#     the same folder without any processing, with the same name as the final\n\n#     mex file, and with extension `.m`. In that case, typing ``help <name>``\n\n#     in Matlab prints the documentation contained in this file.\n\n#   ``MODULE`` or ``SHARED`` may be given to specify the type of library to be\n\n#     created. ``EXECUTABLE`` may be given to create an executable instead of\n\n#     a library. If no type is given explicitly, the type is ``SHARED``.\n\n#\n\n#   The documentation file is not processed and should be in the following\n\n#   format:\n\n#\n\n#   ::\n\n#\n\n#     % This is the documentation\n\n#     function ret = mex_target_output_name(input1)\n\n#\n",
        "Line" : 810,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# we do not need all this on Windows\n\n# pthread options\n",
        "Line" : 865,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# we should use try_compile instead, the link flags are discarded from\n\n# this compiler_flag function.\n\n#check_cxx_compiler_flag(-Wl,--exclude-libs,ALL HAS_SYMBOL_HIDING_CAPABILITY)\n",
        "Line" : 872,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# documentation\n",
        "Line" : 926,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# documentation\n",
        "Line" : 935,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# entry point in the mex file + taking care of visibility and symbol clashes.\n",
        "Line" : 937,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Apparently, compiling with -pthread generated the proper link flags\n\n# and some defines at compilation\n",
        "Line" : 945,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# if we do not do that, the symbols linked from eg. boost remain weak and\n\n# then clash with the ones defined in the matlab process. So by default\n\n# the symbols are hidden.\n\n# This also means that for shared libraries (like MEX), the entry point\n\n# should be explicitly declared with default visibility, otherwise Matlab\n\n# cannot find the entry point.\n\n# Note that this is particularly meaningful if the MEX wrapper itself\n\n# contains symbols that are clashing with Matlab (that are compiled in the\n\n# MEX file). In order to propagate the visibility options to the libraries\n\n# to which the MEX file is linked against, the -Wl,--exclude-libs,ALL\n\n# option should also be specified.\n",
        "Line" : 951,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#  get_target_property(\n\n#    _previous_link_flags\n\n#    ${${prefix}_NAME}\n\n#    LINK_FLAGS)\n\n#  if(NOT _previous_link_flags)\n\n#    set(_previous_link_flags)\n\n#  endif()\n",
        "Line" : 970,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,--exclude-libs,ALL\"\n\n#        # -Wl,--version-script=${_FindMatlab_SELF_DIR}/MatlabLinuxVisibility.map\"\n\n#    )\n\n#  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n\n#    # in this case, all other symbols become hidden.\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,-exported_symbol,_mexFunction\"\n\n#        #-Wl,-exported_symbols_list,${_FindMatlab_SELF_DIR}/MatlabOSXVisilibity.map\"\n\n#    )\n\n#  endif()\n",
        "Line" : 978,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# (internal)\n\n# Used to get the version of matlab, using caching. This basically transforms the\n\n# output of the root list, with possible unknown version, to a version\n\n#\n",
        "Line" : 1006,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# if the version is not trivial, we query matlab for that\n\n# we keep track of the location of matlab that induced this version\n\n#if(NOT DEFINED Matlab_PROG_VERSION_STRING_AUTO_DETECT)\n\n#  set(Matlab_PROG_VERSION_STRING_AUTO_DETECT \"\" CACHE INTERNAL \"internal matlab location for the discovered version\")\n\n#endif()\n",
        "Line" : 1012,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# the version is known, we just return it\n",
        "Line" : 1019,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#\n",
        "Line" : 1025,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# do we already have a matlab program?\n",
        "Line" : 1028,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# if not found, clear the dependent variables\n",
        "Line" : 1045,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# full real path for path comparison\n",
        "Line" : 1056,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# is it the same as the previous one?\n",
        "Line" : 1061,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# update the location of the program\n",
        "Line" : 1067,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# set the version into the cache\n",
        "Line" : 1080,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# warning, just in case several versions found (should not happen)\n",
        "Line" : 1083,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# return the updated value\n",
        "Line" : 1088,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# ###################################\n\n# Exploring the possible Matlab_ROOTS\n",
        "Line" : 1099,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# this variable will get all Matlab installations found in the current system.\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# if the user specifies a possible root, we keep this one\n",
        "Line" : 1108,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# if Matlab_ROOT_DIR specified but erroneous\n",
        "Line" : 1111,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# NOTFOUND indicates the code below to search for the version automatically\n",
        "Line" : 1116,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# empty version\n",
        "Line" : 1118,
        "CharPositionInLine" : 72
      },
      "64" : {
        "Text" : "# cached version\n",
        "Line" : 1120,
        "CharPositionInLine" : 95
      },
      "65" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\n\n# one installation using the appropriate heuristics\n",
        "Line" : 1127,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# On WIN32, we look for Matlab installation in the registry\n\n# if unsuccessful, we look for all known revision and filter the existing\n\n# ones.\n",
        "Line" : 1132,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\n",
        "Line" : 1136,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\n",
        "Line" : 1147,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# filtering the results with the registry keys\n",
        "Line" : 1157,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# on mac, we look for the /Application paths\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\n\n# any other guess.\n",
        "Line" : 1163,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\n",
        "Line" : 1198,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\n\n# If set by the user, this wont change\n",
        "Line" : 1201,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# we then populate the list of roots, with empty version\n",
        "Line" : 1209,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# resolve symlinks\n",
        "Line" : 1214,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# get the directory (the command below has to be run twice)\n\n# this will be the matlab root\n",
        "Line" : 1217,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Matlab should be in bin\n",
        "Line" : 1220,
        "CharPositionInLine" : 93
      },
      "77" : {
        "Text" : "# take the first possible Matlab root\n",
        "Line" : 1243,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# adding a warning in case of ambiguity\n",
        "Line" : 1250,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# check if the root changed wrt. the previous defined one, if so\n\n# clear all the cached variables for being able to reconfigure properly\n",
        "Line" : 1258,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# internal\n",
        "Line" : 1274,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "#Matlab_PROG_VERSION_STRING_AUTO_DETECT\n",
        "Line" : 1277,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# Fix the version, in case this one is NOTFOUND\n",
        "Line" : 1291,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# i should be for intel\n",
        "Line" : 1318,
        "CharPositionInLine" : 32
      },
      "84" : {
        "Text" : "# This variable goes to the cache.\n",
        "Line" : 1364,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# internal\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\n\n# This is the function to be used below instead of the find_library directives.\n",
        "Line" : 1376,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# the MEX library/header are required\n",
        "Line" : 1388,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# the MEX extension is required\n",
        "Line" : 1407,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# the matlab root is required\n",
        "Line" : 1410,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# component Mex Compiler\n",
        "Line" : 1413,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# component Matlab program\n",
        "Line" : 1429,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Component MX library\n",
        "Line" : 1445,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Component ENG library\n",
        "Line" : 1461,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Component MAT library\n",
        "Line" : 1477,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Component Simulink\n",
        "Line" : 1493,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "cmake/FindMOSEK.cmake" : {
      "ObjectId" : "87f9640ab7c33a8cb947884d567c3a13ea2fb0f7",
      "LastModified" : "2018-10-14T23:35:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find MOSEK\n\n# Once done this will define\n\n#\n\n# MOSEK_FOUND           - system has MOSEK\n\n# MOSEK_INCLUDE_DIRS    - the MOSEK include directories\n\n# MOSEK_LIBRARIES       - Link these to use MOSEK\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hardcoded search paths\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check that Mosek was successfully found\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Hide variables from CMake-Gui options\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/LibiglDownloadExternal.cmake" : {
      "ObjectId" : "f7c69305cb754ce8e1e5893a8bf916354b45612a",
      "LastModified" : "2018-10-15T15:03:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# With CMake 3.8 and above, we can hide warnings about git being in a\n\n# detached head by passing an extra GIT_CONFIG option\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shortcut function\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## CGAL\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## CoMISo\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Cork\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Eigen\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Embree\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# GIT_REPOSITORY https://github.com/embree/embree.git\n\n# GIT_TAG        cb61322db3bb7082caed21913ad14869b436fe78\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## glad\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## GLFW\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## ImGui\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## pybind11\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## stb_image\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## TetGen\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## TinyXML\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Triangle\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Google test\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "################################################################################\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Test data\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Tutorial data\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/libigl.cmake" : {
      "ObjectId" : "4b11007a0a0c1b381968361458495889b9c2f62d",
      "LastModified" : "2018-10-15T18:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# https://github.com/libigl/libigl/issues/751\n\n# http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20160425/351643.html\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Added -c\n",
        "Line" : 14,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "### Available options ###\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Configuration\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Dependencies are linked as INTERFACE targets unless libigl is compiled as a static library\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Download and update 3rdparty libraries\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################\n\n### IGL Common\n\n################################################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Export igl_common as igl::common\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Transitive C++11 flags\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Other compilation flags\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Enable parallel compilation for Visual Studio\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generate position independent code\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Eigen\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If an imported target already exists, use it\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# C++11 Thread library\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################################\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## CGAL dependencies on Windows: GMP & MPFR\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "################################################################################\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# disable all warnings (not ideal but...)\n",
        "Line" : 148,
        "CharPositionInLine" : 59
      },
      "20" : {
        "Text" : "#target_compile_options(${module_libname} PRIVATE -w) # disable all warnings (not ideal but...)\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Alias target because it looks nicer\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Export as igl::${module_name}\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "################################################################################\n\n### IGL Core\n\n################################################################################\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "################################################################################\n\n### Download the python part ###\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "################################################################################\n\n### Compile the CGAL part ###\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Try to find the CGAL library\n\n# CGAL Core is needed for\n\n# `Exact_predicates_exact_constructions_kernel_with_sqrt`\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# If CGAL has been found, then build the libigl module\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Helper function for `igl_copy_cgal_dll()`\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Convenient functions to copy CGAL dlls into a target (executable) destination folder (for Windows)\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "################################################################################\n\n### Compile the CoMISo part ###\n\n# NOTE: this cmakefile works only with the\n\n# comiso available here: https://github.com/libigl/CoMISo\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "################################################################################\n\n### Compile the cork part ###\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# call this \"lib-cork\" instead of \"cork\", otherwise cmake gets confused about\n\n# \"cork\" executable\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "################################################################################\n\n### Compile the embree part ###\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# set(ENABLE_INSTALLER OFF CACHE BOOL \" \" FORCE)\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# set(EMBREE_STATIC_RUNTIME OFF CACHE BOOL \" \" FORCE)\n",
        "Line" : 275,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Adds a post-build event\n",
        "Line" : 287,
        "CharPositionInLine" : 42
      },
      "37" : {
        "Text" : "# which executes \"cmake - E\n",
        "Line" : 288,
        "CharPositionInLine" : 54
      },
      "38" : {
        "Text" : "# <--this is in-file\n\n# <--this is out-file path\n",
        "Line" : 289,
        "CharPositionInLine" : 30
      },
      "39" : {
        "Text" : "# Execute after embree target has been built\n",
        "Line" : 291,
        "CharPositionInLine" : 24
      },
      "40" : {
        "Text" : "################################################################################\n\n### Compile the matlab part ###\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "################################################################################\n\n### Compile the mosek part ###\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "################################################################################\n\n### Compile the opengl part ###\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# OpenGL module\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# glad module\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "################################################################################\n\n### Compile the GLFW part ###\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# GLFW module\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "################################################################################\n\n### Compile the ImGui part ###\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# ImGui module\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "################################################################################\n\n### Compile the png part ###\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# png/ module is anomalous because it also depends on opengl it really should\n\n# be moved into the opengl/ directory and namespace ...\n",
        "Line" : 373,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "################################################################################\n\n### Compile the tetgen part ###\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "################################################################################\n\n### Compile the triangle part ###\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "################################################################################\n\n### Compile the xml part ###\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "################################################################################\n\n### Install and export all modules\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "################################################################################\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Install and export core library\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Install headers for core library\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Write package configuration file\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Write export file\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 60
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "e96528c8cd8eefbf443be41ea2a1a6016cd8d2a5",
      "LastModified" : "2018-10-15T18:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Force a specific python version\n\n# set(PYTHON_LIBRARIES \"D:/Python34/libs/python34.lib\")\n\n# set(PYTHON_INCLUDE_DIR \"D:/Python34/include\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Force a specific python version\n\n# set(PYTHON_LIBRARIES \"/usr/local/Cellar/python3/3.5.0/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\")\n\n# set(PYTHON_INCLUDE_DIR \"/usr/local/Cellar/python3/3.5.0/Frameworks/Python.framework/Versions/3.5/include/python3.5m\")\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## libigl\t\t\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## include pybind\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Prepare the python library\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Add dependencies\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Optional modules\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Enforce size-based optimization and link time code generation on MSVC (~30% smaller binaries in experiments)\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# .PYD file extension on Windows\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Link against the Python shared library\n\n# message(FATAL_ERROR ${PYTHON_LIBRARY})\n\n# target_link_libraries(igl ${PYTHON_LIBRARY})\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# It's quite common to have multiple copies of the same Python version\n\n# installed on one's system. E.g.: one copy from the OS and another copy\n\n# that's statically linked into an application like Blender or Maya.\n\n# If we link our plugin library against the OS Python here and import it\n\n# into Blender or Maya later on, this will cause segfaults when multiple\n\n# conflicting Python instances are active at the same time.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Windows does not seem to be affected by this issue. The solution for Linux\n\n# and Mac OS is simple: we just don't link against the Python library. The\n\n# resulting shared library will have missing symbols, but that's perfectly\n\n# fine -- they will be resolved at import time.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# .SO file extension on Linux/Mac OS\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Enable flag if undefined symbols appear on pyigl module import to get notified about the missing symbols at link time\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Strip unnecessary sections of the binary on Linux/Mac OS\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "50e10814648f6c7ca1596fda0230f4ec188a4209",
      "LastModified" : "2018-10-15T18:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Adding libIGL: choose the path to your local copy libIGL\t\t\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Download data\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Download Google unit test framework.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set TEST_DIR definition\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add googletest googlemock support\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Process code in each subdirectories: add in decreasing order of complexity\n\n# (last added will run first and those should be the fastest tests)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/include/igl/CMakeLists.txt" : {
      "ObjectId" : "acae0cba6244e4a71437452750284b03395a29e0",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/include/igl/copyleft/boolean/CMakeLists.txt" : {
      "ObjectId" : "e1d79daf1c62383af91182d894ca29dbc3ea3857",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if CGAL is available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/include/igl/copyleft/cgal/CMakeLists.txt" : {
      "ObjectId" : "497a7db544ad4750e80198c7744351e1cf429ffe",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/include/igl/copyleft/comiso/CMakeLists.txt" : {
      "ObjectId" : "8ca323a967b7a5ec9c05e297af6c2c13ef1c9b13",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/include/igl/copyleft/tetgen/CMakeLists.txt" : {
      "ObjectId" : "01338c817b4ebc66ba9a7e7f4f5329c9fdbb6537",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/include/igl/mosek/CMakeLists.txt" : {
      "ObjectId" : "d31ddef597bc9085fadce699817f48c2d44f1f68",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/101_FileIO/CMakeLists.txt" : {
      "ObjectId" : "b7b6bea84cbba237523d72404824deee4560e9f4",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/102_DrawMesh/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/103_Events/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/104_Colors/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/105_Overlays/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/106_ViewerMenu/CMakeLists.txt" : {
      "ObjectId" : "ca1d963c50a99295e3be6ce2e20e6b54da3793e5",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/107_MultipleMeshes/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/201_Normals/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/202_GaussianCurvature/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/203_CurvatureDirections/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/204_Gradient/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/205_Laplacian/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/206_GeodesicDistance/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/301_Slice/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/302_Sort/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/303_LaplaceEquation/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/304_LinearEqualityConstraints/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/305_QuadraticProgramming/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/306_EigenDecomposition/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/401_BiharmonicDeformation/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/402_PolyharmonicDeformation/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/403_BoundedBiharmonicWeights/CMakeLists.txt" : {
      "ObjectId" : "e0a450450a19447ee35e01970d4f3a0246767371",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/404_DualQuaternionSkinning/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/405_AsRigidAsPossible/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/406_FastAutomaticSkinningTransformations/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/407_BiharmonicCoordinates/CMakeLists.txt" : {
      "ObjectId" : "75cf0da5065bd66a39bbdf7a57e2cbc5a6013188",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/501_HarmonicParam/CMakeLists.txt" : {
      "ObjectId" : "75cf0da5065bd66a39bbdf7a57e2cbc5a6013188",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/502_LSCMParam/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/503_ARAPParam/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/504_NRosyDesign/CMakeLists.txt" : {
      "ObjectId" : "6996a142424620ecba75a2b5c9277b7b6345639d",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/505_MIQ/CMakeLists.txt" : {
      "ObjectId" : "6996a142424620ecba75a2b5c9277b7b6345639d",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/506_FrameField/CMakeLists.txt" : {
      "ObjectId" : "6996a142424620ecba75a2b5c9277b7b6345639d",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/507_Planarization/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/601_Serialization/CMakeLists.txt" : {
      "ObjectId" : "40c3fad03bcf2055b79cffccb47c19fc64cc3e00",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/602_Matlab/CMakeLists.txt" : {
      "ObjectId" : "8f422f6070ae90fb4f646853a81675ccc6df9f52",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/604_Triangle/CMakeLists.txt" : {
      "ObjectId" : "7261d33ee512674f7934445e24c896e12bc540f9",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/605_Tetgen/CMakeLists.txt" : {
      "ObjectId" : "391af8e9157c6a52c5d168f35d146469f1e961ae",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/606_AmbientOcclusion/CMakeLists.txt" : {
      "ObjectId" : "d0ec2693153c4db5bb0678e2dfc23e7157ee93fc",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/607_ScreenCapture/CMakeLists.txt" : {
      "ObjectId" : "bf18bdd55fa1402a235e9d94044dfa1d85bc45bf",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/608_LIM/CMakeLists.txt" : {
      "ObjectId" : "39c442e6f30c2282c854aaff0dd7c2f5ea0a503d",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/609_Boolean/CMakeLists.txt" : {
      "ObjectId" : "63697a72b271812a8d6932b2cc3bb7ae258314c5",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/610_CSGTree/CMakeLists.txt" : {
      "ObjectId" : "63697a72b271812a8d6932b2cc3bb7ae258314c5",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/701_Statistics/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/702_WindingNumber/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/703_Decimation/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/704_SignedDistance/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/705_MarchingCubes/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/706_FacetOrientation/CMakeLists.txt" : {
      "ObjectId" : "d0ec2693153c4db5bb0678e2dfc23e7157ee93fc",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/707_SweptVolume/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/708_Picking/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/709_SLIM/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/710_SCAF/CMakeLists.txt" : {
      "ObjectId" : "7261d33ee512674f7934445e24c896e12bc540f9",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/711_Subdivision/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/712_DataSmoothing/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/713_ShapeUp/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/714_MarchingTets/CMakeLists.txt" : {
      "ObjectId" : "391af8e9157c6a52c5d168f35d146469f1e961ae",
      "LastModified" : "2018-10-15T13:12:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/715_MeshImplicitFunction/CMakeLists.txt" : {
      "ObjectId" : "c4ce2b52d615bd0f802f353317c4788c0136b4bb",
      "LastModified" : "2018-10-15T15:46:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tutorial/CMakeLists.txt" : {
      "ObjectId" : "7570c1c4d92c1ac2eecf066fb41f76fcfaa3f21e",
      "LastModified" : "2018-10-15T18:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### conditionally compile certain modules depending on libraries found on the system\t\t\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Adding libIGL: choose the path to your local copy libIGL\t\t\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Download data\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Output directories\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Choose which chapters to compile\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Store location of tutorial/shared directory\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Chapter 1\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#######################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Chapter 2\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Chapter 3\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Chapter 4\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Chapter 5\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Chapter 6\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Chapter 7\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    }
  },
  "FileTypes" : {
    "CMAKE" : 74
  },
  "ElapsedTime" : 1673
}