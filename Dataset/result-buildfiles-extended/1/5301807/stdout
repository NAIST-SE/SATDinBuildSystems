{
  "Repository" : "5301807",
  "Revision" : "HEAD",
  "ObjectId" : "61913daaf3b21960de13340a6069bc3daca8744a",
  "CommitTime" : "2019-04-14T21:34:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "9eefbb79237b9a7cf0d8f6688e4349d319449d8d",
      "LastModified" : "2019-01-16T23:51:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# In Qt 5.1+ we have our own main() function, don't autolink to qtmain on Windows\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "##################################### Set CMake options #####################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Output all executables and shared libs in the main build folder, not in subfolders.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "######## Set compiler flags ########\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##################################### Set Application options #####################################\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "######## Set URLs ########\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "######## Set version numbers ########\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build number\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build platform.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Channel list URL\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Notification URL\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# paste.ee API key\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google analytics ID\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#### Check the current Git commit and branch\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#### Custom target to just print the version.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################ 3rd Party Libs ################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find the required Qt parts\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Qt5 cmake files don't provide its install paths, so ask qmake.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "####################################### Install layout #######################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# How to install the build results\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Apps to bundle\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Mac bundle settings\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# install as bundle\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add the icon\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Apps to bundle\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# install as bundle\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Set RPATH\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Install basic runner script\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# install as bundle with no dependencies included\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Set RPATH\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Install basic runner script\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# install as bundle with no dependencies included\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Apps to bundle\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# install as bundle\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "################################ Included Libs ################################\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#FIXME: fix unit tests.\n",
        "Line" : 238,
        "CharPositionInLine" : 54
      },
      "39" : {
        "Text" : "# google analytics library\n\n# system information library\n",
        "Line" : 243,
        "CharPositionInLine" : 39
      },
      "40" : {
        "Text" : "# markdown parser\n",
        "Line" : 245,
        "CharPositionInLine" : 36
      },
      "41" : {
        "Text" : "# java based launcher part for Minecraft\n",
        "Line" : 246,
        "CharPositionInLine" : 37
      },
      "42" : {
        "Text" : "# java compatibility checker\n",
        "Line" : 247,
        "CharPositionInLine" : 38
      },
      "43" : {
        "Text" : "# xz compression\n",
        "Line" : 248,
        "CharPositionInLine" : 40
      },
      "44" : {
        "Text" : "# zip manipulation library\n",
        "Line" : 249,
        "CharPositionInLine" : 35
      },
      "45" : {
        "Text" : "# java pack200 compression\n\n# Qt extension for colors\n\n# fork of Qt's QIcon loader\n",
        "Line" : 250,
        "CharPositionInLine" : 36
      },
      "46" : {
        "Text" : "# fork of a library from Qt solutions\n",
        "Line" : 253,
        "CharPositionInLine" : 38
      },
      "47" : {
        "Text" : "# google analytics library\n",
        "Line" : 254,
        "CharPositionInLine" : 40
      },
      "48" : {
        "Text" : "############################### Built Artifacts ###############################\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# NOTE: this must always be last to appease the CMake deity of quirky install command evaluation order.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 50
    },
    "api/gui/CMakeLists.txt" : {
      "ObjectId" : "ad116a43da4fe319456570fcb99a5df8aaf22298",
      "LastModified" : "2018-07-15T12:51:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Icons\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "################################ COMPILE ################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Mark and export headers\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install it\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "api/logic/CMakeLists.txt" : {
      "ObjectId" : "398501630334ed56d0708645648dc0f087485bfa",
      "LastModified" : "2019-02-19T00:00:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LOGIC - Base classes and infrastructure\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Basic instance manipulation tasks (derived from InstanceTask)\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use tracking separate from memory management\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Prefix tree where node names are strings between separators\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# WARNING: globals live here\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# String filters\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# JSON parsing helpers\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# RW lock protected map\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# A variable that has an implicit default value and keeps track of changes\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# a smart pointer wrapper intended for safer use with Qt signal/slot mechanisms\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Compression support\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Command line parameter parsing\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Version number string support\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# A Recursive file system watcher\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Path matchers\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# network stuffs\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Game launch logic\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Old update system\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Rarely used notifications\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Notifications - short warning messages\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Backend for the news bar... there's usually no news.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# News System\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Icon interface\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# News System\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Minecraft services status checker\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Status system\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Support for Minecraft instances and launch\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Minecraft support\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Assets\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Forge and all things forge related\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Skin upload utilities\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# FIXME: shares data with FileSystem test\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# the screenshots feature\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Tasks\n",
        "Line" : 340,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Settings\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Java related code\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Tools\n",
        "Line" : 399,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Metadata sources\n",
        "Line" : 413,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Flame\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "################################ COMPILE ################################\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# we need zlib\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Link\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Mark and export headers\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Install it\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 44
    },
    "application/CMakeLists.txt" : {
      "ObjectId" : "26852df0303f3e95b8561c6ee21ee61336bd896f",
      "LastModified" : "2019-01-29T23:35:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######## Configure the file with build properties ########\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################ FILES ################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######## Sources and headers ########\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Application base\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# GUI - general utilities\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Super secret!\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# GUI - windows\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# GUI - setup wizard\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# GUI - themes\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# GUI - settings-specific wrappers for paged dialog\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Processes\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# page provider for instances\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Common java checking UI\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# GUI - paged dialog base\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# GUI - instance pages\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# GUI - global settings pages\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# GUI - platform pages\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# GUI - dialogs\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# GUI - widgets\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# GUI - instance group view\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "######## UIs ########\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Instance pages\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Global settings pages\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Platform pages\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Dialogs\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Widgets/other\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "######## Windows resource files ########\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Qt 5 stuff\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Add executable\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#### The MultiMC bundle mess! ####\n\n# Bundle utilities are used to complete the portable packages - they add all the libraries that would otherwise be missing on the target system.\n\n# NOTE: it seems that this absolutely has to be here, and nowhere else.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Add qt.conf - this makes Qt stop looking for things outside the bundle\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Bundle plugins\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Image formats\n",
        "Line" : 336,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Icon engines\n",
        "Line" : 343,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Platform plugins\n",
        "Line" : 350,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Image formats\n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Icon engines\n",
        "Line" : 368,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Platform plugins\n",
        "Line" : 378,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 38
    },
    "cmake/BundleUtilities.cmake" : {
      "ObjectId" : "e3f50b94cf7402328d5570cb4b9bd35e5bc03c7a",
      "LastModified" : "2018-01-27T01:00:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Functions to help assemble a standalone bundle application.\n\n# A collection of CMake utility functions useful for dealing with .app\n\n# bundles on the Mac and bundle-like directories on any OS.\n\n#\n\n# The following functions are provided by this module:\n\n#   fixup_bundle\n\n#   copy_and_fixup_bundle\n\n#   verify_app\n\n#   get_bundle_main_executable\n\n#   get_dotapp_dir\n\n#   get_bundle_and_executable\n\n#   get_bundle_all_executables\n\n#   get_item_key\n\n#   clear_bundle_keys\n\n#   set_bundle_key_values\n\n#   get_bundle_keys\n\n#   copy_resolved_item_into_bundle\n\n#   copy_resolved_framework_into_bundle\n\n#   fixup_bundle_item\n\n#   verify_bundle_prerequisites\n\n#   verify_bundle_symlinks\n\n# Requires CMake 2.6 or greater because it uses function, break and\n\n# PARENT_SCOPE. Also depends on GetPrerequisites.cmake.\n\n#\n\n#  FIXUP_BUNDLE(<app> <libs> <dirs>)\n\n# Fix up a bundle in-place and make it standalone, such that it can be\n\n# drag-n-drop copied to another machine and run on that machine as long as all\n\n# of the system libraries are compatible.\n\n#\n\n# If you pass plugins to fixup_bundle as the libs parameter, you should install\n\n# them or copy them into the bundle before calling fixup_bundle. The \"libs\"\n\n# parameter is a list of libraries that must be fixed up, but that cannot be\n\n# determined by otool output analysis. (i.e., plugins)\n\n#\n\n# Gather all the keys for all the executables and libraries in a bundle, and\n\n# then, for each key, copy each prerequisite into the bundle. Then fix each one\n\n# up according to its own list of prerequisites.\n\n#\n\n# Then clear all the keys and call verify_app on the final bundle to ensure\n\n# that it is truly standalone.\n\n#\n\n#  COPY_AND_FIXUP_BUNDLE(<src> <dst> <libs> <dirs>)\n\n# Makes a copy of the bundle <src> at location <dst> and then fixes up the\n\n# new copied bundle in-place at <dst>...\n\n#\n\n#  VERIFY_APP(<app>)\n\n# Verifies that an application <app> appears valid based on running analysis\n\n# tools on it. Calls \"message(FATAL_ERROR\" if the application is not verified.\n\n#\n\n#  GET_BUNDLE_MAIN_EXECUTABLE(<bundle> <result_var>)\n\n# The result will be the full path name of the bundle's main executable file\n\n# or an \"error:\" prefixed string if it could not be determined.\n\n#\n\n#  GET_DOTAPP_DIR(<exe> <dotapp_dir_var>)\n\n# Returns the nearest parent dir whose name ends with \".app\" given the full\n\n# path to an executable. If there is no such parent dir, then simply return\n\n# the dir containing the executable.\n\n#\n\n# The returned directory may or may not exist.\n\n#\n\n#  GET_BUNDLE_AND_EXECUTABLE(<app> <bundle_var> <executable_var> <valid_var>)\n\n# Takes either a \".app\" directory name or the name of an executable\n\n# nested inside a \".app\" directory and returns the path to the \".app\"\n\n# directory in <bundle_var> and the path to its main executable in\n\n# <executable_var>\n\n#\n\n#  GET_BUNDLE_ALL_EXECUTABLES(<bundle> <exes_var>)\n\n# Scans the given bundle recursively for all executable files and accumulates\n\n# them into a variable.\n\n#\n\n#  GET_ITEM_KEY(<item> <key_var>)\n\n# Given a file (item) name, generate a key that should be unique considering\n\n# the set of libraries that need copying or fixing up to make a bundle\n\n# standalone. This is essentially the file name including extension with \".\"\n\n# replaced by \"_\"\n\n#\n\n# This key is used as a prefix for CMake variables so that we can associate a\n\n# set of variables with a given item based on its key.\n\n#\n\n#  CLEAR_BUNDLE_KEYS(<keys_var>)\n\n# Loop over the list of keys, clearing all the variables associated with each\n\n# key. After the loop, clear the list of keys itself.\n\n#\n\n# Caller of get_bundle_keys should call clear_bundle_keys when done with list\n\n# of keys.\n\n#\n\n#  SET_BUNDLE_KEY_VALUES(<keys_var> <context> <item> <exepath> <dirs>\n\n#                        <copyflag>)\n\n# Add a key to the list (if necessary) for the given item. If added,\n\n# also set all the variables associated with that key.\n\n#\n\n#  GET_BUNDLE_KEYS(<app> <libs> <dirs> <keys_var>)\n\n# Loop over all the executable and library files within the bundle (and given\n\n# as extra <libs>) and accumulate a list of keys representing them. Set\n\n# values associated with each key such that we can loop over all of them and\n\n# copy prerequisite libs into the bundle and then do appropriate\n\n# install_name_tool fixups.\n\n#\n\n#  COPY_RESOLVED_ITEM_INTO_BUNDLE(<resolved_item> <resolved_embedded_item>)\n\n# Copy a resolved item into the bundle if necessary. Copy is not necessary if\n\n# the resolved_item is \"the same as\" the resolved_embedded_item.\n\n#\n\n#  COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE(<resolved_item> <resolved_embedded_item>)\n\n# Copy a resolved framework into the bundle if necessary. Copy is not necessary\n\n# if the resolved_item is \"the same as\" the resolved_embedded_item.\n\n#\n\n# By default, BU_COPY_FULL_FRAMEWORK_CONTENTS is not set. If you want full\n\n# frameworks embedded in your bundles, set BU_COPY_FULL_FRAMEWORK_CONTENTS to\n\n# ON before calling fixup_bundle. By default,\n\n# COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE copies the framework dylib itself plus\n\n# the framework Resources directory.\n\n#\n\n#  FIXUP_BUNDLE_ITEM(<resolved_embedded_item> <exepath> <dirs>)\n\n# Get the direct/non-system prerequisites of the resolved embedded item. For\n\n# each prerequisite, change the way it is referenced to the value of the\n\n# _EMBEDDED_ITEM keyed variable for that prerequisite. (Most likely changing to\n\n# an \"@executable_path\" style reference.)\n\n#\n\n# This function requires that the resolved_embedded_item be \"inside\" the bundle\n\n# already. In other words, if you pass plugins to fixup_bundle as the libs\n\n# parameter, you should install them or copy them into the bundle before\n\n# calling fixup_bundle. The \"libs\" parameter is a list of libraries that must\n\n# be fixed up, but that cannot be determined by otool output analysis. (i.e.,\n\n# plugins)\n\n#\n\n# Also, change the id of the item being fixed up to its own _EMBEDDED_ITEM\n\n# value.\n\n#\n\n# Accumulate changes in a local variable and make *one* call to\n\n# install_name_tool at the end of the function with all the changes at once.\n\n#\n\n# If the BU_CHMOD_BUNDLE_ITEMS variable is set then bundle items will be\n\n# marked writable before install_name_tool tries to change them.\n\n#\n\n#  VERIFY_BUNDLE_PREREQUISITES(<bundle> <result_var> <info_var>)\n\n# Verifies that the sum of all prerequisites of all files inside the bundle\n\n# are contained within the bundle or are \"system\" libraries, presumed to exist\n\n# everywhere.\n\n#\n\n#  VERIFY_BUNDLE_SYMLINKS(<bundle> <result_var> <info_var>)\n\n# Verifies that any symlinks found in the bundle point to other files that are\n\n# already also in the bundle... Anything that points to an external file causes\n\n# this function to fail the verification.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The functions defined in this file depend on the get_prerequisites function\n\n# (and possibly others) found in:\n\n#\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Read Info.plist as a list of lines:\n\n#\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Scan the lines for \"<key>CFBundleExecutable</key>\" - the line after that\n\n# is the name of the main executable.\n\n#\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Ultimate goal:\n\n# If not in \"Contents/MacOS\" then scan the bundle for matching files. If\n\n# there is only one executable file that matches, then use it, otherwise\n\n# it's an error...\n\n#\n\n#file(GLOB_RECURSE file_list \"${bundle}/${bundle_executable}\")\n",
        "Line" : 199,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# But for now, pragmatically, it's an error. Expect the main executable\n\n# for the bundle to be in Contents/MacOS, it's an error if it's not:\n\n#\n",
        "Line" : 206,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#\n\n# More inclusive technique... (This one would work on Windows and Linux\n\n# too, if a developer followed the typical Mac bundle naming convention...)\n\n#\n\n# If there is no Info.plist file, try to find an executable with the same\n\n# base name as the .app directory:\n\n#\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If there is a \".app\" parent directory,\n\n# ascend until we hit it:\n\n#   (typical of a Mac bundle executable)\n\n#\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Otherwise use a directory containing the exe\n\n#   (typical of a non-bundle executable on Mac, Windows or Linux)\n\n#\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Is it a directory ending in .app?\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#message(STATUS \"info: handled .app directory case...\")\n",
        "Line" : 275,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Is it an executable file?\n",
        "Line" : 283,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#message(STATUS \"info: handled executable file in .app dir case...\")\n",
        "Line" : 291,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "#message(STATUS \"info: handled executable file in any dir case...\")\n",
        "Line" : 297,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# For frameworks, construct the name under the embedded path from the\n\n# opening \"${item_name}.framework/\" to the closing \"/${item_name}\":\n\n#\n",
        "Line" : 369,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# For other items, just use the same name as the original, but in the\n\n# embedded path:\n\n#\n",
        "Line" : 374,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Replace @executable_path and resolve \"..\" references:\n\n#\n",
        "Line" : 380,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# *But* -- if we are not copying, then force resolved_embedded_item to be\n\n# the same as resolved_item. In the case of multiple executables in the\n\n# original bundle, using the default_embedded_path results in looking for\n\n# the resolved executable next to the main bundle executable. This is here\n\n# so that exes in the other sibling directories (like \"bin\") get fixed up\n\n# properly...\n\n#\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#message(\"warning: item key '${key}' already in the list, subsequent references assumed identical to first\")\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Always use the exepath of the main bundle executable for @executable_path\n\n# replacements:\n\n#\n",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# But do fixups on all executables in the bundle:\n\n#\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# For each extra lib, accumulate a key as well and then also accumulate\n\n# any of its prerequisites. (Extra libs are typically dynamically loaded\n\n# plugins: libraries that are prerequisites for full runtime functionality\n\n# but that do not show up in otool -L output...)\n\n#\n",
        "Line" : 423,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# For each executable found in the bundle, accumulate keys as we go.\n\n# The list of keys should be complete when all prerequisites of all\n\n# binaries in the bundle have been analyzed.\n\n#\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add the exe itself to the keys:\n\n#\n",
        "Line" : 443,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Add each prerequisite to the keys:\n\n#\n",
        "Line" : 447,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Propagate values to caller's scope:\n\n#\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# ignore case on Windows\n",
        "Line" : 473,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy ${resolved_item} ${resolved_embedded_item}\")\n",
        "Line" : 484,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# ignore case on Windows\n",
        "Line" : 496,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Full Framework (everything):\n",
        "Line" : 508,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy_directory '${resolved_dir}' '${resolved_embedded_dir}'\")\n",
        "Line" : 513,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Framework lib itself:\n\n#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy ${resolved_item} ${resolved_embedded_item}\")\n",
        "Line" : 516,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Plus Resources, if they exist:\n",
        "Line" : 520,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy_directory '${resolved_resources}' '${resolved_embedded_resources}'\")\n",
        "Line" : 524,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# This item's key is \"ikey\":\n\n#\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Ensure the item is \"inside the .app bundle\" -- it should not be fixed up if\n\n# it is not in the .app bundle... Otherwise, we'll modify files in the build\n\n# tree, or in other varied locations around the file system, with our call to\n\n# install_name_tool. Make sure that doesn't happen here:\n\n#\n",
        "Line" : 541,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Each referenced item's key is \"rkey\" in the loop:\n\n#\n",
        "Line" : 577,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Change this item's id and all of its references in one call\n\n# to install_name_tool:\n\n#\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# On the Mac,\n\n# \"embedded\" and \"system\" prerequisites are fine... anything else means\n\n# the bundle's prerequisites are not verified (i.e., the bundle is not\n\n# really \"standalone\")\n\n#\n\n# On Windows (and others? Linux/Unix/...?)\n\n# \"local\" and \"system\" prereqs are fine...\n\n#\n",
        "Line" : 700,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# Found non-system/somehow-unacceptable prerequisites:\n",
        "Line" : 726,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# TODO: implement this function for real...\n\n# Right now, it is just a stub that verifies unconditionally...\n",
        "Line" : 747,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Verify that the bundle does not have any \"external\" prerequisites:\n\n#\n",
        "Line" : 767,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Verify that the bundle does not have any symlinks to external files:\n\n#\n",
        "Line" : 775,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 44
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "39c2707b3b412c7a96a247141fd81dcb0a8b523a",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 35
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#    (ARGN MATCHES \"||\") OR\n\n#    (ARGN MATCHES \"\\\\;\"))\n\n#    message(\"Please report the following error to the project!\")\n\n#    message(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/GetPrerequisites.cmake" : {
      "ObjectId" : "39c2cc6313c0d38a9593de357a8f6288333072a7",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Functions to analyze and list executable file prerequisites.\n\n# This module provides functions to list the .dll, .dylib or .so\n\n# files that an executable or shared library file depends on. (Its\n\n# prerequisites.)\n\n#\n\n# It uses various tools to obtain the list of required shared library files:\n\n#   dumpbin (Windows)\n\n#   objdump (MinGW on Windows)\n\n#   ldd (Linux/Unix)\n\n#   otool (Mac OSX)\n\n# The following functions are provided by this module:\n\n#   get_prerequisites\n\n#   list_prerequisites\n\n#   list_prerequisites_by_glob\n\n#   gp_append_unique\n\n#   is_file_executable\n\n#   gp_item_default_embedded_path\n\n#     (projects can override with gp_item_default_embedded_path_override)\n\n#   gp_resolve_item\n\n#     (projects can override with gp_resolve_item_override)\n\n#   gp_resolved_file_type\n\n#     (projects can override with gp_resolved_file_type_override)\n\n#   gp_file_type\n\n# Requires CMake 2.6 or greater because it uses function, break, return and\n\n# PARENT_SCOPE.\n\n#\n\n#  GET_PREREQUISITES(<target> <prerequisites_var> <exclude_system> <recurse>\n\n#                    <exepath> <dirs>)\n\n# Get the list of shared library files required by <target>. The list in\n\n# the variable named <prerequisites_var> should be empty on first entry to\n\n# this function. On exit, <prerequisites_var> will contain the list of\n\n# required shared library files.\n\n#\n\n# <target> is the full path to an executable file. <prerequisites_var> is the\n\n# name of a CMake variable to contain the results. <exclude_system> must be 0\n\n# or 1 indicating whether to include or exclude \"system\" prerequisites. If\n\n# <recurse> is set to 1 all prerequisites will be found recursively, if set to\n\n# 0 only direct prerequisites are listed. <exepath> is the path to the top\n\n# level executable used for @executable_path replacment on the Mac. <dirs> is\n\n# a list of paths where libraries might be found: these paths are searched\n\n# first when a target without any path info is given. Then standard system\n\n# locations are also searched: PATH, Framework locations, /usr/lib...\n\n#\n\n#  LIST_PREREQUISITES(<target> [<recurse> [<exclude_system> [<verbose>]]])\n\n# Print a message listing the prerequisites of <target>.\n\n#\n\n# <target> is the name of a shared library or executable target or the full\n\n# path to a shared library or executable file. If <recurse> is set to 1 all\n\n# prerequisites will be found recursively, if set to 0 only direct\n\n# prerequisites are listed. <exclude_system> must be 0 or 1 indicating whether\n\n# to include or exclude \"system\" prerequisites. With <verbose> set to 0 only\n\n# the full path names of the prerequisites are printed, set to 1 extra\n\n# informatin will be displayed.\n\n#\n\n#  LIST_PREREQUISITES_BY_GLOB(<glob_arg> <glob_exp>)\n\n# Print the prerequisites of shared library and executable files matching a\n\n# globbing pattern. <glob_arg> is GLOB or GLOB_RECURSE and <glob_exp> is a\n\n# globbing expression used with \"file(GLOB\" or \"file(GLOB_RECURSE\" to retrieve\n\n# a list of matching files. If a matching file is executable, its prerequisites\n\n# are listed.\n\n#\n\n# Any additional (optional) arguments provided are passed along as the\n\n# optional arguments to the list_prerequisites calls.\n\n#\n\n#  GP_APPEND_UNIQUE(<list_var> <value>)\n\n# Append <value> to the list variable <list_var> only if the value is not\n\n# already in the list.\n\n#\n\n#  IS_FILE_EXECUTABLE(<file> <result_var>)\n\n# Return 1 in <result_var> if <file> is a binary executable, 0 otherwise.\n\n#\n\n#  GP_ITEM_DEFAULT_EMBEDDED_PATH(<item> <default_embedded_path_var>)\n\n# Return the path that others should refer to the item by when the item\n\n# is embedded inside a bundle.\n\n#\n\n# Override on a per-project basis by providing a project-specific\n\n# gp_item_default_embedded_path_override function.\n\n#\n\n#  GP_RESOLVE_ITEM(<context> <item> <exepath> <dirs> <resolved_item_var>)\n\n# Resolve an item into an existing full path file.\n\n#\n\n# Override on a per-project basis by providing a project-specific\n\n# gp_resolve_item_override function.\n\n#\n\n#  GP_RESOLVED_FILE_TYPE(<original_file> <file> <exepath> <dirs> <type_var>)\n\n# Return the type of <file> with respect to <original_file>. String\n\n# describing type of prerequisite is returned in variable named <type_var>.\n\n#\n\n# Use <exepath> and <dirs> if necessary to resolve non-absolute <file>\n\n# values -- but only for non-embedded items.\n\n#\n\n# Possible types are:\n\n#   system\n\n#   local\n\n#   embedded\n\n#   other\n\n# Override on a per-project basis by providing a project-specific\n\n# gp_resolved_file_type_override function.\n\n#\n\n#  GP_FILE_TYPE(<original_file> <file> <type_var>)\n\n# Return the type of <file> with respect to <original_file>. String\n\n# describing type of prerequisite is returned in variable named <type_var>.\n\n#\n\n# Possible types are:\n\n#   system\n\n#   local\n\n#   embedded\n\n#   other\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# A file is not executable until proven otherwise:\n\n#\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If file name ends in .exe on Windows, *assume* executable:\n\n#\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# A clause could be added here that uses output or return value of dumpbin\n\n# to determine ${result_var}. In 99%+? practical cases, the exe name\n\n# match will be sufficient...\n\n#\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Use the information returned from the Unix shell command \"file\" to\n\n# determine if ${file_full} should be considered an executable file...\n\n#\n\n# If the file command's output contains \"executable\" and does *not* contain\n\n# \"text\" then it is likely an executable suitable for prerequisite analysis\n\n# via the get_prerequisites macro.\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Replace the name of the file in the output with a placeholder token\n\n# (the string \" _file_full_ \") so that just in case the path name of\n\n# the file contains the word \"text\" or \"executable\" we are not fooled\n\n# into thinking \"the wrong thing\" because the file name matches the\n\n# other 'file' command output we are looking for...\n\n#\n",
        "Line" : 181,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#message(STATUS \"file_ov='${file_ov}'\")\n",
        "Line" : 190,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#message(STATUS \"executable!\")\n",
        "Line" : 192,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#message(STATUS \"but text, so *not* a binary executable!\")\n",
        "Line" : 194,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Also detect position independent executables on Linux,\n\n# where \"file\" gives \"shared object ... (uses shared libraries)\"\n",
        "Line" : 201,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# \"file\" version 5.22 does not print \"(used shared libraries)\"\n\n# but uses \"interpreter\"\n",
        "Line" : 208,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# On Windows and Linux, \"embed\" prerequisites in the same directory\n\n# as the executable by default:\n\n#\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# On the Mac, relative to the executable depending on the type\n\n# of the thing we are embedding:\n\n#\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# The assumption here is that all executables in the bundle will be\n\n# in same-level-directories inside the bundle. The parent directory\n\n# of an executable inside the bundle should be MacOS or a sibling of\n\n# MacOS and all embedded paths returned from here will begin with\n\n# \"@executable_path/../\" and will work from all executables in all\n\n# such same-level-directories inside the bundle.\n\n#\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# By default, embed things right next to the main bundle executable:\n\n#\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Embed .dylibs right next to the main bundle executable:\n\n#\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Embed frameworks in the embedded \"Frameworks\" directory (sibling of MacOS):\n\n#\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Provide a hook so that projects can override the default embedded location\n\n# of any given library by whatever logic they choose:\n\n#\n",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Is it already resolved?\n\n#\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#\n\n# @executable_path references are assumed relative to exepath\n\n#\n",
        "Line" : 287,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "#message(STATUS \"info: embedded item exists (${ri})\")\n",
        "Line" : 294,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "#\n\n# @loader_path references are assumed relative to the\n\n# PATH of the given \"context\" (presumably another library)\n\n#\n",
        "Line" : 305,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#message(STATUS \"info: embedded item exists (${ri})\")\n",
        "Line" : 314,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "#\n\n# @rpath references are relative to the paths built into the binaries with -rpath\n\n# We handle this case like we do for other Unixes\n\n#\n",
        "Line" : 325,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "#message(STATUS \"info: 'find_file' in exepath/dirs (${ri})\")\n",
        "Line" : 334,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#message(STATUS \"info: 'find_file' in exepath/dirs (${ri})\")\n",
        "Line" : 348,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "#message(STATUS \"info: 'find_file' found framework (${fw})\")\n",
        "Line" : 364,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Using find_program on Windows will find dll files that are in the PATH.\n\n# (Converting simple file names into full path names if found.)\n\n#\n",
        "Line" : 372,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#message(STATUS \"info: 'find_program' in exepath/dirs (${ri})\")\n",
        "Line" : 381,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Provide a hook so that projects can override item resolution\n\n# by whatever logic they choose:\n\n#\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#    message(STATUS \"\n\n#******************************************************************************\n\n#warning: cannot resolve item '${item}'\n\n#\n\n#  possible problems:\n\n#    need more directories?\n\n#    need to use InstallRequiredSystemLibraries?\n\n#    run in install tree instead of build tree?\n\n#\n\n#    context='${context}'\n\n#    item='${item}'\n\n#    exepath='${exepath}'\n\n#    dirs='${dirs}'\n\n#    resolved_item_var='${resolved_item_var}'\n\n#******************************************************************************\n\n#\")\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#message(STATUS \"**\")\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# if cygwin, we can get the properly formed windows paths from cygpath\n",
        "Line" : 476,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Return type string based on computed booleans:\n\n#\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#message(STATUS \"gp_resolved_file_type: '${file}' '${resolved_file}'\")\n\n#message(STATUS \"                type: '${type}'\")\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Provide a hook so that projects can override the decision on whether a\n\n# library belongs to the system or not by whatever logic they choose:\n\n#\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#message(STATUS \"**\")\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# <setup-gp_tool-vars>\n\n#\n\n# Try to choose the right tool by default. Caller can set gp_tool prior to\n\n# calling this function to force using a different tool.\n\n#\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# This is how to check for cygwin, har!\n",
        "Line" : 601,
        "CharPositionInLine" : 27
      },
      "40" : {
        "Text" : "# Try harder. Maybe we're on MinGW\n",
        "Line" : 605,
        "CharPositionInLine" : 13
      },
      "41" : {
        "Text" : "# When running dumpbin, it also needs the \"Common7/IDE\" directory in the\n\n# PATH. It will already be in the PATH if being run from a Visual Studio\n\n# command prompt. Add it to the PATH here in case we are running from a\n\n# different command prompt.\n\n#\n",
        "Line" : 665,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Use cmake paths as a user may have a PATH element ending with a backslash.\n\n# This will escape the list delimiter and create havoc!\n",
        "Line" : 672,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# only add to the path if it is not already in the path\n",
        "Line" : 675,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "#\n\n# </setup-gp_tool-vars>\n",
        "Line" : 690,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Track new prerequisites at each new level of recursion. Start with an\n\n# empty list at each level:\n\n#\n",
        "Line" : 701,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Run gp_cmd on the target:\n\n#\n",
        "Line" : 706,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Convert to a list of lines:\n\n#\n",
        "Line" : 725,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# check for install id and remove it from list, since otool -L can include a\n\n# reference to itself\n",
        "Line" : 730,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# second line is install name\n",
        "Line" : 738,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# trim\n",
        "Line" : 741,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "#message(\"INSTALL ID is \\\"${gp_install_id}\\\"\")\n",
        "Line" : 743,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "# Analyze each line for file names that match the regular expression:\n\n#\n",
        "Line" : 747,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Extract information from each candidate:\n",
        "Line" : 752,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Use the raw_item as the list entries returned by this function. Use the\n\n# gp_resolve_item function to resolve it to an actual full path file if\n\n# necessary.\n\n#\n",
        "Line" : 773,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Add each item unless it is excluded:\n\n#\n",
        "Line" : 779,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# If item was really added, this is the first time we have seen it.\n\n# Add it to unseen_prereqs so that we can recursively add *its*\n\n# prerequisites...\n\n#\n\n# But first: resolve its name to an absolute full path name such\n\n# that the analysis tools can simply accept it as input.\n\n#\n",
        "Line" : 802,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 57
    },
    "cmake/GitFunctions.cmake" : {
      "ObjectId" : "a055b5de658eaac94e7ed5716865d8c7e092abef",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/QMakeQuery.cmake" : {
      "ObjectId" : "bf0fe9672da49b9bf3455cb6a35a87418c151fee",
      "LastModified" : "2014-04-06T16:12:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/UnitTest.cmake" : {
      "ObjectId" : "9f2bc269e7b33dcbcbdfcdc357e0eaca33988540",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# on unix we get the third / from the filename\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# we don't on windows, so we have to add it ourselves\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 2
    },
    "cmake/UnitTest/generate_test_data.cmake" : {
      "ObjectId" : "d0bd4ab12e4852a748918ac3621dfa0ae799f096",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy files from source directory to destination directory, substituting any\n\n# variables.  Create destination directory if it does not exist.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/UseJava.cmake" : {
      "ObjectId" : "1a5ef10766dc3645dcf87f8716fcc6dbdc223a33",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Use Module for Java\n\n# This file provides functions for Java. It is assumed that FindJava.cmake\n\n# has already been loaded.  See FindJava.cmake for information on how to\n\n# load Java into your CMake project.\n\n#\n\n# add_jar(TARGET_NAME SRC1 SRC2 .. SRCN RCS1 RCS2 .. RCSN)\n\n#\n\n# This command creates a <TARGET_NAME>.jar. It compiles the given source\n\n# files (SRC) and adds the given resource files (RCS) to the jar file.\n\n# If only resource files are given then just a jar file is created.\n\n#\n\n# Additional instructions:\n\n#   To add compile flags to the target you can set these flags with\n\n#   the following variable:\n\n#\n\n#       set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)\n\n#\n\n#   To add a path or a jar file to the class path you can do this\n\n#   with the CMAKE_JAVA_INCLUDE_PATH variable.\n\n#\n\n#       set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)\n\n#\n\n#   To use a different output name for the target you can set it with:\n\n#\n\n#       set(CMAKE_JAVA_TARGET_OUTPUT_NAME shibboleet.jar)\n\n#       add_jar(foobar foobar.java)\n\n#\n\n#   To use a different output directory than CMAKE_CURRENT_BINARY_DIR\n\n#   you can set it with:\n\n#\n\n#       set(CMAKE_JAVA_TARGET_OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)\n\n#\n\n#   To define an entry point in your jar you can set it with:\n\n#\n\n#       set(CMAKE_JAVA_JAR_ENTRY_POINT com/examples/MyProject/Main)\n\n#\n\n#   To add a VERSION to the target output name you can set it using\n\n#   CMAKE_JAVA_TARGET_VERSION. This will create a jar file with the name\n\n#   shibboleet-1.0.0.jar and will create a symlink shibboleet.jar\n\n#   pointing to the jar with the version information.\n\n#\n\n#       set(CMAKE_JAVA_TARGET_VERSION 1.2.0)\n\n#       add_jar(shibboleet shibbotleet.java)\n\n#\n\n#    If the target is a JNI library, utilize the following commands to\n\n#    create a JNI symbolic link:\n\n#\n\n#       set(CMAKE_JNI_TARGET TRUE)\n\n#       set(CMAKE_JAVA_TARGET_VERSION 1.2.0)\n\n#       add_jar(shibboleet shibbotleet.java)\n\n#       install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)\n\n#       install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})\n\n#\n\n#    If a single target needs to produce more than one jar from its\n\n#    java source code, to prevent the accumulation of duplicate class\n\n#    files in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior\n\n#    to calling the add_jar() function:\n\n#\n\n#       set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)\n\n#       add_jar(foo foo.java)\n\n#\n\n#       set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)\n\n#       add_jar(bar bar.java)\n\n#\n\n# Target Properties:\n\n#   The add_jar() functions sets some target properties. You can get these\n\n#   properties with the\n\n#      get_property(TARGET <target_name> PROPERTY <propery_name>)\n\n#   command.\n\n#\n\n#   INSTALL_FILES      The files which should be installed. This is used by\n\n#                      install_jar().\n\n#   JNI_SYMLINK        The JNI symlink which should be installed.\n\n#                      This is used by install_jni_symlink().\n\n#   JAR_FILE           The location of the jar file so that you can include\n\n#                      it.\n\n#   CLASS_DIR          The directory where the class files can be found. For\n\n#                      example to use them with javah.\n\n#\n\n# find_jar(<VAR>\n\n#          name | NAMES name1 [name2 ...]\n\n#          [PATHS path1 [path2 ... ENV var]]\n\n#          [VERSIONS version1 [version2]]\n\n#          [DOC \"cache documentation string\"]\n\n#         )\n\n#\n\n# This command is used to find a full path to the named jar. A cache\n\n# entry named by <VAR> is created to stor the result of this command. If\n\n# the full path to a jar is found the result is stored in the variable\n\n# and the search will not repeated unless the variable is cleared. If\n\n# nothing is found, the result will be <VAR>-NOTFOUND, and the search\n\n# will be attempted again next time find_jar is invoked with the same\n\n# variable.\n\n# The name of the full path to a file that is searched for is specified\n\n# by the names listed after NAMES argument. Additional search locations\n\n# can be specified after the PATHS argument. If you require special a\n\n# version of a jar file you can specify it with the VERSIONS argument.\n\n# The argument after DOC will be used for the documentation string in\n\n# the cache.\n\n#\n\n# install_jar(TARGET_NAME DESTINATION)\n\n#\n\n# This command installs the TARGET_NAME files to the given DESTINATION.\n\n# It should be called in the same scope as add_jar() or it will fail.\n\n#\n\n# install_jni_symlink(TARGET_NAME DESTINATION)\n\n#\n\n# This command installs the TARGET_NAME JNI symlinks to the given\n\n# DESTINATION. It should be called in the same scope as add_jar()\n\n# or it will fail.\n\n#\n\n# create_javadoc(<VAR>\n\n#                PACKAGES pkg1 [pkg2 ...]\n\n#                [SOURCEPATH <sourcepath>]\n\n#                [CLASSPATH <classpath>]\n\n#                [INSTALLPATH <install path>]\n\n#                [DOCTITLE \"the documentation title\"]\n\n#                [WINDOWTITLE \"the title of the document\"]\n\n#                [AUTHOR TRUE|FALSE]\n\n#                [USE TRUE|FALSE]\n\n#                [VERSION TRUE|FALSE]\n\n#               )\n\n#\n\n# Create java documentation based on files or packages. For more\n\n# details please read the javadoc manpage.\n\n#\n\n# There are two main signatures for create_javadoc. The first\n\n# signature works with package names on a path with source files:\n\n#\n\n#   Example:\n\n#   create_javadoc(my_example_doc\n\n#     PACKAGES com.exmaple.foo com.example.bar\n\n#     SOURCEPATH \"${CMAKE_CURRENT_SOURCE_DIR}\"\n\n#     CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n\n#     WINDOWTITLE \"My example\"\n\n#     DOCTITLE \"<h1>My example</h1>\"\n\n#     AUTHOR TRUE\n\n#     USE TRUE\n\n#     VERSION TRUE\n\n#   )\n\n#\n\n# The second signature for create_javadoc works on a given list of\n\n# files.\n\n#\n\n#   create_javadoc(<VAR>\n\n#                  FILES file1 [file2 ...]\n\n#                  [CLASSPATH <classpath>]\n\n#                  [INSTALLPATH <install path>]\n\n#                  [DOCTITLE \"the documentation title\"]\n\n#                  [WINDOWTITLE \"the title of the document\"]\n\n#                  [AUTHOR TRUE|FALSE]\n\n#                  [USE TRUE|FALSE]\n\n#                  [VERSION TRUE|FALSE]\n\n#                 )\n\n#\n\n# Example:\n\n#   create_javadoc(my_example_doc\n\n#     FILES ${example_SRCS}\n\n#     CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n\n#     WINDOWTITLE \"My example\"\n\n#     DOCTITLE \"<h1>My example</h1>\"\n\n#     AUTHOR TRUE\n\n#     USE TRUE\n\n#     VERSION TRUE\n\n#   )\n\n#\n\n# Both signatures share most of the options. These options are the\n\n# same as what you can find in the javadoc manpage. Please look at\n\n# the manpage for CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and\n\n# VERSION.\n\n#\n\n# The documentation will be by default installed to\n\n#\n\n#   ${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>\n\n#\n\n# if you don't set the INSTALLPATH.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n# Copyright 2010 Ben Boeckel <ben.boeckel@kitware.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define helper scripts\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# reset\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# create an empty java_class_filelist\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Compile the java files and create a list of class files\n",
        "Line" : 307,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOTE: this command generates an artificial dependency file\n",
        "Line" : 309,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# create the jar file\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add the target and make sure we have the latest resource files.\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/UseJavaClassFilelist.cmake" : {
      "ObjectId" : "c842bf71a4e4ea1e215d7e42212465570551f689",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This script create a list of compiled Java class files to be added to a\n\n# jar file. This avoids including cmake files which get created in the\n\n# binary directory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# file(GLOB_RECURSE foo RELATIVE) is broken so we need this.\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# write to file\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/UseJavaSymlinks.cmake" : {
      "ObjectId" : "c66ee1ea1911cfa7b7483efc3c2400a369c60ff2",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Helper script for UseJava.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libraries/LocalPeer/CMakeLists.txt" : {
      "ObjectId" : "f476da3837d96f970f30381d0c5c1f6d0608ef69",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/classparser/CMakeLists.txt" : {
      "ObjectId" : "3fe7591d7cd78f7ad2f0f58d5dd957f0bb588604",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######## Check endianness ########\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find Qt\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include Qt headers.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Public headers\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Private headers\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libraries/ganalytics/CMakeLists.txt" : {
      "ObjectId" : "cf1cc559860606767d00da27fd59ddec18e93e59",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/hoedown/CMakeLists.txt" : {
      "ObjectId" : "7902e734de8194fa30ea58f9fe3002f8c5d5bc45",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# hoedown 3.0.2 - https://github.com/hoedown/hoedown/archive/3.0.2.tar.gz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include self.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libraries/iconfix/CMakeLists.txt" : {
      "ObjectId" : "ccf0edea9c6407a5a1b4f5ff5c7c3c418b02c721",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install it\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/javacheck/CMakeLists.txt" : {
      "ObjectId" : "dba5a1aeebfcb9db82960dee756a652335302586",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/launcher/CMakeLists.txt" : {
      "ObjectId" : "a64c601da3c4e77b7aa464b01bae748dd84c7cfe",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/pack200/CMakeLists.txt" : {
      "ObjectId" : "31eb0f738c2db19c8e8fa7cafe0a2a892a2aff3e",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find ZLIB for quazip\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install it\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libraries/rainbow/CMakeLists.txt" : {
      "ObjectId" : "ad806faa3825597a2c9d5124f9af6cc0a4e6322e",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install it\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/systeminfo/CMakeLists.txt" : {
      "ObjectId" : "548a589c1656c2761cf95cdcef145ff95fff31ae",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/xz-embedded/CMakeLists.txt" : {
      "ObjectId" : "86ac60c8642ede496e46e2e80628cbfb5f3cc71b",
      "LastModified" : "2018-08-01T23:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See include/xz.h for manual feature configuration\n\n# tweak this list and xz.h to fit your needs\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    src/xz_dec_bcj.c\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 25
  },
  "ElapsedTime" : 2354
}