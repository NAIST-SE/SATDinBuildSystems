{
  "Repository" : "10007717",
  "Revision" : "HEAD",
  "ObjectId" : "9b5ec6af6e43ea5a4ce52a6cb03bc4f61fa38ccc",
  "CommitTime" : "2019-02-08T21:06:19Z",
  "Files" : {
    "CMake/CommonFindMacros.cmake" : {
      "ObjectId" : "656f5ca57d4b163c1d0f0a8ef0689ec2c2d3275e",
      "LastModified" : "2015-03-05T20:55:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup restricted search paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Restore original search paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/FindEigen3.cmake" : {
      "ObjectId" : "1593fb46de05f935c890360cde04719e9bf8e87c",
      "LastModified" : "2017-06-06T17:56:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMake/dashboard-scripts/MAPTK_common.cmake" : {
      "ObjectId" : "140f61e27fc76634c554121343f188c4a82e1c0e",
      "LastModified" : "2015-03-05T21:41:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MAPTK Common Dashboard Script\n\n#\n\n# This script contains basic dashboard driver code common to all clients for\n\n# the MAPTK project.\n\n#\n\n# Put this script in a directory such as \"~/Dashboards/Scripts\" or\n\n# \"C:\\Dashboards\\Scripts\". Create a file next to this script, say\n\n# \"my_dashboard.cmake\", with code of the following form:\n\n#\n\n#   # Client maintainer: me@mydomain.net\n\n#   set(CTEST_SITE \"machine.site\")\n\n#   set(CTEST_BUILD_NAME \"Platform-Compiler\")\n\n#   set(CTEST_CONFIGURATION_TYPE Debug)\n\n#   set(CTEST_CMAKE_GENERATOR \"Unix Makefiles\")\n\n#   include(\"${CTEST_SCRIPT_DIRECTORY}/MAPTK_common.cmake\")\n\n#\n\n# Then run a scheduled task (cron job) with a command line such as:\n\n#\n\n#   ctest -S ~/Dashboards/Scripts/my_dashboard.cmake -V\n\n#\n\n# By default, the source and build trees will be placed in the path\n\n# \"../MyTests/\" relative to your script location.\n\n#\n\n# The following variables may be set before including this script to configure\n\n# it:\n\n#\n\n#   dashboard_model           = Nightly [default] | Experimental | Continuous\n\n#   dashboard_root_name       = Change name of \"MyTests\" directory. This is\n\n#                               ignored if CTEST_DASHBOARD_ROOT is set.\n\n#   dashboard_source_name     = Name of source directory (default: MAPTK)\n\n#   dashboard_binary_name     = Name of binary directory (default: MAPTK-build)\n\n#   dashboard_cache           = Initial CMakeCache.txt file content.\n\n#   dashboard_do_coverage     = True to enable coverage.\n\n#   dashboard_do_memcheck     = True to enable memcheck.\n\n#   dashboard_no_submit       = Skip result submission step.\n\n#   CTEST_CHECKOUT_COMMAND    = Custom source tree checkout comamnd (primarilly\n\n#                               for if the VCS is not git).\n\n#   CTEST_BUILD_FLAGS         = build too arguments (ex: -j2)\n\n#   CTEST_DASHBOARD_ROOT      = Where to put source and build trees\n\n#   CTEST_TEST_CTEST          = Whether to run long CTestTest* tests.\n\n#   CTEST_TEST_TIMEOUT        = Per-test timeout length.\n\n#   CTEST_TEST_ARGS           = ctest_test args (ex: PARALLEL_LEVEL 4)\n\n#   CMAKE_MAKE_PROGRAM        = Path to \"make\" tool to use when using makefile\n\n#                               generator.\n\n#   CTEST_COVERAGE_COMMAND    = Path to the coverage tool to use when testing\n\n#                               coverage (dashboard_do_coverage).\n\n#   CTEST_MEMORYCHECK_COMMAND = Path to the memory check too to use when\n\n#                               testing memory usage (dashboard_do_memcheck).\n\n#\n\n# Options to configure Git:\n\n#   CTEST_GIT_COMMAND         = Path to the git command-line client.\n\n#   dashboard_git_url         = Custom git clone URL (defaults to KWSource).\n\n#   dashboard_git_branch      = Custom remote branch to track (defaults to\n\n#                               master). If this is not a valid for the set\n\n#                               repository, the checkout script will silently\n\n#                               fail, leading to an error in ctest_start when\n\n#                               the source directory doesn't exist.\n\n#   dashboard_git_crlf        = Value of core.autocrlf for repository.\n\n#\n\n# The following macros will be invoked before the corresponding step if they\n\n# are defined:\n\n#\n\n#   dashboard_hook_init     = End of initialization, before loop\n\n#   dashboard_hook_start    = Start of loop body, before ctest_start\n\n#   dashboard_hook_started  = Start of loop body, after ctest_start\n\n#   dashboard_hook_build    = Before ctest_build\n\n#   dashboard_hook_test     = Before ctest_test\n\n#   dashboard_hook_coverage = Before ctest_coverage, if enabled\n\n#   dashboard_hook_memcheck = Before ctest_memcheck, if enabled\n\n#   dashboard_hook_submit   = Before ctest_submit, if enabled\n\n#   dashboard_hook_end      = End of body loop, after ctest_submit.\n\n#\n\n# For Makefile generators the script may be executed from as environment\n\n# already configured to use the desired compilers. Alternatively, the\n\n# environment may be set at the top of the script:\n\n#\n\n#   set(ENV{CC}   /path/to/cc)  # C compiler\n\n#   set(ENV{CXX}  /path/to/cxx) # C++ compiler\n\n#   set(ENV{FC}   /path/to/fc)  # Fortran Compiler (optional)\n\n#   set(ENV{LD_LIBRARY_PATH} /path/to/vendor/lib) # (if necessary)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# CTest properties setup\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Select the top dashboard directory\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Select ctest model (Nightly | Experimental | Continuous)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default to debug build configuration if one not provided\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Choosing CTest reporting mode\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configuring testing\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Selecting Git source to use\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for Git command-line tool if not provided\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Selecting source and binary tree directories\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Delete source tree if not compatible with current VCS\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Support initial checkout if necessary\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# generating initial checkout script\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Setup and run Ctest\n\n#\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Send main script as a note to the submission\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check required variables\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Print summary information\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Avoid non-ascii characters in tool output\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Helper macro to write initial cache\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Start with fresh build tree\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CTest 2.6 crashes with message() after ctest_test\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Start a new submission\n",
        "Line" : 326,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Always build if the tree is fresh\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Look for updates\n",
        "Line" : 343,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# checkout on first iteration only\n",
        "Line" : 345,
        "CharPositionInLine" : 30
      },
      "25" : {
        "Text" : "# Delay until at least 5 minutes past START_TIME\n",
        "Line" : 387,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "CMake/maptk-depends.cmake" : {
      "ObjectId" : "281404fd83ff996b209c5493f79035ac2f5daec2",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# use kwiver/fletch/maptk util methods\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# local utilities\n",
        "Line" : 18,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 2
    },
    "CMake/maptk-external-fletch.cmake" : {
      "ObjectId" : "0b9d7d9e213b62c1a5f098653dea5b2198856770",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fletch External Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#GIT_SHALLOW 1\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/maptk-external-kwiver.cmake" : {
      "ObjectId" : "08fe632f0fcbf933c5d5f6fd15872b256b1f1950",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# kwiver External Project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#GIT_SHALLOW 1\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/maptk-install-qt-utils.cmake" : {
      "ObjectId" : "a4f7f6ad162594cd560bdf116f6e3738e369ba3e",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Useful CMake macros and functions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Install the given plugins to the given destination\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install plugins for specific qt modules at the given destination\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/maptk-install-utils.cmake" : {
      "ObjectId" : "c99e6ffc7d5004bb29e341549b7170b58b357d41",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Installation logic for MAP-Tk CMake utilities\n\n#\n\n# Variables that modify function:\n\n#\n\n#   maptk_cmake_install_dir\n\n#     - Directory to install files to\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/maptk-superbuild.cmake" : {
      "ObjectId" : "830bf4421eebaf188da8f0295526f291019f69e4",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Central location for MAPTK external dependency declaration and resolution\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Option for CUDA\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Dependencies\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n# MAPTK\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMake/maptk-utils.cmake" : {
      "ObjectId" : "5bf01454877c3f7c12abbbdcc6fb42a5f157d427",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# MAPTK CMake utilities entry point\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Pin the current directory as the root directory for MAPTK utility files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/tools/maptk-create-buildinfo.cmake" : {
      "ObjectId" : "fa4aee43175e78add9815b32016f696ef70782cb",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Inputs:\n\n#   GIT_EXECUTABLE    - Path to git executable\n\n#   SOURCE_DIR        - Path to MAP-Tk source directory\n\n#   BINARY_DIR        - Path to MAP-Tk build directory\n\n#   COMPILER_NAME     - Name of the compiler to write to the build info file\n\n#   COMPILER_VERSION  - Version of the compiler to write to the build info file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#BEGIN helper functions\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#END helper functions\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get SHA of current branch\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Get SHA of local modifications\n\n#\n\n# This is expensive, but CMake can't grok NUL-separated strings, so we can't\n\n# reliably compare the list of locally modified files to the last time we\n\n# updated the build information\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Determine if we need to do anything\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Test if branch has changed\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Test if list of local modifications are different\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Check if we have anything to do, also forcing an update if anything in the\n\n# CMake cache has changed (this should catch things like changing the flags,\n\n# using an external library from a different location, etc.)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Write status files for future use\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Get human-readable list of locally modified files\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Generate remaining replacement texts\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generate build information\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "CMake/utils/maptk-utils-buildinfo.cmake" : {
      "ObjectId" : "0f8b01fd6e743d3170b15b6d4d7cc80d76a7cbec",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/utils/maptk-utils-bundle.cmake" : {
      "ObjectId" : "ca74ebefc0be730c1fcf39ccb5018d9f53e86bf3",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# MAPTK Bundle creation support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide an override for gp_item_default_embedded_path function\n\n# in GetPrerequisites.cmake used by fixup_bundle.  This allows\n\n# MAP-Tk to copy libraries into lib instead of MacOS.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide an override for gp_resolved_file_type to correct\n\n# fix-up bundle for Unix.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is an ugly hack.  For some reason fixup_bundle wants\n\n# libraries to be \"local\" (in the same directory as the executable)\n\n# and fails if they are \"embedded\" (same prefix).  This override\n\n# works around the problem by reporting \"embedded\" as \"local\"\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMakeLists.txt" : {
      "ObjectId" : "2f694aa897b9149d35c0419ae3632a42a1b89285",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# CMake policies\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Options and setup\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Add the CMake directory for CMake modules\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n# project specific directories\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# root directories\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Provide both configurations as they are compatible with each other\n",
        "Line" : 53,
        "CharPositionInLine" : 7
      },
      "6" : {
        "Text" : "# Always build shared libraries, required due to plugin infrastructure\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set the name for our package exports\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# this is where the executables source code lives\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# this is where the algorithm default configuration files live\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# this is where the plugins to 3rd party software live\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# this is where configuration for example data sets lives\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###\n\n# GUI\n\n#\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# make sure CMAKE_INSTALL_PREFIX ends in /\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "###\n\n# Environment Scripts\n\n#\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Create vcxproj.user files for every executable with the correct runtime environment\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "###\n\n# Manuals\n\n#\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###\n\n# Testing\n\n#\n\n# The following are required to uses Dart and the Cdash dashboard\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###\n\n# Top level installation\n\n#\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Install rules for CMake utilities\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Prepare space-separated list of library names for config\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Configure build-tree CMake config file and export associated targets file\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Configure install-tree CMake config file and export associated targets file\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###\n\n# CPack Packaging\n\n#\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#TODO: Define package dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NSIS Package options\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "6389b054ce0f1a02b84e29a6a68f0f7a6064d3ae",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/CMakeLists.txt" : {
      "ObjectId" : "3bfa41e9e6bf8c0833230b0e61470746961724e6",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ensure target directory exists\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up meta-target\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add targets to copy config files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add targets to copy model files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install config and model files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "doc/manuals/CMakeLists.txt" : {
      "ObjectId" : "9a2b01fd1334a23695c388ba00d8a0b6effb67fc",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "013ed9b97dae45835de8a9aec1caf48787a5b9e3",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install config files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gui/CMakeLists.txt" : {
      "ObjectId" : "fafdc33865cefbd466342f850afe134c085a1617",
      "LastModified" : "2019-02-08T20:51:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This option should be set if you want to do a bundle fixup for\n\n# packaging.  The fixup is actually applied during install, but due to\n\n# unexpected behaviour, all libraries are installed in the .../bin\n\n# directory. This is okay for Windows and Mac, but unexpected for Linux.\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add DESTDIR switch (Turn it on if not WIN32?)\n\n# do components bit (don't install header files)')\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Do bundle fixup\n\n#    This could be conditional on APPLE || WIN32 also\n\n#\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add expected location of VTK dlls\n",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add expected location of VTK libraries\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# For now, we're assuming we're pulling qtextensions from a build directory\n\n# (not an install).  Also, Mac and/or Linux will need be a bit different,\n\n# but will be handled later (they'd likely use CMAKE_BUILD_TYPE instead\n\n# of CMAKE_CONFIGURATION_TYPES). For Windows really expect the dll will\n\n# be in Release subdirectory, and so look there unless\n\n# CMAKE_CONFIGURATION_TYPES indicates only \"debug\"\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Windows also has libraries (DLLs) in the bin directory\n",
        "Line" : 272,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# this is a hack for now.  Fletch should really export paths like this.\n",
        "Line" : 280,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Location for QT libraries\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# install(DIRECTORY \"${QT_PLUGINS_DIR}/imageformats\" DESTINATION ${plugin_dest_dir}/plugins COMPONENT Runtime)\n",
        "Line" : 339,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# install a qt.conf file\n",
        "Line" : 342,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "maptk/CMakeLists.txt" : {
      "ObjectId" : "4548814b4d3f1e62efa4d523219bb999a8ce8394",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Setting up main library\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configuring/Adding compile definitions to target\n\n# (so we can use generator expressions)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Marking source root for documentation generation\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "bf28632b521f64f17187b4538f538ea28deea300",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install the README\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install blender files\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install the zipped ruby file\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Move files to out of ./sketchup into the binary directory\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Zip kw_maptk and kw_maptk.rb into kw_maptk.rbz\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Enforce: files moved->files zipped\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "c0e643e8df86af283b5f5ce8e2ef3648d6b669c5",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There are currently no tests\n\n# TODO write tests that run the command line tools\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "9307b54ae179e85e9c1d52d6f13b136e22874efc",
      "LastModified" : "2019-01-30T19:11:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tools\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 23
  },
  "ElapsedTime" : 2701
}