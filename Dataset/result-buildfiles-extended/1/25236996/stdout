{
  "Repository" : "25236996",
  "Revision" : "HEAD",
  "ObjectId" : "95f4c6d69b7699c5542afce74e19c944409293a4",
  "CommitTime" : "2019-04-07T02:42:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f619f1b91765448ef79acf3fee7efd675b094f22",
      "LastModified" : "2018-01-09T23:38:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Expose some build options\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################\n\n# Include the Utilities in the root make\n\n###################################################################################\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set our include paths:\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Stores list of libs to link with. Initialized throughout.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---\n\n# Find required and optional packages and add their include paths and libraries:\n\n#---\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# GEOS - Required:\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# GEOFIFF - Required:\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# GEOTRANS - Required: (GeoTrans 3.4.x port future...)\n\n# find_package( Geotrans )\n\n# if( GEOTRANS_FOUND )\n\n#   include_directories( ${GEOTRANS_INCLUDE_DIR} )\n\n#   set( ossimDependentLibs ${ossimDependentLibs} ${GEOTRANS_LIBRARY} )\n\n# else( GEOTRANS_FOUND )\n\n#   message( FATAL_ERROR \"Could not find required geotrans package!\" )\n\n# endif( GEOTRANS_FOUND )\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# JPEG - Required package:\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TIFF - Required:\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# JSONCPP - Required:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This caused a core dump on ossim executables running in jenins pipeline (ossim-test-dev)\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TODO:  Is this required on unix?  If so move to the required section.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# if (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#if( UNIX )\n\n#   find_library( DL_LIBRARY dl )\n\n#  if ( DL_LIBRARY )\n\n#      set( ossimDependentLibs ${ossimDependentLibs} ${DL_LIBRARY} )\n\n#   else( DL_LIBRARY )\n\n#      # TODO:  Is this required on unix?  If so move to the required section.\n\n#      message( FATAL_ERROR \"Could not find dl library!\" )\n\n#   endif( DL_LIBRARY )\n\n#endif( UNIX )\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# JSONCPP - Optional:\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# FREETYPE - Optional:\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# MPI - Optional:\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ZLIB - Optional:\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# HDF5 - Optional:\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---\n\n# Call the OSSIM macros in OssimUtilities.cmake\n\n#---\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#####################################################################################\n\n# Call the configure files for ossimConfig and ossimVersion setup\n\n#####################################################################################\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Setting of OSSIM_ID to variable expanded $Id$ results.  Embedded troughout code.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##################################################################################################\n\n# Point to the CMakeLists.txt in the src dir. OLK: Removed unnecessary src/ossim structure and\n\n# replaced with simply src.\n\n##################################################################################################\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##################################################################################################\n\n#\n\n# Setup install destinations for the shared files:\n\n# 1) Projection CSV files:\n\n#\n\n##################################################################################################\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# 2) Utility API JSON files\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# 3) Fonts\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "###################### OUTPUT GENERAL VARIABLE SETTINGS #######################\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# uninstall target\n\n#-----------------------------------------------------------------------------\n\n#OSSIM_ADD_COMMON_MAKE_UNINSTALL()\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---\n\n# Building curl dependant apps optional. default=OFF\n\n#---\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "a068560e45290564e8be91c67695e87fc80e5338",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE(ossim)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if( OSSIM_FOUND )\n\n#    include_directories( ${OSSIM_INCLUDE_DIR} )\n\n# else( OSSIM_FOUND )\n\n#    message( FATAL_ERROR \"Could not find required OSSIM package!\" )\n\n# endif( OSSIM_FOUND )\n\n# set(TARGET_COMMON_LIBRARIES ${OSSIM_LIBRARY} ${OPENTHREADS_LIBRARY})\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/curl_apps/CMakeLists.txt" : {
      "ObjectId" : "a434bac5ba694a12c5b6935a72e96b4bf8c20f41",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get the library suffix for lib or lib64.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Requires ossim:\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add our include...\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---\n\n# omar-data-mgr app:\n\n# ---\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the executable:\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the output dir:\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# omar-data-mgr application links with required libs.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install app:\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "apps/ossim-adrg-dump/CMakeLists.txt" : {
      "ObjectId" : "8c1c1db5d811e909656ef6a453868444bdca69bb",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-applanix2ogeom/CMakeLists.txt" : {
      "ObjectId" : "173a3efbe1cdcbc2b552c21efb6a5308fdc349bc",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-autreg/CMakeLists.txt" : {
      "ObjectId" : "baecb3fe55fd881e1c2431ee0ba82e92d44e4692",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-band-merge/CMakeLists.txt" : {
      "ObjectId" : "9600e8e997355427b83195879c2ce30b4c18a609",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-btoa/CMakeLists.txt" : {
      "ObjectId" : "dff6905ba8b59e767887d2b93df55576acaf9c01",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-chgkwval/CMakeLists.txt" : {
      "ObjectId" : "2f4f16a330d938b4aa0f252f4fe6eeba4fed096b",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-chipper/CMakeLists.txt" : {
      "ObjectId" : "a0fde63ce9897a26a4697f1aeaa02bcc0f8c28d4",
      "LastModified" : "2015-09-03T15:58:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-cli/CMakeLists.txt" : {
      "ObjectId" : "9380b064a662fc54328f8386a18ddd3fe9037467",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-cmm/CMakeLists.txt" : {
      "ObjectId" : "663860791f86722f19efaecfebb70aeb31feaf75",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-computeSrtmStats/CMakeLists.txt" : {
      "ObjectId" : "29a6ef3acbf49cffc478392771beee629a9e9b5b",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-correl/CMakeLists.txt" : {
      "ObjectId" : "7ea572337e96456ba5477467e3d2fdcd027dde8d",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-create-bitmask/CMakeLists.txt" : {
      "ObjectId" : "7839187e3bf85ff4516a3d5ef075dd92f1aa413d",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-create-cg/CMakeLists.txt" : {
      "ObjectId" : "aa6eb7ea6ab3f306d36254678f2e443fe05070f5",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-create-histo/CMakeLists.txt" : {
      "ObjectId" : "476927964c1d6601baf6d5b062e25f964b284d23",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-deg2dms/CMakeLists.txt" : {
      "ObjectId" : "ce614a39479077bf0947763eb873f235903468db",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-dms2deg/CMakeLists.txt" : {
      "ObjectId" : "c3fcc67e50f348f7141629fa657934a99351912b",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-dump-ocg/CMakeLists.txt" : {
      "ObjectId" : "a00411ae8a68491f199b36114a034b8b01e9b6b8",
      "LastModified" : "2017-10-04T15:31:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-envi-cg/CMakeLists.txt" : {
      "ObjectId" : "4f40b8ec6c46681e4f7e113f72f215ea5f079fe5",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-equation/CMakeLists.txt" : {
      "ObjectId" : "9d4b06f946a2145f09d380816908c1d56bba5504",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-extract-vertices/CMakeLists.txt" : {
      "ObjectId" : "ef00b9dc414c12ff1d5f11f2b5e04525015875f7",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-header-crawl/CMakeLists.txt" : {
      "ObjectId" : "be1e02d5ddd8b38facce9c7fc435377996e14a76",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-icp/CMakeLists.txt" : {
      "ObjectId" : "094a9404a5bd627fd62e0c73f20ace6cacd991cc",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-igen/CMakeLists.txt" : {
      "ObjectId" : "06b3697d9e45b9787b4f3a01161a067e622e0050",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-image-compare/CMakeLists.txt" : {
      "ObjectId" : "f982adf13b3ee5fac6b356b22d2d3a6c5075ff16",
      "LastModified" : "2018-09-21T15:05:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILE(GLOB SOURCE_FILES RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.cpp\")\n\n#OSSIM_SETUP_APPLICATION(ossim-image-compare INSTALL COMMAND_LINE COMPONENT_NAME ossim SOURCE_FILES ${SOURCE_FILES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/ossim-image-synth/CMakeLists.txt" : {
      "ObjectId" : "99a87d1b12084d881157872f0691aff2762f74cb",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-img2md/CMakeLists.txt" : {
      "ObjectId" : "d6cacabb55835640be25c2caff0eacb9d9fb5036",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-img2rr/CMakeLists.txt" : {
      "ObjectId" : "1a33d4cb0b615bea0c51ad875a3c96a226808645",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-info/CMakeLists.txt" : {
      "ObjectId" : "eb93513a5f8884b87811b34eabb8562fce9f76a2",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-modopt/CMakeLists.txt" : {
      "ObjectId" : "7250ceeff9f24c0f585be049f25e82c5c51573a0",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-mosaic/CMakeLists.txt" : {
      "ObjectId" : "21e9b0a9828f32ee8ddd0b357979cc2820a0621d",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-ogeom2ogeom/CMakeLists.txt" : {
      "ObjectId" : "89a477b0d98d2b4fe1ec14eca152db6f16f55614",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-orthoigen/CMakeLists.txt" : {
      "ObjectId" : "51a2737cf4e1b146be4b65e49e9cf18f6a360a25",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-pc2dem/CMakeLists.txt" : {
      "ObjectId" : "c87d7189ab5fd2210ce9d3da729bd2896905a689",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-pixelflip/CMakeLists.txt" : {
      "ObjectId" : "d019589340e150dc296204059e1e204128f071d7",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-plot-histo/CMakeLists.txt" : {
      "ObjectId" : "516822696f8c8f587e2ae7ee90f115a9f2208406",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-preproc/CMakeLists.txt" : {
      "ObjectId" : "4c2a6d8c680af29d4e9597a263e2f237c0d2f773",
      "LastModified" : "2018-06-13T20:55:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-project-point/CMakeLists.txt" : {
      "ObjectId" : "3f340283f17f09815ddd1d4c82a3200049992d28",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-prune/CMakeLists.txt" : {
      "ObjectId" : "aad08e93a638f47dd48638db5165d478c0ad1c8b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-rejout/CMakeLists.txt" : {
      "ObjectId" : "b65aed03674c3b226157970cca963c902dd58eb9",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-rpcgen/CMakeLists.txt" : {
      "ObjectId" : "b452dcf385f0331740e8c5251e3f597a74135726",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-rpf/CMakeLists.txt" : {
      "ObjectId" : "25cf3d2b16bdd516cfe7807dadb91a61e311456e",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-senint/CMakeLists.txt" : {
      "ObjectId" : "00ff4865c7937ea6e85a22262a6a917583f6e1a3",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-space-imaging/CMakeLists.txt" : {
      "ObjectId" : "2363d0c4a40ae8133fa50a2faaf4435dccaab346",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-src2src/CMakeLists.txt" : {
      "ObjectId" : "1b16ef9a12b82202ab65b4ecf676aab033483ccf",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-swapbytes/CMakeLists.txt" : {
      "ObjectId" : "b20703b27ddad34b0158f4f9af362f7e353625bd",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-tfw2ogeom/CMakeLists.txt" : {
      "ObjectId" : "d476829d12c9e2d49942e2ef8310a9e126ee714e",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-tool-client/CMakeLists.txt" : {
      "ObjectId" : "93966b4406cd50cce73f9ad861872983b68baca7",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-tool-server/CMakeLists.txt" : {
      "ObjectId" : "5bcd0f274985e5b4db71d022bfe4262b034a1fcd",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-viirs-proc/CMakeLists.txt" : {
      "ObjectId" : "1508fc7dcc9cba25fce08effe3d864d1c0192c7b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/ossim-ws-cmp/CMakeLists.txt" : {
      "ObjectId" : "25ff15a7c00c36b251b553a56eb08650087dff87",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "9589d6520f28aefcceb51743c6431a6ae8b0cdc9",
      "LastModified" : "2019-02-14T06:13:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allows developer to customize compiler with their own flags (e.g., \"-std=c++11\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################################################\n\n#  Initialize the libraries to be the cmake targets and initialize the includes to the proper dev paths\n\n#######################################################################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#IF(NOT OSSIMPLANETQT_LIBRARY)\n\n#   SET(OSSIMPLANETQT_LIBRARY \"ossimPlanetQt\" CACHE STRING \"Caching\" FORCE)\n\n#ENDIF(NOT OSSIMPLANETQT_LIBRARY)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#IF(NOT OSSIMPLANETQT_INCLUDE_DIR)\n\n#   SET(OSSIMPLANETQT_INCLUDE_DIR \"${OSSIM_DEV_HOME}/ossimPlanetQt/include\" CACHE STRING \"Caching\" FORCE)\n\n#ENDIF(NOT OSSIMPLANETQT_INCLUDE_DIR)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#IF(NOT OSSIMQT_LIBRARY)\n\n#   SET(OSSIMQT_LIBRARY \"ossimQt\" CACHE STRING \"Caching\" FORCE)\n\n#ENDIF(NOT OSSIMQT_LIBRARY)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############################### Add subdirectories to build based on BUILD variables and presence of repo ###########################\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "############################## Doxygen installation for current ossim core module ###########################################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############################## Setup shared file installation ##############################\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Fonts removed for rpms\n\n# INSTALL(FILES ${OSSIM_DEV_HOME}/ossim_package_support/fonts/arial.ttf DESTINATION \"share/ossim/fonts\" COMPONENT ossim)\n\n# INSTALL(FILES ${OSSIM_DEV_HOME}/ossim_package_support/fonts/times.ttf DESTINATION \"share/ossim/fonts\" COMPONENT ossim)\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "############################## Setup the packages ##############################\n\n# present the packaging option only if we have the cpack command defined (effectively >= 2.6.0)\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#####################################################################################################\n\n# We may want to add this as a build step instead so it can capture different output directories\n\n# Will comment out for now until I figure this out.  This is used to symlink the pre built frameworks to the build\n\n# dir so you can run things within Xcode\n\n#\n\n#####################################################################################################\n\n#IF(APPLE)\n\n#    IF(MAKE_APPENDS_BUILD_TYPE)\n\n#        IF(OSSIM_DEPENDENCIES)\n\n#             IF(NOT EXISTS ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/OpenThreads.framework AND EXISTS ${OSSIM_DEPENDENCIES}/Frameworks)\n\n#                  FILE(GLOB framework_files \"${OSSIM_DEPENDENCIES}/Frameworks/*.framework\")\n\n#                  foreach(x ${framework_files})\n\n#                     execute_process(COMMAND ln -s  ${x} .\n\n#                                     WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/)\n\n#                  endforeach(x)\n\n#             ENDIF()\n\n#        ENDIF()\n\n#    ENDIF()\n\n#ENDIF()\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "############################ setup common INSTALL support files #############################################\n\n# SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS \"YES\")\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################### SETUP Uninstall TARGETS ####################################################\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/CMakeModules/CMakeParseArguments.cmake" : {
      "ObjectId" : "8553f38f5f090a2305c095ba5a8ef34427c19ed5",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n\n#                            \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 125,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/CMakeModules/FindAWS.cmake" : {
      "ObjectId" : "b998724726e761407a97d9d014dbba7872119485",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindAWS.cmake\n\n#\n\n# Find the native AWS(Amazon Web Services) cpp sdk includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# AWS_INCLUDE_DIR, where to find Aws.h and S3Client.h.\n\n# AWS_LIBRARIES, libraries to link against to use AWS.  Currently there are\n\n# two looked for, aws-cpp-sdk-core and aws-cpp-sdk-s3 libraries.\n\n# AWS_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# For ossim, typically geos will be system installed which should be found; \n\n# or found in the ossim 3rd party dependencies directory from a geos build \n\n# and install.  If the latter it will rely on CMAKE_INCLUDE_PATH and \n\n# CMAKE_LIBRARY_PATH having the path to the party dependencies directory.\n\n# \n\n# NOTE: \n\n# This script is specialized for ossim.\n\n#\n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# Find include path:\n\n#---\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need this so check for it:\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the AWS_INCLUDE_DIR:\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find AWS CPP SDK CORE library:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find AWS CPP SDK S3 library:\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the AWS_LIBRARY:\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---\n\n# This function sets AWS_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/CMakeModules/FindCPPUNIT.cmake" : {
      "ObjectId" : "e536d4e8d56b025395597161de42e5b05b68081d",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find CPPUNIT\n\n# Find the native CPPUNIT includes and library\n\n# This module defines\n\n#  CPPUNIT_INCLUDE_DIR, where to find jpeglib.h, etc.\n\n#  CPPUNIT_LIBRARIES, the libraries needed to use CPPUNIT.\n\n#  CPPUNIT_FOUND, If false, do not try to use CPPUNIT.\n\n# also defined, but not for general use are\n\n#  CPPUNIT_LIBRARY, where to find the CPPUNIT library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CPPUNIT_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Deprecated declarations.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CMakeModules/FindCsmApi.cmake" : {
      "ObjectId" : "d975699aa7e7bd929f99893359f1e9d798a3dc63",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find csmApi library\n\n# Find the native csmApi includes and library\n\n# This module defines\n\n#  CSMAPI_INCLUDE_DIR, where to find cam api headers, etc.\n\n#  CSMAPI_LIBRARY, where to find the CSMAPI library.\n\n#  CSMAPI_FOUND, If false, do not try to use csmApi.\n\n# also defined, but not for general use are\n\n#\n\n# NOTE: If MSP Distro is available, CSM can be found there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# This function sets CSMAPI_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindFFTW3.cmake" : {
      "ObjectId" : "63f85fddb12d80ebbb7f7d93134984c031c826e2",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find fftw3 library\n\n# Find the native fftw3 includes and library\n\n# This module defines\n\n#  FFTW3_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  FFTW3_LIBRARIES, libraries to link against to use FFTW3.\n\n#  FFTW3_FOUND, If false, do not try to use FFTW3.\n\n# also defined, but not for general use are\n\n#  FFTW3_LIBRARY, where to find the FFTW3 library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FFTW3_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindFFmpeg.cmake" : {
      "ObjectId" : "9ce2fde672b3efde19627d4aad037966b032a9de",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate ffmpeg\n\n# This module defines\n\n# FFMPEG_LIBRARIES\n\n# FFMPEG_FOUND, if false, do not try to link to ffmpeg\n\n# FFMPEG_INCLUDE_DIR, where to find the headers\n\n#\n\n# $FFMPEG_DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$FFMPEG_DIR\n\n#\n\n# Created by Robert Osfield.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#In ffmpeg code, old version use \"#include <header.h>\" and newer use \"#include <libname/header.h>\"\n\n#In OSG ffmpeg plugin, we use \"#include <header.h>\" for compatibility with old version of ffmpeg\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#We have to search the path which contain the header.h (usefull for old version)\n\n#and search the path which contain the libname/header.h (usefull for new version)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Then we need to include ${FFMPEG_libname_INCLUDE_DIRS} (in old version case, use by ffmpeg header and osg plugin code)\n\n#                                                       (in new version case, use by ffmpeg header) \n\n#and ${FFMPEG_libname_INCLUDE_DIRS/libname}             (in new version case, use by osg plugin code)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Macro to find header and lib directories\n\n# example: FFMPEG_FIND(AVFORMAT avformat avformat.h)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# old version of ffmpeg put header in $prefix/include/[ffmpeg]\n\n# so try to find header in include directory\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fink\n",
        "Line" : 36,
        "CharPositionInLine" : 23
      },
      "7" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 37,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Blastwave\n",
        "Line" : 38,
        "CharPositionInLine" : 28
      },
      "9" : {
        "Text" : "# Fink\n",
        "Line" : 52,
        "CharPositionInLine" : 25
      },
      "10" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 53,
        "CharPositionInLine" : 32
      },
      "11" : {
        "Text" : "# Blastwave\n",
        "Line" : 54,
        "CharPositionInLine" : 30
      },
      "12" : {
        "Text" : "# find stdint.h\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Fink\n",
        "Line" : 93,
        "CharPositionInLine" : 20
      },
      "14" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 94,
        "CharPositionInLine" : 27
      },
      "15" : {
        "Text" : "# Blastwave\n",
        "Line" : 95,
        "CharPositionInLine" : 25
      },
      "16" : {
        "Text" : "# FFMPEG_FIND(LIBAVCORE   avcore   avcore.h)\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Note we don't check FFMPEG_LIBSWSCALE_FOUND here, it's optional.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Note we don't add FFMPEG_LIBSWSCALE_LIBRARIES here, it will be added if found later.\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#---\n\n# This function sets FFMPEG_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#  use aPPEND instead of set.  Seems to work better\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/CMakeModules/FindFreetype.cmake" : {
      "ObjectId" : "8e5711286813e01b7006bd84187622ceba0cdd27",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindFreetype\n\n# ------------\n\n#\n\n# Locate FreeType library\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   FREETYPE_LIBRARIES, the library to link against\n\n#   FREETYPE_FOUND, if false, do not try to link to FREETYPE\n\n#   FREETYPE_INCLUDE_DIRS, where to find headers.\n\n#   FREETYPE_VERSION_STRING, the version of freetype found (since CMake 2.8.8)\n\n#   This is the concatenation of the paths:\n\n#   FREETYPE_INCLUDE_DIR_ft2build\n\n#   FREETYPE_INCLUDE_DIR_freetype2\n\n#\n\n#\n\n#\n\n# $FREETYPE_DIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$FREETYPE_DIR used in building FREETYPE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by Eric Wing.\n\n# Modifications by Alexander Neundorf.\n\n# This file has been renamed to \"FindFreetype.cmake\" instead of the correct\n\n# \"FindFreeType.cmake\" in order to be compatible with the one from KDE4, Alex.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugh, FreeType seems to use some #include trickery which\n\n# makes this harder than it should be. It looks like they\n\n# put ft2build.h in a common/easier-to-find location which\n\n# then contains a #include to a more specific header in a\n\n# more specific location (#include <freetype/config/ftheader.h>).\n\n# Then from there, they need to set a bunch of #define's\n\n# so you can do something like:\n\n# #include FT_FREETYPE_H\n\n# Unfortunately, using CMake's mechanisms like include_directories()\n\n# wants explicit full paths and this trickery doesn't work too well.\n\n# I'm going to attempt to cut out the middleman and hope\n\n# everything still works.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the user variables\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FREETYPE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/FindGEOS.cmake" : {
      "ObjectId" : "461d46df27b7bb183641cbcdba510d96bcaa168b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindGEOS.cmake\n\n#\n\n# Find the native GEOS(Geometry Engine - Open Source) includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# GEOS_INCLUDE_DIR, where to find geos.h, etc.\n\n# GEOS_LIBRARY, libraries to link against to use GEOS.  Currently there are\n\n# two looked for, geos and geos_c libraries.\n\n# GEOS_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# For ossim, typically geos will be system installed which should be found; \n\n# or found in the ossim 3rd party dependencies directory from a geos build \n\n# and install.  If the latter it will rely on CMAKE_INCLUDE_PATH and \n\n# CMAKE_LIBRARY_PATH having the path to the party dependencies directory.\n\n# \n\n# NOTE: \n\n# This script is specialized for ossim, e.g. looking in /usr/local/ossim.\n\n#\n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# Find include path:\n\n# Note: Ubuntu 14.04+ did not have geos.h (not included in any ossim src). \n\n# Instead looking for Geometry.h\n\n#---\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find GEOS library:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find GEOS C library:\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the GEOS_LIBRARY:\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---\n\n# This function sets GEOS_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/FindGEOTIFF.cmake" : {
      "ObjectId" : "c84639edfc011d63ed2afa31e8bc67f490af405e",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find geotiff library\n\n# Find the native geotiff includes and library\n\n# This module defines\n\n#  GEOTIFF_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  GEOTIFF_LIBRARIES, libraries to link against to use GEOTIFF.\n\n#  GEOTIFF_FOUND, If false, do not try to use GEOTIFF.\n\n# also defined, but not for general use are\n\n#  GEOTIFF_LIBRARY, where to find the GEOTIFF library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GEOTIFF_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindGPSTK.cmake" : {
      "ObjectId" : "3f4eadb21bdf75cd036dfbe3139a9b5fcf431155",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find gpstk library\n\n# Find the native gpstk includes and library\n\n# This module defines\n\n#  GPSTK_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  GPSTK_LIBRARIES, libraries to link against to use GPSTK.\n\n#  GPSTK_FOUND, If false, do not try to use GPSTK.\n\n# also defined, but not for general use are\n\n#  GPSTK_LIBRARY, where to find the GPSTK library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GPSTK_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindGeotrans.cmake" : {
      "ObjectId" : "19fd55e9b09e1acb0992f6c668d74c1370251590",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindGeotrans.cmake\n\n#\n\n# Find the native GeoTrans includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# GEOTRANS_INCLUDE_DIR, where to find geotrans_config.h, etc.\n\n# GEOTRANS_LIBRARY, libraries to link against to use Geotrans.\n\n# GEOTRANS_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# For ossim, typically geos will be system installed which should be found; \n\n# or found in the ossim 3rd party dependencies directory from a geos build \n\n# and install.  If the latter it will rely on CMAKE_INCLUDE_PATH and \n\n# CMAKE_LIBRARY_PATH having the path to the party dependencies directory.\n\n# \n\n# NOTE:\n\n# \n\n# This script is specialized for ossim, e.g. looking in /usr/local/ossim.\n\n#\n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# Find include path:\n\n# Note: Version < 3.3.0 do not have geos.h in the geos sub directory; hence,\n\n# the check for both \"geos/geos.h\" and \"geos.h\".\n\n#---\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find Geotrans library:\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the Geotrans_LIBRARY:\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---\n\n# This function sets Geotrans_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/CMakeModules/FindGit.cmake" : {
      "ObjectId" : "e9c7676eb5ed94cb87a43c307727df03b327e119",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Extract information from a GIT working copy\n\n# The module defines the following variables:\n\n#    GIT_EXECUTABLE - path to git command line client\n\n#    GIT_FOUND - true if the command line client was found\n\n#    GIT_VERSION_STRING - the version of git found (since CMake 2.8.8)\n\n#\n\n# The minimum required version of Git can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Git 1.4)\n\n#\n\n# If the command line client executable is found two macros are defined:\n\n#  GIT_WC_INFO(<dir> <var-prefix>)\n\n#  GIT_WC_LOG(<dir> <var-prefix>)\n\n# GIT_WC_INFO extracts information of a GIT working copy at\n\n# a given location. This macro defines the following variables:\n\n#  <var-prefix>_WC_URL - url of the repository (at <dir>)\n\n#  <var-prefix>_WC_ROOT - root url of the repository\n\n#  <var-prefix>_WC_REVISION - current revision\n\n#  <var-prefix>_WC_LAST_CHANGED_AUTHOR - author of last commit\n\n#  <var-prefix>_WC_LAST_CHANGED_DATE - date of last commit\n\n#  <var-prefix>_WC_LAST_CHANGED_REV - revision of last commit\n\n#  <var-prefix>_WC_INFO - output of command `git rev-list HEAD --max-count 1'\n\n# GIT_WC_LOG retrieves the log message of the base revision of a\n\n# GIT working copy at a given location. This macro defines the\n\n# variable:\n\n#  <var-prefix>_LAST_CHANGED_LOG - last log of base revision\n\n# Example usage:\n\n#  FIND_PACKAGE(GIT)\n\n#  IF(GIT_FOUND)\n\n#    GIT_WC_INFO(${PROJECT_SOURCE_DIR} Project)\n\n#    MESSAGE(\"Current revision is ${Project_WC_REVISION}\")\n\n#    GIT_WC_LOG(${PROJECT_SOURCE_DIR} Project)\n\n#    MESSAGE(\"Last changed log is ${Project_LAST_CHANGED_LOG}\")\n\n#  ENDIF(GIT_FOUND)\n\n#\n\n#=============================================================================\n\n# Copyright 2010 Kitware, Inc.\n\n# Copyright 2012 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for 'git' or 'eg' (easy git)\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Prefer .cmd variants on Windows unless running in a Makefile\n\n# in the MSYS shell.\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GitHub search path for Windows\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# the GIT commands should be executed with the C locale, otherwise\n\n# the message (which are parsed) may be translated, Alex\n\n# SET(GIT_SAVED_LC_ALL \"$ENV{LC_ALL}\")\n\n# SET(ENV{LC_ALL} C)\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# restore the previous LC_ALL\n\n# SET(ENV{LC_ALL} ${GIT_SAVED_LC_ALL})\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set GIT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/CMakeModules/FindHDF5.cmake" : {
      "ObjectId" : "a18df139f74d79b66b0cd5e290c9448e14f4cccc",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindHDF5.cmake\n\n#\n\n# Find the native HDF5 includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# HDF5_INCLUDE_DIR, where to find geos.h, etc.\n\n# HDF5_LIBRARIES, libraries to link against to use HDF5.\n\n# HDF5_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# NOTE: \n\n#\n\n# This script is specialized for ossim. HDF5 rpm created to fix conflict with\n\n# system installed hdf5 packages that do NOT have compression(szip) support.\n\n#\n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include path:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find HDF5 library:\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find HDF5 CPP library:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the HDF5_LIBRARIES:\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---\n\n# This function sets HDF5_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/FindHDF5A.cmake" : {
      "ObjectId" : "e92a2579b95de9a42a0ba61e0368e465cecce29e",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindHDF5A.cmake\n\n#\n\n# Find the native HDF5A includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# HDF5A_INCLUDE_DIR, where to find geos.h, etc.\n\n# HDF5A_LIBRARIES, libraries to link against to use HDF5A.\n\n# HDF5A_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# NOTE: \n\n#\n\n# This script is specialized for ossim. HDF5A rpm created to fix conflict with\n\n# system installed hdf5 packages that do NOT have compression(szip) support.\n\n#\n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include path:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find HDF5A library:\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find HDF5A CPP library:\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the HDF5A_LIBRARIES:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---\n\n# This function sets HDF5A_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/FindJPEG.cmake" : {
      "ObjectId" : "bda6081b2cde4322438461576a4210e6d2e6affb",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find JPEG\n\n# Find the native JPEG includes and library\n\n# This module defines\n\n#  JPEG_INCLUDE_DIR, where to find jpeglib.h, etc.\n\n#  JPEG_LIBRARIES, the libraries needed to use JPEG.\n\n#  JPEG_FOUND, If false, do not try to use JPEG.\n\n# also defined, but not for general use are\n\n#  JPEG_LIBRARY, where to find the JPEG library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Added x86_64-linux-gnu path for Ubuntu install\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JPEG_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Deprecated declarations.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/CMakeModules/FindJPEG12.cmake" : {
      "ObjectId" : "43fd3bd2f12bb82b66cc11df4e01c2277af291b1",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find JPEG12\n\n#\n\n# ---\n\n# This is a specialized find for custom built jpeg library with 12 samples\n\n# enabled.\n\n# Specifically looks for library: /usr/lib64/libjpeg12.so\n\n# and header file:  /usr/include/jpeg12/jpeglib.h\n\n# ---\n\n#\n\n#\n\n# Find the native JPEG includes and library\n\n# This module defines\n\n#  JPEG12_INCLUDE_DIR, where to find jpeglib.h, etc.\n\n#  JPEG12_LIBRARIES, the libraries needed to use JPEG.\n\n#  JPEG12_FOUND, If false, do not try to use JPEG.\n\n# also defined, but not for general use are\n\n#  JPEG12_LIBRARY, where to find the JPEG library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---\n\n# This function sets JPEG12_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeModules/FindJsonCpp.cmake" : {
      "ObjectId" : "dbdb31af83832ee8bc2d7938e12898635a9ab8ed",
      "LastModified" : "2019-03-25T12:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n#\n\n# Find the JSON CPP include and library.\n\n#\n\n# This module defines:\n\n#\n\n# JSONCPP_INCLUDE_DIR, where to find json.h, etc.\n\n# JSONCPP_LIBRARY, library to link against to use jsoncpp.\n\n# JSONCPP_FOUND, True if found, false if one of the above are not found.\n\n# USE_OSSIM_JSONCPP, Set to \"YES\" if no external package detected.\n\n#    Directs cmake to include the jsoncpp subirectories in ossim build.\n\n#\n\n########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CMakeModules/FindLASzip.cmake" : {
      "ObjectId" : "1b758beea2fce00420325dddf0533227489a5bea",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n#\n\n# CMake module to search for LASzip library\n\n#\n\n# On success, the macro sets the following variables:\n\n# LASZIP_FOUND       = if the library found\n\n# LASZIP_INCLUDE_DIR = where to find the library headers also defined,\n\n#                       but not for general use are\n\n# LASZIP_LIBRARY     = where to find the laszip library.\n\n# LASZIP_VERSION     = version of library which was found, e.g. \"1.2.5\"\n\n#\n\n# Copyright (c) 2009 Mateusz Loskot <mateusz@loskot.net>\n\n#\n\n# Module source: http://github.com/mloskot/workshop/tree/master/cmake/\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#MESSAGE(STATUS \" FindLASzip: trying OSGeo4W using environment variable OSGEO4W_ROOT=$ENV{OSGEO4W_ROOT}\")\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#MESSAGE(STATUS \" FindLASzip: trying OSGeo4W using default location OSGEO4W_ROOT=${OSGEO4W_ROOT_DIR}\")\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#---\n\n# This function sets LASZIP_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---\n\n# Show the caller what was found regardless of LASZIP_FOUND variable:\n\n#---\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/FindLIBLAS.cmake" : {
      "ObjectId" : "c691e09e599bc204bec669bb83c1ec02b9fb51ec",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindLIBLAS.cmake\n\n#\n\n# Find the native LIBLAS includes and library\n\n#\n\n#  LIBLAS_INCLUDE_DIRS - where to find liblas's includes.\n\n#  LIBLAS_LIBRARIES    - List of libraries when using liblas.\n\n#  LIBLAS_FOUND        - True if liblas found.\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the include dir:\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macro for setting libraries:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeModules/FindMSP.cmake" : {
      "ObjectId" : "7ff2590ec5d3ead1179b81788ba264340821bb17",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# This module sets MSP_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are optional. Include only if present:\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CMakeModules/FindMiniZip.cmake" : {
      "ObjectId" : "441c0ebd51127f78d17fe86186b6536ebc9cc2e5",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find minizip\n\n# Find the native MINIZIP includes and library\n\n#\n\n#  MINIZIP_INCLUDE_DIRS - where to find minizip's zip.h, etc.\n\n#  MINIZIP_LIBRARIES    - List of libraries when using minizip.\n\n#  MINIZIP_FOUND        - True if minizip found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Per-recommendation\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MINIZIP_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CMakeModules/FindMrSid.cmake" : {
      "ObjectId" : "c89b2bbc0753400a8f85f03cb48a46252a0a1af0",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MrSid\n\n# Find the native MrSid includes and library\n\n# This module defines\n\n#  MRSID_INCLUDE_DIR, where to header files.\n\n#  MRSID_LIBRARIES, the libraries needed to use mrsid.\n\n#  MRSID_FOUND, If false, do not try to use mrsid.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---\n\n# Find the include dirs:\n\n#---\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---\n\n# Find the Geo_DSDK (decode) library.\n\n#----\n\n# SET(MRSID_RASTER_DSDK_C_NAMES lti_dsdk_cdll ltidsdk_c libltidsdkc)\n\n# FIND_LIBRARY( MRSID_RASTER_DSDK_C_LIBRARY \n\n#\t      NAMES ${MRSID_RASTER_DSDK_C_NAMES} \n\n#              PATHS\n\n#              ${MRSID_DIR}/Raster_DSDK/lib )\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MRSID_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(MRSID DEFAULT_MSG MRSID_RASTER_INCLUDE_DIR MRSID_LIDAR_INCLUDE_DIR MRSID_RASTER_DSDK_LIBRARY MRSID_RASTER_DSDK_C_LIBRARY MRSID_LIDAR_DSDK_LIBRARY)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Combine the includes into MRSID_INCLUDE_DIR variable:\n",
        "Line" : 61,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Combine the libraries into MRSID_LIBRARY variable:\n",
        "Line" : 64,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# set(MRSID_LIBRARY ${MRSID_RASTER_DSDK_C_LIBRARY} ${MRSID_RASTER_DSDK_LIBRARY} ${MRSID_LIDAR_DSDK_LIBRARY})\n",
        "Line" : 67,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#---\n\n# Find the Geo_ESDK (encode) library.\n\n#----\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#---\n\n# Find the two includes need for the writer.\n\n#---\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cmake/CMakeModules/FindOMS.cmake" : {
      "ObjectId" : "b071cef5bff9bc3d0c1d9559d49adc6875e639d7",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ossim library\n\n# Find the native ossim includes and library\n\n# This module defines\n\n#  OMS_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  OMS_LIBRARIES, libraries to link against to use OSSIM.\n\n#  OMS_FOUND, If false, do not try to use OSSIM.\n\n# also defined, but not for general use are\n\n#  OMS_LIBRARY, where to find the OSSIM library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OSSIM_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindOSG.cmake" : {
      "ObjectId" : "78bd8fe2fdceebd0e0e334d6c34b794347fb638b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate gdal\n\n# This module defines\n\n# OSG_LIBRARY\n\n# OSG_FOUND, if false, do not try to link to gdal \n\n# OSG_INCLUDE_DIR, where to find the headers\n\n#\n\n# $OSG_DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$OSG_DIR\n\n#\n\n# Created by Robert Osfield. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CMakeModules/FindOpenCV.cmake" : {
      "ObjectId" : "94ffb0403fa375d45f5ad88fd6add2cb29a981e9",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File:  FindOpenCV.cmake\n\n# \n\n# Locate OPENCV\n\n#\n\n# The cmake variable space is referenced for $OPENCV_HOME first before the \n\n# standard install locations to perit sandbox installations of OpenCV.\n\n#\n\n# This module defines:\n\n#\n\n# OPENCV_INCLUDE_DIR\n\n#\n\n# OPENCV_FOUND, \n\n# OPENCV_CORE_FOUND \n\n# OPENCV_HIGHGUI_FOUND\n\n# OPENCV_IMGPROC_FOUND\n\n# OPENCV_LEGACY_FOUND\n\n# OPENCV_ML_FOUND \n\n#\n\n# OPENCV_CORE_LIBRARY\n\n# OPENCV_HIGHGUI_LIBRARY\n\n# OPENCV_IMGPROC_LIBRARY\n\n# OPENCV_LEGACY_LIBRARY\n\n# OPENCV_ML_LIBRARY\n\n# OPENCV_LIBRARIES\n\n#\n\n# Created by Garrett Potts.\n\n#\n\n# $Id$\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include path:\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force first look in OPENCV_HOME, then use CMAKE paths if not found\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Required\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Optional\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Unfortunately, OpenCV inter-library dependency is so complicated, we just list the libs twice:\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/FindOpenJPEG.cmake" : {
      "ObjectId" : "1c9d8ca8fbaee0f5fd6dce705a462cadfb673e8b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# -*- cmake -*-\n\n#\n\n# File:  FindOpenJPEG.cmake\n\n#\n\n# Original script was copied from:\n\n# http://code.google.com/p/emeraldviewer/source/browse/indra/cmake\n\n#\n\n# $Id$\n\n###\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find OpenJPEG\n\n# Find the OpenJPEG includes and library\n\n# This module defines\n\n#  OPENJPEG_INCLUDE_DIR, where to find openjpeg.h, etc.\n\n#  OPENJPEG_LIBRARIES, the libraries needed to use OpenJPEG.\n\n#  OPENJPEG_FOUND, If false, do not try to use OpenJPEG.\n\n# also defined, but not for general use are\n\n#  OPENJPEG_LIBRARY, where to find the OpenJPEG library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindOssimVideo.cmake" : {
      "ObjectId" : "50292aa678259dde47184530da1338f73218891b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ossimPredator library\n\n# Find the native ossimPredator includes and library\n\n# This module defines\n\n#  OSSIMVIDEO_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  OSSIMVIDEO_LIBRARIES, libraries to link against to use ossimPredator.\n\n#  OSSIMVIDEO_FOUND, If false, do not try to use ossimPredator.\n\n# also defined, but not for general use are\n\n#  OSSIMVIDEO_LIBRARY, where to find the ossimPredator library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OSSIMVIDEO_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindOssimWMS.cmake" : {
      "ObjectId" : "73e572d965097df752505f937c102d9a97d1f970",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find wms library\n\n# Find the native wms includes and library\n\n# This module defines\n\n#  OSSIMWMS_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  OSSIMWMS_LIBRARIES, libraries to link against to use WMS.\n\n#  OSSIMWMS_FOUND, If false, do not try to use WMS.\n\n# also defined, but not for general use are\n\n#  WMS_LIBRARY, where to find the WMS library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OSSIMWMS_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindPDAL.cmake" : {
      "ObjectId" : "6bfbe7a3480179050ef9c1658839a71f1b547835",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindPDAL.cmake\n\n#\n\n# Find the native Point Data Abstraction Library(PDAL) includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# PDAL_INCLUDE_DIR, where to find pdal.h, etc.\n\n# PDAL_LIBRARIES, libraries to link against to use PDAL and rialto.\n\n# PDAL_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# NOTE: \n\n# This script is specialized for ossim, e.g. looking in /usr/local/ossim.\n\n#\n\n# $Id$\n\n#---\n\n#---\n\n# Find include path:  \"pdal_defines.h\" installs to install \"prefix\" with pdal \n\n# includes under \"pdal\" sub directory.\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CMakeModules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "2de1fb373cd0c2b99d0cd3edb27f60ecd2d80446",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageHandleStandardArgs\n\n# -----------------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ...  )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to\n\n# find_package().  It also sets the <packagename>_FOUND variable.  The\n\n# package is considered found if all variables <var1>...  listed contain\n\n# valid results, e.g.  valid filepaths.\n\n#\n\n# There are two modes of this function.  The first argument in both\n\n# modes is the name of the Find-module where it is called (in original\n\n# casing).\n\n#\n\n# The first simple mode looks like this:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name>\n\n#       (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n#\n\n# If the variables <var1> to <varN> are all valid, then\n\n# <UPPERCASED_NAME>_FOUND will be set to TRUE.  If DEFAULT_MSG is given\n\n# as second argument, then the function will generate itself useful\n\n# success and error messages.  You can also supply a custom error\n\n# message for the failure case.  This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME\n\n#       [FOUND_VAR <resultVar>]\n\n#       [REQUIRED_VARS <var1>...<varN>]\n\n#       [VERSION_VAR   <versionvar>]\n\n#       [HANDLE_COMPONENTS]\n\n#       [CONFIG_MODE]\n\n#       [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# In this mode, the name of the result-variable can be set either to\n\n# either <UPPERCASED_NAME>_FOUND or <OriginalCase_Name>_FOUND using the\n\n# FOUND_VAR option.  Other names for the result-variable are not\n\n# allowed.  So for a Find-module named FindFooBar.cmake, the two\n\n# possible names are FooBar_FOUND and FOOBAR_FOUND.  It is recommended\n\n# to use the original case version.  If the FOUND_VAR option is not\n\n# used, the default is <UPPERCASED_NAME>_FOUND.\n\n#\n\n# As in the simple mode, if <var1> through <varN> are all valid,\n\n# <packagename>_FOUND will be set to TRUE.  After REQUIRED_VARS the\n\n# variables which are required for this package are listed.  Following\n\n# VERSION_VAR the name of the variable can be specified which holds the\n\n# version of the package which has been found.  If this is done, this\n\n# version will be checked against the (potentially) specified required\n\n# version used in the find_package() call.  The EXACT keyword is also\n\n# handled.  The default messages include information about the required\n\n# version and the version which has been actually found, both if the\n\n# version is ok or not.  If the package supports components, use the\n\n# HANDLE_COMPONENTS option to enable handling them.  In this case,\n\n# find_package_handle_standard_args() will report which components have\n\n# been found and which are missing, and the <packagename>_FOUND variable\n\n# will be set to FALSE if any of the required components (i.e.  not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.  Use the option\n\n# CONFIG_MODE if your FindXXX.cmake module is a wrapper for a\n\n# find_package(...  NO_MODULE) call.  In this case VERSION_VAR will be\n\n# set to <NAME>_VERSION and the macro will automatically check whether\n\n# the Config module was found.  Via FAIL_MESSAGE a custom failure\n\n# message can be specified, if this is not used, the default message\n\n# will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXml2  DEFAULT_MSG\n\n#       LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n#\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid.  Then also LIBXML2_FOUND is set to\n\n# TRUE.  If it is not found and REQUIRED was used, it fails with\n\n# FATAL_ERROR, independent whether QUIET was used or not.  If it is\n\n# found, success will be reported, including the content of <var1>.  On\n\n# repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXslt\n\n#       FOUND_VAR LibXslt_FOUND\n\n#       REQUIRED_VARS LibXslt_LIBRARIES LibXslt_INCLUDE_DIRS\n\n#       VERSION_VAR LibXslt_VERSION_STRING)\n\n#\n\n# In this case, LibXslt is considered to be found if the variable(s)\n\n# listed after REQUIRED_VAR are all valid, i.e.  LibXslt_LIBRARIES and\n\n# LibXslt_INCLUDE_DIRS in this case.  The result will then be stored in\n\n# LibXslt_FOUND .  Also the version of LibXslt will be checked by using\n\n# the version contained in LibXslt_VERSION_STRING.  Since no\n\n# FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#     find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\n#\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4\n\n# NO_MODULE) and adds an additional search directory for automoc4.  Here\n\n# the result will be stored in AUTOMOC4_FOUND.  The following\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# exact version required\n",
        "Line" : 295,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 301,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 331,
        "CharPositionInLine" : 17
      },
      "20" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 342,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# print the result:\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/CMakeModules/FindPackageMessage.cmake" : {
      "ObjectId" : "a0349d3db99a3b446c421d9bdc14142ab278e72f",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/CMakeModules/FindPodofo.cmake" : {
      "ObjectId" : "1a0c845f511b090a480ac258384f2472d3d16976",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindPodofo.cmake\n\n#\n\n# Find the native podofo includes and library\n\n#\n\n# This module defines:\n\n#  PODOFO_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  PODOFO_LIBRARY, library to link against to use PODOFO.\n\n#  PODOFO_FOUND, If false, do not try to use PODOFO.\n\n# \n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include path:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find library:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---\n\n# This function sets PODOFO_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CMakeModules/FindPostgreSQL.cmake" : {
      "ObjectId" : "d05d3da7c75df005126e4b60034d3e747730f8f6",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPostgreSQL\n\n# --------------\n\n#\n\n# Find the PostgreSQL installation.\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   PostgreSQL_LIBRARIES - the PostgreSQL libraries needed for linking\n\n#   PostgreSQL_INCLUDE_DIRS - the directories of the PostgreSQL headers\n\n#   PostgreSQL_LIBRARY_DIRS  - the link directories for PostgreSQL libraries\n\n#   PostgreSQL_VERSION_STRING - the version of PostgreSQL found (since CMake 2.8.8)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# History:\n\n# This module is derived from the module originally found in the VTK source tree.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# Note:\n\n# PostgreSQL_ADDITIONAL_VERSIONS is a variable that can be used to set the\n\n# version mumber of the implementation of PostgreSQL.\n\n# In Windows the default installation of PostgreSQL uses that as part of the path.\n\n# E.g C:\\Program Files\\PostgreSQL\\8.4.\n\n# Currently, the following version numbers are known to this module:\n\n# \"9.4\" \"9.3\" \"9.2\" \"9.1\" \"9.0\" \"8.4\" \"8.3\" \"8.2\" \"8.1\" \"8.0\"\n\n#\n\n# To use this variable just do something like this:\n\n# set(PostgreSQL_ADDITIONAL_VERSIONS \"9.2\" \"8.4.4\")\n\n# before calling find_package(PostgreSQL) in your CMakeLists.txt file.\n\n# This will mean that the versions you set here will be found first in the order\n\n# specified before the default ones are searched.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# You may need to manually set:\n\n#  PostgreSQL_INCLUDE_DIR  - the path to where the PostgreSQL include files are.\n\n#  PostgreSQL_LIBRARY_DIR  - The path to where the PostgreSQL library files are.\n\n# If FindPostgreSQL.cmake cannot find the include files or the library files.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# The following variables are set if PostgreSQL is found:\n\n#  PostgreSQL_FOUND         - Set to true when PostgreSQL is found.\n\n#  PostgreSQL_INCLUDE_DIRS  - Include directories for PostgreSQL\n\n#  PostgreSQL_LIBRARY_DIRS  - Link directories for PostgreSQL libraries\n\n#  PostgreSQL_LIBRARIES     - The PostgreSQL libraries.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# If you have installed PostgreSQL in a non-standard location.\n\n# (Please note that in the following comments, it is assumed that <Your Path>\n\n# points to the root directory of the include directory of PostgreSQL.)\n\n# Then you have three options.\n\n# 1) After CMake runs, set PostgreSQL_INCLUDE_DIR to <Your Path>/include and\n\n#    PostgreSQL_LIBRARY_DIR to wherever the library pq (or libpq in windows) is\n\n# 2) Use CMAKE_INCLUDE_PATH to set a path to <Your Path>/PostgreSQL<-version>. This will allow find_path()\n\n#    to locate PostgreSQL_INCLUDE_DIR by utilizing the PATH_SUFFIXES option. e.g. In your CMakeLists.txt file\n\n#    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} \"<Your Path>/include\")\n\n# 3) Set an environment variable called ${PostgreSQL_ROOT} that points to the root of where you have\n\n#    installed PostgreSQL, e.g. <Your Path>.\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define additional search paths for root directories.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Look for an installation.\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Look in other places.\n",
        "Line" : 112,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Look in other places.\n",
        "Line" : 126,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The PostgreSQL library.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setting some more prefixes for the library\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Some platforms include multiple pg_config.hs for multi-lib configurations\n\n# This is a temporary workaround.  A better solution would be to compile\n\n# a dummy c file and extract the value of the symbol.\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Did we find anything?\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Now try to get the include and library path.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/CMakeModules/FindPotrace.cmake" : {
      "ObjectId" : "840195432600d420ba692a54e8910444b09f2521",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindPotrace.cmake\n\n#\n\n# Find the Potrace includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# POTRACE_INCLUDE_DIR, where to find potracelib.h, etc.\n\n# POTRACE_LIBRARIES, libraries to link against to use Potrace and rialto.\n\n# POTRACE_FOUND, True if found, false if one of the above are not found.\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CMakeModules/FindQt5.cmake" : {
      "ObjectId" : "604889d0beaa3cd0cbbba11d2a113eb40aa3c1df",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Qt5\n\n# This module can be used to find Qt5.\n\n# The most important issues are that Qt5 pkgconfig files are installed with PKG_CONFIG_PATH properly\n\n# set, and that Qt5 qmake is available via the system path.\n\n# This module defines a number of key variables and macros.\n\n#\n\n#  Below is a detailed list of variables that FindQt5.cmake sets.\n\n#  QT_FOUND                     If false, don't try to use Qt.\n\n#  QT5_FOUND                    If false, don't try to use Qt5.\n\n#\n\n#  QT_VERSION_MAJOR             The major version of Qt found.\n\n#  QT_VERSION_MINOR             The minor version of Qt found.\n\n#  QT_VERSION_PATCH             The patch version of Qt found.\n\n#\n\n#  QT_BINARY_DIR                Path to \"bin\" of Qt4\n\n#  QT_DOC_DIR                   Path to \"doc\" of Qt4\n\n#\n\n#  QT_QTCORE_FOUND              True if QtCore was found.\n\n#  QT_QTGUI_FOUND               True if QtGui was found.\n\n#  QT_QTDBUS_FOUND              True if QtDBus was found.\n\n#  QT_QTNETWORK_FOUND           True if QtNetwork was found.\n\n#  QT_QTTEST_FOUND              True if QtTest was found.\n\n#  QT_QTWIDGETS_FOUND           True if QtWidgets was found.\n\n#  QT_QTXML_FOUND               True if QtXml was found.\n\n#\n\n#  QT_INCLUDES                  List of paths to all include directories of Qt5.\n\n#  QT_INCLUDE_DIR               Path to \"include\" of Qt4\n\n#  QT_QTCORE_INCLUDE_DIR        Path to \"include/QtCore\"\n\n#  QT_QTDBUS_INCLUDE_DIR        Path to \"include/QtDBus\"\n\n#  QT_QTGUI_INCLUDE_DIR         Path to \"include/QtGui\"\n\n#  QT_QTNETWORK_INCLUDE_DIR     Path to \"include/QtNetwork\"\n\n#  QT_QTTEST_INCLUDE_DIR        Path to \"include/QtTest\"\n\n#  QT_QTWIDGETS_INCLUDE_DIR     Path to \"include/QtWidgets\"\n\n#  QT_QTXML_INCLUDE_DIR         Path to \"include/QtXml\"\n\n#\n\n#  QT_LIBRARIES                 List of paths to all libraries of Qt5.\n\n#  QT_LIBRARY_DIR               Path to \"lib\" of Qt4\n\n#  QT_QTCORE_LIBRARY            The QtCore library\n\n#  QT_QTDBUS_LIBRARY            The QtDBus library\n\n#  QT_QTGUI_LIBRARY             The QtGui library\n\n#  QT_QTNETWORK_LIBRARY         The QtNetwork library\n\n#  QT_QTTEST_LIBRARY            The QtTest library\n\n#  QT_QTWIDGETS_LIBRARY         The QtWidgets library\n\n#  QT_QTXML_LIBRARY             The QtXml library\n\n#\n\n# also defined, but NOT for general use are\n\n#  QT_MOC_EXECUTABLE            Where to find the moc tool\n\n#  QT_CONFIG_FLAGS              Flags used when building Qt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2001-2009 Kitware, Inc.\n\n# Copyright (C) 2011 Collabora Ltd. <http://www.collabora.co.uk/>\n\n# Copyright (C) 2011 Nokia Corporation\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FIND_PACKAGE(PkgConfig REQUIRED)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#MESSAGE(STATUS \"COMPONENT ${_COMPONENT_UPPER}:\")\n\n#MESSAGE(STATUS \"  QT_${_COMPONENT_UPPER}_LIBRARY: ${QT_${_COMPONENT_UPPER}_LIBRARY}\")\n\n#MESSAGE(STATUS \"  QT_${_COMPONENT_UPPER}_INCLUDE_DIR: ${QT_${_COMPONENT_UPPER}_INCLUDE_DIR}\")\n\n#MESSAGE(STATUS \"  QT_${_COMPONENT_UPPER}_FOUND: ${QT_${_COMPONENT_UPPER}_FOUND}\")\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#MESSAGE(STATUS \"QT_LIBRARIES: ${QT_LIBRARIES}\")\n\n#MESSAGE(STATUS \"QT_INCLUDES: ${QT_INCLUDES}\")\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Invokes pkgconfig, cleans up the result and sets variables\n\n#EXECUTE_PROCESS(COMMAND ${PKG_CONFIG_EXECUTABLE} --variable qt_config QtCore\n\n#    OUTPUT_VARIABLE _pkgconfig_flags\n\n#    RESULT_VARIABLE _pkgconfig_failed)\n\n#STRING(REPLACE \" \" \";\" QT_CONFIG_FLAGS \"${_pkgconfig_flags}\")\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/CMakeModules/FindRapier.cmake" : {
      "ObjectId" : "45673f39b68058b7102a7b8f4d9d6172dc1784a4",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindRapier.cmake\n\n#\n\n# Find the native rapier includes and library\n\n#\n\n# This module defines\n\n#  RAPIER_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  RAPIER_LIBRARIES, libraries to link against to use RAPIER.\n\n#  RAPIER_FOUND, If false, do not try to use RAPIER.\n\n# also defined, but not for general use are\n\n#  RAPIER_LIBRARY, where to find the RAPIER library.\n\n# \n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# This function sets RAPIER_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindRegex.cmake" : {
      "ObjectId" : "bcae6f94bed720178566c43e258cf47d71a11baa",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#                                               -*- cmake -*-\n\n#\n\n#  FindRegex.cmake: Try to find Regex\n\n#\n\n#  Copyright (C) 2005-2013 EDF-EADS-Phimeca\n\n#\n\n#  This library is free software: you can redistribute it and/or modify\n\n#  it under the terms of the GNU Lesser General Public License as published by\n\n#  the Free Software Foundation, either version 3 of the License, or\n\n#  (at your option) any later version.\n\n#\n\n#  This library is distributed in the hope that it will be useful,\n\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n#  GNU Lesser General Public License for more details.\n\n#\n\n#  You should have received a copy of the GNU Lesser General Public\n\n#  along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n#  @author dutka\n\n#  @date   2010-02-04 16:44:49 +0100 (Thu, 04 Feb 2010)\n\n#\n\n#\n\n# - Try to find Regex\n\n# Once done this will define\n\n#\n\n#  REGEX_FOUND - System has Regex\n\n#  REGEX_INCLUDE_DIR - The Regex include directory\n\n#  REGEX_LIBRARIES - The libraries needed to use Regex\n\n#  REGEX_DEFINITIONS - Compiler switches required for using Regex\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 33,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#IF (NOT WIN32)\n\n#   # use pkg-config to get the directories and then use these values\n\n#   # in the FIND_PATH() and FIND_LIBRARY() calls\n\n#   FIND_PACKAGE(PkgConfig)\n\n#   PKG_CHECK_MODULES(PC_REGEX regex)\n\n#   SET(REGEX_DEFINITIONS ${PC_REGEX_CFLAGS_OTHER})\n\n#ENDIF (NOT WIN32)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set REGEX_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CMakeModules/FindSQLITE.cmake" : {
      "ObjectId" : "196514861ad804f519d412507b5636217ca9469f",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindSQLITE.cmake\n\n#\n\n# Find the native SQLite includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n# SQLITE_INCLUDE_DIR, where to find sqlite3.h, etc.\n\n# SQLITE_LIBRARY, libraries to link against to use SQLITE.\n\n# SQLITE_FOUND, True if found, false if one of the above are not found.\n\n# \n\n# For ossim, typically SQLite will be system installed which should be found; \n\n# or found in the ossim 3rd party dependencies directory from a SQLite build \n\n# and install.  If the latter it will rely on CMAKE_INCLUDE_PATH and \n\n# CMAKE_LIBRARY_PATH having the path to the party dependencies directory.\n\n# \n\n# $Id$\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# Find include path:\n\n#---\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find SQLITE library:\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the SQLITE_LIBRARY:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---\n\n# This function sets SQLITE_FOUND if variables are valid.\n\n#--- \n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/CMakeModules/FindStlPort.cmake" : {
      "ObjectId" : "ee2b969d0d8a17c478f5a1b506c677ecc4b824c3",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# $Id$\n\n#\n\n# Find the stlport includes and library\n\n# \n\n# This module defines:\n\n#  STLPORT_INCLUDE_DIR, where to find iostream, string, etc.\n\n#  STLPORT_LIBRARIES, libraries to link against to use StlPort.\n\n#  STLPORT_FOUND, If false, do not try to use STLPORT.\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set STLPORT_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/FindSubversion.cmake" : {
      "ObjectId" : "a88f6331ef8d9670b66ad775b564cdc867184ecd",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Extract information from a subversion working copy\n\n# The module defines the following variables:\n\n#  Subversion_SVN_EXECUTABLE - path to svn command line client\n\n#  Subversion_VERSION_SVN - version of svn command line client\n\n#  Subversion_FOUND - true if the command line client was found\n\n#  SUBVERSION_FOUND - same as Subversion_FOUND, set for compatiblity reasons\n\n#\n\n# The minimum required version of Subversion can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Subversion 1.4)\n\n#\n\n# If the command line client executable is found two macros are defined:\n\n#  Subversion_WC_INFO(<dir> <var-prefix>)\n\n#  Subversion_WC_LOG(<dir> <var-prefix>)\n\n# Subversion_WC_INFO extracts information of a subversion working copy at\n\n# a given location. This macro defines the following variables:\n\n#  <var-prefix>_WC_URL - url of the repository (at <dir>)\n\n#  <var-prefix>_WC_ROOT - root url of the repository\n\n#  <var-prefix>_WC_REVISION - current revision\n\n#  <var-prefix>_WC_LAST_CHANGED_AUTHOR - author of last commit\n\n#  <var-prefix>_WC_LAST_CHANGED_DATE - date of last commit\n\n#  <var-prefix>_WC_LAST_CHANGED_REV - revision of last commit\n\n#  <var-prefix>_WC_INFO - output of command `svn info <dir>'\n\n# Subversion_WC_LOG retrieves the log message of the base revision of a\n\n# subversion working copy at a given location. This macro defines the\n\n# variable:\n\n#  <var-prefix>_LAST_CHANGED_LOG - last log of base revision\n\n# Example usage:\n\n#  FIND_PACKAGE(Subversion)\n\n#  IF(SUBVERSION_FOUND)\n\n#    Subversion_WC_INFO(${PROJECT_SOURCE_DIR} Project)\n\n#    MESSAGE(\"Current revision is ${Project_WC_REVISION}\")\n\n#    Subversion_WC_LOG(${PROJECT_SOURCE_DIR} Project)\n\n#    MESSAGE(\"Last changed log is ${Project_LAST_CHANGED_LOG}\")\n\n#  ENDIF(SUBVERSION_FOUND)\n\n#\n\n# History (yyyymmdd):\n\n# 20121002 - Modified to \"continue on\" if svn is not found. (drb) \n\n#\n\n#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Tristan Carel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the subversion commands should be executed with the C locale, otherwise\n\n# the message (which are parsed) may be translated, Alex\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# restore the previous LC_ALL\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# the subversion commands should be executed with the C locale, otherwise\n\n# the message (which are parsed) may be translated, Alex\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# restore the previous LC_ALL\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This macro can block if the certificate is not signed:\n\n# svn ask you to accept the certificate and wait for your answer\n\n# This macro requires a svn server network access (Internet most of the time)\n\n# and can also be slow since it access the svn server\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#---\n\n# This function sets GEOS_FOUND if variables are valid.\n\n#--- \t\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/CMakeModules/FindTIFF.cmake" : {
      "ObjectId" : "95f7fdb5d3b7515e6e07ade1cc4d83b03a04b762",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find TIFF library\r\n\n# Find the native TIFF includes and library\r\n\n# This module defines\r\n\n#  TIFF_INCLUDE_DIR, where to find tiff.h, etc.\r\n\n#  TIFF_LIBRARIES, libraries to link against to use TIFF.\r\n\n#  TIFF_FOUND, If false, do not try to use TIFF.\r\n\n# also defined, but not for general use are\r\n\n#  TIFF_LIBRARY, where to find the TIFF library.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2002-2009 Kitware, Inc.\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TIFF_FOUND to TRUE if \r\n\n# all listed variables are TRUE\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeModules/Findossim.cmake" : {
      "ObjectId" : "e7b0a2fa2de6b8ea305513d9a71eb5d7c6da487d",
      "LastModified" : "2019-03-25T12:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---\n\n# File: FindOSSIM.cmake\n\n#\n\n# Find OSSIM(Open Source Software Image Map) includes and libraries.\n\n#\n\n# This module defines:\n\n#\n\n#  OSSIM_INCLUDE_DIR, Where to find ossimVersion.h, etc.\n\n#  OSSIM_LIBRARIES, Libraries to link against to use OSSIM.\n\n#  OSSIM_FOUND,  True if found, false if one of the above are not found.\n\n# also defined, but not for general use are\n\n#  OSSIM_LIBRARY, where to find the OSSIM library.\n\n#---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# Find include path:\n\n#---\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---\n\n# This function sets OSSIM_FOUND if variables are valid.\n\n#---\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeModules/FindossimPlanet.cmake" : {
      "ObjectId" : "5adf3a527fba3a26e200edfd6c0e51530562dbb8",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ossimPlanet library\n\n# Find the native ossimPlanet includes and library\n\n# This module defines\n\n#  OSSIMPLANET_INCLUDE_DIR, where to find tiff.h, etc.\n\n#  OSSIMPLANET_LIBRARIES, libraries to link against to use OSSIM.\n\n#  OSSIMPLANET_FOUND, If false, do not try to use OSSIM.\n\n# also defined, but not for general use are\n\n#  OSSIMPLANET_LIBRARY, where to find the OSSIM library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OSSIMPLANET_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakeModules/OssimCPack.cmake" : {
      "ObjectId" : "fd58abbee9f1c306cf62d911f270b1d18c4f98bb",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script sets up packaging targets for each \"COMPONENT\" as specified in INSTALL commands\n\n#\n\n# for each component a CPackConfig-<component>.cmake is generated in the build tree\n\n# and a target is added to call cpack for it (e.g. package_ossim\n\n# A target for generating a package with everything that gets INSTALLED is generated (package_ossim-all)\n\n# A target for making all of the above packages is generated (package_ALL)\n\n#\n\n# package filenames are created on the form <package>-<platform>-<arch>[-<compiler>]-<build_type>[-static].tgz\n\n# ...where compiler optionally set using a cmake gui (OSSIM_CPACK_COMPILER). This script tries to guess compiler version for msvc generators\n\n# ...build_type matches CMAKE_BUILD_TYPE for all generators but the msvc ones\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# resolve architecture. The reason i \"change\" i686 to i386 is that debian packages\n\n# require i386 so this is for the future\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set a default system name - use CMake setting (Linux|Windows|...)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(STATUS \"CMAKE_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}\")\n\n#message(STATUS \"CMAKE_SYSTEM_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR}\")\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for msvc the SYSTEM_NAME is set win32/64 instead of \"Windows\"\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Guess the compiler (is this desired for other platforms than windows?)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# expose the compiler setting to the user\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## variables that apply to all packages\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# these goes for all platforms. Setting these stops the CPack.cmake script from generating options about other package compression formats (.z .tz, etc.)\n",
        "Line" : 52,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#       SET(CPACK_GENERATOR \"PackageMaker\")\n\n#       SET(CPACK_SOURCE_GENERATOR \"PackageMaker\")\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# for ms visual studio we use it's internally defined variable to get the configuration (debug,release, ...) \n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# on un*x an empty CMAKE_BUILD_TYPE means release\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Get all defined components\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# cmake 2.6.0 don't supply the COMPONENTS property.\n\n# I set it manually to be the packages that can always be packaged\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Create a target that will be used to generate all packages defined below\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# the doc packages don't need a system-arch specification\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# This is naive and will probably need fixing eventually\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Set in and out archive filenames. Windows = zip, others = tgz\n",
        "Line" : 119,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "#           SET(ARCHIVE_EXT \"dmg\")\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Create a target that creates the current package\n\n# and rename the package to give it proper filename\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Add the exact same custom command to the all package generating target. \n\n# I can't use add_dependencies to do this because it would allow parallel building of packages so am going brute here\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Create configs and targets for a package including all components\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Create configs and targets for each component\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cmake/CMakeModules/OssimCommonVariables.cmake" : {
      "ObjectId" : "6b9a39798fdec6ec41241d6e445863bcd917abb9",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# This currently sets up the options for the WARNING FLAGS for the compiler we are generating for.\n\n# Currently only have gnu\n\n##################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---\n\n# This option is to enable the /MP to compile multiple source files by using\n\n# multiple processes.\n\n#---\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "###\n\n# Currently must set /FORCE:MULTIPLE for Visual Studio 2010. 29 October 2010 - drb\n\n###\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "###################################################################################\n\n# Set defaults for Universal Binaries. We want 32-bit Intel/PPC on 10.4\n\n# and 32/64-bit Intel/PPC on >= 10.5. Anything <= 10.3 doesn't support.\n\n# These are just defaults/recommendations, but how we want to build\n\n# out of the box. But the user needs to be able to change these options.\n\n# So we must only set the values the first time CMake is run, or we\n\n# will overwrite any changes the user sets.\n\n# FORCE is used because the options are not reflected in the UI otherwise.\n\n# Seems like a good place to add version specific compiler flags too.\n\n###################################################################################\n",
        "Line" : 87,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# This is really fragile, but CMake doesn't provide the OS system\n\n# version information we need. (Darwin versions can be changed\n\n# independently of OS X versions.)\n\n# It does look like CMake handles the CMAKE_OSX_SYSROOT automatically.\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# 64-bit compiles are not supported with Carbon. We should enable\n",
        "Line" : 133,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# No Universal Binary support\n\n# Should break down further to set the -mmacosx-version-min,\n\n# but the SDK detection is too unreliable here.\n",
        "Line" : 140,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Dynamic vs Static Linking\n",
        "Line" : 170,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "#   IF(NOT OSSIM_LIBRARY_BUILD_OUTPUT_DIRECTORY)\n\n#      SET(OSSIM_LIBRARY_BUILD_OUTPUT_DIRECTORY ${${PROJECT_NAME}_SOURCE_DIR}/lib)\n\n#   ENDIF(NOT OSSIM_LIBRARY_BUILD_OUTPUT_DIRECTORY)\n\n#   IF(NOT OSSIM_RUNTIME_BUILD_OUTPUT_DIRECTORY)\n\n#      SET(OSSIM_RUNTIME_BUILD_OUTPUT_DIRECTORY ${${PROJECT_NAME}_SOURCE_DIR}/bin)\n\n#   ENDIF(NOT OSSIM_RUNTIME_BUILD_OUTPUT_DIRECTORY)\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Libraries and archives go to lib or lib64.\n",
        "Line" : 186,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# force some variables that could be defined in the command line to be written to cache\n",
        "Line" : 236,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# Define paths used by package finders defined in this directory:\n",
        "Line" : 259,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "#   SET(CMAKE_LIBRARY_PATH \"${CMAKE_LIBRARY_PATH};/usr/lib;/usr/local/lib;/usr/lib64;/usr/lib/x86_64-linux-gnu\")\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#################################### ADd some common options for all modules to use ###################################\n",
        "Line" : 271,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 18
    },
    "cmake/CMakeModules/OssimDetermineCompiler.cmake" : {
      "ObjectId" : "332eee8a3ec22c826e6baa29856b129d4ab98341",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - If Visual Studio is being used, this script sets the variable OSG_COMPILER\n\n# The principal reason for this is due to MSVC 8.0 SP0 vs SP1 builds.\n\n#\n\n# Variable:\n\n#   OSG_COMPILER\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not currently used...\n\n#IF(CMAKE_COMPILER_IS_GNUCXX)\n\n#    EXEC_PROGRAM(\n\n#        ${CMAKE_CXX_COMPILER}  \n\n#        ARGS     ${CMAKE_CXX_COMPILER_ARG1} -dumpversion \n\n#        OUTPUT_VARIABLE gcc_compiler_version\n\n#    )\n\n#    #MESSAGE(\"GCC Version: ${gcc_compiler_version}\")\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# parse for exact compiler version\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#MESSAGE(\"${vc_compiler_version}\")\n",
        "Line" : 48,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Standard vc80 is 14.00.50727.42, sp1 14.00.50727.762, sp2?\n\n# Standard vc90 is 9.0.30729.1, sp1 ?\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# parse for exact visual studio version\n\n#IF(MSVC_IDE)\n\n# string(REGEX MATCH \"Visual Studio Version [0-9]+.[0-9]+.[0-9]+.[0-9]+\" vs_version \"${OUTPUT}\")\n\n# IF(vs_version)\n\n# MESSAGE(\"${vs_version}\")\n\n# string(REGEX MATCHALL \"[0-9]+\" VS_VERSION_LIST \"${vs_version}\")\n\n# list(GET VS_VERSION_LIST 0 VS_MAJOR_VERSION)\n\n# list(GET VS_VERSION_LIST 1 VS_MINOR_VERSION)\n\n# list(GET VS_VERSION_LIST 2 VS_PATCH_VERSION)\n\n# list(GET VS_VERSION_LIST 3 VS_EXTRA_VERSION)\n\n# ENDIF(vs_version)\n\n#ENDIF(MSVC_IDE)\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/CMakeModules/OssimQt4Macros.cmake" : {
      "ObjectId" : "c0a6c30124c8997ae6c4747b6fbd2551adb59f1b",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeModules/OssimQt5Macros.cmake" : {
      "ObjectId" : "6fc1f0f1e37e1ef1bca09d8a8993bf361da65a8e",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeModules/OssimUtilities.cmake" : {
      "ObjectId" : "6b3c47defc1443370d9c6fae1033b951459d2649",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#################################################################################\n\n# This was taken from the http://www.cmake.org/Wiki/CMakeMacroParseArguments\n\n#################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################################\n\n# This was taken from http://www.cmake.org/Wiki/CMakeMacroListOperations#CAR_and_CDR\n\n##############################################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################################\n\n# This was taken from http://www.cmake.org/Wiki/CMakeMacroListOperations#CAR_and_CDR\n\n#############################################################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#################################################################################\n\n#  MACRO: TODAYS_DATE\n\n#  \n\n#  DESCRIPTION:\n\n#      MACRO FOR GETTING THE DATE AND TIME INFORMATION\n\n#################################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#################################################################################\n\n#  MACRO: GET_GIT_REVISION\n\n#  \n\n#  DESCRIPTION:\n\n#      MACRO FOR GETTING THE GIT revision for this build\n\n#################################################################################\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# MESSAGE(\"Current revision is ${Project_WC_REVISION}\")\n\n# Subversion_WC_LOG(${PROJECT_SOURCE_DIR} Project)\n\n# MESSAGE(\"Last changed log is ${Project_LAST_CHANGED_LOG}\")\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#when using versioned names, the .dll name differ from .lib name, there is a problem with that:\n\n#CMake 2.4.7, at least seem to use PREFIX instead of IMPORT_PREFIX  for computing linkage info to use into projects,\n\n# so we full path name to specify linkage, this prevent automatic inferencing of dependencies, so we add explicit depemdencies\n\n#to library targets used\n",
        "Line" : 87,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "######################################################################\n\n#\n\n# This set up the libraries to link to, it assumes there are two variable: one common for a group of examples or plugins\n\n# kept in the variable TARGET_COMMON_LIBRARIES and an example or plugin specific kept in TARGET_ADDED_LIBRARIES \n\n# they are combined in a single list checked for unicity \n\n# the suffix ${CMAKE_DEBUG_POSTFIX} is used for differentiating optimized and debug\n\n#\n\n# a second variable TARGET_EXTERNAL_LIBRARIES hold the list of  libraries not differentiated between debug and optimized \n\n##################################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# SET(MACOSX_BUNDLE_LONG_VERSION_STRING \"${OSSIM_MAJOR_VERSION}.${OSSIM_MINOR_VERSION}.${OSSIM_PATCH_VERSION}\")\n\n# Short Version is the \"marketing version\". It is the version\n\n# the user sees in an information panel.\n",
        "Line" : 155,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Bundle version is the version the OS looks at.\n",
        "Line" : 159,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# SET(MACOSX_BUNDLE_ICON_FILE \"myicon.icns\")\n\n# SET(MACOSX_BUNDLE_COPYRIGHT \"\")\n\n# SET(MACOSX_BUNDLE_INFO_STRING \"Info string, localized?\")\n",
        "Line" : 163,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "#####################################################################################################\n\n# MACRO: OSSIM_LINK_LIBRARY\n\n#\n\n# Example: \n\n#     OSSIM_LINK_LIBRARY(ossim \n\n#                        COMPONENT_NAME ossim \n\n#                        SOURCE_FILES foo.cpp \n\n#                        HEADERS foo.h \n\n#                        TYPE SHARED\n\n#                        LIBRARIES <list of libraries to link against>\n\n#                        INSTALL_LIB\n\n#                        INSTALL_HEADERS)\n\n#\n\n#    The INSTALL_LIB says to add a default install command for the library by default it will setup the following\n\n#           install(TARGETS ossim\n\n#               FRAMEWORK           DESTINATION         ${INSTALL_FRAMEWORK_DIR}\n\n#               RUNTIME             DESTINATION         ${INSTALL_RUNTIME_DIR}\n\n#               LIBRARY             DESTINATION         ${INSTALL_LIBRARY_DIR}\n\n#               ARCHIVE             DESTINATION         ${INSTALL_ARCHIVE_DIR}\n\n#               PUBLIC_HEADER       DESTINATION         ${INSTALL_INCLUDE_DIR} \n\n#               COMPONENT ossim)\n\n#\n\n#   The INSTALL_HEADERS will do a default header installation if the option is passed in\n\n#        install(FILES <list of headers> DESTINATION \"include/ossim\" COMPONENT ossim)\n\n#####################################################################################################\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The SO_VERSION and VERSION are here for override purpose only so other libraries with their own \n\n# versioning scheme can use the sum linking\n\n#\n",
        "Line" : 246,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "#        SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\n\n#        SET(CMAKE_INSTALL_RPATH \"${OSSIM_COMPILE_FRAMEWORKS_INSTALL_NAME_DIR}\")\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---\n\n# Given install prefix=/usr/local and \n\n# install lib dir = lib64 and \n\n# link name = libossim.dylib\n\n# You get \"/usr/local/lib64/libossim.dylib\" in the rpath.\n\n#---\n",
        "Line" : 277,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# ADD_CUSTOM_TARGET( lib DEPENDS ${LINK_NAME} )\n\n# change lib_target properties\n",
        "Line" : 301,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# create *nix style library versions + symbolic links\n",
        "Line" : 304,
        "CharPositionInLine" : 36
      },
      "17" : {
        "Text" : "# allow creating static and shared libs without conflicts\n",
        "Line" : 307,
        "CharPositionInLine" : 34
      },
      "18" : {
        "Text" : "# avoid conflicts between library and binary target names\n",
        "Line" : 309,
        "CharPositionInLine" : 34
      },
      "19" : {
        "Text" : "#   get_target_property(TEST_UNINSTALL uninstall CREATED)\n\n#   IF(NOT TEST_UNINSTALL)\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n### uninstall target\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 353,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "#   ENDIF(NOT TEST_UNINSTALL)\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "####################################################################################################\n\n#   Writes all include directory paths to a central file for later parsing dependencies\n\n####################################################################################################\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "####################################################################################################\n\n#   Caches all source file names to a central file for later parsing dependencies\n\n####################################################################################################\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#GET_DIRECTORY_PROPERTY(lib_sources LINK_SOURCES)\n",
        "Line" : 385,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "#GET_DIRECTORY_PROPERTY(app_sources APPLICATION_SOURCES)\n",
        "Line" : 390,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 26
    },
    "cmake/CMakeModules/OssimVersion.cmake" : {
      "ObjectId" : "3bd1f89cce3f618ce7b44404549a1c9954858667",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeModules/Qt5Macros.cmake" : {
      "ObjectId" : "fecaac51383cf7d0ab794e7017377072dc1a3e07",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included by FindQt5.cmake, don't include it directly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2001-2009 Kitware, Inc.\n\n# Copyright (C) 2011 Collabora Ltd. <http://www.collabora.co.uk/>\n\n# Copyright (C) 2011 Nokia Corporation\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# helper macro to set up a moc rule\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For Windows, create a parameters file to work around command line length limit\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Pass the parameters in a file.  Set the working directory to\n\n# be that containing the parameters file and reference it by\n\n# just the file name.  This is necessary because the moc tool on\n\n# MinGW builds does not seem to handle spaces in the path to the\n\n# file given with the @ syntax.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/fortify/fortify_linux_toolchain.cmake" : {
      "ObjectId" : "a2daab0b51b72139626fb6ffd6fc5eef44f12bb0",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#specify the compilers\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b21972e73af4747a11a50c10d0ebd64fceca27c8",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################### BEGIN: GRAB SOURCE FILES ##########################################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################### GRAB HEADERS #####################################\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################## APPLE Framework support deep header mapping ###################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#################################### SETUP the required link parameters using the Ossim macro ####################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The install headers was duplicating ossimVersion.h and ossimConfig.h in \"install_prefix/include\".\n\n# INSTALL_HEADERS)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################## If DO special case for ossim core needs to have the files mapped properly ################################ \n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ENDIF(NOT OSSIM_FRAMEWORK_GENERATION OR NOT APPLE)\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---\n\n# This is the old list of library for the link line.  Replaced with ${ossimDependentLibs}.  \n\n# Kept temporarily in case I broke something.  drb - 31 Aug. 2011\n\n# LIBRARIES ${JPEG_LIBRARIES} ${TIFF_LIBRARIES} ${GEOTIFF_LIBRARIES} ${OPENTHREADS_LIBRARIES} ${FREETYPE_LIBRARIES} ${MPI_LIBRARIES} ${ZLIB_LIBRARIES} ${DL_LIBRARY}\n\n# ---\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/dll_main/Makefile" : {
      "ObjectId" : "8e4b88faee33c970183d5bb5acfe96a4d03693da",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###\n\n# $Id: Makefile 7866 2005-08-01 14:59:59Z dburken $\n\n# Intentionally left blank for unix build.\n\n###\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/examples/tutorial/Makefile" : {
      "ObjectId" : "e2b7c3128eee9cdff8ae6fcd50565d37e82e740d",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\\\n#\tshared_band_average$(EXEEXT)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/CMakeLists.txt" : {
      "ObjectId" : "cc4f8c61f424ad421fff0774fc24c18a6f353ad6",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only \"install\" the following. \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remainder to be built but not installed\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/src/base/CMakeLists.txt" : {
      "ObjectId" : "533ae1df97cf607076646de44f33db348b7cfc93",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remainder to be built but not installed\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/src/elevation/CMakeLists.txt" : {
      "ObjectId" : "e41631a1b0ca06795e69803eb26fcf33c96b9d40",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remainder to be built but not installed\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/src/gsoc/CMakeLists.txt" : {
      "ObjectId" : "11d816566241e1fd0706bc5c46084077fdcb29a8",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/hdf5/CMakeLists.txt" : {
      "ObjectId" : "ce8569fe797eccb61d5373a1c5d45bfa2460b118",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/src/imaging/CMakeLists.txt" : {
      "ObjectId" : "639cabd579ba15d3af378e834d50eec2124d26eb",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remainder to be built but not installed\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/src/parallel/CMakeLists.txt" : {
      "ObjectId" : "101cbf7c01967e49614f13f8357a06cecf15881d",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/point_cloud/CMakeLists.txt" : {
      "ObjectId" : "2378c8f894caef5003a9df40d7ffaa83db938a88",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/projection/CMakeLists.txt" : {
      "ObjectId" : "185a452d7a726e753e7f473e1c54db6d0b4e4403",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/support_data/CMakeLists.txt" : {
      "ObjectId" : "a017e30c6955e444664d05eae8cac5a9a1801848",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/util/CMakeLists.txt" : {
      "ObjectId" : "7fb383482918d8601207299637c8fecad3ecb116",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/src/vec/CMakeLists.txt" : {
      "ObjectId" : "653877c8f9725b1605fb6878fef89c6d2fc46965",
      "LastModified" : "2018-11-08T20:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# $Id: CMakeLists.txt 23496 2015-08-28 15:26:18Z okramer $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 119,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2293
}