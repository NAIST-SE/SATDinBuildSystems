{
  "Repository" : "21720966",
  "Revision" : "HEAD",
  "ObjectId" : "0527c9db8148ce37442fa4a9c99a2a23ad50b0b7",
  "CommitTime" : "2019-04-08T14:28:26Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "aafa70ed1aac9252d5829915c740389e6ef03a33",
      "LastModified" : "2019-01-25T17:30:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# increase to 3.1 once all major distributions\n\n# include a version of CMake >= 3.1\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adhere to GNU filesystem layout conventions\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Precompiled header macro. Parameters are source file list and filename for pch cpp file.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make source files use/depend on PCH_NAME\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# make PCHCPP file compile and generate PCH_NAME\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# make testing optional\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# disable this from -Wall, since it happens all over.\n",
        "Line" : 90,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "# disable this from -Wall, since it happens all over.\n",
        "Line" : 94,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "# Request C++11\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMake versions before 3.1 do not understand CMAKE_CXX_STANDARD\n\n# remove this block once CMake >=3.1 has fixated in the ecosystem\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# For MinGW compiles, statically link against the GCC and C++ runtimes.\n\n# This avoids the need to ship those runtimes as DLLs.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# We depend on these for later projects, so they should come first.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "ChooseMSVCCRT.cmake" : {
      "ObjectId" : "209788174ff9cd9a45dc8a15483f21d6091e3e38",
      "LastModified" : "2014-03-12T02:34:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The macro choose_msvc_crt() takes a list of possible\n\n# C runtimes to choose from, in the form of compiler flags,\n\n# to present to the user. (MTd for /MTd, etc)\n\n#\n\n# The macro is invoked at the end of the file.\n\n#\n\n# CMake already sets CRT flags in the CMAKE_CXX_FLAGS_* and\n\n# CMAKE_C_FLAGS_* variables by default. To let the user\n\n# override that for each build type:\n\n# 1. Detect which CRT is already selected, and reflect this in\n\n# LLVM_USE_CRT_* so the user can have a better idea of what\n\n# changes they're making.\n\n# 2. Replace the flags in both variables with the new flag via a regex.\n\n# 3. set() the variables back into the cache so the changes\n\n# are user-visible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Helper macros: ###\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trying to match the beginning or end of the string with stuff\n\n# like [ ^]+ didn't work, so use a bunch of parentheses instead.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find the selected-by-CMake CRT for each build type, if any.\n\n# Strip off the leading slash and any whitespace.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Replaces or adds a flag to a variable.\n\n# Expects 'flag' to be padded with spaces.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure this change gets reflected in the cache/gui.\n\n# CMake requires the docstring parameter whenever set() touches the cache,\n\n# so get the existing docstring and re-use that.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# List of valid CRTs for MSVC\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "External/CMakeLists.txt" : {
      "ObjectId" : "6ff4f47acdbb5e1644e061fc9f4735ed1e915729",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suppress all warnings from external projects.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to make sure Google Test does not mess up with the\n\n# global CRT settings on Windows.\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# EXCLUDE_FROM_ALL keeps the install target from installing GTEST files.\n",
        "Line" : 13,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "OGLCompilersDLL/CMakeLists.txt" : {
      "ObjectId" : "5bb3f0ee69690a44e0b7b2b31cd5638a1a49a1c8",
      "LastModified" : "2017-07-04T17:00:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SPIRV/CMakeLists.txt" : {
      "ObjectId" : "1997e74c30ab9e62f8149be17aa1632052c6f068",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "StandAlone/CMakeLists.txt" : {
      "ObjectId" : "5cea53d9f64e1c0b78e95e4f93743e4ebc93fff4",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "glslang/CMakeLists.txt" : {
      "ObjectId" : "5f51476ba5d10410731685d795445a24d5fdf633",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This might be useful for making grammar changes:\n\n#\n\n# find_package(BISON)\n\n# add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp.h\n\n#                    COMMAND ${BISON_EXECUTABLE} --defines=${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp.h -t ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang.y -o ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp\n\n#                    MAIN_DEPENDENCY MachineIndependent/glslang.y\n\n#                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n\n# set(BISON_GLSLParser_OUTPUT_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "glslang/OSDependent/Unix/CMakeLists.txt" : {
      "ObjectId" : "e652f456249e45e3e8c9a4f775697df163afaa4f",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link pthread\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needed as long as we support CMake 2.8 for Ubuntu 14.04,\n\n# which does not support the recommended Threads::Threads target.\n\n# https://cmake.org/cmake/help/v2.8.12/cmake.html#module:FindThreads\n\n# Also needed when cross-compiling to work around\n\n# https://gitlab.kitware.com/cmake/cmake/issues/16920\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This is the recommended way, so we use it for 3.1+.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "glslang/OSDependent/Windows/CMakeLists.txt" : {
      "ObjectId" : "f257418abbee006a1f82c772f3fb8c202011b35e",
      "LastModified" : "2017-07-04T17:00:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MinGW GCC complains about function pointer casts to void*.\n\n# Turn that off with -fpermissive.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gtests/CMakeLists.txt" : {
      "ObjectId" : "f678cb6ea5c982f60684f01155a0b86c197972be",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Framework related source files\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Test related source files\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# -- Remapper tests\n",
        "Line" : 25,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Supply a default test root directory, so that manual testing\n\n# doesn't have to specify the --test-root option in the normal\n\n# case that you want to use the tests from the same source tree.\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "hlsl/CMakeLists.txt" : {
      "ObjectId" : "f918d7a13d467998833b6a3b16f04530f5ddc75f",
      "LastModified" : "2019-04-03T09:08:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 11
  },
  "ElapsedTime" : 5624
}