{
  "Repository" : "2916055",
  "Revision" : "HEAD",
  "ObjectId" : "38b94f248ad2473b8c49e9832215071e8a79944f",
  "CommitTime" : "2019-04-14T21:21:51Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "966343ab67792bafd49b52f68d1d6aafd4125646",
      "LastModified" : "2019-03-04T22:43:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bug http://vtk.org/Bug/view.php?id=11020\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# This can be read from ${PROJECT_NAME} after project() is called\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Works only for cmake 3.1 and greater\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Also remember to set PROTOCOL_VERSION in network/networkprotocol.h when releasing\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Change to false for releases\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Append \"-debug\" to version string\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Configuration options\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Default to release\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Included stuff\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is done here so that relative search paths are more reasonable\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Installation\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Linux, BSD etc\n",
        "Line" : 85,
        "CharPositionInLine" : 13
      },
      "12" : {
        "Text" : "# Library pack\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# JsonCPP doesn't compile well on GCC 4.8\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Subdirectories\n\n# Be sure to add all relevant definitions above this\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# CPack\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#DISABLED does not mean it is disabled, and is just not selected by default.\n",
        "Line" : 258,
        "CharPositionInLine" : 10
      },
      "17" : {
        "Text" : "# Include all dynamically linked runtime libaries such as MSVCRxxx.dll\n",
        "Line" : 267,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Supported languages can be found at \n\n# http://wixtoolset.org/documentation/manual/v3/wixui/wixui_localization.html\n\n#set(CPACK_WIX_CULTURES \"ar-SA,bg-BG,ca-ES,hr-HR,cs-CZ,da-DK,nl-NL,en-US,et-EE,fi-FI,fr-FR,de-DE\")\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# The correct way would be to include both x32 and x64 into one installer\n\n# and install the appropriate one.\n\n# CMake does not support that, so there are two separate GUID's\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Add a target to generate API documentation with Doxygen\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "build/android/Makefile" : {
      "ObjectId" : "c5a21c290b72c692b9a96f534273d6f36fa13ca9",
      "LastModified" : "2019-01-09T13:39:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# build options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# compile with GPROF\n\n# GPROF = 1\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build for build platform\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#use interim target variable to switch leveldb on or off\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Note: Texturehack patch is required for gpu's not supporting color format\n\n#      correctly. Known bad GPU:\n\n#      -geforce on emulator\n\n#      -Vivante Corporation GC1000 core (e.g. Galaxy Tab 3)\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These Intentionally doesn't depend on their respective build steps,\n\n# because it takes a while to verify that everything's up-to-date.\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 700:57 token recognition error at: '\\U'\n"
    },
    "cmake/Modules/FindCURL.cmake" : {
      "ObjectId" : "2ec866ef9308de9c36c6605208ead585bf728a60",
      "LastModified" : "2015-03-27T19:00:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindGMP.cmake" : {
      "ObjectId" : "7b45f16c7d7feb985eb47d91a8f5f5129713af7d",
      "LastModified" : "2018-06-26T08:00:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindGettextLib.cmake" : {
      "ObjectId" : "11de121770684973734e35babc2b017816854861",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Modern Linux, as well as OSX, does not require special linking because\n\n# GetText is part of glibc.\n\n# TODO: check the requirements on other BSDs and older Linux\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BSD variants require special linkage as they don't use glibc\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindIrrlicht.cmake" : {
      "ObjectId" : "37349b892b9b3f0b2ea94d92418ce83a6891a7b1",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find include directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Haiku\n",
        "Line" : 45,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : "# Haiku\n",
        "Line" : 52,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : "# On Windows, find the DLL for installation\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindJson.cmake" : {
      "ObjectId" : "26339a2959d09819c051ce1d3c261d392e8b3041",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Look for JSONCPP if asked to.\n\n# We use a bundled version by default because some distros ship versions of\n\n# JSONCPP that cause segfaults and other memory errors when we link with them.\n\n# See https://github.com/minetest/minetest/issues/1793\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLua.cmake" : {
      "ObjectId" : "be5d92d8c017779f024e44149b003a49b3fc9b0d",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Look for Lua library to use\n\n# This selects LuaJIT by default\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLuaJIT.cmake" : {
      "ObjectId" : "cd6e7bdd8d9eae8f93b23a66d095e29f126bdea0",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate LuaJIT library\n\n# This module defines\n\n#  LUAJIT_FOUND, if false, do not try to link to Lua\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# This module is similar to FindLua51.cmake except that it finds LuaJit instead.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 17,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 18,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUAJIT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindNcursesw.cmake" : {
      "ObjectId" : "e572c704af5ba649319f690bd8a1a5b4394320c5",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindNcursesw\n\n# ------------\n\n#\n\n# Find the ncursesw (wide ncurses) include file and library.\n\n#\n\n# Based on FindCurses.cmake which comes with CMake.\n\n#\n\n# Checks for ncursesw first. If not found, it then executes the\n\n# regular old FindCurses.cmake to look for for ncurses (or curses).\n\n#\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ``CURSES_FOUND``\n\n#   True if curses is found.\n\n# ``NCURSESW_FOUND``\n\n#   True if ncursesw is found.\n\n# ``CURSES_INCLUDE_DIRS``\n\n#   The include directories needed to use Curses.\n\n# ``CURSES_LIBRARIES``\n\n#   The libraries needed to use Curses.\n\n# ``CURSES_HAVE_CURSES_H``\n\n#   True if curses.h is available.\n\n# ``CURSES_HAVE_NCURSES_H``\n\n#   True if ncurses.h is available.\n\n# ``CURSES_HAVE_NCURSES_NCURSES_H``\n\n#   True if ``ncurses/ncurses.h`` is available.\n\n# ``CURSES_HAVE_NCURSES_CURSES_H``\n\n#   True if ``ncurses/curses.h`` is available.\n\n# ``CURSES_HAVE_NCURSESW_NCURSES_H``\n\n#   True if ``ncursesw/ncurses.h`` is available.\n\n# ``CURSES_HAVE_NCURSESW_CURSES_H``\n\n#   True if ``ncursesw/curses.h`` is available.\n\n#\n\n# Set ``CURSES_NEED_NCURSES`` to ``TRUE`` before the\n\n# ``find_package(Ncursesw)`` call if NCurses functionality is required.\n\n#\n\n#=============================================================================\n\n# Copyright 2001-2014 Kitware, Inc.\n\n# modifications: Copyright 2015 kahrl <kahrl@gmx.net>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#   nor the names of their contributors may be used to endorse or promote\n\n#   products derived from this software without specific prior written\n\n#   permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# ------------------------------------------------------------------------------\n\n#\n\n# The above copyright and license notice applies to distributions of\n\n# CMake in source and binary form.  Some source files contain additional\n\n# notices of original copyright by their contributors; see each source\n\n# for details.  Third-party software packages supplied with CMake under\n\n# compatible licenses provide their own copyright notices documented in\n\n# corresponding subdirectories.\n\n#\n\n# ------------------------------------------------------------------------------\n\n#\n\n# CMake was initially developed by Kitware with the following sponsorship:\n\n#\n\n#  * National Library of Medicine at the National Institutes of Health\n\n#    as part of the Insight Segmentation and Registration Toolkit (ITK).\n\n#\n\n#  * US National Labs (Los Alamos, Livermore, Sandia) ASC Parallel\n\n#    Visualization Initiative.\n\n#\n\n#  * National Alliance for Medical Image Computing (NAMIC) is funded by the\n\n#    National Institutes of Health through the NIH Roadmap for Medical Research,\n\n#    Grant U54 EB005149.\n\n#\n\n#  * Kitware, Inc.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Previous versions of FindCurses provided these values.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Report whether each possible header name exists in the include directory.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Need to provide the *_LIBRARIES\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Provide the *_INCLUDE_DIRS result.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# compatibility\n",
        "Line" : 183,
        "CharPositionInLine" : 49
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CURSES_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindOpenGLES2.cmake" : {
      "ObjectId" : "a8622f3b26edd9306d23f179099a0dac378590b7",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is stolen from part of the CMake build system for OGRE (Object-oriented Graphics Rendering Engine) http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find OpenGLES and EGL\n\n# Once done this will define\n\n#\n\n#  OPENGLES2_FOUND        - system has OpenGLES\n\n#  OPENGLES2_INCLUDE_DIR  - the GL include directory\n\n#  OPENGLES2_LIBRARIES    - Link these to use OpenGLES\n\n#\n\n#  EGL_FOUND        - system has EGL\n\n#  EGL_INCLUDE_DIR  - the EGL include directory\n\n#  EGL_LIBRARIES    - Link these to use EGL\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Win32, Apple, and Android are not tested!\n\n# Linux tested and works\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO\n\n# set(OPENGLES_LIBRARY ${SOURCE_DIR}/Dependencies/lib/release/libGLESv2.lib CACHE STRING \"OpenGL ES 2.x library for win32\"\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# On Unix OpenGL usually requires X11.\n\n# It doesn't require X11 on OSX.\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindSQLite3.cmake" : {
      "ObjectId" : "b23553a807cf7af6634c8b77c4259c8341a67af9",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindVorbis.cmake" : {
      "ObjectId" : "8f381369427ca3d7a211a9d7a525631eee3db76b",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbis\n\n# Find the native vorbis includes and libraries\n\n#\n\n#  VORBIS_INCLUDE_DIR - where to find vorbis.h, etc.\n\n#  OGG_INCLUDE_DIR    - where to find ogg/ogg.h, etc.\n\n#  VORBIS_LIBRARIES   - List of libraries when using vorbis(file).\n\n#  VORBIS_FOUND       - True if vorbis found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# MSVC built ogg/vorbis may be named ogg_static and vorbis_static\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/GenerateVersion.cmake" : {
      "ObjectId" : "ad0e38263be20c6b5d3dbdf5e8b70636834d6e00",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Always run during 'make'\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/gmp/CMakeLists.txt" : {
      "ObjectId" : "884c4d3895ae64dee5e0e368bb17bd80062ab577",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/jsoncpp/CMakeLists.txt" : {
      "ObjectId" : "0531712aecee032b54c2f86545b556c8f911905d",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/lua/CMakeLists.txt" : {
      "ObjectId" : "119dd6302d3e9730a36c514a3af0fb7d985a8830",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use this on Mac OS X 10.3-\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# For \"Mac OS X 10.3-\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# COMMON_CFLAGS has no effect without this line\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard flags to use for each build type.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "lib/lua/src/CMakeLists.txt" : {
      "ObjectId" : "8f6cc1213d6779c2b0dbcd7c09176b30b346a214",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Lua core source files.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lua library.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "45008e337e6692bcd44e14ae4f8af2b2a7f2171e",
      "LastModified" : "2019-04-07T16:45:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add custom SemiDebug build mode\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set some random things default to not being visible in the GUI\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sound libraries\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "##\n\n## Note: FindFreetype.cmake seems to have been fixed in recent versions of\n\n## CMake. If issues persist, re-enable this workaround specificially for the\n\n## failing platforms.\n\n##\n\n#\tif(UNIX)\n\n#\t\tinclude(FindPkgConfig)\n\n#\t\tif(PKG_CONFIG_FOUND)\n\n#\t\t\tpkg_check_modules(FREETYPE QUIET freetype2)\n\n#\t\t\tif(FREETYPE_FOUND)\n\n#\t\t\t\tSET(FREETYPE_PKGCONFIG_FOUND TRUE)\n\n#\t\t\t\tSET(FREETYPE_LIBRARY ${FREETYPE_LIBRARIES})\n\n#\t\t\t\t# Because CMake is idiotic\n\n#\t\t\t\tstring(REPLACE \";\" \" \" FREETYPE_CFLAGS_STR ${FREETYPE_CFLAGS})\n\n#\t\t\t\tstring(REPLACE \";\" \" \" FREETYPE_LDFLAGS_STR ${FREETYPE_LDFLAGS})\n\n#\t\t\tendif(FREETYPE_FOUND)\n\n#\t\tendif(PKG_CONFIG_FOUND)\n\n#\tendif(UNIX)\n\n#\tif(NOT FREETYPE_FOUND)\n\n#\t\tfind_package(Freetype)\n\n#\tendif()\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This variable is case sensitive, don't try to change it to POSTGRESQL_INCLUDE_DIR\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Haiku endian support\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use cmake_config.h\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Windows\n",
        "Line" : 239,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# MSVC Specifics\n",
        "Line" : 240,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Surpress some useless warnings\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get M_PI to work\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Dont define min/max macros in minwindef.h\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Probably MinGW = GCC\n",
        "Line" : 248,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Zlib stuff\n",
        "Line" : 253,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Unix probably\n",
        "Line" : 281,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# This way Xxf86vm is found on OpenBSD too\n",
        "Line" : 319,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Prefer local iconv if installed\n",
        "Line" : 325,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Add a target that always rebuilds cmake_config_githash.h\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This gives us the icon and file version information\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Probably MSVC\n",
        "Line" : 457,
        "CharPositionInLine" : 13
      },
      "20" : {
        "Text" : "# Client sources\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Server sources\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Avoid source_group on broken CMake version.\n\n# see issue #7074 #7075\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Blacklisted locales that don't work.\n\n# see issue #4638\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set some optimizations and tweaks\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Visual Studio\n",
        "Line" : 665,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# EHa enables SEH exceptions (used for catching segfaults)\n",
        "Line" : 667,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"/LTCG /NODEFAULTLIB:\\\"libcmtd.lib\\\" /NODEFAULTLIB:\\\"libcmt.lib\\\"\")\n",
        "Line" : 672,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Debug build doesn't catch exceptions by itself\n\n# Add some optimizations because otherwise it's VERY slow\n",
        "Line" : 681,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Flags for C files (sqlite)\n\n# /MD = dynamically link to MSVCRxxx.dll\n",
        "Line" : 685,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Probably GCC\n",
        "Line" : 690,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# clang does not understand __extern_always_inline but libc headers use it\n",
        "Line" : 701,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Installation\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "src/client/CMakeLists.txt" : {
      "ObjectId" : "140814911f47aa603ad9767fe5e7a7293dc7e24b",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/content/CMakeLists.txt" : {
      "ObjectId" : "5adcf6b1eef7046631e704a557abad15996359d1",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/database/CMakeLists.txt" : {
      "ObjectId" : "e9d157c29baaf309088d858aa4af8f3bde36b5a7",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gui/CMakeLists.txt" : {
      "ObjectId" : "4bc451825f96a6728edbb27cd532c22451b7d3d1",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/irrlicht_changes/CMakeLists.txt" : {
      "ObjectId" : "d2f66ab7779b4dc02eddb8da50cccf329eb2c24f",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake require us to set a local scope and then parent scope\n\n# Else the last set win in parent scope\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/mapgen/CMakeLists.txt" : {
      "ObjectId" : "e74bd85db3d6a2f1ccb3bac1a7b98eaa1495f05d",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/network/CMakeLists.txt" : {
      "ObjectId" : "c6995ab228dc82fb6c8e2434b22de45d72487663",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Haiku networking support\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/script/CMakeLists.txt" : {
      "ObjectId" : "bebe2f037b0fa9825e4d5f5fbf6c2aae431dce67",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Used by server and client\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used by client only\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/script/common/CMakeLists.txt" : {
      "ObjectId" : "d07f6ab1be16be485536d713e7bec37ebed3cbb9",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/script/cpp_api/CMakeLists.txt" : {
      "ObjectId" : "3cfd7709a7018fe46a26e50fe7cf03ff3fc52f2f",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/script/lua_api/CMakeLists.txt" : {
      "ObjectId" : "32f6a2793d0437045fe477e6dfb2d1b149a16b52",
      "LastModified" : "2019-02-26T07:53:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/server/CMakeLists.txt" : {
      "ObjectId" : "e964c69ff9d8e4dc06760a1242b803c155854337",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/threading/CMakeLists.txt" : {
      "ObjectId" : "8f86158be5eb7e210b32a1fff709abe0d746230e",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/unittest/CMakeLists.txt" : {
      "ObjectId" : "82f9a4a139b10f156a24124a62321c6cae10d702",
      "LastModified" : "2019-04-12T16:27:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "bf208693b6effae96aab8a545b6ec1e3b09fd3f3",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "util/buildbot/toolchain_mingw.cmake" : {
      "ObjectId" : "0eeefb84d347647c4da4e8a5541c99d1138593d9",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "util/buildbot/toolchain_mingw64.cmake" : {
      "ObjectId" : "9a7ed82d89fbd52fedd669289bb9b3f291ca92e8",
      "LastModified" : "2019-02-03T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 35,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 5622
}