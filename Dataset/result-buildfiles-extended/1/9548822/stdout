{
  "Repository" : "9548822",
  "Revision" : "HEAD",
  "ObjectId" : "cbd2b6686ddb566028f5830490fe55c0b3a9a4cb",
  "CommitTime" : "2019-01-18T13:59:42Z",
  "Files" : {
    "src/CMakeLists.txt" : {
      "ObjectId" : "ea8a9484780c6503fdd54f9e235d39cf62c972be",
      "LastModified" : "2019-01-18T13:59:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This number is 1 in the release revision, and 0 otherwise.\n",
        "Line" : 9,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# When OFF we disable JSON support to support older compilers\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When cross-compiling, we do not compile the standard library since\n\n# the executable will not work on the host machine\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include MSYS2 required DLLs and binaries in the binary distribution package\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# When ON we include githash in the version string\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# When ON thread storage is automatically finalized, it assumes platform support pthreads.\n\n# This option is important when using Lean as library that is invoked from a different programming language (e.g., Haskell).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# FLAGS for disabling optimizations and debugging\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# library dir\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# emscripten likes to quote \"node\"\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Added for CTest\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Windows does not support ulimit -s unlimited. So, we reserve a lot of stack space: 100Mb\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# See https://github.com/leanprover/lean/issues/930#issuecomment-172555475\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set Module Path\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Initialize CXXFLAGS.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# OSX .dmg generation (this is working in progress)\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set a consistent MACOSX_RPATH default across all CMake versions.\n\n# When CMake 2.8.12 is required, change this default to 1.\n\n# When CMake 3.0.0 is required, remove this block (see CMP0042).\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The following options is needed to generate a shared library\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# SPLIT_STACK\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Test coverage\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Compiler-specific C++11 activation.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# In OSX, clang requires \"-stdlib=libc++\" to support C++11\n",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# All good. Maybe enforce a recent version?\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# FIXME: not working yet\n",
        "Line" : 254,
        "CharPositionInLine" : 19
      },
      "24" : {
        "Text" : "# The plethory of configure arguments only makes sure that gmp thinks sizeof(mp_limb_t) == sizeof(long) == 4\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# GMP\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# DL\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# no dlopen\n",
        "Line" : 308,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# TODO(Jared): config dlopen windows support\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# TRACK_MEMORY_USAGE\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# jemalloc\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# tcmalloc\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Python\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Git HASH\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Version\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# The DLL (shared library) is not being generated correctly when we use cross-compilation (i.e., generate the Windows DLL using Linux).\n\n# For some strange reason, it contains a copy of pthread_equal.\n\n# Remark: this problem does not happen when we generate the DLL using msys2 on Windows.\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# The DLL (shared library) is not being generated correctly when we use cross-compilation (i.e., generate the Windows DLL using Linux).\n\n# For some strange reason, it contains a copy of pthread_equal.\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Include style check\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# OSX default thread stack size is very small. Moreover, in Debug mode, each new stack frame consumes a lot of extra memory.\n\n# See issue #1721\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# TODO(Leo): do not use hardlinks to required DLLs.\n\n# For example, we can try to use ldd to retrieve the list of required DLLs.\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# CPack\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# CPack -- Debian\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "src/CTestConfig.cmake" : {
      "ObjectId" : "7e827c937300bf94aec754db2da73b1aaff3be4e",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify MEMCHECK Option: http://valgrind.org/docs/manual/mc-manual.html\n\n# Note: We use \"--trace-children=yes\" to valgrind-ise child processes (follow execve)\n\n# Note: We turn off \"--show-reachable=yes\" option.\n\n#set(MEMORYCHECK_SUPPRESSIONS_FILE ${CMAKE_SOURCE_DIR}/memcheck.supp)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/api/CMakeLists.txt" : {
      "ObjectId" : "9d40b6456cbcb0481ebbed4b33f3dff3ea8572bb",
      "LastModified" : "2015-09-08T23:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/checker/CMakeLists.txt" : {
      "ObjectId" : "07eabbe296d7937d3fda60b5e5dac738ec74bd9e",
      "LastModified" : "2017-01-31T09:20:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/CleanOlean.cmake" : {
      "ObjectId" : "b6a30bdb94c13a5e7d90564712dc9e4d5a4642b6",
      "LastModified" : "2016-11-29T19:12:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/FindGMP.cmake" : {
      "ObjectId" : "9300547eff589cd093e44069fa3fa53d85dba2be",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#find_library(GMPXX_LIBRARIES NAMES gmpxx libgmpxx )\n\n#MESSAGE(STATUS \"GMP: \" ${GMP_LIBRARIES}) # \" \" ${GMPXX_LIBRARIES} )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/Modules/FindJemalloc.cmake" : {
      "ObjectId" : "03c2774efadab13f2b28b524645bf8bd93899a59",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Print out version number\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "ede882c15ef662ba3423535ca7f2506836f05726",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to FIND_PACKAGE().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call, in this case all the information\n\n# provided by the config-mode of find_package() will be evaluated\n\n# automatically.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    FIND_PACKAGE(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to FIND_PACKAGE(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# version handling:\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# exact version required\n",
        "Line" : 201,
        "CharPositionInLine" : 44
      },
      "14" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 209,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# print the result:\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "src/cmake/Modules/FindTcmalloc.cmake" : {
      "ObjectId" : "3b907485b08c62697fb1a35045d6431af2853733",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Print out version number\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/Modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "c8d27f2e8ce494c96404086ce58982239916a44c",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "src/cmake/Modules/StyleCheck.cmake" : {
      "ObjectId" : "df44bcf17b972fb54ea883f693fb9811b430e022",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 Daniel Scharrer\n\n#\n\n# This software is provided 'as-is', without any express or implied\n\n# warranty.  In no event will the author(s) be held liable for any damages\n\n# arising from the use of this software.\n\n#\n\n# Permission is granted to anyone to use this software for any purpose,\n\n# including commercial applications, and to alter it and redistribute it\n\n# freely, subject to the following restrictions:\n\n#\n\n# 1. The origin of this software must not be misrepresented; you must not\n\n#    claim that you wrote the original software. If you use this software\n\n#    in a product, an acknowledgment in the product documentation would be\n\n#    appreciated but is not required.\n\n# 2. Altered source versions must be plainly marked as such, and must not be\n\n#    misrepresented as being the original software.\n\n# 3. This notice may not be removed or altered from any source distribution.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parameters:\n\n# - TARGET_NAME the name of the target to add\n\n# - SOURCES_LIST a complete list of source and include files to check\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontends/lean/CMakeLists.txt" : {
      "ObjectId" : "55e3194c944da040c6f7f16ae88d5b5042708aba",
      "LastModified" : "2018-04-20T14:10:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/init/CMakeLists.txt" : {
      "ObjectId" : "f8c1052a31e0d17da718285c3ded9cb5ee41d471",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/CMakeLists.txt" : {
      "ObjectId" : "a2fcb02d79489b6207de060b55ace0dc1e0af42a",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/inductive/CMakeLists.txt" : {
      "ObjectId" : "4dbca65d2a843e2622a3aaf6e49ef6b5a6e6f78b",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/quotient/CMakeLists.txt" : {
      "ObjectId" : "d8d4daf577cdf20352d611fd0498906a726fabbc",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/CMakeLists.txt" : {
      "ObjectId" : "25f676babce28f72e42eec48d444e79bef451d63",
      "LastModified" : "2018-04-20T14:10:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/compiler/CMakeLists.txt" : {
      "ObjectId" : "afe5c82a2a1e3b2942e7e4be830396a30b79c56a",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/constructions/CMakeLists.txt" : {
      "ObjectId" : "e3933fe51bb06d6941d180893674ff56a18bce54",
      "LastModified" : "2018-02-21T23:04:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/equations_compiler/CMakeLists.txt" : {
      "ObjectId" : "350be06f930678d7dfd4571306771e8d94e1e054",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/inductive_compiler/CMakeLists.txt" : {
      "ObjectId" : "880312c02f9d4953582b36c7848e92fa6514eae0",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/tactic/CMakeLists.txt" : {
      "ObjectId" : "4f5f14c56289edaa6f4e865e01f081a6b120f363",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/tactic/backward/CMakeLists.txt" : {
      "ObjectId" : "4a3debcd7b6b4119bad6d35bdd35ad20cc5ab2de",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/tactic/smt/CMakeLists.txt" : {
      "ObjectId" : "2403bfdd3e0d2bf9b61b0d263741c67ec333a286",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/vm/CMakeLists.txt" : {
      "ObjectId" : "e63e1c09da3c05d1fa4f19cfa83e1658d5fdc3f3",
      "LastModified" : "2018-02-21T23:04:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shell/CMakeLists.txt" : {
      "ObjectId" : "95db76ea1d446e33c9fae19f15601ed7d778819f",
      "LastModified" : "2018-04-20T14:10:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# legacy code for mkleanbook\n\n# copy olean files from the library into build/emscripten/shell/library/...\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# add_test(example1_stdin1 ${LEAN_SOURCE_DIR}/cmake/redirect.sh ${CMAKE_CURRENT_BINARY_DIR}/lean \"${LEAN_SOURCE_DIR}/../tests/lean/single.lean\")\n\n# add_test(lean_export ${CMAKE_CURRENT_BINARY_DIR}/lean \"-o simple.olean\" \"${LEAN_SOURCE_DIR}/../tests/lean/run/simple.lean\")\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following test needs new elaborator to support match\n\n# add_test(NAME \"lean_eqn_macro\"\n\n#         WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#         COMMAND bash \"./test_eqn_macro.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_test(NAME \"issue_597\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./issue_597.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"issue_616\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./issue_616.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"show_goal\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./show_goal.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"issue_755\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./issue_755.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"print_info\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./print_info.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"dir_option\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND \"${LEAN_SOURCE_DIR}/../bin/lean\" \"--dir=${LEAN_SOURCE_DIR}/../library/data/nat\" \"dir_option.lean\")\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The following test cannot be executed on Windows because of the\n\n# bash script timeout.sh\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We need to cache failures at type_context to be able to process the following test in a reasonable amount of time\n\n# add_test(NAME \"normalizer_perf\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./timeout.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" \"1\" \"slow1.lean\")\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# LEAN TESTS\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# for cmake < 3.7\n",
        "Line" : 130,
        "CharPositionInLine" : 72
      },
      "8" : {
        "Text" : "# LEAN RUN TESTS\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# for cmake < 3.7\n",
        "Line" : 156,
        "CharPositionInLine" : 78
      },
      "10" : {
        "Text" : "# LEAN FAIL TESTS\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for cmake < 3.7\n",
        "Line" : 180,
        "CharPositionInLine" : 80
      },
      "12" : {
        "Text" : "# test twice, once with runner, and once without\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# LEANPKG TESTS\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Remark: when LEAN_VERSION_IS_RELEASE is 1, one the leanpkg tests fail because the output contains extra information\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# LEAN TESTS using --trust=0\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# LEAN TESTS using --trust=10\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# LEAN INTERACTIVE TESTS\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# LEAN SLOW TESTS\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# file(GLOB LEANNATIVETESTS \"${LEAN_SOURCE_DIR}/../tests/lean/native_run/*.lean\")\n\n# FOREACH(T ${LEANNATIVETESTS})\n\n#   GET_FILENAME_COMPONENT(T_NAME ${T} NAME)\n\n#   add_test(NAME \"leannativetest_${T_NAME}\"\n\n#            WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/native_run\"\n\n#            COMMAND bash \"./test_single.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" ${T_NAME})\n\n# ENDFOREACH(T)\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# # LEAN DOCS\n\n# file(GLOB LEANDOCS \"${LEAN_SOURCE_DIR}/../doc/lean/*.org\")\n\n# FOREACH(T ${LEANDOCS})\n\n#   GET_FILENAME_COMPONENT(T_NAME ${T} NAME)\n\n#   add_test(NAME \"leandoc_${T_NAME}\"\n\n#            WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../doc/lean\"\n\n#            COMMAND bash \"./test_single.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" ${T})\n\n# ENDFOREACH(T)\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# # Create the script lean.sh\n\n# # This is used to create a soft dependency on the Lean executable\n\n# # Some rules can only be applied if the lean executable exists,\n\n# # but we don't want a dependency on the executable because\n\n# # the rules would be applied whenever the executable is rebuilt.\n\n# # These are the rules for automatically generating .olean files and\n\n# # C++/Lean interface files.\n\n# add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lean.sh\n\n#     COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/mk_lean_sh.sh ${CMAKE_CURRENT_BINARY_DIR}\n\n#     DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lean)\n\n# add_custom_target(lean_sh DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lean.sh)\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/tests/frontends/lean/CMakeLists.txt" : {
      "ObjectId" : "4904e5084214463a04dd1509b7e433ed1ab49321",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable(lean_parser parser.cpp)\n\n# target_link_libraries(lean_parser ${ALL_LIBS})\n\n# add_exec_test(lean_parser \"lean_parser\")\n\n# # add_executable(lean_pp pp.cpp)\n\n# target_link_libraries(lean_pp ${ALL_LIBS})\n\n# add_exec_test(lean_pp \"lean_pp\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/kernel/CMakeLists.txt" : {
      "ObjectId" : "c034e96cdd53850e51180603fa89ecd8ff4d96b7",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/library/CMakeLists.txt" : {
      "ObjectId" : "40bc3399f7862bc704f314d61cbf9c92f06892a3",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/library/rewriter/CMakeLists.txt" : {
      "ObjectId" : "b017cb38559f39c426422831faf625665f9f8a1d",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/shared/CMakeLists.txt" : {
      "ObjectId" : "46bc4099dc328fd0b581a3b41a0485891781bab5",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable(c_env_test env.c)\n\n# target_link_libraries(c_env_test ${EXTRA_LIBS} leanshared)\n\n# add_test(NAME c_env_test\n\n#          WORKING_DIRECTORY \"${LEAN_BINARY_DIR}\"\n\n#          COMMAND \"${CMAKE_CURRENT_BINARY_DIR}/c_env_test\")\n\n# SET_TESTS_PROPERTIES(c_env_test\n\n#   PROPERTIES ENVIRONMENT \"LEAN_PATH=${LEAN_SOURCE_DIR}/../library\")\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/shell/CMakeLists.txt" : {
      "ObjectId" : "8fca001a688926627be00eb77597877eac80d793",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/util/CMakeLists.txt" : {
      "ObjectId" : "12c15106c17de3ad9faeb90496291c42dd51654f",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/util/interval/CMakeLists.txt" : {
      "ObjectId" : "98441e5df9a98ee99435506c671d89f062d9ae56",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/util/numerics/CMakeLists.txt" : {
      "ObjectId" : "dc97cef461fcd9eb2916558832ca343937737922",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "f5a3e3213905873f3a98399c40ef96af9c709cea",
      "LastModified" : "2018-02-21T23:04:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/numerics/CMakeLists.txt" : {
      "ObjectId" : "1819d63febb4c7ecaa633900a93fce4da9a594f7",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/sexpr/CMakeLists.txt" : {
      "ObjectId" : "c2a1fa07eb587ac73367c67bc12871ca23d8da79",
      "LastModified" : "2018-02-06T18:11:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 38
  },
  "ElapsedTime" : 7634
}