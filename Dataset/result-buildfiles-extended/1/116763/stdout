{
  "Repository" : "116763",
  "Revision" : "HEAD",
  "ObjectId" : "b0ed582e68fe6e474d321934d29b0f229c0feb9f",
  "CommitTime" : "2019-04-15T21:36:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "133a5ddc50ac3b9c2ba8239b4af4f09c1abbc614",
      "LastModified" : "2019-03-10T20:47:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#3.12.0 `find_package()`` uses ``<PackageName>_ROOT`` variables.\n",
        "Line" : 4,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Set the Build type for make based generators.\n\n# You can choose following types:\n\n#   Debug          : Debug build\n\n#   Release        : Release build\n\n#   RelWithDebInfo : Release build with Debug Info\n\n#   MinSizeRel     : Release Min Size build\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set a value type to properly display CMAKE_BUILD_TYPE on GUI if the\n\n# value type is \"UNINITIALIZED\".\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check the Build Type.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On MacOS, prefer MacPorts libraries to system libraries.\n\n# I haven't come up with a compelling argument for this to be conditional.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Enable @rpath in the install name.\n\n# detail in \"cmake  --help-policy CMP0042\"\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Version - read from 'version' file.\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# INTERFACE_VERSION increments with every release\n\n# libarchive 2.7 == interface version 9 = 2 + 7\n\n# libarchive 2.8 == interface version 10 = 2 + 8\n\n# libarchive 2.9 == interface version 11 = 2 + 9\n\n# libarchive 3.0 == interface version 12\n\n# libarchive 3.1 == interface version 13\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set SOVERSION == Interface version\n\n# ?? Should there be more here ??\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Enalbe CMAKE_PUSH_CHECK_STATE() and CMAKE_POP_CHECK_STATE() macros\n\n# saving and restoring the state of the variables.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Initialize the state of the variables. This initialization is not\n\n# necessary but this shows you what value the variables initially have.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Especially for early development, we want to be a little\n\n# aggressive about diagnosing build problems; this can get\n\n# relaxed somewhat in final shipping versions.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#################################################################\n\n# Set compile flags for all build types.\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#################################################################\n\n# Set compile flags for debug build.\n\n# This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#################################################################\n\n# Set compile flags for all build types.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#################################################################\n\n# Set compile flags for debug build.\n\n# This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#################################################################\n\n# Set compile flags for all build types.\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#################################################################\n\n# Set compile flags for debug build.\n\n# This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# /WX option is the same as gcc's -Werror option.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#################################################################\n\n# Set compile flags for debug build.\n\n# This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n\n# Enable level 4 C4061: The enumerate has no associated handler in a switch\n\n#                       statement.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Enable level 4 C4254: A larger bit field was assigned to a smaller bit\n\n#                       field.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Enable level 4 C4295: An array was initialized but the last character in\n\n#                       the array is not a null; accessing the array may\n\n#                       produce unexpected results.\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Enable level 4 C4296: An unsigned variable was used in a comparison\n\n#                       operation with zero.\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Enable level 4 C4389: An operation involved signed and unsigned variables.\n\n#                       This could result in a loss of data.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Enable level 4 C4505: The given function is local and not referenced in\n\n#                       the body of the module; therefore, the function is\n\n#                       dead code.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Enable level 4 C4514: The optimizer removed an inline function that is not\n\n#                       called.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Enable level 4 C4702: Unreachable code.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Enable level 4 C4706: The test value in a conditional expression was the\n\n#                       result of an assignment.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# /Oi option enables built-in functions.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#################################################################\n\n# Set compile flags for release build.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Enable CTest/CDash support\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# CNG is used for encrypt/decrypt Zip archives on Windows.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Default to Windows Server 2003 API if we don't recognize the specifier\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Ask wchar.h for mbstate_t\n",
        "Line" : 286,
        "CharPositionInLine" : 39
      },
      "38" : {
        "Text" : "#\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n# Generate list.h\n\n#\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Remove _listfile and _cmlist from _argv\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#\n\n# Generate installation rules for man pages.\n\n#\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\n\n# Find out what macro is needed to use libraries on Windows.\n\n#\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 342,
        "CharPositionInLine" : 29
      },
      "44" : {
        "Text" : "# Clear ${VAR} from CACHE If the libraries which ${VAR} was\n\n# checked with are changed.\n",
        "Line" : 346,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Check if the library can be used with the macro.\n",
        "Line" : 353,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# Save the libraries which ${VAR} is checked with.\n",
        "Line" : 361,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 365,
        "CharPositionInLine" : 28
      },
      "48" : {
        "Text" : "#\n\n# Check compress/decompress libraries\n\n#\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# GnuWin32 is only for Win32, not Win64.\n",
        "Line" : 372,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# You have to add a path availabel DLL file into PATH environment variable.\n\n# Maybe DLL path is \"C:/Program Files/GnuWin32/bin\".\n\n# The zlib and the bzip2 Setup program have installed programs and DLLs into\n\n# \"C:/Program Files/GnuWin32\" by default.\n\n# This is convenience setting for Windows.\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "#\n\n# If you didn't use Setup program or installed into nonstandard path,\n\n# cmake cannot find out your zlib or bzip2 libraries and include files,\n\n# you should execute cmake with  -DCMAKE_PREFIX_PATH option.\n\n#   e.g.\n\n#     cmake -DCMAKE_PREFIX_PATH=<your-GnuWin32-path> <path-to-source>\n\n#\n\n# If compiling error occurred in zconf.h, You may need patch to zconf.h.\n\n#--- zconf.h.orig\t2005-07-21 00:40:26.000000000\n\n#+++ zconf.h\t2009-01-19 11:39:10.093750000\n\n#@@ -286,7 +286,7 @@\n\n#\n\n# #if 1           /* HAVE_UNISTD_H -- this line is updated by ./configure */\n\n# #  include <sys/types.h> /* for off_t */\n\n#-#  include <unistd.h>    /* for SEEK_* and off_t */\n\n#+#  include <stdio.h>    /* for SEEK_* and off_t */\n\n# #  ifdef VMS\n\n# #    include <unixio.h>   /* for off_t */\n\n# #  endif\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "#\n\n# Find ZLIB\n\n#\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Override cached value\n",
        "Line" : 410,
        "CharPositionInLine" : 24
      },
      "54" : {
        "Text" : "#\n\n# Test if ZLIB_WINAPI macro is needed to use.\n\n#\n",
        "Line" : 418,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 429,
        "CharPositionInLine" : 6
      },
      "56" : {
        "Text" : "#\n\n# Find BZip2\n\n#\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Override cached value\n",
        "Line" : 449,
        "CharPositionInLine" : 25
      },
      "58" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 456,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "#\n\n# Find LZMA\n\n#\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Override cached value\n",
        "Line" : 478,
        "CharPositionInLine" : 27
      },
      "61" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# LZMA not found and will not be used.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#\n\n# Find LZO2\n\n#\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 508,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Override cached value\n",
        "Line" : 517,
        "CharPositionInLine" : 24
      },
      "66" : {
        "Text" : "#\n\n# TODO: test for static library.\n\n#\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#\n\n# Find libb2\n\n#\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 536,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Override cached value\n",
        "Line" : 545,
        "CharPositionInLine" : 25
      },
      "70" : {
        "Text" : "#\n\n# Find LZ4\n\n#\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 563,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Override cached value\n",
        "Line" : 572,
        "CharPositionInLine" : 23
      },
      "73" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 577,
        "CharPositionInLine" : 27
      },
      "74" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 580,
        "CharPositionInLine" : 26
      },
      "75" : {
        "Text" : "#\n\n# TODO: test for static library.\n\n#\n",
        "Line" : 583,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "#\n\n# Find Zstd\n\n#\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 594,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# Override cached value\n",
        "Line" : 603,
        "CharPositionInLine" : 24
      },
      "79" : {
        "Text" : "#\n\n# TODO: test for static library.\n\n#\n",
        "Line" : 612,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "#\n\n# Check headers\n\n#\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Some FreeBSD headers assume sys/types.h was already included.\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Alphabetize the rest unless there's a compelling reason\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Following files need windows.h, so we should test it after windows.h test.\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#\n\n# Check whether use of __EXTENSIONS__ is safe.\n\n# We need some macro such as _GNU_SOURCE to use extension functions.\n\n#\n",
        "Line" : 721,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#\n\n# Find Nettle\n\n#\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#\n\n# Find OpenSSL\n\n# (Except on Mac, where OpenSSL is deprecated.)\n\n#\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Override cached value\n",
        "Line" : 771,
        "CharPositionInLine" : 27
      },
      "88" : {
        "Text" : "# FreeBSD libmd\n",
        "Line" : 774,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 778,
        "CharPositionInLine" : 29
      },
      "90" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 782,
        "CharPositionInLine" : 28
      },
      "91" : {
        "Text" : "#\n\n# How to prove that CRYPTO functions, which have several names on various\n\n# platforms, just see if archive_digest.c can compile and link against\n\n# required libraries.\n\n#\n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Probe the local implementation for whether this\n",
        "Line" : 803,
        "CharPositionInLine" : 8
      },
      "93" : {
        "Text" : "# crypto implementation is available on this platform.\n",
        "Line" : 804,
        "CharPositionInLine" : 1
      },
      "94" : {
        "Text" : "# Inform user whether or not we found it; if not, log why we didn't.\n",
        "Line" : 861,
        "CharPositionInLine" : 1
      },
      "95" : {
        "Text" : "# Add appropriate libs/includes depending on whether the implementation\n\n# was found on this platform.\n",
        "Line" : 874,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "#\n\n# CRYPTO functions on Windows is defined at archive_windows.c, thus we do not\n\n# need the test what the functions can be mapped to archive_{crypto name}_init,\n\n# archive_{crypto name}_update and archive_{crypto name}_final.\n\n# The functions on Windows use CALG_{crypto name} macro to create a crypt object\n\n# and then we need to know what CALG_{crypto name} macros is available to show\n\n# ARCHIVE_CRYPTO_{crypto name}_WIN macros because Windows 2000 and earlier version\n\n# of Windows XP do not support SHA256, SHA384 and SHA512.\n\n#\n",
        "Line" : 887,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "#\n\n# Find iconv\n\n# POSIX defines the second arg as const char **\n\n# and requires it to be in libc.  But we can accept\n\n# a non-const argument here and can support iconv()\n\n# being in libiconv.\n\n#\n",
        "Line" : 967,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 976,
        "CharPositionInLine" : 29
      },
      "99" : {
        "Text" : "#\n\n# During checking iconv proto type, we should use -Werror to avoid the\n\n# success of iconv detection with a warnig which success is a miss\n\n# detection. So this needs for all build mode(even it's a release mode).\n\n#\n",
        "Line" : 979,
        "CharPositionInLine" : 6
      },
      "100" : {
        "Text" : "# NOTE: /WX option is the same as gcc's -Werror option.\n",
        "Line" : 991,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "#\n",
        "Line" : 994,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 1010,
        "CharPositionInLine" : 28
      },
      "103" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 1015,
        "CharPositionInLine" : 27
      },
      "104" : {
        "Text" : "#SET(INCLUDES ${INCLUDES} \"iconv.h\")\n",
        "Line" : 1018,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# If iconv isn't in libc and we have a libiconv, try that.\n",
        "Line" : 1025,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 1029,
        "CharPositionInLine" : 6
      },
      "107" : {
        "Text" : "#\n\n# Set up CMAKE_REQUIRED_* for CHECK_ICONV\n\n#\n",
        "Line" : 1038,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "# LIBICONV_STATIC is necessary for the success of CHECK_ICONV\n\n# on Windows.\n",
        "Line" : 1044,
        "CharPositionInLine" : 8
      },
      "109" : {
        "Text" : "#\n\n# Find locale_charset() for libiconv.\n\n#\n",
        "Line" : 1057,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 1069,
        "CharPositionInLine" : 8
      },
      "111" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 1090,
        "CharPositionInLine" : 26
      },
      "112" : {
        "Text" : "# Make sure ICONV variables are not in CACHE after ENABLE_ICONV disabled\n\n# (once enabled).\n",
        "Line" : 1092,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "#\n\n# Find Libxml2\n\n#\n",
        "Line" : 1108,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 1117,
        "CharPositionInLine" : 27
      },
      "115" : {
        "Text" : "# libxml2's include files use iconv.h\n",
        "Line" : 1121,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 1125,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 1135,
        "CharPositionInLine" : 26
      },
      "118" : {
        "Text" : "#\n\n# Find Expat\n\n#\n",
        "Line" : 1137,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 1146,
        "CharPositionInLine" : 29
      },
      "120" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 1151,
        "CharPositionInLine" : 28
      },
      "121" : {
        "Text" : "#\n\n# POSIX Regular Expression support\n\n#\n",
        "Line" : 1157,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "#\n\n# If PCREPOSIX is not found or not requested, try using regex\n\n# from libc or libregex\n\n#\n",
        "Line" : 1161,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "#\n\n# If libc does not provide regex, find libregex.\n\n#\n",
        "Line" : 1168,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 1172,
        "CharPositionInLine" : 31
      },
      "125" : {
        "Text" : "#\n\n# If regex.h is not found, retry looking for regex.h at\n\n# REGEX_INCLUDE_DIR\n\n#\n",
        "Line" : 1179,
        "CharPositionInLine" : 10
      },
      "126" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 1189,
        "CharPositionInLine" : 10
      },
      "127" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 1202,
        "CharPositionInLine" : 30
      },
      "128" : {
        "Text" : "#\n\n# If requested, try finding library for PCREPOSIX\n\n#\n",
        "Line" : 1211,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# Override cached value\n",
        "Line" : 1217,
        "CharPositionInLine" : 28
      },
      "130" : {
        "Text" : "# Override cached value\n",
        "Line" : 1222,
        "CharPositionInLine" : 31
      },
      "131" : {
        "Text" : "# Test if a macro is needed for the library.\n",
        "Line" : 1227,
        "CharPositionInLine" : 4
      },
      "132" : {
        "Text" : "# Determine if pcre static libraries are to be used.\n",
        "Line" : 1236,
        "CharPositionInLine" : 3
      },
      "133" : {
        "Text" : "# When doing a Visual Studio build using pcre static libraries\n\n# built using the mingw toolchain, -lgcc is needed to resolve\n\n# ___chkstk_ms.\n",
        "Line" : 1248,
        "CharPositionInLine" : 8
      },
      "134" : {
        "Text" : "#\n\n# Check functions\n\n#\n",
        "Line" : 1271,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "# Save the state of the variables\n",
        "Line" : 1274,
        "CharPositionInLine" : 25
      },
      "136" : {
        "Text" : "#\n\n# During checking functions, we should use -fno-builtin to avoid the\n\n# failure of function detection which failure is an error \"conflicting\n\n# types for built-in function\" caused by using -Werror option.\n\n#\n",
        "Line" : 1277,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# Restore the state of the variables\n",
        "Line" : 1374,
        "CharPositionInLine" : 24
      },
      "138" : {
        "Text" : "# Make sure we have the POSIX version of readdir_r, not the\n\n# older 2-argument version.\n",
        "Line" : 1384,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "# dirfd can be either a function or a macro.\n",
        "Line" : 1390,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "# Only detect readlinkat() if we also have AT_FDCWD in unistd.h.\n\n# NOTE: linux requires fcntl.h for AT_FDCWD.\n",
        "Line" : 1395,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "# To verify major(), we need to both include the header\n\n# of interest and verify that the result can be linked.\n\n# CHECK_FUNCTION_EXISTS doesn't accept a header argument,\n\n# CHECK_SYMBOL_EXISTS doesn't test linkage.\n",
        "Line" : 1402,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "#\n\n# Check defines\n\n#\n",
        "Line" : 1421,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "#\n\n# Check struct members\n\n#\n\n# Check for tm_gmtoff in struct tm\n",
        "Line" : 1446,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "# Check for f_namemax in struct statfs\n",
        "Line" : 1455,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "# Check for birthtime in struct stat\n",
        "Line" : 1459,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "# Check for high-resolution timestamps in struct stat\n",
        "Line" : 1463,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "# Check for block size support in struct stat\n",
        "Line" : 1476,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "# Check for st_flags in struct stat (BSD fflags)\n",
        "Line" : 1479,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "#\n\n#\n",
        "Line" : 1488,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "#\n\n# Check for integer types\n\n#\n\n#\n",
        "Line" : 1493,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "#\n",
        "Line" : 1526,
        "CharPositionInLine" : 0
      },
      "152" : {
        "Text" : "#\n",
        "Line" : 1535,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "#\n",
        "Line" : 1544,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "#\n",
        "Line" : 1553,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "#\n",
        "Line" : 1558,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "#\n",
        "Line" : 1567,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "#\n",
        "Line" : 1576,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "#\n",
        "Line" : 1585,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "#\n",
        "Line" : 1594,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "#\n",
        "Line" : 1603,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "#\n",
        "Line" : 1612,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "#\n\n# Check if _FILE_OFFSET_BITS macro needed for large files\n\n#\n",
        "Line" : 1617,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "#\n\n# Check for Extended Attribute libraries, headers, and functions\n\n#\n",
        "Line" : 1622,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# FreeBSD xattr support\n",
        "Line" : 1653,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# Linux xattr support\n",
        "Line" : 1673,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# AIX xattr support\n",
        "Line" : 1693,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "#\n\n# Check for ACL libraries, headers, and functions\n\n#\n\n# The ACL support in libarchive is written against the POSIX1e draft,\n\n# which was never officially approved and varies quite a bit across\n\n# platforms.  Worse, some systems have completely non-POSIX acl functions,\n\n# which makes the following checks rather more complex than I would like.\n\n#\n",
        "Line" : 1732,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "# Solaris and derivates ACLs\n",
        "Line" : 1741,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# Libacl\n",
        "Line" : 1745,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# Richacl\n",
        "Line" : 1884,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# If someone runs cmake, then disables ACL support, we need\n\n# to forcibly override the cached values for these.\n",
        "Line" : 1939,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "#\n\n# Check MD5/RMD160/SHA support\n\n# NOTE: Crypto checks must be run last before generating config.h\n\n#\n",
        "Line" : 1949,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "# Libmd has to be probed after OpenSSL.\n",
        "Line" : 1960,
        "CharPositionInLine" : 0
      },
      "174" : {
        "Text" : "# Generate \"config.h\" from \"build/cmake/config.h.in\"\n",
        "Line" : 1965,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "# Handle generation of the libarchive.pc file for pkg-config\n",
        "Line" : 1971,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "#\n\n# Register installation of PDF documents.\n\n#\n",
        "Line" : 1974,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "#\n\n# On Windows platform, It's better that we install PDF documents\n\n# on one's computer.\n\n# These PDF documents are available in the release package.\n\n#\n",
        "Line" : 1978,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 1990,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "#\n",
        "Line" : 1994,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 180
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "7a09742db098881d5393532dae557405a51f9e87",
      "LastModified" : "2009-11-07T23:08:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: This file should be moved into the build/cmake directory...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The libarchive CDash page appears at\n\n#   http://my.cdash.org/index.php?project=libarchive\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Makefile.am" : {
      "ObjectId" : "639936a64082998cb53417fca15982ac760ee3ef",
      "LastModified" : "2019-04-15T21:36:06Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# What to build and install\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# What to test: We always test libarchive, test bsdtar and bsdcpio only\n\n# if we built them.\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Always build and test both bsdtar and bsdcpio as part of 'distcheck'\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The next line is commented out by default in shipping libarchive releases.\n\n# It is uncommented by default in trunk.\n\n# DEV_CFLAGS=-Werror -Wextra -Wunused -Wshadow -Wmissing-prototypes -Wcast-qual -g\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# What to include in the distribution\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# a) Clean out some unneeded files and directories\n\n# b) Collect all documentation and format it for distribution.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Extra rules for cleanup\n\n#\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Libarchive headers, source, etc.\n\n#\n\n#\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# -no-undefined marks that libarchive doesn't rely on symbols\n\n# defined in the application.  This is mandatory for cygwin.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Manpages to install\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Additional libarchive files to include in the distribution\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# pkgconfig\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Sources needed by all test programs\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n#\n\n# libarchive_test program\n\n#\n\n#\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The \"list.h\" file just lists all of the tests defined in all of the sources.\n\n# Building it automatically provides a sanity-check on libarchive_test_SOURCES\n\n# above.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Common code for libarchive frontends (cpio, tar)\n\n#\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n#\n\n# bsdtar source, docs, etc.\n\n#\n\n#\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# bsdtar_test\n\n#\n",
        "Line" : 960,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n#\n\n# bsdcpio source, docs, etc.\n\n#\n\n#\n",
        "Line" : 1075,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Manpages to install\n",
        "Line" : 1117,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# bsdcpio_test\n\n#\n",
        "Line" : 1125,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n#\n\n# bsdcat source, docs, etc.\n\n#\n\n#\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Manpages to install\n",
        "Line" : 1268,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# bsdcat_test\n\n#\n",
        "Line" : 1276,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "build/cmake/CheckFileOffsetBits.cmake" : {
      "ObjectId" : "b347c9366e4ad50bdcb541bb68fba4ec0335b1ca",
      "LastModified" : "2012-01-11T13:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if _FILE_OFFSET_BITS macro needed for large files\n\n# CHECK_FILE_OFFSET_BITS ()\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Michihiro NAKAJIMA\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INCLUDE(CheckCXXSourceCompiles)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "build/cmake/CheckFuncs.cmake" : {
      "ObjectId" : "0670df97f869038db01860ec6f6be485f685b33d",
      "LastModified" : "2009-12-13T23:30:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the system has the specified function; treat glibc \"stub\"\n\n# functions as nonexistent:\n\n# CHECK_FUNCTION_EXISTS_GLIBC (FUNCTION FUNCVAR)\n\n#\n\n#  FUNCTION - the function(s) where the prototype should be declared\n\n#  FUNCVAR - variable to define if the function does exist\n\n#\n\n# In particular, this understands the glibc convention of\n\n# defining macros __stub_XXXX or __stub___XXXX if the function\n\n# does appear in the library but is merely a stub that does nothing.\n\n# By detecting this case, we can select alternate behavior on\n\n# platforms that don't support this functionality.\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Michihiro NAKAJIMA\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/CheckHeaderDirent.cmake" : {
      "ObjectId" : "e9a7ea85532687d06f34f25381520999d495de56",
      "LastModified" : "2009-11-07T23:08:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the system has the specified type\n\n# CHECK_HEADER_DIRENT (HEADER1 HEARDER2 ...)\n\n#\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Michihiro NAKAJIMA\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/CheckTypeExists.cmake" : {
      "ObjectId" : "b05234fd8753b81406927d4e3e9138e8a7121f16",
      "LastModified" : "2009-11-07T23:08:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the system has the specified type\n\n# CHECK_TYPE_EXISTS (TYPE HEADER VARIABLE)\n\n#\n\n#  TYPE - the name of the type or struct or class you are interested in\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Michihiro NAKAJIMA\n\n# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/CreatePkgConfigFile.cmake" : {
      "ObjectId" : "fc8529a571f2833310199d6f8cbb0a48022c04b7",
      "LastModified" : "2015-03-05T04:43:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Generate a libarchive.pc like autotools for pkg-config\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the required variables (we use the same input file as autotools)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Now, this is not particularly pretty, nor is it terribly accurate...\n\n# Loop over all our additional libs\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Extract the filename from the absolute path\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Strip the lib prefix\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Append it to our LIBS string\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# libxml2 is easier, since it's already using pkg-config\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FIXME: The order of the libraries doesn't take dependencies into account,\n\n#\t thus there's a good chance it'll make some binutils versions unhappy...\n\n#\t This only affects Libs.private (looked up for static builds) though.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# And install it, of course ;).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "build/cmake/FindLibGCC.cmake" : {
      "ObjectId" : "5883ff80264203576ddebc57ffcf1247cbac660c",
      "LastModified" : "2013-09-04T03:27:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libgcc\r\n\n# Find the libgcc library.\r\n\n#\r\n\n#  LIBGCC_LIBRARIES      - List of libraries when using libgcc\r\n\n#  LIBGCC_FOUND          - True if libgcc found.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBGCC_FOUND to TRUE if \r\n\n# all listed variables are TRUE\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "build/cmake/FindNettle.cmake" : {
      "ObjectId" : "54ec9f5d39b55c4a33c879ded5b704662bd481fd",
      "LastModified" : "2013-09-04T03:27:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Nettle\r\n\n# Find the Nettle include directory and library\r\n\n#\r\n\n#  NETTLE_INCLUDE_DIR    - where to find <nettle/sha.h>, etc.\r\n\n#  NETTLE_LIBRARIES      - List of libraries when using libnettle.\r\n\n#  NETTLE_FOUND          - True if libnettle found.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NETTLE_FOUND to TRUE if \r\n\n# all listed variables are TRUE\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "build/cmake/FindPCREPOSIX.cmake" : {
      "ObjectId" : "56cc17eacb47c691f98342a9a1fab6336d752fb7",
      "LastModified" : "2013-09-04T03:27:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find pcreposix\r\n\n# Find the native PCRE and PCREPOSIX include and libraries\r\n\n#\r\n\n#  PCRE_INCLUDE_DIR    - where to find pcreposix.h, etc.\r\n\n#  PCREPOSIX_LIBRARIES - List of libraries when using libpcreposix.\r\n\n#  PCRE_LIBRARIES      - List of libraries when using libpcre.\r\n\n#  PCREPOSIX_FOUND     - True if libpcreposix found.\r\n\n#  PCRE_FOUND          - True if libpcre found.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PCREPOSIX_FOUND to TRUE if \r\n\n# all listed variables are TRUE\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "build/cmake/LibarchiveCodeCoverage.cmake" : {
      "ObjectId" : "297b886ccf055bfb0bd38948fda1f0f27a834482",
      "LastModified" : "2013-12-20T04:14:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#################################################################\n\n# Adds a build target called \"coverage\" for code coverage.\n\n#\n\n# This compiles the code using special GCC flags, run the tests,\n\n# and then generates a nice HTML output. This new \"coverage\" make\n\n# target will only be available if you build using GCC in Debug\n\n# mode. If any of the required programs (lcov and genhtml) were\n\n# not found, a FATAL_ERROR message is printed.\n\n#\n\n# If not already done, this code will set ENABLE_TEST to ON.\n\n#\n\n# To build the code coverage and open it in your browser do this:\n\n#\n\n#    mkdir debug\n\n#    cd debug\n\n#    cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON ..\n\n#    make -j4\n\n#    make coverage\n\n#    xdg-open coverage/index.html\n\n#################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find programs we need \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check, compiler, build types and programs are available\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enable testing if not already done\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#################################################################\n\n# Set special compiler and linker flags for test coverage\n\n#################################################################\n\n# 0. Enable debug: -g\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# 1. Disable optimizations: -O0\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 2. Enable all kind of warnings:\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 3. Enable special coverage flag (HINT: --coverage is a synonym for -fprofile-arcs -ftest-coverage)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#################################################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cat/CMakeLists.txt" : {
      "ObjectId" : "4fe6354b3131e98be25a01386a094a01f7a8b4ec",
      "LastModified" : "2015-03-05T04:43:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build bsdcat\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bsdcat documentation\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# How to build bsdcat\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Installation rules\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cat/test/CMakeLists.txt" : {
      "ObjectId" : "72f4a1037f89941919358dcbfb8247405a4df363",
      "LastModified" : "2017-10-07T00:33:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build bsdtar_test\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Register target\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# Generate list.h by grepping DEFINE_TEST() lines out of the C sources.\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# list.h has a line DEFINE_TEST(testname) for every\n\n# test.  We can use that to define the tests for cmake by\n\n# defining a DEFINE_TEST macro and reading list.h in.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Experimental new test handling\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "contrib/shar/Makefile" : {
      "ObjectId" : "3bd94d4192cb56445c453236252f88c7c91efb57",
      "LastModified" : "2015-03-05T04:43:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $FreeBSD$\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpio/CMakeLists.txt" : {
      "ObjectId" : "85fda7782800c5c5bc226427f5608d25e0228b2d",
      "LastModified" : "2015-03-05T04:43:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build bsdcpio\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bsdcpio documentation\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# How to build bsdcpio\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Installation rules\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Test suite\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cpio/test/CMakeLists.txt" : {
      "ObjectId" : "d0927a81e8a823c27eabc718b70ec669864c5738",
      "LastModified" : "2017-08-13T06:05:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build bsdcpio_test\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Register target\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# Generate list.h by grepping DEFINE_TEST() lines out of the C sources.\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# list.h has a line DEFINE_TEST(testname) for every\n\n# test.  We can use that to define the tests for cmake by\n\n# defining a DEFINE_TEST macro and reading list.h in.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Experimental new test handling\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "examples/minitar/Makefile" : {
      "ObjectId" : "e2cc0899fbbabc3baf9f2dd2e01cf61b8c807eca",
      "LastModified" : "2016-04-28T06:20:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Adjust the following to control which options minitar gets\n\n# built with.  See comments in minitar.c for details.\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# You may need to add additional libraries or link options here\n\n# For example, many Linux systems require -lacl\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# How to link against libarchive.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libarchive/CMakeLists.txt" : {
      "ObjectId" : "ec775bb49939e67523f95bfdff7ebcd6739488fd",
      "LastModified" : "2019-04-15T21:36:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build libarchive\n\n#\n\n############################################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Public headers\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sources and private headers\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Man pages\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Libarchive is a shared library\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# archive_static is a static library\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On Posix systems, libarchive.so and libarchive.a can co-exist.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# How to install the libraries\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "libarchive/test/CMakeLists.txt" : {
      "ObjectId" : "690a83c5cd60c2d20bd0ce8b8cad8ed412051d79",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build libarchive_test\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Register target\n\n#\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# Generate list.h by grepping DEFINE_TEST() lines out of the C sources.\n\n#\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# list.h has a line DEFINE_TEST(testname) for every\n\n# test.  We can use that to define the tests for cmake by\n\n# defining a DEFINE_TEST macro and reading list.h in.\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Experimental new test handling\n",
        "Line" : 312,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "tar/CMakeLists.txt" : {
      "ObjectId" : "6434791f788f58e6a18d4efcba727fbe68a11801",
      "LastModified" : "2015-03-05T04:43:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build bsdtar\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bsdtar documentation\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# How to build bsdtar\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Installation rules\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tar/test/CMakeLists.txt" : {
      "ObjectId" : "459d9dcb1eff210b0baeae9c9f26eb145eb99aa5",
      "LastModified" : "2019-04-13T22:04:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################\n\n#\n\n# How to build bsdtar_test\n\n#\n\n############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Register target\n\n#\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# Generate list.h by grepping DEFINE_TEST() lines out of the C sources.\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# list.h has a line DEFINE_TEST(testname) for every\n\n# test.  We can use that to define the tests for cmake by\n\n# defining a DEFINE_TEST macro and reading list.h in.\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Experimental new test handling\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 19,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 3007
}