{
  "Repository" : "18056655",
  "Revision" : "HEAD",
  "ObjectId" : "e921a499872c8fea4c23ee51d63f5358a75de81d",
  "CommitTime" : "2018-09-25T20:51:19Z",
  "Files" : {
    "doc/latex/Makefile" : {
      "ObjectId" : "8cc3866f4a039e77b793bd33774ce84e52a9ae16",
      "LastModified" : "2015-04-10T00:37:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile" : {
      "ObjectId" : "f1e4d3ed48320acd9bd4a4a80c35db7eb37740fa",
      "LastModified" : "2018-09-14T02:02:48Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#CC = clang++\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags:\n\n#  -DNO_ODE compiles without boost/ode package used for flow equation solver\n\n#  -DNO_HDF5 compiles without boost/ode package used for flow equation solver\n\n#  -DOPENBLAS_NOUSEOMP=1 removes parallel blocks which take threads away from OPENBLAS\n\n#                        to be used if OpenBlas was compiled without the USE_OMP flag\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# I assume we're running on linux\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# But in case we're crazy enough to run on MacOS, might as well check...\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tag the build with the current version from git, so we know where all the awesome answers came from.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#PYTHONFLAGS = -I/usr/include/python2.7 -lboost_python #-lpython \n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  FLAGS     = -Xpreprocessor -fopenmp -O3 -march=native -std=c++11 -fPIC \n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# By default, don't bother building with HDF5, since it's not used very often and can make building a pain\n",
        "Line" : 60,
        "CharPositionInLine" : 22
      },
      "8" : {
        "Text" : "# specific options for jureca cluster\n",
        "Line" : 65,
        "CharPositionInLine" : 25
      },
      "9" : {
        "Text" : "# FLAGS += -DOPENBLAS_NOUSEOMP=1\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# specific options for cougar cluster\n",
        "Line" : 74,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "# PYTHONFLAGS = -I/opt/anaconda/include/python2.7 -L/opt/boost/1.58.0/lib -lboost_python #-lpython \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# default options. assumes boost and python are set up nicely.\n",
        "Line" : 88,
        "CharPositionInLine" : 25
      },
      "13" : {
        "Text" : "#  FLAGS += -DOLD_BOOST\n\n#  FLAGS += -DOPENBLAS_NOUSEOMP=1\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The new version of Ubuntu puts the hdf5 libraries in a different location\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\t$(CC) -c $^ -o $@ $(INCLUDE) $(LIBS) $(FLAGS) \n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\t$(CC) -c $^ -o $@ $(INCLUDE) $(LIBS) $(FLAGS) \n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\t$(CC) -c $*.cc -o $@ $(INCLUDE) $(LIBS) $(FLAGS) \n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t$(CC) -c  $(FLAGS) $(INCLUDE) $(PYTHONFLAGS) $(LIBS)  $^ -o $@\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "src/armadillo/armadillo_bits/config.hpp.cmake" : {
      "ObjectId" : "8a456f8a12487e57114cf7965bedd1f25b9664cb",
      "LastModified" : "2017-03-13T21:26:57Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "// Copyright 2008-2016 Conrad Sanderson (http://conradsanderson.id.au)\n// Copyright 2008-2016 National ICT Australia (NICTA)\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ------------------------------------------------------------------------",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "//// Comment out the above line if you don't have LAPACK or a high-speed replacement for LAPACK,\n//// such as Intel MKL, AMD ACML, or the Accelerate framework.\n//// LAPACK is required for matrix decompositions (eg. SVD) and matrix inverse.",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "//// Comment out the above line if you don't have BLAS or a high-speed replacement for BLAS,\n//// such as OpenBLAS, GotoBLAS, Intel MKL, AMD ACML, or the Accelerate framework.\n//// BLAS is used for matrix multiplication.\n//// Without BLAS, matrix multiplication will still work, but might be slower.",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "//// Uncomment the above line to enable the built-in partial emulation of ARPACK.\n//// This is used for eigen decompositions of real (non-complex) sparse matrices, eg. eigs_sym(), svds() ",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "//// Uncomment the above line if you have ARPACK or a high-speed replacement for ARPACK.\n//// ARPACK is required for eigen decompositions of complex sparse matrices",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "//// Uncomment the above line if you have SuperLU.\n//// SuperLU is used for solving sparse linear systems via spsolve()\n//// Caveat: only SuperLU version 5.2 can be used!",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "//// If you're using SuperLU and want to explicitly include the SuperLU headers,\n//// uncomment the above define and specify the appropriate include directory.\n//// Make sure the directory has a trailing /",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "//// Comment out the above line if you're getting linking errors when compiling your programs,\n//// or if you prefer to directly link with LAPACK, BLAS + etc instead of the Armadillo runtime library.\n//// You will then need to link your programs directly with -llapack -lblas instead of -larmadillo",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "// #define ARMA_BLAS_CAPITALS\n//// Uncomment the above line if your BLAS and LAPACK libraries have capitalised function names (eg. ACML on 64-bit Windows)",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "//// Uncomment the above line if your BLAS and LAPACK libraries have function names with a trailing underscore.\n//// Conversely, comment it out if the function names don't have a trailing underscore.",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "// #define ARMA_BLAS_LONG\n//// Uncomment the above line if your BLAS and LAPACK libraries use \"long\" instead of \"int\"",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "// #define ARMA_BLAS_LONG_LONG\n//// Uncomment the above line if your BLAS and LAPACK libraries use \"long long\" instead of \"int\"",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "// #define ARMA_USE_TBB_ALLOC\n//// Uncomment the above line if you want to use Intel TBB scalable_malloc() and scalable_free() instead of standard malloc() and free()",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "// #define ARMA_USE_MKL_ALLOC\n//// Uncomment the above line if you want to use Intel MKL mkl_malloc() and mkl_free() instead of standard malloc() and free()",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "//// If you're using ATLAS and the compiler can't find cblas.h and/or clapack.h\n//// uncomment the above define and specify the appropriate include directory.\n//// Make sure the directory has a trailing /",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "// #define ARMA_USE_CXX11\n//// Uncomment the above line to forcefully enable use of C++11 features (eg. initialiser lists).\n//// Note that ARMA_USE_CXX11 is automatically enabled when a C++11 compiler is detected",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "// #define ARMA_64BIT_WORD\n//// Uncomment the above line if you require matrices/vectors capable of holding more than 4 billion elements.\n//// Your machine and compiler must have support for 64 bit integers (eg. via \"long\" or \"long long\")\n//// Note that ARMA_64BIT_WORD is automatically enabled when a C++11 compiler is detected",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "// #define ARMA_USE_HDF5\n//// Uncomment the above line to allow the ability to save and load matrices stored in HDF5 format;\n//// the hdf5.h header file must be available on your system,\n//// and you will need to link with the hdf5 library (eg. -lhdf5)",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "//// This is the number of preallocated elements used by matrices and vectors;\n//// it must be an integer that is at least 1.\n//// If you mainly use lots of very small vectors (eg. <= 4 elements),\n//// change the number to the size of your vectors.",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "//// This is the minimum increase in the amount of memory (in terms of elements) allocated by a sparse matrix;\n//// it must be an integer that is at least 1.\n//// The minimum recommended size is 16.",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "// #define ARMA_NO_DEBUG\n//// Uncomment the above line if you want to disable all run-time checks.\n//// This will result in faster code, but you first need to make sure that your code runs correctly!\n//// We strongly recommend to have the run-time checks enabled during development,\n//// as this greatly aids in finding mistakes in your code, and hence speeds up development.\n//// We recommend that run-time checks be disabled _only_ for the shipped version of your program.",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "// #define ARMA_EXTRA_DEBUG\n//// Uncomment the above line if you want to see the function traces of how Armadillo evaluates expressions.\n//// This is mainly useful for debugging of the library.",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "//// Comment out the above line if you don't want errors and warnings printed (eg. failed decompositions)",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "// #define ARMA_PRINT_HDF5_ERRORS",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "// if Armadillo was installed on this system via CMake and ARMA_USE_WRAPPER is not defined,\n// ARMA_AUX_LIBS lists the libraries required by Armadillo on this system, and\n// ARMA_AUX_INCDIRS lists the include directories required by Armadillo on this system.\n// Do not use these unless you know what you are doing.",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "src/pybind11/CMakeLists.txt" : {
      "ObjectId" : "2179e3aa962711622681a4837ffa97ba1121fa27",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt -- Build system for the pybind11 modules\n\n#\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n\n#\n\n# All rights reserved. Use of this source code is governed by a\n\n# BSD-style license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmake warns if loaded from a min-3.0-required parent dir, so silence the warning:\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check if pybind11 is being used directly or via add_subdirectory\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Cache variables so pybind11_add_module can be used in parent projects\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NB: when adding a header don't forget to also add it to setup.py\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract project version from source\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake >= 3.0\n",
        "Line" : 86,
        "CharPositionInLine" : 42
      },
      "7" : {
        "Text" : "# Build an interface library target:\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# to match exported target\n",
        "Line" : 89,
        "CharPositionInLine" : 50
      },
      "9" : {
        "Text" : "# GNUInstallDirs \"DATADIR\" wrong here; CMake search path wants \"share\".\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove CMAKE_SIZEOF_VOID_P from ConfigVersion.cmake since the library does\n\n# not depend on architecture specific settings or libraries.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "src/pybind11/docs/Makefile" : {
      "ObjectId" : "511b47c2d5434ced54ed49ac35d33df80afc684a",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/pybind11/tests/CMakeLists.txt" : {
      "ObjectId" : "945753f0e7a318e5ebce84bc749669dc06cfa15c",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt -- Build system for the pybind11 test suite\n\n#\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n\n#\n\n# All rights reserved. Use of this source code is governed by a\n\n# BSD-style license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We're being loaded directly, i.e. not via add_subdirectory, so make this\n\n# work as its own project and load the pybind11Config to get the tools we need\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Full set of test files (you can override these; see below)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Invoking cmake with something like:\n\n#     cmake -DPYBIND11_TEST_OVERRIDE=\"test_callbacks.cpp;test_picking.cpp\" ..\n\n# lets you override the tests that get compiled and run.  You can restore to all tests with:\n\n#     cmake -DPYBIND11_TEST_OVERRIDE= ..\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check if Eigen is available; if not, remove from PYBIND11_TEST_FILES (but\n\n# keep it in PYBIND11_PYTEST_FILES, so that we get the \"eigen is not installed\"\n\n# skip message).\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Try loading via newer Eigen's Eigen3Config first (bypassing tools/FindEigen3.cmake).\n\n# Eigen 3.3.1+ exports a cmake 3.0+ target for handling dependency requirements, but also\n\n# produces a fatal error if loaded from a pre-3.0 cmake.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Couldn't load via target, so fall back to allowing module mode finding, which will pick up\n\n# tools/FindEigen3.cmake\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Eigen 3.3.1+ cmake sets EIGEN3_VERSION_STRING (and hard codes the version when installed\n\n# rather than looking it up in the cmake script); older versions, and the\n\n# tools/FindEigen3.cmake, set EIGEN3_VERSION instead.\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Compile with compiler warnings turned on\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create the binding library\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Always write the output file directly into the 'tests' directory (even on MSVC)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Make sure pytest is found or produce a fatal error\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# A single command to compile and run the tests\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add a check target to run all the tests, starting with pytest (we add dependencies to this below)\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The remaining tests only apply when being built as part of the pybind11 project, but not if the\n\n# tests are being built independently.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add a post-build comment to show the .so size and, if a previous size, compare it:\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Test embedding the interpreter. Provides the `cpptest` target.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Test CMake build using functions and targets from subdirectory or installed location\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/pybind11/tests/test_cmake_build/CMakeLists.txt" : {
      "ObjectId" : "c9b5fcb2e72ab3cb87eff93e8a7ac3dd7f67000c",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 3.0 needed for interface library for subdirectory_target/installed_target\n\n# 3.1 needed for cmake -E env for testing\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/pybind11/tests/test_cmake_build/installed_embed/CMakeLists.txt" : {
      "ObjectId" : "f7fc09c2191b45564091443f5e1b7069896738cb",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do not treat includes from IMPORTED target as SYSTEM (Python headers in pybind11::embed).\n\n# This may be needed to resolve header conflicts, e.g. between Python release and debug headers.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/pybind11/tests/test_cmake_build/installed_function/CMakeLists.txt" : {
      "ObjectId" : "e0c20a8a3634ea7e33859c5009ba2c9edd1b011a",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pybind11/tests/test_cmake_build/installed_target/CMakeLists.txt" : {
      "ObjectId" : "cd3ae6f7d84ccb6b7cf9ff58c71cd37a90d6710a",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make sure result is, for example, test_installed_target.so, not libtest_installed_target.dylib\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not treat includes from IMPORTED target as SYSTEM (Python headers in pybind11::module).\n\n# This may be needed to resolve header conflicts, e.g. between Python release and debug headers.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/pybind11/tests/test_cmake_build/subdirectory_embed/CMakeLists.txt" : {
      "ObjectId" : "7b3babbcb7cf4b4f0847b47ccf81007a08e6fbe1",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pybind11/tests/test_cmake_build/subdirectory_function/CMakeLists.txt" : {
      "ObjectId" : "278007aebd1c130cce62772decb6a19cd77e3fbb",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pybind11/tests/test_cmake_build/subdirectory_target/CMakeLists.txt" : {
      "ObjectId" : "6b142d62a931a3636e4074a6d39be5a0e7052689",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make sure result is, for example, test_installed_target.so, not libtest_installed_target.dylib\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/pybind11/tests/test_embed/CMakeLists.txt" : {
      "ObjectId" : "0a43e0e22eb425e85fc8c06826beb3b28b4ca346",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dummy target on PyPy. Embedding is not supported.\n",
        "Line" : 2,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 1
    },
    "src/pybind11/tools/FindCatch.cmake" : {
      "ObjectId" : "9d490c5aade2151ebdd8cc84509361ba1c061f84",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Catch test framework or download it (single header)\n\n#\n\n# This is a quick module for internal use. It assumes that Catch is\n\n# REQUIRED and that a minimum version is provided (not EXACT). If\n\n# a suitable version isn't found locally, the single header file\n\n# will be downloaded and placed in the build dir: PROJECT_BINARY_DIR.\n\n#\n\n# This code sets the following variables:\n\n#  CATCH_INCLUDE_DIR      - path to catch.hpp\n\n#  CATCH_VERSION          - version number\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extract the version number from catch.hpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Download the single-header version of Catch\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for catch locally\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Download the header if it wasn't found or if it's outdated\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/pybind11/tools/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/pybind11/tools/FindPythonLibsNew.cmake" : {
      "ObjectId" : "dc44a9df5486d7f5c4d9d0cd56972fc5e7460cbf",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find python libraries\n\n# This module finds the libraries corresponding to the Python interpeter\n\n# FindPythonInterp provides.\n\n# This code sets the following variables:\n\n#\n\n#  PYTHONLIBS_FOUND           - have the Python libs been found\n\n#  PYTHON_PREFIX              - path to the Python installation\n\n#  PYTHON_LIBRARIES           - path to the python library\n\n#  PYTHON_INCLUDE_DIRS        - path to where Python.h is found\n\n#  PYTHON_MODULE_EXTENSION    - lib extension, e.g. '.so' or '.pyd'\n\n#  PYTHON_MODULE_PREFIX       - lib name prefix: usually an empty string\n\n#  PYTHON_SITE_PACKAGES       - path to installation site-packages\n\n#  PYTHON_IS_DEBUG            - whether the Python interpreter is a debug build\n\n#\n\n# Thanks to talljimbo for the patch adding the 'LDVERSION' config\n\n# variable usage.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n# Copyright 2012 Continuum Analytics, Inc.\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the Python interpreter to find the libs.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# According to http://stackoverflow.com/questions/646518/python-how-to-detect-debug-interpreter\n\n# testing whether sys has the gettotalrefcount function is a reliable, cross-platform\n\n# way to detect a CPython debug interpreter.\n\n#\n\n# The library suffix is from the config var LDVERSION sometimes, otherwise\n\n# VERSION. VERSION will typically be like \"2.7\" on unix, and \"27\" on windows.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Convert the process output into a list\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure the Python has the same pointer-size as the chosen compiler\n\n# Skip if CMAKE_SIZEOF_VOID_P is not defined\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The built-in FindPython didn't always give the version numbers\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure all directory separators are '/'\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# when run in a venv, PYTHON_PREFIX points to it. But the libraries remain in the\n\n# original python installation. They may be found relative to PYTHON_INCLUDE_DIR.\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# raise an error if the python libs are still not found.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#message(STATUS \"Searching for Python libs in ${_PYTHON_LIBS_SEARCH}\")\n\n# Probably this needs to be more involved. It would be nice if the config\n\n# information the python interpreter itself gave us were more complete.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# If all else fails, just set the name/version and let the linker figure out the path.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# We use PYTHON_INCLUDE_DIR, PYTHON_LIBRARY and PYTHON_DEBUG_LIBRARY for the\n\n# cache entries because they are meant to specify the location of a single\n\n# library. We now set the variables listed by the documentation for this\n\n# module.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/pybind11/tools/pybind11Tools.cmake" : {
      "ObjectId" : "62de9c9fd7c734bf898dbdb97c93d204e92509b1",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tools/pybind11Tools.cmake -- Build system for the pybind11 modules\n\n#\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n\n#\n\n# All rights reserved. Use of this source code is governed by a\n\n# BSD-style license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add a CMake parameter for choosing a desired Python version\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Checks whether the given CXX/linker flags can compile and link a cxx file.  cxxflags and\n\n# linkerflags are lists of flags to use.  The result variable is a unique variable name for each set\n\n# of flags: the compilation result will be cached base on the result variable.  If the flags work,\n\n# sets them in cxxflags_out/linkerflags_out internal cache variables (in addition to ${result}).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal: find the appropriate link time optimization flags for this compiler\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Clang Gold plugin does not support -Os; append -O3 to MinSizeRel builds to override it\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Intel equivalent to LTO is called IPO\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# cmake only interprets libraries as linker flags when they start with a - (otherwise it\n\n# converts /LTCG to \\LTCG as if it was a Windows path).  Luckily MSVC supports passing flags\n\n# with - instead of /, even if it is a bit non-standard:\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Enable LTO flags if found, except for Debug builds\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Build a Python extension module:\n\n# pybind11_add_module(<name> [MODULE | SHARED] [EXCLUDE_FROM_ALL]\n\n#                     [NO_EXTRAS] [THIN_LTO] source1 [source2 ...])\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from project CMakeLists.txt\n\n# from pybind11Config\n",
        "Line" : 134,
        "CharPositionInLine" : 37
      },
      "10" : {
        "Text" : "# The prefix and extension are provided by FindPythonLibsNew.cmake\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Link against the Python shared library on Windows\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# It's quite common to have multiple copies of the same Python version\n\n# installed on one's system. E.g.: one copy from the OS and another copy\n\n# that's statically linked into an application like Blender or Maya.\n\n# If we link our plugin library against the OS Python here and import it\n\n# into Blender or Maya later on, this will cause segfaults when multiple\n\n# conflicting Python instances are active at the same time (even when they\n\n# are of the same version).\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Windows is not affected by this issue since it handles DLL imports\n\n# differently. The solution for Linux and Mac OS is simple: we just don't\n\n# link against the Python library. The resulting shared library will have\n\n# missing symbols, but that's perfectly fine -- they will be resolved at\n\n# import time.\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Suppress CMake >= 3.0 warning for shared libraries\n",
        "Line" : 163,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Make sure C++11/14 are enabled\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Set the default symbol visibility to hidden (very important to obtain small binaries)\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Strip unnecessary sections of the binary on Linux/Mac OS\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# /MP enables multithreaded builds (relevant when there are many files), /bigobj is\n\n# needed for bigger binding projects due to the limit to 64k addressable sections\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 19
    },
    "work/compiled/Makefile" : {
      "ObjectId" : "82f79df913ae3f7e7543a0b28a311b4ef4d56179",
      "LastModified" : "2017-06-29T21:36:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#LIBS = -lIMSRG -lopenblas -llapack -lgsl -lz -lhdf5 -lhdf5_cpp\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#LIBS = -L$(HOME)/lib64 -L$(HOME)/lib -lopenblas -lgsl -lz -lhdf5 -lhdf5_cpp\n\n#LIBS += -llapack\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 2035
}