{
  "Repository" : "46913898",
  "Revision" : "HEAD",
  "ObjectId" : "64baf013940133afa06e3c85132b902f7d0f99ce",
  "CommitTime" : "2019-03-19T08:29:56Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "cd2bdf20d38d27a25b58da1c059486e91338f4ef",
      "LastModified" : "2018-10-29T08:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n# File: CMakeLists.txt                                        #\n\n#                                                             #\n\n# Project name: HyPro                                         #\n\n# Contact:                  #\n\n#\t   Stefan Schupp stefan.schupp@cs.rwth-aachen.de      #\n\n#                                                             #\n\n# Author: Stefan Schupp\n\n# Credit: Sebastian Junges, Gereon Kremer\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# A. Project properties\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path to find own modules\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include own macros.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# B. Options\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# options\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########################################################################################\n\n#### EXPORT SETTINGS\n\n# Offer the user the choice of overriding the installation directories\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# path to put in the executables\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###########################################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# C. Find system tools and libraries.\n\n#\n\n# 1. Required libraries for core.\n\n# 2. Optional libraries for core.\n\n# 3. Development and debug libraries.\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# C.1. Required libraries for core.\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# initialize lists for include directories and library files\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-google-readability-namespace-comments,-llvm-namespace-comment\")\n\n#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-google-readability-braces-around-statements,-readability-braces-around-statements\")\n\n#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-readability-else-after-return\")\n\n#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-google-readability-todo\")\n\n#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-google-runtime-int\")\n\n#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-misc-macro-parentheses\")\n\n#set(CLANG_TIDY_CHECKS \"${CLANG_TIDY_CHECKS},-clang-analyzer-alpha.core.CastToStruct\")\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# C.2. Optional libraries\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We use cotire, simply include it\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# We do not use cotire, create dummy function.\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# C.3. Development and debug libraries.\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# D. Invoke subdirectories.\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##############################################################################\n\n#### EXPORT SETTINGS\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# # # # # # # # # # # # # # # # # # # # # #\n\n# E. Export Compile Information.\n\n# # # # # # # # # # # # # # # # # # # # # #\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "991274a600c5d41b98140f2e50dfc06ba1af68f3",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2017, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# CHANGES:\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2016-02-03, Lars Bilke\n\n# - Refactored functions to use named parameters\n\n#\n\n# 2017-06-02, Lars Bilke\n\n# - Merged with modified version from github.com/ufz/ogs\n\n#\n\n#\n\n# USAGE:\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      include(CodeCoverage)\n\n#\n\n# 3. Append necessary compiler flags:\n\n#      APPEND_COVERAGE_COMPILER_FLAGS()\n\n#\n\n# 4. If you need to exclude additional directories from the report, specify them\n\n#    using the COVERAGE_EXCLUDES variable before calling SETUP_TARGET_FOR_COVERAGE.\n\n#    Example:\n\n#      set(COVERAGE_EXCLUDES 'dir1/*' 'dir2/*')\n\n#\n\n# 5. Use the functions described below to create a custom make target which\n\n#    runs your test executable and produces a code coverage report.\n\n#\n\n# 6. Build a Debug build:\n\n#      cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#      make\n\n#      make my_coverage_target\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# SETUP_TARGET_FOR_COVERAGE(\n\n#     NAME testrunner_coverage                    # New target name\n\n#     EXECUTABLE testrunner -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES testrunner                     # Dependencies to build first\n\n# )\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 144,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 148,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Setup target\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 154,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Create baseline to make sure untouched files show up in the report\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Run tests\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# add baseline counters\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Show where to find the lcov info report\n\n#add_custom_command(TARGET ${Coverage_NAME} POST_BUILD\n\n#    COMMAND ;\n\n#    COMMENT \"Lcov code coverage info report saved in ${Coverage_NAME}.info.\"\n\n#)\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Show info where to find the report\n\n#add_custom_command(TARGET ${Coverage_NAME} POST_BUILD\n\n#    COMMAND ;\n\n#    COMMENT \"Open ./${Coverage_NAME}/index.html in your browser to view the coverage report.\"\n\n#)\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 187,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# SETUP_TARGET_FOR_COVERAGE_COBERTURA(\n\n#     NAME ctest_coverage                    # New target name\n\n#     EXECUTABLE ctest -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES executable_target         # Dependencies to build first\n\n# )\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT SIMPLE_PYTHON_EXECUTABLE\n",
        "Line" : 208,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 212,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Combine excludes to several -e arguments\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Run tests\n",
        "Line" : 222,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Running gcovr\n",
        "Line" : 225,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 239,
        "CharPositionInLine" : 14
      },
      "24" : {
        "Text" : "# APPEND_COVERAGE_COMPILER_FLAGS\n",
        "Line" : 245,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 25
    },
    "cmake/Modules/FindCLN.cmake" : {
      "ObjectId" : "52bb2edd47895d3b1b30408d6256af59b94e9f80",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find CLN\n\n# Once done, this will define\n\n#\n\n#  CLN_FOUND          - system has CLN\n\n#  CLN_INCLUDE_DIR    - the CLN include directory\n\n#  CLN_LIBRARY        - the CLN library location\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n\n#libfind_package(cln REQUIRED)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindEigen3.cmake" : {
      "ObjectId" : "c9b07107c3b1c3e7d5cdf895f1cfd7c819605bd2",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindGLPK.cmake" : {
      "ObjectId" : "2a1f9de5a7c1b7c6c3538c2340947d32f4efba06",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this files defines\r\n\n#  - GLPK_INCLUDE_DIR\r\n\n#  - GLPK_LIBRARIES\r\n\n#  - GLPK_FOUND\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"Cmake find library suffixes: ${CMAKE_FIND_LIBRARY_SUFFIXES}\")\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGMP.cmake" : {
      "ObjectId" : "bfa41ffb48d947e0442ff785ec30647a17c6963f",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2008-2010 Kent State University\n\n# Copyright (c) 2011-2012 Texas A&M University\n\n#\n\n# This file is distributed under the MIT License. See the accompanying file\n\n# LICENSE.txt or http://www.opensource.org/licenses/mit-license.php for terms\n\n# and conditions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: How do I find the version of GMP that I want to use?\n\n# What versions are available?\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE: GMP prefix is understood to be the path to the root of the GMP\n\n# installation library.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindGlut.cmake" : {
      "ObjectId" : "924e49bff8b2fa1516e51d890a3d900de73184ab",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  Find module for freeglut.\n\n#  @author Stefan Schupp\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLog4cplus.cmake" : {
      "ObjectId" : "cad26cb94095981fe978b8d1e75082879a09309d",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Log4cplus \n\n# obtained from https://github.com/w0land/log4cplus/blob/master/cmake/FindLog4cplus.cmake\n\n# Once done this will define\n\n# LOG4CPLUS_FOUND - System has Log4cplus\n\n# LOG4CPLUS_INCLUDE_DIRS - The Log4cplus include directories\n\n# LOG4CPLUS_LIBRARIES - The libraries needed to use Log4cplus\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LOG4CPLUS_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindMPFR.cmake" : {
      "ObjectId" : "13fd43c21cdfe273e7913b44ab762ed9abaef5aa",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2008-2010 Kent State University\n\n# Copyright (c) 2011-2012 Texas A&M University\n\n#\n\n# This file is distributed under the MIT License. See the accompanying file\n\n# LICENSE.txt or http://www.opensource.org/licenses/mit-license.php for terms\n\n# and conditions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: How do I find the version of MPFR that I want to use?\n\n# What versions are available?\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE: MPFR prefix is understood to be the path to the root of the MPFR\n\n# installation library.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindMatlab.cmake" : {
      "ObjectId" : "2c2e7b12467723187c46f7fbb7cd69ae5683b6e9",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindMatlab\n\n# ----------\n\n#\n\n# this module looks for Matlab\n\n#\n\n# Defines:\n\n#\n\n# ::\n\n#\n\n#   MATLAB_INCLUDE_DIR: include path for mex.h, engine.h\n\n#   MATLAB_LIBRARIES:   required libraries: libmex, etc\n\n#   MATLAB_MEX_LIBRARY: path to libmex.lib\n\n#   MATLAB_MX_LIBRARY:  path to libmx.lib\n\n#   MATLAB_ENG_LIBRARY: path to libeng.lib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assume people are generally using 7.1,\n\n# if using 7.0 need to link to: ../extern/lib/win32/microsoft/msvc70\n",
        "Line" : 36,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Same here, there are also: bcc50 and bcc51 directories\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#find_library(MATLAB_LIB_DIR\n\n#  \"libmex.dylib\"\n\n#  \"${MATLAB_ROOT}\"\n\n#  )\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Regular x86\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# AMD64:\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# This is common to UNIX and Win32:\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindNLOPT.cmake" : {
      "ObjectId" : "f035038520d648c4eb79d82732fd0ec8827a27fd",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find NLopt\r\n\n# Find the native NLopt includes and library\r\n\n#\r\n\n#  NLOPT_INCLUDE_DIR - where to find nlopt.h, etc.\r\n\n#  NLOPT_LIBRARIES   - List of libraries when using nlopt.\r\n\n#  NLOPT_FOUND       - True if nlopt found.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NLOPT_FOUND to TRUE if \r\n\n# all listed variables are TRUE\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindPPL.cmake" : {
      "ObjectId" : "299a77d37e01fd1ea311e9da049f92035fd78e5b",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012-2013, Lars Baehren <lbaehren@gmail.com>\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#--------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Check for the presence of PPL\n\n#\n\n# The following variables are set when PPL is found:\n\n#  PPL_FOUND      = Set to true, if all components of PPL have been found.\n\n#  PPL_INCLUDES   = Include path for the header files of PPL\n\n#  PPL_LIBRARIES  = Link these to use PPL\n\n#  PPL_LFLAGS     = Linker flags (optional)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##_____________________________________________________________________________\n\n## Check for the header files\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##_____________________________________________________________________________\n\n## Check for the library\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "## libppl\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## libppl_c\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "##_____________________________________________________________________________\n\n## Check for the executable\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "##_____________________________________________________________________________\n\n## Actions taken when all components have been found\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#find_package_handle_standard_args (PPL DEFAULT_MSG PPL_LIBRARIES PPL_INCLUDES)\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#message (STATUS \"PPL_ROOT_DIR  = ${PPL_ROOT_DIR}\")\n\n#message (STATUS \"PPL_INCLUDES  = ${PPL_INCLUDES}\")\n\n#message (STATUS \"PPL_LIBRARIES = ${PPL_LIBRARIES}\")\n",
        "Line" : 96,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "##_____________________________________________________________________________\n\n## Mark advanced variables\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cmake/Modules/FindPolymake.cmake" : {
      "ObjectId" : "68b39ab95a9f176baf6af4defe3004f13be790bc",
      "LastModified" : "2018-06-24T08:27:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find paths\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find_path searches header PATHS\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find_library searches for library files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sets the found option and creates error messages\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindUUID.cmake" : {
      "ObjectId" : "dda5ea481305e31b74ac3296e3cea9e6b790ca02",
      "LastModified" : "2018-10-29T08:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find a UUID Implementaion\n\n#\n\n# Supports e2fsprogs libuuid or BSD native UUID\n\n#\n\n# UUID_FOUND               True if a uuid got found\n\n# UUID_INCLUDE_DIRS        Location of uuid headers\n\n# UUID_LIBRARIES           List of libraries to use uuid\n\n# FOUND_BSD_UUID           BSD UUID implementation found\n\n# FOUND_LIBUUID            e2fsprogs UUID found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/Findcdd.cmake" : {
      "ObjectId" : "3167b558d60a8a9817822ef82a74dc88d8e620d5",
      "LastModified" : "2018-10-29T08:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find paths\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find_path searches header PATHS\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find_library searches for library files\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sets the found option and creates error messages\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/Findsoplex.cmake" : {
      "ObjectId" : "9b717dc7f20a2814a7586c3e5eee344ac8fc4a0d",
      "LastModified" : "2018-10-29T08:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find soplex\n\n# Once done this will define\n\n#  soplex_FOUND - System has soplex\n\n#  soplex_INCLUDE_DIRS - The soplex include directories\n\n#  soplex_LIBRARIES - The libraries needed to use soplex\n\n#  soplex_DEFINITIONS - Compiler switches required for using soplex\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set soplex_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"FindSoplex: LIBRARIES: \" ${soplex_LIBRARIES})\n\n#message(\"FindSoplex: LIBRARY: \" ${soplex_LIBRARY})\n\n#message(\"FindSoplex: INCLUDE_DIRS: \" ${soplex_INCLUDE_DIRS})\n\n#message(\"FindSoplex: INCLUDE_DIR: \" ${soplex_INCLUDE_DIR})\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/Findz3.cmake" : {
      "ObjectId" : "35df9c37e4afb570d1cdd2be196302296df6820a",
      "LastModified" : "2018-10-29T08:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find z3\n\n# Once done this will define\n\n#  z3_FOUND - System has z3\n\n#  z3_INCLUDE_DIRS - The z3 include directories\n\n#  z3_LIBRARIES - The libraries needed to use z3\n\n#  z3_DEFINITIONS - Compiler switches required for using z3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set z3_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/LibFindMacros.cmake" : {
      "ObjectId" : "49899a8fbdb0413836eaaaa47e63f9f880194cd5",
      "LastModified" : "2018-10-29T08:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/Modules/cotire.cmake" : {
      "ObjectId" : "97275d649708355f5d8da0f695378e2b9ad9483e",
      "LastModified" : "2018-10-29T15:23:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2018 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# strict checking for break() command\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 209,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# add to excluded sources, if file has list of custom compile options\n",
        "Line" : 244,
        "CharPositionInLine" : 5
      },
      "23" : {
        "Text" : "# remove from head\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with separate argument\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# remember option\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# option with joined argument\n",
        "Line" : 381,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# flush remembered option\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 428,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# add target compile flags\n",
        "Line" : 437,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# target compile options\n",
        "Line" : 450,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 457,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 468,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 470,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 488,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 500,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# platform specific flags\n",
        "Line" : 511,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# default include dirs\n",
        "Line" : 546,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 553,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 565,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# target include directories\n",
        "Line" : 577,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 589,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 597,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 647,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 693,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# target export define symbol\n",
        "Line" : 697,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 702,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# target compile definitions\n",
        "Line" : 711,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 720,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and do not look at directory compile definitions, which we already handled\n",
        "Line" : 729,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 745,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 903,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 992,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1036,
        "CharPositionInLine" : 3
      },
      "56" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1044,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1047,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# header is outside\n",
        "Line" : 1061,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1072,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# check header file extension\n",
        "Line" : 1082,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# cl.exe /showIncludes produces different output, depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1095,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# GCC like output\n",
        "Line" : 1108,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1124,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1127,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1129,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# then separate lines\n",
        "Line" : 1131,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1134,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1152,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# update stack\n",
        "Line" : 1162,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1178,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1180,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1187,
        "CharPositionInLine" : 5
      },
      "73" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1196,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1208,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1246,
        "CharPositionInLine" : 1
      },
      "76" : {
        "Text" : "# add source files to be scanned\n",
        "Line" : 1257,
        "CharPositionInLine" : 1
      },
      "77" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1270,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1421,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# create empty log file\n",
        "Line" : 1462,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1478,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1520,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1529,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1532,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1536,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1541,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1547,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics do not print diagnostics in color\n\n# -Eonly just run preprocessor, no output\n",
        "Line" : 1555,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1561,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1564,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# Clang-cl.exe options used\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# -H print the name of each header file used\n\n# -fno-color-diagnostics do not print diagnostics in color\n\n# -Eonly just run preprocessor, no output\n",
        "Line" : 1568,
        "CharPositionInLine" : 3
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1578,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1581,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1587,
        "CharPositionInLine" : 3
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1596,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1599,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1603,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1608,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1614,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1633,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1644,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1651,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# GCC options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1658,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1667,
        "CharPositionInLine" : 3
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1670,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# -fno-pch-timestamp disable inclusion of timestamp in precompiled headers (clang 4.0.0+)\n",
        "Line" : 1675,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1683,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1689,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# Clang-cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zs syntax check only\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n",
        "Line" : 1696,
        "CharPositionInLine" : 3
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1706,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1710,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1719,
        "CharPositionInLine" : 3
      },
      "112" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1738,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1745,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# append to list\n",
        "Line" : 1760,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1771,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1790,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# append to list\n",
        "Line" : 1798,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1804,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1811,
        "CharPositionInLine" : 3
      },
      "121" : {
        "Text" : "# append to list\n",
        "Line" : 1813,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1816,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1821,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# append to list\n",
        "Line" : 1826,
        "CharPositionInLine" : 3
      },
      "125" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1829,
        "CharPositionInLine" : 3
      },
      "126" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1834,
        "CharPositionInLine" : 3
      },
      "127" : {
        "Text" : "# append to list\n",
        "Line" : 1838,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1841,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# Clang-cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n",
        "Line" : 1845,
        "CharPositionInLine" : 3
      },
      "130" : {
        "Text" : "# append to list\n",
        "Line" : 1851,
        "CharPositionInLine" : 5
      },
      "131" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1854,
        "CharPositionInLine" : 5
      },
      "132" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1858,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# append to list\n",
        "Line" : 1860,
        "CharPositionInLine" : 5
      },
      "134" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1863,
        "CharPositionInLine" : 5
      },
      "135" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1871,
        "CharPositionInLine" : 3
      },
      "136" : {
        "Text" : "# append to list\n",
        "Line" : 1879,
        "CharPositionInLine" : 5
      },
      "137" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1885,
        "CharPositionInLine" : 5
      },
      "138" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1892,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# append to list\n",
        "Line" : 1894,
        "CharPositionInLine" : 5
      },
      "140" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1897,
        "CharPositionInLine" : 5
      },
      "141" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1902,
        "CharPositionInLine" : 3
      },
      "142" : {
        "Text" : "# append to list\n",
        "Line" : 1915,
        "CharPositionInLine" : 5
      },
      "143" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1923,
        "CharPositionInLine" : 5
      },
      "144" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1932,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# append to list\n",
        "Line" : 1934,
        "CharPositionInLine" : 5
      },
      "146" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1937,
        "CharPositionInLine" : 5
      },
      "147" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1974,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# Newer versions of Clang embed a compilation timestamp into the precompiled header binary,\n\n# which results in \"file has been modified since the precompiled header was built\" errors if ccache is used.\n\n# We work around the problem by disabling ccache upon pre-compiling the prefix header.\n",
        "Line" : 1979,
        "CharPositionInLine" : 3
      },
      "149" : {
        "Text" : "# PCH supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1998,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 2002,
        "CharPositionInLine" : 2
      },
      "151" : {
        "Text" : "# all Unix Clang versions have PCH support\n",
        "Line" : 2010,
        "CharPositionInLine" : 3
      },
      "152" : {
        "Text" : "# only clang-cl is supported under Windows\n",
        "Line" : 2013,
        "CharPositionInLine" : 3
      },
      "153" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 2020,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "# check if ccache is used as a compiler launcher\n",
        "Line" : 2029,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# verify that ccache configuration is compatible with precompiled headers\n\n# always check environment variable CCACHE_SLOPPINESS, because earlier versions of ccache\n\n# do not report the \"sloppiness\" setting correctly upon printing ccache configuration\n",
        "Line" : 2033,
        "CharPositionInLine" : 2
      },
      "156" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 2066,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 2085,
        "CharPositionInLine" : 1
      },
      "158" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 2128,
        "CharPositionInLine" : 4
      },
      "159" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 2139,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 2142,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2213,
        "CharPositionInLine" : 4
      },
      "162" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2218,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2221,
        "CharPositionInLine" : 4
      },
      "164" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2224,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2227,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2259,
        "CharPositionInLine" : 1
      },
      "167" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2263,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2268,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2285,
        "CharPositionInLine" : 1
      },
      "170" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2298,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2323,
        "CharPositionInLine" : 1
      },
      "172" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2328,
        "CharPositionInLine" : 3
      },
      "173" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2335,
        "CharPositionInLine" : 1
      },
      "174" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2338,
        "CharPositionInLine" : 1
      },
      "175" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2343,
        "CharPositionInLine" : 1
      },
      "176" : {
        "Text" : "# generate target script file\n",
        "Line" : 2366,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2371,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# for MSVC, Intel and Clang-cl, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2386,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2395,
        "CharPositionInLine" : 3
      },
      "180" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2397,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2401,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2410,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# for MSVC, Intel and clang-cl, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2433,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2438,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2445,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2451,
        "CharPositionInLine" : 3
      },
      "187" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2458,
        "CharPositionInLine" : 3
      },
      "188" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2461,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2468,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2475,
        "CharPositionInLine" : 1
      },
      "191" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2477,
        "CharPositionInLine" : 1
      },
      "192" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2541,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2552,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2563,
        "CharPositionInLine" : 2
      },
      "195" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2571,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2575,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "# for MSVC, Intel and clang-cl, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2579,
        "CharPositionInLine" : 3
      },
      "198" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2602,
        "CharPositionInLine" : 2
      },
      "199" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2608,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# unity file compilation results in potentially huge object file,\n\n# thus use /bigobj by default unter cl.exe and Windows Intel\n",
        "Line" : 2617,
        "CharPositionInLine" : 3
      },
      "201" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2626,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2656,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2674,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2679,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2704,
        "CharPositionInLine" : 2
      },
      "206" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2713,
        "CharPositionInLine" : 2
      },
      "207" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2722,
        "CharPositionInLine" : 2
      },
      "208" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2729,
        "CharPositionInLine" : 2
      },
      "209" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2907,
        "CharPositionInLine" : 3
      },
      "210" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2911,
        "CharPositionInLine" : 3
      },
      "211" : {
        "Text" : "# disable unity builds if automatic Qt processing is used\n",
        "Line" : 2917,
        "CharPositionInLine" : 2
      },
      "212" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2939,
        "CharPositionInLine" : 3
      },
      "213" : {
        "Text" : "# use all available cores\n",
        "Line" : 2963,
        "CharPositionInLine" : 3
      },
      "214" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2988,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2995,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 3005,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# set up prefix header\n",
        "Line" : 3010,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 3012,
        "CharPositionInLine" : 2
      },
      "219" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 3021,
        "CharPositionInLine" : 2
      },
      "220" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 3031,
        "CharPositionInLine" : 4
      },
      "221" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 3038,
        "CharPositionInLine" : 3
      },
      "222" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 3042,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 3070,
        "CharPositionInLine" : 2
      },
      "224" : {
        "Text" : "# MSVC, Intel and clang-cl only create precompiled header as a side effect\n",
        "Line" : 3076,
        "CharPositionInLine" : 4
      },
      "225" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 3091,
        "CharPositionInLine" : 2
      },
      "226" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 3112,
        "CharPositionInLine" : 3
      },
      "227" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 3120,
        "CharPositionInLine" : 3
      },
      "228" : {
        "Text" : "# handle object libraries which are part of the target's sources\n",
        "Line" : 3124,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 3144,
        "CharPositionInLine" : 4
      },
      "230" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 3156,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 3166,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3169,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# generate unity target\n",
        "Line" : 3176,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3182,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3192,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# copy output name\n",
        "Line" : 3217,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3225,
        "CharPositionInLine" : 1
      },
      "238" : {
        "Text" : "# copy compile features\n",
        "Line" : 3237,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3242,
        "CharPositionInLine" : 1
      },
      "240" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3250,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3262,
        "CharPositionInLine" : 1
      },
      "242" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3265,
        "CharPositionInLine" : 1
      },
      "243" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3271,
        "CharPositionInLine" : 1
      },
      "244" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3287,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# copy CUDA platform specific stuff\n",
        "Line" : 3295,
        "CharPositionInLine" : 1
      },
      "246" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3299,
        "CharPositionInLine" : 1
      },
      "247" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3304,
        "CharPositionInLine" : 1
      },
      "248" : {
        "Text" : "# enable parallel compilation for MSVC\n",
        "Line" : 3312,
        "CharPositionInLine" : 1
      },
      "249" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3335,
        "CharPositionInLine" : 1
      },
      "250" : {
        "Text" : "# resolve alias\n",
        "Line" : 3347,
        "CharPositionInLine" : 1
      },
      "251" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3355,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3371,
        "CharPositionInLine" : 1
      },
      "253" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3376,
        "CharPositionInLine" : 1
      },
      "254" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3425,
        "CharPositionInLine" : 4
      },
      "255" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3494,
        "CharPositionInLine" : 1
      },
      "256" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3581,
        "CharPositionInLine" : 1
      },
      "257" : {
        "Text" : "# include target script if available\n",
        "Line" : 3593,
        "CharPositionInLine" : 1
      },
      "258" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3595,
        "CharPositionInLine" : 2
      },
      "259" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3611,
        "CharPositionInLine" : 1
      },
      "260" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3631,
        "CharPositionInLine" : 3
      },
      "261" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3634,
        "CharPositionInLine" : 3
      },
      "262" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3653,
        "CharPositionInLine" : 3
      },
      "263" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3656,
        "CharPositionInLine" : 3
      },
      "264" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3724,
        "CharPositionInLine" : 3
      },
      "265" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3727,
        "CharPositionInLine" : 3
      },
      "266" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3750,
        "CharPositionInLine" : 1
      },
      "267" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3787,
        "CharPositionInLine" : 3
      },
      "268" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3821,
        "CharPositionInLine" : 2
      },
      "269" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3835,
        "CharPositionInLine" : 3
      },
      "270" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3842,
        "CharPositionInLine" : 1
      },
      "271" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3895,
        "CharPositionInLine" : 1
      },
      "272" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3967,
        "CharPositionInLine" : 1
      },
      "273" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 4131,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 274
    },
    "cmake/apple-llvm.cmake" : {
      "ObjectId" : "4e325deaa3efc4486f7b0b6728f69ffac547fbef",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect clang version, switch to homebrew llvm automatically\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/compiler-settings.cmake" : {
      "ObjectId" : "e85a5efcca2f6c40444cf1332a67b5cf4e34168b",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libstdc++ -isystem\\ /usr/include/libcxxabi/ -D__STRICT_ANSI__\")\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# general compiler and linker settings\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/export.cmake" : {
      "ObjectId" : "89f91373d7f18c1ce10f16a58f86612eb0232ed2",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add all targets to the build-tree export set\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Export the package for use from the build-tree\n\n# (this registers the build-tree with a global CMake-registry)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create the hyproConfig.cmake and hyproConfigVersion files\n\n# ... for the build tree\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO looks not correct, this would be hypro_INCLUDE_DIR\n",
        "Line" : 62,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : "#SYSCONFIG_INSTALL_DIR\n",
        "Line" : 71,
        "CharPositionInLine" : 38
      },
      "5" : {
        "Text" : "# ... for the install tree\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SYSCONFIG_INSTALL_DIR\n",
        "Line" : 80,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "# Install the export set for use with the install-tree\n\n#install(EXPORT ${HYPRO_TARGETS} DESTINATION ${PROJECT_BINARY_DIR}) # COMPONENT dev)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/hypromacros.cmake" : {
      "ObjectId" : "94e71283afe8d004587407c05dee33c37a0e5a91",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File: macros.cmake\n\n# Authors: Igor N. Bongartz\n\n# Erstellt: 2015-10-29\n\n# Version: 2015-10-29\n\n#\n\n# This file contains several macros which are used in this project. Notice that several are copied straight from web ressources.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(\"Adding ${include} as interface directories to ${name}\")\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Workaround from https://cmake.org/Bug/view.php?id=15052\n\n#file(MAKE_DIRECTORY \"${include}\")\n\n#message(\"Name is: \" ${name} \", type is \" ${type} \", lib is \" ${lib} \", include is \" ${include})\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#message(STATUS \"Add imported library 1:  ${name} ${type} IMPORTED\" )\n",
        "Line" : 21,
        "CharPositionInLine" : 9
      },
      "4" : {
        "Text" : "#add_library(${name} INTERFACE IMPORTED)\n",
        "Line" : 22,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "#message(STATUS \"Add imported library 2:  ${name} ${type} IMPORTED\" )\n\n#add_library(${name} INTERFACE IMPORTED)\n",
        "Line" : 26,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "#message(STATUS \"Add imported library 3:  ${name}_${type} ${type} IMPORTED\" )\n",
        "Line" : 32,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "#message(STATUS \"shared library, location is: ${LOCATION}\")\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#message(STATUS \"name: ${name}, version: ${version}, argn: ${ARGN}\")\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#message(STATUS \"Load library ${group} ${name} ${version}\")\n\n#message(STATUS \"Found Library ${name}.\")\n\n#message(STATUS \"Libraries: ${${LIBNAME}_LIBRARIES}\")\n\n#message(STATUS \"Includes file: ${${LIBNAME}_INCLUDE_DIR}\")\n\n#message(STATUS \"libname is: ${LIBNAME}\")\n\n#message(STATUS \"Library_dirs: ${${LIBNAME}_LIBRARY_DIRS}\")\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#unset(${LIBNAME}_FOUND CACHE)\n\n#unset(${LIBNAME}_INCLUDE_DIR CACHE)\n\n#unset(${LIBNAME}_LIBRARIES CACHE)\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#unset(${LIBNAME}_LIBRARY CACHE)\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "90ea3c859611e694fc0d343e0439231c13c0dfe1",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Quick self-configuration if only doc is built\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure doxygen settings file\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "c4cbb3e2b4e578f8ac79ec197de9da5b38538117",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set_target_properties( ${example_name} PROPERTIES LINK_SEARCH_END_STATIC TRUE )\n",
        "Line" : 15,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "d7e1c2741822415f1447646505ee4733298e3424",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dev/Makefile" : {
      "ObjectId" : "64ab8249ff4b80dc548821f6eeff1c57a22548ca",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/hypro/CMakeLists.txt" : {
      "ObjectId" : "bc9e1f5738ee512a9ea62db317efc00cc76c1fa3",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create config.h by adding cmake defines dependend on option switches\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# create *nix style library versions + symbolic links\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# allow creating static and shared libs without conflicts\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# avoid conflicts between library and binary target names\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#message(\"hypro libraries static: \" ${hypro_LIBRARIES_STATIC})\n\n#message(\"hypro include dirs: \" ${hypro_INCLUDE_DIRS})\n\n#message(\"hypro sources: \" ${sources})\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# create *nix style library versions + symbolic links\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# allow creating static and shared libs without conflicts\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# avoid conflicts between library and binary target names\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#get_target_property(IFL carl INTERFACE_LINK_LIBRARIES)\n\n#message(STATUS \"Carl interface link libraries: ${IFL}\")\n\n#message(\"hypro include dirs: \" ${hypro_INCLUDE_DIRS})\n\n#message(STATUS \"antlr libs path: \" ${ANTLR4CPP_LIBS})\n\n#message(STATUS \"antlr include dirs path: \" ${ANTLR4CPP_INCLUDE_DIRS})\n\n#message(STATUS \"hypro libraries dynamic: \" \"${${PROJECT_NAME}_LIBRARIES_DYNAMIC}\")\n\n#message(STATUS \"hypro interface include dir: ${CMAKE_CURRENT_SOURCE_DIR}\")\n\n#message(\"hypro include dirs: \" ${${PROJECT_NAME}_INCLUDE_DIRS})\n\n#message(\"hypro sources: \" ${sources})\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#target_link_libraries(${PROJECT_NAME} PUBLIC ANTLR4_STATIC)\n\n#target_link_libraries(${PROJECT_NAME} PUBLIC pthread)\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Options for static linking\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################################\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################################\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################################\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/resources/CMakeLists.txt" : {
      "ObjectId" : "ae52529f0f437dbd6ac1d2293507df914a8a1e0d",
      "LastModified" : "2019-01-07T15:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable ExternalProject CMake module\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default ExternalProject root directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if(NOT GLPK_FOUND)\n\n#\tinclude(glpk.cmake)\n\n#endif()\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#AntLR\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set variable pointing to antlr tool\n\n#set(ANTLR4CPP_JAR_LOCATION ${PROJECT_SOURCE_DIR}/src/resources/antlr-4.7-complete.jar)\n\n#include external cmake file\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message(STATUS \"Found antlr4cpp libs: ${ANTLR4CPP_LIBS} and includes: ${ANTLR4CPP_INCLUDE_DIRS} \")\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/resources/ExternalAntlr4Cpp.cmake" : {
      "ObjectId" : "8f7c617e7043aef3de203368f6fdd8ffc008839f",
      "LastModified" : "2019-01-07T15:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode:cmake -*-\n\n#\n\n# This Cmake file is for those using a superbuild Cmake Pattern, it\n\n# will download the tools and build locally\n\n#\n\n# use 2the antlr4cpp_process_grammar to support multiple grammars in the\n\n# same project\n\n#\n\n# - Getting quicky started with Antlr4cpp\n\n#\n\n# Here is how you can use this external project to create the antlr4cpp\n\n# demo to start your project off.\n\n#\n\n# create your project source folder somewhere. e.g. ~/srcfolder/\n\n# + make a subfolder cmake\n\n# + Copy this file to srcfolder/cmake\n\n# + cut below and use it to create srcfolder/CMakeLists.txt,\n\n# + from https://github.com/DanMcLaughlin/antlr4/tree/master/runtime/Cpp/demo Copy main.cpp, TLexer.g4 and TParser.g4 to ./srcfolder/\n\n#\n\n# next make a build folder e.g. ~/buildfolder/\n\n# from the buildfolder, run cmake ~/srcfolder; make\n\n#\n\n###############################################################\n\n# # minimum required CMAKE version\n\n# CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12.2 FATAL_ERROR)\n\n#\n\n# LIST( APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake )\n\n#\n\n# # compiler must be 11 or 14\n\n# SET (CMAKE_CXX_STANDARD 11)\n\n#\n\n# # set variable pointing to the antlr tool that supports C++\n\n# set(ANTLR4CPP_JAR_LOCATION /home/user/antlr4-4.5.4-SNAPSHOT.jar)\n\n# # add external build for antlrcpp\n\n# include( ExternalAntlr4Cpp )\n\n# # add antrl4cpp artifacts to project environment\n\n# include_directories( ${ANTLR4CPP_INCLUDE_DIRS} )\n\n# link_directories( ${ANTLR4CPP_LIBS} )\n\n# message(STATUS \"Found antlr4cpp libs: ${ANTLR4CPP_LIBS} and includes: ${ANTLR4CPP_INCLUDE_DIRS} \")\n\n#\n\n# # Call macro to add lexer and grammar to your build dependencies.\n\n# antlr4cpp_process_grammar(demo antlrcpptest\n\n#   ${CMAKE_CURRENT_SOURCE_DIR}/TLexer.g4\n\n#   ${CMAKE_CURRENT_SOURCE_DIR}/TParser.g4)\n\n# # include generated files in project environment\n\n# include_directories(${antlr4cpp_include_dirs_antlrcpptest})\n\n#\n\n# # add generated grammar to demo binary target\n\n# add_executable(demo main.cpp ${antlr4cpp_src_files_antlrcpptest})\n\n# add_dependencies(demo antlr4cpp antlr4cpp_generation_antlrcpptest)\n\n# target_link_libraries(demo antlr4-runtime)\n\n#\n\n###############################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#PROJECT(antlr4cpp_fetcher CXX)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# only JRE required\n\n#FIND_PACKAGE(Java COMPONENTS Runtime REQUIRED)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(ANTLR4CPP_BUILD_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/src/resources/antlr_build)\n\n#message(STATUS \"Current binary dir: ${CMAKE_BINARY_DIR}\")\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#if(NOT EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n#  message(FATAL_ERROR \"Unable to find antlr tool. ANTLR4CPP_JAR_LOCATION:${ANTLR4CPP_JAR_LOCATION}\")\n\n#endif()\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# default path for source files\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# !TODO! This should probably check with Cmake Find first?\n\n# set(ANTLR4CPP_JAR_LOCATION ${ANTLR4CPP_EXTERNAL_ROOT}/${ANTLR4CPP_JAR_NAME})\n\n#\n\n# !TODO! Ensure Antlr tool available - copy from internet\n\n#\n\n# # !TODO! this shold be calculated based on the tags\n\n# if (NOT ANTLR4CPP_JAR_NAME)\n\n#   # default location to find antlr Java binary\n\n#   set(ANTLR4CPP_JAR_NAME antlr4-4.5.4-SNAPSHOT.jar)\n\n# endif()\n\n#\n\n# if(NOT EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n#   # download Java tool if not installed\n\n#   ExternalProject_ADD(\n\n#     #--External-project-name------\n\n#     antlrtool\n\n#     #--Core-directories-----------\n\n#     PREFIX             ${ANTLR4CPP_EXTERNAL_ROOT}\n\n#     #--Download step--------------\n\n#     DOWNLOAD_DIR       ${ANTLR4CPP_EXTERNAL_ROOT}\n\n#     DOWNLOAD_COMMAND   \"\"\n\n#     # URL              http://www.antlr.org/download/${ANTLR4CPP_JAR_NAME}\n\n#     # antlr4-4.5.4-SNAPSHOT.jar\n\n#     # GIT_TAG            v4.5.4\n\n#     TIMEOUT            10\n\n#     LOG_DOWNLOAD       ON\n\n#     #--Update step----------\n\n#     # UPDATE_COMMAND     ${GIT_EXECUTABLE} pull\n\n#     #--Patch step----------\n\n#     # PATCH_COMMAND sh -c \"cp <SOURCE_DIR>/scripts/CMakeLists.txt <SOURCE_DIR>\"\n\n#     #--Configure step-------------\n\n#     CMAKE_ARGS         \"\"\n\n#     CONFIGURE_COMMAND  \"\"\n\n#     LOG_CONFIGURE ON\n\n#     #--Build step-----------------\n\n#     BUILD_COMMAND      \"\"\n\n#     LOG_BUILD ON\n\n#     #--Install step---------------\n\n#     INSTALL_COMMAND    \"\"\n\n#     )\n\n#   # Verify Antlr Available\n\n#   if(NOT EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n#     message(FATAL_ERROR \"Unable to find ANTLR4CPP_JAR_LOCATION:${ANTLR4CPP_JAR_LOCATION} -> ${ANTLR4CPP_JAR_NAME} not in ${ANTLR4CPP_DIR} \")\n\n#   endif()\n\n# endif()\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# download runtime environment\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--External-project-name------\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#--Depend-on-antrl-tool-----------\n\n# DEPENDS antlrtool\n\n#--Core-directories-----------\n\n#PREFIX             ${ANTLR4CPP_EXTERNAL_ROOT}\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#Added for local copy\n",
        "Line" : 129,
        "CharPositionInLine" : 53
      },
      "11" : {
        "Text" : "#--Download step--------------\n\n# GIT_REPOSITORY    ${ANTLR4CPP_EXTERNAL_REPO}\n\n# GIT_TAG           ${ANTLR4CPP_EXTERNAL_TAG}\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#Added for local copy\n",
        "Line" : 133,
        "CharPositionInLine" : 43
      },
      "13" : {
        "Text" : "#TIMEOUT             10\n\n#LOG_DOWNLOAD        ON\n\n#--Update step----------\n\n#UPDATE_COMMAND     ${GIT_EXECUTABLE} pull\t\t#Commented out for local repo usage\n\n#--Patch step----------\n\n# PATCH_COMMAND sh -c \"cp <SOURCE_DIR>/scripts/CMakeLists.txt <SOURCE_DIR>\"\n\n#--Configure step-------------\n\n#CONFIGURE_COMMAND  ${CMAKE_COMMAND} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -DANTLR4CPP_JAR_LOCATION=${ANTLR4CPP_JAR_LOCATION} -DBUILD_SHARED_LIBS=ON -BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_SOURCE_DIR:PATH=<SOURCE_DIR> -DWITH_DEMO=False -DWITH_LIBCXX=False <SOURCE_DIR>\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#--Build step-----------------\n\n# BUILD_COMMAND ${CMAKE_MAKE_PROGRAM}\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#--Install step---------------\n\n# INSTALL_COMMAND    \"\"\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#--Install step---------------\n\n# INSTALL_COMMAND    \"\"\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#message(STATUS \"CMake compiler: ${CMAKE_CXX_COMPILER}\")\n\n#message(STATUS \"antrlr prefix: ${ANTLR4CPP_BUILD_INCLUDE_DIR}\")\n\n#message(STATUS \"jar location: ${ANTLR4CPP_JAR_LOCATION}\")\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# antlr4_shared ${INSTALL_DIR}/lib/libantlr4-runtime.so\n\n# antlr4_static ${INSTALL_DIR}/lib/libantlr4-runtime.a\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "############ Generate runtime #################\n\n# macro to add dependencies to target\n\n#\n\n# Param 1 project name\n\n# Param 1 namespace (postfix for dependencies)\n\n# Param 2 Lexer file (full path)\n\n# Param 3 Parser File (full path)\n\n#\n\n# output\n\n#\n\n# antlr4cpp_src_files_{namespace} - src files for add_executable\n\n# antlr4cpp_include_dirs_{namespace} - include dir for generated headers\n\n# antlr4cpp_generation_{namespace} - for add_dependencies tracking\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#macro(antlr4cpp_process_grammar\n\n#    antlr4cpp_project\n\n#    antlr4cpp_project_namespace\n\n#    antlr4cpp_grammar_lexer\n\n#    antlr4cpp_grammar_parser)\n\n#\n\n#  if(EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n#    message(STATUS \"Found antlr tool: ${ANTLR4CPP_JAR_LOCATION}\")\n\n#  else()\n\n#    message(FATAL_ERROR \"Unable to find antlr tool. ANTLR4CPP_JAR_LOCATION:${ANTLR4CPP_JAR_LOCATION}\")\n\n#  endif()\n\n#\n\n#  add_custom_target(\"antlr4cpp_generation_${antlr4cpp_project_namespace}\"\n\n#    COMMAND\n\n#    ${CMAKE_COMMAND} -E make_directory ${ANTLR4CPP_GENERATED_SRC_DIR}\n\n#    COMMAND\n\n#    \"${Java_JAVA_EXECUTABLE}\" -jar \"${ANTLR4CPP_JAR_LOCATION}\" -Werror -Dlanguage=Cpp -listener -visitor -o \"${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace}\" -package ${antlr4cpp_project_namespace} \"${antlr4cpp_grammar_lexer}\" \"${antlr4cpp_grammar_parser}\"\n\n#    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n\n#    DEPENDS \"${antlr4cpp_grammar_lexer}\" \"${antlr4cpp_grammar_parser}\"\n\n#    )\n\n#\n\n#  # Find all the input files\n\n#  FILE(GLOB generated_files ${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace}/*.cpp)\n\n#\n\n#  # export generated cpp files into list\n\n#  foreach(generated_file ${generated_files})\n\n#    list(APPEND antlr4cpp_src_files_${antlr4cpp_project_namespace} ${generated_file})\n\n#    set_source_files_properties(\n\n#      ${generated_file}\n\n#      PROPERTIES\n\n#      COMPILE_FLAGS -Wno-overloaded-virtual\n\n#      )\n\n#  endforeach(generated_file)\n\n#  message(STATUS \"Antlr4Cpp  ${antlr4cpp_project_namespace} Generated: ${generated_files}\")\n\n#\n\n#  # export generated include directory\n\n#  set(antlr4cpp_include_dirs_${antlr4cpp_project_namespace} ${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace})\n\n#  message(STATUS \"Antlr4Cpp ${antlr4cpp_project_namespace} include: ${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace}\")\n\n#\n\n#endmacro()\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#message(STATUS \"Antlr: Include dirs: ${ANTLR4CPP_INCLUDE_DIRS}\")\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/resources/antlr4-cpp-runtime-4.7.1-source/CMakeLists.txt" : {
      "ObjectId" : "f4940c0c5e057d4c83bb53c214e00abec5cc04f0",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode:cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 2.8 needed because of ExternalProject\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Detect build type, fallback to release and throw a warning if use didn't specify any\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Java is not necessary if building without demos.\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Initialize CXXFLAGS.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compiler-specific C++11 activation.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Just g++-5.0 and greater contain <codecvt> header. (test in ubuntu)\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# You can use libc++ to compile this project when g++ is NOT greater than or equal to 5.0.\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Visual Studio 2012+ supports c++11 features \n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "src/resources/antlr4-cpp-runtime-4.7.1-source/cmake/ExternalAntlr4Cpp.cmake" : {
      "ObjectId" : "e079465a2bd53051e008dc2439757791006a1be7",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## -*- mode:cmake -*-\n\n##\n\n## This Cmake file is for those using a superbuild Cmake Pattern, it\n\n## will download the tools and build locally\n\n##\n\n## use 2the antlr4cpp_process_grammar to support multiple grammars in the\n\n## same project\n\n##\n\n## - Getting quicky started with Antlr4cpp\n\n##\n\n## Here is how you can use this external project to create the antlr4cpp\n\n## demo to start your project off.\n\n##\n\n## create your project source folder somewhere. e.g. ~/srcfolder/\n\n## + make a subfolder cmake\n\n## + Copy this file to srcfolder/cmake\n\n## + cut below and use it to create srcfolder/CMakeLists.txt,\n\n## + from https://github.com/DanMcLaughlin/antlr4/tree/master/runtime/Cpp/demo Copy main.cpp, TLexer.g4 and TParser.g4 to ./srcfolder/\n\n##\n\n## next make a build folder e.g. ~/buildfolder/\n\n## from the buildfolder, run cmake ~/srcfolder; make\n\n##\n\n################################################################\n\n## # minimum required CMAKE version\n\n## CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12.2 FATAL_ERROR)\n\n##\n\n## LIST( APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake )\n\n##\n\n## # compiler must be 11 or 14\n\n## SET (CMAKE_CXX_STANDARD 11)\n\n##\n\n## # set variable pointing to the antlr tool that supports C++\n\n## set(ANTLR4CPP_JAR_LOCATION /home/user/antlr4-4.5.4-SNAPSHOT.jar)\n\n## # add external build for antlrcpp\n\n## include( ExternalAntlr4Cpp )\n\n## # add antrl4cpp artifacts to project environment\n\n## include_directories( ${ANTLR4CPP_INCLUDE_DIRS} )\n\n## link_directories( ${ANTLR4CPP_LIBS} )\n\n## message(STATUS \"Found antlr4cpp libs: ${ANTLR4CPP_LIBS} and includes: ${ANTLR4CPP_INCLUDE_DIRS} \")\n\n##\n\n## # Call macro to add lexer and grammar to your build dependencies.\n\n## antlr4cpp_process_grammar(demo antlrcpptest\n\n##   ${CMAKE_CURRENT_SOURCE_DIR}/TLexer.g4\n\n##   ${CMAKE_CURRENT_SOURCE_DIR}/TParser.g4)\n\n## # include generated files in project environment\n\n## include_directories(${antlr4cpp_include_dirs_antlrcpptest})\n\n##\n\n## # add generated grammar to demo binary target\n\n## add_executable(demo main.cpp ${antlr4cpp_src_files_antlrcpptest})\n\n## add_dependencies(demo antlr4cpp antlr4cpp_generation_antlrcpptest)\n\n## target_link_libraries(demo antlr4-runtime)\n\n##\n\n################################################################\n\n#\n\n#CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12.2)\n\n#PROJECT(antlr4cpp_fetcher CXX)\n\n#INCLUDE(ExternalProject)\n\n#FIND_PACKAGE(Git REQUIRED)\n\n#\n\n## only JRE required\n\n#FIND_PACKAGE(Java COMPONENTS Runtime REQUIRED)\n\n#\n\n############# Download and Generate runtime #################\n\n#set(ANTLR4CPP_EXTERNAL_ROOT ${CMAKE_BINARY_DIR}/externals/antlr4cpp)\n\n#\n\n## external repository\n\n## GIT_REPOSITORY     https://github.com/antlr/antlr4.git\n\n#set(ANTLR4CPP_EXTERNAL_REPO \"https://github.com/antlr/antlr4.git\")\n\n#set(ANTLR4CPP_EXTERNAL_TAG  \"4.7.1\")\n\n#\n\n#if(NOT EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n#  message(FATAL_ERROR \"Unable to find antlr tool. ANTLR4CPP_JAR_LOCATION:${ANTLR4CPP_JAR_LOCATION}\")\n\n#endif()\n\n#\n\n## default path for source files\n\n#if (NOT ANTLR4CPP_GENERATED_SRC_DIR)\n\n#  set(ANTLR4CPP_GENERATED_SRC_DIR ${CMAKE_BINARY_DIR}/antlr4cpp_generated_src)\n\n#endif()\n\n#\n\n## !TODO! This should probably check with Cmake Find first?\n\n## set(ANTLR4CPP_JAR_LOCATION ${ANTLR4CPP_EXTERNAL_ROOT}/${ANTLR4CPP_JAR_NAME})\n\n##\n\n## !TODO! Ensure Antlr tool available - copy from internet\n\n##\n\n## # !TODO! this shold be calculated based on the tags\n\n## if (NOT ANTLR4CPP_JAR_NAME)\n\n##   # default location to find antlr Java binary\n\n##   set(ANTLR4CPP_JAR_NAME antlr4-4.5.4-SNAPSHOT.jar)\n\n## endif()\n\n##\n\n## if(NOT EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n##   # download Java tool if not installed\n\n##   ExternalProject_ADD(\n\n##     #--External-project-name------\n\n##     antlrtool\n\n##     #--Core-directories-----------\n\n##     PREFIX             ${ANTLR4CPP_EXTERNAL_ROOT}\n\n##     #--Download step--------------\n\n##     DOWNLOAD_DIR       ${ANTLR4CPP_EXTERNAL_ROOT}\n\n##     DOWNLOAD_COMMAND   \"\"\n\n##     # URL              http://www.antlr.org/download/${ANTLR4CPP_JAR_NAME}\n\n##     # antlr4-4.5.4-SNAPSHOT.jar\n\n##     # GIT_TAG            v4.5.4\n\n##     TIMEOUT            10\n\n##     LOG_DOWNLOAD       ON\n\n##     #--Update step----------\n\n##     # UPDATE_COMMAND     ${GIT_EXECUTABLE} pull\n\n##     #--Patch step----------\n\n##     # PATCH_COMMAND sh -c \"cp <SOURCE_DIR>/scripts/CMakeLists.txt <SOURCE_DIR>\"\n\n##     #--Configure step-------------\n\n##     CMAKE_ARGS         \"\"\n\n##     CONFIGURE_COMMAND  \"\"\n\n##     LOG_CONFIGURE ON\n\n##     #--Build step-----------------\n\n##     BUILD_COMMAND      \"\"\n\n##     LOG_BUILD ON\n\n##     #--Install step---------------\n\n##     INSTALL_COMMAND    \"\"\n\n##     )\n\n##   # Verify Antlr Available\n\n##   if(NOT EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n##     message(FATAL_ERROR \"Unable to find ANTLR4CPP_JAR_LOCATION:${ANTLR4CPP_JAR_LOCATION} -> ${ANTLR4CPP_JAR_NAME} not in ${ANTLR4CPP_DIR} \")\n\n##   endif()\n\n## endif()\n\n#\n\n## download runtime environment\n\n#ExternalProject_ADD(\n\n#  #--External-project-name------\n\n#  antlr4cpp\n\n#  #--Depend-on-antrl-tool-----------\n\n#  # DEPENDS antlrtool\n\n#  #--Core-directories-----------\n\n#  PREFIX             ${ANTLR4CPP_EXTERNAL_ROOT}\n\n#  #--Download step--------------\n\n#  GIT_REPOSITORY     ${ANTLR4CPP_EXTERNAL_REPO}\n\n#  # GIT_TAG          ${ANTLR4CPP_EXTERNAL_TAG}\n\n#  TIMEOUT            10\n\n#  LOG_DOWNLOAD       ON\n\n#  #--Update step----------\n\n#  UPDATE_COMMAND     ${GIT_EXECUTABLE} pull\n\n#  #--Patch step----------\n\n#  # PATCH_COMMAND sh -c \"cp <SOURCE_DIR>/scripts/CMakeLists.txt <SOURCE_DIR>\"\n\n#  #--Configure step-------------\n\n#  CONFIGURE_COMMAND  ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Release -DANTLR4CPP_JAR_LOCATION=${ANTLR4CPP_JAR_LOCATION} -DBUILD_SHARED_LIBS=ON -BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_SOURCE_DIR:PATH=<SOURCE_DIR>/runtime/Cpp <SOURCE_DIR>/runtime/Cpp\n\n#  LOG_CONFIGURE ON\n\n#  #--Build step-----------------\n\n#  # BUILD_COMMAND ${CMAKE_MAKE_PROGRAM}\n\n#  LOG_BUILD ON\n\n#  #--Install step---------------\n\n#  # INSTALL_COMMAND    \"\"\n\n#  # INSTALL_DIR ${CMAKE_BINARY_DIR}/\n\n#  #--Install step---------------\n\n#  # INSTALL_COMMAND    \"\"\n\n#)\n\n#\n\n#ExternalProject_Get_Property(antlr4cpp INSTALL_DIR)\n\n#\n\n#list(APPEND ANTLR4CPP_INCLUDE_DIRS ${INSTALL_DIR}/include/antlr4-runtime)\n\n#foreach(src_path misc atn dfa tree support)\n\n#  list(APPEND ANTLR4CPP_INCLUDE_DIRS ${INSTALL_DIR}/include/antlr4-runtime/${src_path})\n\n#endforeach(src_path)\n\n#\n\n#set(ANTLR4CPP_LIBS \"${INSTALL_DIR}/lib\")\n\n#\n\n## antlr4_shared ${INSTALL_DIR}/lib/libantlr4-runtime.so\n\n## antlr4_static ${INSTALL_DIR}/lib/libantlr4-runtime.a\n\n#\n\n############# Generate runtime #################\n\n## macro to add dependencies to target\n\n##\n\n## Param 1 project name\n\n## Param 1 namespace (postfix for dependencies)\n\n## Param 2 Lexer file (full path)\n\n## Param 3 Parser File (full path)\n\n##\n\n## output\n\n##\n\n## antlr4cpp_src_files_{namespace} - src files for add_executable\n\n## antlr4cpp_include_dirs_{namespace} - include dir for generated headers\n\n## antlr4cpp_generation_{namespace} - for add_dependencies tracking\n\n#\n\n#macro(antlr4cpp_process_grammar\n\n#    antlr4cpp_project\n\n#    antlr4cpp_project_namespace\n\n#    antlr4cpp_grammar_lexer\n\n#    antlr4cpp_grammar_parser)\n\n#\n\n#  if(EXISTS \"${ANTLR4CPP_JAR_LOCATION}\")\n\n#    message(STATUS \"Found antlr tool: ${ANTLR4CPP_JAR_LOCATION}\")\n\n#  else()\n\n#    message(FATAL_ERROR \"Unable to find antlr tool. ANTLR4CPP_JAR_LOCATION:${ANTLR4CPP_JAR_LOCATION}\")\n\n#  endif()\n\n#\n\n#  add_custom_target(\"antlr4cpp_generation_${antlr4cpp_project_namespace}\"\n\n#    COMMAND\n\n#    ${CMAKE_COMMAND} -E make_directory ${ANTLR4CPP_GENERATED_SRC_DIR}\n\n#    COMMAND\n\n#    \"${Java_JAVA_EXECUTABLE}\" -jar \"${ANTLR4CPP_JAR_LOCATION}\" -Werror -Dlanguage=Cpp -listener -visitor -o \"${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace}\" -package ${antlr4cpp_project_namespace} \"${antlr4cpp_grammar_lexer}\" \"${antlr4cpp_grammar_parser}\"\n\n#    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n\n#    DEPENDS \"${antlr4cpp_grammar_lexer}\" \"${antlr4cpp_grammar_parser}\"\n\n#    )\n\n#\n\n#  # Find all the input files\n\n#  FILE(GLOB generated_files ${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace}/*.cpp)\n\n#\n\n#  # export generated cpp files into list\n\n#  foreach(generated_file ${generated_files})\n\n#    list(APPEND antlr4cpp_src_files_${antlr4cpp_project_namespace} ${generated_file})\n\n#    if (NOT CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\n\n#    set_source_files_properties(\n\n#      ${generated_file}\n\n#      PROPERTIES\n\n#      COMPILE_FLAGS -Wno-overloaded-virtual\n\n#      )\n\n#    endif ()\n\n#  endforeach(generated_file)\n\n#  message(STATUS \"Antlr4Cpp  ${antlr4cpp_project_namespace} Generated: ${generated_files}\")\n\n#\n\n#  # export generated include directory\n\n#  set(antlr4cpp_include_dirs_${antlr4cpp_project_namespace} ${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace})\n\n#  message(STATUS \"Antlr4Cpp ${antlr4cpp_project_namespace} include: ${ANTLR4CPP_GENERATED_SRC_DIR}/${antlr4cpp_project_namespace}\")\n\n#\n\n#endmacro()\n\n#",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/resources/antlr4-cpp-runtime-4.7.1-source/runtime/CMakeLists.txt" : {
      "ObjectId" : "fdb920e9940249f85e16ddec5aaa1538b3981720",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# put generated libraries here.\n",
        "Line" : 28,
        "CharPositionInLine" : 51
      },
      "1" : {
        "Text" : "# make sure 'make' works fine even if ${LIB_OUTPUT_DIR} is deleted.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: test in windows. DLL is treated as runtime.\n\n# see https://cmake.org/cmake/help/v3.0/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.html\n",
        "Line" : 86,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 3
    },
    "src/resources/antlr4-cpp-runtime-4.7.1-source/runtime/src/atn/Makefile" : {
      "ObjectId" : "480bd859296084d96c009d2fb7cc253f2d9bbe46",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-Wextra\n",
        "Line" : 2,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "#TODO LDFLAGS += ?\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Escote's files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Escote's TODO: LL1Analyzer.cpp LexerATNSimulator.cpp ATNSimulator.cpp \\\n\tATNSerializer.cpp ATNConfigSet.cpp ATNConfig.cpp \\\n\tATN.cpp\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Alejandro's files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Alejandro's TODO: PredictionContext.cpp PredictionContextCache.cpp \\\n\tPrecedencePredicateTransition.cpp ParserATNSimulator.cpp\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/resources/carl.cmake" : {
      "ObjectId" : "0d5891de8e8b942426708d1f02df3c259ce524fc",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ExternalProject_Add(\n\n#\tcarl\n\n#\tGIT_REPOSITORY http://github.com/smtrat/carl.git\n\n#\t#GIT_TAG \"17.04\"\n\n#\tBUILD_COMMAND make carl\n\n#\tINSTALL_COMMAND \"\")\n\n#\n\n#ExternalProject_Add_Step(carl ReloadCMake\n\n#\tCOMMAND cmake ../..\n\n#\tCOMMENT \"Re-run CMake.\"\n\n#\tDEPENDEES build\n\n#\t)\n\n#\n\n#add_custom_target(Boost_SHARED)\n\n#\n\n#\n\n##Todo: Re-check, it should be possible to use load_library() afterwards, shouldn't it? Otherwise: Update lists\n\n#add_imported_library(carl SHARED \"${carl_LIBRARIES}\" \"${carl_INCLUDE_DIR}\")\n\n#add_imported_library(lib_carl_static STATIC \"${carl_LIBRARIES}\" \"${carl_INCLUDE_DIR}\")\n\n#list(APPEND ${PROJECT_NAME}_LIBRARIES_STATIC ${carl_LIBRARIES})\n\n#list(APPEND ${PROJECT_NAME}_INCLUDE_DIRS ${carl_INCLUDE_DIR})\n\n#set(${PROJECT_NAME}_INCLUDE_DIRS ${${PROJECT_NAME}_INCLUDE_DIRS} PARENT_SCOPE)\n\n#set(${PROJECT_NAME}_LIBRARIES_STATIC ${${PROJECT_NAME}_LIBRARIES_STATIC} PARENT_SCOPE)\n\n#\n\n#add_dependencies(carl carl)\n\n#add_dependencies(lib_carl_static carl)\n\n#add_dependencies(resources carl)\n\n#add_dependencies(resources lib_carl_static)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/resources/glpk-4.45/Makefile.am" : {
      "ObjectId" : "5ac5166e59d3f01b620850217bf46d5286512b04",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## eof ##\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/resources/glpk-4.45/examples/Makefile.am" : {
      "ObjectId" : "c2269f756ca3ad0927ef67e4ec8c4c47b9b7fb3e",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## eof ##\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/resources/glpk-4.45/include/Makefile.am" : {
      "ObjectId" : "b2d83b006324ce2ae94883445f917e0eb72671aa",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## eof ##\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/resources/glpk-4.45/src/Makefile.am" : {
      "ObjectId" : "34f76f7b6a2b7d80aa2a945ef3063de664d3d07a",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## eof ##\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/resources/glpk.cmake" : {
      "ObjectId" : "c123c385c53fa516ad9d629d8eb7a8789e5dac5d",
      "LastModified" : "2019-01-07T15:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#URL ftp://ftp.gnu.org/gnu/glpk/glpk-${glpk_version}.tar.gz\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#BUILD_COMMAND make\n",
        "Line" : 9,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "#add_imported_library(GLPK SHARED \"${CMAKE_BINARY_DIR}/resources/glpk-${glpk_version}/lib/${CMAKE_FIND_LIBRARY_PREFIXES}glpk${CMAKE_SHARED_LIBRARY_SUFFIX}\" \"${CMAKE_BINARY_DIR}/resources/glpk-${glpk_version}/include\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#list(APPEND ${PROJECT_NAME}_INCLUDE_DIRS ${GLPK_INCLUDE_DIR})\n\n#set(${PROJECT_NAME}_INCLUDE_DIRS ${${PROJECT_NAME}_INCLUDE_DIRS} PARENT_SCOPE)\n\n#set(${PROJECT_NAME}_LIBRARIES_STATIC ${${PROJECT_NAME}_LIBRARIES_STATIC} PARENT_SCOPE)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_library(GLPK_STATIC STATIC IMPORTED)\n\n#set_target_properties(GLPK_STATIC PROPERTIES IMPORTED_LOCATION \"${GLPK_LIBRARIES}\")\n\n#set_target_properties(GLPK_STATIC PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"${GLPK_INCLUDE_DIR}\")\n\n#set(hypro_LIBRARIES_DYNAMIC ${hypro_LIBRARIES_DYNAMIC} ${GLPK_LIBRARIES} )\n\n#set(hypro_LIBRARIES_STATIC ${hypro_LIBRARIES_STATIC} ${GLPK_LIBRARIES} )\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#add_dependencies(GLPK glpk)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/resources/glpk_download.cmake" : {
      "ObjectId" : "5cfd7a1574149d45a3630bfb7cf414d31d4fbd9c",
      "LastModified" : "2019-01-07T15:15:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create include output folder\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SOURCE_DIR \"${CMAKE_BINARY_DIR}/resources/glpk-${glpk_version}\"\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#CONFIGURE_COMMAND ./configure --with-gmp --with-pic CPPFLAGS=-fPIC --disable-shared --disable-dl --enable-static\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#PREFIX glpk-${glpk_version}\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#INSTALL_DIR ${CMAKE_BINARY_DIR}/resources/glpk-${glpk_version}\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/resources/gtest.cmake" : {
      "ObjectId" : "f10542d0e80d9de3a88c5716b7630877f293f005",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create configure command dependend on compiler\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add gtest (local build)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CONFIGURE_COMMAND ${CMAKE_COMMAND} ../googletest-stamp -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Force separate output paths for debug and release builds to allow easy\n\n# identification of correct lib in subsequent TARGET_LINK_LIBRARIES\n\n#CMAKE_ARGS ${cmake_command}\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Specify include dir\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# required for testing.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/resources/lace.cmake" : {
      "ObjectId" : "fbf25d9b8e9ef675d2f4488fc8f0724c5f9d2ddc",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable ExternalProject CMake module\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default ExternalProject root directory\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Specify include dir\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "041a84501bcbd111b532c959e5219644db1db7b8",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/algorithms/CMakeLists.txt" : {
      "ObjectId" : "49f7ea8f021386ae066d9a439354fde8a4963c79",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################\n\n# Unit Tests\n\n################################\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#BoxReachabilityTest.cpp\n\n#FacetEnumerationTest.cpp\n\n#ForwardReachabilityTest.cpp\n",
        "Line" : 8,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "#HyReachTest.cpp\n",
        "Line" : 11,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#MinkowskiSumTest.cpp\n\n#SumPerformanceTest.cpp\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# rahsTwoTankTest.cpp\n",
        "Line" : 14,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 5
    },
    "src/test/benchmark/CMakeLists.txt" : {
      "ObjectId" : "bb14f2276446aaa524501b4239a622ad67a73cf7",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################\n\n# Unit Tests\n\n################################\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#add_test( NAME benchmark COMMAND runBenchmark )\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# general collection of benchmarks\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/test/core/CMakeLists.txt" : {
      "ObjectId" : "49b170be8d9b4f36cd99c1dc2116d45ed35dd14c",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################\n\n# Core Unit Tests\n\n################################\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#ifdef LOGGING_HYPRO\n\n#LoggerTest.cpp\n\n#endif\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#ParserTest.cpp\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "################################\n\n# Parser Unit Tests\n\n################################\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#AntlrParserCIFTest.cpp\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#message(\"Targeted link libraries: \" ${PROJECT_NAME} ${GTEST_LIBRARIES} ${ANTLR4CPP_LIBS})\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "src/test/datastructure/CMakeLists.txt" : {
      "ObjectId" : "a3089979af4e7fae257ae4054fd2d5bd68a8ee3a",
      "LastModified" : "2019-03-19T08:29:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################\n\n# Unit Tests\n\n################################\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#HybridAutomataOutputTest.cpp\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#HybridAutomataParallelCompositionTest.cpp\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/test/representations/CMakeLists.txt" : {
      "ObjectId" : "68ff0fa215abb3953c95ac905e69ecae6d15adc6",
      "LastModified" : "2018-12-05T22:59:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################\n\n# Unit Tests\n\n################################\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#TaylorModelTest.cpp\n",
        "Line" : 21,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#SupportFunctionNewTest.cpp\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#TaylorModelTest.cpp\n",
        "Line" : 38,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#SupportFunctionNewTest.cpp\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 43,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 3234
}