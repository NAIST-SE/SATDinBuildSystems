{
  "Repository" : "14128878",
  "Revision" : "HEAD",
  "ObjectId" : "d70be9a041f6745f018e1c0ee898719b05991856",
  "CommitTime" : "2019-04-16T19:07:22Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f29733968de11d4021e3554249ba4c8b556841cd",
      "LastModified" : "2019-03-12T09:47:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is currently the beginnings of a cmake build file for neon.\n\n# It is not complete and the best way to build neon now is with scons.\n\n# This may depend on things that are built by a regular scons build,\n\n# but over time that dependency may be eliminated and this will be\n\n# a standalone build system.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Use cmake C# support (3.8.2+)\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Needed for USE_RTLX\n\n#string(REPLACE \"lib/global.neon\" \"\" RTL_NEON_WITHOUT_GLOBAL \"${RTL_NEON}\")\n\n#set(RTL_NEONX \"\")\n\n#foreach (src ${RTL_NEON_WITHOUT_GLOBAL})\n\n#    string(REPLACE \".neon\" \".neonx\" NEONX ${src})\n\n#    add_custom_command(\n\n#        OUTPUT \"${src}x\"\n\n#        COMMAND neonc ${src}\n\n#        DEPENDS ${src}\n\n#    )\n\n#    list(APPEND RTL_NEONX ${NEONX})\n\n#endforeach ()\n\n#add_custom_command(\n\n#    OUTPUT src/rtlx.inc\n\n#    COMMAND python scripts/build_rtlx_inc.py ${RTL_NEONX}\n\n#    DEPENDS scripts/build_rtlx_inc.py\n\n#    DEPENDS ${RTL_NEONX}\n\n#)\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set_source_files_properties(\n\n#    src/support_exec.cpp\n\n#    PROPERTIES OBJECT_DEPENDS src/rtlx.inc\n\n#)\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The following are just to support internal_error()\n",
        "Line" : 482,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# TODO: Compile samples\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: needs pyparsing\n\n#add_test(\n\n#    NAME \"test_grammar\"\n\n#    COMMAND python contrib/grammar/test-grammar.py lib/*.neon neon/*.neon tools/*.neon ${SAMPLES} t/*.neon t/errors/N3*.neon\n\n#)\n\n#add_test(\n\n#    NAME \"test_grammar_random\"\n\n#    COMMAND python contrib/grammar/test-random.py\n\n#)\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: coverage tests\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "docs/Makefile" : {
      "ObjectId" : "403e3c44500a0c480b7ad6dafa6f54329c603ee8",
      "LastModified" : "2017-08-19T08:35:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exec/cnex/CMakeLists.txt" : {
      "ObjectId" : "f287ce51035dd93196dc78b7caef91a29e59a5a0",
      "LastModified" : "2019-04-12T03:48:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exec/gonex/CMakeLists.txt" : {
      "ObjectId" : "fc16032e53bbf5f82ab987ff188cda2ab36a20ce",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exec/jnex/CMakeLists.txt" : {
      "ObjectId" : "66ff4d5fee499151657e85ea95340ef43105fbde",
      "LastModified" : "2019-04-15T09:41:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exec/rsnex/CMakeLists.txt" : {
      "ObjectId" : "ad2f92b5c60819eabeccdc72831a9e914e207d8f",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/CMakeLists.txt" : {
      "ObjectId" : "8aba679d38b34771a536c83e8388cffd29c57650",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/libbid.cmake" : {
      "ObjectId" : "d3212161b1a4ebb68b27d34a7b1e6f7d27841633",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/libffi.cmake" : {
      "ObjectId" : "bf7f49e6c6df532b27faab8b26583765ed73584b",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if (${CMAKE_SYSTEM_NAME} STREQUAL \"Darwin\")\n\n#    enable_language(ASM)\n\n#    set(ffi_platform\n\n#        libffi-3.2.1/src/x86/darwin64.S\n\n#        libffi-3.2.1/src/x86/ffi64.c\n\n#    )\n\n#elseif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n\n#    enable_language(ASM)\n\n#    set(ffi_platform\n\n#        libffi-3.2.1/src/x86/ffi64.c\n\n#        libffi-3.2.1/src/x86/unix64.S\n\n#    )\n\n#elseif (${CMAKE_SYSTEM_NAME} STREQUAL \"Windows\")\n\n#    enable_language(ASM_MASM)\n\n#    set(ffi_platform\n\n#        libffi-3.2.1/x86-win64/win62.asm\n\n#    )\n\n#endif ()\n\n#add_library(ffi\n\n#    libffi-3.2.1/src/closures.c\n\n#    libffi-3.2.1/src/x86/ffi.c\n\n#    libffi-3.2.1/src/prep_cif.c\n\n#    libffi-3.2.1/src/types.c\n\n#    ${ffi_platform}\n\n#)\n\n#target_compile_options(ffi PUBLIC -DFFI_BUILDING)\n\n#if (${CMAKE_SYSTEM_NAME} STREQUAL \"Darwin\")\n\n#    target_include_directories(ffi\n\n#        PRIVATE libffi-3.2.1/include\n\n#        PUBLIC lib/libffi-3.2.1/include\n\n#    )\n\n#elseif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n\n#    target_include_directories(ffi\n\n#        PRIVATE libffi-3.2.1/include\n\n#        PUBLIC lib/libffi-3.2.1/include\n\n#    )\n\n#elseif (${CMAKE_SYSTEM_NAME} STREQUAL \"Windows\")\n\n#    target_include_directories(ffi\n\n#        PRIVATE libffi-3.2.1/include\n\n#        PUBLIC lib/libffi-3.2.1/include\n\n#    )\n\n#endif ()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (NOT EXISTS libffi-3.2.1)\n\n#    execute_process(\n\n#        COMMAND python ../scripts/extract.py libffi-3.2.1.tar.gz .\n\n#        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n\n#        RESULT_VARIABLE retcode\n\n#    )\n\n#    if (NOT \"${retcode}\" STREQUAL \"0\")\n\n#        message(FATAL_ERROR \"Fatal error extracting archive\")\n\n#    endif ()\n\n#endif ()\n\n#if (WIN32)\n\n#else (WIN32)\n\n#    add_custom_command(\n\n#        OUTPUT lib/libffi.a\n\n#        COMMAND cd libffi-3.2.1 && ./configure --prefix=`pwd`/.. && make && make install\n\n#    )\n\n#    add_custom_target(libffi DEPENDS lib/libffi.a)\n\n#    add_library(ffi STATIC IMPORTED GLOBAL)\n\n#    add_dependencies(ffi libffi)\n\n#    set_target_properties(ffi PROPERTIES IMPORTED_LOCATION external/lib/libffi.a)\n\n#endif (WIN32)\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "external/libgmp.cmake" : {
      "ObjectId" : "d8990fb28e527c939a42f274565db1d5cf0f6ea4",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/libhash.cmake" : {
      "ObjectId" : "1cf6fb1feb7133315bb602886a2788522ead144c",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/minijson.cmake" : {
      "ObjectId" : "d2a268ba2d95cc4d05364e82070f10662e4879e9",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/minizip.cmake" : {
      "ObjectId" : "71164b7eedecc3970e94822974fcfdc67b581639",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/sqlite.cmake" : {
      "ObjectId" : "65c385d5f0037593e9249800022b0bbc6757900b",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/utfcpp.cmake" : {
      "ObjectId" : "69bcf1605f9b79dd65f6c02e8acfeccf54419619",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/zlib.cmake" : {
      "ObjectId" : "f7514ee53f94e484b96f193c4b0969ac967501eb",
      "LastModified" : "2018-12-11T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2256
}