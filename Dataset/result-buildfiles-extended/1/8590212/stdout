{
  "Repository" : "8590212",
  "Revision" : "HEAD",
  "ObjectId" : "ac0b452834265d7f4287e9d6e10f2631fbd66dd0",
  "CommitTime" : "2019-04-13T09:25:54Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "206f853fc98ea1921022895c209f6bbd2c68755c",
      "LastModified" : "2017-05-24T22:49:02Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "doc/Makefile" : {
      "ObjectId" : "bb8f551ad22f82ac5e27c7be826bb8ffcf7bfc55",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CMD_EXE\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "1" : {
        "Text" : "# CMD_EXE\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "libsrc/Makefile" : {
      "ObjectId" : "0ebec46b159a9d41d2990b33be6bed56552ee880",
      "LastModified" : "2019-03-29T21:53:04Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Every target requires its individual vpath setting but the vpath directive\n\n# acts globally. Therefore each target is built in a separate make instance.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMD_EXE\n",
        "Line" : 90,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# INSTALL_recipe\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# CMD_EXE\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# ZIP_recipe\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# TARGET\n",
        "Line" : 119,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# DRVTYPE_template\n",
        "Line" : 252,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# ASSEMBLE_recipe\n",
        "Line" : 268,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# COMPILE_recipe\n",
        "Line" : 276,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# TARGET\n",
        "Line" : 298,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 10
    },
    "samples/Makefile" : {
      "ObjectId" : "6c94495f5d4f46b190b5705b88856474d5d0fa50",
      "LastModified" : "2019-04-04T15:13:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for cc65 samples\n\n#\n\n# This Makefile requires GNU make\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run 'make SYS=<target>'; or, set a SYS env.\n\n# var. to build for another target system.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just the usual way to define a variable\n\n# containing a single space character.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Just the usual way to find out if we're\n\n# using cmd.exe to execute make rules.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If TARGET_PATH contains spaces then it is presumed to contain escaped spaces. GNU make\n\n# has very limited support for paths containing spaces. $(wildcard) is the only function\n\n# that is aware of escaped spaces. However, $(wildcard) never returns paths with escaped\n\n# spaces !!! So if it e.g. finds 4 files in a path with 2 spaces then one ends up with a\n\n# return value consisting of 12 plain words :-((\n\n#\n\n# Fortunately we can work around that behaviour here because we know that the files we\n\n# are looking for have known extensions. So we can $(filter) the in our example above 12\n\n# words for file extensions so we come up with 4 path fragments. Then we remove those\n\n# path fragments with $(notdir) from the file names.\n\n#\n\n# So far so good. But here we want to process files from different paths in a single\n\n# recipe further down below and therefore want to prepend the paths to the files with\n\n# $(addprefix). However, $(foreach) isn't aware of escaped spaces (only $(wildcard) is).\n\n# Therefore, we need to replace the spaces with some other character temporarily in order\n\n# to have $(foreach) generate one invocation per file. We use the character '?' for that\n\n# purpose here, just because it is known to not be part of file names.\n\n#\n\n# Inside the recipe generated per file we then replace the '?' again with a space. As we\n\n# want to be compatible with cmd.exe for execution we're not using an escaped space but\n\n# rather double-quote the whole path.\n\n#\n\n# Note: The \"strange\" $(wildcard) further down below just serves the purpose to unescape\n\n#       spaces for cmd.exe. This could have as well been done with another $(subst).\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This one comes with the VICE emulator.\n\n# See http://vice-emu.sourceforge.net/\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For this one, see https://applecommander.github.io/\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# For this one, see http://www.horus.com/~hias/atari/\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# System-dependent settings\n\n# For convenience, these groups and lines are sorted alphabetically, first\n\n# by target-machine group, then by mission, then by program and sub-target.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The Apple machines need the start address adjusted when using TGI\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The Apple ][ needs the start address adjusted for the mousedemo\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The Apple machines need the end address adjusted for large programs\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The atari target needs to reserve some memory when using TGI\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The atarixl target needs the start address adjusted when using TGI\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Generic rules\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Lists of executables\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unlisted targets will try to build everything.\n\n# That lets us learn what they cannot build, and what settings\n\n# we need to use for programs that can be built and run.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Rules to make the binaries and the disk\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Overlay rules. Overlays need special ld65 configuration files.  Also, the\n\n# overlay file-names are shortenned to fit the Atari's 8.3-character limit.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Rule to make a CBM disk with all samples. Needs the c1541 program that comes\n\n# with the VICE emulator.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# D64_WRITE_recipe\n",
        "Line" : 238,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Rule to make an Apple II disk with all samples. Needs the AppleCommander\n\n# program, available at https://applecommander.github.io/, and a template disk\n\n# named 'prodos.dsk'.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DSK_WRITE_BIN_recipe\n",
        "Line" : 257,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# DSK_WRITE_REL_recipe\n",
        "Line" : 263,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Rule to make an Atari disk with all samples. Needs the dir2atr program\n\n# available at http://www.horus.com/~hias/atari/ and the MyDos4534 variant\n\n# of dos.sys and dup.sys.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ATR_WRITE_recipe\n",
        "Line" : 280,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Installation rules\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Packaging rules\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Clean-up rules\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "src/Makefile" : {
      "ObjectId" : "c93a8645f7df477804ecae22d17f784435926542",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CMD_EXE\n",
        "Line" : 93,
        "CharPositionInLine" : 5
      },
      "1" : {
        "Text" : "# AVAIL_recipe\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# UNAVAIL_recipe\n",
        "Line" : 107,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# CMD_EXE\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# OBJS_template\n",
        "Line" : 136,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# PROG_template\n",
        "Line" : 147,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "test/Makefile" : {
      "ObjectId" : "c858835171d3cfb169d5f60e7303800f688569c1",
      "LastModified" : "2017-05-24T22:49:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# top-level Makefile for the regression tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/asm/Makefile" : {
      "ObjectId" : "93210aaeeab614c08c55cedb333bf3935f193e0f",
      "LastModified" : "2017-05-24T22:49:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the assembler regression tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OPCODE_template\n",
        "Line" : 57,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# CPUDETECT_template\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "test/dasm/Makefile" : {
      "ObjectId" : "d7071149117d779f9e10272b12469ef95d4427f2",
      "LastModified" : "2017-05-24T22:49:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the disassembler regression tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default target defined later\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DISASS_template\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "test/err/Makefile" : {
      "ObjectId" : "4b05ca5db63f47fd838bdfcca25e57febd207910",
      "LastModified" : "2017-05-24T22:49:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the tests that MUST NOT compile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hack\n",
        "Line" : 9,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 2
    },
    "test/misc/Makefile" : {
      "ObjectId" : "ad39176bdbd21ddc873a8adbe09f87308bbf9080",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the remaining tests that need special care in one way or another\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hack\n",
        "Line" : 9,
        "CharPositionInLine" : 10
      },
      "2" : {
        "Text" : "# should compile, but then hangs in an endless loop\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# these need reference data that can't be generated by a host-compiled program,\n\n# in a useful way\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the rest are tests that fail currently for one reason or another\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t-$(SIM65) $(SIM65FLAGS) $$@ $(NULLOUT)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# PRG_template\n",
        "Line" : 94,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 7
    },
    "test/ref/Makefile" : {
      "ObjectId" : "3c2e582e4686e73ae50b85233d11b1aa675ea85a",
      "LastModified" : "2017-06-07T14:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the regression tests that generate output which has to be\n\n# compared with reference output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some files have \"K & R\"-style syntax.  Therefore, some forward\n\n# function-declarations don't match the later function definitions.\n\n# Those programs fail when fastcall is used; but, the cdecl calling convention\n\n# tolerates those conflicts.  Therefore, make their functions default to cdecl.\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# \"yaccdbg.c\" includes \"yacc.c\".\n\n# yaccdbg's built files must depend on both of them.\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# PRG_template\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "test/val/Makefile" : {
      "ObjectId" : "fe194d892154a94c38e4b57a36262566bfda372c",
      "LastModified" : "2017-06-07T14:52:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the regression tests that return an error code on failure\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some files have \"K & R\"-style syntax.  Therefore, some forward\n\n# function-declarations don't match the later function definitions.\n\n# Those programs fail when fastcall is used; but, the cdecl calling convention\n\n# tolerates those conflicts.  Therefore, make their functions default to cdecl.\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PRG_template\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "testcode/lib/accelerator/Makefile" : {
      "ObjectId" : "6b90a9556acf27beb097180b0bb35f22c71c8268",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "testcode/lib/apple2/Makefile" : {
      "ObjectId" : "9d551aa622b4d20f5f1baa081f00c4524049e2bb",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# For this one see https://applecommander.github.io/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "testcode/lib/gamate/Makefile" : {
      "ObjectId" : "2cf98d1895c520048941deca84da6ac9b1ccc48e",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "testcode/lib/pce/Makefile" : {
      "ObjectId" : "a4a495c9aa693aca90747776aa991af7769fd134",
      "LastModified" : "2019-01-05T19:57:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Size of cartridge to generate.\n\n# Possible values:\n\n#  8K = 0x2000\n\n# 16K = 0x4000\n\n# 32K = 0x8000\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 16
  },
  "ElapsedTime" : 1553
}