{
  "Repository" : "55269232",
  "Revision" : "HEAD",
  "ObjectId" : "cd7bd86958615d9ecd521553049888c37cc877e7",
  "CommitTime" : "2018-08-14T16:56:36Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "76084e5c5cd204daac5673cdd066c144024edd99",
      "LastModified" : "2018-08-14T16:56:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package version, used when other projects FIND_PACKAGE(wave <version>)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler settings for all targets\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default to Release build type, otherwise some modules will be slow\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the value but keep it as an option in CMake GUI\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# CMake modules\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# User options\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find all dependencies here, and ensure they have IMPORTED targets\n\n# The install scripts install some dependencies in /opt/wavelab\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Require Eigen 3.2.92, also called 3.3 beta-1, since it's in xenial\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Where dependencies do not provide IMPORTED targets, define them\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Optionally build tests. `gtest` is included with this project\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build gtest from source\n\n# Unless another GTEST_ROOT is set by the user, tell the AddGTest script to\n\n# first look for the bundled copy in deps/googletest\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# This target is used to build all tests, without running them\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Optionally build benchmarks (requires `benchmark` package to be installed)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This target is used to build (but not run) benchmarks\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# This target is used to run benchmarks via \"make benchmark\".\n\n# Like \"make test\", it does not build anything. (@todo change?)\n\n# It runs all tests labelled \"benchmark\" by WAVE_ADD_BENCHMARK helper.\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Add a special \"wave\" target including all modules\n\n# The WAVE_ADD_LIBRARY helper in WaveUtils.cmake will add each module to this\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add each module to the project\n\n# Modules with missing dependencies are not built, and circular dependencies are\n\n# not supported. Thus modules must be listed after their dependencies, for now.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Documentation\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This is where .cmake files will be installed (default under share/)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add an export file listing all targets\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Install the export file\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Create the waveConfig and waveConfigVersion files\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Generate the Config file for the install tree\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generate the Version file\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Install the Config and ConfigVersion files\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Install our import scripts so we can use them in the Config script. That way,\n\n# other projects using libwave will get transient dependencies automatically\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Export this build so the package can be found through CMake's registry\n\n# without being installed.\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Generate the Config file for the build tree\n\n# It differs from the installed Config file in where our bundled\n\n# Import*.cmake scripts are included from. Here, use the relative path from\n\n# the build directory to this source directory\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "cmake/AddGTest.cmake" : {
      "ObjectId" : "d9205f3867a0000ffca2284b00ffdd522906b458",
      "LastModified" : "2018-08-03T16:00:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make the GTest::GTest and GTest::Main targets available, either by finding them or\n\n# by building GTest from a source package\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindGTest will define a proper-exported GTest library Target in CMake 3.5+\n\n# Otherwise, don't risk incompatible flags, and don't use it\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This variable is set in FindGTest even if GTEST_FOUND==false.\n\n# It can mess things up for us.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Try to find it in the given GTEST_ROOT or /usr/src (where debian package goes)\n\n# Search both for googletest/ and gtest/ names\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Build it as part of this project\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The project in GTEST_SRC_ROOT will probably build plain libraries, gtest and gtest_main\n\n# Check for modern target just in case\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Manually define modern targets\n\n# This needs the headers as well\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 7
    },
    "cmake/FindEigen3.cmake" : {
      "ObjectId" : "1da37619ef017c2cf2674610d6240d28db505356",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# specific additional paths for some OS\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/FindPCL.cmake" : {
      "ObjectId" : "252f97c4d180551dd0a11d1548671af200f43178",
      "LastModified" : "2017-10-26T15:45:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PCL library\n\n# This module wraps find_package(PCL CONFIG) to make these small changes:\n\n#\n\n# * It doesn't overwrite variables it does not own such as BOOST_LIBRARIES and\n\n#   CMAKE_CXX_FLAGS.\n\n# * The list PCL_LIBRARIES includes all transitive dependencies such as\n\n#   BOOST_LIBRARIES and VTK_LIBRARIES\n\n# * The list PCL_DEFINITIONS is correctly formatted and contains all flags which\n\n#   would otherwise be added directly to CMAKE_CXX_FLAGS\n\n#\n\n# @author Leo Koppel <lkoppel@uwaterloo.ca>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro puts all listed variables in the parent scope\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define a function for new scope\n\n# This isolates all variables inappropriately set by PCLConfig.cmake\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# PCL adds some entries with spaces instead of as a (semicolon-separated)\n\n# CMake list, which messes up later. Fix them here.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This would get added directly to CMAKE_CXX_FLAGS, which we're avoiding\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Export these variables directly to the parent scope\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Set these variables with changes\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Handle the QUIET and REQUIRED options\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/ImportBoost.cmake" : {
      "ObjectId" : "4f92fc89a736c24fe60494838ae6c9fa2d6fd0c7",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Create imported targets for Boost libraries\n\n#\n\n# This script is intended to supplement versions of CMake below 3.5, where those\n\n# targets are not defined.\n\n#\n\n# Modified from CMake 3.5.2 FindBoost.cmake by Leo Koppel <lkoppel@uwaterloo.ca>\n\n#\n\n# Updated _Boost_COMPONENT_DEPENDENCIES from CMake 3.10.0 to allow some newer\n\n# Boost / older CMake combinations as well (e.g. Boost 1.63 with CMake 3.5).\n\n# This case is mostly untested.\n\n#\n\n#\n\n#=============================================================================\n\n# Copyright 2006-2012 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2012 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# included below or see https://cmake.org/licensing/ for details.\n\n#\n\n#=============================================================================\n\n# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2016 Kitware, Inc.\n\n# Copyright 2000-2011 Insight Software Consortium\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This script is not needed as imported targets already exist\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# (snip)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get component dependencies.  Requires the dependencies to have been\n\n# defined for the Boost release version.\n\n#\n\n# component - the component to check\n\n# _ret - list of library dependencies\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note: to add a new Boost release, run\n\n#\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\n\n#\n\n# The output may be added in a new block below.  If it's the same as\n\n# the previous release, simply update the version range of the block\n\n# for the previous release.\n\n#\n\n# This information was originally generated by running\n\n# BoostScanDeps.cmake against every boost release to date supported\n\n# by FindBoost:\n\n#\n\n#   % for version in /path/to/boost/sources/*\n\n#     do\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\n\n#     done\n\n#\n\n# The output was then updated by search and replace with these regexes:\n\n#\n\n# - Strip message(STATUS) prefix dashes\n\n#   s;^-- ;;\n\n# - Indent\n\n#   s;^set(;    set(;;\n\n# - Add conditionals\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\n\n#\n\n# This results in the logic seen below, but will require the xxxx\n\n# replacing with the following Boost release version (or the next\n\n# minor version to be released, e.g. 1.59 was the latest at the time\n\n# of writing, making 1.60 the next, so 106000 is the needed version\n\n# number).  Identical consecutive releases were then merged together\n\n# by updating the end range of the first block and removing the\n\n# following redundant blocks.\n\n#\n\n# Running the script against all historical releases should be\n\n# required only if the BoostScanDeps.cmake script logic is changed.\n\n# The addition of a new release should only require it to be run\n\n# against the new release.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\n",
        "Line" : 367,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#\n\n# Determine if any missing dependencies require adding to the component list.\n\n#\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\n\n# defined; FALSE if dependency information is unavailable).\n\n#\n\n# componentvar - the component list variable name\n\n# extravar - the indirect dependency list variable name\n\n#\n\n#\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\n\n# _boost_processed_components - components already processed (or currently being processed)\n\n# _boost_new_components - new components discovered for future processing\n\n#\n",
        "Line" : 382,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# (snip)\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Additional components may be required via component dependencies.\n\n# Add any missing components to the list.\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# snip\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Add imported targets\n\n# ------------------------------------------------------------------------\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\n\n# libraries as a result.\n",
        "Line" : 460,
        "CharPositionInLine" : 20
      },
      "18" : {
        "Text" : "# (snip)\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/ImportCeres.cmake" : {
      "ObjectId" : "dd9b2334ca1da81ddee46d34e61d4e44448234b9",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Fixes imported target for ceres-solver\n\n# For some reason ceres does not have include directories in its imported\n\n# target. Add them to the target, if not already set.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ImportEigen3.cmake" : {
      "ObjectId" : "36f4beabed5517cc8302dd1a79f6d49f07d9f605",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Defines an imported target for Eigen\n\n# This script is meant to be used after find_package(Eigen)\n\n# It adds the imported target Eigen3::Eigen if it doesn't already exist, making\n\n# Eigen below 3.3.1 consistent with newer versions.\n\n#\n\n# Eigen can then be used with\n\n#     TARGET_LINK_LIBRARIES(< my_target > Eigen3::Eigen)\n\n# instead of with INCLUDE_DIRECTORIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ImportKindr.cmake" : {
      "ObjectId" : "c1510d688de3562e8d89f74a559b72bd385f5023",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Defines an imported target for kindr\n\n# This script is meant to be used after find_package(kindr)\n\n# It adds the imported target Kindr::kindr if it doesn't already exist\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ImportPCL.cmake" : {
      "ObjectId" : "545ff6df4d4d1e19b28020f39a7dcf0ea7a9dbb4",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Defines an imported target for PCL\n\n# This script is meant to be used after find_package(PCL COMPONENTS ...)\n\n# It adds a monolithic imported target PCL::PCL\n\n#\n\n# Note this script does *not* assume our own FindPCL module was used.\n\n#\n\n# @author Leo Koppel <lkoppel@uwaterloo.ca>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro takes a list such as\n\n#     a;b;optimized;c;debug;d;e\n\n# and turns it into\n\n#     a;b;c;e\n\n# It is a workaround for PCLConfig setting \"debug\" and \"optimized\" libraries\n\n# which cannot be used for the INTERFACE_LINK_LIBRARIES property.\n\n# In practice the \"debug\" and \"optimized\" items are (usually?) the same.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove the \"debug\" and the following item\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# PCL adds some entries with spaces instead of as a (semicolon-separated)\n\n# CMake list, which messes up later. Fix them here.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Remove repeated \"optimized\" and \"debug\" libraries\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Add monolithic target with all libraries available from PCL\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/ImportYaml-cpp.cmake" : {
      "ObjectId" : "728537449fd16347add97372b745a4ff5e6457d8",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Fixes imported target for yaml-cpp\n\n# For some reason yaml-cpp does not have include directories in its imported\n\n# target. Add them to the target, if not already set.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/WaveHelpers.cmake" : {
      "ObjectId" : "3b4c0c81c5d715db7b005d4d9c82fcee2d2b8fe2",
      "LastModified" : "2018-08-03T16:00:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Functions and macros used in libwave\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# wave_add_test: Add a gtest target\n\n#\n\n# WAVE_ADD_TEST(Name [DISABLED] src1 [src2...])\n\n#\n\n# The test will be added to the tests run by \"make test\", unless DISABLED is\n\n# given. It will be linked against the needed gtest libraries. Any other links\n\n# can be made separately with the target_link_libraries command.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define the arguments this function accepts\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Build the test executable using the given sources\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Link gtest libraries including one providing main()\n\n# Link wave_utils as that contains wave_test.hpp\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Put the test executable in the tests/ directory\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Build this test on \"make tests\"\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Add the executable as a test, so it runs with \"make test\"\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# wave_add_benchmark: Add a target which links against google benchmark\n\n#\n\n# WAVE_ADD_BENCHMARK(Name src1 [src2...])\n\n#\n\n# The target will be added to the tests run by \"make benchmark\". It will be\n\n# linked against the needed libraries. Any other links can be made separately\n\n# with the target_link_libraries command.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build the executable using the given sources\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Put the executable in the benchmarks/ directory\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Add a ctest that will not be run by default.\n\n# To run it the command `ctest -C benchmark -L benchmark` must be used.\n\n# (Setting -C excludes it from the default set, and setting -L excludes the\n\n# default tests from it). Note the target `benchmark` runs this command.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Build this target on \"make benchmarks\"\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# wave_include_directories: Set a module's public include paths so they are\n\n# usable from both the build and install tree\n\n#\n\n# WAVE_INCLUDE_DIRECTORIES(TARGET <INTERFACE|PUBLIC> dir1 [dir2...])\n\n#\n\n# This function expects relative paths, typically \"include\". It wraps\n\n# TARGET_INCLUDE_DIRECTORIES, using a generator expression for the includes.\n\n#\n\n# See:\n\n# https://cmake.org/cmake/help/v3.4/manual/cmake-buildsystem.7.html#include-directories-and-usage-requirements\n\n# https://stackoverflow.com/a/25681179\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# wave_add_library: Adds a libwave component library, setting standard install\n\n# destinations and properties\n\n#\n\n# WAVE_ADD_LIBRARY(Name [source1...])\n\n#\n\n# This convenience function wraps ADD_LIBRARY, adding either a normal library\n\n# with the given sources or a header-only INTERFACE library if no sources are\n\n# given.\n\n#\n\n# It calls INSTALL(...) and sets standard paths for binaries and header files,\n\n# and associates the target with the waveTargets export.\n\n#\n\n# This function also sets the output library name to the target name prefixed\n\n# with \"wave_\". For example, for the name \"utils\" the library built would be\n\n# \"libwave_utils.a\".\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# No sources given - header-only library\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Normal library, will be static unless BUILD_SHARED_LIBS is ON\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Remove \"wave_\" prefix from exported name\n\n# This means others can link to wave::utils instead of wave::wave_utils\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Add an alias so internal target_link_libraries can also use the namespace\n\n# The benefit is newer CMake will give immediately give an error on typos\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Add this target to the all-inclusive \"wave\" library\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Add install destinations\n\n# The variables used here are defined by GNUInstallDirs\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Note INCLUDES DESTINATION does not actually install anything; it only sets\n\n# paths on the exported targets. Due to this quirk we also call INSTALL in\n\n# WAVE_INCLUDE_DIRECTORIES.\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# wave_check_module: Declares an optional libwave component library, and\n\n# returns from the script if it cannot or should not be built.\n\n#\n\n# WAVE_CHECK_MODULE(Name [DEPENDS target1...])\n\n#\n\n# This macro is meant to be called from the CMakeLists script defining the\n\n# libwave component. It:\n\n#  - Adds a user option BUILD_name, which is ON by default but can be disabled\n\n#  - Checks that each target listed after DEPENDS exists\n\n#\n\n# If the user option is disabled or one of the DEPENDS does not exist, this\n\n# macro returns from the calling script (returning to the top-level CMake\n\n# assuming it was called from a subdirectory). In either case, it prints a\n\n# message whether the component is being built, and the reason if not.\n\n#\n\n# Note this is a macro (which does not have its own scope), so RETURN() exits\n\n# the calling script.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Define the arguments this macro accepts\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add a user option\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Check that each of the given DEPENDS (if any) exists as a target\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# wave_add_module: Does everything needed to add a typical libwave component\n\n# library.\n\n#\n\n# WAVE_ADD_MODULE(Name\n\n#                [DEPENDS target1...]\n\n#                [SOURCES source1...])\n\n#\n\n# This macro does the equivalent of the following:\n\n#\n\n# WAVE_CHECK_MODULE(Name DEPENDS <depends>)\n\n# WAVE_ADD_LIBRARY(Name <sources>)\n\n# WAVE_INCLUDE_DIRECTORIES(Name PUBLIC \"include\")\n\n# TARGET_LINK_LIBRARIES(Name PUBLIC <depends>)\n\n#\n\n# If no SOURCES are given (for a header-only library) INTERFACE is used instead\n\n# of PUBLIC.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Define the arguments this macro accepts\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Check if the module should be built, based on options and dependencies\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# No sources given - header-only library\n",
        "Line" : 218,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Use these headers when building, and make clients use them\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Depend on these modules and external libraries, and make clients use them\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 32
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "5d5d8f5b15215340036ac1972d11feb95df36178",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DOCS_INPUT is a space-separated list of subdirectories, used for Doxygen input\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find images under \"ref\". We must copy them separately\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Generate documentation with Doxygen\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "wave_benchmark/CMakeLists.txt" : {
      "ObjectId" : "a020dcd4999749a202b12b4c67b0646e2cb58609",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wave_containers/CMakeLists.txt" : {
      "ObjectId" : "22fe1ae6faee09c4a0eccec6cb5cc0979cb9827c",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wave_controls/CMakeLists.txt" : {
      "ObjectId" : "f49fb525e6f86f457c640520089fb2a4092f69e1",
      "LastModified" : "2017-12-14T20:00:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wave_geography/CMakeLists.txt" : {
      "ObjectId" : "070afc0e65d4d950f4ae059723b38ad70655d68a",
      "LastModified" : "2018-02-20T18:26:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wave_gtsam/CMakeLists.txt" : {
      "ObjectId" : "3f38614886cf149977e730e5bf9395ecebe5b248",
      "LastModified" : "2018-06-26T21:52:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Extensions for GTSAM library, such as combined motion factors\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These tests also use wave_vision\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Copy the test data stored in wave_optimization\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "wave_kinematics/CMakeLists.txt" : {
      "ObjectId" : "9b2f3564cfddd13238f398c178fb53443b5455b8",
      "LastModified" : "2018-02-20T18:26:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wave_matching/CMakeLists.txt" : {
      "ObjectId" : "927674507d28bdb06d4f0611f232ece2483a8c6c",
      "LastModified" : "2018-02-20T18:26:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# probably requires display to work properly\n",
        "Line" : 28,
        "CharPositionInLine" : 14
      },
      "2" : {
        "Text" : "# Uses viewer to check results\n",
        "Line" : 33,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# Copy the test data\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "wave_optimization/CMakeLists.txt" : {
      "ObjectId" : "7b1b191eb25332e1c5e4ad59b673190401a21d4c",
      "LastModified" : "2018-02-20T18:26:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For now, just some examples of using ceres @todo\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# COPY TEST DATA\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "wave_utils/CMakeLists.txt" : {
      "ObjectId" : "92c41c70617aed422dd7e6425a41517148e8a44f",
      "LastModified" : "2018-02-20T18:26:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COPY TEST DATA\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "wave_vision/CMakeLists.txt" : {
      "ObjectId" : "2cd27a883e708417d3dfa866232f220c06e42439",
      "LastModified" : "2018-02-20T18:26:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Requires display to run\n",
        "Line" : 46,
        "CharPositionInLine" : 18
      },
      "2" : {
        "Text" : "# COPY TEST DATA\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 22
  },
  "ElapsedTime" : 2447
}