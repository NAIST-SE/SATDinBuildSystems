{
  "Repository" : "11397334",
  "Revision" : "HEAD",
  "ObjectId" : "3621458d3f5eb369106abb5f3555e2097f461e63",
  "CommitTime" : "2018-10-04T18:16:17Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e217171bc46ea95006d7e51cc3bfc3ade2f5a0ab",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n## Find optional instrumentation libraries that will be used in debug only\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n## Set various debug flags (instrumentation libs, coverage, …)\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n## Set the software version, archive name, RPM name etc\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If we are on a dev version, append the hash of the current git HEAD to\n\n# the version\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n## The rule that generates the documentation\n\n#\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n## Set this search path for cmake, to find our custom search modules\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n## Find all the libraries (optional or not)\n\n#\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n## Set all the include directories, depending on what libraries are used\n\n#\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# To be able to include the config.h and other files generated by cmake\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n## Define all the modules\n\n#\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n## Define the executables\n\n#\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## main\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## test_suite\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n## Link the executables with their libraries\n\n#\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Define a __FILENAME__ macro with the relative path (from the base project directory)\n\n# of each source file\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n## Add a rule to download the catch unit test framework\n\n#\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n## Add some custom rules to launch the tests\n\n#\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n## Install target\n\n#\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n## Dist target\n\n## Generate a release tarball from the git sources\n\n#\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Append this specific file that is not part of the git repo\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Remove a potential existing archive\n",
        "Line" : 360,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Compress the archive\n",
        "Line" : 362,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#\n\n## Set some variables that will be used in the cmake-generated files\n\n#\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Force the format of the date output\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n## Check if we have std::get_time and put_time\n\n#\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "9fde45eeb26f5220f7b630a6f841fc692b39d1cf",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#     SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#     SETUP_TARGET_FOR_COVERAGE(\n\n#                my_coverage_target  # Name for custom target.\n\n#                test_driver         # Name of the test driver executable that runs the tests.\n\n#                                    # NOTE! This should always have a ZERO as exit code\n\n#                                    # otherwise the coverage generation will not complete.\n\n#                coverage            # Name of output directory.\n\n#                )\n\n#\n\n# 4. Build a Debug build:\n\n#     cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#     make\n\n#     make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display an error when the target is called. If no error is found, this\n\n# function will be overridden by the real one later in this file\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#                        MUST return ZERO always, even on errors.\n\n#                        If not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fifth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup target\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Create baseline coverage data file\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Run tests\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Combine the baseline and the test data\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Remove information about source files that are not part of\n\n# the test (system file, external libraries, etc)\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Generate the report\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 175,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 186,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 190,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Run tests\n",
        "Line" : 195,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Running gcovr\n",
        "Line" : 198,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 210,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "cmake/Modules/FindBOTAN.cmake" : {
      "ObjectId" : "3f223e2d3e6c727b53717d46a05d4cde7655479a",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find botan\n\n# Find the botan cryptographic library\n\n#\n\n# This module defines the following variables:\n\n#   BOTAN_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   BOTAN_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   BOTAN_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   BOTAN_LIBRARY\n\n#   BOTAN_INCLUDE_DIR\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set BOTAN_FOUND to TRUE if these two variables are set.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGCRYPT.cmake" : {
      "ObjectId" : "b73bfd0e7bb5166ecb1026f5594f58cb2a59f002",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find gcrypt\n\n# Find the gcrypt cryptographic library\n\n#\n\n# This module defines the following variables:\n\n#   GCRYPT_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   GCRYPT_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   GCRYPT_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   GCRYPT_LIBRARY\n\n#   GCRYPT_INCLUDE_DIR\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set GCRYPT_FOUND to TRUE if these two variables are set.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindICONV.cmake" : {
      "ObjectId" : "fb78ac7e50857930d854b930a83e523a0fe13710",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find iconv\n\n# Find the iconv (character set conversion) library\n\n#\n\n# This module defines the following variables:\n\n#   ICONV_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   ICONV_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   ICONV_LIBRARIES  -  Where to find the library file\n\n#   ICONV_SECOND_ARGUMENT_IS_CONST  -  The second argument for iconv() is const\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   ICONV_LIBRARY\n\n#   ICONV_INCLUDE_DIR\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set ICONV_FOUND to TRUE if these two variables are set.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if the prototype is\n\n# size_t iconv(iconv_t cd, char** inbuf, size_t* inbytesleft,\n\n#              char** outbuf, size_t* outbytesleft);\n\n# or\n\n# size_t iconv (iconv_t cd, const char** inbuf, size_t* inbytesleft,\n\n#              char** outbuf, size_t* outbytesleft);\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the parameters needed to compile the following code.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Compatibility for all the ways of writing these variables\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindLIBIDN.cmake" : {
      "ObjectId" : "c769d06de6419974811c19c517239ac6aa522dc5",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libidn\n\n# Find the libidn library, and more particularly the stringprep header.\n\n#\n\n# This module defines the following variables:\n\n#   LIBIDN_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   LIBIDN_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   LIBIDN_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   LIBIDN_INCLUDE_DIR\n\n#   LIBIDN_LIBRARY\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The library containing the stringprep module is libidn\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set LIBIDN_FOUND to TRUE if these two variables are set.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Compatibility for all the ways of writing these variables\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindLIBUUID.cmake" : {
      "ObjectId" : "67352ab19528f6f5196369075a5af1c38da57f5d",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libuuid\n\n# Find the libuuid library\n\n#\n\n# This module defines the following variables:\n\n#   LIBUUID_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   LIBUUID_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   LIBUUID_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   LIBUUID_INCLUDE_DIR\n\n#   LIBUUID_LIBRARY\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set LIBUUID_FOUND to TRUE if these two variables are set.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Compatibility for all the ways of writing these variables\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindPQ.cmake" : {
      "ObjectId" : "e268b8f3e1b96c0f49c0fb666ca9ee1cd495f1b7",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libpq\n\n# Find the postgresql front end library\n\n#\n\n# This module defines the following variables:\n\n#   PQ_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   PQ_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   PQ_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   PQ_LIBRARY\n\n#   PQ_INCLUDE_DIR\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set PQ_FOUND to TRUE if these two variables are set.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindSQLITE3.cmake" : {
      "ObjectId" : "2861b37562cc1ca5f26dd9b91b3ba96ab5090c5b",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find sqlite3\n\n# Find the sqlite3 cryptographic library\n\n#\n\n# This module defines the following variables:\n\n#   SQLITE3_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   SQLITE3_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   SQLITE3_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   SQLITE3_LIBRARY\n\n#   SQLITE3_INCLUDE_DIR\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set SQLITE3_FOUND to TRUE if these two variables are set.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindSYSTEMD.cmake" : {
      "ObjectId" : "2d3f06352487e4783364ff25e5f07acb1522b2a3",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find SystemdDaemon\n\n# Find the systemd daemon library\n\n#\n\n# This module defines the following variables:\n\n#   SYSTEMD_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   SYSTEMD_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   SYSTEMD_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# than the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   SYSTEMD_LIBRARY\n\n#   SYSTEMD_INCLUDE_DIR\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set SYSTEMD_FOUND to TRUE if these two variables are set.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindUDNS.cmake" : {
      "ObjectId" : "9576b2a507c62c0bde171ee8bf8efec4299df520",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find udns\n\n# Find the udns library\n\n#\n\n# This module defines the following variables:\n\n#   UDNS_FOUND  -  True if library and include directory are found\n\n# If set to TRUE, the following are also defined:\n\n#   UDNS_INCLUDE_DIRS  -  The directory where to find the header file\n\n#   UDNS_LIBRARIES  -  Where to find the library file\n\n#\n\n# For conveniance, these variables are also set. They have the same values\n\n# as the variables above.  The user can thus choose his/her prefered way\n\n# to write them.\n\n#   UDNS_INCLUDE_DIR\n\n#   UDNS_LIBRARY\n\n#\n\n# This file is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use some standard module to handle the QUIETLY and REQUIRED arguments, and\n\n# set UDNS_FOUND to TRUE if these two variables are set.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Compatibility for all the ways of writing these variables\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "doc/Makefile" : {
      "ObjectId" : "934bdf7601a91f2644471c2b80d239d2bd9def40",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "packaging/biboumi.spec.cmake" : {
      "ObjectId" : "c841cdc6783746a514567eef46cafa5ceadececf",
      "LastModified" : "2018-09-03T20:26:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/biboumi.h.cmake" : {
      "ObjectId" : "fa99cd46112382d61b600104173f31202c6bbf25",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "unit/biboumi.service.cmake" : {
      "ObjectId" : "150045b7b935c409e1ae45d0b014b4689a8362f2",
      "LastModified" : "2018-08-29T20:10:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 990
}