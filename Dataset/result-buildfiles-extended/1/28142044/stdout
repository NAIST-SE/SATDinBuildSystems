{
  "Repository" : "28142044",
  "Revision" : "HEAD",
  "ObjectId" : "807b7bcfbd9a9808dbb924900695af8b639abdf8",
  "CommitTime" : "2019-04-05T15:51:32Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "697252fa21c64dac4093f03bbf5d7b46d6d0e6d3",
      "LastModified" : "2018-11-01T21:55:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for kbase-ui.\n\n#\n\n# The general flow is as follows:\n\n# 1. Local development = just run 'make'\n\n# 2. KBase deployment = run 'make && make deploy'\n\n# (this might take a little configuration depending on the\n\n# deployment location)\n\n# 3. Run all tests = make test\n\n#\n\n# This Makefile is mostly here as a convenience to the devops\n\n# crew. The actual build/test/deploy process is managed by\n\n# Grunt (in a common JavaScript style), but some essential tasks\n\n# are exposed here.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set TARGET to use different deploy-*.cfg files (deploy-ci, deploy-prod, etc)\n\n# currently only 'prod', 'ci', and 'next' are valid variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The config used to control the build (build task)\n\n# dev, prod\n\n# Defaults to prod\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The kbase-ui build folder to use for the docker image.\n\n# values: build, dist\n\n# Defaults to dist \n\n# For local development, one would use the build, since is much faster \n\n# to create. A debug build may be available in the future.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The deploy environment; used by dev-time image runners\n\n# dev, ci, next, appdev, prod\n\n# No default, because one should think about this.\n\n# Used to target the actual deploy config file (see kbase-ini-dir).\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The custom docker network\n\n# For local development.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The source of deployment configuration files.\n\n# The value can be a filesystem path or a url; note that the actual config (ini) file is \n\n# applied to the path based on the \"env\" \n\n# This is for development only - deployment uses it's own script to launch the image.\n\n# TODO: for the sake of completeness, https with self-signed certs should be supported.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# functions\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check_defined variable-name message\n\n# Ensures that the given variable 'variable-name' is defined; if not \n\n# prints 'message' and the process exits with 1.\n\n# thanks https://stackoverflow.com/questions/10858261/abort-makefile-if-variable-not-set\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Standard 'all' target = just do the standard build\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# See above for 'all' - just running 'make' should locally build\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Initialization here pulls in all dependencies from Bower and NPM.\n\n# This is **REQUIRED** before any build process can proceed.\n\n# bower install is not part of the build process, since the bower\n\n# config is not known until the parts are assembled...\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Perform the build. Build scnearios are supported through the config option\n\n# which is passed in like \"make build config=ci\"\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# $(if $(value network_exists),$(echo \"exists\"),$(echo \"nope\"))\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build the docker image, assumes that make init and make build have been done already\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# @cd dev; BUILD=$(build) DEPLOY_ENV=$(env) docker-compose up --build\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# @:$(call check_defined, net, \"the docker custom network: defaults to 'kbase-dev'\")\n",
        "Line" : 168,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Tests are managed by grunt, but this also mimics the workflow.\n\n#init build\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Clean slate\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If you need more clean refinement, please see Gruntfile.js, in which you will\n\n# find clean tasks for each major build artifact.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# git -c http.sslVerify=false clone https://oauth2:s5TDQnKk4kpHXCVdUNfh@gitlab.kbase.lbl.gov:1443/devops/kbase_ui_config.git\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1107
}