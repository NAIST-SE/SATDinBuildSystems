{
  "Repository" : "19470014",
  "Revision" : "HEAD",
  "ObjectId" : "06599cee9f67f8d4f3646a02eafc5c01eaa25053",
  "CommitTime" : "2017-08-07T15:51:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a2ea67ef841effb318466b1710fcb8380caea25a",
      "LastModified" : "2017-04-26T16:41:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Expand tildas and convert to absolute path\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Conctruct fake symlinks\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ...and add them into the installation\n\n# I know, I know, I definitely know how much dirty it is\n\n# Unfortunately, cpack cannot trace symlinks automatically and cmake-install does not support smth like install(SYMLINK)\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Disabled. We have already created symlinks manually above\n\n# foreach(tool ${tools})\n\n#     install(CODE \"EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E create_symlink \\\"${CMAKE_INSTALL_PREFIX}/${INSTALL_DIR}/${tool}\\\" \\\"${CMAKE_INSTALL_PREFIX}/bin/${tool}\\\")\")\n\n# endforeach()\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO add an arg\n",
        "Line" : 91,
        "CharPositionInLine" : 70
      },
      "5" : {
        "Text" : "# Are they really necessary?\n\n# SET(CPACK_PACKAGE_VERSION_MAJOR \"3\")\n\n# SET(CPACK_PACKAGE_VERSION_MINOR \"0\")\n\n# SET(CPACK_PACKAGE_VERSION_PATCH \"0\")\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO Add seaborn somehow\n\n# set(CPACK_DEBIAN_PACKAGE_SUGGESTS \"python-matplotlib, python-biopython, python-numpy, python-scipy, python-pandas\")\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: Add full description\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# trace debug information during CPackDeb run\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPM\n\n# trace debug information during CPackRPM run\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO check\n",
        "Line" : 122,
        "CharPositionInLine" : 64
      },
      "11" : {
        "Text" : "# set(CPACK_RPM_PACKAGE_SUGGESTS ${CPACK_DEBIAN_PACKAGE_SUGGESTS})\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Package parameters should be set BEFORE include(CPack)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Makefile" : {
      "ObjectId" : "6063a8177bdd166c8565bee5d38515f1996dbb2a",
      "LastModified" : "2017-05-23T22:14:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Default build type\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default install prefix\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "configs/CMakeLists.txt" : {
      "ObjectId" : "00c4f7308779fc15c42015bcf666956ae6ab48ef",
      "LastModified" : "2017-05-23T22:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove extention\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "ext/include/btree/CMakeLists.txt" : {
      "ObjectId" : "d005e1582ed765a124c1d28ea48a582c31906e35",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2013 Google Inc. All Rights Reserved.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake doesn't have a way to pure template library, \n\n# add_library(cppbtree btree.h btree_map.h btree_set.h \n\n#             safe_btree.h safe_btree_map.h safe_btree_set.h)\n\n# set_target_properties(cppbtree PROPERTIES LINKER_LANGUAGE CXX)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ext/include/samtools/bcftools/Makefile" : {
      "ObjectId" : "be831de67c2ebdf64586dd79523921fbccda9698",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-m64 #-arch ppc\n",
        "Line" : 2,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "ext/include/samtools/examples/Makefile" : {
      "ObjectId" : "309399f3affae42e494903604243d36a11c16f3d",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ../samtools pileup ex1.bam|perl -ape '$_=$F[4];s/(\\d+)(??{\".{$1}\"})|\\^.//g;@_=(tr/A-Z//,tr/a-z//);$_=join(\"\\t\",@F[0,1],@_).\"\\n\"'\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ../samtools pileup -cf ex1.fa ex1.bam|perl -ape '$_=$F[8];s/\\^.//g;s/(\\d+)(??{\".{$1}\"})|\\^.//g;@_=(tr/A-Za-z//,tr/,.//);$_=join(\"\\t\",@F[0,1],@_).\"\\n\"'\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ext/include/samtools/misc/Makefile" : {
      "ObjectId" : "d36e7acb4a4c68956f3fed6dbcc16d9c042dc729",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-m64 #-arch ppc\n",
        "Line" : 3,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "ext/src/CMakeLists.txt" : {
      "ObjectId" : "258c506f797547dc3e01e3cca806992f582c8236",
      "LastModified" : "2017-05-23T22:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(nlopt)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_subdirectory(ConsensusCore)\n\n# add_subdirectory(samtools)\n\n# add_subdirectory(cppformat)\n\n# add_subdirectory(ssw)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(mph_index)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ext/src/ConsensusCore/CMakeLists.txt" : {
      "ObjectId" : "e737da18309c2279f5cd954bfa2fc455b7e580db",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/boost/CMakeLists.txt" : {
      "ObjectId" : "afe3ad161f9cea6fa00f79518d14fe3b150bed47",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/src/boost/filesystem/CMakeLists.txt" : {
      "ObjectId" : "10c6e1a068dd5a4f4523f511efdee1fdb6b1ee47",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/boost/iostreams/CMakeLists.txt" : {
      "ObjectId" : "6761feae7cca8a6b98bf86ffb9bdcb1a77b753f9",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/boost/program_options/CMakeLists.txt" : {
      "ObjectId" : "40bf018476a57bd0a87499ebe04e286a5550e915",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/boost/random/CMakeLists.txt" : {
      "ObjectId" : "889f640a76e60acd22dd28625e2035d49121e8cb",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/boost/regex/CMakeLists.txt" : {
      "ObjectId" : "0e3f9458b6d4a2c0d8fef8061a9a0912267486c2",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/boost/system/CMakeLists.txt" : {
      "ObjectId" : "18c866dc038056842b0d9dc01d28567955b71553",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/bzip2/CMakeLists.txt" : {
      "ObjectId" : "c399375c41ef140d9ecfe66c28325be76715a567",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/cppformat/CMakeLists.txt" : {
      "ObjectId" : "e216395d7af71779e7037f23277ff1aba0eb6c5a",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/gmock/CMakeLists.txt" : {
      "ObjectId" : "18f7763ceb3e84c00b5286d89ce82466845167fb",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/gtest/CMakeLists.txt" : {
      "ObjectId" : "0d678055a95ed2cfff8045e69c04baa9ba544fa1",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/jemalloc/CMakeLists.txt" : {
      "ObjectId" : "e624f3adff38bca193443b89c3f40984da147e37",
      "LastModified" : "2017-05-23T22:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2015 Saint Petersburg State University\n\n# Copyright (c) 2011-2014 Saint Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TLS on Darwin is \"fake\". We cannot use it with jemalloc, because\n\n# emulated tls wants to use calloc() and friends\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ext/src/mph_index/CMakeLists.txt" : {
      "ObjectId" : "461cb85775e6b3dfe916f95915976607f88b6045",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2015 Saint Petersburg State University\n\n# Copyright (c) 2011-2014 Saint Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/src/nlopt/CMakeLists.txt" : {
      "ObjectId" : "80418092f5604ae85eb2110bb424202d6063ec73",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/samtools/CMakeLists.txt" : {
      "ObjectId" : "2eaf422f9b5909a7b7926e41b268b4dcafdc1d8a",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2015 Saint Petersburg State University\n\n# Copyright (c) 2011-2014 Saint Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ext/src/samtools/Makefile" : {
      "ObjectId" : "2f51bfcb920aef7cfada148a1743c1f1fa9b47db",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#LDFLAGS=\t\t-Wl,-rpath,\\$$ORIGIN/../lib\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -lXCurses\n",
        "Line" : 18,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 2
    },
    "ext/src/samtools/bcftools/Makefile" : {
      "ObjectId" : "be831de67c2ebdf64586dd79523921fbccda9698",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-m64 #-arch ppc\n",
        "Line" : 2,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "ext/src/samtools/examples/Makefile" : {
      "ObjectId" : "309399f3affae42e494903604243d36a11c16f3d",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ../samtools pileup ex1.bam|perl -ape '$_=$F[4];s/(\\d+)(??{\".{$1}\"})|\\^.//g;@_=(tr/A-Z//,tr/a-z//);$_=join(\"\\t\",@F[0,1],@_).\"\\n\"'\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ../samtools pileup -cf ex1.fa ex1.bam|perl -ape '$_=$F[8];s/\\^.//g;s/(\\d+)(??{\".{$1}\"})|\\^.//g;@_=(tr/A-Za-z//,tr/,.//);$_=join(\"\\t\",@F[0,1],@_).\"\\n\"'\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ext/src/samtools/misc/CMakeLists.txt" : {
      "ObjectId" : "e443d1c6f88c6604772bfdfb1f86da57e76e901f",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==========================\n\n# BamTools CMakeLists.txt\n\n# (c) 2010 Derek Barnett\n\n#\n\n# src/api/\n\n# ==========================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list include paths\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add compiler definitions \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# (for proper exporting of library symbols)\n",
        "Line" : 12,
        "CharPositionInLine" : 42
      },
      "4" : {
        "Text" : "# fetch all internal source files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make list of all API source files\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ext/src/samtools/misc/Makefile" : {
      "ObjectId" : "d36e7acb4a4c68956f3fed6dbcc16d9c042dc729",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-m64 #-arch ppc\n",
        "Line" : 3,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "ext/src/ssw/CMakeLists.txt" : {
      "ObjectId" : "967be9dd9ea62f76ff5753b683db3662acaa9554",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2015 Saint Petersburg State University\n\n# Copyright (c) 2011-2014 Saint Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/src/yaml-cpp/CMakeLists.txt" : {
      "ObjectId" : "23f798759657f3c9225bc72f5dabc226eef98099",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/src/zlib/CMakeLists.txt" : {
      "ObjectId" : "1c75e30e620d3aeb29718bc8c3cec7202fb61c5b",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/tools/CMakeLists.txt" : {
      "ObjectId" : "4bfac57aecff5eb1b51281abdf9659a0da730e32",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2015 Saint Petersburg State University\n\n# Copyright (c) 2011-2014 Saint Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/tools/metis-5.1.0/CMakeLists.txt" : {
      "ObjectId" : "456745570e0d559090415c71c1560e19e829079f",
      "LastModified" : "2017-05-23T22:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find subversion revision.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/tools/metis-5.1.0/GKlib/GKlibSystem.cmake" : {
      "ObjectId" : "3fcc29108d0a1817597d5e40a8fd686d7bf52e6e",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup options.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add compiler flags.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GCC opts.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GCC warnings.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sun insists on -xc99.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find OpenMP if it is requested.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add various definitions.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add various options\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check for features.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Custom check for TLS.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This if checks if that value is cached or not.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Finally set the official C flags.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find GKlib sources.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "ext/tools/metis-5.1.0/GKlib/Makefile" : {
      "ObjectId" : "d17b4f44c9621fcebdfa09a1378c7f842540959d",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Configuration options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Basically proxies everything to the builddir cmake.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Process configuration options.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ext/tools/metis-5.1.0/GKlib/test/CMakeLists.txt" : {
      "ObjectId" : "372b0e2f43a22ce8cb0aa35e5b04d498ec88aeb9",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Where the header files reside\n\n#include_directories(../)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build program.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "pipeline_makefiles/compilation/Makefile" : {
      "ObjectId" : "f2e6909f3defda9c7950198944df5c0255071d3b",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/dense_subgraph_finder/Makefile" : {
      "ObjectId" : "def8bc5f9c444f08c8c5117cf6fa5522d5397897",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/final_repertoire/Makefile" : {
      "ObjectId" : "ba6e0e2bcb4747c3d62121b58d63c5b808ee28e8",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/ig_consensus_finder/Makefile" : {
      "ObjectId" : "6de2730f6c379b21ac0a3864b29d7050ca27283e",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/ig_graph_constructor/Makefile" : {
      "ObjectId" : "4e04c5127c8f7f85661fff73309cf3a135419b1e",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/intermediate_ig_trie_compressor/Makefile" : {
      "ObjectId" : "ff3f070b809507a17e89b8cd7d03d503341e45db",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/merged_reads/Makefile" : {
      "ObjectId" : "d8d0b87f8d03e89f23ac902d3b018298c366e66d",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/no_compilation/Makefile" : {
      "ObjectId" : "5f39205505afc0a2fab87c3ad854963fce013cd4",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/umi_clustering/Makefile" : {
      "ObjectId" : "2fe95c9f1edfd6da90b149e689e96b807690e869",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/umis/Makefile" : {
      "ObjectId" : "847d363a9eeaa92441f64da4d0eaa7e804abdaaa",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/vj_finder/Makefile" : {
      "ObjectId" : "529d01bfcff3f79f3739e85c5fcdb952f99096c4",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pipeline_makefiles/vj_finder_input/Makefile" : {
      "ObjectId" : "ec639b8595bd2905477d6bdd21711fb7ebea3eea",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "16468cd5e61ae2c730debccb32e205609fdb8a03",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n\n############################################################################\n\n# Copyright (c) 2011-2014 Saint-Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hard prerequisites\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# export compiler arguments (need for autocompletion)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# allow more human readable \"if then else\" constructs\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# modules to find additional libraries (like zlib, boost and etc)\n\n# Add path for custom modules\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define various dirs\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Everything option-dependent\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Sanity check our source directory to make sure that we are not trying to\n\n# generate an in-tree build\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Handle commond deps\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add flags if necessary\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Handle common includes\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Handle common libs\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Enable testing (check & check_essential targets)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Build external dependencies (if any)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# sub projects\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/algorithms/CMakeLists.txt" : {
      "ObjectId" : "4806b5868ef71f61401e6f67d2389bf6b614f05f",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/build_info/CMakeLists.txt" : {
      "ObjectId" : "38b2e58b74387690106e8f2b34a110acd66db322",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/build_info/rpavlik-cmake-modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "d3d253ff97d30b40cda748d27d44cdb216fe0539",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# set(out \"${out}-${res}-NOTFOUND\")\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ALEX WAS HERE\n",
        "Line" : 122,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 9
    },
    "src/cdr_labeler/CMakeLists.txt" : {
      "ObjectId" : "b0460eb3640b8b8df420e35e116e4410a2559462",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2011-2014 Saint-Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cmake/Modules/FindCurses.cmake" : {
      "ObjectId" : "44c038f892ccb4641115885ca4fa7f897633102b",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the curses include file and library\n\n#\n\n#  CURSES_FOUND - system has Curses\n\n#  CURSES_INCLUDE_DIR - the Curses include directory\n\n#  CURSES_LIBRARIES - The libraries needed to use Curses\n\n#  CURSES_HAVE_CURSES_H - true if curses.h is available\n\n#  CURSES_HAVE_NCURSES_H - true if ncurses.h is available\n\n#  CURSES_HAVE_NCURSES_NCURSES_H - true if ncurses/ncurses.h is available\n\n#  CURSES_HAVE_NCURSES_CURSES_H - true if ncurses/curses.h is available\n\n#  CURSES_LIBRARY - set for backwards compatibility with 2.4 CMake\n\n#\n\n# Set CURSES_NEED_NCURSES to TRUE before the FIND_PACKAGE() command if NCurses \n\n# functionality is required.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CURSES_USE_NCURSES indicates whether ncurses should be used and searched.\n\n# This is the case when only ncurses has been found.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if CURSES_NEED_NCURSES is TRUE, then \n\n# if ncurses has been found, check whether it has wsyncup\n\n# if curses has been found, check whether it has wsyncup\n\n# see which one supports it, prefer ncurses over curses\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# # Not sure the logic is correct here.\n\n# # If NCurses is required, use the function wsyncup() to check if the library\n\n# # has NCurses functionality (at least this is where it breaks on NetBSD).\n\n# # If wsyncup is in curses, use this one.\n\n# # If not, try to find ncurses and check if this has the symbol.\n\n# # Once the ncurses library is found, search the ncurses.h header first, but\n\n# # some web pages also say that even with ncurses there is not always a ncurses.h:\n\n# # http://osdir.com/ml/gnome.apps.mc.devel/2002-06/msg00029.html\n\n# # So at first try ncurses.h, if not found, try to find curses.h under the same\n\n# # prefix as the library was found, if still not found, try curses.h with the \n\n# # default search paths.\n\n# IF(CURSES_CURSES_LIBRARY  AND  CURSES_NEED_NCURSES)\n\n#   INCLUDE(CheckLibraryExists)\n\n#   CHECK_LIBRARY_EXISTS(\"${CURSES_CURSES_LIBRARY}\" wsyncup \"\" CURSES_CURSES_HAS_WSYNCUP)\n\n# \n\n#   IF(CURSES_NCURSES_LIBRARY  AND NOT  CURSES_CURSES_HAS_WSYNCUP)\n\n#     CHECK_LIBRARY_EXISTS(\"${CURSES_NCURSES_LIBRARY}\" wsyncup \"\" CURSES_NCURSES_HAS_WSYNCUP)\n\n#     IF( CURSES_NCURSES_HAS_WSYNCUP)\n\n#       SET(CURSES_USE_NCURSES TRUE)\n\n#     ENDIF( CURSES_NCURSES_HAS_WSYNCUP)\n\n#   ENDIF(CURSES_NCURSES_LIBRARY  AND NOT  CURSES_CURSES_HAS_WSYNCUP)\n\n# \n\n# ENDIF(CURSES_CURSES_LIBRARY  AND  CURSES_NEED_NCURSES)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for compatibility with older FindCurses.cmake this has to be in the cache\n\n# FORCE must not be used since this would break builds which preload a cache wqith these variables set\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# we need to find ncurses\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for compatibility with older FindCurses.cmake this has to be in the cache\n\n# FORCE must not be used since this would break builds which preload a cache wqith these variables set\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# for compatibility with older FindCurses.cmake this has to be in the cache\n\n# FORCE must not be used since this would break builds which preload a cache wqith these variables set\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Need to provide the *_LIBRARIES\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Proper name is *_INCLUDE_DIR\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CURSES_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/cmake/Modules/FindGooglePerfTools.cmake" : {
      "ObjectId" : "b5509a0804e6df6ec50ef4183d38eb06efaa3390",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find Google perftools\n\n# Find the Google perftools includes and libraries\n\n# This module defines\n\n#  GOOGLE_PERFTOOLS_INCLUDE_DIR, where to find heap-profiler.h, etc.\n\n#  GOOGLE_PERFTOOLS_FOUND, If false, do not try to use Google perftools.\n\n# also defined for general use are\n\n#  TCMALLOC_LIBRARIES, where to find the tcmalloc library.\n\n#  STACKTRACE_LIBRARIES, where to find the stacktrace library.\n\n#  PROFILER_LIBRARIES, where to find the profiler library.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If GOOGLE_PERFTOOLS_ROOT was defined in the environment, use it.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert GOOGLE_PERFTOOLS_ROOT to \"normal\" path\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/Modules/FindReadline.cmake" : {
      "ObjectId" : "3ff3535c8e7e286ecb80b2b91a4d3f2631a6ef90",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GNU Readline library finder\n\n#FIND_PATH(READLINE_INCLUDE_DIR readline/readline.h)\n\n#FIND_LIBRARY(READLINE_LIBRARY NAMES readline) \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF (READLINE_INCLUDE_DIR AND READLINE_LIBRARY)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SET(READLINE_FOUND TRUE)\n\n#MESSAGE(STATUS \"Found Readline library: ${READLINE_LIBRARY}\")\n\n#MESSAGE(STATUS \"Include dir is: ${READLINE_INCLUDE_DIR}\")\n\n#INCLUDE_DIRECTORIES(${READLINE_INCLUDE_DIR})\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#ELSE (READLINE_INCLUDE_DIR AND READLINE_LIBRARY)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#SET(READLINE_FOUND FALSE)\n\n#MESSAGE(FATAL_ERROR \"** Readline library not found!\\n** Your distro may provide a binary for Readline e.g. for ubuntu try apt-get install libreadline5-dev\")\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#ENDIF (READLINE_INCLUDE_DIR AND READLINE_LIBRARY)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 2008-04-22 The next clause used to read like this:\n\n#\n\n#  FIND_LIBRARY(READLINE_LIBRARY NAMES readline)\n\n#        FIND_LIBRARY(NCURSES_LIBRARY NAMES ncurses )\n\n#        include(FindPackageHandleStandardArgs)\n\n#        FIND_PACKAGE_HANDLE_STANDARD_ARGS(Readline DEFAULT_MSG NCURSES_LIBRARY READLINE_INCLUDE_DIR READLINE_LIBRARY )\n\n#\n\n# I was advised to modify it such that it will find an ncurses library if\n\n# required, but not if one was explicitly given, that is, it allows the\n\n# default to be overridden. PH \n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/cmake/check.cmake" : {
      "ObjectId" : "515201d8cde7d32a83aee93c3c49596f8359eaf6",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/deps.cmake" : {
      "ObjectId" : "c048544ce7e7bf3be5d3a544c943924d69ed6d2b",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/flags.cmake" : {
      "ObjectId" : "d62501a0d3a238de994535b78d3a95325c5d4c5f",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Handle OpenMP flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use parallel libstdc++ if possible\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if (NOT \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n\n#   message(FATAL_ERROR \"IgReC requires OpenMP to be available\")\n\n# endif()\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#add_definitions(-Wall)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use libc++ with clang due to C++11 mode\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Require libsupc++ on Linux\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Make sure we're building with frame pointer if tcmalloc is in use\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We will need this at least for jemalloc\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cmake/includes.cmake" : {
      "ObjectId" : "d16948c3aa1c26d4c3846ac1cecce30a5f0d68e1",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cmake/libs.cmake" : {
      "ObjectId" : "7e1c04e0b1ce77baf31d664b408425c52b668523",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Collect all the necessary common libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add TCMalloc\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/options.cmake" : {
      "ObjectId" : "d5b9c372d82ca1bb50de355f0b5dbd99c1c5bc93",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default configuration\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define option for turning on/off debug logging\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define option for static / dynamic build.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# it'll make cmake to find libraries archives, not dynamic link\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Define minimum and maximum K\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define boost root\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Various internal stuff\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "99bd9540e674a8c1d005a90c9aeb075a343dc174",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dense_sgraph_finder/CMakeLists.txt" : {
      "ObjectId" : "a5457bbd9e34d449beb68495e2733f5f6abf1685",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2011-2014 Saint-Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/fast_ig_tools/CMakeLists.txt" : {
      "ObjectId" : "328b5399ced4c527ef5f06e996e99565c954ad4a",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# RnD tools\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/graph_utils/CMakeLists.txt" : {
      "ObjectId" : "1a415075ea70937bb8c371acafc97bcdd11cc9a5",
      "LastModified" : "2017-03-29T14:41:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ig_simulator/CMakeLists.txt" : {
      "ObjectId" : "a78a270fd4c9c8d1deaf333659a94deff1ee40d5",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ig_tools/CMakeLists.txt" : {
      "ObjectId" : "8b1b866a98dd3e32cea3c4e7bce86ba227160c8d",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ig_tools/fastq_to_fasta/CMakeLists.txt" : {
      "ObjectId" : "a6c408f56013b9aa399857a1025ce67459a04015",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ig_tools/merged_reads_stats_calculator/CMakeLists.txt" : {
      "ObjectId" : "ec92168ff4647ae744c023fe3ee0f42b04612fc3",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/io/CMakeLists.txt" : {
      "ObjectId" : "a18a193aeadc0c894a81dbf443468a95cd3c65e2",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2011-2014 Saint-Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/paired_read_merger/CMakeLists.txt" : {
      "ObjectId" : "25011b1d721fe963960a7931c3a60ef11d4e3b68",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pcr_simulator/CMakeLists.txt" : {
      "ObjectId" : "9770ba466569163fdc5c76f88277f6eec6e7ae94",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "39bbd75dcc20386c39e853fb98798cd3ac29d137",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/umi_experiments/CMakeLists.txt" : {
      "ObjectId" : "7041899eac83439572accc9b855a7279bb434586",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for CLion to include them into the project\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_BUILD_TYPE \"Debug\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/vdj_utils/CMakeLists.txt" : {
      "ObjectId" : "fbf146b9f42d5c2806f6c814debc4a68b628d74b",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/vj_finder/CMakeLists.txt" : {
      "ObjectId" : "d39372320ab3c22b3bcf1a68fd01f5a9c14bae8e",
      "LastModified" : "2017-07-03T15:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Copyright (c) 2011-2014 Saint-Petersburg Academic University\n\n# All Rights Reserved\n\n# See file LICENSE for details.\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 57,
    "MAKEFILE" : 21
  },
  "ElapsedTime" : 3139
}