{
  "Repository" : "9866",
  "Revision" : "HEAD",
  "ObjectId" : "0da91a7dce594fac7c61db8bc4407fe5e7e56baf",
  "CommitTime" : "2019-04-14T13:11:27Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bc988e950ccbc2c2fcdada98dc1f24ade16fe842",
      "LastModified" : "2019-04-14T13:11:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# http://www.cmake.org/cmake/help/v3.0/policy/CMP0042.html\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Options\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We use a cached string variable instead of the standard (boolean) OPTION\n\n# command so that we can default to auto-detecting optional depencies, while\n\n# still providing a mechanism to force/disable these optional dependencies, as\n\n# prescribed in http://www.gentoo.org/proj/en/qa/automagic.xml\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Proprietary Linux games often ship their own libraries (zlib, libstdc++,\n\n# etc.) in order to ship a single set of binaries across multiple\n\n# distributions.  Given that apitrace wrapper modules will be loaded into those\n\n# processes, they must not depend on any shared object that could also be\n\n# provided by such applications.  See also\n\n# http://lists.freedesktop.org/archives/mesa-dev/2015-March/079121.html\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# XXX: Should probably throw a run-time too.\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "##############################################################################\n\n# Find dependencies\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for compiler TLS support.  We don't use compiler TLS support on Windows\n\n# because, even if the compiler supports it, Windows XP does not support TLS on\n\n# DLLs.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# http://msdn.microsoft.com/en-us/library/aa383745.aspx\n\n# Windows 8\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Log Windows SDK version\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# https://developer.microsoft.com/en-us/windows/projects/campaigns/windows-dev-essentials-how-windows-10-sdks-ship\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Print a clear message when X11 is not found\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Use Waffle for eglretrace\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "##############################################################################\n\n# Set global build options\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# No RTTI required\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Disable C++ exceptions\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Enable math constants defines\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# No min/max macros\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# XXX: it's safer to use ssize_t everywhere instead of disabling warning\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# signed/unsigned mismatch\n\n# not a valid value for switch of enum\n\n# unreferenced formal parameter\n\n# conditional expression is constant\n\n# conversion from 'type1' to 'type2', possible loss of data\n\n# conversion from 'type1' to 'type2', possible loss of data\n\n# unreferenced local function has been removed\n\n# assignment operator could not be generated\n\n# 'noexcept' used with no exception handling mode specified\n\n# forcing value to bool 'true' or 'false' (performance warning)\n",
        "Line" : 248,
        "CharPositionInLine" : 33
      },
      "20" : {
        "Text" : "# Use static runtime\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Enable and require C++11\n\n#\n\n# We must use `-std=gnu++11` instead `-std=c++11` as the latter defines\n\n# __STRICT_ANSI__ which prevents _isnan from being declared with MinGW.\n\n#\n\n# See also:\n\n# - https://gcc.gnu.org/projects/cxx0x.html\n\n# - http://clang.llvm.org/cxx_status.html\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# We require at least GCC 4.9 for decent C++11 support\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# XXX: it's safer to use ssize_t everywhere instead of disabling warning\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# comparison between signed and unsigned integer expressions\n",
        "Line" : 294,
        "CharPositionInLine" : 43
      },
      "26" : {
        "Text" : "# Disable strict aliasing assumptions.  We generate a lot of C++ code, and\n\n# it's not always easy to guarantee or spot when strict aliasing\n\n# assumptions are violated.  Above all, the benefit is not worth the risk.\n",
        "Line" : 296,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# No RTTI required\n\n# XXX: there's a dynamic_cast in Android\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Disable C++ exceptions\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Enable Address Sanitizer\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Enable SSE2 intrinsics on x86\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# And tell GCC to assume 4 bytes alignment, many Linux/Windows\n\n# applications only guarantee that, but not on systems where ABI\n\n# clearly states otherwise.\n\n#\n\n# See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38496\n",
        "Line" : 320,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# Be nice to Eclipse\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Avoid depending on MinGW runtime DLLs\n",
        "Line" : 351,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# disable frame pointer omission\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Increase number of sections in obj files\n",
        "Line" : 367,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Enable Data Execution Prevention and Address Space Layout Randomization\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Use more than 2GB virtual memory address space for 32-bits processes\n\n# where available (3GB on 32-bits Windows with 4GT, 4GB on 64-bits Windows)\n",
        "Line" : 381,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# For RTLD_DEFAULT and RTLD_NEXT\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Force certain components to always be built as release\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# TODO: Needs special care due since runtime must match\n",
        "Line" : 406,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Put all executables into the same top level build directory, regardless of\n\n# which subdirectory they are declared\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Single configuration\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Multiple configuration\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "##############################################################################\n\n# Installation directories\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Debian multiarch support\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# On Windows/MacOSX, applications are usually installed on a directory of\n\n# their own\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Allow customization of the doc installation dir (Slackware uses different\n\n# location)\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "##############################################################################\n\n# Bundled dependencies\n\n#\n\n# We prefer to bundle and statically link against many dependencies:\n\n# - on Windows to make it easy to deploy the wrappers DLLs\n\n# - on unices to prevent symbol collisions when tracing applications that link\n\n# against other versions of these libraries\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# zlib 1.2.4-1.2.5 made it impossible to read the last block of incomplete\n\n# gzip traces (e.g., apitrace-tests/traces/zlib-no-eof.trace).\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# FindPNG.cmake will search ZLIB internally (without requiring any particular\n\n# version), adding its include dirs and libraries, and overwriting ZLIB_FOUND.\n\n# So if the system's ZLIB was did not meet the our requirements, then there's\n\n# no safe way to use the system's PNG library.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# We use bundled headers for all Khronos APIs, to guarantee support for both\n\n# OpenGL and OpenGL ES at build time, because the OpenGL and OpenGL ES 1 APIs\n\n# are so intertwined that conditional compilation extremely difficult. This\n\n# also avoids missing/inconsistent declarations in system headers.\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# We use non-standard C++ flags, so we can't just use GTest's CMakeLists.txt\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Convenience macro for adding unit tests\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "##############################################################################\n\n# Common libraries / utilities\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "##############################################################################\n\n# CLI\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "##############################################################################\n\n# GUI\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "##############################################################################\n\n# Additional tests\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "##############################################################################\n\n# Packaging\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Use current date in YYYYMMDD format as patch number \n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# cpack mistakenly detects Mingw-w64 as win32\n",
        "Line" : 641,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# See http://www.vtk.org/Wiki/CMake:CPackPackageGenerators\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 62
    },
    "cli/CMakeLists.txt" : {
      "ObjectId" : "a018920261cce4c295f3099e1fcbd090e8861e21",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Expose the binary/install directories to source\n\n#\n\n# TODO: Use the same directory layout, for both build and install directories,\n\n# so that binaries can find each other using just relative paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On debug builds tell where the source is so that scripts can be found\n\n# http://www.cmake.org/cmake/help/v3.0/policy/CMP0043.html\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/ConvenienceLibrary.cmake" : {
      "ObjectId" : "eb6443e1c79a8d5b02d0367004b1e15633385526",
      "LastModified" : "2014-07-17T12:33:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function for convenience libraries, ie., libraries which can be statically\n\n# linked into shared libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure it can be statically linked onto shared libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/FindDirectX.cmake" : {
      "ObjectId" : "5efc012321d3d10b1862ed72ffc70af1cd0a48e3",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find DirectX include directories and libraries\n\n#\n\n# Once done this will define:\n\n#\n\n#  DirectX_XYZ_INCLUDE_FOUND - system has the include for the XYZ API\n\n#  DirectX_XYZ_INCLUDE_DIR   - include directory for the XYZ API\n\n#\n\n# Where XYZ can be any of:\n\n#\n\n#  DDRAW\n\n#  D3D\n\n#  D3D8\n\n#  D3D9\n\n#  D3D10\n\n#  D3D10_1\n\n#  D3D11\n\n#  D3D11_1\n\n#  D3D11_2\n\n#  D2D1\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Can't use \"$ENV{ProgramFiles(x86)}\" to avoid violating CMP0053.  See\n\n# http://public.kitware.com/pipermail/cmake-developers/2014-October/023190.html\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# With VS 2011 and Windows 8 SDK, the DirectX SDK is included as part of\n\n# the Windows SDK.\n\n#\n\n# See also:\n\n# - http://msdn.microsoft.com/en-us/library/windows/desktop/ee663275.aspx\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find a header in the DirectX SDK\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Find a header in the Windows SDK\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Windows SDK\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 6
    },
    "cmake/FindSNAPPY.cmake" : {
      "ObjectId" : "f50e154c3bc3eb7a5596721d58fa6570cdb237d5",
      "LastModified" : "2015-03-13T12:25:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find SNAPPY - A fast compressor/decompressor\n\n#\n\n# This module defines\n\n#  SNAPPY_FOUND - whether the snappy library was found\n\n#  SNAPPY_LIBRARIES - the snappy library\n\n#  SNAPPY_INCLUDE_DIR - the include path of the snappy library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Findprocps.cmake" : {
      "ObjectId" : "e614d7cd269e953daa1b5b64eb0b75cb6998e498",
      "LastModified" : "2015-03-13T12:25:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find procps directories and libraries\n\n#\n\n# Once done this will define:\n\n#\n\n#  PROCPS_FOUND\n\n#  PROCPS_INCLUDE_DIR\n\n#  PROCPS_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/InstallPDB.cmake" : {
      "ObjectId" : "d7ed761827ed47810a896ede06cfbffa75a2e31c",
      "LastModified" : "2015-03-13T12:25:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The documentation for the INSTALL command doesn't mention generator\n\n# expressions, but they actually work quite well, both when building\n\n# MSBuild and Ninja.\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "dispatch/CMakeLists.txt" : {
      "ObjectId" : "ddb38153261b5580263382d21387e05e82269625",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# Dispatch\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Wrap glproc.{hpp,cpp} as a target to prevent the command from being executed\n\n# multiple times simultanously, when the targets that depend on it are built in\n\n# parallel.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gui/CMakeLists.txt" : {
      "ObjectId" : "5baf35526971659a0b04b6087893be47b8222abf",
      "LastModified" : "2018-02-21T14:29:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake will throw a cryptic message if an user unwittingly invokes it from\n\n# this directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://cmake.org/cmake/help/v3.11/policy/CMP0071.html\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Workaround https://github.com/apitrace/apitrace/issues/528\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Silence `Note: No relevant classes found. No output generated.`\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#add_app_icon(qapitrace_SRCS ../icons/hi*-qapitrace.png)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Avoid qt5_use_modules. See also:\n\n# - https://bugreports.qt.io/browse/QTBUG-39457\n\n# - http://doc.qt.io/qt-5/cmake-manual.html\n\n# - http://www.kdab.com/using-cmake-with-qt-5/\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use Windows subsystem (i.e., no console).\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# When the Windows subsystem is chosen by default MSVC expects WinMain()\n\n# entry point, but we rather use plain old main() everywhere.\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "########### install files ###############\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#install (FILES qapitrace.desktop DESTINATION ${XDG_APPS_INSTALL_DIR})\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Deployt Qt dependencies\n\n#\n\n# See:\n\n# - http://doc.qt.io/qt-5/windows-deployment.html\n\n#\n\n# XXX: windeployqt can fail if there's weird stuff in the Path env var, so we\n\n# invoke it with a sanitized Path, via `cmake -E env` that was introduced in\n\n# CMake 3.1.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# http://stackoverflow.com/a/24676432\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# It's safer to use `\\` separateors in the Path, but we need to escape them\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# windeployqt needs VCINSTALLDIR to copy MSVC Runtime files, but it's\n\n# usually not define with MSBuild builds.\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# https://developercommunity.visualstudio.com/solutions/21956/view.html\n",
        "Line" : 161,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 15
    },
    "helpers/CMakeLists.txt" : {
      "ObjectId" : "b4e9648153ac6bde57a93233340a8b0698614c3a",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# API helpers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "inject/CMakeLists.txt" : {
      "ObjectId" : "e98b077d28510595309b09ae50462dffcb2f591a",
      "LastModified" : "2016-09-21T10:46:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "be8a4454ccd6eb51579a77cb211fd3395411ffce",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/guids/CMakeLists.txt" : {
      "ObjectId" : "ce0f86da6128cd80e5f1f377cec31d1aef6d45dd",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/highlight/CMakeLists.txt" : {
      "ObjectId" : "1f3c59620de484b254c2ea86f8f317099735d116",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/image/CMakeLists.txt" : {
      "ObjectId" : "1cc3c4ce1d9c4369e122b603c391386eff340d8b",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/os/CMakeLists.txt" : {
      "ObjectId" : "222411e0d274692190fc7780891bdb3301998802",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/trace/CMakeLists.txt" : {
      "ObjectId" : "c68bd00f62de7d19bd16ef8e29dcc4c90c7c3463",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/CMakeLists.txt" : {
      "ObjectId" : "76dc836237fade7e1b184da71ca9431d513c1b53",
      "LastModified" : "2018-11-22T19:55:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# API retracers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CGS*\n",
        "Line" : 134,
        "CharPositionInLine" : 49
      },
      "2" : {
        "Text" : "#\"-framework OpenGL\" # CGL*\n",
        "Line" : 135,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# Bundle Info.plist.  Set sdk version to 10.13.0 to avoid blank screen on Mojave\n",
        "Line" : 138,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# gdb doesn't like when pthreads is loaded through dlopen (which happens\n\n# when dlopen'ing libGL), so link pthreads to avoid this issue.  See also\n\n# http://stackoverflow.com/questions/2702628/gdb-cannot-find-new-threads-generic-error\n",
        "Line" : 148,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 5
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "11384a4454296d5c450a64ddcb2e725c6a3d7de2",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "specs/scripts/Makefile" : {
      "ObjectId" : "2332839003bb02b19d6f3f965148c09b89b202c7",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "thirdparty/brotli/CMakeLists.txt" : {
      "ObjectId" : "da92d65676ab460440e7699e4fa9e2f1dfaa8548",
      "LastModified" : "2018-12-20T09:41:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/crc32c/CMakeLists.txt" : {
      "ObjectId" : "c9fa4051cb53d6943bedffc1511117a8eb947a36",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/devcon/CMakeLists.txt" : {
      "ObjectId" : "290d7a2209f8ada78dcc12986781e9d4fd830a4f",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/directxtex/CMakeLists.txt" : {
      "ObjectId" : "3c4bd6a362e58ba53d1a3f6ea4480442f880192c",
      "LastModified" : "2018-11-22T19:55:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Several MinGW headers are lacking.  Use our own.\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "#inhibit warnings\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Force include this header with tweaks for mingw\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# MSVC uses intrinsics by default, but it seems to expose bugs for some\n\n# formats.\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#DirectXTex/DirectXTexD3D11.cpp\n\n#DirectXTex/DirectXTexDDS.cpp\n\n#DirectXTex/DirectXTexFlipRotate.cpp\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#DirectXTex/DirectXTexNormalMaps.cpp\n\n#DirectXTex/DirectXTexResize.cpp\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "thirdparty/dxerr/CMakeLists.txt" : {
      "ObjectId" : "d98723c17b46da02a22b745c3501cfe677c013d3",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/getopt/CMakeLists.txt" : {
      "ObjectId" : "224fc1ea508754dbf0d522c02f5fa1b58deb3a93",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/gtest/CMakeLists.txt" : {
      "ObjectId" : "621d0f0421543eba41e1d69f497814104bb9c6a7",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 232,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "thirdparty/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "777b91ed4b8caa226ea55cfa61fe7ec433ffb452",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 83,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 126,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "thirdparty/khronos/Makefile" : {
      "ObjectId" : "2c04a6f3ce27655b88ddb77279d205897c63b799",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "thirdparty/libbacktrace/CMakeLists.txt" : {
      "ObjectId" : "ac0089f0fe77085de322931b761a97c24baeb97a",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    CMakeLists.txt -- libbacktrace CMake build script\n\n#    Contributed by Alexander Monakov, ISP RAS\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#     (1) Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n#\n\n#     (2) Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in\n\n#     the documentation and/or other materials provided with the\n\n#     distribution.\n\n#\n\n#     (3) The name of the author may not be used to\n\n#     endorse or promote products derived from this software without\n\n#     specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n\n# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n\n# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.  */\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "thirdparty/libbacktrace/config.h.in.cmake" : {
      "ObjectId" : "1a1ad25f2e275210ffd79f065fd75515caaa5fdc",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#define BACKTRACE_ELF_SIZE @BACKTRACE_ELF_SIZE@\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmakedefine HAVE_ATOMIC_FUNCTIONS 1\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#cmakedefine HAVE_DECL_STRNLEN 1\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#cmakedefine HAVE_DL_ITERATE_PHDR 1\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cmakedefine HAVE_FCNTL 1\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#cmakedefine HAVE_GETEXECNAME 1\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#cmakedefine HAVE_GETIPINFO 1\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#cmakedefine HAVE_SYNC_FUNCTIONS 1\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#cmakedefine HAVE_LIBDWARF_DWARF_H 1\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "thirdparty/libpng/CMakeLists.txt" : {
      "ObjectId" : "227688c395270444300b9325be61b98ab64cf4b2",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/md5/CMakeLists.txt" : {
      "ObjectId" : "c5da18a7faddf20d62ce16131fe5d405af3ed4a6",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/mhook/CMakeLists.txt" : {
      "ObjectId" : "8545a5fffdef71dff0c42e7775598897b5cb753a",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/snappy/CMakeLists.txt" : {
      "ObjectId" : "84ecbac8a1a28a07d846e9544b15b0372994cd9e",
      "LastModified" : "2018-11-22T19:55:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty/zlib/CMakeLists.txt" : {
      "ObjectId" : "a0a1ca07e52de0f49658cb00d4ffa6933d293898",
      "LastModified" : "2017-10-11T21:44:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# adjust warnings\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# uses old-style declarator\n",
        "Line" : 7,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 2
    },
    "wrappers/CMakeLists.txt" : {
      "ObjectId" : "38cb4fa87cf227de9d2e69485e6cf03be3a68452",
      "LastModified" : "2018-11-22T19:55:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# API tracers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unfortunately for a long time static libstdcxx didn't built with -fPIC\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=28811\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# https://sourceware.org/binutils/docs/ld/VERSION.html\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# XXX: Unfortunately LINK_DEPENDS is ignored in non-Makefile generators\n\n# See also http://www.cmake.org/pipermail/cmake/2010-May/037206.html\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Prevent symbol relocations internal to our wrapper library to be\n\n# overwritten by the application.  And fail if there are missing\n\n# symbols.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Fail if there are missing symbols, except when using Address Sanitizer\n\n# since libasan symbols are supposed to be preloaded.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Code shared across all APIs\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Code shared across all OpenGL variants\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Silence warnings about @nn suffix mismatch\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# ddraw.dll\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# d3d8.dll\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# d3d9.dll\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# dxgi.dll, d3d10.dll, d3d10_1.dll, d3d11.dll\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#\n\n# dxgi.dll and d3d11.dll stubs that merely dispatch entry points to\n\n# dxgitrace.dll\n\n#\n",
        "Line" : 242,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# d2d1.dll, dwrite.dll\n",
        "Line" : 287,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# opengl32.dll\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# OpenGL framework\n",
        "Line" : 351,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# OpenGL framework name\n",
        "Line" : 374,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Mac framework\n",
        "Line" : 376,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Specificy the version and reexport GLU symbols\n",
        "Line" : 378,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# libGL.so\n",
        "Line" : 391,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# avoid the default \"lib\" prefix\n",
        "Line" : 415,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# libEGL.so/libGL.so\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# avoid the default \"lib\" prefix\n",
        "Line" : 458,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 24
    }
  },
  "FileTypes" : {
    "CMAKE" : 35,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 3218
}