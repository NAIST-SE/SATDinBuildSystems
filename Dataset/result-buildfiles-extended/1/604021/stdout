{
  "Repository" : "604021",
  "Revision" : "HEAD",
  "ObjectId" : "557794903627fc4b20eca6ff228bb7697b940c6b",
  "CommitTime" : "2018-10-30T23:08:01Z",
  "Files" : {
    "bin/templates/Makefile" : {
      "ObjectId" : "5ec75152ab9e465dfd2c0209f7656802bda591ca",
      "LastModified" : "2018-05-11T14:52:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Put this at top of project with Make.defines.\n\n# Expected layout:\n\n# /libs -> libraries, with subdirs include, lib, share & bin\n\n# /src -> src files for main\n\n# /gen -> generated stuff goes here & objects\n\n# /test -> test files go here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target executables to make.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Just for tests.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this one to dump information to console\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Rules for building\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ARC:=$(ODIR)/lib.a\n\n#$(ARC): $(OBJS)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#$(AR) $@ $^\n\n#$(RANLIB) $@\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Default Rules:\n\n# \t$(CC) $(CPPFLAGS) $(CFLAGS) -c\n\n# \t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c\n\n# \t$(CC) $(LDFLAGS) n.o $(LOADLIBES) $(LDLIBS)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ------------------------ Reference Notes -----------------------------------\n\n# Template for all src Makefiles. Use .cc for c++, .c for c.\n\n# Useful options to make:\n\n# \t-n : Just print recipe commands would have executed.\n\n#\t-d : Print debugging information.\n\n#   -C : Change directory before reading make file and executing a target. (CAPITAL C)\n\n#   -f : Read the file specified as a makefile.\n\n#   -I dir: Specify an include path for include directives.\n\n#   --no-print-directory : Turns off/on make reporting directory changes.\n\n#\t--print-data-base : Print all implicit rules.\n\n#\tmake CPPFLAGS=' -DMALLOC=1 -g' # Override the CPPFLAGS by command.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Usefule vars:\n\n# \t$@, the target being made (left side of :).\n\n#\t$^, the names of all prereqs with spaces between.\n\n#   $<, the name of the first prereq for the target.\n\n#   $%, when the target is an archive, the target member name instead of archive given by $@.\n\n#   $?, prereqs that are newer than the target.\n\n# TIP: $(@D) prints directory portion, $(@F) prints file name.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# VPATH:\n\n#\tVPATH: Defines a series of directories to search for source files.\n\n# \ti.e. : VPATH: src src2 src3\n\n#\tvpath %.suffic dir list: More specific matchers.\n\n#\tvpath %.c src | vpath %.h include\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Variables:\n\n#\t:= : Immediate simple expansion. = : Recursive lazy expansion. ?= : Conditional expansion, assigns if not defined.\n\n# \t+= : Standard addition.\n\n# TIP: Use @ before command in recipe to turn off echo of the command itself.\n\n#   Pass #define flags into compilation with -DUSE_MALLOC=1. Make defines compilation only by:\n\n#\tgui.o: CPPFLAGS += -DUSE_MALLOC=1, gui.o: gui.c # Now only for gui.o and sub compilations will flag be present.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Control:\n\n# ifdef/ifndef CONSTANT else endif || ifeq/ifneq(a,b) endif # Can\n\n# Note: Make sure to not have leading tabs on control operators.\n\n# To strip spaces: ifeq \"$(strip $(OPTIONS))\" \"-d\"\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Includes/Cmd modify:\n\n#\tinclude file.mk  # Have to find file.mk to continue..\n\n#   -include file.mk # Ignore return code of the command.\n\n#\t+include file.mk # Always execute command even if in dry run mode.\n\n# \t! include file.mk # Negate the return code.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Functions:\n\n#\tTo make macro: define name ..... endef, use \\ to escape new lines.\n\n# \t$(call name, param1, param2), params substituted for $1 in macro\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ------------------------ Function index -------------------------------------\n\n# filter: Filter from list those that match.\n\n#\t$(ui_lib): $(filter ui/%.o,$(objects)) ... # Filter ui/*.o from objects.\n\n#\n\n# filter-out: Filter those that don't match pattern.\n\n#\t$(ui_lib: $(filter ui/%.o,$(objects)) ... # Filters out things that don't match ui/%.o.\n\n#\n\n# findstring: Find str in text. Doesn't support % wildcard.\n\n# \t# $(findstring /test/book/admin,$(PWD) ... # Prints out to console the string if found in PWD. More portable to use @echo.\n\n#\n\n# subst : Substitute some text for other in a list, no wildcards.\n\n#\tsources := count.c test.c work.c\n\n#\tobjects := $(subst .c,.o,$(sources))\n\n#\n\n# patsubst: Substitute based on pattern match, supports %.\n\n#\tstrip-slash := $(patsubt %/,%,$(dirs)\n\n#\n\n# words: Counts the number of words in a list, separated space.\n\n#\tCWD := $(subst, /, ,$(HOME))\n\n#\twords:\n\n#\t\t@echo HOME has this many words: $(words, $(CWD)).\n\n#\n\n# words n, text: Returns the nth word from text.\n\n#\t@echo Second word of $HOME is $(words 2, $(HOME))\n\n#\n\n# firstword: Return the first word of list.\n\n#\t@echo: First word in list is $(firstword $(list)).\n\n#\n\n# wordlist start,end,list: Return list of words from start to end position, inclusive both.\n\n#\t@echo: The list of words from 2-6 is, $(wordlist 2,6,$(list))\n\n#\n\n# sort: Take a list and do a unix sort.\n\n#\t@echo: The sorted list is $(sort $(list))\n\n#\n\n# shell: Pass a command directly to the shell. Can be used to use bash control functions like for.\n\n#\tstdout := $(shell echo normal message)\n\n#\n\n# wildcard: Do unix file globing expansion.\n\n#\tsources := $(wildcard *.c *.h)\n\n#\tdot-emacs-exist := $(wildcard ~/.emacs) # Will return empty if not exists.\n\n#\n\n# dir: Return the directory portion only, same as D useage.\n\n#\tsource-dirs := $(sort $(dir $(shell find . -name '*.c'))) # Find all c source files under cwd, strip to just dirs and sort.\n\n#\n\n# notdir: Returns the filename portion of a string.\n\n#\tclass-name = $(notdir $(subst .java,,$1))\n\n#\n\n# suffix: Return the suffix of all words in list.\n\n#\t$(suffix $(list))\n\n#\n\n# basename: Returns the filename without suffix.\n\n# \t$(basename $(word))\n\n#\n\n# addsuffix: Add a suffix to a list of words.\n\n#\t$(addsuffix /*,$(dirs))\n\n#\n\n# addprefix: Adds a prefix to a list of words.\n\n#   $(addprefix dns,$(files))\n\n#\n\n# join: Take two lists and combine them together matching the same position in each.\n\n# \t$(join $(stripped-dirs),$(filenames))\n\n#\n\n# strip: Remove all trailing and leading whitespace. Use for protection in if construct.\n\n#\t$(strip $(word))\n\n#\n\n# origin: Returns how the var was set: via makefile, environment, undefined, etc....\n\n#   $(origin $(COMSPEC))\n\n#\n\n#------------------------------------ Control -----------------------------------------\n\n#\n\n# $(if,then,else): Conditional operation, allows to select from two choices.\n\n#\tPATH_SEP := $(if $(COMSPEC),;,:) # Select the sep, only windos has comspec.\n\n#\n\n#\tAnother common example:\n\n#\t$(if $(filter $(MAKE_VERSION),3.80),,$(error Require make at least 3.80.))\n\n#\n\n# $(warning Text): Same as error but doesn't cause stop.\n\n#\n\n# $(error Text): Prints an error message and exits make with 2. Prints current place.\n\n#\n\n# $(foreach var,list,body): Standard foreach loop.\n\n#\tletters := $(foreach letter,a b c d e,$(letter))\n\n#\tshow-words:\n\n#\t\t# letters has $(words $(letters)) words: '$(letters)'\n\n#\n\n#\n\n#\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1116
}