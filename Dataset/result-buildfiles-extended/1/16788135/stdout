{
  "Repository" : "16788135",
  "Revision" : "HEAD",
  "ObjectId" : "f0647c35d36cc44369843c29df2178e55b667663",
  "CommitTime" : "2019-04-08T21:24:25Z",
  "Files" : {
    "debian/Makefile" : {
      "ObjectId" : "0b2ee7edb739ce161bd2ee62bd5e765c65b4e5c6",
      "LastModified" : "2019-01-03T06:46:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Dependencies you'll probably need to install to compile this: make, curl, git,\n\n# zip, unzip, patch, java7-jdk | openjdk-7-jdk, maven.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that this is sensitive to this package's version being the first\n\n# <version> tag in the pom.xml\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defaults that are likely to vary by platform. These are cleanly separated so\n\n# it should be easy to maintain altered values on platform-specific branches\n\n# when the values aren't overridden by the script invoking the Makefile\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Whether we should apply patches. This only makes sense for alternate packaging\n\n# systems that know how to apply patches themselves, e.g. Debian.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DESTDIR may be overriden by e.g. debian packaging\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Whether we should run tests during the build.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Safety precatuion to avoid removing of root dir when DESTDIR or PREFIX is not set, for wathever reason\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Get any -alpha, -beta (preview), -rc (release candidate), -SNAPSHOT (nightly), -cp (confluent patch), -hotfix piece that we need to put into the Release part of\n\n# the version since RPM versions don't support non-numeric\n\n# characters. Ultimately, for something like 0.8.2-beta, we want to end up with\n\n# Version=0.8.2 Release=0.X.beta\n\n# where X is the RPM release # of 0.8.2-beta (the prefix 0. forces this to be\n\n# considered earlier than any 0.8.2 final releases since those will start with\n\n# Version=0.8.2 Release=1)\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Unfortunately, because of version naming issues and the way rpmbuild expects\n\n# the paths in the tar file to be named, we need to rearchive the package. So\n\n# instead of depending on archive, this target just uses the unarchived,\n\n# installed version to generate a new archive. Note that we always regenerate\n\n# the symlink because the RPM_VERSION doesn't include all the version info -- it\n\n# can leave of things like -beta, -rc1, etc.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "kafka-rest-common/pom.xml" : {
      "ObjectId" : "1cd147545e8cbb7013c3f48d621cdb47b7661842",
      "LastModified" : "2019-03-25T15:43:37Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kafka-rest-console-scripts/pom.xml" : {
      "ObjectId" : "591b4f48697f4edae2083d1b6c20c354822ef1cb",
      "LastModified" : "2019-03-25T15:43:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " This module is used to package the console scripts as a separate artifact. This artifact\n     will be used while building the docker image ",
        "Line" : 8,
        "CharPositionInLine" : 54
      },
      "CommentCount" : 1
    },
    "kafka-rest-scala-consumer/pom.xml" : {
      "ObjectId" : "3fa8cccfda1108d3ef225b24510ba5107598990a",
      "LastModified" : "2019-03-25T15:43:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n            This is a workaround for IntelliJ which seems to have a problem including junit + hamcrest\n            as transitive dependencies of rest-utils-test. mvn properly resolves these, so it may have\n            something to do with special junit handling and test scopes since rest-utils-test is not in\n            <scope>test</scope>.\n        ",
        "Line" : 53,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " End workaround ",
        "Line" : 59,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "kafka-rest/pom.xml" : {
      "ObjectId" : "d4e4f890539625e6974dba2f02dd9f6c1e3b9aad",
      "LastModified" : "2019-03-25T15:43:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n            This is a workaround for IntelliJ which seems to have a problem including junit + hamcrest\n            as transitive dependencies of rest-utils-test. mvn properly resolves these, so it may have\n            something to do with special junit handling and test scopes since rest-utils-test is not in\n            <scope>test</scope>.\n        ",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " End workaround ",
        "Line" : 79,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "pom.xml" : {
      "ObjectId" : "22f905d3a4ae3d855937db1bf8277986cae1644c",
      "LastModified" : "2019-03-25T15:43:37Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1,
    "MAVEN" : 5
  },
  "ElapsedTime" : 981
}