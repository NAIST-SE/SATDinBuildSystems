{
  "Repository" : "30021777",
  "Revision" : "HEAD",
  "ObjectId" : "9c8221893b1babe0ca230981541db584bdc2a5fc",
  "CommitTime" : "2019-01-13T22:46:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "99efff3c3bc29c4e27bab33d9932fd87fc8de604",
      "LastModified" : "2019-01-13T15:36:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n#\n\n#                       CMakeList for mtools library \n\n#\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# If using Windows, look for vcpkg...\n\n###############################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# test if the env variable VCPKG_DIR is defined\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#yes, we use it to find vcpkg.cmake\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# no try to find vcpkg.exe\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# only Debug and Release configurations\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "###############################################################################\n\n# Project name and version\n\n###############################################################################\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###############################################################################\n\n# Locate the external libraries needed. \n\n###############################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# load the custom find modules (for cimg and cairo). \n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# use cotire for precompiled headers if present\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#### REQUIRED ####\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# zlib \n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# fltk, use custom find method\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# libpng\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# libjpeg, use custom find method \n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# cimg, use custom find method \n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#### OPTIONAL ####\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# cairo, use custom find method \n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#opengl \n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#opencl\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#openmp\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "###############################################################################\n\n# set the configuration options and create mtools-config.hpp\n\n###############################################################################\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "###############################################################################\n\n# list all sources and header files of the library. \n\n###############################################################################\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###############################################################################\n\n# create the library\n\n###############################################################################\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# for commodity, so that cpp source file of the lib do not need to subdir mtools. \n",
        "Line" : 216,
        "CharPositionInLine" : 68
      },
      "25" : {
        "Text" : "# set property for cotire (optional precompiled header tool) does nothing if not present\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# local installation\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# - local include directory\n",
        "Line" : 228,
        "CharPositionInLine" : 83
      },
      "28" : {
        "Text" : "# system wide installation\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# - local include dir : when building mtools, test and the example\n\n# - install include dir : for the exported target \n",
        "Line" : 232,
        "CharPositionInLine" : 88
      },
      "30" : {
        "Text" : "# link with libatomic on gcc\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# link with zlib\n\n# target_link_libraries(mtools PUBLIC ZLIB::ZLIB) <-- do not use because export are not forwarded. \n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#link with fltk\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#link with libpng\n\n# target_link_libraries(mtools PUBLIC PNG::PNG)  <-- do not use because export are not forwarded. \n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#link with libjpeg\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#link with cimg\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#link with cairo\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#link with opengl\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# target_link_libraries(mtools PUBLIC OpenGL::GL) <-- do not use because export are not forwarded.\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "#link with opencl\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# target_link_libraries(mtools PUBLIC OpenCL::OpenCL) <-- do not use because export are not forwarded.\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#link with openmp\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# target_link_libraries(mtools PUBLIC OpenMP::OpenMP_CXX) <-- do not use because export are not forwarded.\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# if cotire present and USE_COTIRE is on, use it\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "###############################################################################\n\n# C++ compile features\n\n###############################################################################\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# release is the default build type\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# hack for RelWithDebINfo configuration otherwise compile never ends on MSVC\n",
        "Line" : 316,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "###############################################################################\n\n# installation of the library\n\n###############################################################################\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# export the package\n",
        "Line" : 333,
        "CharPositionInLine" : 56
      },
      "49" : {
        "Text" : "# register the package\n",
        "Line" : 336,
        "CharPositionInLine" : 56
      },
      "50" : {
        "Text" : "###############################################################################\n\n# test project.\n\n###############################################################################\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# add mtools to the precompiled headers generated by cotire for the test project (does nothing if cotire not present)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# set test_mtools as the startup project in visual studio\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# if cotire present and USE_COTIRE is ON, use it\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "###############################################################################\n\n# vs filters for mtools: organized according to the directory structure. \n\n###############################################################################\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "###############################################################################\n\n# vs filters for test_mtools: organized according to the directory structure. \n\n###############################################################################\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "###############################################################################\n\n# move ALL_BUILD and ZERO_CHECK inside filter \"CMakePredefinedTargets\"\n\n###############################################################################\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "###############################################################################\n\n# cleanup for cmake-gui\n\n###############################################################################\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "###############################################################################\n\n# configure the examples\n\n###############################################################################\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "###############################################################################\n\n# display infos\n\n###############################################################################\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "###############################################################################\n\n#end of file\n\n###############################################################################\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 61
    },
    "cmake/FindCAIRO_alt.cmake" : {
      "ObjectId" : "c1b966238e7ea1c53b2e2e1021be4f7cf7e13a02",
      "LastModified" : "2018-01-16T12:48:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Cairo library\n\n# This search module defines\n\n#\n\n#  CAIRO_FOUND and CAIRO_alt_FOUND if the library is found\n\n#  CAIRO_INCLUDE_DIRS - the cairo include directory\n\n#  CAIRO_LIBRARIES    - the required libraries\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use vcpkg to find cairo\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# create CAIRO_LIBRARIES from CAIRO_LIBRARY_DEBUG and CAIRO_LIBRARY_RELEASE\t\t\n",
        "Line" : 40,
        "CharPositionInLine" : 39
      },
      "3" : {
        "Text" : "#try to find cairo the usual way\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/FindCIMG_alt.cmake" : {
      "ObjectId" : "9a26cd9c971fca174d9626c61447e6c7ad73f372",
      "LastModified" : "2018-01-16T11:16:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the CImg library\n\n# This search module defines\n\n#\n\n#  CIMG_FOUND and CIMG_alt_FOUND if the library id found\n\n#  CIMG_INCLUDE_DIR - the cimg include directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindFLTK_alt.cmake" : {
      "ObjectId" : "ad203a6e23f6f5af8550c6ee09cfd1245a5d1f28",
      "LastModified" : "2018-01-16T12:48:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# try to find fltk, use vcpkg if present\n\n# if not, try to use fltk-config\n\n# otherwise, fall back to the official cmake module FindFLTK\n\n#\n\n# if found, set FLTK_FOUND and FLTK_alt_FOUND\n\n#\n\n#     FLTK_OPTIONS      - list of option to pass to the compiler\n\n#     FLTK_LIBRARIES    - list of libraries\n\n#     FLTK_INCLUDE_DIR  - fltk include directory (contains the /FL sub-directory)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use vcpkg to find fltk\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# create FLTK_LIBRARIES from FLTK_LIBRARY_DEBUG and FLTK_LIBRARY_RELEASE\t\t\n",
        "Line" : 57,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# try to find fltk-config\t\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# try to find fltk with the official FindFLTK module\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/FindJPEG_alt.cmake" : {
      "ObjectId" : "bafd9f1909baeaac8b8d77d7af87a7f1f095b1be",
      "LastModified" : "2018-01-16T11:16:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find libjpeg library\n\n# This search module defines\n\n#\n\n#  JPEG_FOUND and JPEG_alt_FOUND if the library is found\n\n#  JPEG_INCLUDE_DIR - the libjpeg include directory\n\n#  JPEG_LIBRARIES   - the required libraries\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use vcpkg to find libjpeg\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# debug and relase lib have the same name so we find them using the known vcpkg layout and \n\n# their respective location wrt the include directory\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# make sure the libraries do exist\n",
        "Line" : 26,
        "CharPositionInLine" : 71
      },
      "4" : {
        "Text" : "# Create JPEG_LIBRARIES from JPEG_LIBRARY_DEBUG and JPEG_LIBRARY_RELEASE\t\t\t\t\n",
        "Line" : 27,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "# use the official FindJPEG module\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "97275d649708355f5d8da0f695378e2b9ad9483e",
      "LastModified" : "2018-04-14T21:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2018 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# strict checking for break() command\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 209,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# add to excluded sources, if file has list of custom compile options\n",
        "Line" : 244,
        "CharPositionInLine" : 5
      },
      "23" : {
        "Text" : "# remove from head\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with separate argument\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# remember option\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# option with joined argument\n",
        "Line" : 381,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# flush remembered option\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 428,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# add target compile flags\n",
        "Line" : 437,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# target compile options\n",
        "Line" : 450,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 457,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 468,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 470,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 488,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 500,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# platform specific flags\n",
        "Line" : 511,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# default include dirs\n",
        "Line" : 546,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 553,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 565,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# target include directories\n",
        "Line" : 577,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 589,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 597,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 647,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 693,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# target export define symbol\n",
        "Line" : 697,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 702,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# target compile definitions\n",
        "Line" : 711,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 720,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and do not look at directory compile definitions, which we already handled\n",
        "Line" : 729,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 745,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 903,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 992,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1036,
        "CharPositionInLine" : 3
      },
      "56" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1044,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1047,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# header is outside\n",
        "Line" : 1061,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1072,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# check header file extension\n",
        "Line" : 1082,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# cl.exe /showIncludes produces different output, depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1095,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# GCC like output\n",
        "Line" : 1108,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1124,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1127,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1129,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# then separate lines\n",
        "Line" : 1131,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1134,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1152,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# update stack\n",
        "Line" : 1162,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1178,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1180,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1187,
        "CharPositionInLine" : 5
      },
      "73" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1196,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1208,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1246,
        "CharPositionInLine" : 1
      },
      "76" : {
        "Text" : "# add source files to be scanned\n",
        "Line" : 1257,
        "CharPositionInLine" : 1
      },
      "77" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1270,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1421,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# create empty log file\n",
        "Line" : 1462,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1478,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1520,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1529,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1532,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1536,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1541,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1547,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics do not print diagnostics in color\n\n# -Eonly just run preprocessor, no output\n",
        "Line" : 1555,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1561,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1564,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# Clang-cl.exe options used\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# -H print the name of each header file used\n\n# -fno-color-diagnostics do not print diagnostics in color\n\n# -Eonly just run preprocessor, no output\n",
        "Line" : 1568,
        "CharPositionInLine" : 3
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1578,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1581,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1587,
        "CharPositionInLine" : 3
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1596,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1599,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1603,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1608,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1614,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1633,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1644,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1651,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# GCC options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1658,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1667,
        "CharPositionInLine" : 3
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1670,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# -fno-pch-timestamp disable inclusion of timestamp in precompiled headers (clang 4.0.0+)\n",
        "Line" : 1675,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1683,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1689,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# Clang-cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zs syntax check only\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n",
        "Line" : 1696,
        "CharPositionInLine" : 3
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1706,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1710,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1719,
        "CharPositionInLine" : 3
      },
      "112" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1738,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1745,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# append to list\n",
        "Line" : 1760,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1771,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1790,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# append to list\n",
        "Line" : 1798,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1804,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1811,
        "CharPositionInLine" : 3
      },
      "121" : {
        "Text" : "# append to list\n",
        "Line" : 1813,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1816,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1821,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# append to list\n",
        "Line" : 1826,
        "CharPositionInLine" : 3
      },
      "125" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1829,
        "CharPositionInLine" : 3
      },
      "126" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1834,
        "CharPositionInLine" : 3
      },
      "127" : {
        "Text" : "# append to list\n",
        "Line" : 1838,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1841,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# Clang-cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n",
        "Line" : 1845,
        "CharPositionInLine" : 3
      },
      "130" : {
        "Text" : "# append to list\n",
        "Line" : 1851,
        "CharPositionInLine" : 5
      },
      "131" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1854,
        "CharPositionInLine" : 5
      },
      "132" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1858,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# append to list\n",
        "Line" : 1860,
        "CharPositionInLine" : 5
      },
      "134" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1863,
        "CharPositionInLine" : 5
      },
      "135" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1871,
        "CharPositionInLine" : 3
      },
      "136" : {
        "Text" : "# append to list\n",
        "Line" : 1879,
        "CharPositionInLine" : 5
      },
      "137" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1885,
        "CharPositionInLine" : 5
      },
      "138" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1892,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# append to list\n",
        "Line" : 1894,
        "CharPositionInLine" : 5
      },
      "140" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1897,
        "CharPositionInLine" : 5
      },
      "141" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1902,
        "CharPositionInLine" : 3
      },
      "142" : {
        "Text" : "# append to list\n",
        "Line" : 1915,
        "CharPositionInLine" : 5
      },
      "143" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1923,
        "CharPositionInLine" : 5
      },
      "144" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1932,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# append to list\n",
        "Line" : 1934,
        "CharPositionInLine" : 5
      },
      "146" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1937,
        "CharPositionInLine" : 5
      },
      "147" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1974,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# Newer versions of Clang embed a compilation timestamp into the precompiled header binary,\n\n# which results in \"file has been modified since the precompiled header was built\" errors if ccache is used.\n\n# We work around the problem by disabling ccache upon pre-compiling the prefix header.\n",
        "Line" : 1979,
        "CharPositionInLine" : 3
      },
      "149" : {
        "Text" : "# PCH supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1998,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 2002,
        "CharPositionInLine" : 2
      },
      "151" : {
        "Text" : "# all Unix Clang versions have PCH support\n",
        "Line" : 2010,
        "CharPositionInLine" : 3
      },
      "152" : {
        "Text" : "# only clang-cl is supported under Windows\n",
        "Line" : 2013,
        "CharPositionInLine" : 3
      },
      "153" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 2020,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "# check if ccache is used as a compiler launcher\n",
        "Line" : 2029,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# verify that ccache configuration is compatible with precompiled headers\n\n# always check environment variable CCACHE_SLOPPINESS, because earlier versions of ccache\n\n# do not report the \"sloppiness\" setting correctly upon printing ccache configuration\n",
        "Line" : 2033,
        "CharPositionInLine" : 2
      },
      "156" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 2066,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 2085,
        "CharPositionInLine" : 1
      },
      "158" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 2128,
        "CharPositionInLine" : 4
      },
      "159" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 2139,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 2142,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2213,
        "CharPositionInLine" : 4
      },
      "162" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2218,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2221,
        "CharPositionInLine" : 4
      },
      "164" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2224,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2227,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2259,
        "CharPositionInLine" : 1
      },
      "167" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2263,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2268,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2285,
        "CharPositionInLine" : 1
      },
      "170" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2298,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2323,
        "CharPositionInLine" : 1
      },
      "172" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2328,
        "CharPositionInLine" : 3
      },
      "173" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2335,
        "CharPositionInLine" : 1
      },
      "174" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2338,
        "CharPositionInLine" : 1
      },
      "175" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2343,
        "CharPositionInLine" : 1
      },
      "176" : {
        "Text" : "# generate target script file\n",
        "Line" : 2366,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2371,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# for MSVC, Intel and Clang-cl, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2386,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2395,
        "CharPositionInLine" : 3
      },
      "180" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2397,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2401,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2410,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# for MSVC, Intel and clang-cl, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2433,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2438,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2445,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2451,
        "CharPositionInLine" : 3
      },
      "187" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2458,
        "CharPositionInLine" : 3
      },
      "188" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2461,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2468,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2475,
        "CharPositionInLine" : 1
      },
      "191" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2477,
        "CharPositionInLine" : 1
      },
      "192" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2541,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2552,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2563,
        "CharPositionInLine" : 2
      },
      "195" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2571,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2575,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "# for MSVC, Intel and clang-cl, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2579,
        "CharPositionInLine" : 3
      },
      "198" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2602,
        "CharPositionInLine" : 2
      },
      "199" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2608,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# unity file compilation results in potentially huge object file,\n\n# thus use /bigobj by default unter cl.exe and Windows Intel\n",
        "Line" : 2617,
        "CharPositionInLine" : 3
      },
      "201" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2626,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2656,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2674,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2679,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2704,
        "CharPositionInLine" : 2
      },
      "206" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2713,
        "CharPositionInLine" : 2
      },
      "207" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2722,
        "CharPositionInLine" : 2
      },
      "208" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2729,
        "CharPositionInLine" : 2
      },
      "209" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2907,
        "CharPositionInLine" : 3
      },
      "210" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2911,
        "CharPositionInLine" : 3
      },
      "211" : {
        "Text" : "# disable unity builds if automatic Qt processing is used\n",
        "Line" : 2917,
        "CharPositionInLine" : 2
      },
      "212" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2939,
        "CharPositionInLine" : 3
      },
      "213" : {
        "Text" : "# use all available cores\n",
        "Line" : 2963,
        "CharPositionInLine" : 3
      },
      "214" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2988,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2995,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 3005,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# set up prefix header\n",
        "Line" : 3010,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 3012,
        "CharPositionInLine" : 2
      },
      "219" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 3021,
        "CharPositionInLine" : 2
      },
      "220" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 3031,
        "CharPositionInLine" : 4
      },
      "221" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 3038,
        "CharPositionInLine" : 3
      },
      "222" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 3042,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 3070,
        "CharPositionInLine" : 2
      },
      "224" : {
        "Text" : "# MSVC, Intel and clang-cl only create precompiled header as a side effect\n",
        "Line" : 3076,
        "CharPositionInLine" : 4
      },
      "225" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 3091,
        "CharPositionInLine" : 2
      },
      "226" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 3112,
        "CharPositionInLine" : 3
      },
      "227" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 3120,
        "CharPositionInLine" : 3
      },
      "228" : {
        "Text" : "# handle object libraries which are part of the target's sources\n",
        "Line" : 3124,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 3144,
        "CharPositionInLine" : 4
      },
      "230" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 3156,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 3166,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3169,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# generate unity target\n",
        "Line" : 3176,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3182,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3192,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# copy output name\n",
        "Line" : 3217,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3225,
        "CharPositionInLine" : 1
      },
      "238" : {
        "Text" : "# copy compile features\n",
        "Line" : 3237,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3242,
        "CharPositionInLine" : 1
      },
      "240" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3250,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3262,
        "CharPositionInLine" : 1
      },
      "242" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3265,
        "CharPositionInLine" : 1
      },
      "243" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3271,
        "CharPositionInLine" : 1
      },
      "244" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3287,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# copy CUDA platform specific stuff\n",
        "Line" : 3295,
        "CharPositionInLine" : 1
      },
      "246" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3299,
        "CharPositionInLine" : 1
      },
      "247" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3304,
        "CharPositionInLine" : 1
      },
      "248" : {
        "Text" : "# enable parallel compilation for MSVC\n",
        "Line" : 3312,
        "CharPositionInLine" : 1
      },
      "249" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3335,
        "CharPositionInLine" : 1
      },
      "250" : {
        "Text" : "# resolve alias\n",
        "Line" : 3347,
        "CharPositionInLine" : 1
      },
      "251" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3355,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3371,
        "CharPositionInLine" : 1
      },
      "253" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3376,
        "CharPositionInLine" : 1
      },
      "254" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3425,
        "CharPositionInLine" : 4
      },
      "255" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3494,
        "CharPositionInLine" : 1
      },
      "256" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3581,
        "CharPositionInLine" : 1
      },
      "257" : {
        "Text" : "# include target script if available\n",
        "Line" : 3593,
        "CharPositionInLine" : 1
      },
      "258" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3595,
        "CharPositionInLine" : 2
      },
      "259" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3611,
        "CharPositionInLine" : 1
      },
      "260" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3631,
        "CharPositionInLine" : 3
      },
      "261" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3634,
        "CharPositionInLine" : 3
      },
      "262" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3653,
        "CharPositionInLine" : 3
      },
      "263" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3656,
        "CharPositionInLine" : 3
      },
      "264" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3724,
        "CharPositionInLine" : 3
      },
      "265" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3727,
        "CharPositionInLine" : 3
      },
      "266" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3750,
        "CharPositionInLine" : 1
      },
      "267" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3787,
        "CharPositionInLine" : 3
      },
      "268" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3821,
        "CharPositionInLine" : 2
      },
      "269" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3835,
        "CharPositionInLine" : 3
      },
      "270" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3842,
        "CharPositionInLine" : 1
      },
      "271" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3895,
        "CharPositionInLine" : 1
      },
      "272" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3967,
        "CharPositionInLine" : 1
      },
      "273" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 4131,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 274
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "4713d552d1d02cf2927ac6dab3fdcb15d53bcff0",
      "LastModified" : "2018-04-14T21:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n#\n\n#                       CMakeList for the examples. \n\n#\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Project name\n\n###############################################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# get the list of all sub-directories in dirlist\n\n###############################################################################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################\n\n# iterate over each sub-directory\n\n###############################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################\n\n#end of file\n\n###############################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/ImageViewer/custom.cmake" : {
      "ObjectId" : "92ab9211352b1f99886526e2eb81b6c11e0b43ed",
      "LastModified" : "2018-04-14T21:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# custom build for ImageViewer: use WinMain() instead of main() on windows\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 1399
}