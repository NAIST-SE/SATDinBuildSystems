{
  "Repository" : "149326",
  "Revision" : "HEAD",
  "ObjectId" : "b7d7b2feda5d35bee42729119ebf8073d649d2a0",
  "CommitTime" : "2019-04-08T15:32:37Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "53fc044995b38191dae3f6a76316f2f199d7072e",
      "LastModified" : "2019-03-29T21:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; cmake-tab-width: 4; indent-tabs-mode: nil -*-\n\n#\n\n# libcouchbase\n\n# Copyright (C) 2013 Couchbase, Inc\n\n# All rights reserved.\n\n#\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n\n#   you may not use this file except in compliance with the License.\n\n#   You may obtain a copy of the License at\n\n#\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n#   Unless required by applicable law or agreed to in writing, software\n\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n#   See the License for the specific language governing permissions and\n\n#   limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Currently this file is only used for Windows\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### BEGIN CONFIGURABLES ###\n\n# These variables can be modified as needed\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Couchbase mock path to download\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### END CONFIGURABLES ###\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If building from a configured autotools tree, bail.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# BSD _and_ DTrace\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# These files are bundled in a static library.\n\n# They export no symbols of their own and may\n\n# be considered as 'static'\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# When building under Couchbase Server we've already detected\n\n# and set the appropriate OpenSSL variables\n",
        "Line" : 243,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# CMake configuration\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For DTrace implementations which need to gain access to all the *.o files first\n\n# we need to hook the linker command to a custom perl script which will intercept\n\n# the object files passed to the linker, run dtrace on them, and inject the generated\n\n# object into the linker commandline. This is a bit fragile but we don't officially\n\n# support any of these platforms anyway\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is done to be ABI-compatible with Autotools. On OSX, autotools generates\n\n# a library with a Compatibility and Current versions of 3.x despite our library\n\n# actually being versioned at 2.x. To make things worse, autotools also actually\n\n# provided a _symlink_ of libcouchbase.2.dylib. CMake cannot do this manually\n\n# and thus we disable the SOVERSION appending when on OS X, and revert to\n\n# inserting the version information by hand.\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Always add this file, as we need the headers for this!\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# pkg-config stuff goes with installation\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Generate our configuration file _after_ we've collected everything\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build any local tests/scripts\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/Modules/ConfigureDtrace.cmake" : {
      "ObjectId" : "35921aa5bf52d94dd35f08f623b7c6c4570ff637",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate probes.h\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Fix probes.h on FreeBSD\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Generate probes.o\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "cmake/Modules/CopyPDB.cmake" : {
      "ObjectId" : "4a9dc1b11ee17d1026c2f42adec49a846ade0b90",
      "LastModified" : "2014-10-29T19:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Base extension name\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Path, e.g. 'Debug'\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# e.g. the build directory itself\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/Modules/DistScript.cmake" : {
      "ObjectId" : "9198993ad24822329104cfb9c8f7a7105f9e7061",
      "LastModified" : "2014-02-06T21:19:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/DownloadLcbDep.cmake" : {
      "ObjectId" : "ecd62d4e2c9e53fc6745219ce719063534d57c09",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DownloadLcbDeb(url location)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCouchbaseHdrHistogram.cmake" : {
      "ObjectId" : "7e990274a19348c720ab1e90357a560863ce0749",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindCouchbaseLibev.cmake" : {
      "ObjectId" : "659c08963d4d394c40fb938f34b5486b731d149f",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate libev library\n\n# This module defines\n\n#  HAVE_LIBEV, if false, do not try to link with libev\n\n#  LIBEV_LIBRARIES, Library path and libs\n\n#  LIBEV_INCLUDE_DIR, where to find the libev headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCouchbaseLibevent.cmake" : {
      "ObjectId" : "e73dcff5f90750cb6c67541be94463dff95ff375",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate libevent library\n\n# This module defines\n\n#  HAVE_LIBEVENT, if false, do not try to link with libevent\n\n#  LIBEVENT_LIBRARIES, Library path and libs\n\n#  LIBEVENT_INCLUDE_DIR, where to find the ICU headers\n\n#  HAVE_LIBEVENT\n\n#  HAVE_LIBEVENT2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCouchbaseLibuv.cmake" : {
      "ObjectId" : "9c25aeb7ce9a2f4e6d87eb1a4226d65f553636ef",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate libuvent library\n\n# This module defines\n\n#  HAVE_LIBUV, if false, do not try to link with libuvent\n\n#  LIBUV_LIBRARIES, Library path and libs\n\n#  LIBUV_INCLUDE_DIR, where to find the ICU headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindProfiler.cmake" : {
      "ObjectId" : "a7ae10df3a87db5bb777aaed01dd3878a84af8c0",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/GenerateConfigDotH.cmake" : {
      "ObjectId" : "a919be33d11e73d977d59817038bad091ecf5062",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Writes the 'config.h' header..\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/GetLibcouchbaseFlags.cmake" : {
      "ObjectId" : "9b95beb1208e82bd3962d754096bdb817ed337a3",
      "LastModified" : "2018-11-23T12:17:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common flags for libcouchbase modules. This defines the specific flags\n\n# required for various compilation modes\n\n# Exports:\n\n#   LCB_CORE_CFLAGS:\n\n#       C flags to be used by our \"Core\" modules. This contains\n\n#       many warnings.\n\n#   LCB_CORE_CXXFLAGS:\n\n#       Like LCB_CORE_CFLAGS, but for C++\n\n#\n\n#   LCB_BASIC_CFLAGS\n\n#       Basic C flags without extra warnings\n\n#   LCB_BASIC_CXXFLAGS\n\n#       Basic C++ flags without extra warnings.\n\n#\n\n# Note that global flags will still be modified for debug settings and the\n\n# like.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MSVC-specific flags for C/C++\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common flags for DEBUG\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Common flags for RELEASE\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't warn about \"deprecated POSIX names\"\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Need this for VS 2012 for googletest and C++\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# put debug info into release build and revert /OPT defaults after\n\n# /DEBUG so that it won't degrade performance and size\n\n# http://msdn.microsoft.com/en-us/library/xe4t6fc1(v=vs.80).aspx\n\n# Since CMake for some odd reason strips 'incremental' and 'INCREMENTAL', we'll\n\n# use weird casing here\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# GCC\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/Modules/GetPlatformCCInfo.cmake" : {
      "ObjectId" : "bda0c07a2a94122416263f6420969f6e6ee2d757",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Gets string/platform information about the specific compiler\n\n# Defines:\n\n#  LCB_CC_STRING for the C compiler string (i.e. \"msvc\", \"mingw\")\n\n#  LCB_ARCH_STRING for the target architecture, e.g. \"x86\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Figure out how we're building!\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/GetVersionInfo.cmake" : {
      "ObjectId" : "415d43a6c341d0b14569e18ecbd50e94cd01e2d8",
      "LastModified" : "2019-04-03T17:47:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Gets the libcouchbase version\n\n# Sets:\n\n#  LCB_VERSION: Version string\n\n#  LCB_CHANGESET: SCM Revision number\n\n#  LCB_VERSION_HEX Numeric hex version\n\n#  LCB_VERSION_MAJOR\n\n#  LCB_VERSION_MINOR\n\n#  LCB_VERSION_PATCH\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Try git first ##\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Have the version information\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# library version\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Now parse the version string\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the SONAME for the library\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/source_files.cmake" : {
      "ObjectId" : "d308108478b3efe34ec10161d5676738c4fcbb47",
      "LastModified" : "2019-03-29T21:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These define the various source file listings of various modules\n\n# within the library.\n\n# This is included by the top-level CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# couchbase_utils\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lcbio\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# common memcached operations\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# memcached packets\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# read buffer management\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# send buffer management\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# HTTP protocol management\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# bucket config (\"confmon\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "contrib/cbsasl/CMakeLists.txt" : {
      "ObjectId" : "eb70259db6c97d356ca49fa61f9739e45bf76eeb",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the system have a usable version of PKCS5_PBKDF2_HMAC\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "contrib/cliopts/CMakeLists.txt" : {
      "ObjectId" : "2e3cef72536c879b59637a6384f634a6e92d2af8",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/gtest-1.8.1/CMakeLists.txt" : {
      "ObjectId" : "591e64e1967ab2767d4e837df7be00b13888f003",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Visibility\n",
        "Line" : 51,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# These commands only run if this is the main project\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 86,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Create the CMake package file descriptors.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 255,
        "CharPositionInLine" : 43
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 277,
        "CharPositionInLine" : 46
      },
      "28" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "contrib/gtest-1.8.1/cmake/internal_utils.cmake" : {
      "ObjectId" : "87f69ccad00485780a2f6694d5d77f13cbf1155a",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Prevent D9025 warning for targets that have exception handling\n\n# turned off (/EHs-c- flag). Where required, exceptions are explicitly\n\n# re-enabled using the cxx_exception_flags variable.\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 71,
        "CharPositionInLine" : 33
      },
      "11" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 81,
        "CharPositionInLine" : 33
      },
      "15" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 90,
        "CharPositionInLine" : 39
      },
      "17" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Generate debug library name with a postfix.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 211,
        "CharPositionInLine" : 48
      },
      "32" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 272,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 280,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 288,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# install_project(targets...)\n\n#\n\n# Installs the specified targets and configures the associated pkgconfig files.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Install the project targets.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Configure and install pkgconfig files.\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 45
    },
    "contrib/lcb-jsoncpp/CMakeLists.txt" : {
      "ObjectId" : "4500b2147caf06984324b89c7459e3c537d4c40e",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/snappy/CMakeLists.txt" : {
      "ObjectId" : "07c5a0b2ee60fb7bd51f8783b6a9bbb8acc0bf6e",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/Makefile" : {
      "ObjectId" : "196e02c5c0ba4b765b2e054f0edd97a886f98a50",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "example/CMakeLists.txt" : {
      "ObjectId" : "77bb4b1ac365c742918b142ba61b3284a6e6e3e1",
      "LastModified" : "2019-03-29T21:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This builds the examples; all these targets are optional\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ADD_EXAMPLE(db db \"\" \"\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "example/crypto/Makefile" : {
      "ObjectId" : "b3043e4adf4a1355f8d4f4f7db105d8d98176b31",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "example/tracing/Makefile" : {
      "ObjectId" : "99dd518909b32732308cbaf42baa5489f0d087b9",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "packaging/abicheck/Makefile" : {
      "ObjectId" : "d65b74be46116eafc27797ddf6aad56f37c45753",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/io/iocp/CMakeLists.txt" : {
      "ObjectId" : "cf447c9a88c96639d4b759c20efab4232f810631",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/io/libev/CMakeLists.txt" : {
      "ObjectId" : "c2441d36c1aae0b170f1706e29e90c8ccad72928",
      "LastModified" : "2019-04-03T17:47:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/io/libevent/CMakeLists.txt" : {
      "ObjectId" : "485d6342cf34bf1de674828ec9ad08b45f2cfa0a",
      "LastModified" : "2019-04-03T17:47:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/io/libuv/CMakeLists.txt" : {
      "ObjectId" : "46c63dd86d0085b94c8371f74989b463c34ad386",
      "LastModified" : "2019-04-03T17:47:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The macros abstracting UV versions dynamically inject special signatures. We\n\n# can't have the compiler whine about that.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unfortunately, Older GCC (EL5) barfs at this option.\n\n#IF(CMAKE_COMPILER_IS_GNUCC)\n\n#    SET(_lcbuv_cflags \"-Wno-unused-parameters\")\n\n#ELSE()\n\n#    SET(_lcbuv_cflags \"\")\n\n#ENDIF()\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "plugins/io/select/CMakeLists.txt" : {
      "ObjectId" : "f35a24f6602082c529516f1e7a163463f7934575",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ssl/CMakeLists.txt" : {
      "ObjectId" : "8e9b8152a81ea946e73cd076f8f5bb584d270f4e",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/vbucket/CMakeLists.txt" : {
      "ObjectId" : "e0981ba4d7dbe6340ba173c4c1d81d6d133b9b59",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "81c4a7321cc022024923fcf03377c7ceb51d1e4c",
      "LastModified" : "2018-11-23T11:45:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For Windows+GCC we need to link statically\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We're a library using the shared CRT. Don't use the static one\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Since we need a plugin name, we'll use 'select'. However none of these\n\n# actually do any I/O\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "7ea57c812640406bc0cf3cafbdf21bd1b6de9444",
      "LastModified" : "2019-04-03T17:47:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set this before INSTALL_PDBS in order to set the correct output name\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 31,
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 2107
}