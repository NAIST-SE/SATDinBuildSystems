{
  "Repository" : "6876142",
  "Revision" : "HEAD",
  "ObjectId" : "04ab089db018a292ae48d51732dd6c66766b36b6",
  "CommitTime" : "2019-03-02T01:13:01Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "27d172f900bd4ec37dcfe01fde0c8a28e740005a",
      "LastModified" : "2018-04-16T09:30:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Caffe project\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Caffe version\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Using cmake scripts and modules\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Options\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: rename to USE_CUDA\n",
        "Line" : 30,
        "CharPositionInLine" : 63
      },
      "5" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Dependencies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ Flags\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Warnings\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Config generation\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ Includes\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Includes & defines for CUDA\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# cuda_compile() does not have per-call dependencies or include pathes\n\n# (cuda_compile() has per-call flags, but we set them here too for clarity)\n\n#\n\n# list(REMOVE_ITEM ...) invocations remove PRIVATE and PUBLIC keywords from collected definitions and include pathes\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# pass include pathes to cuda_include_directories()\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add definitions to nvcc flags directly\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ---[ Subdirectories\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ Linter target\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ pytest target\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ---[ uninstall target\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ---[ Configuration summary\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ---[ Export configs generation\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "Makefile" : {
      "ObjectId" : "b7660e852d631dcf514ac32a3d901d4479101a9e",
      "LastModified" : "2018-08-21T07:44:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Explicitly check for the config file, otherwise make -k will proceed anyway.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All of the directories containing code.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The target shared library name\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#DYNAMIC_SONAME_SHORT := $(DYNAMIC_NAME_SHORT).$(DYNAMIC_VERSION_MAJOR)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################\n\n# Get all source files\n\n##############################\n\n# CXX_SRCS are the source files excluding the test ones.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CU_SRCS are the cuda source files\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TEST_SRCS are the test source files\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TOOL_SRCS are the source files for the tool binaries\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# EXAMPLE_SRCS are the source files for the example binaries\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# BUILD_INCLUDE_DIR contains any generated header files we want to include.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# PROTO_SRCS are the protocol buffer definitions\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# PROTO_BUILD_DIR will contain the .cc and obj files generated from\n\n# PROTO_SRCS; PROTO_BUILD_INCLUDE_DIR will contain the .h header files\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# NONGEN_CXX_SRCS includes all source/header files except those generated\n\n# automatically (e.g., by proto).\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# PY$(PROJECT)_SRC is the python wrapper for $(PROJECT)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# MAT$(PROJECT)_SRC is the mex entrance point of matlab package for $(PROJECT)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##############################\n\n# Derive generated files\n\n##############################\n\n# The generated files for protocol buffers\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The objects corresponding to the source files\n\n# These objects will be linked into the final shared library, so we\n\n# exclude the tool, example, and test objects.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# tool, example, and test objects\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Output files for automatic dependency generation\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# tool, example, and test bins\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# symlinks to tool bins without the \".bin\" extension\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Put the test binaries in build/test for convenience.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# TEST_ALL_BIN is the test binary that links caffe dynamically.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##############################\n\n# Derive compiler warning dump locations\n\n##############################\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##############################\n\n# Derive include and lib directories\n\n##############################\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# add <cuda>/lib64 only if it exists\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# handle IO dependencies\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "##############################\n\n# Set build directories\n\n##############################\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "##############################\n\n# Set directory for Doxygen-generated documentation\n\n##############################\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# should be the same as OUTPUT_DIRECTORY in the .Doxyfile\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# All the files that might have Doxygen documentation.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "##############################\n\n# Configure build\n\n##############################\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Determine platform\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Linux\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# older versions of gcc are too dumb to build boost with -Wuninitalized\n",
        "Line" : 265,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# boost::thread is reasonably called boost_thread (compare OS X)\n\n# We will also explicitly add stdc++ to the link target.\n",
        "Line" : 269,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# OS X:\n\n# clang++ instead of g++\n\n# libstdc++ for NVCC compatibility on OS X >= 10.9 with CUDA < 7.0\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# clang throws this warning for cuda headers\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# 10.11 strips DYLD_* env vars so link CUDA (rpath is available on 10.5+)\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# gtest needs to use its own tuple to not conflict with clang\n",
        "Line" : 297,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# boost::thread is called boost_thread-mt to mark multithreading on OS X\n",
        "Line" : 299,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# we need to explicitly ask for the rpath to be obeyed\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Custom compiler\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Static linking\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# The following line must not be indented with a tab, since we are not inside a target\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Debugging\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# cuDNN acceleration configuration.\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# NCCL acceleration configuration\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# configure IO libraries\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# CPU-only configuration\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Python layer support\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# BLAS configuration (default = ATLAS)\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# MKL\n",
        "Line" : 380,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# OpenBLAS\n",
        "Line" : 387,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# ATLAS\n",
        "Line" : 390,
        "CharPositionInLine" : 1
      },
      "58" : {
        "Text" : "# Linux simply has cblas and atlas\n",
        "Line" : 393,
        "CharPositionInLine" : 3
      },
      "59" : {
        "Text" : "# OS X packages atlas as the vecLib framework\n",
        "Line" : 397,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# 10.10 has accelerate while 10.9 has veclib\n",
        "Line" : 399,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Automatic dependency generation (nvcc is handled separately)\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Complete build flags.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# mex may invoke an older gcc that is too liberal with -Wuninitalized\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# 'superclean' target recursively* deletes all files ending with an extension\n\n# in $(SUPERCLEAN_EXTS) below.  This may be useful if you've built older\n\n# versions of Caffe that do not place all generated files in a location known\n\n# to the 'clean' target.\n\n#\n\n# 'supercleanlist' will list the files to be deleted by make superclean.\n\n#\n\n# * Recursive with the exception that symbolic links are never followed, per the\n\n# default behavior of 'find'.\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Set the sub-targets of the 'everything' target.\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Only build matcaffe as part of \"everything\" if MATLAB_DIR is specified.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "##############################\n\n# Define build targets\n\n##############################\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Create a target \".linked\" in this BUILD_DIR to tell Make that the \"build\" link\n\n# is currently correct, then delete the one in the OTHER_BUILD_DIR in case it\n\n# exists and $(DEBUG) is toggled later.\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Target for extension-less symlinks to tool binaries with extension '*.bin'.\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# add proto\n",
        "Line" : 693,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# add include\n",
        "Line" : 695,
        "CharPositionInLine" : 1
      },
      "72" : {
        "Text" : "# add tool and example binaries\n",
        "Line" : 699,
        "CharPositionInLine" : 1
      },
      "73" : {
        "Text" : "# add libraries\n",
        "Line" : 702,
        "CharPositionInLine" : 1
      },
      "74" : {
        "Text" : "# add python - it's not the standard way, indeed...\n",
        "Line" : 706,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 75,
      "Errorlog" : "line 400:125 token recognition error at: '\\1'\n"
    },
    "cmake/ConfigGen.cmake" : {
      "ObjectId" : "69889c243b20590cd7038a8e3ef6b210b0df783d",
      "LastModified" : "2018-04-16T09:30:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Helper function to get all list items that begin with given prefix\n\n# Usage:\n\n#   caffe_get_items_with_prefix(<prefix> <list_variable> <output_variable>)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Function for generation Caffe build- and install- tree export config files\n\n# Usage:\n\n#  caffe_generate_export_configs()\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ---[ Configure build-tree CaffeConfig.cmake file ]---\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add targets to the build-tree export set\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ---[ Configure install-tree CaffeConfig.cmake file ]---\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Install the CaffeConfig.cmake and export set to use with install-tree\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ Configure and install version file ]---\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: Lines below are commented because Caffe doesn't declare its version in headers.\n\n# When the declarations are added, modify `caffe_extract_caffe_version()` macro and uncomment\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# configure_file(cmake/Templates/CaffeConfigVersion.cmake.in \"${PROJECT_BINARY_DIR}/CaffeConfigVersion.cmake\" @ONLY)\n\n# install(FILES \"${PROJECT_BINARY_DIR}/CaffeConfigVersion.cmake\" DESTINATION ${install_cmake_suffix})\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cmake/Cuda.cmake" : {
      "ObjectId" : "e03feabffcbfc01114a0d0006437e045a4486096",
      "LastModified" : "2018-04-16T09:30:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Known NVIDIA GPU achitectures Caffe can be compiled for.\n\n# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   caffe_detect_installed_gpus(out_variable)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA_ARCH_NAME\n\n# Usage:\n\n#   caffe_select_nvcc_arch_flags(out_variable)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of arch names\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set CUDA_ARCH_NAME strings (so it will be seen as dropbox in CMake-Gui)\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# verify CUDA_ARCH_NAME value\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# (${CUDA_ARCH_NAME} STREQUAL \"Manual\")\n",
        "Line" : 98,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Short command for cuda compilation\n\n# Usage:\n\n#   caffe_cuda_compile(<objlist_variable> <cuda_files>)\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# we remove /EHa as it generates warnings under windows\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Short command for cuDNN detection. Believe it soon will be a part of CUDA toolkit distribution.\n\n# That's why not FindcuDNN.cmake file, but just the macro\n\n# Usage:\n\n#   detect_cuDNN()\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# dynamic libs have different suffix in mac and linux\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# cuDNN v3 and beyond\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "################################################################################################\n\n###  Non macro section\n\n################################################################################################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# cmake 2.8.7 compatibility which doesn't search for curand\n",
        "Line" : 241,
        "CharPositionInLine" : 31
      },
      "19" : {
        "Text" : "# cudnn detection\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Boost 1.55 workaround, see https://svn.boost.org/trac/boost/ticket/9392 or\n\n# https://github.com/ComputationalRadiationPhysics/picongpu/blob/master/src/picongpu/CMakeLists.txt\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# avoid warning for CMake >= 2.8.12\n",
        "Line" : 272,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# disable some nvcc diagnostic that apears in boost, glog, glags, opencv, etc.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# setting default testing device\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Handle clang/libc++ issue\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# OSX 10.9 and higher uses clang/libc++ by default which is incompatible with old CUDA toolkits\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# enabled by default if and only if CUDA version is less than 7.0\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "ca2e3ad9e5ec587433e17e4d646733859082609d",
      "LastModified" : "2018-04-16T09:30:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These lists are later turned into target properties on main caffe library target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Boost\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Threads\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ OpenMP\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ideally, this should be provided by the BLAS library IMPORTED target. However,\n\n# nobody does this, so we need to link to OpenMP explicitly and have the maintainer\n\n# to flick the switch manually as needed.\n\n#\n\n# Moreover, OpenMP package does not provide an IMPORTED target as well, and the\n\n# suggested way of linking to OpenMP is to append to CMAKE_{C,CXX}_FLAGS.\n\n# However, this naïve method will force any user of Caffe to add the same kludge\n\n# into their buildsystem again, so we put these options into per-target PUBLIC\n\n# compile options and link flags, so that they will be exported properly.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ---[ Google-glog\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Google-gflags\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ Google-protobuf\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ HDF5\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ LMDB\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ LevelDB\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ Snappy\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ CUDA\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ---[ OpenCV\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if not OpenCV 3.x, then imgcodecs are not found\n",
        "Line" : 106,
        "CharPositionInLine" : 23
      },
      "16" : {
        "Text" : "# ---[ BLAS\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ Python\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# use python3\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Find the matching boost python implementation\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# disable Python 3 search\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# ---[ Matlab\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# sudo apt-get install liboctave-dev\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# ---[ Doxygen\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "cmake/External/gflags.cmake" : {
      "ObjectId" : "e3dba04f33fc8658bc48b23a6dba366730f52794",
      "LastModified" : "2015-07-08T04:30:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# guard against multiple includes\n",
        "Line" : 1,
        "CharPositionInLine" : 27
      },
      "1" : {
        "Text" : "# use the system-wide gflags if present\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# gflags will use pthreads if it's available in the system, so we must link with it\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build gflags statically, but want to link it into the caffe shared library\n\n# this requires position-independent code\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/External/glog.cmake" : {
      "ObjectId" : "f9d0549cd9097bcde2d809bd7402249b46a0ea4c",
      "LastModified" : "2017-01-07T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# glog depends on gflags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try the system-wide glog first\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# fetch and build glog from github\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build glog statically, but want to link it into the caffe shared library\n\n# this requires position-independent code\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# depend on gflags if we're also building it\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/Misc.cmake" : {
      "ObjectId" : "fcb246472f0df2dd40fd3f210c48341add08afd9",
      "LastModified" : "2018-04-16T09:30:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Configuration types\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --[ If user doesn't specify build type then assume release\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Solution folders\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Install options\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ RPATH settings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Funny target\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Set debug postfix\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindAtlas.cmake" : {
      "ObjectId" : "7ffa6393bbc7c66b3f63de066f06d1450b7a8f37",
      "LastModified" : "2018-04-16T09:30:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Atlas (and Lapack) libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Atlas_ROOT_DIR:            Base directory where all Atlas components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  Atlas_FOUND\n\n#  Atlas_INCLUDE_DIRS\n\n#  Atlas_LIBRARIES\n\n#  Atlas_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGFlags.cmake" : {
      "ObjectId" : "29b60f05037bf2257b44eb191306d000dc64900f",
      "LastModified" : "2015-07-08T04:30:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GFLAGS\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR:            Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "99abbe478a02b452326be8c6a4f6dba6a328352c",
      "LastModified" : "2015-07-08T04:30:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLAPACK.cmake" : {
      "ObjectId" : "9641c45d196d69bf3b0cea7191bcb55a2252d2da",
      "LastModified" : "2015-02-17T04:48:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface is found\n\n#  LAPACK_LIBRARIES - list of libraries (using full path name) for LAPACK\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: I do not think it is a good idea to mixup different BLAS/LAPACK versions\n\n# Hence, this script wants to find a Lapack library matching your Blas library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Old search lapack script\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Intel MKL\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# OpenBlas\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# GotoBlas\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ACML\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Accelerate\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# vecLib\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Modules/FindLMDB.cmake" : {
      "ObjectId" : "8a817fd6f10403d34ebf49ed84f9bdaab7e424ba",
      "LastModified" : "2015-02-17T04:48:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the LMBD libraries and headers\n\n#  LMDB_FOUND - system has LMDB lib\n\n#  LMDB_INCLUDE_DIR - the LMDB include directory\n\n#  LMDB_LIBRARIES - Libraries needed to use LMDB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCWD based on FindGMP by:\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adapted from FindCWD by:\n\n# Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>\n\n# Aug 31, 2013\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLevelDB.cmake" : {
      "ObjectId" : "97f08ac934926b2b321590177b6fcfac5d8611d8",
      "LastModified" : "2015-02-17T04:48:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LevelDB\n\n#\n\n#  LevelDB_INCLUDES  - List of LevelDB includes\n\n#  LevelDB_LIBRARIES - List of libraries when using LevelDB.\n\n#  LevelDB_FOUND     - True if LevelDB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindMKL.cmake" : {
      "ObjectId" : "ef0c3bf1c64d3f73e6f60a164c358efbd85ece07",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the MKL libraries\r\n\n#\r\n\n# Options:\r\n\n#\r\n\n#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\r\n\n#   MKL_USE_STATIC_LIBS             : use static libraries\r\n\n#   MKL_MULTI_THREADED              : use multi-threading\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n#   MKL_FOUND            : True mkl is found\r\n\n#   MKL_INCLUDE_DIR      : include directory\r\n\n#   MKL_LIBRARIES        : the libraries to link against.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Options\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Root folders\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Find include dir\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Find libraries\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindMatlabMex.cmake" : {
      "ObjectId" : "28ae65e7cbbae0a28768323dcdd4d6984fca5643",
      "LastModified" : "2015-02-17T04:48:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module looks for MatlabMex compiler\n\n# Defines variables:\n\n#    Matlab_DIR    - Matlab root dir\n\n#    Matlab_mex    - path to mex compiler\n\n#    Matlab_mexext - path to mexext\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress `readlink` warning if `which` returned nothing\n",
        "Line" : 29,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindNCCL.cmake" : {
      "ObjectId" : "c8845934102602aa9b9e6d02e696057b26a72f76",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindNumPy.cmake" : {
      "ObjectId" : "a671494cababa39534b4ac1a8d506bbaba76d8b6",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n#  NUMPY_FOUND               - was NumPy found\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\n\n#  NUMPY_INCLUDE_DIR         - path to the NumPy include files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindOpenBLAS.cmake" : {
      "ObjectId" : "a6512ae7e4e0835a1b665d2185008dc1792a006f",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindSnappy.cmake" : {
      "ObjectId" : "eff2a864a7b8613a1498892a9b3861f2e3e061c9",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Snappy libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Snappy_ROOT_DIR:    Base directory where all Snappy components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  SNAPPY_FOUND\n\n#  Snappy_INCLUDE_DIR\n\n#  Snappy_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindvecLib.cmake" : {
      "ObjectId" : "4d44e613a0023a2c1500151ca34ea7646cd19262",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the vecLib libraries as part of Accelerate.framework or as standalon framework\n\n#\n\n# The following are set after configuration is done:\n\n#  VECLIB_FOUND\n\n#  vecLib_INCLUDE_DIR\n\n#  vecLib_LINKER_LIBS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ProtoBuf.cmake" : {
      "ObjectId" : "72ea3230c50451b5403a5e89f0e4456334d8f732",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Google Protocol Buffers library and compilers and extends\n\n# the standard cmake script with version and python generation support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As of Ubuntu 14.04 protoc is no longer a part of libprotobuf-dev package\n\n# and should be installed separately as in: sudo apt-get install protobuf-compiler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# fetches protobuf version\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# place where to generate protobuf sources\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Modification of standard 'protobuf_generate_cpp()' with output dir parameter and python support\n\n# Usage:\n\n#   caffe_protobuf_generate_cpp_py(<output_dir> <srcs_var> <hdrs_var> <python_var> <proto_files>)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/Summary.cmake" : {
      "ObjectId" : "40b8c2f2966089414f37d2e31f68cf86751c0f7a",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Caffe status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   caffe_status(<text>)\n\n#   caffe_status(<heading> <value1> [<value2> ...])\n\n#   caffe_status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Function for fetching Caffe version from git and headers\n\n# Usage:\n\n#   caffe_extract_caffe_version()\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# caffe_parse_header(${Caffe_INCLUDE_DIR}/caffe/version.hpp Caffe_VERSION_LINES CAFFE_MAJOR CAFFE_MINOR CAFFE_PATCH)\n\n# set(Caffe_VERSION \"${CAFFE_MAJOR}.${CAFFE_MINOR}.${CAFFE_PATCH}\" PARENT_SCOPE)\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# or for #define Caffe_VERSION \"x.x.x\"\n\n# caffe_parse_header_single_define(Caffe ${Caffe_INCLUDE_DIR}/caffe/version.hpp Caffe_VERSION)\n\n# set(Caffe_VERSION ${Caffe_VERSION_STRING} PARENT_SCOPE)\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Prints accumulated caffe configuration summary\n\n# Usage:\n\n#   caffe_print_configuration_summary()\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This code is taken from https://github.com/sh1r0/caffe-android-lib\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/Targets.cmake" : {
      "ObjectId" : "090f86c550099935386bb3104f5224b557f9975d",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Defines global Caffe_LINK flag, This flag is required to prevent linker from excluding\n\n# some objects which are not addressed directly but are registered via static constructors\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Convenient command to setup source group for IDEs that support this feature (VS, XCode)\n\n# Usage:\n\n#   caffe_source_group(<group> GLOB[_RECURSE] <globbing_expression>)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Collecting sources from globbing and appending to output list variable\n\n# Usage:\n\n#   caffe_collect_sources(<output_variable> GLOB[_RECURSE] <globbing_expression>)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Short command getting caffe sources (assuming standard Caffe code tree)\n\n# Usage:\n\n#   caffe_pickup_caffe_sources(<root>)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put all files in source groups (visible as subfolder in many IDEs)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# source groups for test target\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# collect files\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# adding headers to make the visible in some IDEs (Qt, VS, Xcode)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# collect cuda files\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add proto to make them editable in IDEs too\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# convert to absolute paths\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# propagate to parent scope\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Short command for setting default target properties\n\n# Usage:\n\n#   caffe_default_properties(<target>)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# make sure we build all external dependencies first\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Short command for setting runtime directory for build target\n\n# Usage:\n\n#   caffe_set_runtime_directory(<target> <dir>)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################################\n\n# Short command for setting solution folder property for target\n\n# Usage:\n\n#   caffe_set_solution_folder(<target> <folder>)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################################################\n\n# Reads lines from input file, prepends source directory to each line and writes to output file\n\n# Usage:\n\n#   caffe_configure_testdatafile(<testdatafile>)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################################\n\n# Filter out all files that are not included in selected list\n\n# Usage:\n\n#   caffe_leave_only_selected_tests(<filelist_variable> <selected_list>)\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# blank list means leave all\n",
        "Line" : 158,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 19
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "653de5fdf89be08a753fe42a6fb82cc6b625c4d4",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Command alias for debugging messages\n\n# Usage:\n\n#   dmsg(<message>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from list(s)\n\n# Usage:\n\n#   caffe_list_unique(<list_variable> [<list_variable>] [...])\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Clears variables from list\n\n# Usage:\n\n#   caffe_clear_vars(<variables_list>)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from string\n\n# Usage:\n\n#   caffe_string_unique(<string_variable>)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Prints list element per line\n\n# Usage:\n\n#   caffe_print_list(<list>)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################################\n\n# Function merging lists of compiler flags to single string.\n\n# Usage:\n\n#   caffe_merge_flag_lists(out_variable <list1> [<list2>] [<list3>] ...)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################################\n\n# Converts all paths in list to absolute\n\n# Usage:\n\n#   caffe_convert_absolute_paths(<list_variable>)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################################\n\n# Reads set of version defines from the header file\n\n# Usage:\n\n#   caffe_parse_header(<file> <define1> <define2> <define3> ..)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################################\n\n# Reads single version define from the header file and parses it\n\n# Usage:\n\n#   caffe_parse_header_single_define(<library_name> <file> <define_name>)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "########################################################################################################\n\n# An option that the user can select. Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   caffe_option(<option_variable> \"doc string\" <initial value or boolean expression> [IF <condition>])\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################################\n\n# Utility macro for comparing two lists. Used for CMake debugging purposes\n\n# Usage:\n\n#   caffe_compare_lists(<list_variable> <list2_variable> [description])\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Command for disabling warnings for different platforms (see below for gcc and VisualStudio)\n\n# Usage:\n\n#   caffe_warnings_disable(<CMAKE_[C|CXX]_FLAGS[_CONFIGURATION]> -Wshadow /wd4996 ..,)\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################################################\n\n# Helper function get current definitions\n\n# Usage:\n\n#   caffe_get_current_definitions(<definitions_variable>)\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Helper function get current includes/definitions\n\n# Usage:\n\n#   caffe_get_current_cflags(<cflagslist_variable>)\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################################\n\n# Helper function to parse current linker libs into link directories, libflags and osx frameworks\n\n# Usage:\n\n#   caffe_parse_linker_libs(<Caffe_LINKER_LIBS_var> <directories_var> <libflags_var> <frameworks_var>)\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# split libs into debug, optimized, unspecified and frameworks\n",
        "Line" : 317,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# attach debug or optimized libs to unspecified according to current configuration\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# convert linker libraries list to link flags\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "################################################################################################\n\n# Helper function to detect Darwin version, i.e. 10.8, 10.9, 10.10, ....\n\n# Usage:\n\n#   caffe_detect_darwin_version(<version_variable>)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/lint.cmake" : {
      "ObjectId" : "70a006572bbffe3a77882cfe461fb0e1c4998a12",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# suppress cmake warning\n",
        "Line" : 8,
        "CharPositionInLine" : 31
      },
      "1" : {
        "Text" : "# find all files of interest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find all files that should be excluded\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude generated pb files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "ae47e46173677e098ef2487e6db3835c48de2fae",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Building docs script\n\n# Requirements:\n\n#   sudo apt-get install doxygen texlive ruby-dev\n\n#   sudo gem install jekyll execjs therubyracer\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################################################\n\n# Gather docs from <root>/examples/**/readme.md\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Only use file if it is to be included in docs.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Since everything is called readme.md, rename it by its dirname.\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# folder value might be like <subfolder>/readme.md. That's why make directory.\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "################################################################################################\n\n# Gather docs from examples/*.ipynb and add YAML front-matter.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################################\n\n########################## [ Non macro part ] ##################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Gathering is done at each 'make doc'\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Doxygen config file path\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Adding docs target\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Gathering examples into docs subfolder\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Auto detect output directory\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# creates symlink in docs subfolder to code documentation built by doxygen\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# for quick launch of jekyll\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "43bbcb83789c97dcb29ad4e60b84f714c0dea654",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get file name\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# get folder name\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# set back RUNTIME_OUTPUT_DIRECTORY\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# install\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Funny command to make tutorials work\n\n# TODO: remove in future as soon as naming is standardized everywhere\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "matlab/CMakeLists.txt" : {
      "ObjectId" : "987730d9b5506ad2bd654f7f729ee63c114cc74c",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Builds Matlab (or Octave) interface. In case of Matlab caffe must be\n\n# compield as shared library. Octave can link static or shared caffe library\n\n# To install octave run: sudo apt-get install liboctave-dev\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# helper function to set proper mex file extension\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# global settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# prepare linker flag lists\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Matlab R2014a complans for -Wl,--whole-archive\n",
        "Line" : 46,
        "CharPositionInLine" : 52
      },
      "5" : {
        "Text" : "# ---[ Install\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "c53299d265b3952e03f47d0ff82b90e88bb9ab1f",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Install\n\n# scripts\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# module\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _caffe.so\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/caffe/CMakeLists.txt" : {
      "ObjectId" : "4a8055685663187951f5dfa88e7baaa0f0af4124",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate protobuf sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include python files either to force generation\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# note, crucial to prepend!\n",
        "Line" : 11,
        "CharPositionInLine" : 51
      },
      "3" : {
        "Text" : "# --[ Caffe library\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# creates 'test_srcs', 'srcs', 'test_cuda', 'cuda' lists\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Tests\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Install\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/caffe/test/CMakeLists.txt" : {
      "ObjectId" : "d8afc30b76bc42511ae4227ada4dfb641036217c",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The option allows to include in build only selected test files and exclude all others\n\n# Usage example:\n\n#  cmake -DBUILD_only_tests=\"common,net,blob,im2col_kernel\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For 'make runtest' target we don't need to embed test data paths to\n\n# source files, because test target is executed in source directory\n\n# That's why the lines below are commented. TODO: remove them\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# definition needed to include CMake generated files\n\n#add_definitions(-DCMAKE_BUILD)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# generates test_data/sample_data_list.txt.gen.cmake\n\n#caffe_configure_testdatafile(test_data/sample_data_list.txt)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Adding test target\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Adding runtest\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/gtest/CMakeLists.txt" : {
      "ObjectId" : "e98254af130d6b9d710fcc62a0b21c2f651b314e",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(gtest_main gtest_main.cc)\n\n#target_link_libraries(gtest_main gtest)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "3789450555e2be0b4a429a63029cec14a039f4a8",
      "LastModified" : "2018-08-21T12:51:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Collect source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build each source file independently\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# caffe target already exits\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# target\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set back RUNTIME_OUTPUT_DIRECTORY\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# restore output name without suffix\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Install\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "CMAKE" : 33,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 5469
}