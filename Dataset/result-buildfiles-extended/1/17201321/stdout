{
  "Repository" : "17201321",
  "Revision" : "HEAD",
  "ObjectId" : "6c43e8880d990f413365e295525c731a930819d5",
  "CommitTime" : "2018-10-24T14:44:46Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1a6c2f9252b8224085ced52d23eb3371b4463de1",
      "LastModified" : "2016-03-29T17:38:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Super Mario War project configuration file\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Options for customizing builds\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# only smw ported yet\n",
        "Line" : 22,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "# Additional CMake search path\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Game-related flags\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set where the binary files will be built.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Platform-specific settings\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if (APPLE)\n\n#\tinclude(PlatformApple)\n\n#endif()\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Dependencies\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add all SDL2 dependencies\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# location of SDL headers\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# add all SDL dependencies\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# location of SDL headers\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# the optional libpng package\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Use ENet for networking\n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Use YAML for game config files\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Compiler flags\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Debugging CFLAGS. Turn optimizations off; turn debugging symbols on.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Strip binaries\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Use C++11\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# MinGW forces strict-ANSI mode with std=c++11\n",
        "Line" : 181,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Link libc statically on Windows to not need additional DLLs\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# TODO: check if compiler supports this flag, may fail with GCC < 4.8\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Enabling all warnings in MSVC spams too much\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\tadd_definitions(-Wall)\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# TODO: would like these but they produce overwhelming amounts of warnings\n\n#check_and_add_flag(EXTRA -Wextra)\n\n#check_and_add_flag(MISSING_FIELD_INITIALIZERS -Wmissing-field-initializers)\n\n#check_and_add_flag(SWITCH_DEFAULT -Wswitch-default)\n\n#check_and_add_flag(FLOAT_EQUAL -Wfloat-equal)\n\n#check_and_add_flag(CONVERSION -Wconversion)\n\n#check_and_add_flag(ZERO_AS_NULL_POINTER_CONSTANT -Wzero-as-null-pointer-constant)\n",
        "Line" : 216,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# gcc uses some optimizations which might break stuff without this flag\n",
        "Line" : 232,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "## MAIN CONFIG\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Installation locations\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Common install locations, also passed to the game components\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# CMAKE_INSTALL_PREFIX defaults to `C:/Program Files/smw`\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# CMAKE_INSTALL_PREFIX defaults to `/usr/local`\n",
        "Line" : 263,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# set(SMW_USERDIR \".smw\" CACHE STRING \"User directory\") # User settings directory\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# For installing Linux desktop items\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\n\n# Data directory install location\n\n#\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\tinstall(FILES Data/license.txt DESTINATION ${datadir})\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Ready to build!\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Dump some information\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n# Go through every sub-project\n\n#\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# Packaging\n\n#\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# Common settings\n\n#\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# Debian\n\n#\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\n\n# RPM\n\n#\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n\n# OSX, Windows: TODO\n\n#\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# TODO: CPACK_RESOURCE_FILE_WELCOME\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# TODO: CPACK_NSIS_*\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CPack must be included after the CPACK_* variables are set in order for those\n\n# variables to take effect.\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "cmake/FindENet.cmake" : {
      "ObjectId" : "b6c146c3cd5c836bb8e2013b9a90ee29724f3990",
      "LastModified" : "2015-02-10T22:53:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find enet\n\n# Once done this will define\n\n#\n\n#  ENET_FOUND - system has enet\n\n#  ENet_INCLUDE_DIRS - the enet include directory\n\n#  ENet_LIBRARIES - the libraries needed to use enet\n\n#\n\n# $ENETDIR is an environment variable used for finding enet.\n\n#\n\n#  Borrowed from The Mana World\n\n#  http://themanaworld.org/\n\n#\n\n# Several changes and additions by Fabian 'x3n' Landau\n\n# Lots of simplifications by Adrian Friedli\n\n#                 > www.orxonox.net <\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ENET_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "22576b4379de59cd7ef78cfb0639475a4cf1c546",
      "LastModified" : "2015-02-10T22:53:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 81,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 82,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 151,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cmake/FindSDL2_image.cmake" : {
      "ObjectId" : "81324831f2640b22265e5cee158543a7cde8ff00",
      "LastModified" : "2015-02-10T22:53:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL_image library\n\n# This module defines:\n\n#  SDL2_IMAGE_LIBRARIES, the name of the library to link against\n\n#  SDL2_IMAGE_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_IMAGE_FOUND, if false, do not try to link against\n\n#  SDL2_IMAGE_VERSION_STRING - human-readable string containing the version of SDL_image\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#  SDLIMAGE_LIBRARY (same value as SDL2_IMAGE_LIBRARIES)\n\n#  SDLIMAGE_INCLUDE_DIR (same value as SDL2_IMAGE_INCLUDE_DIRS)\n\n#  SDLIMAGE_FOUND (same value as SDL2_IMAGE_FOUND)\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 40,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 41,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 42,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# for backward compatiblity\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindSDL2_mixer.cmake" : {
      "ObjectId" : "7c3e14e81090972156d6ddbacc26613a5f54a1ea",
      "LastModified" : "2015-02-10T22:53:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL_mixer library\n\n# This module defines:\n\n#  SDL2_MIXER_LIBRARIES, the name of the library to link against\n\n#  SDL2_MIXER_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_MIXER_FOUND, if false, do not try to link against\n\n#  SDL2_MIXER_VERSION_STRING - human-readable string containing the version of SDL_mixer\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#  SDLMIXER_LIBRARY (same value as SDL2_MIXER_LIBRARIES)\n\n#  SDLMIXER_INCLUDE_DIR (same value as SDL2_MIXER_INCLUDE_DIRS)\n\n#  SDLMIXER_FOUND (same value as SDL2_MIXER_FOUND)\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 48,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 49,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 50,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# for backward compatiblity\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/PlatformApple.cmake" : {
      "ObjectId" : "1cfcc5ee792f436d7c3011a986318e65d2ee61f7",
      "LastModified" : "2015-05-23T12:41:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Apple specific compiler settings\n\n# --------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use clang compiler\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up paths\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The gettext module will install the translations unconditionally.\n\n# Redirect the installation to a build directory where it does no harm.\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Ignore MacPorts and Fink and any other locally installed packages that\n\n# might prevent building a distributable binary.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some of our code contains Objective C constructs.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Avoid mistaking an object file for a source file on the link command line.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Identify the target system:\n\n# Ask for 64-bit binary.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Minimum OS X version.\n\n# This is inserted into the Info.plist as well.\n\n# Note that the SDK determines the maximum version of which optional\n\n# features can be used, not the minimum required version to run.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Do not warn about frameworks that are not available on all architectures.\n\n# This avoids a warning when linking with QuickTime.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Specify target CPUs.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Target flags apply to both C and C++ compilation.\n\n# CMake passes these to the compiler on the link command line as well.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Linker flags.\n\n# Drop unreachable code and data.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Reserve the minimum size for the zero page.\n\n# Our JIT requires virtual memory space below 2GB, while the default zero\n\n# page on x86_64 is 4GB in size.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##SDL_CFLAGS=`sdl-config --cflags`\n\n##SDL_LIBS=`sdl-config --libs`\n\n#SDK=\"-arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk\"\n\n#SDL_CFLAGS=\"$SDK -I/Library/Frameworks/SDL.framework/Headers -I/Library/Frameworks/SDL_net.framework/Headers -I/Library/Frameworks/SDL_mixer.framework/Headers -I/Library/Frameworks/SDL_image.framework/Headers\"\n\n#SDL_LIBS=\"-F/Library/Frameworks -framework CoreFoundation -framework Cocoa -framework SDL\"\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## copied over from original Makefile\n\n#echo 'CFLAGS:=$(CFLAGS) -D__MACOSX__ -DLINUXFUNC -DPREFIXPATH=\\\"\\\" '$SDL_CFLAGS $CFLAGS >> configuration\n\n#echo 'LDFLAGS:=$(LDFLAGS) '$SDL_LIBS $LDFLAGS -framework SDL_image -framework SDL_mixer -framework png >> configuration\n\n#echo 'COMMON_OBJS:=$(COMMON_OBJS) build/linfunc.o build/SDLMain.o' >> configuration\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/PlatformArm.cmake" : {
      "ObjectId" : "20dd12e5250fb88343c83f20f2f5efc2f1959ec5",
      "LastModified" : "2016-02-05T19:34:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ARM specific compiler settings\n\n# ------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Select the optimal FPU settings\n\n# If you get linking errors, try editing these flags\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Apply the flags\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/PlatformArm64.cmake" : {
      "ObjectId" : "31891d8c334f83f03152c2cd0db865b91179735a",
      "LastModified" : "2015-05-26T19:15:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AArch64 specific compiler settings\n\n# ----------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Apply the flags\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/PlatformEmscripten.cmake" : {
      "ObjectId" : "4b32363fcf1d994662a1ef87cb48cf19b3d0a731",
      "LastModified" : "2016-02-29T20:11:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Emscripten config\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/PlatformMSVC.cmake" : {
      "ObjectId" : "dfd75203e2a12faf0a71bf3b4d8825cd522c6f8a",
      "LastModified" : "2015-05-26T19:15:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVC specific compiler settings\n\n# -------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Precompiled header support for MSVC:\n\n# Call this after setting the source list (and don't add the source file used\n\n# to generate the pch file, this will be done here automatically)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate precompiled header translation unit\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Update properties of source files to use the precompiled header.\n\n# Additionally, force the inclusion of the precompiled header at\n\n# beginning of each source file.\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Finally, update the source file collection to contain the\n\n# precompiled header translation unit\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# enable_precompiled_headers(Src/stdafx.h Src/stdafx.cpp SRCS)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/PlatformX64.cmake" : {
      "ObjectId" : "c0722f8c9966eec7e445b26f37d7c3a0c4bc50bf",
      "LastModified" : "2016-02-05T19:34:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AMD64/x86_64 specific compiler settings\n\n# ---------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The same as for x86\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/PlatformX86.cmake" : {
      "ObjectId" : "0210e93acba00222a78a52d2db59dba7ca4c8112",
      "LastModified" : "2016-02-05T19:34:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# x86 specific compiler settings\n\n# ------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/common/CMakeLists.txt" : {
      "ObjectId" : "4dec5eac7ffbec13d62aa524dff01c2b60ba3eea",
      "LastModified" : "2016-12-14T18:16:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/common_netplay/CMakeLists.txt" : {
      "ObjectId" : "cd33a153a4187c1869a4b9a2c94cf78388978646",
      "LastModified" : "2016-02-05T19:34:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/leveleditor/CMakeLists.txt" : {
      "ObjectId" : "a2690c044e7f59d9b6db2baa818e3c0e4ed3371b",
      "LastModified" : "2016-02-05T19:34:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add EXE icon on Windows\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Dependencies\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Installation\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install Linux desktop item and icons\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/server/CMakeLists.txt" : {
      "ObjectId" : "e66509c81669f3cff00a62e48f1bc287e147a05d",
      "LastModified" : "2016-12-14T18:16:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# WinSock2 libs, required by ENet on Windows\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/smw/CMakeLists.txt" : {
      "ObjectId" : "d821f3e357cbaf731b3377ad1f18be608da51c3c",
      "LastModified" : "2016-12-14T18:16:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Game objects\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Player components\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Menu screens\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add EXE icon on Windows\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_executable(smw ${COMMON_SRCS} ${SMW_SRCS} ../common/global.h)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Dependencies\n\n#\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: fix emscripten build\n\n# emscripten uses its own SDL\n\n# if(NOT TARGET_EMSCRIPTEN)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# WinSock2 libs, required by ENet on Windows\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n# Installation\n\n#\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# install Linux desktop item and icons\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/worldeditor/CMakeLists.txt" : {
      "ObjectId" : "688eb18e4c34c8bcca957e594739f81cd0dbaea5",
      "LastModified" : "2016-02-05T19:34:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add EXE icon on Windows\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Dependencies\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Installation\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install Linux desktop item and icons\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 18
  },
  "ElapsedTime" : 2530
}