{
  "Repository" : "6837877",
  "Revision" : "HEAD",
  "ObjectId" : "9ac0300065b21e25f4cb534229dcc4312ebfd1f3",
  "CommitTime" : "2019-04-18T17:49:52Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "2b87534e42d91524e9dd754f2acb7df2688d3089",
      "LastModified" : "2019-04-05T15:23:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ==========================\n\n# BEDTools Makefile\n\n# (c) 2009 Aaron Quinlan\n\n# ==========================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define our object and binary directories\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the user has specified to do so, tell the compile to use rand() (instead of mt19937).\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ensure that the user's $CXXFLAGS/etc are applied after bedtools's.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include all the Makefile fragments, which add to $(BUILT_OBJECTS)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Automatically generate C++ dependencies.\n\n## $(DEPFLAGS) is a set of compiler flags that causes the compiler to generate\n\n## dependencies as a byproduct (which we write to a temporary file, only moving\n\n## it into place on successful compilations).\n\n## We then include the dependency files into this Makefile.\n\n## The subdirectories' Makefile fragments contain rules like the one for\n\n## $(OBJ_DIR)/bedtools.o below, with a dependency on obj/foo.d so that if\n\n## the dependency file is missing the target will be rebuilt.\n\n##\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# HTSlib's htslib.mk provides rules to rebuild $(HTSDIR)/libhts.a.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This order-only prerequisite ensures OBJ_DIR exists before building any .o file\n\n# but ignores the directory's timestamp, which changes every time a .o file is written.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# make the \"obj/\" and \"bin/\" directories, if they don't exist\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Usually HTSlib's configure script has not been used (detected via config.mk\n\n# not existing), so clean should also remove the generated config.h.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## For BEDTools developers (not users):\n\n## When you want to release (and tag) a new version, run:\n\n##   $ make setversion VERSION=v2.17.2\n\n## This will:\n\n##   1. Update the \"/src/utils/version/version_release.txt\" file\n\n##   2. Commit the file\n\n##   3. Git-Tag the commit with the latest version\n\n##\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Automatic version detection\n\n##\n\n## What's going on here?\n\n## 1. If there's a \".git\" repository - use the version from the repository.\n\n##    ignore any released-version file. git repository is authorative.\n\n##\n\n## 2, If there's no \".git\" repository,\n\n##    get the \"released\" version number from the release-version file.\n\n##\n\n##    2.1. If the current directory looks like \"arq5x-bedtools-XXXXXXX\",\n\n##         assume \"-XXXXXX\" is the last revision number (and the user\n\n##         probably downloaded the ZIP from github).\n\n##         Append the revision number to the released version string.\n\n##\n\n## 3. Compare the detected version (from steps 1,2) to the current string\n\n##    in ./src/utils/version/version_git.h .\n\n##    If they differ, update the header file - will cause a recompilation\n\n##    of version.o .\n\n##\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "docs/Makefile" : {
      "ObjectId" : "071223baabccb81db1784cacba6985f1ca2c2dc4",
      "LastModified" : "2012-07-21T15:04:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/nekSandbox1/Makefile" : {
      "ObjectId" : "854b555cb2f54cf1eb665ab426a5ca89df032f58",
      "LastModified" : "2019-03-23T19:53:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -------------------\n\n# define our includes\n\n# -------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------\n\n# define our source and object files\n\n# ----------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/utils/htslib/Makefile" : {
      "ObjectId" : "2931898eadc8919e4ec7d5544d27d5bd95dde0ce",
      "LastModified" : "2019-03-28T10:28:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for htslib, a C library for high-throughput sequencing data formats.\n\n#\n\n#    Copyright (C) 2013-2017 Genome Research Ltd.\n\n#\n\n#    Author: John Marshall <jm18@sanger.ac.uk>\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default libraries to link if configure is not used\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: probably update cram code to make it compile cleanly with -Wc++-compat\n\n# For testing strict C99 support add -std=c99 -D_XOPEN_SOURCE=600\n\n#CFLAGS   = -g -Wall -O2 -pedantic -std=c99 -D_XOPEN_SOURCE=600 -D__FUNCTION__=__func__\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set by config.mk if plugins are enabled\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If not using GNU make, you need to copy the version number from version.sh\n\n# into here.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# $(NUMERIC_VERSION) is for items that must have a numeric X.Y.Z string\n\n# even if this is a dirty or untagged Git working tree.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force version.h to be remade if $(PACKAGE_VERSION) has changed.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# To be effective, config.mk needs to appear after most Makefile variables are\n\n# set but before most rules appear, so that it can both use previously-set\n\n# variables in its own rules' prerequisites and also update variables for use\n\n# in later rules' prerequisites.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If your make doesn't accept -include, change this to 'include' if you are\n\n# using the configure script or just comment the line out if you are not.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Usually config.h is generated by running configure or config.status,\n\n# but if those aren't used create a default config.h here.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# And similarly for htslib.pc.tmp (\"pkg-config template\").  No dependency\n\n# on htslib.pc.in listed, as if that file is newer the usual way to regenerate\n\n# this target is via configure or config.status rather than this rule.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create a makefile fragment listing the libraries and LDFLAGS needed for\n\n# static linking.  This can be included by projects that want to build\n\n# and link against the htslib source tree instead of an installed library.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# $(shell), :=, and ifeq/.../endif are GNU Make-specific.  If you don't have\n\n# GNU Make, comment out the parts of these conditionals that don't apply.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The target here is libhts.so, as that is the built file that other rules\n\n# depend upon and that is used when -lhts appears in other program's recipes.\n\n# As a byproduct invisible to make, libhts.so.NN is also created, as it is the\n\n# file used at runtime (when $LD_LIBRARY_PATH includes the build directory).\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Similarly this also creates libhts.NN.dylib as a byproduct, so that programs\n\n# when run can find this uninstalled shared library (when $DYLD_LIBRARY_PATH\n\n# includes this project's build directory).\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For tests that might use it, set $REF_PATH explicitly to use only reference\n\n# areas within the test suite (or set it to ':' to use no reference areas).\n\n#\n\n# If using MSYS, avoid poor shell expansion via:\n\n#    MSYS2_ARG_CONV_EXCL=\"*\" make check\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# After installation, the real file in $(libdir) will be libhts.so.X.Y.Z,\n\n# with symlinks libhts.so (used via -lhts during linking of client programs)\n\n# and libhts.so.NN (used by client executables at runtime).\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Substitute these pseudo-autoconf variables only at install time\n\n# so that \"make install prefix=/prefix/path\" etc continue to work.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# A pkg-config file (suitable for copying to $PKG_CONFIG_PATH) that provides\n\n# flags for building against the uninstalled library in this build directory.\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#g;s#@-libdir@#'`pwd`'#g' htslib.pc.tmp > $@\n",
        "Line" : 386,
        "CharPositionInLine" : 32
      },
      "20" : {
        "Text" : "# We recommend libhts-using programs be built against a separate htslib\n\n# installation.  However if you feel that you must bundle htslib source\n\n# code with your program, this hook enables Automake-style \"make dist\"\n\n# for this subdirectory.  If you do bundle an htslib snapshot, please\n\n# add identifying information to $(PACKAGE_VERSION) as appropriate.\n\n# (The wildcards attempt to omit non-exported files (.git*, README.md,\n\n# etc) and other detritus that might be in the top-level directory.)\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tutorial/Makefile" : {
      "ObjectId" : "2349bd1871ee4c0aabaafb6f486f67f6526b07b2",
      "LastModified" : "2015-01-02T01:48:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 2951
}