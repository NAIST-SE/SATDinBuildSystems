{
  "Repository" : "71307",
  "Revision" : "HEAD",
  "ObjectId" : "a12cb9d211019d99b5875b6d8034617cbc24c2cc",
  "CommitTime" : "2019-04-19T00:52:54Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b5bda7a9a138528d561401497090d9b8af0673e2",
      "LastModified" : "2019-04-18T14:47:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See www/CMake.html for instructions on how to build libcxx with CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#===============================================================================\n\n# Setup Project\n\n#===============================================================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MACOSX_RPATH=YES by default\n",
        "Line" : 9,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# Required when interacting with LLVM and Clang\n",
        "Line" : 12,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the LLVM sources and simulate LLVM CMake options.\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Require out of source build.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#===============================================================================\n\n# Setup CMake Options\n\n#===============================================================================\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Basic options ---------------------------------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Benchmark options -----------------------------------------------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ABI Library options ---------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup the default options if LIBCXX_CXX_ABI is not specified.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FIXME: Figure out how to configure the ABI library on Windows.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Generate and install a linker script inplace of libc++.so. The linker script\n\n# will link libc++ to the correct ABI library. This option is on by default\n\n# on UNIX platforms other than Apple unless 'LIBCXX_ENABLE_STATIC_ABI_LIBRARY'\n\n# is on. This option is also disabled when the ABI library is not specified\n\n# or is specified to be \"none\".\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build libc++abi with libunwind. We need this option to determine whether to\n\n# link with libunwind or libgcc_s while running the test cases.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Target options --------------------------------------------------------------\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Feature options -------------------------------------------------------------\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Misc options ----------------------------------------------------------------\n\n# FIXME: Turn -pedantic back ON. It is currently off because it warns\n\n# about #include_next which is used everywhere.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Don't allow a user to accidentally overwrite the system libc++ installation on Darwin.\n\n# If the user specifies -DCMAKE_INSTALL_PREFIX=/usr the install rules for libc++\n\n# will not be generated and a warning will be issued.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Don't show this option by default.\n",
        "Line" : 252,
        "CharPositionInLine" : 49
      },
      "20" : {
        "Text" : "# Show the override option.\n",
        "Line" : 259,
        "CharPositionInLine" : 59
      },
      "21" : {
        "Text" : "#===============================================================================\n\n# Check option configurations\n\n#===============================================================================\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Ensure LIBCXX_ENABLE_MONOTONIC_CLOCK is set to ON only when\n\n# LIBCXX_ENABLE_THREADS is on.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Ensure LLVM_USE_SANITIZER is not specified when LIBCXX_GENERATE_COVERAGE\n\n# is ON.\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set LIBCXX_BUILD_32_BITS to (LIBCXX_BUILD_32_BITS OR LLVM_BUILD_32_BITS)\n\n# and check that we can build with 32 bits if requested.\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Don't duplicate the output from LLVM\n",
        "Line" : 341,
        "CharPositionInLine" : 55
      },
      "26" : {
        "Text" : "# Warn users that LIBCXX_ENABLE_STATIC_ABI_LIBRARY is an experimental option.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#===============================================================================\n\n# Configure System\n\n#===============================================================================\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Declare libc++ configuration variables.\n\n# They are intended for use as follows:\n\n# LIBCXX_CXX_FLAGS: General flags for both the compiler and linker.\n\n# LIBCXX_COMPILE_FLAGS: Compile only flags.\n\n# LIBCXX_LINK_FLAGS: Linker only flags.\n\n# LIBCXX_LIBRARIES: libraries libc++ is linked to.\n\n# LIBCXX_INTERFACE_LIBRARIES: Libraries that must be linked when using libc++\n\n#                             These libraries are exposed in the linker script.\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Include macros for adding and removing libc++ flags.\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Target flags ================================================================\n\n# These flags get added to CMAKE_CXX_FLAGS and CMAKE_C_FLAGS so that\n\n# 'config-ix' use them during feature checks. It also adds them to both\n\n# 'LIBCXX_COMPILE_FLAGS' and 'LIBCXX_LINK_FLAGS'\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Configure compiler.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Configure coverage options.\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#===============================================================================\n\n# Setup Compiler Flags\n\n#===============================================================================\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Setup the ABI library flags\n",
        "Line" : 481,
        "CharPositionInLine" : 25
      },
      "35" : {
        "Text" : "# Remove flags that may have snuck in.\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# FIXME: Remove all debug flags and flags that change which Windows\n\n# default libraries are linked. Currently we only support linking the\n\n# non-debug DLLs\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# FIXME(EricWF): See the FIXME on LIBCXX_ENABLE_PEDANTIC.\n\n# Remove the -pedantic flag and -Wno-pedantic and -pedantic-errors\n\n# so they don't get transformed into -Wno and -errors respectively.\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Required flags ==============================================================\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# musl's pthread implementations uses volatile types in their structs which is\n\n# not a constexpr in C++11 but is in C++14, so we use C++14 with musl.\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# On all systems the system c++ standard library headers need to be excluded.\n\n# MSVC only has -X, which disables all default includes; including the crt.\n\n# Thus, we do nothing and hope we don't accidentally include any of the C++\n\n# headers\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Hide all inline function definitions which have not explicitly been marked\n\n# visible. This prevents new definitions for inline functions from appearing in\n\n# the dylib when get ODR used by another function.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# This simply allows IDE to process <experimental/coroutine>\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Let the library headers know they are currently being used to build the\n\n# library.\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Warning flags ===============================================================\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# For ignoring \"'diagnose_if' is a clang extension\" warnings\n",
        "Line" : 560,
        "CharPositionInLine" : 24
      },
      "46" : {
        "Text" : "# FIXME: Remove this and fix all occurrences.\n",
        "Line" : 561,
        "CharPositionInLine" : 43
      },
      "47" : {
        "Text" : "# For auto_ptr\n",
        "Line" : 562,
        "CharPositionInLine" : 47
      },
      "48" : {
        "Text" : "# FIXME: Remove this and fix all occurrences.\n",
        "Line" : 565,
        "CharPositionInLine" : 24
      },
      "49" : {
        "Text" : "# FIXME: Why do we need this with clang-cl but not clang?\n",
        "Line" : 566,
        "CharPositionInLine" : 33
      },
      "50" : {
        "Text" : "# FIXME: remove me\n",
        "Line" : 567,
        "CharPositionInLine" : 30
      },
      "51" : {
        "Text" : "# TODO(EricWF) Remove this. We shouldn't be suppressing errors when -Werror is\n\n# added elsewhere.\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Exception flags =============================================================\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Catches C++ exceptions only and tells the compiler to assume that extern C\n\n# functions never throw a C++ exception.\n",
        "Line" : 593,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# RTTI flags ==================================================================\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Threading flags =============================================================\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Need to allow unresolved symbols if this is to work with shared library builds\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Relax this restriction from HandleLLVMOptions\n",
        "Line" : 615,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Assertion flags =============================================================\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 626,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Modules flags ===============================================================\n\n# FIXME The libc++ sources are fundamentally non-modular. They need special\n\n# versions of the headers in order to provide C++03 and legacy ABI definitions.\n\n# NOTE: The public headers can be used with modules in all other contexts.\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Ignore that the rest of the modules flags are now unused.\n",
        "Line" : 635,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Sanitizer flags =============================================================\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# NOTE: LLVM_USE_SANITIZER checks for a UNIX like system instead of MSVC.\n\n# But we don't have LLVM_ON_UNIX so checking for MSVC is the best we can do.\n",
        "Line" : 645,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Configure for sanitizers. If LIBCXX_STANDALONE_BUILD then we have to do\n\n# the flag translation ourselves. Othewise LLVM's CMakeList.txt will handle it.\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Configuration file flags =====================================================\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# By default libc++ on Windows expects to use a shared library, which requires\n\n# the headers to use DLL import/export semantics. However when building a\n\n# static library only we modify the headers to disable DLL import/export.\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Provide the config definitions by included the generated __config_site\n\n# file at compile time.\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "#===============================================================================\n\n# Setup Source Code And Tests\n\n#===============================================================================\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Create the lit.site.cfg file even when LIBCXX_INCLUDE_TESTS is OFF or\n\n# LLVM_FOUND is OFF. This allows users to run the tests manually using\n\n# LIT without requiring a full LLVM checkout.\n\n#\n\n# However, since some submission systems strip test/ subdirectories, check for\n\n# it before adding it.\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# for get_llvm_lit_path\n",
        "Line" : 794,
        "CharPositionInLine" : 19
      },
      "71" : {
        "Text" : "# Make sure the llvm-lit script is generated into the bin directory, and do\n\n# it after adding all tests, since the generated script will only work\n\n# correctly discovered tests against test locations from the source tree that\n\n# have already been discovered.\n",
        "Line" : 795,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 72
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "11e3f99604bb63e2cf289a17f18757eb599737ed",
      "LastModified" : "2019-03-19T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==============================================================================\n\n# Build Google Benchmark for libc++\n\n#==============================================================================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n\n# Build Google Benchmark for the native stdlib\n\n#==============================================================================\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==============================================================================\n\n# Benchmark tests configuration\n\n#==============================================================================\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the compiler doesn't support -std=c++17, attempt to fall back to -std=c++1z while still\n\n# requiring C++17 language features.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#==============================================================================\n\n# Register Benchmark tests\n\n#==============================================================================\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Only report the adding of the benchmark once.\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/Modules/CheckLibcxxAtomic.cmake" : {
      "ObjectId" : "1e6e5e6376620a7aa447c780e94791727cf92b29",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sometimes linking against libatomic is required for atomic ops, if\n\n# the platform doesn't support lock-free atomics.\n\n#\n\n# We could modify LLVM's CheckAtomic module and have it check for 64-bit\n\n# atomics instead. However, we would like to avoid careless uses of 64-bit\n\n# atomics inside LLVM over time on 32-bit platforms.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Perform the check for 64bit atomics without libatomic. It may have been\n\n# added to the required libraries during in the configuration of LLVM, which\n\n# would cause the check for CXX atomics without libatomic to incorrectly pass.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "1bd3a786812a5a62f9ea4f174bb029ff933d9b36",
      "LastModified" : "2017-03-11T03:24:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/HandleCompilerRT.cmake" : {
      "ObjectId" : "1ce2565749418f3239b3bcc2269a692afb74852d",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/HandleLibCXXABI.cmake" : {
      "ObjectId" : "10f100f7f0fbcdebcd6f54f9e30807f770569a7f",
      "LastModified" : "2019-04-03T01:33:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===============================================================================\n\n# Add an ABI library if appropriate\n\n#===============================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# _setup_abi: Set up the build to use an ABI library\n\n#\n\n# Parameters:\n\n#   abidefines: A list of defines needed to compile libc++ with the ABI library\n\n#   abishared : The shared ABI library to link against.\n\n#   abistatic : The static ABI library to link against.\n\n#   abifiles  : A list of files (which may be relative paths) to copy into the\n\n#               libc++ build tree for the build.  These files will be copied\n\n#               twice: once into include/, so the libc++ build itself can find\n\n#               them, and once into include/c++/v1, so that a clang built into\n\n#               the same build area will find them.  These files will also be\n\n#               installed alongside the libc++ headers.\n\n#   abidirs   : A list of relative paths to create under an include directory\n\n#               in the libc++ build directory.\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure based on the selected ABI library.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link against just-built \"cxxabi\" target.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Assume c++abi is installed in the system, rely on -lc++abi link flag.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Nothing TODO\n",
        "Line" : 124,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Nothing TODO\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/Modules/HandleLibcxxFlags.cmake" : {
      "ObjectId" : "cde2c297a2802f2c349bc8fb13c8fffc2db4e96f",
      "LastModified" : "2019-04-18T14:47:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HandleLibcxxFlags - A set of macros used to setup the flags used to compile\n\n# and link libc++. These macros add flags to the following CMake variables.\n\n# - LIBCXX_COMPILE_FLAGS: flags used to compile libc++\n\n# - LIBCXX_LINK_FLAGS: flags used to link libc++\n\n# - LIBCXX_LIBRARIES: libraries to link libc++ to.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mangle the name of a compiler flag into a valid CMake identifier.\n\n# Ex: --std=c++11 -> STD_EQ_CXX11\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove a list of flags from all CMake variables that affect compile flags.\n\n# This can be used to remove unwanted flags specified on the command line\n\n# or added in other parts of LLVM's cmake configuration.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the specified 'condition' is true then append the specified list of flags to DEST\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add each flag in the list specified by DEST if that flag is supported by the current compiler.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add a macro definition if condition is true.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add a macro definition if condition is not true.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add a macro definition to the __config_site file if the specified condition\n\n# is 'true'. Note that '-D${def}' is not added. Instead it is expected that\n\n# the build include the '__config_site' header.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add a list of flags to all of 'CMAKE_CXX_FLAGS', 'CMAKE_C_FLAGS',\n\n# 'LIBCXX_COMPILE_FLAGS' and 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the specified 'condition' is true then add a list of flags to\n\n# all of 'CMAKE_CXX_FLAGS', 'CMAKE_C_FLAGS', 'LIBCXX_COMPILE_FLAGS'\n\n# and 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add a specified list of flags to both 'LIBCXX_COMPILE_FLAGS' and\n\n# 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If the specified 'condition' is true then add a list of flags to both\n\n# 'LIBCXX_COMPILE_FLAGS' and 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add each flag in the list to LIBCXX_COMPILE_FLAGS and LIBCXX_LINK_FLAGS\n\n# if that flag is supported by the current compiler.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add a list of flags to 'LIBCXX_COMPILE_FLAGS'.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If 'condition' is true then add the specified list of flags to\n\n# 'LIBCXX_COMPILE_FLAGS'\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For each specified flag, add that flag to 'LIBCXX_COMPILE_FLAGS' if the\n\n# flag is supported by the C++ compiler.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add a list of flags to 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If 'condition' is true then add the specified list of flags to\n\n# 'LIBCXX_LINK_FLAGS'\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# For each specified flag, add that flag to 'LIBCXX_LINK_FLAGS' if the\n\n# flag is supported by the C++ compiler.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add a list of libraries or link flags to 'LIBCXX_LIBRARIES'.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# if 'condition' is true then add the specified list of libraries and flags\n\n# to 'LIBCXX_LIBRARIES'.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Turn a comma separated CMake list into a space separated string.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/Modules/HandleOutOfTreeLLVM.cmake" : {
      "ObjectId" : "11c13315585bfce3a20591c688067a6a32a2af5c",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --cmakedir is supported since llvm r291218 (4.0 release)\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Add LLVM Functions --------------------------------------------------------\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# For TARGET_TRIPLE\n",
        "Line" : 85,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "# LLVM Options --------------------------------------------------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# In a standalone build, we don't have llvm to automatically generate the\n\n# llvm-lit script for us.  So we need to provide an explicit directory that\n\n# the configurator should write the script into.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Required LIT Configuration ------------------------------------------------\n\n# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Required doc configuration\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/Modules/MacroEnsureOutOfSourceBuild.cmake" : {
      "ObjectId" : "a0669365bf99ca3c91fd25595a19d8d2f2f21365",
      "LastModified" : "2010-12-10T19:47:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/config-ix.cmake" : {
      "ObjectId" : "730ee7e164a60f93db341554af2056e133d4cef1",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE(compnerd) this is technically a lie, there is msvcrt, but for now, lets\n\n# let the default linking take care of that.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# libc++ is built with -nodefaultlibs, so we want all our checks to also\n\n# use this option, otherwise we may end up with an inconsistency between\n\n# the flags we think we require during configuration (if the checks are\n\n# performed without -nodefaultlibs) and the flags that are actually\n\n# required during compilation (which has the -nodefaultlibs). libc is\n\n# required for the link to go through. We remove sanitizers from the\n\n# configuration checks to avoid spurious link errors.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mingw64 requires quite a few \"C\" runtime libraries in order for basic\n\n# programs to link successfully with -nodefaultlibs.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Check compiler flags\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check libraries\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO(compnerd) do we want to support an emulation layer that allows for the\n\n# use of pthread-win32 or similar libraries to emulate pthreads on Windows?\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "d679761a5adb08be4903a0b10ff8f0c2d70ae7bc",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "9880115c86a4cd471ce3cfc0751bc6b8eafd7bee",
      "LastModified" : "2019-04-18T14:47:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate a custom __config header. The new header is created\n\n# by prepending __config_site to the current __config header.\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Add a target that executes the generation commands.\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Copy the generated header as __config into build directory.\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Install the generated header as __config.\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Stripping is a no-op for headers\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "3a562e052263ae5b29d42e7f2900665167cea2ae",
      "LastModified" : "2019-04-18T14:47:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get sources\n\n# FIXME: Don't use glob here\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Filesystem uses __int128_t, which requires a definition of __muloi4 when\n\n# compiled with UBSAN. This definition is not provided by libgcc_s, but is\n\n# provided by compiler-rt. So we need to disable it to avoid having multiple\n\n# definitions. See filesystem/int128_builtins.cpp.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add all the headers to the project for IDEs.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Force them all into the headers dir on MSVC, otherwise they end up at\n\n# project scope because they don't have extensions.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If LIBCXX_CXX_ABI_LIBRARY_PATH is defined we want to add it to the search path.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate private library list.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup flags.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Universal C runtime\n",
        "Line" : 105,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "# C++ runtime\n",
        "Line" : 106,
        "CharPositionInLine" : 44
      },
      "9" : {
        "Text" : "# C runtime startup files\n",
        "Line" : 107,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# C++ standard library. Required for exception_ptr internals.\n",
        "Line" : 108,
        "CharPositionInLine" : 42
      },
      "11" : {
        "Text" : "# Required for standards-complaint wide character formatting functions\n\n# (e.g. `printfw`/`scanfw`)\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Ignore the -MSC_VER mismatch, as we may build\n\n# with a different compatibility version.\n",
        "Line" : 121,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Don't check the msvcprt iterator debug levels\n\n# as we will define the iterator types; libc++\n\n# uses a different macro to identify the debug\n\n# level.\n",
        "Line" : 124,
        "CharPositionInLine" : 33
      },
      "14" : {
        "Text" : "# We are building the c++ runtime, don't pull in\n\n# msvcprt.\n",
        "Line" : 129,
        "CharPositionInLine" : 33
      },
      "15" : {
        "Text" : "# Don't warn on the use of \"deprecated\"\n\n# \"insecure\" functions which are standards\n\n# specified.\n",
        "Line" : 132,
        "CharPositionInLine" : 33
      },
      "16" : {
        "Text" : "# Use the ISO conforming behaviour for conversion\n\n# in printf, scanf.\n",
        "Line" : 136,
        "CharPositionInLine" : 33
      },
      "17" : {
        "Text" : "# Build the shared library.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Link against LLVM libunwind\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# For the linker script\n",
        "Line" : 167,
        "CharPositionInLine" : 60
      },
      "20" : {
        "Text" : "# libunwind is already included in libc++abi\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# For the linker script\n",
        "Line" : 172,
        "CharPositionInLine" : 53
      },
      "22" : {
        "Text" : "# Link against libc++abi\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For the linker script\n",
        "Line" : 185,
        "CharPositionInLine" : 79
      },
      "24" : {
        "Text" : "# For the benchmarks\n",
        "Line" : 186,
        "CharPositionInLine" : 69
      },
      "25" : {
        "Text" : "# Maybe re-export symbols from libc++abi\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Generate a linker script in place of a libc++.so symlink. Rerun this command\n\n# after cxx builds.\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Get the name of the ABI library and handle the case where CXXABI_LIBNAME\n\n# is a target name and not a library. Ex cxxabi_shared.\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# FIXME: Handle cxxabi_static and unwind_static.\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# Since we most likely do not have a mt.exe replacement, disable the\n\n# manifest bundling.  This allows a normal cmake invocation to pass which\n\n# will attempt to use the manifest tool to generate the bundled manifest\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Build the static library.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Attempt to merge the libc++.a archive and the ABI library archive into one.\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Add a meta-target for both libraries.\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# NOTE: This install command must go after the cxx install command otherwise\n\n# it will not be executed after the library symlinks are installed.\n",
        "Line" : 351,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Replace the libc++ filename with $<TARGET_LINKER_FILE:cxx>\n\n# after we required CMake 3.0.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# TODO: This is needed by cxx-benchmarks but this variable isn't\n\n# available outside of the scope of this file so we need to export\n\n# it. This is not necessarily the cleanest solution.\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "lib/abi/CMakeLists.txt" : {
      "ObjectId" : "bb9217f884727ed7bde625b0415f9cbc26858ae0",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ignore the major, minor, and patchlevel versions of darwin targets.\n",
        "Line" : 4,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Ignore the major and minor versions of freebsd targets.\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Detect if we are building in the same configuration used to generate\n\n# the abilist files.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "408ab62664fec6bf096ea536a355e9a5232395c6",
      "LastModified" : "2019-04-18T14:47:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The tests shouldn't link to any ABI library when it has been linked into\n\n# libc++ statically or via a linker script.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The tests shouldn't link to libunwind if we have a linker script which\n\n# already does so.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# By default, for non-standalone builds, libcxx and libcxxabi share a library\n\n# directory.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for configure_lit_site_cfg and add_lit_testsuit\n",
        "Line" : 63,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# Create dummy targets for each of the tests in the test suite, this allows\n\n# IDE's such as CLion to correctly highlight the tests because it knows\n\n# roughly what include paths/compile flags/macro definitions are needed.\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "utils/google-benchmark/CMakeLists.txt" : {
      "ObjectId" : "310c7ee9f6b2b792726a7cc644bdd7855274f588",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n\n# Support no if() IN_LIST operator\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n\n# may require downloading the source code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This option can be used to disable building and running unit tests which depend on gtest\n\n# in cases where it is not possible to build or find a valid version of gtest.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: The --coverage flag needs to be removed when building assembly\n\n# tests for this to work.\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 52,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# This option disables the building and running of the assembly verification tests\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Disable warnings regarding deprecated parts of the library while building\n\n# and testing those parts of the library.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Intel silently ignores '-Wno-deprecated-declarations',\n\n# warning no. 1786 must be explicitly disabled.\n\n# See #631 for rationale.\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Disable deprecation warnings for release builds (when -Werror is enabled).\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 165,
        "CharPositionInLine" : 52
      },
      "20" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Coverage build type\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Set up directories\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Build the targets\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "utils/google-benchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "d0d2099814402a3fc54ed2be2b61cd4f31d5c5f7",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add -Werror to ensure the compiler generates an error if the warning flag\n\n# doesn't exist.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "utils/google-benchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "99b56dd6239048285d13bad13ed2dcde0d7ae5c2",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/google-benchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "4f10f226d7a78fbb1e9fc5cb58adfa13b82ec71c",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "utils/google-benchmark/cmake/HandleGTest.cmake" : {
      "ObjectId" : "b9c14436dbfa4c67ab1e406d2659591812b95457",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Since 10/Feb/2017 the googletest trunk has had a bug where\n\n# -Werror=unused-function fires during the build on OS X. This is a temporary\n\n# workaround to keep our travis bots from failing. It should be removed\n\n# once gtest is fixed.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use gmock_main instead of gtest_main because it initializes gtest as well.\n\n# Note: The libraries are listed in reverse order of their dependancies.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8 and older don't respect INTERFACE_INCLUDE_DIRECTORIES, so we\n\n# have to add the paths ourselves.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# FIXME: We don't currently require the gmock library to build the tests,\n\n# and it's likely we won't find it, so we don't try. As long as we've\n\n# found the gmock/gmock.h header and gtest_main that should be good enough.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "utils/google-benchmark/cmake/llvm-toolchain.cmake" : {
      "ObjectId" : "fc119e52fd26a59786b3480f3e6c64c72b78ad8d",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/google-benchmark/cmake/split_list.cmake" : {
      "ObjectId" : "67aed3fdc8579b7d9a6f06a73fa9b6844976e691",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/google-benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "977474f43f2abadc92f83fb069c535c077863efc",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need extra libraries on Solaris\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Benchmark main library\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "utils/google-benchmark/test/AssemblyTests.cmake" : {
      "ObjectId" : "3d078586f1de1494650b73447bedd711b1c1c651",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/google-benchmark/test/CMakeLists.txt" : {
      "ObjectId" : "f15ce208189933b74fadf43677d03b909bade273",
      "LastModified" : "2019-02-04T20:31:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Some tests use `<cassert>` to perform the test. Therefore we must\n\n# strip -DNDEBUG from the default CMake flags in DEBUG mode.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: These flags must be added after find_package(Threads REQUIRED) otherwise\n\n# they will break the configuration check.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Demonstration executable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some of the issues with DoNotOptimize only occur when optimization is enabled\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# libstdc++ provides different definitions within <map> between dialects. When\n\n# LTO is enabled and -Werror is specified GCC diagnoses this ODR violation\n\n# causing the test to fail to compile. To prevent this we explicitly disable\n\n# the warning.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Attempt to work around flaky test failures when running on Appveyor servers.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################\n\n# GoogleTest Unit Tests\n\n###############################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Assembly Unit Tests\n\n###############################################################################\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################\n\n# Code Coverage Configuration\n\n###############################################################################\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the coverage command(s)\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    }
  },
  "FileTypes" : {
    "CMAKE" : 25
  },
  "ElapsedTime" : 2516
}