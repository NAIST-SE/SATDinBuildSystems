{
  "Repository" : "79451021",
  "Revision" : "HEAD",
  "ObjectId" : "34501207e210c3f44019ed6bb5b11b93dbd81dab",
  "CommitTime" : "2019-02-25T19:39:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f0ba5c84025f97942b8b6a302ac0b291dd0513db",
      "LastModified" : "2018-07-20T08:02:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The version number.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++14 support\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable warnings.\n\n# -Wall is not enabled on Windows platform due to warnings from Windows SDK headers.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define output directory.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use the \"Debug\" as the default build type.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compile the Rust crates\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compile tests\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "30ef46642133f5c5027f7e1c09800f0f7f257031",
      "LastModified" : "2018-06-23T16:42:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper library for ensuring RUNPATH gets set for ELF binaries.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Collection of available test libraries\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Collection of available tests\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/cpp-dl/CMakeLists.txt" : {
      "ObjectId" : "86829f036b4210dd2904d0e178c3605c4f6c6979",
      "LastModified" : "2018-11-14T02:30:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++14 support\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define source files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the intercom-cli as code generator for multi_lib.h/multi_lib.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use the intercom-cli as code generator for test_lib.h/test_lib.cpp\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ensure \"intercom.h\" is visible.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compile the test executable.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link to static dependencies\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link to test libraries.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "test/cpp-raw/CMakeLists.txt" : {
      "ObjectId" : "eceb219c92f628e5169d2fe8f99277fa3b94f008",
      "LastModified" : "2018-11-14T02:30:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++14 support\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define source files.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ensure \"intercom.hpp\" is visible.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link to static dependencies\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link to test libraries.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "test/cpp-utility/CMakeLists.txt" : {
      "ObjectId" : "9e7889eb99ca913287a99bbe6386b78dc085879b",
      "LastModified" : "2018-11-14T02:30:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++14 support\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define source files.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Specify additional compiler specific helpers.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use the intercom-cli as code generator for test_lib.h/test_lib.cpp\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ensure \"intercom.hpp\" is visible.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Testlib required to generate the test_lib.h and test_lib.cpp\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Linking to \"runpath\" library ensures that RUNPATH is set for ELF executables.\n\n# All the test libraries built with Rust are copied into this location as well.\n\n# Forcing the RUNPATH with the help of a dummy library ensures we can\n\n# dynamically load the libraries with their name alone.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compile specific linking.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Link to dl, support for loading dynamic libraries.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Link to \"pthread\", otherwise std::call_once used by ClassFactory does not work.\n\n# See the comments around \"__gthread_active\" in gthr-default.h\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "test/cpp-wrapper/CMakeLists.txt" : {
      "ObjectId" : "e0e564d2c6fcbae4f0daf2f91e178828504902ea",
      "LastModified" : "2018-11-14T02:30:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++14 support\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define source files.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ensure \"intercom.hpp\" is visible.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Linking to \"runpath\" library ensures that RUNPATH is set for ELF executables.\n\n# All the test libraries built with Rust are copied into this location as well.\n\n# Forcing the RUNPATH with the help of a dummy library ensures we can\n\n# dynamically load the libraries with their name alone.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link to static dependencies\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add dynamic dependencies\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "test/multilib/CMakeLists.txt" : {
      "ObjectId" : "09e8aa782885aa4771181f8ab4391d6ef0dfa4f9",
      "LastModified" : "2018-11-14T02:30:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine the name of the binary.\n\n# The binary is generated by Rust compiler so we cannot simply deduce it automatically.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine the parameters based on the build type.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build instructions for the library.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On Windows the DLLs are linked with the help of an import library.\n\n# Carge sets the name of the import library to \"<library>.dll.lib\".\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import library is required.\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# No need to depend on the import library.\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Publish as a library.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Unfortunately Rust has a poor support for \"soname\".\n\n# See the following discussions\n\n# - https://github.com/rust-lang/rust/issues/37529\n\n# - https://github.com/rust-lang/cargo/issues/5045\n\n#\n\n# Without this the NEEDED path in the binaries that link to this library are wrong.\n\n# Even if the CMAKE_RUNTIME_OUTPUT_DIRECTORY is set to a custom directory the\n\n# NEEDED path to this library within the executable is still set as if the compiled exectubale\n\n# was located in the default target. e.g. CMAKE_BINARY_DIR/test/<executable>/\n\n# Example:\n\n# - Wrong relative path: \"../../bin/lib/libtest_lib.so => not found\"\n\n# - Should have been: \"./lib/libtest_lib.so\"\n\n#\n\n# CMake: IMPORTED_NO_SONAME: Specifies that an IMPORTED shared library target has no \"soname\".\n\n# Set this property to true for an imported shared library file that has no \"soname\" field.\n\n# CMake may adjust generated link commands for some platforms to prevent the linker\n\n# from using the path to the library in place of its missing soname. Ignored for non-imported targets.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "test/runpath/CMakeLists.txt" : {
      "ObjectId" : "047b52b1c7ae708e05ba6e6b55f3841991af0180",
      "LastModified" : "2018-06-23T16:42:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++14 support\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define source files.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/testlib/CMakeLists.txt" : {
      "ObjectId" : "ad0b5ae92c2ed50b08aa32a41e7baa5104c45111",
      "LastModified" : "2018-11-14T02:30:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine the name of the binary.\n\n# The binary is generated by Rust compiler so we cannot simply deduce it automatically.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine the parameters based on the build type.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build instructions for the library.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On Windows the DLLs are linked with the help of an import library.\n\n# Carge sets the name of the import library to \"<library>.dll.lib\".\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import library is required.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# No need to depend on the import library.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Publish as a library.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Unfortunately Rust has a poor support for \"soname\".\n\n# See the following discussions\n\n# - https://github.com/rust-lang/rust/issues/37529\n\n# - https://github.com/rust-lang/cargo/issues/5045\n\n#\n\n# Without this the NEEDED path in the binaries that link to this library are wrong.\n\n# Even if the CMAKE_RUNTIME_OUTPUT_DIRECTORY is set to a custom directory the\n\n# NEEDED path to this library within the executable is still set as if the compiled exectubale\n\n# was located in the default target. e.g. CMAKE_BINARY_DIR/test/<executable>/\n\n# Example:\n\n# - Wrong relative path: \"../../bin/lib/libtest_lib.so => not found\"\n\n# - Should have been: \"./lib/libtest_lib.so\"\n\n#\n\n# CMake: IMPORTED_NO_SONAME: Specifies that an IMPORTED shared library target has no \"soname\".\n\n# Set this property to true for an imported shared library file that has no \"soname\" field.\n\n# CMake may adjust generated link commands for some platforms to prevent the linker\n\n# from using the path to the library in place of its missing soname. Ignored for non-imported targets.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "CMAKE" : 9
  },
  "ElapsedTime" : 1194
}