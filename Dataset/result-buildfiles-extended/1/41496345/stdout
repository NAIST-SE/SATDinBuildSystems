{
  "Repository" : "41496345",
  "Revision" : "HEAD",
  "ObjectId" : "f732904bbf121c7c7e23f752d676dae2be2a7a45",
  "CommitTime" : "2019-02-28T15:51:37Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "426642dc75262897d1b8504bac0b49c391b114f7",
      "LastModified" : "2019-02-11T23:53:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTES: Defaults to build type of Shared\n\n#        Forces out-of-source tree build\n\n#\n\n#\n\n# This file started on 18 January 2010 by Gregory Hellings\n\n# It is ceded to The SWORD Library developers and CrossWire under the terms\n\n# of their own GPLv2 license and all copyright is transferred to them for\n\n# all posterity and eternity, wherever such transfer is possible.  Where it is\n\n# not, then this file is released under the GPLv2 by myself.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure it's an out-of-stream build\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set versions\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If SWORDXX_BUILDCONFIG set, load the file and fail on error. Otherwise, try to\n\n# include either \"config.cmake\" under either the build directory or the source\n\n# directory, whichever file first exists, if at all.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# User options:\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# User options\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########################################################################################\n\n# This will look for various libraries that libswordxx builds against.  There is no REQUIRED\n\n# attribute added here, since all of the libraries here are not, in actuality, required.\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Required packages:\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If we can find the config script, we will run it and attempt to parse out the\n\n# availability of SFTP support. Otherwise, we will assume the library was built\n\n# without it.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n\n# The buildflags depend on the CMAKE_BUILD_TYPE supplied at the command line.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################################################################\n\n# Subdirectories:\n\n#\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################\n\n# Manual pages:\n\n#\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/FindBZIP2.cmake" : {
      "ObjectId" : "81e01d724d1e44b5cbb0360580aca9136080656b",
      "LastModified" : "2016-03-19T23:30:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find BZIP2\n\n# Once done this will define\n\n#\n\n#  BZIP2_FOUND - system has BZIP2\n\n#  BZIP2_INCLUDE_DIR - the BZIP2 include directory\n\n#  BZIP2_LIBRARY - Link these to use BZIP2\n\n#  BZIP2_DEFINITIONS - Compiler switches required for using BZIP2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BZIP2_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindXZ.cmake" : {
      "ObjectId" : "61cc3ed32d08ac1c4e2bded58ff68d413be98c94",
      "LastModified" : "2016-03-19T23:30:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find XZ\n\n# Once done this will define\n\n#\n\n#  XZ_FOUND - system has XZ\n\n#  XZ_INCLUDE_DIR - the XZ include directory\n\n#  XZ_LIBRARY - Link these to use XZ\n\n#  XZ_DEFINITIONS - Compiler switches required for using XZ\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XZ_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/helpers.cmake" : {
      "ObjectId" : "966b8828b7f5be0bfe99983671726a8032a20af8",
      "LastModified" : "2016-07-19T14:07:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Calculate version strings for code:\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "b4587cd915572eddb8bdef197edde8c308e1a037",
      "LastModified" : "2017-01-28T23:58:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/classes/CMakeLists.txt" : {
      "ObjectId" : "0880830b1a1f3516b749ff19d37fe8d61c17a7be",
      "LastModified" : "2017-01-28T23:58:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are some examples.  If you want examples to be built, you need to define\n\n# SWORDXX_BUILD_EXAMPLES=\"YES\".  These will not be installed, so don't worry about\n\n# that.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/cmdline/CMakeLists.txt" : {
      "ObjectId" : "cee8ee7797dbdfa726c972ab1bf891bafd9fdcbc",
      "LastModified" : "2018-11-24T10:17:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are some examples.  If you want examples to be built, you need to define\n\n# SWORDXX_BUILD_EXAMPLES=\"YES\".  These will not be installed, so don't worry about\n\n# that.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/tasks/CMakeLists.txt" : {
      "ObjectId" : "0cdbf42800f995ec98f203edb8b9e39e65d85068",
      "LastModified" : "2018-11-24T10:17:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are some examples.  If you want examples to be built, you need to define\n\n# SWORDXX_BUILD_EXAMPLES=\"YES\".  These will not be installed, so don't worry about\n\n# that.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/swordxx/CMakeLists.txt" : {
      "ObjectId" : "bafcda0833a6a9850fc61446aa8480388e077e4e",
      "LastModified" : "2018-11-24T10:17:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find source files:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure build of shared library:\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install shared library:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install the headers:\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate and install version.h header, and instruct the build to use it:\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set some variables for SwordxxConfig.cmake and sworxx.pc generation:\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate and install SwordxxConfig.cmake:\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generate and install SwordxxConfigVersion.cmake:\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate and install swordxx.pc:\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generate and install the sysconf file:\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Install an empty mods.d directory:\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Install the locales:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "ed59202c80548404996db0b97f0fc08683913989",
      "LastModified" : "2019-02-11T23:53:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################################################################################\n\n# A test suite - that is awesome.\n\n#\n\n# I should probably learn the proper usage of such things as CTest for this, but for the\n\n# time being, I'll see what I can do.\n\n#\n\n#\n\n# I need some help deciphering tests/cppunit/Makefile.am.  I'm not quite sure what it is\n\n# trying to do in there.\n\n# Also, the contents of the tests/testsuite directory are slightly beyond my knowledge\n\n# level.  It looks like I can do a very simple interface to this all, but I need to know\n\n# more about how these tests work.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#        tlitmgrtest\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################\n\n# The following tests require extra libraries to run\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Excluded until I know we have the tests working\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################\n\n# Regular tests:\n\n####\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/testsuite/CMakeLists.txt" : {
      "ObjectId" : "43199da0412a841a1a75510336c5643e9db0861c",
      "LastModified" : "2018-11-24T10:17:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################################################################\n\n# This file will actually be responsible for running the tests\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utilities/CMakeLists.txt" : {
      "ObjectId" : "06b52df100ead7418046da9f710bf73e3f620931",
      "LastModified" : "2018-11-24T10:17:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################################################################\n\n# Basic utility programs and their joy.\n\n#\n\n# The general assumption is that each of these utilities is built from\n\n# a single source file, which shares its name with the utility itself (appended with .cpp),\n\n# and then linked against the SWORD++ library.\n\n#\n\n# This list will be built and installed, if so chosen\n\n#\n\n# These are in alphbetical order now - please keep them that way\n\n# if you edit this list in the future.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######################################################################\n\n# These utilities will be built, but they will not be installed\n\n#\n\n# Again, I have gone to great lengths of travail to make this list\n\n# alphabetical.  If you add utilities to this list, please do so in a\n\n# way that maintains this.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################################################################\n\n# This will loop over both of the above utility lists and add build targets\n\n# to the system for each one of them.\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "####################################################################\n\n# Just to be difficult, we have a single C file that is a utility\n\n# and, therefore, needs its own treatment.\n\n#\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "####################################################################\n\n# Install the utilities\n\n#\n\n# We do this here, rather than up in the main install file, because\n\n# a) it fits more logically and b) the scope of ${install_UTILITIES}\n\n# is limited to CMake files in this directory and below, so rather than\n\n# replicate the above list in another place, we'll just handle our\n\n# own install, since this whole directory is optional, anyway.\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 1740
}