{
  "Repository" : "25639615",
  "Revision" : "HEAD",
  "ObjectId" : "85cc1669a2aea4343b4c4b1bf999a4334d8c01c9",
  "CommitTime" : "2019-04-04T01:44:48Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "fdbff71562670e25b4a81938ba906439ee2f7a4d",
      "LastModified" : "2019-03-30T04:21:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO Perf test:\n\n#  - try if setting CRYPTOPP_NATIVE_ARCH=ON and adding -march=native to the compile commands for cryfs source files makes a difference\n\n#    -> if yes, offer a cmake option to enable both of these\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default value is not to build test cases\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following options are helpful for development and/or CI\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# note: for iwyu, we need cmake 3.3\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# note: for clang-tidy, we need cmake 3.6, or (if the return code should be handled correctly, e.g. on CI), we need 3.8.\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Default value is to build in release mode but with debug symbols\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The MSVC version on AppVeyor CI needs this\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake-utils/FindLibunwind.cmake" : {
      "ObjectId" : "a41f7dd6e817735fe635e2543e63c18e58c9527d",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Taken from https://github.com/monero-project/monero/blob/31bdf7bd113c2576fe579ef3a25a2d8fef419ffc/cmake/FindLibunwind.cmake\n\n# modifications:\n\n# - remove linkage against gcc_eh because it was causing segfaults in various of our unit tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find libunwind\n\n# Once done this will define\n\n#\n\n#  LIBUNWIND_FOUND - system has libunwind\n\n#  LIBUNWIND_INCLUDE_DIR - the libunwind include directory\n\n#  LIBUNWIND_LIBRARIES - Link these to use libunwind\n\n#  LIBUNWIND_DEFINITIONS - Compiler switches required for using libunwind\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, Alexander Dymo, <adymo@kdevelop.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# some versions of libunwind need liblzma, and we don't use pkg-config\n\n# so we just look whether liblzma is installed, and add it if it is.\n\n# It might not be actually needed, but doesn't hurt if it is not.\n\n# We don't need any headers, just the lib, as it's privately needed.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# show the LIBUNWIND_INCLUDE_DIR and LIBUNWIND_LIBRARIES variables only in the advanced view\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake-utils/TargetArch.cmake" : {
      "ObjectId" : "d773d98f9bf7d098342435d9909ced4d507cc7eb",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is taken from https://github.com/axr/solar-cmake/blob/73cfea0db0284c5e2010aca23989046e5bda95c9/TargetArch.cmake\n\n# License:\n\n# Copyright (c) 2012 Petroules Corporation. All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n#\n\n# Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n# Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 133,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "cmake-utils/utils.cmake" : {
      "ObjectId" : "da4dff8c770b542d0d303732dc719b45b6e59c33",
      "LastModified" : "2019-04-02T02:18:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################################\n\n#  Activate C++14\n\n#\n\n#  Uses: target_activate_cpp14(buildtarget)\n\n###################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ideally, we'd like to use libc++ on linux as well, but:\n\n#    - http://stackoverflow.com/questions/37096062/get-a-basic-c-program-to-compile-using-clang-on-ubuntu-16\n\n#    - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=808086\n\n# so only use it on Apple systems...\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Find clang-tidy executable (for use in target_enable_style_warnings)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find iwyu (for use in target_enable_style_warnings)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#################################################\n\n# Enable style compiler warnings\n\n#\n\n#  Uses: target_enable_style_warnings(buildtarget)\n\n#################################################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# TODO consider -Wpedantic -Wchkp -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wundef -Wno-unused -Wno-variadic-macros -Wno-parentheses -fdiagnostics-show-option -Wconversion and others?\n",
        "Line" : 77,
        "CharPositionInLine" : 128
      },
      "7" : {
        "Text" : "# TODO consider -Wpedantic -Wchkp -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wundef -Wno-unused -Wno-variadic-macros -Wno-parentheses -fdiagnostics-show-option -Wconversion and others?\n",
        "Line" : 79,
        "CharPositionInLine" : 119
      },
      "8" : {
        "Text" : "# Enable clang-tidy\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "##################################################\n\n# Add boost to the project\n\n#\n\n# Uses:\n\n#  target_add_boost(buildtarget) # if you're only using header-only boost libs\n\n#  target_add_boost(buildtarget system filesystem) # list all libraries to link against in the dependencies\n\n##################################################\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Load boost libraries\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Many supported systems don't have boost >= 1.65.1. Better link it statically.\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Also link to rt, because boost thread needs that.\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "##################################################\n\n# Specify that a specific minimal version of gcc is required\n\n#\n\n# Uses:\n\n#  require_gcc_version(4.9)\n\n##################################################\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##################################################\n\n# Specify that a specific minimal version of clang is required\n\n#\n\n# Uses:\n\n#  require_clang_version(3.5)\n\n##################################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################################################\n\n# Find the location of a library and return its full path in OUTPUT_VARIABLE.\n\n# If PATH_VARIABLE points to a defined variable, then the library will only be searched in this path.\n\n# If PATH_VARIABLE points to a undefined variable, default system locations will be searched.\n\n#\n\n# Uses (the following will search for fuse in system locations by default, and if the user passes -DFUSE_LIB_PATH to cmake, it will only search in this path.\n\n#  find_library_with_path(MYLIBRARY fuse FUSE_LIB_PATH)\n\n#  target_link_library(target ${MYLIBRARY})\n\n##################################################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cpack/CMakeLists.txt" : {
      "ObjectId" : "e2700ab98f92939e49854a8defa5b502d98619d0",
      "LastModified" : "2018-11-22T05:45:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# appends a build number from the APPVEYOR_BUILD_NUMBER environment variable as fourth component to a version number,\n\n# i.e. \"0.10\" becomes \"0.10.0.[buildnumber]\", \"1\" becomes \"1.0.0.[buildnumber]\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Earlier cmake versions generate .deb packages for which the package manager says they're bad quality\n\n# and asks the user whether they really want to install it. Cmake 3.3 fixes this.\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Fix debfiles permissions. Unfortunately, git doesn't store file permissions.\n\n# When installing the .deb package and these files have the wrong permissions, the package manager complains.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#set(CPACK_WIX_PRODUCT_ICON \"...\")\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Needs gnupg2, lsb-release for postinst script\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "491ed801ac402329d46aab36ab9d88d75119b8da",
      "LastModified" : "2018-09-09T21:48:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "a803b1c89e2079d4f16eb1271ab882356e28a127",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/blobstore/CMakeLists.txt" : {
      "ObjectId" : "df2fc63a4042a8d7fc0aed262c8eb6251c331f0b",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/blockstore/CMakeLists.txt" : {
      "ObjectId" : "8085718693a35b7eb5119b7b87793c4ff152cad1",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-utils/CMakeLists.txt" : {
      "ObjectId" : "f66f99f8e295b6cf1b7b46e983c7adbaff074a84",
      "LastModified" : "2019-04-04T01:36:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cryfs-cli/CMakeLists.txt" : {
      "ObjectId" : "90edb227c142ef7212bf76758086927ef73f068e",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cryfs-unmount/CMakeLists.txt" : {
      "ObjectId" : "0a246a7f801df0ac873b2be8772b2f9cc3631f5a",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cryfs/CMakeLists.txt" : {
      "ObjectId" : "383582e7c022efc7c6ba145819f564ee0f1f2d51",
      "LastModified" : "2019-01-26T07:47:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    cryfs.cpp\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO Check that dependent projects don't get boost added (use PRIVATE here)\n",
        "Line" : 54,
        "CharPositionInLine" : 57
      },
      "2" : {
        "Text" : "#install(TARGETS ${PROJECT_NAME}\n\n#        DESTINATION lib\n\n#        CONFIGURATIONS Release\n\n#)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/fspp/CMakeLists.txt" : {
      "ObjectId" : "7ea582dfc570281105b36a82ac8796661469f8e2",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/fspp/fs_interface/CMakeLists.txt" : {
      "ObjectId" : "f70cf282dc68fb5bec966c6f8f7fdfbb129ff432",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/fspp/fuse/CMakeLists.txt" : {
      "ObjectId" : "b991bd7291a1c689c71bdd7f384d4578dcf2b1a5",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(${PROJECT_NAME} PUBLIC \"${DOKAN_LIB_PATH}/lib/dokannp1.lib\")\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Linux\n",
        "Line" : 42,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 2
    },
    "src/gitversion/CMakeLists.txt" : {
      "ObjectId" : "ec0064ebcb61a1d2c2a6acfafcfde64f30f394f9",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gitversion/gitversion.cmake" : {
      "ObjectId" : "865d6470ed828776dc9a7c93b3dcf59a4bc8527b",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/parallelaccessstore/CMakeLists.txt" : {
      "ObjectId" : "423f394d868ebdf9859d188887c1936bea01e85c",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/stats/CMakeLists.txt" : {
      "ObjectId" : "c29f44ea8e9772a5cfec6d3fa45dc0c71235d02b",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "4879389eca57a545dca7a0f482062c8287e310f8",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO Make this build on Windows\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "test/blobstore/CMakeLists.txt" : {
      "ObjectId" : "05e98b8d9cc81486fcfd7fa38c2d13443b749bf4",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/blockstore/CMakeLists.txt" : {
      "ObjectId" : "ca63acce0ea953ea3b67eee566d8fab85edf40cd",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cpp-utils/CMakeLists.txt" : {
      "ObjectId" : "a13ad9867afcb4007f18741b3402f3f0f6e3f4d9",
      "LastModified" : "2019-04-04T01:44:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cryfs-cli/CMakeLists.txt" : {
      "ObjectId" : "2d0b38c59023f475dc373856186b06acd0c64e4d",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cryfs/CMakeLists.txt" : {
      "ObjectId" : "eb13b273e4cb8b94f6cd78610a42b32fbc83f209",
      "LastModified" : "2019-04-04T01:44:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/fspp/CMakeLists.txt" : {
      "ObjectId" : "dabff1f170ef64eb59b68fa74c5b2b95c7fcaf84",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/gitversion/CMakeLists.txt" : {
      "ObjectId" : "51a5ccc1ffaff145695b02d7616ff4f562654eaf",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/my-gtest-main/CMakeLists.txt" : {
      "ObjectId" : "1d1e7e0818e2dfbffeed620330fb300914a55172",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/parallelaccessstore/CMakeLists.txt" : {
      "ObjectId" : "16170d1746c2a5154098c3fa4c413ea527854dd7",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vendor/CMakeLists.txt" : {
      "ObjectId" : "f2e65c19d3938d58cf969356facb8e01415cc627",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vendor/cryptopp/CMakeLists.txt" : {
      "ObjectId" : "ef7a3e1069eff6684b6d830b8ca4d540138afb9e",
      "LastModified" : "2019-01-26T07:47:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# note: include directory is called vendor_cryptopp instead of cryptopp to avoid include clashes with system headers\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Forward debug build info (i.e. set CRYPTOPP_DEBUG variable if building in debug mode)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add to all targets depending on this\n",
        "Line" : 8,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : "# add to stuff built in subdirectories (like the actual library)\n",
        "Line" : 9,
        "CharPositionInLine" : 57
      },
      "4" : {
        "Text" : "# If OpenMP wasn't found, try if we can find it in the default Macports location\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# older cmake uses OPENMP_FOUND, newer cmake also sets OPENMP_CXX_FOUND, homebrew installations seem only to get the latter set.\n",
        "Line" : 19,
        "CharPositionInLine" : 102
      },
      "6" : {
        "Text" : "# If OpenMP wasn't found, try if we can find it in the default Homebrew location\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Workaround because older cmake on apple doesn't support FindOpenMP\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# We're on cmake < 3.9, handle behavior of the old FindOpenMP implementation\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# add to all targets depending on this\n",
        "Line" : 65,
        "CharPositionInLine" : 76
      },
      "10" : {
        "Text" : "# Workaround for Ubuntu 18.04 that otherwise doesn't set -fopenmp for linking\n",
        "Line" : 71,
        "CharPositionInLine" : 63
      },
      "11" : {
        "Text" : "# also add these flags to the third party Crypto++ build setup that is built in a subdirectory\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "vendor/cryptopp/vendor_cryptopp/CMakeLists.txt" : {
      "ObjectId" : "55d18719fe94caa0f2012eb114700684e75d0402",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Please ensure your changes or patch meets minimum requirements.\n\n#   The minimum requirements are 2.8.6. It roughly equates to\n\n#   Ubuntu 14.05 LTS or Solaris 11.3. Please do not check in something\n\n#   for 3.5.0 or higher because it will break LTS operating systems\n\n#   and a number of developer boards used for testing. To test your\n\n#   changes, please set up a Ubuntu 14.05 LTS system.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Should we be setting things like this? We are not a C project\n\n# so nothing should be done with the C compiler. But there is\n\n# no reliable way to tell CMake we are C++.\n\n# Cannot set this... Breaks Linux PowerPC with Clang:\n\n# SET(CMAKE_C_COMPILER ${CMAKE_CXX_COMPILER})\n\n# # error \"The CMAKE_C_COMPILER is set to a C++ compiler\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Print useful information\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Need to set SRC_DIR manually after removing the Python library code.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make RelWithDebInfo the default (it does e.g. add '-O2 -g -DNDEBUG' for GNU)\n\n#   If not in multi-configuration environments, no explicit build type or CXX\n\n#   flags are set by the user and if we are the root CMakeLists.txt file.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We now carry around test programs. test_cxx.cxx is the default C++ one.\n\n# Also see https://github.com/weidai11/cryptopp/issues/741.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#============================================================================\n\n# Settable options\n\n#============================================================================\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These are IA-32 options. TODO: Add ARM A-32, Aarch64 and Power8 options.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#============================================================================\n\n# Compiler options\n\n#============================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Stop hiding the damn output...\n\n# set(CMAKE_VERBOSE_MAKEFILE on)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Always 1 ahead in Master. Also see http://groups.google.com/forum/#!topic/cryptopp-users/SFhqLDTQPG4\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Don't use RPATH's. The resulting binary could fail a security audit.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Also see http://github.com/weidai11/cryptopp/issues/395\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###############################################################################\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Try to find a Posix compatible grep and sed. Solaris, Digital Unix,\n\n#   Tru64, HP-UX and a few others need tweaking\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###############################################################################\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# TODO: improve this...\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# No dereference below. Thanks for the warning, CMake (not!).\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Must use CMAKE_CXX_COMPILER here due to XLC 13.1 and LLVM front-end.\n",
        "Line" : 194,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# No dereference below. Thanks for the warning, CMake (not!).\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# TODO: improve this...\n",
        "Line" : 226,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# message(STATUS \"RESULT_VARIABLE ${RESULT_VARIABLE}\")\n\n# message(STATUS \"COMMAND_RESULT ${COMMAND_RESULT}\")\n\n# message(STATUS \"OUTPUT_VARIABLE ${OUTPUT_VARIABLE}\")\n\n# message(STATUS \"COMMAND_OUTPUT ${COMMAND_OUTPUT}\")\n",
        "Line" : 238,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# This test is strict. We require two things. First, the invocation\n\n# of the compile command must return 0. Second, there must be no\n\n# messages on the console. We are interested in diagnostics like\n\n# warnings to decide when to reject an option. But we will probably\n\n# capture chatty compiler that want to say, \"Hooray, success\". For\n\n# chatty compilers we will need to find a quiet option and use it\n\n# for the test. Microsoft compilers come to mind.\n",
        "Line" : 243,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "###############################################################################\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# CMake does not provide a generic shell/terminal mechanism\n\n#  and Microsoft environments don't know what 'sh' is.\n",
        "Line" : 276,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Thansk to Anonimal for MinGW; see http://github.com/weidai11/cryptopp/issues/466\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Detecting PowerPC is only good with GCC. IBM XLC compiler is\n\n# a little different and I don't know how to ask to the triplet\n\n# XLC is targeting. Below we punt by setting CRYPTOPP_POWERPC64\n\n# if we detect the compiler is XLC.\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "###############################################################################\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Test SunCC for a string like 'CC: Sun C++ 5.13 SunOS_i386'\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Test GCC for a string like 'i386-pc-solaris2.11'\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Fixup PowerPC. If both 32-bit and 64-bit use 64-bit.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Fixup for xlC compiler. -dumpmachine fails so we miss PowerPC\n\n# TODO: something better than proxying the platform via compiler\n\n# Must use CMAKE_CXX_COMPILER here due to XLC 13.1 and LLVM front-end.\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# DumpMachine SunCC style\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# SunCC is 32-bit, but it builds both 32 and 64 bit. Use\n",
        "Line" : 345,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "###############################################################################\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Get GAS version, add defs + set as appropriate\n",
        "Line" : 388,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "#.intel_syntax wasn't supported until GNU assembler 2.10\n",
        "Line" : 397,
        "CharPositionInLine" : 12
      },
      "37" : {
        "Text" : "# TODO(unassigned): string() REGEX was not cooperating at time of writing. Re-implement as needed.\n",
        "Line" : 399,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# OpenBSD and CentOS 5 needed this one due to ARIA and BLAKE2\n",
        "Line" : 416,
        "CharPositionInLine" : 12
      },
      "39" : {
        "Text" : "# Ubuntu 10 and Ubuntu 12 needed this one\n",
        "Line" : 433,
        "CharPositionInLine" : 12
      },
      "40" : {
        "Text" : "# TODO: what about ICC and LLVM on Windows?\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#list(APPEND CRYPTOPP_COMPILE_OPTIONS \"/FI\\\"winapifamily.h\\\"\")\n",
        "Line" : 450,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Enable PIC for all target machines except 32-bit i386 due to register pressures.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# IBM XLC compiler options for AIX and Linux.\n\n# Must use CMAKE_CXX_COMPILER here due to XLC 13.1 and LLVM front-end.\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#CheckCompileLinkOption(\"-qxlcompatmacros\" CRYPTOPP_XLC_COMPAT \"${TEST_CXX_FILE}\")\n\n#if (CRYPTOPP_XLC_COMPAT)\n\n#  list(APPEND CRYPTOPP_COMPILE_OPTIONS \"-qxlcompatmacros\")\n\n#endif ()\n",
        "Line" : 462,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Solaris specific\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# SunCC needs -template=no%extdef\n",
        "Line" : 486,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# SunCC needs -xregs=no%appl on Sparc (not x86) for libraries (not test program)\n\n# TODO: wire this up properly\n",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# GCC needs to enable use of '/' for division in the assembler\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#============================================================================\n\n# Sources & headers\n\n#============================================================================\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Library headers\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Remove headers used to build test suite\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Test sources. You can use the GNUmakefile to generate the list: `make sources`.\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#${SRC_DIR}/adhoc.cpp\n",
        "Line" : 542,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# Library sources. You can use the GNUmakefile to generate the list: `make sources`.\n\n# Makefile sorted them at http://github.com/weidai11/cryptopp/pull/426.\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#============================================================================\n\n# Architecture flags\n\n#============================================================================\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# TODO: Android, AIX, IBM xlC, iOS and a few other profiles are missing.\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# New as of Pull Request 461, http://github.com/weidai11/cryptopp/pull/461.\n\n# Must use CMAKE_CXX_COMPILER here due to XLC 13.1 and LLVM front-end.\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# https://github.com/weidai11/cryptopp/issues/756\n",
        "Line" : 621,
        "CharPositionInLine" : 8
      },
      "59" : {
        "Text" : "#if (NOT CRYPTOPP_IA32_AVX AND NOT DISABLE_AVX)\n\n# list(APPEND CRYPTOPP_COMPILE_OPTIONS \"-DCRYPTOPP_DISABLE_AVX\")\n\n#elseif (CRYPTOPP_IA32_AVX AND NOT DISABLE_AVX)\n\n#  set_source_files_properties(${SRC_DIR}/XXX_avx.cpp PROPERTIES COMPILE_FLAGS \"-mavx\")\n\n#endif ()\n",
        "Line" : 667,
        "CharPositionInLine" : 16
      },
      "60" : {
        "Text" : "# Need to set floating point ABI to something, like \"hard\" of \"softfp\".\n\n# Most Linux use hard floats.\n",
        "Line" : 720,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# Add ASM files for ARM\n",
        "Line" : 738,
        "CharPositionInLine" : 12
      },
      "62" : {
        "Text" : "# Hack for XLC\n",
        "Line" : 784,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "#set_source_files_properties(${SRC_DIR}/crc_simd.cpp PROPERTIES COMPILE_FLAGS ${CRYPTOPP_POWER8_FLAGS})\n",
        "Line" : 828,
        "CharPositionInLine" : 12
      },
      "64" : {
        "Text" : "# Drop to Power7 if Power8 unavailable\n",
        "Line" : 854,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "# Drop to Altivec if Power7 unavailable\n",
        "Line" : 861,
        "CharPositionInLine" : 8
      },
      "66" : {
        "Text" : "# New as of Pull Request 461, http://github.com/weidai11/cryptopp/pull/461.\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Each -xarch=XXX options must be added to LDFLAGS if the option is used during a compile.\n",
        "Line" : 908,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "#if (CRYPTOPP_IA32_AVX AND NOT DISABLE_AVX)\n\n#  set_source_files_properties(${SRC_DIR}/XXX_avx.cpp PROPERTIES COMPILE_FLAGS \"-xarch=avx2\")\n\n#  set(XARCH_LDFLAGS \"${XARCH_LDFLAGS} -xarch=avx\")\n\n#endif ()\n",
        "Line" : 943,
        "CharPositionInLine" : 16
      },
      "69" : {
        "Text" : "# https://stackoverflow.com/a/6088646/608639\n",
        "Line" : 959,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# elseif (CRYPTOPP_SPARC OR CRYPTOPP_SPARC64)\n",
        "Line" : 964,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# Attempt to determine a suitable native option\n",
        "Line" : 969,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#============================================================================\n\n# Compile targets\n\n#============================================================================\n",
        "Line" : 988,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Work around the archaic versions of cmake that do not support\n\n# target_compile_xxxx commands\n\n# !!! DO NOT try to use the old way for newer version - it does not work !!!\n",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Set filenames for targets to be \"cryptopp\"\n",
        "Line" : 1044,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Add alternate ways to invoke the build for the shared library that are\n\n# similar to how the crypto++ 'make' tool works.\n\n# see https://github.com/noloader/cryptopp-cmake/issues/32\n",
        "Line" : 1061,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#============================================================================\n\n# Third-party libraries\n\n#============================================================================\n",
        "Line" : 1072,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# This may need to be expanded to \"Solaris\"\n",
        "Line" : 1085,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#============================================================================\n\n# Tests\n\n#============================================================================\n",
        "Line" : 1103,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Setting \"cryptest\" binary name to \"cryptest.exe\"\n",
        "Line" : 1112,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "#============================================================================\n\n# Doxygen documentation\n\n#============================================================================\n",
        "Line" : 1129,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#============================================================================\n\n# Install\n\n#============================================================================\n",
        "Line" : 1154,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Runtime package\n",
        "Line" : 1160,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Development package\n",
        "Line" : 1173,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# CMake Package\n",
        "Line" : 1180,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Tests\n",
        "Line" : 1188,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Documentation\n",
        "Line" : 1195,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Print a configuration summary. We want CXX and CXXFLAGS, but they are not includd in ALL.\n",
        "Line" : 1200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 88
    },
    "vendor/cryptopp/vendor_cryptopp/cryptopp-config.cmake" : {
      "ObjectId" : "664870055b6d493ba3b7ed6d82b8c66bb23eca25",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vendor/googletest/CMakeLists.txt" : {
      "ObjectId" : "6c7e98ae3f0bac3ae08ef7ea37f7ce687ee37f22",
      "LastModified" : "2019-03-25T16:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fix how gtest links the C library on windows, see https://github.com/google/googletest/blob/4e4df226fc197c0dda6e37f5c8c3845ca1e73a49/googletest/README.md\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Disable \"missing override\" warning because gmock MOCK_METHOD() don't use override :(\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "vendor/googletest/gtest/CMakeLists.txt" : {
      "ObjectId" : "d77321165aeb414b616a71769c77f45882fc56d4",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vendor/googletest/gtest/Makefile.am" : {
      "ObjectId" : "433eefeb08026fa46e702db9e853e8a4efdfc989",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vendor/googletest/gtest/googlemock/CMakeLists.txt" : {
      "ObjectId" : "8a8de1f64119035b472393fa11f38d606ff42003",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These commands only run if this is the main project\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 67,
        "CharPositionInLine" : 30
      },
      "11" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This directory is needed to build directly from Google Test sources.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 185,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 186,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "vendor/googletest/gtest/googlemock/Makefile.am" : {
      "ObjectId" : "9adbc5163dd7191a14a887a384fb5d6d2956b44d",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "vendor/googletest/gtest/googlemock/make/Makefile" : {
      "ObjectId" : "7c13e05fa961dd3a37ee05def12de08ce0e86a88",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "vendor/googletest/gtest/googletest/CMakeLists.txt" : {
      "ObjectId" : "9ee79408c277c4a95dbd3cc4ab6f7ecc37b9aadb",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Visibility\n",
        "Line" : 51,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# These commands only run if this is the main project\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 86,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Create the CMake package file descriptors.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 253,
        "CharPositionInLine" : 43
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 275,
        "CharPositionInLine" : 46
      },
      "28" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "vendor/googletest/gtest/googletest/Makefile.am" : {
      "ObjectId" : "b44c8416ba080c2f016f166b18b42c0f73ece7be",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Also verify that libgtest works by itself.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "vendor/googletest/gtest/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8c1f9ba99cf50574f669dd7deba324dce40595f3",
      "LastModified" : "2019-03-03T05:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Prevent D9025 warning for targets that have exception handling\n\n# turned off (/EHs-c- flag). Where required, exceptions are explicitly\n\n# re-enabled using the cxx_exception_flags variable.\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 71,
        "CharPositionInLine" : 33
      },
      "11" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 81,
        "CharPositionInLine" : 33
      },
      "15" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 90,
        "CharPositionInLine" : 39
      },
      "17" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Generate debug library name with a postfix.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 207,
        "CharPositionInLine" : 48
      },
      "32" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 268,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 276,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 284,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# install_project(targets...)\n\n#\n\n# Installs the specified targets and configures the associated pkgconfig files.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Install the project targets.\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Configure and install pkgconfig files.\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 45
    },
    "vendor/googletest/gtest/googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "vendor/googletest/gtest/googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "vendor/spdlog/CMakeLists.txt" : {
      "ObjectId" : "41be9fa62b3926cf42a6775e7a2a622654831407",
      "LastModified" : "2019-01-21T04:23:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 40,
    "MAKEFILE" : 3,
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 1728
}