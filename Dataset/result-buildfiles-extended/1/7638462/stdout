{
  "Repository" : "7638462",
  "Revision" : "HEAD",
  "ObjectId" : "f8c525360c2de392a0afb46e5f90ac57bfa836bb",
  "CommitTime" : "2019-04-18T18:22:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "cdc6bc16a8000f50b968962678950828e66e31b0",
      "LastModified" : "2019-04-04T15:37:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n# vi: set ft=cmake :\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The supported releases should match those listed in both doc/developers.rst\n\n# and tools/workspace/os.bzl.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# The version passed to find_package(Bazel) should match the\n\n# minimum_bazel_version value in the call to versions.check() in WORKSPACE.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The minimum compiler versions should match those listed in both\n\n# doc/developers.rst and tools/workspace/cc/repository.bzl.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check flag added in tools/cc_toolchain/bazel.rc is supported.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The supported Python major/minor versions should match those listed in both\n\n# doc/developers.rst and tools/workspace/python/repository.bzl.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Ensure that the python2 executable or link is used in preference to the\n\n# python and python2.7 executables or links, which correspond to the\n\n# system version of Python installed on macOS. There is no system python3\n\n# as of macOS Mojave 10.14.\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Check whether the PROJECT_BINARY_DIR is a subdirectory of the\n\n# PROJECT_SOURCE_DIR.\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The --output_base cannot be within the WORKSPACE (a subdirectory of\n\n# PROJECT_SOURCE_DIR), so fallback to the using the same parent directory\n\n# that Bazel uses by default for its --output_base.\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Compute the MD5 hash of the PROJECT_BINARY_DIR rather than the WORKSPACE\n\n# (PROJECT_SOURCE_DIR) to avoid colliding with the directory that Bazel uses by\n\n# default.\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# N.B. If you are testing the CMake API and making changes to `install.py.in`,\n\n# you can change this target to something more lightweight, such as\n\n# `//tools/install/dummy:install`.\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If CMAKE_BUILD_TYPE is Debug or RelWithDebInfo, do NOT strip symbols during\n\n# install.\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SNOPT has restrictions for redistribution given that we are statically\n\n# linking it in.\n",
        "Line" : 454,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "fdaf5c1b6ae2da1074c5f77455b750cf9cc48b5a",
      "LastModified" : "2017-11-01T13:57:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n# vi: set ft=cmake :\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "attic/build_macros.bzl" : {
      "ObjectId" : "0337b69c973c43b3cc818885684d6253c60d4df4",
      "LastModified" : "2018-11-26T23:10:24Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"A wrapper to that should be exclusively used within attic/....\"\"\"",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "\"\"\"A wrapper to that should be exclusively used within attic/....\"\"\"",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"A wrapper to that should be exclusively used within attic/....\"\"\"",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "\"\"\"A wrapper to that should be exclusively used within attic/....\"\"\"",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"A wrapper to that should be exclusively used within attic/....\"\"\"",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "bindings/bazel_workaround_4594_libdrake.bzl" : {
      "ObjectId" : "21cadf9aba25d294f2b6fe674d6ab5aa8887381b",
      "LastModified" : "2018-05-15T14:44:44Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Only to be used by //bindings:bazel_workaround_4594_libdrake_py.\n\n    For more information, see `pydrake/__init__.py`.\n    \"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "bindings/pydrake/pydrake.bzl" : {
      "ObjectId" : "bd3234804e64d9f9510ded2b60bcf5566e08e571",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bindings/pydrake/util/build_macros.bzl" : {
      "ObjectId" : "3a36410431c6dcde4de925d470baff51b15ad505",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "r\"\"\"\n#pragma once\n\n/// @file\n/// (Deprecated) Forwards symbols from `drake/bindings/pydrake/common/{name}.h`\n/// for backwards compatibility. This header will be removed after 2019-03-15.\n#include \"drake/bindings/pydrake/common/{name}.h\"\n\n#ifndef _DRAKE_TESTING\n#warning This header is deprecated. Please use \\\n         drake/bindings/pydrake/common/{name}.h instead. This header will \\\n         be removed on or after 2019-03-15.\n#endif  // _DRAKE_TESTING\n\"\"\"",
        "Line" : 5,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : "'''\n\"\"\"\nWarning:\n    Deprecated. Please use ``pydrake.common.{module}`` instead. This module\n    will be removed on or after 2019-03-15.\n\"\"\"\n\nfrom pydrake.common.deprecation import _warn_deprecated\nimport pydrake.common.{module} as _original\n# Include all symbols, but save `__doc__`.\n_old_doc = __doc__\nlocals().update(_original.__dict__)\n__doc__ = _old_doc\n_warn_deprecated(__doc__, stacklevel=3)\n'''",
        "Line" : 20,
        "CharPositionInLine" : 15
      },
      "2" : {
        "Text" : "\"\"\"\n    Generates a header with a deprecation message, and generates two Bazel\n    targets:\n    1. a private target without a deprecation message, and\n    2. a public target with a deprecation message.\n    @return The private target name for testing.\n    \"\"\"",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindBazel.cmake" : {
      "ObjectId" : "aa1309dff00cdf9eeb553a37e5eb1e58701e1298",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n# vi: set ft=cmake :\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindGurobi.cmake" : {
      "ObjectId" : "339d5765ff413ff3fa4c32e979ff9009a648ea3a",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n# vi: set ft=cmake :\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "matlab/CMakeLists.txt" : {
      "ObjectId" : "7024eae5bfb0ae00c260cb541878ced3c241f277",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n# vi: set ft=cmake :\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Linux, force targets to use system Protobuf shared library instead of\n\n# the shared library bundled with MATLAB. On macOS, the two shared libraries\n\n# are correctly marked as ABI incompatible.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "matlab/cmake/flags.cmake" : {
      "ObjectId" : "18e17189dad2dfa5d466baec2c34719b723b28bb",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Keep CMAKE_CXX_FLAGS in sync with CXX_FLAGS, CLANG_FLAGS, and GCC_FLAGS in\n\n# tools/skylark/drake_cc.bzl.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "matlab/cmake/functions.cmake" : {
      "ObjectId" : "710cd03bb0ad27986285b0f80241397528062051",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "matlab/cmake/packages.cmake" : {
      "ObjectId" : "56a0fc23de2a1a1ea08c3eea983b1c0b1e225f7a",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(jamiesnape): Change from 9 to 9.2 when support for R2016a and R2016 is\n\n# no longer needed.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "matlab/test/CMakeLists.txt" : {
      "ObjectId" : "d419e564be2b86ebda5fc2c838482e2b7bb4b4d8",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n# vi: set ft=cmake :\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/com_github_google_protobuf/protobuf.bzl" : {
      "ObjectId" : "f6fa9c011e94b71b086e5bc4f575ff5009e2fb37",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel 0.4.4 and older have genfiles paths that look like:\n#   bazel-out/local-fastbuild/genfiles/external/repo/foo\n# After the exec root rearrangement, they look like:\n#   ../repo/bazel-out/local-fastbuild/genfiles/foo",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# We are using the fact that Bazel 0.4.4+ provides repository-relative paths\n# for ctx.genfiles_dir.",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This means that we're either in the old version OR the new version in the local repo.\n# Either way, appending the source path to the genfiles dir works.",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "\"\"\"General implementation for generating protos\"\"\"",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "\"\"\"Generates codes from Protocol Buffers definitions.\n\nThis rule helps you to implement Skylark macros specific to the target\nlanguage. You should prefer more specific `cc_proto_library `,\n`py_proto_library` and others unless you are adding such wrapper macros.\n\nArgs:\n  srcs: Protocol Buffers definition files (.proto) to run the protocol compiler\n    against.\n  deps: a list of dependency labels; must be other proto libraries.\n  includes: a list of include paths to .proto files.\n  protoc: the label of the protocol compiler to generate the sources.\n  plugin: the label of the protocol compiler plugin to be passed to the protocol\n    compiler.\n  plugin_language: the language of the generated sources\n  plugin_options: a list of options to be passed to the plugin\n  gen_cc: generates C++ sources in addition to the ones from the plugin.\n  gen_py: generates Python sources in addition to the ones from the plugin.\n  outs: a list of labels of the expected outputs from the protocol compiler.\n\"\"\"",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "\"\"\"Bazel rule to create a C++ protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the cc_proto_library.\n    srcs: the .proto files of the cc_proto_library.\n    deps: a list of dependency labels; must be cc_proto_library.\n    cc_libs: a list of other cc_library targets depended by the generated\n        cc_library.\n    include: a string indicating the include path of the .proto files.\n    protoc: the label of the protocol compiler to generate the sources.\n    internal_bootstrap_hack: a flag indicate the cc_proto_library is used only\n        for bootstraping. When it is set to True, no files will be generated.\n        The rule will simply be a provider for .proto files, so that other\n        cc_proto_library can depend on it.\n    use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin\n        when processing the proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated cc_library target.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For pre-checked-in generated files, we add the internal_bootstrap_hack\n# which will skip the codegen action.",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# An empty cc_library to make rule dependency consistent.",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "\"\"\"Bazel rule to generate the gen_well_known_protos_java genrule\n\n  Args:\n    srcs: the well known protos\n  \"\"\"",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "\"\"\"Macro to copy files to a different directory and then create a filegroup.\n\n  This is used by the //:protobuf_python py_proto_library target to work around\n  an issue caused by Python source files that are part of the same Python\n  package being in separate directories.\n\n  Args:\n    srcs: The source files to copy and add to the filegroup.\n    strip_prefix: Path to the root of the files to copy.\n    dest: The directory to copy the source files into.\n    **kwargs: extra arguments that will be passesd to the filegroup.\n  \"\"\"",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "\"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the py_proto_library.\n    srcs: the .proto files of the py_proto_library.\n    deps: a list of dependency labels; must be py_proto_library.\n    py_libs: a list of other py_library targets depended by the generated\n        py_library.\n    py_extra_srcs: extra source files that will be added to the output\n        py_library. This attribute is used for internal bootstrapping.\n    include: a string indicating the include path of the .proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated py_library target.\n    protoc: the label of the protocol compiler to generate the sources.\n    use_grpc_plugin: a flag to indicate whether to call the Python C++ plugin\n        when processing the proto files.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Note: Generated grpc code depends on Python grpc module. This dependency\n# is not explicitly listed in py_libs. Instead, host system is assumed to\n# have grpc installed.",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "\"\"\"Bazel rules to create batch tests for protobuf internal.\n\n  Args:\n    name: the name of the rule.\n    modules: a list of modules for tests. The macro will create a py_test for\n        each of the parameter with the source \"google/protobuf/%s.py\"\n    kargs: extra parameters that will be passed into the py_test.\n\n  \"\"\"",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "third_party/com_kitware_gitlab_cmake_cmake/3.10/Modules/FindMatlab.cmake" : {
      "ObjectId" : "872c807e0785ca983cd0ff17d19f20dc94965108",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# NOTICE: This file is not an exact copy of FindMatlab.cmake from upstream.\n\n#\n\n# Improvements made in the upstream version depend on changes to the CMake C++\n\n# source code. This copy has been modified to incorporate similar improvements\n\n# without depending on the newer version of CMake.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#.rst:\n\n# FindMatlab\n\n# ----------\n\n#\n\n# Finds Matlab installations and provides Matlab tools and libraries to cmake.\n\n#\n\n# This package first intention is to find the libraries associated with Matlab\n\n# in order to be able to build Matlab extensions (mex files). It can also be\n\n# used:\n\n#\n\n# * run specific commands in Matlab\n\n# * declare Matlab unit test\n\n# * retrieve various information from Matlab (mex extensions, versions and\n\n#   release queries, ...)\n\n#\n\n# The module supports the following components:\n\n#\n\n# * ``MX_LIBRARY``, ``ENG_LIBRARY`` and ``MAT_LIBRARY``: respectively the MX,\n\n#   ENG and MAT libraries of Matlab\n\n# * ``MAIN_PROGRAM`` the Matlab binary program.\n\n# * ``MEX_COMPILER`` the MEX compiler.\n\n# * ``SIMULINK`` the Simulink environment.\n\n#\n\n# .. note::\n\n#\n\n#   The version given to the :command:`find_package` directive is the Matlab\n\n#   **version**, which should not be confused with the Matlab *release* name\n\n#   (eg. `R2014`).\n\n#   The :command:`matlab_get_version_from_release_name` and\n\n#   :command:`matlab_get_release_name_from_version` allow a mapping\n\n#   from the release name to the version.\n\n#\n\n# The variable :variable:`Matlab_ROOT_DIR` may be specified in order to give\n\n# the path of the desired Matlab version. Otherwise, the behaviour is platform\n\n# specific:\n\n#\n\n# * Windows: The installed versions of Matlab are retrieved from the\n\n#   Windows registry\n\n# * OS X: The installed versions of Matlab are given by the MATLAB\n\n#   paths in ``/Application``. If no such application is found, it falls back\n\n#   to the one that might be accessible from the PATH.\n\n# * Unix: The desired Matlab should be accessible from the PATH.\n\n#\n\n# Additional information is provided when :variable:`MATLAB_FIND_DEBUG` is set.\n\n# When a Matlab binary is found automatically and the ``MATLAB_VERSION``\n\n# is not given, the version is queried from Matlab directly.\n\n# On Windows, it can make a window running Matlab appear.\n\n#\n\n# The mapping of the release names and the version of Matlab is performed by\n\n# defining pairs (name, version).  The variable\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS` may be provided before the call to\n\n# the :command:`find_package` in order to handle additional versions.\n\n#\n\n# A Matlab scripts can be added to the set of tests using the\n\n# :command:`matlab_add_unit_test`. By default, the Matlab unit test framework\n\n# will be used (>= 2013a) to run this script, but regular ``.m`` files\n\n# returning an exit code can be used as well (0 indicating a success).\n\n#\n\n# Module Input Variables\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Users or projects may set the following variables to configure the module\n\n# behaviour:\n\n#\n\n# :variable:`Matlab_ROOT_DIR`\n\n#   the root of the Matlab installation.\n\n# :variable:`MATLAB_FIND_DEBUG`\n\n#   outputs debug information\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS`\n\n#   additional versions of Matlab for the automatic retrieval of the installed\n\n#   versions.\n\n#\n\n# Variables defined by the module\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Result variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_FOUND``\n\n#   ``TRUE`` if the Matlab installation is found, ``FALSE``\n\n#   otherwise. All variable below are defined if Matlab is found.\n\n# ``Matlab_ROOT_DIR``\n\n#   the final root of the Matlab installation determined by the FindMatlab\n\n#   module.\n\n# ``Matlab_MAIN_PROGRAM``\n\n#   the Matlab binary program. Available only if the component ``MAIN_PROGRAM``\n\n#   is given in the :command:`find_package` directive.\n\n# ``Matlab_INCLUDE_DIRS``\n\n#  the path of the Matlab libraries headers\n\n# ``Matlab_MEX_LIBRARY``\n\n#   library for mex, always available.\n\n# ``Matlab_MX_LIBRARY``\n\n#   mx library of Matlab (arrays). Available only if the component\n\n#   ``MX_LIBRARY`` has been requested.\n\n# ``Matlab_ENG_LIBRARY``\n\n#   Matlab engine library. Available only if the component ``ENG_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_MAT_LIBRARY``\n\n#   Matlab matrix library. Available only if the component ``MAT_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_LIBRARIES``\n\n#   the whole set of libraries of Matlab\n\n# ``Matlab_MEX_COMPILER``\n\n#   the mex compiler of Matlab. Currently not used.\n\n#   Available only if the component ``MEX_COMPILER`` is asked\n\n#\n\n# Cached variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_MEX_EXTENSION``\n\n#   the extension of the mex files for the current platform (given by Matlab).\n\n# ``Matlab_ROOT_DIR``\n\n#   the location of the root of the Matlab installation found. If this value\n\n#   is changed by the user, the result variables are recomputed.\n\n#\n\n# Provided macros\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_get_version_from_release_name`\n\n#   returns the version from the release name\n\n# :command:`matlab_get_release_name_from_version`\n\n#   returns the release name from the Matlab version\n\n#\n\n# Provided functions\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_add_mex`\n\n#   adds a target compiling a MEX file.\n\n# :command:`matlab_add_unit_test`\n\n#   adds a Matlab unit test file as a test to the project.\n\n# :command:`matlab_extract_all_installed_versions_from_registry`\n\n#   parses the registry for all Matlab versions. Available on Windows only.\n\n#   The part of the registry parsed is dependent on the host processor\n\n# :command:`matlab_get_all_valid_matlab_roots_from_registry`\n\n#   returns all the possible Matlab paths, according to a previously\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\n\n#   useful for the searching all possible Matlab installation.\n\n# :command:`matlab_get_mex_suffix`\n\n#   returns the suffix to be used for the mex files\n\n#   (platform/architecture dependent)\n\n# :command:`matlab_get_version_from_matlab_run`\n\n#   returns the version of Matlab, given the full directory of the Matlab\n\n#   program.\n\n#\n\n#\n\n# Known issues\n\n# ^^^^^^^^^^^^\n\n#\n\n# **Symbol clash in a MEX target**\n\n#   By default, every symbols inside a MEX\n\n#   file defined with the command :command:`matlab_add_mex` have hidden\n\n#   visibility, except for the entry point. This is the default behaviour of\n\n#   the MEX compiler, which lowers the risk of symbol collision between the\n\n#   libraries shipped with Matlab, and the libraries to which the MEX file is\n\n#   linking to. This is also the default on Windows platforms.\n\n#\n\n#   However, this is not sufficient in certain case, where for instance your\n\n#   MEX file is linking against libraries that are already loaded by Matlab,\n\n#   even if those libraries have different SONAMES.\n\n#   A possible solution is to hide the symbols of the libraries to which the\n\n#   MEX target is linking to. This can be achieved in GNU GCC compilers with\n\n#   the linker option ``-Wl,--exclude-libs,ALL``.\n\n#\n\n# **Tests using GPU resources**\n\n#   in case your MEX file is using the GPU and\n\n#   in order to be able to run unit tests on this MEX file, the GPU resources\n\n#   should be properly released by Matlab. A possible solution is to make\n\n#   Matlab aware of the use of the GPU resources in the session, which can be\n\n#   performed by a command such as ``D = gpuDevice()`` at the beginning of\n\n#   the test script (or via a fixture).\n\n#\n\n#\n\n# Reference\n\n# ^^^^^^^^^\n\n#\n\n# .. variable:: Matlab_ROOT_DIR\n\n#\n\n#    The root folder of the Matlab installation. If set before the call to\n\n#    :command:`find_package`, the module will look for the components in that\n\n#    path. If not set, then an automatic search of Matlab\n\n#    will be performed. If set, it should point to a valid version of Matlab.\n\n#\n\n# .. variable:: MATLAB_FIND_DEBUG\n\n#\n\n#    If set, the lookup of Matlab and the intermediate configuration steps are\n\n#    outputted to the console.\n\n#\n\n# .. variable:: MATLAB_ADDITIONAL_VERSIONS\n\n#\n\n#   If set, specifies additional versions of Matlab that may be looked for.\n\n#   The variable should be a list of strings, organised by pairs of release\n\n#   name and versions, such as follows::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"release_name1=corresponding_version1\"\n\n#         \"release_name2=corresponding_version2\"\n\n#         ...\n\n#         )\n\n#\n\n#   Example::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"R2013b=8.2\"\n\n#         \"R2013a=8.1\"\n\n#         \"R2012b=8.0\")\n\n#\n\n#   The order of entries in this list matters when several versions of\n\n#   Matlab are installed. The priority is set according to the ordering in\n\n#   this list.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The currently supported versions. Other version can be added by the user by\n\n# providing MATLAB_ADDITIONAL_VERSIONS\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# temporary folder for all Matlab runs\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_release_name\n\n#\n\n#   Returns the version of Matlab (17.58) from a release name (R2017k)\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_release_name_from_version\n\n#\n\n#   Returns the release name (R2017k) from the version of Matlab (17.58)\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extracts all the supported release names (R2017k...) of Matlab\n\n# internal use\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# extracts all the supported versions of Matlab\n\n# internal use\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_extract_all_installed_versions_from_registry\n\n#\n\n#   This function parses the registry and founds the Matlab versions that are\n\n#   installed. The found versions are returned in `matlab_versions`.\n\n#   Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for\n\n#   The returned list contains all versions under\n\n#   ``HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB`` or an empty list in case an error\n\n#   occurred (or nothing found).\n\n#\n\n#   .. note::\n\n#\n\n#     Only the versions are provided. No check is made over the existence of the\n\n#     installation referenced in the registry,\n\n#\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\n\n# redirection of 64 bits applications\n",
        "Line" : 373,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# (internal)\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# get the supported versions\n",
        "Line" : 423,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# this is a manual population of the versions we want to look for\n\n# this can be done as is, but preferably with the call to\n\n# matlab_get_supported_versions and variable\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# populating the versions we want to look for\n\n# set(matlab_supported_versions)\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# # Matlab 7\n\n# set(matlab_major 7)\n\n# foreach(current_matlab_minor RANGE 4 20)\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# # Matlab 8\n\n# set(matlab_major 8)\n\n# foreach(current_matlab_minor RANGE 0 5)\n",
        "Line" : 441,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# # taking into account the possible additional versions provided by the user\n\n# if(DEFINED MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# list(APPEND matlab_supported_versions MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 449,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# endif()\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# we order from more recent to older\n",
        "Line" : 453,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_all_valid_matlab_roots_from_registry\n\n#\n\n#   Populates the Matlab root with valid versions of Matlab.\n\n#   The returned matlab_roots is organized in pairs\n\n#   ``(version_number,matlab_root_path)``.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_all_valid_matlab_roots_from_registry(\n\n#         matlab_versions\n\n#         matlab_roots)\n\n#\n\n#   ``matlab_versions``\n\n#     the versions of each of the Matlab installations\n\n#   ``matlab_roots``\n\n#     the location of each of the Matlab installations\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# The matlab_versions comes either from\n\n# extract_matlab_versions_from_registry_brute_force or\n\n# matlab_extract_all_installed_versions_from_registry.\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_mex_suffix\n\n#\n\n#   Returns the extension of the mex files (the suffixes).\n\n#   This function should not be called before the appropriate Matlab root has\n\n#   been found.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_mex_suffix(\n\n#         matlab_root\n\n#         mex_suffix)\n\n#\n\n#   ``matlab_root``\n\n#     the root of the Matlab installation\n\n#   ``mex_suffix``\n\n#     the variable name in which the suffix will be returned.\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# todo setup the extension properly. Currently I do not know if this is\n\n# sufficient for all win32 distributions.\n\n# there is also CMAKE_EXECUTABLE_SUFFIX that could be tweaked\n",
        "Line" : 529,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# we first try without suffix, since cmake does not understand a list with\n\n# one empty string element\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# this call should populate the cache automatically\n",
        "Line" : 549,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# the program has been found?\n",
        "Line" : 561,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_matlab_run\n\n#\n\n#   This function runs Matlab program specified on arguments and extracts its\n\n#   version.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_version_from_matlab_run(\n\n#         matlab_binary_path\n\n#         matlab_list_versions)\n\n#\n\n#   ``matlab_binary_path``\n\n#     the location of the `matlab` binary executable\n\n#   ``matlab_list_versions``\n\n#     the version extracted from Matlab\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# the log file is needed since on windows the command executes in a new\n\n# window and it is not possible to get back the answer of Matlab\n\n# the -wait command is needed on windows, otherwise the call returns\n\n# immediately after the program launches itself.\n",
        "Line" : 626,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# timeout set to 120 seconds, in case it does not start\n\n# note as said before OUTPUT_VARIABLE cannot be used in a platform\n\n# independent manner however, not setting it would flush the output of Matlab\n\n# in the current console (unix variant)\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# if successful, read back the log\n",
        "Line" : 675,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_unit_test\n\n#\n\n#   Adds a Matlab unit test to the test set of cmake/ctest.\n\n#   This command requires the component ``MAIN_PROGRAM``.\n\n#   The unit test uses the Matlab unittest framework (default, available\n\n#   starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``\n\n#   is given.\n\n#\n\n#   The function expects one Matlab test script file to be given.\n\n#   In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file\n\n#   should contain the script to be run, plus an exit command with the exit\n\n#   value. This exit value will be passed to the ctest framework (0 success,\n\n#   non 0 failure). Additional arguments accepted by :command:`add_test` can be\n\n#   passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).\n\n#\n\n#   ::\n\n#\n\n#     matlab_add_unit_test(\n\n#         NAME <name>\n\n#         UNITTEST_FILE matlab_file_containing_unittest.m\n\n#         [CUSTOM_TEST_COMMAND matlab_command_to_run_as_test]\n\n#         [UNITTEST_PRECOMMAND matlab_command_to_run]\n\n#         [TIMEOUT timeout]\n\n#         [ADDITIONAL_PATH path1 [path2 ...]]\n\n#         [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\n\n#         [TEST_ARGS arg1 [arg2 ...]]\n\n#         [NO_UNITTEST_FRAMEWORK]\n\n#         )\n\n#\n\n#   The function arguments are:\n\n#\n\n#   ``NAME``\n\n#     name of the unittest in ctest.\n\n#   ``UNITTEST_FILE``\n\n#     the matlab unittest file. Its path will be automatically\n\n#     added to the Matlab path.\n\n#   ``CUSTOM_TEST_COMMAND``\n\n#     Matlab script command to run as the test.\n\n#     If this is not set, then the following is run:\n\n#     ``runtests('matlab_file_name'), exit(max([ans(1,:).Failed]))``\n\n#     where ``matlab_file_name`` is the ``UNITTEST_FILE`` without the extension.\n\n#   ``UNITTEST_PRECOMMAND``\n\n#     Matlab script command to be ran before the file\n\n#     containing the test (eg. GPU device initialisation based on CMake\n\n#     variables).\n\n#   ``TIMEOUT``\n\n#     the test timeout in seconds. Defaults to 180 seconds as the\n\n#     Matlab unit test may hang.\n\n#   ``ADDITIONAL_PATH``\n\n#     a list of paths to add to the Matlab path prior to\n\n#     running the unit test.\n\n#   ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``\n\n#     a list of additional option in order\n\n#     to run Matlab from the command line.\n\n#     ``-nosplash -nodesktop -nodisplay`` are always added.\n\n#   ``TEST_ARGS``\n\n#     Additional options provided to the add_test command. These\n\n#     options are added to the default options (eg. \"CONFIGURATIONS Release\")\n\n#   ``NO_UNITTEST_FRAMEWORK``\n\n#     when set, indicates that the test should not\n\n#     use the unittest framework of Matlab (available for versions >= R2013a).\n\n#   ``WORKING_DIRECTORY``\n\n#     This will be the working directory for the test. If specified it will\n\n#     also be the output directory used for the log file of the test run.\n\n#     If not specifed the temporary directory ``${CMAKE_BINARY_DIR}/Matlab`` will\n\n#     be used as the working directory and the log location.\n\n#\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The arguments UNITTEST_PRECOMMAND and CUSTOM_TEST_COMMAND are one-valued\n\n# upstream.\n",
        "Line" : 787,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Modified from upstream since PARSE_ARGV argument was not added to\n\n# cmake_parse_arguments until CMake 3.7.\n",
        "Line" : 793,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Modified from upstream. Escape MATLAB commands so they can be passed to\n\n# add_test and to cmake -P script.\n",
        "Line" : 801,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_mex\n\n#\n\n#   Adds a Matlab MEX target.\n\n#   This commands compiles the given sources with the current tool-chain in\n\n#   order to produce a MEX file. The final name of the produced output may be\n\n#   specified, as well as additional link libraries, and a documentation entry\n\n#   for the MEX file. Remaining arguments of the call are passed to the\n\n#   :command:`add_library` or :command:`add_executable` command.\n\n#\n\n#   ::\n\n#\n\n#      matlab_add_mex(\n\n#          NAME <name>\n\n#          [EXECUTABLE | MODULE | SHARED]\n\n#          SRC src1 [src2 ...]\n\n#          [OUTPUT_NAME output_name]\n\n#          [DOCUMENTATION file.txt]\n\n#          [LINK_TO target1 target2 ...]\n\n#          [...]\n\n#      )\n\n#\n\n#   ``NAME``\n\n#     name of the target.\n\n#   ``SRC``\n\n#     list of source files.\n\n#   ``LINK_TO``\n\n#     a list of additional link dependencies.  The target links to ``libmex``\n\n#     by default. If ``Matlab_MX_LIBRARY`` is defined, it also\n\n#     links to ``libmx``.\n\n#   ``OUTPUT_NAME``\n\n#     if given, overrides the default name. The default name is\n\n#     the name of the target without any prefix and\n\n#     with ``Matlab_MEX_EXTENSION`` suffix.\n\n#   ``DOCUMENTATION``\n\n#     if given, the file ``file.txt`` will be considered as\n\n#     being the documentation file for the MEX file. This file is copied into\n\n#     the same folder without any processing, with the same name as the final\n\n#     mex file, and with extension `.m`. In that case, typing ``help <name>``\n\n#     in Matlab prints the documentation contained in this file.\n\n#   ``MODULE`` or ``SHARED`` may be given to specify the type of library to be\n\n#     created. ``EXECUTABLE`` may be given to create an executable instead of\n\n#     a library. If no type is given explicitly, the type is ``SHARED``.\n\n#\n\n#   The documentation file is not processed and should be in the following\n\n#   format:\n\n#\n\n#   ::\n\n#\n\n#     % This is the documentation\n\n#     function ret = mex_target_output_name(input1)\n\n#\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# we do not need all this on Windows\n\n# pthread options\n",
        "Line" : 885,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# we should use try_compile instead, the link flags are discarded from\n\n# this compiler_flag function.\n\n#check_cxx_compiler_flag(-Wl,--exclude-libs,ALL HAS_SYMBOL_HIDING_CAPABILITY)\n",
        "Line" : 892,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# documentation\n",
        "Line" : 946,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# documentation\n",
        "Line" : 955,
        "CharPositionInLine" : 10
      },
      "45" : {
        "Text" : "# entry point in the mex file + taking care of visibility and symbol clashes.\n",
        "Line" : 957,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Apparently, compiling with -pthread generated the proper link flags\n\n# and some defines at compilation\n",
        "Line" : 965,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# if we do not do that, the symbols linked from eg. boost remain weak and\n\n# then clash with the ones defined in the matlab process. So by default\n\n# the symbols are hidden.\n\n# This also means that for shared libraries (like MEX), the entry point\n\n# should be explicitly declared with default visibility, otherwise Matlab\n\n# cannot find the entry point.\n\n# Note that this is particularly meaningful if the MEX wrapper itself\n\n# contains symbols that are clashing with Matlab (that are compiled in the\n\n# MEX file). In order to propagate the visibility options to the libraries\n\n# to which the MEX file is linked against, the -Wl,--exclude-libs,ALL\n\n# option should also be specified.\n",
        "Line" : 971,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "#  get_target_property(\n\n#    _previous_link_flags\n\n#    ${${prefix}_NAME}\n\n#    LINK_FLAGS)\n\n#  if(NOT _previous_link_flags)\n\n#    set(_previous_link_flags)\n\n#  endif()\n",
        "Line" : 990,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,--exclude-libs,ALL\"\n\n#        # -Wl,--version-script=${_FindMatlab_SELF_DIR}/MatlabLinuxVisibility.map\"\n\n#    )\n\n#  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n\n#    # in this case, all other symbols become hidden.\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,-exported_symbol,_mexFunction\"\n\n#        #-Wl,-exported_symbols_list,${_FindMatlab_SELF_DIR}/MatlabOSXVisilibity.map\"\n\n#    )\n\n#  endif()\n",
        "Line" : 998,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# (internal)\n\n# Used to get the version of matlab, using caching. This basically transforms the\n\n# output of the root list, with possible unknown version, to a version\n\n#\n",
        "Line" : 1026,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# if the version is not trivial, we query matlab for that\n\n# we keep track of the location of matlab that induced this version\n\n#if(NOT DEFINED Matlab_PROG_VERSION_STRING_AUTO_DETECT)\n\n#  set(Matlab_PROG_VERSION_STRING_AUTO_DETECT \"\" CACHE INTERNAL \"internal matlab location for the discovered version\")\n\n#endif()\n",
        "Line" : 1032,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# the version is known, we just return it\n",
        "Line" : 1039,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "#\n",
        "Line" : 1045,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# do we already have a matlab program?\n",
        "Line" : 1048,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# if not found, clear the dependent variables\n",
        "Line" : 1065,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# full real path for path comparison\n",
        "Line" : 1076,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# is it the same as the previous one?\n",
        "Line" : 1081,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# update the location of the program\n",
        "Line" : 1087,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# set the version into the cache\n",
        "Line" : 1100,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# warning, just in case several versions found (should not happen)\n",
        "Line" : 1103,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# return the updated value\n",
        "Line" : 1108,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# ###################################\n\n# Exploring the possible Matlab_ROOTS\n",
        "Line" : 1119,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# this variable will get all Matlab installations found in the current system.\n",
        "Line" : 1122,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# if the user specifies a possible root, we keep this one\n",
        "Line" : 1128,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# if Matlab_ROOT_DIR specified but erroneous\n",
        "Line" : 1131,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# NOTFOUND indicates the code below to search for the version automatically\n",
        "Line" : 1136,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# empty version\n",
        "Line" : 1138,
        "CharPositionInLine" : 72
      },
      "68" : {
        "Text" : "# cached version\n",
        "Line" : 1140,
        "CharPositionInLine" : 95
      },
      "69" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\n\n# one installation using the appropriate heuristics\n",
        "Line" : 1147,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# On WIN32, we look for Matlab installation in the registry\n\n# if unsuccessful, we look for all known revision and filter the existing\n\n# ones.\n",
        "Line" : 1152,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\n",
        "Line" : 1156,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\n",
        "Line" : 1167,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# filtering the results with the registry keys\n",
        "Line" : 1177,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# on mac, we look for the /Application paths\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\n\n# any other guess.\n",
        "Line" : 1183,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\n",
        "Line" : 1218,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\n\n# If set by the user, this wont change\n",
        "Line" : 1221,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# we then populate the list of roots, with empty version\n",
        "Line" : 1229,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# resolve symlinks\n",
        "Line" : 1234,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# get the directory (the command below has to be run twice)\n\n# this will be the matlab root\n",
        "Line" : 1237,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# Matlab should be in bin\n",
        "Line" : 1240,
        "CharPositionInLine" : 93
      },
      "81" : {
        "Text" : "# take the first possible Matlab root\n",
        "Line" : 1263,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# adding a warning in case of ambiguity\n",
        "Line" : 1270,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# check if the root changed wrt. the previous defined one, if so\n\n# clear all the cached variables for being able to reconfigure properly\n",
        "Line" : 1278,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# internal\n",
        "Line" : 1294,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "#Matlab_PROG_VERSION_STRING_AUTO_DETECT\n",
        "Line" : 1297,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "# Fix the version, in case this one is NOTFOUND\n",
        "Line" : 1311,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# i should be for intel\n",
        "Line" : 1338,
        "CharPositionInLine" : 32
      },
      "88" : {
        "Text" : "# This variable goes to the cache.\n",
        "Line" : 1384,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# internal\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\n\n# This is the function to be used below instead of the find_library directives.\n",
        "Line" : 1396,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# the MEX library/header are required\n",
        "Line" : 1408,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# the MEX extension is required\n",
        "Line" : 1427,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# the matlab root is required\n",
        "Line" : 1430,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# component Mex Compiler\n",
        "Line" : 1433,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# component Matlab program\n",
        "Line" : 1449,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Component MX library\n",
        "Line" : 1465,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Component ENG library\n",
        "Line" : 1481,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# Component MAT library\n",
        "Line" : 1497,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Component Simulink\n",
        "Line" : 1513,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 99
    },
    "third_party/com_kitware_gitlab_cmake_cmake/3.10/Modules/FindProtobuf.cmake" : {
      "ObjectId" : "adea4f9ae21eca6d80f9b349786a1bbecdd2f0d7",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# NOTICE: This file is not an exact copy of FindProtobuf.cmake from upstream.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#.rst:\n\n# FindProtobuf\n\n# ------------\n\n#\n\n# Locate and configure the Google Protocol Buffers library.\n\n#\n\n# The following variables can be set and are optional:\n\n#\n\n# ``Protobuf_SRC_ROOT_FOLDER``\n\n#   When compiling with MSVC, if this cache variable is set\n\n#   the protobuf-default VS project build locations\n\n#   (vsprojects/Debug and vsprojects/Release\n\n#   or vsprojects/x64/Debug and vsprojects/x64/Release)\n\n#   will be searched for libraries and binaries.\n\n# ``Protobuf_IMPORT_DIRS``\n\n#   List of additional directories to be searched for\n\n#   imported .proto files.\n\n# ``Protobuf_DEBUG``\n\n#   Show debug messages.\n\n# ``Protobuf_USE_STATIC_LIBS``\n\n#   Set to ON to force the use of the static libraries.\n\n#   Default is OFF.\n\n#\n\n# Defines the following variables:\n\n#\n\n# ``Protobuf_FOUND``\n\n#   Found the Google Protocol Buffers library\n\n#   (libprotobuf & header files)\n\n# ``Protobuf_VERSION``\n\n#   Version of package found.\n\n# ``Protobuf_INCLUDE_DIRS``\n\n#   Include directories for Google Protocol Buffers\n\n# ``Protobuf_LIBRARIES``\n\n#   The protobuf libraries\n\n# ``Protobuf_PROTOC_LIBRARIES``\n\n#   The protoc libraries\n\n# ``Protobuf_LITE_LIBRARIES``\n\n#   The protobuf-lite libraries\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined:\n\n#\n\n# ``protobuf::libprotobuf``\n\n#   The protobuf library.\n\n# ``protobuf::libprotobuf-lite``\n\n#   The protobuf lite library.\n\n# ``protobuf::libprotoc``\n\n#   The protoc library.\n\n# ``protobuf::protoc``\n\n#   The protoc compiler.\n\n#\n\n# The following cache variables are also available to set or use:\n\n#\n\n# ``Protobuf_LIBRARY``\n\n#   The protobuf library\n\n# ``Protobuf_PROTOC_LIBRARY``\n\n#   The protoc library\n\n# ``Protobuf_INCLUDE_DIR``\n\n#   The include directory for protocol buffers\n\n# ``Protobuf_PROTOC_EXECUTABLE``\n\n#   The protoc compiler\n\n# ``Protobuf_LIBRARY_DEBUG``\n\n#   The protobuf library (debug)\n\n# ``Protobuf_PROTOC_LIBRARY_DEBUG``\n\n#   The protoc library (debug)\n\n# ``Protobuf_LITE_LIBRARY``\n\n#   The protobuf lite library\n\n# ``Protobuf_LITE_LIBRARY_DEBUG``\n\n#   The protobuf lite library (debug)\n\n#\n\n# Example:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(Protobuf REQUIRED)\n\n#   include_directories(${Protobuf_INCLUDE_DIRS})\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#   protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS foo.proto)\n\n#   protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS EXPORT_MACRO DLL_EXPORT foo.proto)\n\n#   protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS DESCRIPTORS PROTO_DESCS foo.proto)\n\n#   protobuf_generate_python(PROTO_PY foo.proto)\n\n#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\n\n#   target_link_libraries(bar ${Protobuf_LIBRARIES})\n\n#\n\n# .. note::\n\n#   The ``protobuf_generate_cpp`` and ``protobuf_generate_python``\n\n#   functions and :command:`add_executable` or :command:`add_library`\n\n#   calls only work properly within the same directory.\n\n#\n\n# .. command:: protobuf_generate_cpp\n\n#\n\n#   Add custom commands to process ``.proto`` files to C++::\n\n#\n\n#     protobuf_generate_cpp (<SRCS> <HDRS>\n\n#         [DESCRIPTORS <DESC>] [EXPORT_MACRO <MACRO>] [<ARGN>...])\n\n#\n\n#   ``SRCS``\n\n#     Variable to define with autogenerated source files\n\n#   ``HDRS``\n\n#     Variable to define with autogenerated header files\n\n#   ``DESCRIPTORS``\n\n#     Variable to define with autogenerated descriptor files, if requested.\n\n#   ``EXPORT_MACRO``\n\n#     is a macro which should expand to ``__declspec(dllexport)`` or\n\n#     ``__declspec(dllimport)`` depending on what is being compiled.\n\n#   ``ARGN``\n\n#     ``.proto`` files\n\n#\n\n# .. command:: protobuf_generate_python\n\n#\n\n#   Add custom commands to process ``.proto`` files to Python::\n\n#\n\n#     protobuf_generate_python (<PY> [<ARGN>...])\n\n#\n\n#   ``PY``\n\n#     Variable to define with autogenerated Python files\n\n#   ``ARGN``\n\n#     ``.proto`` filess\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Backwards compatibility\n\n# Define camel case versions of input variables\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Internal function: search for normal library as well as a debug one\n\n#    if the debug one is specified also include debug/optimized keywords\n\n#    in *_LIBRARIES variable\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use result recorded by a previous call.\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Honor cache entry used by CMake 3.5 and lower.\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Internal function: find threads library\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# Main.\n\n#\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc\n\n# for each directory where a proto file is referenced.\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google's provided vcproj files generate libraries with a \"lib\"\n\n# prefix on Windows\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The Protobuf library\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#DOC \"The Google Protocol Buffers RELEASE Library\"\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Protobuf Protoc Library\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Restore original find library prefixes\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Find the include directory\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Find the protoc Executable\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Check Protobuf compiler version to be aligned with libraries version\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Backwards compatibility\n\n# Define upper case versions of output variables\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "third_party/com_kitware_gitlab_cmake_cmake/3.10/Modules/MatlabTestsRedirect.cmake" : {
      "ObjectId" : "64d580db6aa925fce96a190e804b15ab09c8632d",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is an undocumented internal helper for the FindMatlab\n\n# module ``matlab_add_unit_test`` command.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Usage: cmake\n\n#   -Dtest_timeout=180\n\n#   -Doutput_directory=\n\n#   -Dadditional_paths=\"\"\n\n#   -Dno_unittest_framework=\"\"\n\n#   -DMatlab_PROGRAM=matlab_exe_location\n\n#   -DMatlab_ADDITIONAL_STARTUP_OPTIONS=\"\"\n\n#   -Dtest_name=name_of_the_test\n\n#   -Dcustom_Matlab_test_command=\"\"\n\n#   -Dcmd_to_run_before_test=\"\"\n\n#   -Dunittest_file_to_run\n\n#   -P FindMatlab_TestsRedirect.cmake\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If timeout is -1, then do not put a timeout on the execute_process\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if the working directory is not specified then default\n\n# to the output_directory because the log file will go there\n\n# if the working_directory is specified it will override the\n\n# output_directory\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do not use a full path to log file.  Depend on the fact that the log file\n\n# is always going to go in the working_directory.  This is because matlab\n\n# on unix is a shell script that does not handle spaces in the logfile path.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# we do not want the output twice\n",
        "Line" : 89,
        "CharPositionInLine" : 15
      },
      "7" : {
        "Text" : "# print the output in any case.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if we put FATAL_ERROR here, the file is indented.\n",
        "Line" : 100,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 9
    },
    "tools/clion/aspect.bzl" : {
      "ObjectId" : "4cb6c5036d0815f1f45e9a178f2aed9bd451751a",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Load the relevant upstream methods.",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load the magic.",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is part of the `semantics` hooks provided by intellij_aspect's aspect.\n# We use it to rewrite the transitive_quote_include_directory to contain an\n# entry for Drake that avoids the virtual_headers symlink farm.\n#\n# For reference, ~/.CLion2017.2/config/plugins/clwb/intellij_info_impl.bzl is\n# the code that ends up calling this function -- read its source to understand\n# the data types that we are manipulating here.",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. All of our return statements here should return False, which means\n# \"I was not the primary semantics for this target\".  The intellij_aspect's\n# code is always the primary semantics, we're just (potentially) frobbing\n# its results.",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# No Drake path needs to be inserted.",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Not a C / C++ target.",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# No includes exist, so we don't need to override them.",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Place Drake's parent directory on CLion's include path.",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Define the relevant semantics (see intellij_info_bundled.bzl).",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Curry our semantics argument into the aspect rule's implementation function.",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is the command-line entry point.",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tools/clion/repository.bzl" : {
      "ObjectId" : "284e5cacb13f0ca1bafea2f3f50a6557d85a7324",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Declares a repository that names the parent directory of the Drake\nworkspace.  This repository contains no rules; just a single file named\n`path.bzl` which has a variable `additional_transitive_quote_include_directory`\nwith Drake's parent directory name.  This path is used by `aspect.bzl` in this\npackage (@drake//tools/clion).  This rule only makes sense when used directly\nfrom Drake's WORKSPACE file, not from any other project; thus, it does not live\nunder //tools/workspace like most other repository rules.\n\"\"\"",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the top-level folder of Drake's source code.",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Compute an include path that makes '#include \"drake/foo.h\" work.",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Write out the path to a bzl constant.",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "tools/external_data/expose_all_files.bzl" : {
      "ObjectId" : "4bd3678778042265975444b205417259607e7879",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "\"\"\"\nProvides all files (including `data` dependencies) at one level such that they\nare expandable via `$(locations ...)`.\n\n@param data\n    Upstream data targets. This will consume both the `srcs` and `data`\n    portions of an existing `filegroup`.\n\"\"\"",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Patterns to be exposed.",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To minimize the number of dependencies need to consume `external_data`,\n# this list is copied (not imported) from `//tools/lint:bazel_lint.bzl`.",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"\n    Declares files to be consumed externally (for Bazel workspace tests,\n    linting, etc).\n    Creates rules \"${type}_files\" and \"${type}_files_recursive\", where `type`\n    will be all of {\"all\", \"bazel_lint\", \"python_lint\"}.\n\n    @param sub_packages\n        Child packages, only the first level.\n    @param sub_dirs\n        Any directories that are not packages.\n    \"\"\"",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# @note It'd be nice if this could respect *ignore files, but meh.\n# Also, it'd be **super** nice if Bazel did not let `**` globs leak into\n# other packages and then error out.",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Root case.",
        "Line" : 75,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : "# Trying to use `data = deps` here only exposes the files in\n# runfiles, but not for expansion via `$(locations...)`.",
        "Line" : 86,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Expose all files recursively (from one level).",
        "Line" : 91,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "tools/external_data/external_data.bzl" : {
      "ObjectId" : "bf6ef981646ede0cadf5a470c0bf26148a3b8840",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define stub test using upstream package's file.",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/external_data/test/external_data_pkg_test/drake_path.bzl" : {
      "ObjectId" : "0ef8640d30e82d048ea0914e4e7731983b99a1e1",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N.B. This code is only run when tests are run manually (with this as the\n# workspace, not as an external repository). Otherwise, this will be replaced\n# with the directory path of Drake when tested from `@drake`.",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Returns parent directory name for a path `p`.",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"Returns path of Drake. This is replaced under\n    `external_data_workspace_test.sh`.\n    \"\"\"",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/external_data/test/external_data_workspace_test.bzl" : {
      "ObjectId" : "f4300b7590c66871edacc7677f915c73fe453131",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "\"\"\"\n    Convenience wrapper for `workspace_test`, specific to `external_data`\n    tests.\n\n    @param args See `workspace_test`.\n    @param data\n        See `workspace_test`. This test will automatically\n        include basic upstream files from Drake (`//tools/external_data`) and\n        the workspace test's files.\n    \"\"\"",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "\"\"\"\n    Creates a recursive_filegroup \"all_${type}_files\", where `type` will be\n    all of {\"bazel_lint\", \"python_lint\"}, such that they can be consumed by\n    `add_lint_tests` as extra files.\n    \"\"\"",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Prepare to expose all files recursively.",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Join files for linting, to permit $(locations ...) expansion directly\n# on transitive file dependencies.",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "\"\"\"\n    Adds test workspace directories as repositories so that their files can be\n    consumed and their tests can be ignored by `bazel test ...` from Drake.\n    \"\"\"",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# WARNING: Bazel also craps out here if `workspace_dir + path` is used\n# rather than just `path`.\n# N.B. This error is *stateful*. You will get different behavior depending\n# on what has been built / run previously in Bazel. In one mode, the error\n# will be:\n#   Encountered error while [...]\n#   /home/${USER}/.cache/bazel/_bazel_${USER}/${HASH}/external/external_data_pkg_test  # noqa\n#   must  be an existing directory\n# In another mode, you will get Java errors:\n#   java.lang.IllegalArgumentException: PathFragment\n#   tools/external_data/workspace is not beneath\n#   /home/${USER}/${WORKSPACE_DIR}/tools/external_data/workspace",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tools/external_data/test/workspace_test.bzl" : {
      "ObjectId" : "5bba7122ff68ebed40505bc77682026a5de3f7c0",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include release options:\n# https://docs.bazel.build/versions/master/user-manual.html#bazel-releng",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"\n    Copies all contents under `*.runfiles/${workspace}/**` to a temporary\n    directory, then evaluates `args` in `bash` in the new temporary runfiles\n    workspace directory.\n\n    @param args\n        Arguments for `bash` to execute. By default, will run\n        `bazel test //...` with release flavoring.\n    @param data\n        Data required for the workspace test.\n    \"\"\"",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tools/install/check_licenses.bzl" : {
      "ObjectId" : "05ae121b091b7ebd9d1622ecc989db56bb8c93d9",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of exact file names of license files",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ccd",
        "Line" : 7,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# vtk",
        "Line" : 9,
        "CharPositionInLine" : 22
      },
      "4" : {
        "Text" : "# gurobi",
        "Line" : 10,
        "CharPositionInLine" : 17
      },
      "5" : {
        "Text" : "# mosek",
        "Line" : 12,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# List of file name prefixes of license files",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check literal file names",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check file prefixes",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# No match",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Don't check empty installs (can happen if an install is a dummy due to\n# some platforms relying on a package already being installed).",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Look for file(s) that appear to be license(s) in the install actions.",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If no license found, return the failing label.",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Otherwise return nothing; caller collects failing labels to report.",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Iterate over labels, collecting ones that are missing licenses.",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Report collected failures.",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "\"\"\"Check that install labels include license files.\n\n    Given a list of install labels (e.g. ``//package:install``), check that the\n    set of files installed by the label includes one or more files that appear\n    to provide a license, by checking the file names against a list of known\n    names of license files (e.g. ``LICENSE``).\n\n    This is used to verify that a set of packages is installing the license\n    files for those packages.\n\n    Args:\n        name (:obj:`str`): Rule name (default = ``\"check_licenses\"``).\n        install_labels (:obj:`list` of :obj:`Label`): List of install labels\n            (must be created by :func:`install` or :func:`install_files`) to\n            be checked.\n    \"\"\"",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 20
    },
    "tools/install/install.bzl" : {
      "ObjectId" : "889a572b40802d521a2eec9614641a3e6ed3328d",
      "LastModified" : "2019-04-04T15:37:25Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================================================================\n#BEGIN internal helpers",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "\"\"\"Compute name of current workspace.\"\"\"",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check for override",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Check for meaningful workspace_root",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# If workspace_root is empty, assume we are the root workspace",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "\"\"\"Compute file name if file renamed.\"\"\"",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "\"\"\"Helper function to convert depset to list.\"\"\"",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "\"\"\"Compute output path (without destination prefix) for install action.\n\n    This computes the adjusted output path for an input file. It is the same as\n    :func:`output_path`, but additionally handles files outside the current\n    package when :func:`install` or :func:`install_files` is invoked with\n    non-empty ``allowed_externals``.\n    \"\"\"",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Try the current package first",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If we were unable to resolve a path, the file must be \"foreign\", so try\n# to resolve against the list of allowed externals.",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If we get here, we were not able to resolve the path; give up, and print\n# a warning about installing the \"foreign\" file.",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "\"\"\"Compute install action for a single file.\n\n    This takes a single file artifact and returns the appropriate install\n    action for the file. The parameters are the same as for\n    :func:`_install_action`.\n    \"\"\"",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "\"\"\"Compute install actions for files.\n\n    This takes a list of labels (targets or files) and computes the install\n    actions for the files owned by each label.\n\n    Args:\n        file_labels (:obj:`list` of :obj:`Label`): List of labels to install.\n        dests (:obj:`str` or :obj:`dict` of :obj:`str` to :obj:`str`):\n            Install destination. A :obj:`dict` may be given to supply a mapping\n            of file extension to destination path. The :obj:`dict` must have an\n            entry with the key ``None`` that is used as the default when there\n            is no entry for the specific extension.\n        strip_prefixes (:obj:`list` of :obj:`str` or :obj:`dict` of :obj:`list`\n            of :obj:`str` to :obj:`str`): List of prefixes to strip from the\n            input path before prepending the destination. A :obj:`dict` may be\n            given to supply a mapping of file extension to list of prefixes to\n            strip. The :obj:`dict` must have an entry with the key ``None``\n            that is used as the default when there is no entry for the specific\n            extension.\n        excluded_files (:obj:`list` of :obj:`str`): List of files to exclude\n            from installation.\n\n    Returns:\n        :obj:`list`: A list of install actions.\n    \"\"\"",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Iterate over files. We expect a list of labels, which will have a 'files'\n# attribute that is a list of file artifacts. Thus this two-level loop.",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# TODO(mwoehlke-kitware) refactor this to separate computing the\n# original relative path and the path with prefix(es) stripped,\n# then use the original relative path for both exclusions and\n# renaming.",
        "Line" : 192,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------\n# Compute install actions for a cc_library or cc_binary.",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Compute actions for target artifacts.",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Compute actions for guessed resource files.",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Compute actions for guessed headers.",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Return computed actions.",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "#------------------------------------------------------------------------------\n# Compute install actions for a java_library or java_binary.",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#------------------------------------------------------------------------------\n# Compute install actions for a py_library or py_binary.\n# TODO(jamiesnape): Install native shared libraries that the target may use.",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#------------------------------------------------------------------------------\n# Compute install actions for a script or an executable.",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#------------------------------------------------------------------------------\n# Compute install actions for a java launchers.",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# List runtime_classpath and compute their install paths.",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Adding double quotes around the generated scripts to avoid\n# white-space problems when running the generated shell script. This\n# string is used in a \"for-loop\" in the script.",
        "Line" : 348,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# Compute destination file name.",
        "Line" : 353,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "\"\"\"Compute and return list of install test command lines.\n\n    This computes the install path for the install tests (tests run to verify\n    that the project works once installed).\n\n    Returns:\n        :obj:`struct`: A list of test actions containing the location of the\n        tests files in the source tree and in the install tree.\n    \"\"\"",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# For files, we run the file from the build tree.",
        "Line" : 381,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#------------------------------------------------------------------------------\n# Generate install code for an install action.",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#------------------------------------------------------------------------------\n# Generate install code for a java launcher.",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#END internal helpers\n#==============================================================================\n#BEGIN rules",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#------------------------------------------------------------------------------\n# Generate information to install \"stuff\". \"Stuff\" can be library or binary\n# targets, headers, or documentation files.",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Collect install actions from dependencies.",
        "Line" : 417,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Generate actions for data, docs and includes.",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# TODO(jwnimmer-tri): Raise an error if a target has testonly=1.",
        "Line" : 448,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Executable scripts copied from source directory.",
        "Line" : 465,
        "CharPositionInLine" : 12
      },
      "44" : {
        "Text" : "# Generate install test actions.",
        "Line" : 468,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Generate code for install actions.",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Generate install script.\n# TODO(mwoehlke-kitware): Figure out a better way to generate this and run\n# it via Python than `#!/usr/bin/env python2`?",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Generate list containing all commands to run to test.",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Generate test installation script",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# noqa",
        "Line" : 507,
        "CharPositionInLine" : 90
      },
      "50" : {
        "Text" : "# Return actions.",
        "Line" : 515,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# TODO(mwoehlke-kitware) default guess_data to PACKAGE when we have better\n# default destinations.",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Update buildifier-tables.json when this changes.",
        "Line" : 529,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# (The documentation for this function is immediately below.)",
        "Line" : 576,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "\"\"\"Generate installation information for various artifacts.\n\nThis generates installation information for various artifacts, including\ndocumentation and header files, and targets (e.g. ``cc_binary``). By default,\nthe path of any files is included in the install destination.\nSee :rule:`install_files` for details.\n\nNormally, you should not install files or targets from a workspace other than\nthe one invoking ``install``, and ``install`` will warn if asked to do so. In\ncases (e.g. adding install rules to a project that is natively built with\nbazel, but does not define an install) where this *is* the right thing to do,\nthe ``allowed_externals`` argument may be used to specify a list of externals\nwhose files it is okay to install, which will suppress the warning.\n\nDestination paths may include the following placeholders:\n\n* ``@WORKSPACE@``, replaced with ``workspace`` (if specified) or the name of\n  the workspace which invokes ``install``.\n* ``@PYTHON_SITE_PACKAGES``, replaced with the Python version-specific path of\n  \"site-packages\".\n\nNote:\n    By default, headers and resource files to be installed must be explicitly\n    listed. This is to work around an issue where Bazel does not appear to\n    provide any mechanism to obtain the public headers of a target, nor the\n    *direct* data files of a target, at rule instantiation. The ``guess_hdrs``\n    and ``guess_data`` parameters may be used to tell ``install`` to guess at\n    what headers and/or resource files will be installed. Possible values are:\n\n    * ``\"NONE\"``: Only install files which are explicitly listed (i.e. by\n      ``hdrs`` or ``data``).\n    * ``PACKAGE``:  For each target, install those files which are used by the\n      target and owned by a target in the same package.\n    * ``WORKSPACE``: For each target, install those files which are used by the\n      target and owned by a target in the same workspace.\n    * ``EVERYTHING``: Install all headers/resources used by the target.\n\n    The headers and resource files considered are *all* headers or resource\n    files transitively used by the target. Any option other than ``NONE`` is\n    also likely to install private headers, and may install resource files used\n    by other targets. In either case, this may result in the same file being\n    considered for installation more than once.\n\n    Note also that, because Bazel includes *all* run-time dependencies —\n    including e.g. shared libraries — in a target's ``runfiles``, only *source*\n    artifacts are considered when guessing resource files.\n\n    Java binary launchers are created at install time. The install script is\n    configured to generate them, but no file other than the install script is\n    created at build time. Java binary launchers rely on a target containing\n    a ``MainClassInfo`` provider that contains all the required information to\n    generate the launcher. Do not forget to provide as dependencies the install\n    targets that rename files. This will be necessary to use the appropriate\n    jar file name when creating the java launcher.\n\n    MainClassInfo(\n            main_class = Name of main class to run (\"name.class.main\")\n            classpath = List contained in\n                ctx.attr.target.java.compilation_info.runtime_classpath\n            filename = Java launcher file name\n        )\n\n    A file containing all the commands to test executables after installation\n    is created if `install_tests_script` is set. The list of commands to run\n    is given by `install_tests`. The generated file location can be passed to\n    `install_test()` as an `args`.\n\nArgs:\n    deps: List of other install rules that this rule should include.\n    docs: List of documentation files to install.\n    doc_dest: Destination for documentation files\n        (default = \"share/doc/@WORKSPACE@\").\n    doc_strip_prefix: List of prefixes to remove from documentation paths.\n    guess_data: See note.\n    guess_data_exclude: List of resources found by ``guess_data`` to exclude\n        from installation.\n    data: List of (platform-independent) resource files to install.\n    data_dest: Destination for resource files (default = \"share/@WORKSPACE@\").\n    data_strip_prefix: List of prefixes to remove from resource paths.\n    guess_hdrs: See note.\n    guess_hdrs_exclude: List of headers found by ``guess_hdrs`` to exclude from\n        installation.\n    hdrs: List of header files to install.\n    hdr_dest: Destination for header files (default = \"include\").\n    hdr_strip_prefix: List of prefixes to remove from header paths.\n    targets: List of targets to install.\n    archive_dest: Destination for static library targets (default = \"lib\").\n    archive_strip_prefix: List of prefixes to remove from static library paths.\n    library_dest: Destination for shared library targets (default = \"lib\").\n    library_strip_prefix: List of prefixes to remove from shared library paths.\n    runtime_dest: Destination for executable targets (default = \"bin\").\n    runtime_strip_prefix: List of prefixes to remove from executable paths.\n    java_dest: Destination for Java library targets (default = \"share/java\").\n    java_strip_prefix: List of prefixes to remove from Java library paths.\n    py_dest: Destination for Python targets\n        (default = \"lib/python{MAJOR}.{MINOR}/site-packages\").\n    py_strip_prefix: List of prefixes to remove from Python paths.\n    rename: Mapping of install paths to alternate file names, used to rename\n      files upon installation.\n    install_tests: List of scripts that are designed to test the install\n        tree. These scripts will not be installed.\n    install_tests_script: Name of the generated file that contains the commands\n        run to test the install tree. This only needs to be specified for the\n        main `install()` call, and the same name should be passed to\n        `install_test()` as `\"$(location :\" + install_tests_script + \")\"`.\n    workspace: Workspace name to use in default paths (overrides built-in\n        guess).\n    allowed_externals: List of external packages whose files may be installed.\n\"\"\"",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "\"\"\"\n    Creates a duplicate install, only if Python3 is Bazel's version of Python.\n    Otherwise, creates an empty install target.\n\n    For `py_dest`, `@PYTHON_SITE_PACKAGES@` will be replaced with\n    `lib/python2.7/site-packages`.\n\n    This is presently only used to support Python2-only `drake_visualizer`.\n    \"\"\"",
        "Line" : 697,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Assuming that we will only have one supported major-minor version of\n# Python2.",
        "Line" : 712,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "#------------------------------------------------------------------------------\n# Generate information to install files to specified destination.",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Get path components.",
        "Line" : 729,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Generate actions.",
        "Line" : 733,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# Return computed actions.",
        "Line" : 742,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Update buildifier-tables.json when this changes.",
        "Line" : 746,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# (The documentation for this function is immediately below.)",
        "Line" : 759,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "\"\"\"Generate installation information for files.\n\nThis generates installation information for a list of files. By default, any\npath portion of the file as named is included in the install destination. For\nexample::\n\n    install_files(\n        dest = \"docs\",\n        files = [\"foo/bar.txt\"],\n        ...)\n\nThis will install ``bar.txt`` to the destination ``docs/foo``.\n\nWhen this behavior is undesired, the ``strip_prefix`` parameter may be used to\nspecify a list of prefixes to be removed from input file paths before computing\nthe destination path. Stripping is not recursive; the first matching prefix\nwill be stripped. Prefixes support the single-glob (``*``) to match any single\npath component, or the multi-glob (``**``) to match any number of path\ncomponents. Multi-glob matching is greedy. Globs may only be matched against\ncomplete path components (e.g. ``a/*/`` is okay, but ``a*/`` is not treated as\na glob and will be matched literally). Due to Skylark limitations, at most one\n``**`` may be matched.\n\nDestination paths may include the placeholder ``@WORKSPACE``, which is replaced\nwith ``workspace`` (if specified) or the name of the workspace which invokes\n``install``.\n\n``install_files`` has the same caveats regarding external files as\n:func:`install`.\n\nArgs:\n    dest: Destination for files.\n    files: List of files to install.\n    strip_prefix: List of prefixes to remove from input paths.\n    rename: Mapping of install paths to alternate file names, used to rename\n      files upon installation.\n    workspace: Workspace name to use in default paths (overrides built-in\n        guess).\n    allowed_externals: List of external packages whose files may be installed.\n\"\"\"",
        "Line" : 765,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#END rules\n#==============================================================================\n#BEGIN macros",
        "Line" : 806,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 810,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "\"\"\"Create CMake package configuration and package version files via an\n    intermediate CPS file.\n\n    Args:\n        package (:obj:`str`): CMake package name.\n        script (:obj:`Label`): Script that creates the intermediate CPS file.\n        version_file (:obj:`str`): File that the script will search to\n            determine the version of the package.\n    \"\"\"",
        "Line" : 817,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 879,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "\"\"\"Generate installation information for CMake package configuration and\n    package version files. The rule name is always ``:install_cmake_config``.\n\n    Args:\n        package (:obj:`str`): CMake package name.\n        versioned (:obj:`bool`): True if a version file should be installed.\n    \"\"\"",
        "Line" : 885,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "\"\"\"A wrapper to test installed drake executables.\n\n    !!!Important: This command should be called only once, when the main\n    installation step occurs!!!\n\n    This wrapper uses `//tools/install:install_test.py` as its main script. It\n    expects to receive one argument which is the location of a file containing\n    the list of command to run in the test. The current limitation requires\n    each command to contain only one command per line. The file containing the\n    list of command is typically `install_tests_script` outputted by the\n    `install()` rule.\n    \"\"\"",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# We can't use drake_py_unittest here, because the srcs path is atypical.",
        "Line" : 929,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# This is an integration test with significant I/O that requires an\n# \"eternal\" timeout so that debug builds are successful.  Therefore,\n# the test size is increased to \"medium\", and the timeout to \"eternal\".\n# TODO(jamiesnape): Try to shorten the duration of this test.",
        "Line" : 932,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# The commands in our \"list of commands\" use unittest themselves, so we\n# do the same for our own test rig.  That means that both our rig and\n# the \"list of commands\" python programs must have a __main__ clause\n# (i.e., they must all be binaries, not libraries).",
        "Line" : 940,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "#END macros",
        "Line" : 948,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 75
    },
    "tools/install/install_data.bzl" : {
      "ObjectId" : "7cc2f0f68e829cee10ec7335136c1afc2831564d",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Install data\n\n    This macro creates 3 filegroups:\n    * `prod_models_prefix` + `name` (default: `prod_models`): data files in the\n    current folder and its subfolders.\n    * `test_models_prefix` + `name` (default: `test_models`): Only files\n    contained in a subfolder named `test` or files named `*test*`.\n    * `name` (default: `models`): Concatenation of the two previous filegroups.\n\n    An install rule that copies the prod models files in the corresponding\n    install directory is also created. The corresponding install directory is\n    generated based on the current folder which is prepended with\n    \"share/drake/\":\n    The file `drake/examples/acrobot/Acrobot_no_collision.urdf` will be\n    installed in:\n    {install_dir}/share/drake/examples/acrobot/Acrobot_no_collision.urdf\n    Test files (files contained in a `test` subfolder or named `*test*`) are\n    not installed.\n\n    Extra files to be installed that are not in the direct subdirectories of\n    the rule may be specified by using `extra_prod_models`.  One use of this is\n    to install generated files alongside the static files.\n    \"\"\"",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/install/libdrake/build_components.bzl" : {
      "ObjectId" : "026af8fc9a2780949b0bd22da96052aa8541350f",
      "LastModified" : "2019-04-04T15:37:25Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file governs the contents of libdrake.so.",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do not update this list by hand; instead, from the drake workspace run\n#\n#   tools/install/libdrake/build_components_refresh.py\n#\n# and it will rewrite this file automatically for you.  If the refresh made any\n# edits, then `git status` will show this file as modified; in that case, you\n# should commit the changes made by the refresh script.",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# unpackaged",
        "Line" : 13,
        "CharPositionInLine" : 60
      },
      "4" : {
        "Text" : "# unpackaged  # noqa",
        "Line" : 15,
        "CharPositionInLine" : 71
      },
      "5" : {
        "Text" : "# unpackaged  # noqa",
        "Line" : 16,
        "CharPositionInLine" : 69
      },
      "6" : {
        "Text" : "# unpackaged",
        "Line" : 23,
        "CharPositionInLine" : 67
      },
      "7" : {
        "Text" : "# unpackaged",
        "Line" : 24,
        "CharPositionInLine" : 62
      },
      "8" : {
        "Text" : "# unpackaged",
        "Line" : 25,
        "CharPositionInLine" : 59
      },
      "9" : {
        "Text" : "# unpackaged",
        "Line" : 26,
        "CharPositionInLine" : 66
      },
      "10" : {
        "Text" : "# unpackaged  # noqa",
        "Line" : 27,
        "CharPositionInLine" : 69
      },
      "11" : {
        "Text" : "# unpackaged\n# unpackaged\n# unpackaged",
        "Line" : 28,
        "CharPositionInLine" : 60
      },
      "12" : {
        "Text" : "# unpackaged",
        "Line" : 31,
        "CharPositionInLine" : 67
      },
      "13" : {
        "Text" : "# unpackaged",
        "Line" : 54,
        "CharPositionInLine" : 45
      },
      "14" : {
        "Text" : "# unpackaged",
        "Line" : 55,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# unpackaged",
        "Line" : 56,
        "CharPositionInLine" : 41
      },
      "16" : {
        "Text" : "# unpackaged",
        "Line" : 57,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# unpackaged\n# unpackaged",
        "Line" : 58,
        "CharPositionInLine" : 41
      },
      "18" : {
        "Text" : "# unpackaged",
        "Line" : 60,
        "CharPositionInLine" : 45
      },
      "19" : {
        "Text" : "# unpackaged",
        "Line" : 61,
        "CharPositionInLine" : 58
      },
      "20" : {
        "Text" : "# unpackaged",
        "Line" : 62,
        "CharPositionInLine" : 61
      },
      "21" : {
        "Text" : "# unpackaged  # noqa",
        "Line" : 63,
        "CharPositionInLine" : 80
      },
      "22" : {
        "Text" : "# unpackaged",
        "Line" : 64,
        "CharPositionInLine" : 43
      },
      "23" : {
        "Text" : "# unpackaged",
        "Line" : 65,
        "CharPositionInLine" : 50
      },
      "24" : {
        "Text" : "# unpackaged",
        "Line" : 66,
        "CharPositionInLine" : 45
      },
      "25" : {
        "Text" : "# unpackaged",
        "Line" : 67,
        "CharPositionInLine" : 47
      },
      "26" : {
        "Text" : "# unpackaged",
        "Line" : 68,
        "CharPositionInLine" : 60
      },
      "27" : {
        "Text" : "# unpackaged",
        "Line" : 69,
        "CharPositionInLine" : 43
      },
      "28" : {
        "Text" : "# unpackaged",
        "Line" : 75,
        "CharPositionInLine" : 54
      },
      "29" : {
        "Text" : "# unpackaged",
        "Line" : 95,
        "CharPositionInLine" : 49
      },
      "30" : {
        "Text" : "# //examples/kuka_iiwa_arm:iiwa_common (indirectly)\n# //examples/kuka_iiwa_arm:iiwa_lcm (indirectly)",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "tools/lint/bazel_lint.bzl" : {
      "ObjectId" : "adbb2248c8714f9918a8f66bd398da7370d49309",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n# Internal helper; set up test given name and list of files. Will do nothing\n# if no files given.",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "\"\"\"\n    Runs the ``bzlcodestyle`` code style checker on all Bazel files in the\n    current directory. The tool is based on the ``pycodestyle`` :pep:`8` code\n    style checker, but always disables certain checks while adding others.\n\n    Args:\n        name: Name prefix of the test (default = \"bazel\").\n        ignore: List of errors (as integers, without the 'E') to ignore\n            (default = [265, 302, 305]).\n        extra_srcs: List of files to lint that would otherwise be missed by the\n            default glob pattern for Bazel source code.\n        exclude: List to be passed to the skylark glob function for files that\n            should not be linted (e.g., vendored files).\n\n    Example:\n        BUILD:\n            load(\"//tools/lint:bazel_lint.bzl\", \"bazel_lint\")\n\n            bazel_lint()\n    \"\"\"",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This this serves as the original of \"bazel_lint_files\" in\n# `_patterns_map` in `//tools/external_data:expose_all_files.bzl`.",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "tools/lint/cpplint.bzl" : {
      "ObjectId" : "ced2eb2bdd1c1c23db6d1b6e133a91bf88caaa3c",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# From https://bazel.build/versions/master/docs/be/c-cpp.html#cc_library.srcs",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"\n.c\n.cc\n.cpp\n.cxx\n.c++.C\n.h\n.hh\n.hpp\n.hxx\n.inc\n\"\"\"",
        "Line" : 6,
        "CharPositionInLine" : 51
      },
      "3" : {
        "Text" : "# Do not lint generated protocol buffer files.",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The cpplint.py command-line argument so it doesn't skip our files!",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "\"\"\"Convert a srcs= or hdrs= value to its set of labels.\"\"\"",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Tuples are already labels.",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# The select() syntax returns an object we (apparently) can't inspect.\n# TODO(jwnimmer-tri) Figure out how to cpplint these files.  For now,\n# folks will have to pass extra_srcs when calling cpplint() macro.",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Common attributes for all of our py_test invocations.",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# For cpplint, require a top-level config file.  By default, also apply\n# configs from the current directory and test sub-directory when present.\n# Note that this purposefully uses the _invoking workspace's_ top-level\n# config file (`//:CPPLINT.cfg`), not Drake's `@drake//:CPPLINT.cfg`.\n# (Projects that want their own config can place a CPPLINT.cfg in their\n# root package.  Projects that want to use exactly the Drake defaults can\n# alias Drake's config file into their top-level BUILD.bazel file.)",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Google cpplint.",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Additional Drake lint.",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Possibly clang-format idempotence.",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"For every rule in the BUILD file so far, adds a test rule that runs\n    cpplint over the C++ sources listed in that rule.  Thus, BUILD file authors\n    should call this function at the *end* of every C++-related BUILD file.\n\n    By default, only the CPPLINT.cfg from the project root and the current\n    directory are used.  Additional configs can be passed in as data labels.\n\n    Sources that are not discoverable through the \"sources so far\" heuristic\n    can be passed in as extra_srcs=[].\n\n    The existing_rules may supply the native.existing_result().values(), in\n    case it has already been computed.  When not supplied, the value will be\n    internally (re-)computed.\n\n    \"\"\"",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Disable linting when requested (e.g., for generated code).",
        "Line" : 135,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# Extract the list of C++ source code labels and convert to filenames.",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Run the cpplint checker as a unit test.",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Lint all of the extra_srcs separately in a single rule.",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "tools/lint/install_lint.bzl" : {
      "ObjectId" : "43dcd4b41a95d20db32d160d8ab84cab7ba4e295",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Within the current package, checks that any install rules are\n    depended-on by Drake's master //:install rule.\n    \"\"\"",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# e.g., \"//systems/framework\"",
        "Line" : 12,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "# For each rule tagged as \"install\", find a dependency chain from\n# //:install that reaches it. When there is no such chain, it is likely\n# that the developer forgot to list their package in the install.",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Don't lint a self-loop.",
        "Line" : 28,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Report all of the install_lint results.",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tools/lint/library_lint.bzl" : {
      "ObjectId" : "b9ec4d55d3f3207d3a6c25fa50ea49df19e2edc5",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep this constant in sync with library_lint_reporter.py.",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"Within the current package, checks that drake_cc_package_library has been\n    used correctly, reports a lint (test) error if not.  (To understand proper\n    use of drake_cc_package_library, consult its API documentation.)\n\n    Note that //examples/... packages are excluded from some checks, because\n    they should generally not use drake_cc_package_library.\n    \"\"\"",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# e.g., \"//systems/framework\"",
        "Line" : 19,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : "# e.g., \"framework\"",
        "Line" : 20,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : "# We use a python helper script to report lint errors.  As we find possible\n# lint problems, we will append arguments here that will be passed along to\n# the helper.",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Within the current package, find all cc_library rules, and the (at most)\n# one package_library rule.",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# We only want cc_library.",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Ignore magic private libraries.",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Found a cc_library.",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Is it a package_library?",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Failure to use drake_cc_package_library is a lint error, except\n# in examples folders because their libraryes are never installed.",
        "Line" : 52,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# If there is no C++ code in this package, then we're done.",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Sanity check the package_library_rule name.",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Unless the package_library rule exists and is testonly, then we should\n# exclude testonly cc_library targets from the scope we're going to insist\n# that it covers.",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# We are going to run genquery over all of this package's cc_library rules.",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# This expression computes the exact result for what we want the deps of\n# the drake_cc_package_library to be.",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Start with all this package's cc_library rules.",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Remove items that have opted-out of the package_library.",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Maybe remove libraries tagged testonly = 1.",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Find libraries that are deps of the package_library but shouldn't be.",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# This is fine (it's a dependency of our copt select() statement).",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Find libraries that should be deps of the package_library but aren't.\n# Note that our library_lint_reporter.py tool filters out some false\n# positives from this report.",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# If there was a package_library rule, ensure its deps are comprehensive.",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Report all of the library_lint results.",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "tools/lint/lint.bzl" : {
      "ObjectId" : "bae45da65c72007722012841cdb435c0f64dbc93",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"For every rule in the BUILD file so far, and for all Bazel files in this\n    directory, adds test rules that run Drake's standard lint suite over the\n    sources.  Thus, BUILD file authors should call this function at the *end*\n    of every BUILD file.\n\n    Refer to the specific linters for their semantics and argument details:\n    - bazel_lint.bzl\n    - cpplint.bzl\n    - python_lint.bzl\n\n    \"\"\"",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/lint/python_lint.bzl" : {
      "ObjectId" : "94a801b148a3ce518a7b0c64ae66ce9c4962bc43",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N.B. Copied from `DEFAULT_IGNORE` in `pycodestyle.py`.",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal helper.",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pycodestyle.",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Additional Drake lint.",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"Runs the pycodestyle PEP 8 code style checker on all Python source files\n    declared in rules in a BUILD file.  Also runs the drakelint.py linter.\n\n    Args:\n        existing_rules: The value of native.existing_result().values(), in case\n            it has already been computed.  When not supplied, the value will be\n            internally (re-)computed.\n        ignore: List of errors to ingore, in addition to\n            PYTHON_LINT_IGNORE_DEFAULT (as strings, with the 'E' or 'W').\n        exclude: List of labels to exclude from linting, e.g., [:foo.py].\n        extra_srcs: Source files that are not discoverable via rules.\n\n    Example:\n        BUILD:\n            load(\"//tools/lint:python_lint.bzl\", \"python_lint\")\n\n            py_library(\n                name = \"foo\",\n                srcs = [\"foo.py\"],\n            )\n\n            python_lint()\n    \"\"\"",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Disable linting when requested (e.g., for generated code).",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Extract the list of python sources.",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# The select() syntax returns an object we (apparently) can't\n# inspect.  TODO(jwnimmer-tri) Figure out how to lint these files.",
        "Line" : 86,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Add a lint test if necessary.",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "tools/skylark/alias.bzl" : {
      "ObjectId" : "f022c36cb3b48b663b854cba4957bae3804b750c",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Merge the relative_labels= and relative_labels_map= arguments as seen in\n# the public macros below.  The result is a map where the arg_list items\n# are twinned into matching key:key pairs, union'd with the arg_map.  (Also\n# double-checks that the keys and values are all relative labels.)",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "\"\"\"Generates a drake_cc_library filled with generated header files that\n    merely include other header files, optionally with a deprecation warning.\n    This automates the chore of adding compatibility headers when packages\n    move.\n\n    The relative_labels + relative_labels_map.keys() specify the header\n    filenames to generate.  For each label name ':foo', this macro generates a\n    header named 'foo.h' that includes 'drake/{actual_subdir}/{new_foo}.h'\n    where new_foo for relative_labels is the same as foo, and new_foo for\n    relative_labels_map is the value for the foo key (without the leading\n    colon).\n\n    When add_deprecation_warning is true, the generated header will have a\n    #warning directive explaining the new location.\n    \"\"\"",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Generate one header file for each mapped label.",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Place all of the header files into a library.",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"Generates aliases for drake_cc_library labels that have moved into a new\n    package.  This is superior to native.alias() both for its brevity (it can\n    generate many aliases at once), and because the deprecation message\n    actually works (see https://github.com/bazelbuild/bazel/issues/5802).\n\n    The relative_labels + relative_labels_map specify the correspondence.  For\n    each label name foo in the relative_labels and relative_labels_map.keys(),\n    this macro generates an alias to '//{actual_subdir}:{new_foo}' where\n    new_foo for relative_labels is the same as foo, and new_foo for\n    relative_labels_map is the value for the foo key.\n\n    When add_deprecation_warning is true, the generated label in this package\n    will have a deprecation warning explaining the new location.  When using\n    this mode, the caller should probably set 'tags = [\"manual\"]' to avoid\n    spurious warnings during 'bazel build //...'.\n    \"\"\"",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "r'''\"\"\"\nWarning:\n    This module is an alias that will soon be deprecated.\n    Please use ``{module}`` instead.\n\"\"\"\nfrom {module} import *\n'''",
        "Line" : 126,
        "CharPositionInLine" : 30
      },
      "7" : {
        "Text" : "r'''\"\"\"\nWarning:\n    This module is deprecated and will be removed on or around\n    {deprecation_removal_date}. Please use ``{module}`` instead.\n\"\"\"\nfrom pydrake.common.deprecation import _warn_deprecated\nfrom {module} import *\n\n_warn_deprecated(\n    \"This module is deprecated and will be removed on or around \"\n    \"{deprecation_removal_date}. Please use '{module}' instead.\")\n'''",
        "Line" : 134,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 8
    },
    "tools/skylark/drake_cc.bzl" : {
      "ObjectId" : "5d9755ae625c1c170a8c92687ff2309e69832b6a",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep CXX_FLAGS, CLANG_FLAGS, and GCC_FLAGS in sync with CMAKE_CXX_FLAGS in\n# matlab/cmake/flags.cmake.",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The CXX_FLAGS will be enabled for all C++ rules in the project\n# building with any compiler.",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The CLANG_FLAGS will be enabled for all C++ rules in the project when\n# building with clang (including the Apple LLVM compiler).",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The GCC_FLAGS will be enabled for all C++ rules in the project when\n# building with gcc.",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO(jwnimmer-tri) Fix these warnings and remove this suppression.",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# The GCC_CC_TEST_FLAGS will be enabled for all cc_test rules in the project\n# when building with gcc.",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "\"\"\"Returns both the rule_copts (plus rule_{cc}_copts iff under the\n    specified compiler), and platform-specific copts.\n\n    When cc_test=1, the GCC_CC_TEST_FLAGS will be added.  It should only be set\n    to 1 from cc_test rules or rules that are boil down to cc_test rules.\n    \"\"\"",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "\"\"\"Returns the command to produce .dSYM on macOS, or a no-op on Linux.\"\"\"",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "\"\"\"Report an error if a library should not use something from deps.\"\"\"",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We can't handle select() yet.\n# TODO(jwnimmer-tri) We should handle select.",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "\"\"\"Returns (new_srcs, private_hdrs), where .h files have been split out of\n    srcs into private_hdrs, leaving new_srcs remaining.\n    \"\"\"",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# We can't handle select() yet.\n# TODO(jwnimmer-tri) We should handle select.",
        "Line" : 101,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "\"\"\"Convert a cc_library label to a DrakeCc provider label.  Given a label\n    `dep` for a cc_library, such as would be found in the the `deps = []` of\n    some cc_library, returns the corresponding label for the matching DrakeCc\n    provider associated with that library.  The returned label is appropriate\n    to use in the deps of of a `drake_installed_headers()` rule.\n\n    Once our rules are better able to call native rules like native.cc_binary,\n    instead of having two labels we would prefer to tack a DrakeCc provider\n    onto the cc_library target directly.\n\n    Related links from upstream:\n    https://github.com/bazelbuild/bazel/issues/2163\n    https://docs.bazel.build/versions/master/skylark/cookbook.html#macro-multiple-rules\n    \"\"\"",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# The label is already fully spelled out; just tack on our suffix.",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# The label is the form //foo/bar which means //foo/bar:bar.",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "\"\"\"Filters `deps` to find drake labels (i.e., discard third_party labels),\n    and then maps `installed_headers_for_dep()` over that list of drake deps.\n\n    (Absolute paths to Drake's lcmtypes headers are also filtered out, because\n    LCM headers follow a different #include convention, and so are installed\n    separately.  Refer to drake/lcmtypes/BUILD.bazel for details.  Note that\n    within-package paths are left unchanged, so that this macro can still be\n    used within Drake's lcmtypes folder.)\n\n    This is useful for computing the deps of a `drake_installed_headers()` rule\n    from the deps of a `cc_library()` rule.\n    \"\"\"",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# We can't handle select() yet.\n# TODO(jwnimmer-tri) We should handle select.",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# A provider to collect Drake metadata about C++ rules.  For background, see\n# https://docs.bazel.build/versions/master/skylark/rules.html#providers.",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "\"\"\"Declares a rule to provide DrakeCc information about headers that should be\ninstalled.  We use this instead of the built-in `cc` provider so that we can\nadjust and filter what is going to be installed, versus everything that is\nrequired to compile.\n\"\"\"",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Ignore some leading path elements.  These will happen if Drake is\n# consumed as an external.",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Returns true iff `path` is consistent with the given `only...` and\n# `never...` prefixes.  Omitting either or both of the `...startswith`\n# arguments is treated as a pass (true) by default.",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Transitively list all headers.",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Filter in/out items matching a prefix.",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "\"\"\"Declare a filegroup that contains the transtive installed hdrs of the\n    targets named by `deps`.\n    \"\"\"",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Cannot list any headers here.",
        "Line" : 278,
        "CharPositionInLine" : 20
      },
      "26" : {
        "Text" : "\"\"\"Creates a rule to declare a C++ library.  Uses Drake's include_prefix and\n    checks the deps blacklist.  If declare_installed_headers is true, also adds\n    a drake_installed_headers() target.  (This should be set if and only if the\n    caller is drake_cc_library.)\n    \"\"\"",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Require include paths like \"drake/foo/bar.h\", not \"foo/bar.h\".",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "\"\"\"Given some srcs, prunes any header files into a separate cc_library, and\n    appends that new library to deps, returning new_srcs (sans headers) and\n    new_deps.  The separate cc_library is private with linkstatic = 1.\n\n    We use this helper in all drake_cc_{library,binary,test) because when we\n    want to fiddle with include paths, we *must* have all header files listed\n    as hdrs; the include_prefix does not apply to srcs.\n    \"\"\"",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "\"\"\"Creates a rule to declare a C++ library.\n\n    By default, we produce only static libraries, to reduce compilation time\n    on all platforms, and to avoid mysterious dyld errors on OS X. This default\n    could be revisited if binary size becomes a concern.\n\n    The deps= of a drake_cc_library must either be another drake_cc_library, or\n    be named like \"@something//etc...\" (i.e., come from the workspace, not part\n    of Drake).  In other words, all of Drake's C++ libraries must be declared\n    using the drake_cc_library macro.\n    \"\"\"",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# We install private_hdrs by default, because Bazel's visibility denotes\n# whether headers can be *directly* included when using cc_library; it does\n# not precisely relate to which headers should appear in the install tree.\n# For example, common/symbolic.h is the only public-visibility header for\n# its cc_library, but we also need to install all of its child headers that\n# it includes, such as common/symbolic_expression.h.",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Assert that :name is the default library for native.package_name().",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "\"\"\"Creates a rule to declare a C++ \"package\" library -- a library whose\n    name matches the current Bazel package name (i.e., directory name) and\n    whose dependencies are (usually) all of the other drake_cc_library targets\n    in the current package.  In short, e.g., creates a library named\n    //foo/bar:bar that conveniently provides all of the C++ code from the\n    //foo/bar package in one place.\n\n    Using this macro documents the intent that the library is a summation of\n    everything in the current package and enables Drake's linter rules to\n    confirm that all of the drake_cc_library targets have been listed as deps.\n\n    Within Drake, by convention, every package (i.e., directory) that has any\n    C++ code should call this macro to create a library for its package.\n\n    The name must be the same as the final element of the current package.\n    This rule does not accept srcs, hdrs, etc. -- only deps.\n    The testonly argument has the same meaning as the native cc_library.\n    By default, this target has public visibility, but that may be overridden.\n    \"\"\"",
        "Line" : 412,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "\"\"\"Creates a rule to declare a C++ binary.\n\n    By default, we prefer to link static libraries whenever they are available.\n    This default could be revisited if binary size becomes a concern.\n\n    If you wish to create a smoke-test demonstrating that your binary runs\n    without crashing, supply add_test_rule=1. Note that if you wish to do\n    this, you should consider suppressing that urge, and instead writing real\n    tests. The smoke-test will be named <name>_test. You may override cc_test\n    defaults using test_rule_args=[\"-f\", \"--bar=42\"] or test_rule_size=\"baz\".\n    \"\"\"",
        "Line" : 459,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# On Linux, we need to disable \"new\" dtags in the linker so that we use\n# RPATH instead of RUNPATH.  When doing runtime linking, RPATH is\n# checked *before* LD_LIBRARY_PATH, which is important to avoid using\n# the MATLAB versions of certain libraries (protobuf).  macOS doesn't\n# understand this flag, so it is conditional on Linux only.  Note that\n# the string we use for rpath here doesn't actually matter; it will be\n# replaced during installation later.",
        "Line" : 480,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Also generate the OS X debug symbol file for this binary.",
        "Line" : 509,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "\"\"\"Creates a rule to declare a C++ unit test.  Note that for almost all\n    cases, drake_cc_googletest should be used, instead of this rule.\n\n    By default, sets size=\"small\" because that indicates a unit test.\n    By default, sets name=\"test/${name}.cc\" per Drake's filename convention.\n    Unconditionally forces testonly=1.\n\n    If disable_in_compilation_mode_dbg is True, the srcs will be suppressed\n    in debug-mode builds, so the test will trivially pass. This option should\n    be used only rarely, and the reason should always be documented.\n    \"\"\"",
        "Line" : 552,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Remove the test declarations from the test in debug mode.\n# TODO(david-german-tri): Actually suppress the test rule.",
        "Line" : 577,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Also generate the OS X debug symbol file for this test.",
        "Line" : 592,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "\"\"\"Creates a rule to declare a C++ unit test using googletest.\n\n    By default, sets size=\"small\" because that indicates a unit test.\n    By default, sets name=\"test/${name}.cc\" per Drake's filename convention.\n    By default, sets use_default_main=True to use a default main() function.\n    Otherwise, it will depend on @gtest//:without_main.\n\n    If disable_in_compilation_mode_dbg is True, the srcs will be suppressed\n    in debug-mode builds, so the test will trivially pass. This option should\n    be used only rarely, and the reason should always be documented.\n    \"\"\"",
        "Line" : 609,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 40
    },
    "tools/skylark/drake_java.bzl" : {
      "ObjectId" : "8442c95053f8252f214cc7a30843d70b92649011",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a launcher file to run installed java binaries",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"Generate a launcher for java binary files.\n\"\"\"",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "\"\"\"Creates a rule to declare a java binary and a MainClassInfo Provider\n\n    The native java_binary creates a java launcher (shell script) that works in\n    the build tree. However, a different launcher needs to be created to run\n    the java binary in the install tree. This function creates a target\n    `${name}-launcher` which contains a MainClassInfo provider. That provider\n    will be used by the installer (install.bzl) to configure the installation\n    script to generate a launcher script called `${name}-launcher.sh` at\n    install time. That launcher can be renamed at install time to match the\n    name of the java binary\".\n    \"\"\"",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/skylark/drake_lcm.bzl" : {
      "ObjectId" : "e0cc1e84a5fe573ac643e475bfb531bd5fc4f9da",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\"\"\"",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Drake's *.lcm files all live in our //drake/lcmtypes package.  Per LCM\n# upstream convention, the include directory for generated code should\n# always look like \"my_lcm_package/my_lcm_struct.h\", but by default Bazel\n# would provide \"drake/lcmtypes/my_lcm_package/my_lcm_struct.h\" as an\n# allowed spelling.  Here, we override that to enforce that Drake's include\n# statements use the standard formulation.  (We allow callers to override\n# our enforcement though, such as for special-case testing.)",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\"\"\"",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\"\"\"",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "tools/skylark/drake_proto.bzl" : {
      "ObjectId" : "8b4b0e1333e99b01fee4500f66480563032e4dd5",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\"\"\"",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Generate the h and cc file.",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Apply ubsan fixups.",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Compile the cc files.",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\"\"\"",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tools/skylark/drake_py.bzl" : {
      "ObjectId" : "5a5cf5e9e332f40c777f6e920d3ce8b48d6058d1",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\"\"\"",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Work around https://github.com/bazelbuild/bazel/issues/1567.",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"#!/bin/bash\necho \"ERROR: Please use '{good_target}'; the label '{bad_target}'\" \\\n     \"has been removed.\" >&2\nexit 1\n\"\"\"",
        "Line" : 22,
        "CharPositionInLine" : 14
      },
      "4" : {
        "Text" : "# Defines a test which will fail when run via `bazel run` or `bazel test`,\n# pointing the user to the correct binary to use. This should typically have\n# a \"manual\" tag.",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# See #8041 for more details.\n# TODO(eric.cousineau): See if we can remove these shims once we stop\n# supporting Python 2 (#10606).",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Do not isolate targets that are already isolated. This generally happens\n# when linting tests (which are isolated) are invoked for isolated Python\n# targets. Without this check, the actual test turns into\n# `py/py/{name}`.",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Preserve original functionality.",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Disable and redirect original name.",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# N.B. We make the disabled rule a test, even if the original was not.\n# This ensures that developers will see the redirect using both\n# `bazel run` or `bazel test`.",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\n\n    @param isolate (optional, default is False)\n        If True, the binary will be placed in a folder isolated from the\n        library code. This prevents submodules from leaking in as top-level\n        submodules. For more detail, see #8041.\n    \"\"\"",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Work around https://github.com/bazelbuild/bazel/issues/1567.",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# N.B. Same as the warning in `drake_pybind_cc_googletest`: numpy\n# imports unittest unconditionally.",
        "Line" : 155,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "\"\"\"Declares a `unittest`-based python test.\n\n    This macro should be preferred instead of the basic drake_py_test for tests\n    that use the `unittest` framework.  Tests that use this macro should *not*\n    contain a __main__ handler nor a shebang line.  By default, sets test size\n    to \"small\" to indicate a unit test.\n    \"\"\"",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "\"\"\"A wrapper to insert Drake-specific customizations.\n\n    @param isolate (optional, default is True)\n        If True, the test binary will be placed in a folder isolated from the\n        library code. This prevents submodules from leaking in as top-level\n        submodules. For more detail, see #8041.\n\n    @param allow_import_unittest (optional, default is False)\n        If False, this test (and anything it imports) is prevented from doing\n        `import unittest`.  This is a guard against writing `unittest`-based\n        cases that accidentally never get run.  In general, `unittest`-based\n        tests should use the `drake_py_unittest` macro instead of this one\n        (thus disabling this interlock), but can override this parameter in\n        case something unique is happening and the other macro can't be used.\n\n    By default, sets test size to \"small\" to indicate a unit test. Adds the tag\n    \"py\" if not already present.\n    \"\"\"",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Work around https://github.com/bazelbuild/bazel/issues/1567.",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "\"\"\"Provides a directory-isolated Python test, robust against shadowing\n    (#8041).\n    \"\"\"",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "tools/skylark/drake_runfiles_binary.bzl" : {
      "ObjectId" : "368f6bff2d0d96f3b0eb9d656ee694efac7c3acc",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# See doc below for `drake_runfiles_binary`.\n# Using `$(location ...)` expansion for generated scripts gives crappy\n# non-runfiles-friendly paths.\n# `short_path` semi-solves it, but for externals, sometimes resolves to\n# `../*` instead of `external/*`",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "\"\"\"#!/bin/bash\nset -e -u\n# Ensure we have the correct runfiles directory.\nrunfiles_suffix=\".runfiles/{workspace_name}\"\nrunfiles_dir=\"${{PWD}}\"\nif [[ \"${{runfiles_dir}}\" != *${{runfiles_suffix}} ]]; then\n    script_path=\"$(cd $(dirname \"$0\") && pwd)/$(basename \"$0\")\"\n    runfiles_dir=\"${{script_path}}${{runfiles_suffix}}\"\n    if [[ ! -d \"${{runfiles_dir}}\" ]]; then\n        echo \"Runfiles not found: ${{runfiles_dir}}\" >&2\n        exit 1\n    fi\nfi\n\n# Invoke downstream target, letting it be aware of runfiles.\nexport DRAKE_BAZEL_RUNFILES=\"${{runfiles_dir}}\"\ntarget_path=\"${{runfiles_dir}}/{target_relpath}\"\nexec \"${{target_path}}\" \"$@\"\n\"\"\"",
        "Line" : 16,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# Inherit `target`s runfiles.",
        "Line" : 42,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "\"\"\"\nEnables a script to be run via `bazel run` or `bazel-bin` by ensuring that it\nis aware of runfiles by the environment variable `DRAKE_BAZEL_RUNFILES`.\n\"\"\"",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/skylark/pathutils.bzl" : {
      "ObjectId" : "fcf3c88d883688e4d0034e2c37bb2666e2efdea6",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "#==============================================================================\n#BEGIN internal helpers",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n# Remove prefix from path.",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the prefix has more parts than the path, failure is certain.",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Iterate over components to determine if a match exists.",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ignore trailing empty element (happens if prefix string ends with \"/\").",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If the prefix has more parts than the path, failure is certain. (We also\n# need at least one component of the path left over so the stripped path is\n# not empty.)",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Iterate over components to determine if a match exists.",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Same path components match.",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Single-glob matches any (one) path component.",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Mulit-glob matches one or more components.",
        "Line" : 43,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# If multi-glob is at the end of the prefix, return the last path\n# component.",
        "Line" : 45,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Otherwise, the most components the multi-glob can match is the\n# remaining components (len(prefix) - n - 1; the 1 is the current\n# prefix component) less one (since we need to keep at least one\n# component of the path).",
        "Line" : 50,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Try to complete the match, iterating (backwards) over the number\n# of components that the multi-glob might match.",
        "Line" : 56,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Multi-glob failed to match.",
        "Line" : 63,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Components did not match.",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "\"\"\"Remove prefix from path.\n\n    This attempts to remove the specified prefix from the specified path. The\n    prefix may contain the globs ``*`` or ``**``, which match one or many\n    path components, respectively. Matching is greedy. Globs may only be\n    matched against complete path components (e.g. ``a/*/`` is okay, but\n    ``a*/`` is not treated as a glob and will be matched literally). Due to\n    Skylark limitations, at most one ``**`` may be matched.\n\n    Args:\n        path (:obj:`str`) The path to modify.\n        prefix (:obj:`str`) The prefix to remove.\n\n    Returns:\n        :obj:`str`: The path with the prefix removed if successful, or None if\n        the prefix does not match the path.\n    \"\"\"",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#END internal helpers\n#==============================================================================\n#BEGIN macros",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "\"\"\"Return the file name portion of a file path.\"\"\"",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "\"\"\"Return the directory portion of a file path.\"\"\"",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "\"\"\"Join paths without duplicating separators.\n\n    This is roughly equivalent to Python's `os.path.join`.\n\n    Args:\n        \\*args (:obj:`list` of :obj:`str`): Path components to be joined.\n\n    Returns:\n        :obj:`str`: The concatenation of the input path components.\n    \"\"\"",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#------------------------------------------------------------------------------",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "\"\"\"Compute \"output path\".\n\n    This computes the adjusted output path for an input file. Specifically, it\n    a) determines the path relative to the invoking context (which is usually,\n    but not always, the same as the path as specified by the user when the file\n    was mentioned in a rule), without Bazel's various possible extras, and b)\n    optionally removes prefixes from this path. When removing prefixes, the\n    first matching prefix is removed.\n\n    This is used primarily to compute the output install path, without the\n    leading install prefix, for install actions.\n\n    For example::\n\n        install_files(\n            dest = \"docs\",\n            files = [\"foo/bar.txt\"],\n            strip_prefix = [\"foo/\"],\n            ...)\n\n    The :obj:`File`'s path components will have various Bazel bits added. Our\n    first step is to recover the input path, ``foo/bar.txt``. Then we remove\n    the prefix ``foo``, giving a path of ``bar.txt``, which will become\n    ``docs/bar.txt`` when the install destination is added.\n\n    The input file must belong to the current package; otherwise, ``None`` is\n    returned.\n\n    Args:\n        input_file (:obj:`File`): Artifact to be installed.\n        strip_prefix (:obj:`list` of :obj:`str`): List of prefixes to strip\n            from the input path before prepending the destination.\n\n    Returns:\n        :obj:`str`: The install destination path for the file.\n    \"\"\"",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Determine base path of invoking context.",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Determine effective path by removing path of invoking context and any\n# Bazel output-files path.",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Deal with possible case of file outside the package root.",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Possibly remove prefixes.",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "#END macros",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "tools/skylark/pybind.bzl" : {
      "ObjectId" : "2e6873d71a6a53a45ef1204ba9b80dbd9576e237",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# @see bazelbuild/bazel#3493 for needing `@drake//` when loading `install`.",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"Declares a pybind11 Python library with C++ and Python portions.\n\n    @param cc_srcs\n        C++ source files.\n    @param cc_deps (optional)\n        C++ dependencies.\n        At present, these should be libraries that will not cause ODR\n        conflicts (generally, header-only).\n    @param cc_so_name (optional)\n        Shared object name. By default, this is `${name}`, so that the C++\n        code can be then imported in a more controlled fashion in Python.\n        If overridden, this could be the public interface exposed to the user.\n    @param py_srcs (optional)\n        Python sources.\n    @param py_deps (optional)\n        Python dependencies.\n    @param py_imports (optional)\n        Additional Python import directories.\n    @return struct(cc_so_target = ..., py_target = ...)\n    \"\"\"",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# TODO(eric.cousineau): See if we can keep non-`*.so` target name, but\n# output a *.so, so that the target name is similar to what is provided.",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add C++ shared library.",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This is how you tell Bazel to create a shared library.",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# GCC and Clang don't always agree / succeed when inferring storage\n# duration (#9600). Workaround it for now.",
        "Line" : 63,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Always link to pybind11.",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Add Python library.",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# TODO(eric.cousineau): Consider making a `PybindProvider`, to sort\n# out dependencies, sources, etc, and simplify installation\n# dependencies.",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(eric.cousineau): Rename `drake_pybind_library` to\n# `drake_pybind_py_library`.",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "\"\"\"Declares a pybind11 library with C++ and Python portions.\n\n    For parameters `cc_srcs`, `py_srcs`, `py_deps`, `py_imports`, please refer\n    to `pybind_py_library`.\n\n    @param cc_deps (optional)\n        C++ dependencies.\n        At present, these should be libraries that will not cause ODR\n        conflicts (generally, header-only).\n        By default, this includes `pydrake_pybind` and\n        `//:drake_shared_library`.\n    @param cc_so_name (optional)\n        Shared object name. By default, this is `${name}` (without the `_py`\n        suffix if it's present).\n    @param package_info\n        This should be the result of `get_pybind_package_info` called from the\n        current package. This dictates how `PYTHONPATH` is configured, and\n        where the modules will be installed.\n    @param add_install (optional)\n        Add install targets.\n    \"\"\"",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add installation target for C++ and Python bits.",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"Gets install targets for Python targets / packages that have a sibling\n    install target.\n\n    @note This does not check the targets for correctness.\n    \"\"\"",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Gets the install target for a Python target that has a sibling install\n# target.",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Append suffix to target.",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Assume that the package has an \":install\" target.",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "\"\"\"Gets a package's path relative to a base package, and the sub-package\n    name (for installation).\n\n    @param base_package\n        Base package, which should be on `PYTHONPATH`.\n    @param sub_package\n        Package of interest. If `None`, will resolve to the calling package.\n    @return struct(\n        py_imports,  # Directories to add to `PYTHONPATH` with `py_library`.\n        py_dest)  # Installation directory for use with `install()`.\n    \"\"\"",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Use relative package path, as `py_library` does not like absolute package\n# paths.",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# TODO(eric.cousineau): Move this to `python.bzl` or somewhere more\n# general?",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# (forced line break)",
        "Line" : 218,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# Count the number of pieces.",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Make the number of parent directories.",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Base package's path relative to sub-package's path.",
        "Line" : 230,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# Sub-package's path relative to base package's path.",
        "Line" : 232,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "\"\"\"Defines a C++ test (using `pybind`) which has access to Python\n    libraries. \"\"\"",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Add 'manual', because we only want to run it with Python present.",
        "Line" : 258,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# Expose as library, to make it easier to expose Bazel environment for\n# external tools.",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Use this Python test as the glue for Bazel to expose the appropriate\n# environment for the C++ binary.",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# The C++ test isn't going to `import unittest`, but test dependencies\n# such as numpy(!!) do so unconditionally.  We should allow that.",
        "Line" : 286,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Note that target.cc.compile_flags does not include copts added\n# to the target or on the command line (including via rc file).",
        "Line" : 297,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# Find all headers provided by the drake_cc_package_library,\n# i.e., the set of transitively-available headers that exist in\n# the same Bazel package as the target.",
        "Line" : 305,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# noqa",
        "Line" : 312,
        "CharPositionInLine" : 92
      },
      "33" : {
        "Text" : "# Replace with ctx.fragments.cpp.cxxopts in Bazel 0.17+.",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Generates a header that defines variables containing a representation of the\n# contents of Doxygen comments for each class, function, etc. in the\n# transitive headers of the given targets.\n# @param targets Targets with header files that should have documentation\n# strings generated.\n# @param root_name Name of the root struct in generated file.\n# @param exclude_hdr_patterns Headers whose symbols should be ignored. Can be\n# glob patterns.",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "tools/skylark/python_env.bzl" : {
      "ObjectId" : "14164210753caaafe33c59d7fd7ea8ca6d75d6cb",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In general, we do not want to use Python's \"user site-packages\"\n# (e.g., $HOME/.local) directory because it's not hermetic.  Thus,\n# we set PYTHONNOUSERSITE to disable the user site-packages.\n#\n# However, our macOS setup instructions provide for some dependencies\n# (e.g., PyYAML) to come from pip, and in some reasonable configurations it\n# could be done via `pip install --user` and so be part of $HOME.  Thus, in\n# order to support that configuration, we only set PYTHONNOUSERSITE under\n# linux.  We can revisit this decision if we changes how python packages on\n# macOS are brought into the workspace.\n#\n# If https://github.com/bazelbuild/bazel/issues/4939 gets fixed, we can\n# revisit whether manually specifying a hermetic env is still necessary.",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/skylark/test_tags.bzl" : {
      "ObjectId" : "e4d52d31c163f42c145aa3c693ec94e6fa671184",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These macros are intended to be used when declaring tests that either may-use\n# or must-use dependencies that have constraints (commercial licenses, or\n# peculiar behavior). For commercial dependnecies, these labels both account\n# for any license-related needs and provide a marker so that //tools/bazel.rc\n# can selectively enable tests based on the developer's chosen configuration.",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"Returns the test tags necessary for properly running Gurobi tests.\n\n    By default, sets gurobi_required=True, which will require that the supplied\n    tag filters include \"gurobi\".\n\n    Gurobi checks a license file outside the workspace so tests that use Gurobi\n    must have the tag \"no-sandbox\". For the moment, we also require the tag\n    \"exclusive\" to rate-limit license servers with a small number of licenses.\n    \"\"\"",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# TODO(david-german-tri): Find a better fix for the license server problem.",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# implies \"local\"",
        "Line" : 22,
        "CharPositionInLine" : 22
      },
      "5" : {
        "Text" : "\"\"\"Returns the test tags necessary for properly running MOSEK tests.\n\n    By default, sets mosek_required=True, which will require that the supplied\n    tag filters include \"mosek\".\n\n    MOSEK checks a license file outside the workspace, so tests that use MOSEK\n    must have the tag \"no-sandbox\".\n    \"\"\"",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "\"\"\"Returns test tags necessary for properly running VTK rendering tests\n    locally.\n    \"\"\"",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Disable under LeakSanitizer and Valgrind Memcheck due to\n# driver-related leaks. For more information, see #7520.",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Mitigates driver-related issues when running under `bazel test`. For\n# more information, see #7004.",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "tools/vector_gen/vector_gen.bzl" : {
      "ObjectId" : "2c9ea612be6b4c877416b6310b67706dc4b22aac",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When computing outs derived from srcs in a different package (i.e., when\n# srcs labels have a colon), we only want their package-relative stem (the\n# dirname and basename after the colon).",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "\"\"\"Return the list of output filenames.  The `kind` is one of \"vector\"\n    (foo.h, foo.cc), \"translator\" (foo_translator.h, foo_translator.cc),\n    or \"lcm\" (lcmt_foo_t.lcm).  For compatibility with past practice, C++\n    output will appear under a \"gen\" folder, but *.lcm output will not.\n    \"\"\"",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find and remove the dirname and extension shared by all srcs.\n# For srcs in the current directory, the dirname will be \".\".",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Compute outs based on kind.",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"The implementation actions to invoke vector_gen.\"\"\"",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create rule to invoke lcm_vector_gen on some `*.named_vector` srcs.",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "\"\"\"Given the *.named_vector files in `srcs`, declare a rule with the given\n    `name` to generate C++ header(s) and source(s) of BasicVector subclasses\n    for those `srcs`.  Returns a struct with fields `srcs`, `hdrs`, and `deps`\n    that are appropriate for use in a cc_library rule.\n\n    The drake_workspace_name is a required argument, and is used to formulate\n    the correct `result.deps`.  When this macro is called from within Drake,\n    the correct value is \"\"; when called from other workspaces, the correct\n    value is the name of Drake's workspace, such as \"@drake\".\n\n    This rule only generates C++ code -- it does not compile it; within Drake,\n    use the drake_cc_vector_gen_library rule below is likely a better choice.\n    It will both geneate and compile the code all in one rule.  This rule is\n    intended for use by external projects that do not want to use Drake's\n    cc_library defaults.\n    \"\"\"",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "\"\"\"Given the *.named_vector files in `srcs`, declare a drake_cc_library\n    with the given `name`, containing the generated BasicVector subclasses for\n    those `srcs`.  The `deps` are passed through to the declared library.\n    \"\"\"",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "\"\"\"Given the *.named_vector files in `srcs`, declare a drake_cc_library\n    with the given `name`, containing the generated LcmAndVectorBaseTranslator\n    subclasses for those `srcs`.  The `deps` are passed through to the declared\n    library, and must already contain (as supplied by our caller) a matching\n    drake_cc_vector_gen_library(...) label whose `srcs` are a superset of ours,\n    as well as a C++ library of generated LCM bindings for the LCM message(s).\n    \"\"\"",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "\"\"\"Given the *.named_vector files in `srcs`, generate matching LCM message\n    definition source files.  For a src named foo/bar.named_vector, the output\n    file will be named foo/lcmt_bar_t.lcm.\n    \"\"\"",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "tools/workspace/bazel_skylib/repository.bzl" : {
      "ObjectId" : "cd885d3bb8ba6515f549c52d63d525a7472e5b06",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 10,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/bitbucket.bzl" : {
      "ObjectId" : "c7cf208122eca7ae92d16a8d28844cd18f1b686b",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The github.bzl and bitbucket.bzl implementations are very similar.  Try to\n# keep the two files relatively well-synchronized -- or even better, rework\n# them to share code where doing so is an improvement.",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"A macro to be called in the WORKSPACE that adds an external from\n    bitbucket using a workspace rule.\n\n    Args:\n        name: required name is the rule name and so is used for @name//...\n            labels when referring to this archive from BUILD files.\n        repository: required Bitbucket repository name.\n        commit: required commit is the hash to download. (When a git project\n            is also a git submodule in CMake, this should be kept in sync with\n            the git submodule commit used there.) This can also be a tag.\n        sha256: required sha256 is the expected SHA-256 checksum of the\n            downloaded archive. When unsure, you can omit this argument (or\n            comment it out) and then the checksum-mismatch error message will\n            offer a suggestion.\n        strip_prefix: required strip prefix is the directory prefix to strip\n            from the extracted files.\n        build_file: optional build file is the BUILD file label to use for\n            building this external. When omitted, the BUILD file(s) within the\n            archive will be used.\n        mirrors: required mirrors is a dict from string to list-of-string with\n            key \"bitbucket\", where the list-of-strings are URLs to use,\n            formatted using {repository} and {commit} string substitutions.\n            The mirrors.bzl file in this directory provides a reasonable\n            default value.\n    \"\"\"",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# TODO(jwnimmer-tri) We should support local_repository_override here.",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# We delegate to a rule (not a macro) here so that we have more leeway in\n# the actions we can take (i.e., so we can do more than just a simple\n# download-and-extract).",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Helper stub to implement a repository_rule in terms of a setup() function.",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "\"\"\"This is a rule() formulation of the bitbucket_archive() macro.  It is\nidentical to the macro, but in rule form.  Consult the macro documentation for\nfull API details.\n\"\"\"",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "\"\"\"This is reusable formulation of the bitbucket_archive() macro.  It is\n    identical to the macro except that it returns a status struct, instead of\n    failing internally.  The result struct has a field `error` that will be\n    non-None iff there were any errors.  Consult the macro documentation for\n    additional API details.\n    \"\"\"",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Do the download step first.  (This also writes the metadata.)",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Optionally apply source patches, using Bazel's utility helper.  Here we\n# use getattr as a guard, in case the originating repository_rule didn't\n# want to declare attr support for the patchfile-related settings.",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We re-implement Bazel's workspace_and_buildfile utility, so that options\n# we don't care about (e.g., build_file_content) do not have to be declared\n# as attrs on our all of our own repository rules.",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "\"\"\"Download an archive of the provided Bitbucket repository and commit to\n    the output path and extract it.\n\n    Args:\n        repository_ctx: context of a Bazel repository rule.\n        repository: Bitbucket repository name.\n        commit: revision for which the archive should be downloaded.\n        mirrors: dictionary of mirrors, see mirrors.bzl in this directory for\n            an example.\n        output: path to the directory where the archive will be unpacked,\n            relative to the Bazel repository directory.\n        sha256: expected SHA-256 hash of the archive downloaded. Fallback to\n            an incorrect default value to prevent the hash check from being\n            disabled, but allow the first download attempt to fail and print\n            the correct SHA-256 hash.\n    \"\"\"",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Create a summary file for for Drake maintainers.",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"Fallback to an incorrect default value of SHA-256 hash to prevent the\n    hash check from being disabled, but allow the first download attempt of an\n    archive to fail and print the correct hash.\n\n    Args:\n        sha256: expected SHA-256 hash of the archive to be downloaded.\n    \"\"\"",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "\"\"\"Compute the urls from which an archive of the provided Bitbucket\n    repository and commit may be downloaded.\n\n     Args:\n        repository: Bitbucket repository name.\n        commit: revision for which the archive should be downloaded.\n        mirrors: dictionary of mirrors, see mirrors.bzl in this directory for\n            an example.\n    \"\"\"",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "tools/workspace/blas/repository.bzl" : {
      "ObjectId" : "a417403c8b8a55d7b775b88f357cad577ddbcee3",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Ubuntu, we'll use use pkg-config to find libblas.\n# On macOS, no targets should depend on @blas.",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# TODO(jamiesnape): Pass down licenses to setup_pkg_config_repository.\n# The license for this package should be:\n#    licenses([\"notice\"])  # BSD-3-Clause",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tools/workspace/boost/repository.bzl" : {
      "ObjectId" : "cde6dc88d086fbd329b033acfb5f0bc067bcfdde",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes Boost headers available to be used as a C/C++ dependency.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/boost:repository.bzl\", \"boost_repository\")  # noqa\n        boost_repository(name = \"foo\")\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:boost_headers\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by boost_repository()\n\nlicenses([\"notice\"])  # BSL-1.0\n\ncc_library(\n    name = \"boost_headers\",\n    hdrs = glob({}),\n    includes = [\".\"],\n    visibility = [\"//visibility:public\"],\n)\n    \"\"\"",
        "Line" : 46,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 3
    },
    "tools/workspace/buildifier/repository.bzl" : {
      "ObjectId" : "a1d2e45e23e6c9458e5c8c816bfe6ee3e92fdc0f",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nDownloads a precompiled version of buildifier and makes it available to the\nWORKSPACE.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace:mirrors.bzl\", \"DEFAULT_MIRRORS\")\n        load(\"@drake//tools/workspace/buildifier:repository.bzl\", \"buildifier_repository\")  # noqa\n        buildifier_repository(name = \"foo\", mirrors = DEFAULT_MIRRORS)\n\n    BUILD:\n        sh_binary(\n            name = \"foobar\",\n            srcs = [\"bar.sh\"],\n            data = [\"@foo//:buildifier\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 37,
        "CharPositionInLine" : 85
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 40,
        "CharPositionInLine" : 85
      },
      "4" : {
        "Text" : "\"\"\"# -*- python -*-\n\nlicenses([\"notice\"])  # Apache-2.0\n\nexports_files(\n    [\"buildifier\"],\n)\n\"\"\"",
        "Line" : 52,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 5
    },
    "tools/workspace/bullet/repository.bzl" : {
      "ObjectId" : "58ab72e6b602397b34e889720d25d466aabb7a1a",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/cc/repository.bzl" : {
      "ObjectId" : "59d49404f186eebbd5eb341b8e00e2d195737c17",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nIdentifies the C/C++ compiler by examining the presence or values of various\npredefined C preprocessor macros. Identifies any compiler capable of compiling\nC++ code that is supported by CMake 3.12.0.\n\nNote that there are constraint_values @bazel_tools//tools/cpp:clang and\n@bazel_tools//tools/cpp:gcc that could potentially distinguish between the\nClang and GCC compilers as an alternative to this approach, but as of Bazel\n0.14.1, they appear not to be compatible with the autogenerated toolchain.\n\nExample:\n        load(\"@drake//tools/workspace/cc:repository.bzl\", \"cc_repository\")\n        cc_repository(name = \"cc\")\n\n    foo.bzl:\n        load(\"@cc//:compiler.bzl\", \"COMPILER_ID\")\n\n        if \"COMPILER_ID\" == \"AppleClang\":\n            # Do something...\n\n        if \"COMPILER_ID\" == \"Clang\":\n            # Do something...\n\n        if \"COMPILER_ID\" == \"GNU\":\n            # Do something...\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by cc_repository()\n\n# This file exists to make our directory into a Bazel package, so that our\n# neighboring *.bzl file can be loaded elsewhere.\n\"\"\"",
        "Line" : 37,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# https://github.com/bazelbuild/bazel/blob/0.14.1/tools/cpp/cc_configure.bzl",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 52,
        "CharPositionInLine" : 88
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 55,
        "CharPositionInLine" : 124
      },
      "6" : {
        "Text" : "# https://github.com/bazelbuild/bazel/blob/0.14.1/tools/cpp/osx_cc_configure.bzl",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# https://github.com/bazelbuild/bazel/blob/0.14.1/tools/cpp/unix_cc_configure.bzl",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# We do not fail outright here since even though we do not officially\n# support them, Drake may happily compile with new enough versions of\n# compilers that are compatible with GNU flags such as -std=c++14.",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# The minimum compiler versions should match those listed in both the root\n# CMakeLists.txt and doc/developers.rst. We know from experience that\n# compilation of Drake will certainly fail with versions lower than these,\n# even if they happen to support the necessary compiler flags.",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by cc_repository()\n\nCOMPILER_ID = \"{}\"\n\n\"\"\"",
        "Line" : 133,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 11
    },
    "tools/workspace/ccd/repository.bzl" : {
      "ObjectId" : "b0dee1985d3ae9a05109cadc626042a982f8f102",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/check_lists_consistency.bzl" : {
      "ObjectId" : "b945a179db21bf662d2c75c52e8a02023249f00f",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Checks consistency between lists of files and glob expression.\n\n    If lists of files are hard-coded (e.g. public and private headers), one may\n    want to verify that all the files that should be listed are indeed listed.\n    This is especially important when the version of the target is updated, to\n    verify that the lists of files are also updated if necessary.\n\n    Args:\n        glob (:obj:`str`): expression used to find all the files. The list of\n            files created thanks to this expression is compared to the given\n            lists of files.\n        file_list (:obj:`list` of :obj:`str`): List of file names. This is\n        typically a list of public headers concatenated with a list of private\n        headers.\n    \"\"\"",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/workspace/clang_cindex_python3/repository.bzl" : {
      "ObjectId" : "ffeba7233f7038ec895bce0b710af4689e7595d5",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 90
      },
      "CommentCount" : 3
    },
    "tools/workspace/cmake_configure_file.bzl" : {
      "ObjectId" : "f9b3fbd58fe93505eb284611cb00d3e95bb46a0f",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines the implementation actions to cmake_configure_file.",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines the rule to cmake_configure_file.",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "\"\"\"Creates a rule to generate an out= file from a src= file, using CMake's\n    configure_file substitution semantics.  This implementation is incomplete,\n    and may not produce the same result as CMake in all cases.\n\n    Definitions optionally can be passed in directly as defines= strings (with\n    the usual defines= convention of either a name-only \"HAVE_FOO\", or a\n    key-value \"MYSCALAR=DOUBLE\").\n\n    Definitions optionally can be read from simple CMakeLists files that\n    contain statements of the form \"set(FOO_MAJOR_VERSION 1)\" and similar.\n\n    See cmake_configure_file.py for our implementation of the configure_file\n    substitution rules.\n\n    The CMake documentation of the configure_file macro is:\n    https://cmake.org/cmake/help/latest/command/configure_file.html\n\n    \"\"\"",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/workspace/com_google_protobuf/repository.bzl" : {
      "ObjectId" : "7bd093255d85a6fe05bd9c459a48d7a270500f3d",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This rule imports the protobuf skylark code (the upstream protobuf.bzl) under\n# the name @com_google_protobuf, as is conventional.  Within that repository,\n# we then use a custom BUILD.bazel file to provide the well-known labels\n# \":protoc\", \":protobuf\", and \":protobuf_python\" as aliases to the operating\n# system's default installation of protobuf, for improved compatibility across\n# Drake's ecosystem.",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Bring in our hand-written BUILD file for @com_google_protobuf.",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 83
      },
      "4" : {
        "Text" : "# Bring in two vendored files from upstream.",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "tools/workspace/com_jidesoft_jide_oss/repository.bzl" : {
      "ObjectId" : "1c08377b80da093c69f509725e97af52e9f9d356",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GPL-2.0 WITH Classpath-exception-2.0",
        "Line" : 10,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 82
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 15,
        "CharPositionInLine" : 90
      },
      "CommentCount" : 4
    },
    "tools/workspace/commons_io/repository.bzl" : {
      "ObjectId" : "8cdf123eb224fe458a29ec3503c5f30c66da3c86",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Apache-2.0",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 84
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 15,
        "CharPositionInLine" : 90
      },
      "CommentCount" : 4
    },
    "tools/workspace/deb.bzl" : {
      "ObjectId" : "db4f370fd2d14efc977084a0ed0bd03389e4abcf",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Behaves like new_deb_archive, except that (1) this is a macro instead of a\n    rule and (2) this macro returns an error status instead of fail()ing.  The\n    return value is a struct with a field `error` that will be None on success\n    or else a detailed message on any failure.\n    \"\"\"",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Download and unpack all of the debs.",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# We do not permit an empty checksum; empty means \"don't care\".",
        "Line" : 27,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Add in the build file.",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Success.",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# (forced line break)",
        "Line" : 51,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "\"\"\"\n            Base filenames of the debs, e.g., [\"libfoo-dev_123_amd64.deb\"].\n            When multiple files are listed, they will all be extracted atop\n            each other (within our sandbox), as is typical for Debian install.\n            \"\"\"",
        "Line" : 59,
        "CharPositionInLine" : 18
      },
      "8" : {
        "Text" : "\"\"\"\n            List of URLs to download from, without the filename portion, e.g.,\n            [\"https://example.com/archives\"].\n            \"\"\"",
        "Line" : 68,
        "CharPositionInLine" : 18
      },
      "9" : {
        "Text" : "\"\"\"\n            Checksums of the files.  When unsure, you may set it to an empty\n            string or list; the checksum error will offer a suggestion.  The\n            sha256s and filenames are matched ordering (i.e., parallel lists).\n            \"\"\"",
        "Line" : 76,
        "CharPositionInLine" : 18
      },
      "10" : {
        "Text" : "\"\"\"\n            Label for BUILD.bazel file to add into the repository.  This should\n            contain the rules that expose the archive contents for consumers.\n            The *.deb file contents will appear at \".\", so paths are like,\n            e.g., `hdrs = glob([\"usr/include/foo/**/*.h\"]),`.\n            \"\"\"",
        "Line" : 83,
        "CharPositionInLine" : 18
      },
      "11" : {
        "Text" : "\"\"\"A repository rule that downloads and unpacks one or more *.deb files.\n\"\"\"",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tools/workspace/default.bzl" : {
      "ObjectId" : "b47d09621c8bc12c869275aa3bb5d56cf0afbf37",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 4,
        "CharPositionInLine" : 88
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 7,
        "CharPositionInLine" : 84
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 11,
        "CharPositionInLine" : 104
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 102
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 106
      },
      "6" : {
        "Text" : "# noqa",
        "Line" : 14,
        "CharPositionInLine" : 84
      },
      "7" : {
        "Text" : "# noqa",
        "Line" : 16,
        "CharPositionInLine" : 96
      },
      "8" : {
        "Text" : "# noqa",
        "Line" : 22,
        "CharPositionInLine" : 82
      },
      "9" : {
        "Text" : "# noqa",
        "Line" : 25,
        "CharPositionInLine" : 84
      },
      "10" : {
        "Text" : "# noqa",
        "Line" : 28,
        "CharPositionInLine" : 86
      },
      "11" : {
        "Text" : "# noqa\n# noqa",
        "Line" : 31,
        "CharPositionInLine" : 90
      },
      "12" : {
        "Text" : "# noqa",
        "Line" : 38,
        "CharPositionInLine" : 100
      },
      "13" : {
        "Text" : "# noqa",
        "Line" : 39,
        "CharPositionInLine" : 112
      },
      "14" : {
        "Text" : "# noqa",
        "Line" : 43,
        "CharPositionInLine" : 86
      },
      "15" : {
        "Text" : "# noqa",
        "Line" : 46,
        "CharPositionInLine" : 92
      },
      "16" : {
        "Text" : "# noqa",
        "Line" : 49,
        "CharPositionInLine" : 94
      },
      "17" : {
        "Text" : "# noqa",
        "Line" : 53,
        "CharPositionInLine" : 96
      },
      "18" : {
        "Text" : "# noqa",
        "Line" : 54,
        "CharPositionInLine" : 124
      },
      "19" : {
        "Text" : "# noqa",
        "Line" : 58,
        "CharPositionInLine" : 86
      },
      "20" : {
        "Text" : "# noqa",
        "Line" : 66,
        "CharPositionInLine" : 96
      },
      "21" : {
        "Text" : "# noqa",
        "Line" : 72,
        "CharPositionInLine" : 84
      },
      "22" : {
        "Text" : "# noqa",
        "Line" : 74,
        "CharPositionInLine" : 90
      },
      "23" : {
        "Text" : "# noqa",
        "Line" : 77,
        "CharPositionInLine" : 96
      },
      "24" : {
        "Text" : "# noqa",
        "Line" : 78,
        "CharPositionInLine" : 92
      },
      "25" : {
        "Text" : "\"\"\"Declares workspace repositories for all externals needed by drake (other\n    than those built into Bazel, of course).  This is intended to be loaded and\n    called from a WORKSPACE file.\n\n    Args:\n        excludes: list of string names of repositories to exclude; this can\n          be useful if a WORKSPACE file has already supplied its own external\n          of a given name.\n    \"\"\"",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# noqa",
        "Line" : 108,
        "CharPositionInLine" : 91
      },
      "27" : {
        "Text" : "# noqa",
        "Line" : 112,
        "CharPositionInLine" : 93
      },
      "28" : {
        "Text" : "# noqa",
        "Line" : 118,
        "CharPositionInLine" : 83
      },
      "29" : {
        "Text" : "# noqa",
        "Line" : 162,
        "CharPositionInLine" : 87
      },
      "30" : {
        "Text" : "# noqa",
        "Line" : 164,
        "CharPositionInLine" : 99
      },
      "31" : {
        "Text" : "# noqa",
        "Line" : 192,
        "CharPositionInLine" : 83
      },
      "32" : {
        "Text" : "# noqa",
        "Line" : 194,
        "CharPositionInLine" : 111
      },
      "33" : {
        "Text" : "# noqa",
        "Line" : 218,
        "CharPositionInLine" : 83
      },
      "34" : {
        "Text" : "# noqa",
        "Line" : 240,
        "CharPositionInLine" : 83
      },
      "CommentCount" : 35
    },
    "tools/workspace/doxygen/repository.bzl" : {
      "ObjectId" : "e4391c36d4a41cfb9247dccb87ef4a5811ef597e",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the BUILD file -- same for both platforms.",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# On macOS, just symlink homebrew Doxygen.",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# On Ubuntu, download Drake's pre-compiled Doxygen binary.",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# noqa\n# noqa",
        "Line" : 39,
        "CharPositionInLine" : 86
      },
      "5" : {
        "Text" : "\"\"\"Provides a library target for @doxygen//:doxygen.  On macOS, uses homebrew;\non Ubuntu, downloads and extracts a precompiled binary release of Doxygen.\n\"\"\"",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/workspace/drake_visualizer/repository.bzl" : {
      "ObjectId" : "97d3a981452780f91f055d450a29021c4d5c21d8",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nDownloads and unpacks a precompiled version of drake-visualizer (a subset of\nDirector, https://git.io/vNKjq) and makes it available to be used as a\ndependency of shell scripts.\n\nArchive naming convention:\n    dv-<version>-g<commit>-python-<python version>-qt-<qt version>\n        -vtk-<vtk version>-<platform>-<arch>[-<rebuild>]\n\nBuild configuration:\n    BUILD_SHARED_LIBS=OFF\n    CMAKE_BUILD_TYPE=Release\n    CMAKE_C_FLAGS=-D_FORTIFY_SOURCE=2 -fstack-protector-strong\n    CMAKE_CXX_FLAGS=-D_FORTIFY_SOURCE=2 -fstack-protector-strong\n    CMAKE_EXE_LINKER_FLAGS=-Wl,-Bsymbolic-functions -Wl,-z,now -Wl,-z,relro\n    CMAKE_MODULE_LINKER_FLAGS=-Wl,-Bsymbolic-functions -Wl,-z,now -Wl,-z,relro\n    CMAKE_SHARED_LINKER_FLAGS=-Wl,-Bsymbolic-functions -Wl,-z,now -Wl,-z,relro\n    DD_QT_VERSION=5\n    USE_EXTERNAL_INSTALL=ON\n    USE_LCM=ON\n    USE_LCMGL=ON\n    USE_SYSTEM_EIGEN=ON\n    USE_SYSTEM_LCM=ON\n    USE_SYSTEM_LIBBOT=ON\n    USE_SYSTEM_VTK=ON\n\nExample:\n    WORKSPACE:\n        load(\n            \"@drake//tools/workspace/drake_visualizer:repository.bzl\",\n            \"drake_visualizer_repository\",\n        )\n        drake_visualizer_repository(name = \"foo\")\n\n    BUILD:\n        sh_binary(\n            name = \"foobar\",\n            srcs = [\"bar.sh\"],\n            data = [\"@foo//:drake_visualizer\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO(jamiesnape): Publish scripts used to create binaries. There will be a CI\n# job for developers to build new binaries on demand.",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 59,
        "CharPositionInLine" : 96
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 60,
        "CharPositionInLine" : 85
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 62,
        "CharPositionInLine" : 98
      },
      "6" : {
        "Text" : "# noqa",
        "Line" : 63,
        "CharPositionInLine" : 85
      },
      "7" : {
        "Text" : "# noqa",
        "Line" : 65,
        "CharPositionInLine" : 98
      },
      "8" : {
        "Text" : "# noqa",
        "Line" : 66,
        "CharPositionInLine" : 85
      },
      "9" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by drake_visualizer_repository()\n\nload(\"@python//:version.bzl\", \"PYTHON_VERSION\")\n\nlicenses([\n    \"notice\",  # Apache-2.0 AND BSD-3-Clause AND Python-2.0\n    \"reciprocal\",  # MPL-2.0\n    \"restricted\",  # LGPL-2.1-only AND LGPL-2.1-or-later AND LGPL-3.0-or-later\n    \"unencumbered\",  # Public-Domain\n])\n\n# drake-visualizer has the following non-system dependencies in addition to\n# those declared in deps:\n#   bot2-lcmgl: LGPL-3.0-or-later\n#   ctkPythonConsole: Apache-2.0\n#   Eigen: BSD-3-Clause AND MPL-2.0 AND Public-Domain\n#   LCM: BSD-3-Clause AND LGPL-2.1-only AND LGPL-2.1-or-later\n#   Python: Python-2.0\n#   PythonQt: LGPL-2.1-only\n#   QtPropertyBrowser: LGPL-2.1-only\n# TODO(jamiesnape): Enumerate system dependencies.\n\npy_library(\n    name = \"drake_visualizer_python_deps\",\n    deps = [\n        \"@lcmtypes_bot2_core//:lcmtypes_bot2_core_py\",\n        # TODO(eric.cousineau): Expose VTK Python libraries here for Linux.\n        \"@lcmtypes_robotlocomotion//:lcmtypes_robotlocomotion_py\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nfilegroup(\n    name = \"lcm_python2\",\n    srcs = [\n        \"lib/python2.7/site-packages/lcm/__init__.py\",\n        \"lib/python2.7/site-packages/lcm/_lcm.so\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nfilegroup(\n    name = \"drake_visualizer\",\n    srcs = glob([\n        \"lib/libPythonQt.*\",\n        \"lib/libddApp.*\",\n        \"lib/python2.7/site-packages/bot_lcmgl/**/*.py\",\n        \"lib/python2.7/site-packages/director/**/*.py\",\n        \"lib/python2.7/site-packages/director/**/*.so\",\n        \"lib/python2.7/site-packages/urdf_parser_py/**/*.py\",\n    ]) + [\n        \"bin/drake-visualizer\",\n        \"share/doc/director/LICENSE.txt\",\n    ],\n    data = [\n        \":drake_visualizer_python_deps\",\n        \"@lcm//:libdrake_lcm.so\",\n        \"@vtk\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nPY_VERSION_FILES = PYTHON_VERSION.startswith(\"3.\") and [\":lcm_python2\"] or []\n\nload(\"@drake//tools/install:install.bzl\", \"install_files\")\ninstall_files(\n    name = \"install\",\n    dest = \".\",\n    files = [\":drake_visualizer\"] + PY_VERSION_FILES,\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 78,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 10
    },
    "tools/workspace/dreal/repository.bzl" : {
      "ObjectId" : "f41ad558a9551975edb2a5ace6ed7f88406befe6",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rename directory/old_name to be -ldrake_foo instead of -lfoo.",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# (forced line break)",
        "Line" : 42,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# (forced line break)",
        "Line" : 50,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Avoid using upstream library names for our custom build.",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Our BUILD file declares this dependency with the revised spelling.",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# TODO(jamiesnape): Pass down licenses to setup_pkg_config_repository.",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# The next two attributes are only used for macOS.  They are documented\n# in the pkg_config_repository rule.",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# On macOS we are using dReal from homebrew, so Drake's installation\n# script doesn't need to do anything extra.",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# All of the below attributes are only used for Ubuntu.  They are\n# documented in the new_deb_archive rule.",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# noqa",
        "Line" : 111,
        "CharPositionInLine" : 148
      },
      "11" : {
        "Text" : "# noqa\n# noqa",
        "Line" : 116,
        "CharPositionInLine" : 85
      },
      "12" : {
        "Text" : "# noqa",
        "Line" : 121,
        "CharPositionInLine" : 83
      },
      "13" : {
        "Text" : "\"\"\"Provides a library target for @dreal//:dreal.  On macOS, uses homebrew; on\nUbuntu, downloads *.deb files and unpacks them into the workspace.\n\"\"\"",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "tools/workspace/dreal/versions.bzl" : {
      "ObjectId" : "d1407223dae7f52e651cfed2b502320cf2c7976b",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/workspace/eigen/repository.bzl" : {
      "ObjectId" : "ed93a904d3504c31ffd24ece2272ecb7219427f5",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N.B. See #5785; do your best not to bump this to a newer commit.",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 3
    },
    "tools/workspace/execute.bzl" : {
      "ObjectId" : "9589ca22e958d8c0c16bf8d6664f10bf794c21b0",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Return the value of the PATH environment variable that would be used by\n    the which() command.\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# N.B. Ensure ${PATH} in each platform `tools/*.bazelrc` matches these\n# paths.",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"Return the path of the given program or None if there is no such program\n    in the PATH as defined by the path() function above. The value of the\n    user's PATH environment variable is ignored.\n    \"\"\"",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "\"\"\"Runs the `command` (list) and returns a status value.  The return value\n    is a struct with a field `error` that will be None on success or else a\n    detailed message on command failure.\n    \"\"\"",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"Runs the `command` (list) and immediately fails on any error.\n    Returns a struct with the stdout value.\"\"\"",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tools/workspace/expat/repository.bzl" : {
      "ObjectId" : "6a7f1aa1a052b561a29d762dded0830fbd8ea61e",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes a system-installed Expat XML parser headers and library available to be\nused as a C/C++ dependency. On Ubuntu, pkg-config is used to locate the Expat\nheaders and library. On macOS, no pkg-config expat.pc file is installed, but\nthe Expat headers are included in the macOS SDK and the library is always\nlocated at /usr/lib.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/expat:repository.bzl\", \"expat_repository\")  # noqa\n        expat_repository(name = \"foo\")\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:expat\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by expat_repository()\n\nlicenses([\"notice\"])  # MIT\n\ncc_library(\n    name = \"expat\",\n    hdrs = [\n        \"include/expat_external.h\",\n        \"include/expat.h\",\n    ],\n    includes = [\"include\"],\n    linkopts = [\"-lexpat\"],\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 52,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# TODO(jamiesnape): Pass down licenses to setup_pkg_config_repository.",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/workspace/fcl/repository.bzl" : {
      "ObjectId" : "ef561196f00148350bcacd13b33749d248fb4181",
      "LastModified" : "2019-04-16T22:43:28Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/fmt/repository.bzl" : {
      "ObjectId" : "d8966013241618f9e219544ae746caba1a5915df",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When changing the fmt version, also update the URL in the file\n# overview docstring of drake/common/text_logging.h.",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 14,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 3
    },
    "tools/workspace/forward_files.bzl" : {
      "ObjectId" : "f7b29606518b564281a355fca468a07bf336b42a",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Forwards files in `srcs` to be physically present in the current\n    packages.\n\n    Present implementation simply copies the files.\n\n    @param srcs\n        List of string, pointing *directly* to files as absolute Bazel target\n        paths. This does NOT resolve relative targets, nor does it unpack\n        filegroup targets `$(locations ...)`.\n    @param strip_prefix\n        String to be stripped from source files. Should include trailing slash.\n    @param dest_prefix\n        String to be prepended to target.\n    \"\"\"",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/workspace/freetype2/repository.bzl" : {
      "ObjectId" : "eed508e57607a541ecdb35bc6dd15f7f9d307a6c",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BSD-2-Clause AND BSD-3-Clause AND (FTL OR GPL-2.0+)",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "tools/workspace/generate_export_header.bzl" : {
      "ObjectId" : "72dd23c2efe9aeafea1b9532f1b358404d11122c",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines the implementation actions to generate_export_header.",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 24,
        "CharPositionInLine" : 95
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 25,
        "CharPositionInLine" : 97
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 29,
        "CharPositionInLine" : 91
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 33,
        "CharPositionInLine" : 133
      },
      "6" : {
        "Text" : "# noqa",
        "Line" : 37,
        "CharPositionInLine" : 139
      },
      "7" : {
        "Text" : "# Defines the rule to generate_export_header.",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "\"\"\"Creates a rule to generate an export header for a named library.  This\n    is an incomplete implementation of CMake's generate_export_header. (In\n    particular, it assumes a platform that uses\n    __attribute__((visibility(\"default\"))) to decorate exports.)\n\n    By default, the rule will have a mangled name related to the library name,\n    and will produce \"<lib>_export.h\".\n\n    The CMake documentation of the generate_export_header macro is:\n    https://cmake.org/cmake/help/latest/module/GenerateExportHeader.html\n\n    \"\"\"",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "tools/workspace/generate_file.bzl" : {
      "ObjectId" : "02ca84bf5687a57abbd70b8f84434a5eee42778a",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Generate a file with specified content.\n\nThis creates a rule to generate a file with specified content (which is either\nstatic or has been previously computed).\n\nArgs:\n    content (:obj:`str`): Desired content of the generated file.\n\"\"\"",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/workspace/generate_include_header.bzl" : {
      "ObjectId" : "8f8b9d5f5df10a094575486cb48e65c7816d0bae",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a header that includes a set of other headers",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Collect list of headers",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Generate include header",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "\"\"\"Generate a header that includes a set of other headers.\n\nThis creates a rule to generate a header that includes a list of other headers.\nThe generated file will be of the form::\n\n    #include <hdr>\n    #include <hdr>\n\nArgs:\n    hdrs (:obj:`str`): List of files or file labels of headers that the\n        generated header will include.\n    strip_prefix (:obj:`list` of :obj:`str`): List of prefixes to strip from\n        the header names when forming the ``#include`` directives.\n\"\"\"",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/workspace/gflags/repository.bzl" : {
      "ObjectId" : "b4a31bbd0148a0cffbdce464b21cf81f6b0f4858",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes system-installed gflags headers and library available to be used as a\nC/C++ dependency. On macOS, pkg-config is used to locate the gflags headers and\nlibrary. On Ubuntu Xenial, no pkg-config gflags.pc file is installed, but the\ngflags headers and library are always located in /usr/include and\n/usr/lib/x86_64-linux-gnu, respectively.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/gflags:repository.bzl\", \"gflags_repository\")  # noqa\n        gflags_repository(name = \"foo\")\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:gflags\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by gflags_repository()\n\nlicenses([\"notice\"])  # BSD-3-Clause\n\ncc_library(\n    name = \"gflags\",\n    hdrs = [\n      \"include/gflags/gflags.h\",\n      \"include/gflags/gflags_completions.h\",\n      \"include/gflags/gflags_declare.h\",\n      \"include/gflags/gflags_gflags.h\",\n    ],\n    includes = [\"include\"],\n    linkopts = [\"-lgflags\"],\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 41,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# TODO(jamiesnape): Pass down licenses to setup_pkg_config_repository.",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/workspace/gfortran/repository.bzl" : {
      "ObjectId" : "95cf4ffceddb4d0ddf535b27e31d8639d0b96648",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Locate gfortran and alias it to `:compiler`; locate libgfortran and\n    libquadmath and alias then to `:runtime.`\"\"\"",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Find the compiler.",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Emit a compiler wrapper.",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Find the runtime libraries based on the OS.",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The cc_library linking is different on Ubuntu vs macOS.",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Emit the build file and return.",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "\"\"\"\n    # -*- python -*-\n\n    # DO NOT EDIT: generated by gfortran_repository().\n\n    # libgfortran: GPL-3.0-or-later WITH GCC-exception-3.1.\n    # libquadmath: LGPL-2.0-or-later.\n    licenses([\"restricted\"])  # See above for details.\n\n    sh_binary(\n        name = \"compiler\",\n        srcs = [\"compiler.sh\"],\n        visibility = [\"//visibility:public\"],\n    )\n    cc_library(\n        name = \"runtime\",\n        srcs = {},\n        linkopts = {},\n        visibility = [\"//visibility:public\"],\n    )\n    \"\"\"",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Strip leading indentation.",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "tools/workspace/github.bzl" : {
      "ObjectId" : "a7be57d4aa3c7675b14acf2930c5d778ff08d762",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The github.bzl and bitbucket.bzl implementations are very similar.  Try to\n# keep the two files relatively well-synchronized -- or even better, rework\n# them to share code where doing so is an improvement.",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"A macro to be called in the WORKSPACE that adds an external from GitHub\n    using a workspace rule.\n\n    Args:\n        name: required name is the rule name and so is used for @name//...\n            labels when referring to this archive from BUILD files.\n        repository: required GitHub repository name in the form\n            organization/project.\n        commit: required commit is the git hash to download. (When the git\n            project is also a git submodule in CMake, this should be kept in\n            sync with the git submodule commit used there.) This can also be a\n            tag.\n        sha256: required sha256 is the expected SHA-256 checksum of the\n            downloaded archive. When unsure, you can omit this argument (or\n            comment it out) and then the checksum-mismatch error message will\n            offer a suggestion.\n        build_file: optional build file is the BUILD file label to use for\n            building this external. When omitted, the BUILD file(s) within the\n            archive will be used.\n        local_repository_override: optional local repository override can be\n            used for temporary local testing; instead of retrieving the code\n            from GitHub, the code is retrieved from the local filesystem path\n            given in the argument.\n        mirrors: required mirrors is a dict from string to list-of-string with\n            key \"github\", where the list-of-strings are URLs to use, formatted\n            using {repository} and {commit} string substitutions. The\n            mirrors.bzl file in this directory provides a reasonable default\n            value.\n    \"\"\"",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Once we've handled the \"local_repository_override\" sidestep, we delegate\n# to a rule (not a macro) so that we have more leeway in the actions we can\n# take (i.e., so we can do more than just a simple download-and-extract).",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Helper stub to implement a repository_rule in terms of a setup() function.",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "\"\"\"This is a rule() formulation of the github_archive() macro.  It is identical\nto the macro except that it does not support local_repository_override.\nConsult the macro documentation for full API details.\n\"\"\"",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "\"\"\"This is reusable formulation of the github_archive() macro.  It is identical\n    to the macro except that (1) it does not support local_repository_override,\n    and (2) it returns a status struct, instead of failing internally.  The\n    result struct has a field `error` that will be non-None iff there were any\n    errors.  Consult the macro documentation for additional API details.\n    \"\"\"",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Do the download step first.  (This also writes the metadata.)",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Optionally apply source patches, using Bazel's utility helper.  Here we\n# use getattr as a guard, in case the originating repository_rule didn't\n# want to declare attr support for the patchfile-related settings.",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# We re-implement Bazel's workspace_and_buildfile utility, so that options\n# we don't care about (e.g., build_file_content) do not have to be declared\n# as attrs on our all of our own repository rules.",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "\"\"\"Download an archive of the provided GitHub repository and commit to the\n    output path and extract it.\n\n    Args:\n        repository_ctx: context of a Bazel repository rule.\n        repository: GitHub repository name in the form organization/project.\n        commit: git revision for which the archive should be downloaded.\n        mirrors: dictionary of mirrors, see mirrors.bzl in this directory for\n            an example.\n        output: path to the directory where the archive will be unpacked,\n            relative to the Bazel repository directory.\n        sha256: expected SHA-256 hash of the archive downloaded. Fallback to\n            an incorrect default value to prevent the hash check from being\n            disabled, but allow the first download attempt to fail and print\n            the correct SHA-256 hash.\n    \"\"\"",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Create a summary file for for Drake maintainers.",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "\"\"\"Fallback to an incorrect default value of SHA-256 hash to prevent the\n    hash check from being disabled, but allow the first download attempt of an\n    archive to fail and print the correct hash.\n\n    Args:\n        sha256: expected SHA-256 hash of the archive to be downloaded.\n    \"\"\"",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"Compute the strip prefix for a downloaded archive of the provided\n    GitHub repository and commit.\n\n    Args:\n        repository: GitHub repository name in the form organization/project.\n        commit: git revision for which the archive was downloaded.\n    \"\"\"",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# GitHub archives omit the \"v\" in version tags, for some reason.",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "\"\"\"Compute the urls from which an archive of the provided GitHub\n    repository and commit may be downloaded.\n\n     Args:\n        repository: GitHub repository name in the form organization/project.\n        commit: git revision for which the archive should be downloaded.\n        mirrors: dictionary of mirrors, see mirrors.bzl in this directory for\n            an example.\n    \"\"\"",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 16
    },
    "tools/workspace/github3_py/repository.bzl" : {
      "ObjectId" : "4ee7280c91df887f1dc073b1963d81db1e2e986c",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/glew/repository.bzl" : {
      "ObjectId" : "c8e48b8f8a0598f9024085737936f214884659b6",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BSD-3-Clause AND MIT",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/glib/repository.bzl" : {
      "ObjectId" : "cd557c117dc09ad8b003c5d58f54627701762521",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# LGPL-2.0+",
        "Line" : 10,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 2
    },
    "tools/workspace/godotengine/repository.bzl" : {
      "ObjectId" : "9d0795e75125d5f36be768573a4ff0a758a77339",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/gtest/repository.bzl" : {
      "ObjectId" : "5cff273d36cd6769d0136036505911fbfd227d43",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/gurobi/repository.bzl" : {
      "ObjectId" : "daa5db3d7536166511ac440b50e4867f6faf6465",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-\n# This is a Bazel repository_rule for the Gurobi solver.  See\n# https://www.bazel.io/versions/master/docs/skylark/repository_rules.html",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ubuntu only: GUROBI_PATH should be the linux64 directory in the Gurobi 8.0.0\n# release.\n#\n# TODO(jwnimmer-tri) The Gurobi docs use /opt/gurobi800/linux64, so we should\n# probably look in that location as a reasonable default guess.",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Gurobi must be installed into its standard location.",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Locate Gurobi using an environment variable.  If GUROBI_PATH is\n# unset, pass the empty string to our template() call, but symlink a\n# dummy distro path since we can't symlink to the empty string.",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Emit the generated BUILD.bazel file.",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "tools/workspace/ignition_math/repository.bzl" : {
      "ObjectId" : "47080ba74167019df1b67146e01c35dc8ca16892",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When updating this commit, also remember to adjust the PROJECT_*\n# constants in ./package.BUILD.bazel to match the new version number.",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 15,
        "CharPositionInLine" : 86
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 17,
        "CharPositionInLine" : 83
      },
      "CommentCount" : 4
    },
    "tools/workspace/ignition_rndf/repository.bzl" : {
      "ObjectId" : "032964f6c0d8fe2bc8e710be6e3466b1c2acf1aa",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When updating this commit, also remember to adjust the PROJECT_*\n# constants in ./package.BUILD.bazel to match the new version number.",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 15,
        "CharPositionInLine" : 86
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 17,
        "CharPositionInLine" : 83
      },
      "CommentCount" : 4
    },
    "tools/workspace/ipopt/repository.bzl" : {
      "ObjectId" : "1289537fde3fb533de2dd99263935f520d55fb5b",
      "LastModified" : "2019-03-19T13:44:48Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPL-1.0",
        "Line" : 11,
        "CharPositionInLine" : 27
      },
      "2" : {
        "Text" : "# Public-Domain",
        "Line" : 12,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 3
    },
    "tools/workspace/json/repository.bzl" : {
      "ObjectId" : "02911b87c5700007dbaeb722dc335d58ffba9d58",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/jsoncpp/repository.bzl" : {
      "ObjectId" : "7d93572d3fc82358af3c429eacc4053582491816",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MIT",
        "Line" : 11,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Public-Domain",
        "Line" : 12,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 3
    },
    "tools/workspace/lapack/repository.bzl" : {
      "ObjectId" : "8894ff1771b31f5368b9715b103f70198795278e",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Ubuntu, we'll use use pkg-config to find liblapack.\n# On macOS, no targets should depend on @lapack.",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# TODO(jamiesnape): Pass down licenses to setup_pkg_config_repository.\n# The license for this package should be:\n#    licenses([\"notice\"])  # BSD-3-Clause",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tools/workspace/lcm/lcm.bzl" : {
      "ObjectId" : "45cabaea8af7df249c841e0d129378030aa61558",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Create a header file aggregating all the given header files, and\n    return the aggregate header file name (or an empty list if no file\n    is generated).\n\n    \"\"\"",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "\"\"\"Return the list of lcm-gen output filenames (derived from the lcm_srcs,\n    lcm_package, and lcm_struct parameters as documented in lcm_cc_library\n    below).  The filenames will use the given extension.\n\n    \"\"\"",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find and remove the dirname and extension shared by all lcm_srcs.\n# For srcs in the current directory, the dirname will be empty.",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Assemble the expected output paths, inferring struct names from what we\n# got in lcm_srcs, if necessary.",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Some languages have extra metadata.",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "\"\"\"The implementation actions to invoke lcm-gen.\n\n    The ctx parameter comes from Skylark:\n    https://bazel.build/versions/master/docs/skylark/lib/ctx.html\n    \"\"\"",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# We are given ctx.outputs.outs, which is the full path and file name of\n# the generated file we want to create.  However, the lcm-gen tool places\n# its outputs into a subdirectory of the path we ask for, based on the LCM\n# message's package name.  To set the correct path, we need to both remove\n# the filename from outs (which we do via \".dirname\"), as well as the\n# package-name-derived directory name (which we do via slicing off striplen\n# characters), including the '/' right before it (thus the \"+ 1\" below).",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Create rule to invoke lcm-gen on some lcm_srcs.\n# https://www.bazel.io/versions/master/docs/skylark/rules.html",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "\"\"\"Declares a cc_library on message classes generated from `*.lcm` files.\n\n    The required lcm_srcs list parameter specifies the `*.lcm` source files.\n    All lcm_srcs must reside in the same subdirectory.\n\n    The required lcm_package string parameter must match the `package ...;`\n    statement in all of the files in lcm_srcs.\n\n    The lcm_structs list parameter is optional; if unset, it defaults to the\n    basenames of the files given in lcm_srcs.  If the struct names within the\n    lcm_srcs do not match the basenames, or if the lcm_srcs declare multiple\n    structs per file, then the parameter is required and must list every\n    `struct ...;` declared by lcm_srcs. The ``aggregate_hdr`` parameter gives\n    the name of the aggregate header to generate (default is ``None`` which\n    disables the generation of the aggregate header). The special value\n    ``\"AUTO\"`` will use the ``lcm_package`` name in the same subdirectory as\n    the other headers, in conformance with the behavior of\n    ``lcmUtilities.cmake``. ``aggregate_hdr_strip_prefix`` may be used to\n    specify a list of prefixes which are removed from the names of the\n    generated headers when forming the ``#include`` statements in the generated\n    aggregate header. (See also the ``strip_prefix`` option of\n    :func:`generate_include_header`.)\n    \"\"\"",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We report the computed output filenames for use by calling code.",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "\"\"\"Declares a py_library on message classes generated from `*.lcm` files.\n\n    The standard parameters (lcm_srcs, lcm_package, lcm_structs) are documented\n    in lcm_cc_library.\n\n    This library has an ${lcm_package}/__init__.py, which means that this macro\n    should only be used once for a given lcm_package in a given subdirectory.\n    (Bazel will fail-fast with a \"duplicate file\" error if this is violated.)\n\n    The add_current_package_to_imports argument controls whether or not this\n    library adds an `imports = [\".\"]` attribute so that `from ${lcm_package}\n    import ${lcm_src}` will work in Python code (as opposed to needing to\n    prefix import statements with the bazel package name).  It is True by\n    default, but can be set to False if a package needs its own manually-\n    written __init__.py handling, or if the current bazel package should\n    not be imported by default. Additional sources can be added via\n    `extra_srcs`.\n    \"\"\"",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "\"\"\"Declares a java_library on message classes generated from `*.lcm` files.\n\n    The standard parameters (lcm_srcs, lcm_package, lcm_structs) are documented\n    in lcm_cc_library.\n\n    \"\"\"",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "tools/workspace/lcm/repository.bzl" : {
      "ObjectId" : "ce84001789f094df7602b99cd845aed59e5306a4",
      "LastModified" : "2019-04-16T22:43:28Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/lcmtypes_bot2_core/repository.bzl" : {
      "ObjectId" : "79ffc53d952cde8a784f79c885518dc8efe2f97a",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 88
      },
      "CommentCount" : 3
    },
    "tools/workspace/lcmtypes_robotlocomotion/repository.bzl" : {
      "ObjectId" : "514a04a64f3e32b5e9e490c9f1f9688d3797075e",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 94
      },
      "CommentCount" : 3
    },
    "tools/workspace/libjpeg/repository.bzl" : {
      "ObjectId" : "4d30f34679a70d0405563a08d0510b9d55948367",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IJG",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/liblz4/repository.bzl" : {
      "ObjectId" : "e310d8d478c70e84338ff795e5322b089772a00e",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BSD-2-Clause",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/libpng/repository.bzl" : {
      "ObjectId" : "16dc1e33a3db53350bc6c69fb671232c938723cd",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libpng",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/libprotobuf/repository.bzl" : {
      "ObjectId" : "aa9dd4423bcd3d0a5ce4030bda6f8a63ba7a062b",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Load in the paths and flags to the system version of the protobuf runtime;\n# in contrast, the Bazel build rules are loaded as @com_google_protobuf.",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# BSD-3-Clause",
        "Line" : 13,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 3
    },
    "tools/workspace/libtiff/repository.bzl" : {
      "ObjectId" : "40cd5eeabfc6c4bf5f9f9acec935e2d68908d97a",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libtiff",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/meshcat/repository.bzl" : {
      "ObjectId" : "fe4be347dc9d81017d94b52584348db0bc07852b",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 14,
        "CharPositionInLine" : 77
      },
      "CommentCount" : 3
    },
    "tools/workspace/meshcat_python/repository.bzl" : {
      "ObjectId" : "f120b6cf3a200e4e0baff3b5962a02256aa82ef8",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes the meshcat module from meshcat-python available to be used as a Python\ndependency. A meshcat-server console script is also created. On all platforms,\na meshcat-python archive is downloaded from GitHub (https://git.io/fxbL0) or a\nspecified mirror and unpacked.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace:mirrors.bzl\", \"DEFAULT_MIRRORS\")\n        load(\n            \"@drake//tools/workspace/meshcat_python:repository.bzl\",\n            \"meshcat_python_repository\",\n        )\n        meshcat_python_repository(name = \"foo\", mirrors = DEFAULT_MIRRORS)\n\n    BUILD:\n        py_library(\n            name = \"foobar\",\n            deps = [\"@foo//:meshcat\"],\n            srcs = [\"bar.py\"],\n        )\n\n    Command Line:\n        $ bazel run @foo//:meshcat-server\n\nArgs:\n    name: A unique name for this rule. The rule must not be named meshcat.\n    mirrors: A dictionary of mirrors, see tools/workspace/mirrors.bzl for an\n        example.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 46,
        "CharPositionInLine" : 86
      },
      "3" : {
        "Text" : "# src/meshcat/viewer is a git submodule and so not included in the\n# meshcat-python archive (https://git.io/fpUnO). Therefore, we download it\n# separately and symlink the necessary files instead.",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/workspace/metadata.bzl" : {
      "ObjectId" : "e4d7c8cab45bcc667bc62064c5a944c9468e7ef4",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Helper function to archive load-phase metadata.  Writes a file named\n    drake_repository_metadata.json to the root of an external repository.  The\n    contents of the file will a JSON dict of the `kwargs`, with one additional\n    dict entry of name=\"\" using the repository_ctx.name.  This information can\n    be loaded later using the tools/workspace/metadata.py library.\n    \"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/workspace/mirrors.bzl" : {
      "ObjectId" : "5a8f307dbf80dbe3b673999592f845d5a73558f2",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This constant contains Drake's default lists of mirrors.  It is keyed by the\n# repository type using magic strings (\"github\", \"bitbucket\", etc.), and has\n# values of type list-of-string; each string is a pattern for a mirror URL.\n#\n# When calling a Drake workspace rule that requires a mirror= argument, this\n# constant is a reasonable default value.\n#\n# Each repository type has its own keyword string substitutions within its\n# pattern string; these will vary from one repository type to another; consult\n# the specific rules (e.g., github_archive()) for details.\n#\n# The first item in each list is the authoritative source (e.g., the upstream\n# server), if there is one.\n#\n# For Drake's defaults, Packages are mirrored from upstream (GitHub, Bitbucket,\n# PyPI, etc.) to CloudFront backed by an S3 bucket.\n#",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 24,
        "CharPositionInLine" : 86
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 25,
        "CharPositionInLine" : 89
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 28,
        "CharPositionInLine" : 106
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 29,
        "CharPositionInLine" : 109
      },
      "6" : {
        "Text" : "# noqa",
        "Line" : 30,
        "CharPositionInLine" : 92
      },
      "7" : {
        "Text" : "# noqa",
        "Line" : 42,
        "CharPositionInLine" : 83
      },
      "8" : {
        "Text" : "# noqa",
        "Line" : 43,
        "CharPositionInLine" : 86
      },
      "9" : {
        "Text" : "# N.B. ibiblio doesn't offer https.",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# noqa",
        "Line" : 52,
        "CharPositionInLine" : 100
      },
      "11" : {
        "Text" : "# noqa",
        "Line" : 53,
        "CharPositionInLine" : 89
      },
      "12" : {
        "Text" : "# noqa",
        "Line" : 54,
        "CharPositionInLine" : 92
      },
      "CommentCount" : 13
    },
    "tools/workspace/models/files.bzl" : {
      "ObjectId" : "a4280c1a7fbd06878f19a3275cd98b814517d41b",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Manual enumeration of mesh files, to avoid needing to write extra Bazel\n    logic.\n\n    Recipe to reproduce:\n        $ cd models\n        $ find ycb/meshes -type f | \\\n            python -c 'import sys; print(repr(sys.stdin.read().split()))'\n    \"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/workspace/models/repository.bzl" : {
      "ObjectId" : "e266e916acb09ff326b26e34c3c7c5ea2a17fd39",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/mosek/repository.bzl" : {
      "ObjectId" : "1114382abac02b14626a126e13ef49420c2466cc",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nDownloads and unpacks a MOSEK archive and makes its headers and\nprecompiled shared libraries available to be used as a C/C++\ndependency.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/mosek:repository.bzl\", \"mosek_repository\")  # noqa\n        mosek_repository(name = \"foo\")\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:mosek\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 35,
        "CharPositionInLine" : 85
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 38,
        "CharPositionInLine" : 85
      },
      "4" : {
        "Text" : "# TODO(jwnimmer-tri) Port to use mirrors.bzl.",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 46,
        "CharPositionInLine" : 84
      },
      "6" : {
        "Text" : "# Note that in the 8.1.0.51 packages, libmosek64.dylib is a copy of\n# libmosek64.8.1.dylib instead of a symlink. Otherwise, the list of\n# files should include the following in place of bin/libmosek64.dylib:\n#\n# \"bin/libmosek64.{}.{}.dylib\".format(mosek_major_version,\n#                                     mosek_minor_version)",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# N.B. We are using and installing MOSEK's copy of libcilkrts.so.5,\n# even though Ubuntu installs the same shared library by default on\n# all systems already. For some reason, Mosek fails when used with\n# Ubuntu's shared library. If Drake users have other third-party\n# code that assumes use of Ubunut's libcilkrts, there could be\n# runtime conflicts; however, this risk seems low.",
        "Line" : 108,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by mosek_repository()\n\nload(\"@drake//tools/install:install.bzl\", \"install\", \"install_files\")\n\nlicenses([\n    \"by_exception_only\",  # MOSEK\n    \"notice\",  # fplib AND Zlib\n])\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncc_library(\n    name = \"mosek\",\n    srcs = {},\n    hdrs = {},\n    includes = {},\n    linkopts = {},\n)\n\ninstall_files(\n    name = \"install_libraries\",\n    dest = \"lib\",\n    files = {},\n    strip_prefix = {},\n    visibility = [\"//visibility:private\"],\n)\n\ninstall(\n   name = \"install\",\n   docs = [\n       \"mosek-eula.pdf\",\n       \"@drake//tools/workspace/mosek:LICENSE_CilkPlus\",\n       \"@drake//tools/workspace/mosek:LICENSE_OpenMP\",\n   ],\n   allowed_externals = [\n       \"@drake//tools/workspace/mosek:LICENSE_CilkPlus\",\n       \"@drake//tools/workspace/mosek:LICENSE_OpenMP\",\n   ],\n   deps = [\":install_libraries\"],\n)\n    \"\"\"",
        "Line" : 130,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 9
    },
    "tools/workspace/net_sf_jchart2d/repository.bzl" : {
      "ObjectId" : "27f034a2edc141814dc695712ac3a0638a834fbc",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In the unlikely event that you update the version here, verify that the\n# licenses in tools/third_party/jchart2d/LICENSE are still applicable.",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# LGPL-3.0+",
        "Line" : 12,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 14,
        "CharPositionInLine" : 85
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 17,
        "CharPositionInLine" : 90
      },
      "CommentCount" : 5
    },
    "tools/workspace/nlopt/repository.bzl" : {
      "ObjectId" : "a06b527b9ea334287edd92c1c6f11fb32c7fc02d",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BSD-3-Clause AND MIT",
        "Line" : 11,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# LGPL-2.1+",
        "Line" : 12,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 3
    },
    "tools/workspace/numpy/repository.bzl" : {
      "ObjectId" : "a604654a66cb7d137e5dbf0d88705682986975d9",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nFinds local system NumPy headers and makes them available to be used as a\nC/C++ dependency.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/numpy:repo.bzl\", \"numpy_repository\")\n        numpy_repository(\n            name = \"foo\",\n            python_version = \"2\",\n        )\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:numpy\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArguments:\n    name: A unique name for this rule.\n    python_version: The major or major.minor version of Python for which NumPy\n                    headers are to be found.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by numpy_repository()\n\nlicenses([\n    \"notice\",  # BSD-2-Clause AND BSD-3-Clause AND MIT AND Python-2.0\n    \"unencumbered\",  # Public-Domain\n])\n\ncc_library(\n    name = \"numpy\",\n    hdrs = glob([\"include/**\"]),\n    includes = [\"include\"],\n    visibility = [\"//visibility:public\"],\n)\n    \"\"\"",
        "Line" : 56,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 3
    },
    "tools/workspace/octomap/repository.bzl" : {
      "ObjectId" : "0005eac0adfeffe3276aad814d9f7227f45cffb2",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/optitrack_driver/repository.bzl" : {
      "ObjectId" : "fdfd85beec3370c61f4445cfdda73faf490d4fd3",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/org_apache_xmlgraphics_commons/repository.bzl" : {
      "ObjectId" : "8f354ae92fdb4704e1ce8d5550f835f1b6fc2e33",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Apache-2.0",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 114
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 15,
        "CharPositionInLine" : 90
      },
      "CommentCount" : 4
    },
    "tools/workspace/os.bzl" : {
      "ObjectId" : "4b7520f6e078cd140cfe51d870e921eb72b398ee",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"A collection of OS-related utilities intended for use in repository rules,\ni.e., rules used by WORKSPACE files, not BUILD files.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"Run the given command (a list), using the which() function in\n    execute.bzl to locate the executable named by the zeroth index of\n    `command`.\n\n    Return struct with attributes:\n    - error (None when success, or else str message)\n    - stdout (str command output, possibly empty)\n    \"\"\"",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find the executable.",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Run the executable.",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Success.",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "\"\"\"Return a fully-populated struct result for determine_os, below.\"\"\"",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "\"\"\"Handle determine_os on Linux.\"\"\"",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Shared error message text across different failure cases.",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Run sed to determine Linux NAME and VERSION_ID.",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Compute an identifying string, in the form of \"$NAME $VERSION_ID\".",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Match supported Ubuntu release(s). These should match those listed in\n# both doc/developers.rst the root CMakeLists.txt.",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Nothing matched.",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"Handle determine_os on macOS.\"\"\"",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Shared error message text across different failure cases.",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Run sw_vers to determine macOS version.",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Match supported macOS release(s).",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Nothing matched.",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "\"\"\"\n    A repository_rule helper function that determines which of the supported OS\n    versions we are targeting.\n\n    Argument:\n        repository_ctx: The context passed to the repository_rule calling this.\n\n    Result:\n        a struct, with attributes:\n        - error: str iff any error occurred, else None\n        - distribution: str either \"ubuntu\" or \"macos\" if no error\n        - is_macos: True iff on a supported macOS release, else False\n        - macos_release: str like \"10.14\" iff on a supported macOS, else None\n        - is_ubuntu: True iff on a supported Ubuntu version, else False\n        - ubuntu_release: str like \"16.04\" iff on a supported ubuntu, else None\n    \"\"\"",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "\"\"\"\n    A repository_rule helper function that creates a BUILD file with alias()\n    declarations based on which supported OS version we are targeting.\n\n    Argument:\n        repository_ctx: The context passed to the repository_rule calling this.\n        mapping: dict(str, list(str)) where the keys match the OS, and the list\n            of values are of the form name=actual as in alias(name, actual).\n\n    The keys of mapping are searched in the following preferential order:\n    - Exact release, via e.g., \"Ubuntu 16.04\" or \"macOS 10.14\"\n    - Any release, via \"Ubuntu default\" or \"macOS default\"\n    - Anything else, via \"default\"\n    \"\"\"",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Find the best match in the mapping dict for our OS.",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Emit the list of aliases.",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by os_specific_alias_repository()\n\npackage(default_visibility = [\"//visibility:public\"])\n\"\"\"",
        "Line" : 189,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 23
    },
    "tools/workspace/osqp/repository.bzl" : {
      "ObjectId" : "444effe84f13d6f7fbe9faad79db575e6d54f53b",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When changing the commit of OSQP used by Drake, ideally try to keep\n# Drake's commit of QDLDL aligned with what OSQP desires, e.g.,\n# https://github.com/oxfordcontrol/osqp/tree/v0.5.0/lin_sys/direct/qdldl\n# shows that v0.5.0 of OSQP prefers v0.1.3 of QDLDL.",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 16,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 3
    },
    "tools/workspace/pkg_config.bzl" : {
      "ObjectId" : "700f333989be659d678a725dd0e4575caa4945fc",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Run command_line with PKG_CONFIG_PATH = pkg_config_paths and return its\n    tokenized output.\"\"\"",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "\"\"\"This is the macro form of the pkg_config_repository() rule below.\n    Refer to that rule's API documentation for details.\n\n    This flavor of this rule is intended to be called by other repository_rule\n    implementation functions.  The pkg_config_repository flavor of this rule is\n    intended to be called directly from the WORKSPACE file, or from a macro\n    that was called by the WORKSPACE file.\n    \"\"\"",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# First locate pkg-config.",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check if we can find the required *.pc file of any version.",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If we have a minimum version, enforce that.",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Determine linkopts.",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Bazel \"linkopts=\" must be either switches (\"-foo\"), variables (\"$(FOO)\"),\n# or labels (\"foo\").  We should only get switches from `pkg-config --libs`.\n# However, sometimes it produces \"-framework CoreFoundation\" or similar,\n# which is *supposed* to be a single switch, but our split heuristic\n# chopped it up.  We recombine non-switch args with their preceding arg as\n# a repair.  We process args in reserve order to keep our loop index\n# unchanged by a pop.",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Absolute system paths to *.dylib and *.so files get turned into -l\n# instead.",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Add `-Wl,-rpath <path>` for `-L<path>`.\n# See https://github.com/RobotLocomotion/drake/issues/7387#issuecomment-359952616  # noqa",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Switches stay put.",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# A non-switch arg should be recombined with the preceding arg.",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Determine cflags; we'll split into includes and defines in a moment.",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Split cflags into includes and defines.  The -I paths from pkg-config\n# will be absolute paths; we'll make them relative in a moment.",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# We process in reserve order to keep our loop index unchanged by a pop.",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# The pkg-config output has told us to use -pthread when compiling.\n# When compiling the typical effect of -pthread is to -D_REENTRANT;\n# when linking the typical effect of -pthread is to -lpthread.  In\n# Bazel, we can't pass -pthread in a cc_library's defines (it's not\n# a preprocessor definition), and we shouldn't pass -pthread only\n# in a cc_library's copts (i.e., non-transitively), since\n# respecting transitivity might be important for some toolchains.\n# Instead, when compiling our code that uses this library, we'll\n# decide to just ignore pkg-config's advice to use -pthread when\n# compiling and instead apply -pthread only when linking.",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# We know these are okay to ignore.",
        "Line" : 181,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Symlink the absolute include paths into our repository, to obtain\n# relative paths for them as required by cc_library's attributes.",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Write out the BUILD.bazel file.",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# TODO(jamiesnape): Make licenses mandatory.\n# TODO(jamiesnape): Use of this rule may cause additional transitive\n# dependencies to be linked and their licenses must also be enumerated.",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "\"\"\"Creates a repository that contains a single library target, based on the\nresults of invoking pkg-config.\n\nThe pkg_config_repository flavor of this rule is intended to be called directly\nfrom the WORKSPACE file, or from a macro that was called by the WORKSPACE file.\nThe setup_pkg_config_repository flavor of this rule is intended to be called by\nother repository_rule implementation functions.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace:pkg_config.bzl\", \"pkg_config_repository\")\n        pkg_config_repository(\n            name = \"foo\",\n            modname = \"foo-2.0\",\n        )\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgs:\n    name: A unique name for this rule.\n    licenses: Licenses of the library. Valid license types include restricted,\n              reciprocal, notice, permissive, and unencumbered. See\n              https://docs.bazel.build/versions/master/be/functions.html#licenses_args\n              for more information.\n    modname: The library name as known to pkg-config.\n    atleast_version: (Optional) The --atleast-version to pkg-config.\n    static: (Optional) Add linkopts for static linking to the library target.\n    build_file_template: (Optional) (Advanced) Override the BUILD template.\n    extra_srcs: (Optional) Extra items to add to the library target.\n    extra_hdrs: (Optional) Extra items to add to the library target.\n    extra_copts: (Optional) Extra items to add to the library target.\n    extra_defines: (Optional) Extra items to add to the library target.\n    extra_includes: (Optional) Extra items to add to the library target.\n    extra_linkopts: (Optional) Extra items to add to the library target.\n    extra_deps: (Optional) Extra items to add to the library target.\n    build_epilog: (Optional) Extra text to add to the generated BUILD.bazel.\n    pkg_config_paths: (Optional) Paths to find pkg-config files (.pc). Note\n                      that we ignore the environment variable PKG_CONFIG_PATH\n                      set by the user.\n\"\"\"",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tools/workspace/protoc/repository.bzl" : {
      "ObjectId" : "2ce0b66f68baa9cd4b10b1b518f344d9fe41fc09",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the protoc binary.",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/workspace/pybind11/repository.bzl" : {
      "ObjectId" : "3e45a451b7891c60d13658523d6a0862ecd87ed5",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Using the `drake` branch of this repository.",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "'''\n\"\"\"\nProvides information on the external fork of `pybind11` used by `pydrake`.\n\"\"\"\n\nrepository = {repository}\ncommit = {commit}\nsha256 = {sha256}\n'''",
        "Line" : 33,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 3
    },
    "tools/workspace/pycodestyle/repository.bzl" : {
      "ObjectId" : "c929f0e405169d8f062bd65d55bbdf9a075f8bc8",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 3
    },
    "tools/workspace/pycps/repository.bzl" : {
      "ObjectId" : "a1206717ca4b53429269608bc36ae78e08a8a811",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/pypi.bzl" : {
      "ObjectId" : "05e3b7c262bf5fb71c844f68930a920041a9a67a",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Downloads and unpacks a PyPI package archive and adds it to the WORKSPACE\n    as an external. Additional keyword arguments (except \"urls\") will be passed\n    through to the call of \"http_archive.\"\n\n    Example:\n        Download and use the \"foo\" package, version 1.2.3, hosted on PyPI at\n        https://files.pythonhosted.org/packages/source/f/foo/foo-1.2.3.tar.gz.\n\n        WORKSPACE:\n            load(\"//tools/workspace:pypi.bzl\", \"pypi_archive\")\n            pypi_archive(\n                name = \"foo\",\n                version = \"1.2.3\",\n                build_file = \"foo.BUILD\",\n                sha256 = \"0123456789abcdef...\",\n            )\n\n        foo.BUILD:\n            py_library(\n                name = \"foo\",\n                srcs = [\n                    \"foo/__init__.py\",\n                    \"foo/bar.py\",\n                ],\n                visibility = [\"//visibility:public\"],\n            )\n\n        BUILD:\n            py_binary(\n                name = \"foobar\",\n                deps = [\"@foo//:foo\"],\n                srcs = [\"foobar.py\"],\n            )\n\n    Arguments:\n        name: A unique name for this rule. This argument will be used for the\n            package name if the \"package\" argument is omitted [Name; required].\n\n        package: The name of the PyPI package to download. The \"name\" argument\n            will be used if this argument is omitted [String; optional].\n\n        version: The version of the PyPI package to be downloaded\n            [String; required].\n\n        build_file: The file to use as the BUILD file for this repository.\n            This argument is a label relative to the WORKSPACE\n            [String; required].\n\n        sha256: The expected SHA-256 hash of the archive to download. This\n            argument must match the SHA-256 hash of the downloaded archive.\n            The download will fail if omitted, but the checksum-mismatch error\n            message will offer a suggestion for the correct value of this\n            argument [String; required].\n\n        strip_prefix: A directory prefix to strip from the extracted files\n            [String; optional].\n\n        mirrors: A dict from string to list-of-string with key \"pypi\", where\n            the list-of-strings are URLs to use, formatted using {package},\n            {version}, and {p} (where {p} is the first letter of {package}).\n    \"\"\"",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set an incorrect default value to allow the download attempt to fail\n# and print a suggested SHA-256 checksum in the checksum-mismatch error\n# message.",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "tools/workspace/python/repository.bzl" : {
      "ObjectId" : "e9fd8727f43b76c1304f2f40c367d98632ce5e50",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nFinds local system Python headers and libraries using python-config and\nmakes them available to be used as a C/C++ dependency. On macOS, Python\nlibraries should not typically be directly linked, so the :python target passes\nthe \"-undefined dynamic_lookup\" linker flag, however in the rare cases that\nthis would cause an undefined symbol error, a :python_direct_link target is\nprovided. On Linux, these targets are identical.\n\nThe Python distribution is determined by\n`--action_env=DRAKE_PYTHON_BIN_PATH=<bin>`, which should match Bazel's version\n(via `--python_path=<bin>`).\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/python:repository.bzl\", \"python_repository\")  # noqa\n        python_repository(\n            name = \"foo\",\n        )\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:python\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArguments:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The supported Python versions should match those listed in both the root\n# CMakeLists.txt and doc/developers.rst.",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Using `DRAKE_PYTHON_BIN_PATH` from the environment, determine:\n# - `python` - binary path\n# - `python_config` - configuration binary path\n# - `site_packages_relpath` - relative to base of FHS\n# - `version` - '{major}.{minor}`\n# - `version_major` - major version\n# - `os` - results from `determine_os(...)`",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Bazel does not easily expose its --python_path to repository rules\n# (analysis phase). We must use a workaround as Tensorflow does in\n# `python_configure.bzl` (https://git.io/fx4Pp). We check for consistency\n# during the build (execution) phase using `bazel_python_is_valid`.",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# TODO(eric.cousineau): Make this an error once `.bazelrc` stops using\n# `try-import` for configuration.",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Perform sanity checks on supplied Python binary.",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Development Note: This should generally be the correct configuration. If\n# you are hacking with `virtualenv` (which is officially unsupported),\n# ensure that you manually symlink the matching `*-config` binary in your\n# `virtualenv` installation.",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Check if config binary exists.",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Warn if we do not the correct platform support.",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Repository implementation.",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Collect includes.",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Collect linker paths.",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"\n# DO NOT EDIT: generated by python_repository()\n# WARNING: Avoid using this macro in any repository rules which require\n# `load()` at the WORKSPACE level. Instead, load these constants through\n# `BUILD.bazel` or `package.BUILD.bazel` files.\n\nPYTHON_BIN_PATH = \"{bin_path}\"\nPYTHON_VERSION = \"{version}\"\nPYTHON_SITE_PACKAGES_RELPATH = \"{site_packages_relpath}\"\n\"\"\"",
        "Line" : 181,
        "CharPositionInLine" : 22
      },
      "14" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by python_repository()\n\nlicenses([\"notice\"])  # Python-2.0\n\n# Only include first level of headers included from `python_repository`\n# (`include/<destination>/*`). This should exclude third party C headers which\n# may be nested within `/usr/include/python<version>`, such as `numpy` when\n# installed via `apt` on Ubuntu.\nheaders = glob(\n    [\"include/*/*\"],\n    exclude_directories = 1,\n)\n\ncc_library(\n    name = \"python_headers\",\n    # Depend on a Python configuration sanity check for anything that wishes to\n    # generate bindings. See `genrule` below for more information.\n    data = [\":bazel_python_is_valid\"],\n    hdrs = headers,\n    includes = {},\n    visibility = [\"//visibility:private\"],\n)\n\ncc_library(\n    name = \"python\",\n    linkopts = {},\n    deps = [\":python_headers\"],\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"python_direct_link\",\n    linkopts = {},\n    deps = [\":python_headers\"],\n    visibility = [\"//visibility:public\"],\n)\n\n# See `genrule` below.\npy_binary(\n    name = \"check_bazel_python\",\n    main = \"_check_bazel_python.py\",\n    srcs = [\n        \"_check_bazel_python.py\",\n        \"_bazel_python_actionenv.py\",\n    ],\n    imports = [\".\"],\n    visibility = [\"//visibility:private\"],\n)\n\n# Place this test as a `genrule` to (a) test at build time and (b) be able to\n# access Bazel's Python interpreter from a `py_binary` used in `tools`.\ngenrule(\n    name = \"bazel_python_is_valid\",\n    outs = [\".bazel_python_is_valid\"],\n    cmd = \"$(location :check_bazel_python) > $@\",\n    tools = [\":check_bazel_python\"],\n    visibility = [\"//visibility:private\"],\n)\n\"\"\"",
        "Line" : 210,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 15
    },
    "tools/workspace/python3/repository.bzl" : {
      "ObjectId" : "b1132a0fd76e49de45a3947d7cd69d441b9cf569",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/workspace/qdldl/repository.bzl" : {
      "ObjectId" : "0eccf7f27c54bf898717d0cd03795adbb480188d",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When changing the commit of QDLDL used by Drake, ideally try to keep\n# it aligned with what Drake's commit of OSQP desires, e.g.,\n# https://github.com/oxfordcontrol/osqp/tree/v0.4.1/lin_sys/direct/qdldl\n# shows that v0.4.1 of OSQP prefers v0.1.3 of QDLDL.",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 16,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 3
    },
    "tools/workspace/ruby/repository.bzl" : {
      "ObjectId" : "afbbf21caf1f26121b4aed89c18744051ce5de4a",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the ruby binary.",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/workspace/scs/repository.bzl" : {
      "ObjectId" : "21922a2845cb08e88b46780258b3a68c2f68b904",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/sdformat/repository.bzl" : {
      "ObjectId" : "af3b6a3e7e2767e6f06eacc6511961ad065adf35",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# From the following branch:\n# https://bitbucket.org/osrf/sdformat/commits/branch/default",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# v6.2.0",
        "Line" : 10,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 15,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 4
    },
    "tools/workspace/semantic_version/repository.bzl" : {
      "ObjectId" : "d9262abf63ea0d5855cb2cfd50beaeb60010443c",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 14,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 3
    },
    "tools/workspace/snopt/fortran-macos.bzl" : {
      "ObjectId" : "d63553140894e6a032dae3a09d04235b3019be92",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Compiles a Fortran library.  This library's symbols will have hidden\n    visibility, becaused Drake binary release artifacts should never provide\n    them as part of the public API.\n\n    srcs: fortran source files (e.g., `*.f`).\n    kwargs: are passed through to the bazel cc_library result.\n    \"\"\"",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Compile *.f* files to *.pic.o files.\n# Mark all symbols as private externs (aka hidden visibility).",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Wrap the *.pic.o files into a cc_library.",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tools/workspace/snopt/fortran-ubuntu.bzl" : {
      "ObjectId" : "04f744e6a2cf1461ff7f01730a953d0ca4d8e5c5",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Compiles a Fortran library.  This library's symbols will have hidden\n    visibility, becaused Drake binary release artifacts should never provide\n    them as part of the public API.\n\n    srcs: fortran source files (e.g., `*.f`).\n    kwargs: are passed through to the bazel cc_library result.\n    \"\"\"",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Compile *.f* files to *.pic.o files.",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Consolidate object code into an archive, so that we are able to tell the\n# linker to use hidden visibility for it.",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# (Drop the leading @.)",
        "Line" : 33,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "# Wrap the *.pic.a file into a cc_library, so that we can attach\n# linkopts and deps.",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tools/workspace/snopt/repository.bzl" : {
      "ObjectId" : "e94345d047cec7a353882c1dad94a6f5449931d9",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run the command, with fail() a non-zero returncode.",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Runs the git operation named in *args.  We use \"--git-dir\" to prevent git\n# from looking in parent directories to find the repository.  We only ever\n# want it to look where we've told it.",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Clones a git repository named by the given remote and reset it to the\n# given commit.\n#\n# The clone is placed into \".\" (which is the workspace being populated by\n# whatever repository_rule calls this function).  This function assumes\n# that \".\" is empty, which that's already been established by Bazel before\n# it invokes the repository_rule.\n#\n# On any error, terminates via fail() and does not return.\n#\n# We would prefer to load `@bazel_tools//tools/build_defs/repo:git.bzl` and\n# use its `git_repository` rule, but there is no flavor of that rule that\n# allows us to pass in the repo_ctx from our own repository_rule.",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Download the snopt sources from an access-controlled git repository.\n# We'll use git operations directly (and not the github_archive helper)\n# because github_archive does not (yet, easily) support authentication.\n#\n# If a user wishes to use a different protocol that ssh for the remote,\n# note that we will respect their config file, so they can configure\n# the protocol without changing the attributes of the repository_rule.\n# For example:\n# git config --global url.https://github.com/.insteadOf git@github.com:",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Disable any files that came from the upstream snopt source.",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "\"\"\"\n            set -euxo pipefail\n            find . -name BUILD -print0 -o -name BUILD.bazel -print0 |\n                xargs -t -n1 -0 -I{} \\\n                mv {} {}.upstream-ignored\n        \"\"\"",
        "Line" : 77,
        "CharPositionInLine" : 57
      },
      "7" : {
        "Text" : "# Link Drake's BUILD file into the snopt workspace.",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# TODO(jwnimmer-tri) Perhaps in the future we should allow SNOPT_PATH\n# to also refer to the *.zip format of the download, and/or an already-\n# unpacked source archive directory.",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Produce a repository with a valid BUILD.bazel file, but where all of the\n# targets emit an error_message at build-time (but not while loading).",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# When SNOPT is enabled (e.g., with `--config snopt`), then SNOPT_PATH\n# must be set.  If it's not set, we'll defer the error messages to the\n# build phase, instead of loading phase.  This deferment enables\n# `genquery()` calls that reference `@snopt` to succeed, even if SNOPT\n# is disabled and we don't have access to its source code.\n#\n# Once the user sets a SNOPT_PATH, this function will be re-run\n# (because we tag `environ` on our repository_rule).  In this way, we\n# can keep this rule tagged `local = False`, which is important for not\n# re-running git anytime the dependency graph changes.",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# This case does not use deferred error handling.  If you set\n# SNOPT_PATH=git, then we'll assume you know what you're doing,\n# and that the git operations should always succeed.",
        "Line" : 168,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# This case uses deferred error handling, since doing so is easy.",
        "Line" : 173,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Add in the helper.",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# noqa\n# noqa",
        "Line" : 186,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 15
    },
    "tools/workspace/spdlog/repository.bzl" : {
      "ObjectId" : "0e5e6f024d63627734cf8bca684c40e566a7f1d2",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/sphinx/repository.bzl" : {
      "ObjectId" : "f2c1e13009d1a5ea3bfbe5d33aa69b4c6a238ef0",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/workspace/spruce/repository.bzl" : {
      "ObjectId" : "daeaaaaccfd63ef85dbec193d703fe2e21ad9653",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bring in the BUILD file.",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Bring in the source files from upstream.",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tools/workspace/stx/repository.bzl" : {
      "ObjectId" : "8a40dfea9f1792cfb039d1d15fecbaf646b280df",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/styleguide/repository.bzl" : {
      "ObjectId" : "05d2745d42266b2c5d3ccde845d34f705e729c01",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/tinydir/repository.bzl" : {
      "ObjectId" : "f44902bebf8a639a005df0a67658ade7398777e1",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 2
    },
    "tools/workspace/tinyobjloader/repository.bzl" : {
      "ObjectId" : "bada751c2a5eba46d8f7f2592b826f678c512b0e",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 83
      },
      "CommentCount" : 3
    },
    "tools/workspace/tinyxml/repository.bzl" : {
      "ObjectId" : "77239fb97dbbcb94c91a4e58cc6e19e72b5e7c34",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Zlib",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/tinyxml2/repository.bzl" : {
      "ObjectId" : "50570fbc867a66acdd69ea0b566d11767a488974",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Zlib",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/u_msgpack_python/repository.bzl" : {
      "ObjectId" : "bc4e121f3d7faf04c5d5ed587fd181f1f38f1adb",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes the umsgpack module from u-msgpack-python available to be used as a\nPython dependency. On Ubuntu Xenial, a u-msgpack-python archive is downloaded\nfrom GitHub (https://git.io/fxbIK) or a specified mirror and unpacked. On\nUbuntu Bionic the python-u-msgpack package must be installed using apt. On\nmacOS, u-msgpack-python must be installed using pip2.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace:mirrors.bzl\", \"DEFAULT_MIRRORS\")\n        load(\n            \"@drake//tools/workspace/u_msgpack_python:repository.bzl\",\n            \"u_msgpack_python_repository\",\n        )\n        u_msgpack_python_repository(name = \"foo\", mirrors = DEFAULT_MIRRORS)\n\n    BUILD:\n        py_library(\n            name = \"foobar\",\n            deps = [\"@foo//:umsgpack\"],\n            srcs = [\"bar.py\"],\n        )\n\nArguments:\n    name: A unique name for this rule. The rule must not be named umsgpack.\n    mirrors: A dictionary of mirrors, see tools/workspace/mirrors.bzl for an\n             example.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO(jamiesnape): Support Python 3.x where appropriate.",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 59,
        "CharPositionInLine" : 90
      },
      "4" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by u_msgpack_python_repository()\n\nlicenses([\"notice\"])  # MIT\n\npy_library(\n    name = \"umsgpack\",\n    srcs = [\"umsgpack.py\"],\n    imports = [\".\"],\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 74,
        "CharPositionInLine" : 19
      },
      "5" : {
        "Text" : "\"\"\"\nload(\"@drake//tools/install:install.bzl\", \"install\")\n\ninstall(\n    name = \"install\",\n    targets = [\":umsgpack\"],\n    docs = [\"LICENSE\"],\n    doc_dest = \"share/doc/umsgpack\",\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 89,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "\"\"\"\nload(\"@drake//tools/install:install.bzl\", \"install_files\")\n\ninstall_files(\n    name = \"install\",\n    dest = \".\",\n    files = [],\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 101,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 7
    },
    "tools/workspace/uritemplate_py/repository.bzl" : {
      "ObjectId" : "cd0db6cf432a0ea762e4cb5faabb2ead439d246f",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noqa",
        "Line" : 12,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# noqa",
        "Line" : 13,
        "CharPositionInLine" : 84
      },
      "CommentCount" : 3
    },
    "tools/workspace/vtk/repository.bzl" : {
      "ObjectId" : "5e62e133a7e67fde20fc980ace918849eec42756",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes selected VTK headers and precompiled shared libraries available to be\nused as a C++ dependency. On Ubuntu, a VTK archive, built by the project\nmaintainers from the Dockerfile and shell scripts in this directory, is\ndownloaded and unpacked. On macOS, VTK must be installed from the\nrobotlocomotion/director tap (https://git.io/vN6ft) using Homebrew.\n\nArchive naming convention:\n    vtk-<version>-embree-<embree version>-ospray-<ospray version>\n        -python-<python 2.x version>[-python-<python 3.x version>]\n        -qt-<qt version>-<platform>-<arch>[-<rebuild>]\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace:mirrors.bzl\", \"DEFAULT_MIRRORS\")\n        load(\"@drake//tools/workspace/vtk:repository.bzl\", \"vtk_repository\")\n        vtk_repository(name = \"foo\", mirrors = DEFAULT_MIRRORS)\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:vtkCommonCore\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"\ncc_library(\n    name = \"{}\",\n    srcs = {},\n    hdrs = {},\n    includes = {},\n    linkopts = {},\n    visibility = {},\n    deps = {},\n)\n    \"\"\"",
        "Line" : 79,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# noqa",
        "Line" : 108,
        "CharPositionInLine" : 118
      },
      "4" : {
        "Text" : "# noqa",
        "Line" : 109,
        "CharPositionInLine" : 89
      },
      "5" : {
        "Text" : "# noqa",
        "Line" : 111,
        "CharPositionInLine" : 118
      },
      "6" : {
        "Text" : "# noqa",
        "Line" : 112,
        "CharPositionInLine" : 89
      },
      "7" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by vtk_repository()\n\nlicenses([\n    \"notice\",  # Apache-2.0 AND BSD-3-Clause AND MIT\n    \"reciprocal\",  # GL2PS\n    \"unencumbered\",  # Public-Domain\n])\n\"\"\"",
        "Line" : 127,
        "CharPositionInLine" : 19
      },
      "8" : {
        "Text" : "# Note that we only create library targets for enough of VTK to support\n# those used directly or indirectly by Drake.",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# TODO(jamiesnape): Create a script to help generate the targets.",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# To see what the VTK module dependencies are, you can inspect VTK's source\n# tree. For example, for vtkIOXML and vtkIOXMLParser:\n#   VTK/IO/XML/module.cmake\n#   VTK/IO/XMLParser/module.cmake",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# See: VTK/IO/XMLParser/{*.h,module.cmake}",
        "Line" : 446,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# See: VTK/IO/XML/{*.h,module.cmake}",
        "Line" : 459,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Segmentation faults with system versions of GLEW on Ubuntu 16.04.",
        "Line" : 650,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "\"\"\"\ncc_library(\n    name = \"embree\",\n    linkopts = [\n        \"-L{0}\",\n        \"-lembree3\",\n        \"-Wl,-rpath,{0}\",\n    ],\n    visibility = [\"//visibility:private\"],\n)\n\"\"\"",
        "Line" : 690,
        "CharPositionInLine" : 24
      },
      "15" : {
        "Text" : "\"\"\"\ncc_library(\n    name = \"ospray\",\n    hdrs = [\n        \"ospray_include/ospray/OSPDataType.h\",\n        \"ospray_include/ospray/OSPTexture.h\",\n        \"ospray_include/ospray/ospray.h\",\n    ],\n    includes = [\"ospray_include\"],\n    linkopts = [\n        \"-L{0}\",\n        \"-lospray\",\n        \"-Wl,-rpath,{0}\",\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = [\":embree\"],\n)\n\"\"\"",
        "Line" : 706,
        "CharPositionInLine" : 24
      },
      "16" : {
        "Text" : "\"\"\"\ncc_library(\n    name = \"embree\",\n    srcs = glob([\"lib/libembree3.so*\"]),\n    visibility = [\"//visibility:private\"],\n)\n\ncc_library(\n    name = \"ospray\",\n    srcs = glob([\n        \"lib/libembree3.so*\",\n        \"lib/libospray_common.so*\",\n        \"lib/libospray_module_ispc.so*\",\n        \"lib/libospray.so*\",\n    ]),\n    hdrs = [\n        \"include/ospray/OSPDataType.h\",\n        \"include/ospray/OSPTexture.h\",\n        \"include/ospray/ospray.h\",\n    ],\n    includes = [\"include\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\":embree\"],\n)\n\"\"\"",
        "Line" : 726,
        "CharPositionInLine" : 24
      },
      "17" : {
        "Text" : "# Glob all files for the data dependency of //tools:drake_visualizer.",
        "Line" : 878,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "\"\"\"\nfilegroup(\n    name = \"vtk\",\n    srcs = glob([\"**/*\"], exclude=[\"BUILD.bazel\", \"WORKSPACE\",\n        \"lib/python3.*/**/*\", \"lib/libvtkWrappingPython3*.so\"]),\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 879,
        "CharPositionInLine" : 20
      },
      "19" : {
        "Text" : "# Use Homebrew VTK.",
        "Line" : 889,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Install all files.",
        "Line" : 892,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "\"\"\"\nload(\"@drake//tools/install:install.bzl\", \"install_files\")\ninstall_files(\n    name = \"install\",\n    dest = \".\",\n    files = {},\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 895,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 22
    },
    "tools/workspace/which.bzl" : {
      "ObjectId" : "f4e88e60ea1588d849d6cd41f00b8ef8fef2ece9",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by which_repository()\n\n# A symlink to {}.\nexports_files([\"{}\"])\n\"\"\"",
        "Line" : 18,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "\"\"\"Alias the result of $(which $command) into a label @$name//:$command (or\n@$command if name and command match). The PATH is set according to the path()\nfunction in execute.bzl. The value of the user's PATH environment variable is\nignored.\n\nChanges to any WORKSPACE or BUILD.bazel file will cause this rule to be\nre-evaluated because it sets its local attribute. However, note that if neither\nWORKSPACE nor **/BUILD.bazel change, then this rule will not be re-evaluated.\nThis means that adding or removing the presence of `command` on some entry in\nthe PATH (as defined above) will not be accounted for until something else\nchanges.\n\nArgs:\n    command (:obj:`str`): Short name of command, e.g., \"cat\".\n    additional_search_paths (:obj:`list` of :obj:`str`): List of additional\n        search paths.\n\"\"\"",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/workspace/yaml_cpp/repository.bzl" : {
      "ObjectId" : "aff1a7716bbcd8c8e1ff779ece2cb35173c152f5",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# X11",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/workspace/zlib/repository.bzl" : {
      "ObjectId" : "622f00ad7780632d8b3459f6d1414441fbcdcd2b",
      "LastModified" : "2019-04-10T15:23:41Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python -*-\n# vi: set ft=python :",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"\nMakes a system-installed zlib image compression library headers and library\navailable to be used as a C/C++ dependency. On Ubuntu, pkg-config is used to\nlocate the zlib headers and library. On macOS, no pkg-config zlib.pc file is\ninstalled, but the zlib headers are included in the macOS SDK and the library\nis always located at /usr/lib.\n\nExample:\n    WORKSPACE:\n        load(\"@drake//tools/workspace/zlib:repository.bzl\", \"zlib_repository\")\n        zlib_repository(name = \"foo\")\n\n    BUILD:\n        cc_library(\n            name = \"foobar\",\n            deps = [\"@foo//:zlib\"],\n            srcs = [\"bar.cc\"],\n        )\n\nArgument:\n    name: A unique name for this rule.\n\"\"\"",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "\"\"\"# -*- python -*-\n\n# DO NOT EDIT: generated by zlib_repository()\n\nlicenses([\"notice\"])  # Zlib\n\ncc_library(\n    name = \"zlib\",\n    hdrs = [\n      \"include/zconf.h\",\n      \"include/zlib.h\",\n    ],\n    includes = [\"include\"],\n    linkopts = [\"-lz\"],\n    visibility = [\"//visibility:public\"],\n)\n\"\"\"",
        "Line" : 52,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# TODO(jamiesnape): Pass down licenses to setup_pkg_config_repository.",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "BAZEL" : 134
  },
  "ElapsedTime" : 8171
}