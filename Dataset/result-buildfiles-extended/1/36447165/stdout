{
  "Repository" : "36447165",
  "Revision" : "HEAD",
  "ObjectId" : "c1587037a16dfde07f0bc4e6d92d57c1d3a76e2d",
  "CommitTime" : "2019-04-03T21:04:43Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ada6ca7a666b713f60537cab6eb124a4f0d4ccca",
      "LastModified" : "2018-05-19T10:54:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# setup version numbers\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only do coverage builds for gcc for the moment\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# cmake file to download and include dependencies\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Docs/CMakeLists.txt" : {
      "ObjectId" : "52d7f4353aa1fa857b127bc2fc51105236636d12",
      "LastModified" : "2018-03-15T11:05:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Examples/CMakeLists.txt" : {
      "ObjectId" : "f4fccfecadcc71d899cff041e96908b53ec2e002",
      "LastModified" : "2019-03-22T21:44:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tests/CMakeLists.txt" : {
      "ObjectId" : "b6116c3e76e36f801ec1ea98905d9279c0c4a6da",
      "LastModified" : "2018-11-29T20:08:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prevent GoogleTest from overriding our compiler/linker options\n\n# when building with Visual Studio\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable install\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create a bundle for unit-tests on ios so they can run on it.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Vortex2D/CMakeLists.txt" : {
      "ObjectId" : "20bba7a8dde58fe02e59bb3500f105ec5c6eb4e5",
      "LastModified" : "2019-03-28T22:02:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create framework for macOS/iOS\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"current version\" in semantic format in Mach-O binary file\n",
        "Line" : 164,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# \"compatibility version\" in semantic format in Mach-O binary file\n",
        "Line" : 166,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Only need signing on iOS\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# windows definition to correctly generate the dll\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy dlls\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/DownloadProject.cmake" : {
      "ObjectId" : "42d5027da6d006faeaa5d54f544785d9cadced1b",
      "LastModified" : "2018-03-15T11:05:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file LICENSE or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of\n\n# the CMakeCache.txt to be copied across due to it not expecting there to\n\n# be a project within a project.  This causes the hard-coded paths in the\n\n# cache to be copied and builds to fail.  To mitigate this, we simply\n\n# remove the cache if it exists before we configure the new project.  It\n\n# is safe to do so because it will be re-generated.  Since this is only\n\n# executed at the configure step, it should not cause additional builds or\n\n# downloads.\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n\n# Make sure to pass through CMAKE_MAKE_PROGRAM in case the main project\n\n# has this set to something not findable on the PATH.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/Macros.cmake" : {
      "ObjectId" : "b624dad5f476cf0c16634b4047b1555278bf02d6",
      "LastModified" : "2019-03-31T17:15:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the requested package\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the requested program\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Function to compile the shaders and generate a C++ source file to include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find vulkan or MoltenVK on macOS/iOS\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate a Vortex2DConfig.cmake file (and associated files) from the targets registered against\n\n# the EXPORT name \"Vortex2DConfigExport\" (EXPORT parameter of install(TARGETS))\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_DIR or CMAKE_CURRENT_SOURCE_DIR not usable for files that are to be included like this one\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create Frameworks directory in app bundle\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Copy the framework into the app bundle\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Codesign the framework in it's new spot\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/ios.toolchain.cmake" : {
      "ObjectId" : "4bed070b5c167b098eae5566a95953296d377ee3",
      "LastModified" : "2018-05-19T10:54:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of the ios-cmake project. It was retrieved from\n\n# https://github.com/cristeab/ios-cmake.git, which is a fork of\n\n# https://code.google.com/p/ios-cmake/. Which in turn is based off of\n\n# the Platform/Darwin.cmake and Platform/UnixPaths.cmake files which\n\n# are included with CMake 2.8.4\n\n#\n\n# The ios-cmake project is licensed under the new BSD license.\n\n#\n\n# Copyright (c) 2014, Bogdan Cristea and LTE Engineering Software,\n\n# Kitware, Inc., Insight Software Consortium.  All rights reserved.\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This file is based off of the Platform/Darwin.cmake and\n\n# Platform/UnixPaths.cmake files which are included with CMake 2.8.4\n\n# It has been altered for iOS development.\n\n#\n\n# Updated by Alex Stewart (alexs.mac@gmail.com)\n\n#\n\n# *****************************************************************************\n\n#      Now maintained by Alexander Widerberg (widerbergaren [at] gmail.com)\n\n#                      under the BSD-3-Clause license\n\n# *****************************************************************************\n\n#\n\n#                           INFORMATION / HELP\n\n#\n\n# The following variables control the behaviour of this toolchain:\n\n#\n\n# IOS_PLATFORM: OS (default) or SIMULATOR or SIMULATOR64 or TVOS or SIMULATOR_TVOS\n\n#    OS = Build for iPhoneOS.\n\n#    SIMULATOR = Build for x86 i386 iPhone Simulator.\n\n#    SIMULATOR64 = Build for x86_64 iPhone Simulator.\n\n#    TVOS = Build for AppleTVOS.\n\n#    SIMULATOR_TVOS = Build for x86_64 AppleTV Simulator.\n\n# CMAKE_OSX_SYSROOT: Path to the iOS SDK to use.  By default this is\n\n#    automatically determined from IOS_PLATFORM and xcodebuild, but\n\n#    can also be manually specified (although this should not be required).\n\n# CMAKE_IOS_DEVELOPER_ROOT: Path to the Developer directory for the iOS platform\n\n#    being compiled for.  By default this is automatically determined from\n\n#    CMAKE_OSX_SYSROOT, but can also be manually specified (although this should\n\n#    not be required).\n\n# ENABLE_BITCODE: (1|0) Enables or disables bitcode support. Default 1 (true)\n\n# ENABLE_ARC: (1|0) Enables or disables ARC support. Default 1 (true, ARC enabled by default)\n\n# ENABLE_VISIBILITY: (1|0) Enables or disables symbol visibility support. Default 0 (false, visibility hidden by default)\n\n# IOS_ARCH: (armv7 armv7s arm64 i386 x86_64) If specified, will override the default architectures for the given IOS_PLATFORM\n\n#    OS = armv7 armv7s arm64\n\n#    SIMULATOR = i386\n\n#    SIMULATOR64 = x86_64\n\n#    TVOS = arm64\n\n#    SIMULATOR_TVOS = x86_64\n\n#\n\n# This toolchain defines the following variables for use externally:\n\n#\n\n# XCODE_VERSION: Version number (not including Build version) of Xcode detected.\n\n# IOS_SDK_VERSION: Version of iOS SDK being used.\n\n# CMAKE_OSX_ARCHITECTURES: Architectures being compiled for (generated from\n\n#    IOS_PLATFORM).\n\n#\n\n# This toolchain defines the following macros for use externally:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE XCODE_VARIANT)\n\n#   A convenience macro for setting xcode specific properties on targets.\n\n#   Available variants are: All, Release, RelWithDebInfo, Debug, MinSizeRel\n\n#   example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\" \"all\").\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#   A macro used to find executable programs on the host system, not within the\n\n#   iOS environment.  Thanks to the android-cmake project for providing the\n\n#   command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix for PThread library not in path\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the Xcode version being used.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default to building for iPhoneOS if not specified otherwise, and we cannot\n\n# determine the platform from the CMAKE_OSX_ARCHITECTURES variable. The use\n\n# of CMAKE_OSX_ARCHITECTURES is such that try_compile() projects can correctly\n\n# determine the value of IOS_PLATFORM from the root project, as\n\n# CMAKE_OSX_ARCHITECTURES is propagated to them by CMake.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the platform name and architectures for use in xcodebuild commands\n\n# from the specified IOS_PLATFORM name.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Specify minimum version of deployment target.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Unless specified, SDK version 8.0 is used by default as minimum target version.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Use bitcode or not\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Unless specified, enable bitcode support by default\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Use ARC or not\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Unless specified, enable ARC support by default\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Use hidden visibility or not\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Unless specified, disable symbols visibility by default\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Get the SDK version information.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Find the Developer root for the specific iOS platform being compiled for\n\n# from CMAKE_OSX_SYSROOT.  Should be ../../ from SDK specified in\n\n# CMAKE_OSX_SYSROOT.  There does not appear to be a direct way to obtain\n\n# this information from xcrun or xcodebuild.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find the C & C++ compilers for the specified SDK.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find (Apple's) libtool.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Configure libtool to be used instead of ar + ranlib to build static libraries.\n\n# This is required on Xcode 7+, but should also work on previous versions of\n\n# Xcode.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Get the version of Darwin (OS X) of the host.\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Standard settings.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Force unset of OS X-specific deployment target (otherwise autopopulated),\n\n# required as of cmake 2.8.10.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Set the architectures for which to build.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Skip the platform compiler checks for cross compiling.\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Note that only Xcode 7+ supports the newer more specific:\n\n# -m${XCODE_IOS_PLATFORM}-version-min flags, older versions of Xcode use:\n\n# -m(ios/ios-simulator)-version-min instead.\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Xcode 7.0+ uses flags we can build directly from XCODE_IOS_PLATFORM.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# SIMULATOR or SIMULATOR64 both use -mios-simulator-version-min.\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Hidden visibilty is required for C++ on iOS.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# In order to ensure that the updated compiler flags are used in try_compile()\n\n# tests, we have to forcibly set them in the CMake cache, not merely set them\n\n# in the local scope.\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old\n\n# build tree (where install_name_tool was hardcoded) and where\n\n# CMAKE_INSTALL_NAME_TOOL isn't in the cache and still cmake didn't fail in\n\n# CMakeFindBinUtils.cmake (because it isn't rerun) hardcode\n\n# CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did\n\n# before, Alex.\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths.\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Default to searching for frameworks first.\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Set up the default search directories for frameworks.\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Only search the specified iOS SDK, not the remainder of the host filesystem.\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# This little macro lets you set any XCode specific property.\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# This macro lets you find executable programs on the host system.\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# This macro lets you find executable programs on the host system.\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 859
}