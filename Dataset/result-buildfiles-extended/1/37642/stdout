{
  "Repository" : "37642",
  "Revision" : "HEAD",
  "ObjectId" : "48a2b42ec11fb17c00edf502ee794be934054e52",
  "CommitTime" : "2019-04-17T20:22:45Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "63d9db9806e9c862f3a01f57c39af93b41d8d358",
      "LastModified" : "2019-01-26T15:02:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# NOTE: this Makefile requires GNU make\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is necessary only if you want to automatically produce a new\n\n# _version.py file from the current git history (without doing a build).\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build OS X pkg packages.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# [Failure instance: Traceback: <class 'OpenSSL.SSL.Error'>: [('SSL routines', 'ssl3_read_bytes', 'tlsv1 alert unknown ca'), ('SSL routines', 'ssl3_write_bytes', 'ssl handshake failure')]\n\n#\n\n# @echo \"uploading to ~tahoe-tarballs/OS-X-packages/ via flappserver\"\n\n# @if [ \"X${BB_BRANCH}\" = \"Xmaster\" ] || [ \"X${BB_BRANCH}\" = \"X\" ]; then \\\n\t#   flappclient --furlfile ~/.tahoe-osx-pkg-upload.furl upload-file tahoe-lafs-*-osx.pkg; \\\n\t#  else \\\n\t#   echo not uploading tahoe-lafs-osx-pkg because this is not trunk but is branch \\\"${BB_BRANCH}\\\" ; \\\n\t# fi\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# code coverage-based testing is disabled temporarily, as we switch to tox.\n\n# This will eventually be added to a tox environment. The following comments\n\n# and variable settings are retained as notes for that future effort.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## # code coverage: install the \"coverage\" package from PyPI, do \"make\n\n## # test-coverage\" to do a unit test run with coverage-gathering enabled, then\n\n## # use \"make coverage-output\" to generate an HTML report. Also see \"make\n\n## # .coverage.el\" and misc/coding_tools/coverage.el for Emacs integration.\n\n##\n\n## # This might need to be python-coverage on Debian-based distros.\n\n## COVERAGE=coverage\n\n##\n\n## COVERAGEARGS=--branch --source=src/allmydata\n\n##\n\n## # --include appeared in coverage-3.4\n\n## COVERAGE_OMIT=--include '$(CURDIR)/src/allmydata/*' --omit '$(CURDIR)/src/allmydata/test/*'\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#code-checks: build version-and-path check-interfaces check-miscaptures -find-trailing-spaces -check-umids pyflakes\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Here is a list of testing tools that can be run with 'python' from a\n\n# virtualenv in which Tahoe has been installed. There used to be Makefile\n\n# targets for each, but the exact path to a suitable python is now up to the\n\n# developer. But as a hint, after running 'tox', ./.tox/py27/bin/python will\n\n# probably work.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# src/allmydata/test/bench_dirnode.py\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The check-speed and check-grid targets are disabled, since they depend upon\n\n# the pre-located $(TAHOE) executable that was removed when we switched to\n\n# tox. They will eventually be resurrected as dedicated tox environments.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The check-speed target uses a pre-established client node to run a canned\n\n# set of performance tests against a test network that is also\n\n# pre-established (probably on a remote machine). Provide it with the path to\n\n# a local directory where this client node has been created (and populated\n\n# with the necessary FURLs of the test network). This target will start that\n\n# client with the current code and then run the tests. Afterwards it will\n\n# stop the client.\n\n#\n\n# The 'sleep 5' is in there to give the new client a chance to connect to its\n\n# storageservers, since check_speed.py has no good way of doing that itself.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##.PHONY: check-speed\n\n##check-speed: .built\n\n##\tif [ -z '$(TESTCLIENTDIR)' ]; then exit 1; fi\n\n##\t@echo \"stopping any leftover client code\"\n\n##\t-$(TAHOE) stop $(TESTCLIENTDIR)\n\n##\t$(TAHOE) start $(TESTCLIENTDIR)\n\n##\tsleep 5\n\n##\t$(TAHOE) @src/allmydata/test/check_speed.py $(TESTCLIENTDIR)\n\n##\t$(TAHOE) stop $(TESTCLIENTDIR)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The check-grid target also uses a pre-established client node, along with a\n\n# long-term directory that contains some well-known files. See the docstring\n\n# in src/allmydata/test/check_grid.py to see how to set this up.\n\n##.PHONY: check-grid\n\n##check-grid: .built\n\n##\tif [ -z '$(TESTCLIENTDIR)' ]; then exit 1; fi\n\n##\t$(TAHOE) @src/allmydata/test/check_grid.py $(TESTCLIENTDIR) bin/tahoe\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# It would be nice if 'make clean' deleted any automatically-generated\n\n# _version.py too, so that 'make clean; make all' could be useable as a\n\n# \"what the heck is going on, get me back to a clean state', but we need\n\n# 'make clean' to work on non-checkout trees without destroying useful information.\n\n# Use 'make distclean' instead to delete all generated files.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# TARBALL GENERATION\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# delegated to tox, so setup.py can update setuptools if needed\n",
        "Line" : 223,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 16
    },
    "docs/Makefile" : {
      "ObjectId" : "ed9e59186f38f6b93a31e5042d383dfaedc027ea",
      "LastModified" : "2016-03-30T04:02:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "docs/specifications/Makefile" : {
      "ObjectId" : "2625e04d6f0215c2ec1139a1e6a1e10a7264fa8b",
      "LastModified" : "2009-02-22T06:40:54Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 9155
}