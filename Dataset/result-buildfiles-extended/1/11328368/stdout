{
  "Repository" : "11328368",
  "Revision" : "HEAD",
  "ObjectId" : "906d3991ddd232a7f78f0e51f29aeead008a139a",
  "CommitTime" : "2018-06-06T11:07:01Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0c2f028f10b6ef2bb98fe5704f2464f2973bc4b6",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 设置编译文件后缀\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 指定库文件输出路径\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 运行时类型信息\n",
        "Line" : 186,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : "# 快速的浮点模型\n",
        "Line" : 190,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# 多处理器编译\n",
        "Line" : 194,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# SEH\n",
        "Line" : 202,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# 添加依赖库\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# field 'x' will be initialized after field 'y'\n",
        "Line" : 237,
        "CharPositionInLine" : 72
      },
      "8" : {
        "Text" : "# 设置错误提示\n",
        "Line" : 240,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4061\") # 枚举数没有被 case 标签显式处理\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4100\") # 未引用的形参\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4191\") # 不安全的函数转换\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4548\") # 逗号前的表达式不起任何作用；应输入带副作用的表达式\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4201\")\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4242\") # 从“const int”转换到“BYTE”，可能丢失数据\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4244\") # 从“int”转换到“unsigned char”，可能丢失数据\n",
        "Line" : 242,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# needs to have dll-interface to be used by clients of class\n",
        "Line" : 249,
        "CharPositionInLine" : 70
      },
      "11" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4265\") # 类有虚函数，但析构函数不是虚拟的\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4267\") # 从“size_t”转换到“int”，可能丢失数据\n",
        "Line" : 250,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#  非 dll 接口 class“std::exception”用作 dll 接口 class“MyGUI::Exception”的基\n",
        "Line" : 252,
        "CharPositionInLine" : 70
      },
      "13" : {
        "Text" : "##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4305\")\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4350\") # 行为更改\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4355\") # “this”: 用于基成员初始值设定项列表\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4365\") # 不安全的整数转换\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4371\") # 类的布局可能与早期版本的编译器有所不同\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4435\") # 虚拟继承\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4480\")\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4481\")\n",
        "Line" : 253,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4514\") # “func” 未引用的内联函数已移除\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4548\")\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4571\")\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4623\") # 已将默认构造函数隐式定义为“已删除\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4625\") #未能生成复制构造函数，因为基类复制构造函数不可访问或已被删除\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4626\") #未能生成赋值运算符，因为基类赋值运算符不可访问或已被删除\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4640\") #本地静态对象的结构是非线程安全的\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4668\") # 没有将“symbol”定义为预处理器宏，用“0”替换“directives”\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4710\") # “function”: 函数未内联\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4711\") # \"function\":自动内联\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4820\") # “bytes”字节填充添加在构造“member_name”之后\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4836\")\n\n##SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4986\") # 异常规范与前面的声明不匹配\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4987\") # 使用了非标准扩展\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd4996\") # _CRT_SECURE_NO_WARNINGS\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd5026\") # 已将移动构造函数隐式定义为“已删除”\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /wd5027\") # 已将移动赋值运算符隐式定义为“已删除”\n",
        "Line" : 262,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# 添加项目\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# 工具\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/AndroidNdkGdb.cmake" : {
      "ObjectId" : "0677dcda9115ee1dd11762c034267085eadd3a48",
      "LastModified" : "2015-11-08T05:34:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014, Pavel Rojtberg\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n# this list of conditions and the following disclaimer in the documentation\n\n# and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from this\n\n# software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Usage:\n\n# 1. place AndroidNdkGdb.cmake somewhere inside ${CMAKE_MODULE_PATH}\n\n# 2. inside your project add\n\n#\n\n#    include(AndroidNdkGdb)\n\n#    android_ndk_gdb_enable()\n\n#    # for each target\n\n#    add_library(MyLibrary ...)\n\n#    android_ndk_gdb_debuggable(MyLibrary)    \n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add gdbserver and general gdb configuration to project\n\n# also create a mininal NDK skeleton so ndk-gdb finds the paths\n\n#\n\n# the optional parameter defines the path to the android project.\n\n# uses PROJECT_SOURCE_DIR by default.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# create custom target that depends on the real target so it gets executed afterwards\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# 1. generate essential Android Makefiles\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# 2. generate gdb.setup\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# 3. copy gdbserver executable\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# register a target for remote debugging\n\n# copies the debug version to NDK_GDB_SOLIB_PATH then strips symbols of original\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# create custom target that depends on the real target so it gets executed afterwards\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# 4. copy lib to obj\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# 5. strip symbols\n",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "cmake/AndroidNdkModules.cmake" : {
      "ObjectId" : "64f37fdee264493a5e6f97e336eaf8afb096ad60",
      "LastModified" : "2015-11-08T05:34:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014, Pavel Rojtberg\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n# this list of conditions and the following disclaimer in the documentation\n\n# and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from this\n\n# software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/android.toolchain.cmake" : {
      "ObjectId" : "ffa26126a79200d142e8ac1acecb1c095476be7e",
      "LastModified" : "2015-11-08T05:34:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r10d\n\n#  Requires cmake 2.6.3 or newer (2.8.9 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (and newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - ARMv5TE based CPU with software floating point operations\n\n#        \"armeabi-v7a\" - ARMv7 based devices with hardware FPU instructions\n\n#            this ABI target is used by default\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP\n\n#        \"x86\" - IA-32 instruction set\n\n#        \"mips\" - MIPS32 instruction set\n\n#\n\n#      64-bit ABIs for NDK r10 and newer:\n\n#        \"arm64-v8a\" - ARMv8 AArch64 instruction set\n\n#        \"x86_64\" - Intel64 instruction set (r1)\n\n#        \"mips64\" - MIPS64 instruction set (r6)\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#      Note: building for \"android-L\" requires explicit configuration.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r10c the possible values are:\n\n#\n\n#        * aarch64-linux-android-4.9\n\n#        * aarch64-linux-android-clang3.4\n\n#        * aarch64-linux-android-clang3.5\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-4.8\n\n#        * arm-linux-androideabi-4.9 (default)\n\n#        * arm-linux-androideabi-clang3.4\n\n#        * arm-linux-androideabi-clang3.5\n\n#        * mips64el-linux-android-4.9\n\n#        * mips64el-linux-android-clang3.4\n\n#        * mips64el-linux-android-clang3.5\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-4.8\n\n#        * mipsel-linux-android-4.9\n\n#        * mipsel-linux-android-clang3.4\n\n#        * mipsel-linux-android-clang3.5\n\n#        * x86-4.6\n\n#        * x86-4.8\n\n#        * x86-4.9\n\n#        * x86-clang3.4\n\n#        * x86-clang3.5\n\n#        * x86_64-4.9\n\n#        * x86_64-clang3.4\n\n#        * x86_64-clang3.5\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"armeabi-v6 with VFP\"\n\n#      (is forced to be ON) ABI.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS or ARM64_V8A or X86_64 or MIPS64\n\n#    will be set true, mutually exclusive. NEON option will be set true\n\n#    if VFP is set to NEON.\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable to suppress \"unused variable\" warning\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# inherit settings in recursive loads\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one is important\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this one not so much\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# rpath makes low sense for Android\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NDK search paths\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# known ABIs\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# API level defaults\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# detect current host platform\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 386,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 404,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# remember found paths\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# try to detect change\n",
        "Line" : 432,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# android NDK layout\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 471,
        "CharPositionInLine" : 71
      },
      "23" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 476,
        "CharPositionInLine" : 71
      },
      "24" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 480,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 487,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#message(\"machine: !${__machine}!\\narch: !${__arch}!\\nversion: !${__version}!\\ntoolchain: !${__toolchain}!\\n\")\n",
        "Line" : 568,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 602,
        "CharPositionInLine" : 39
      },
      "31" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# choose target ABI\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# set target ABI options\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 691,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 719,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# choose toolchain\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# choose native API level\n",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# adjust API level\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# validate\n",
        "Line" : 797,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# remember target ABI\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 827,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 904,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 914,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# clang\n",
        "Line" : 949,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 973,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# do nothing\n",
        "Line" : 979,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 989,
        "CharPositionInLine" : 42
      },
      "50" : {
        "Text" : "# before r8d\n",
        "Line" : 997,
        "CharPositionInLine" : 46
      },
      "51" : {
        "Text" : "# before r7\n",
        "Line" : 1002,
        "CharPositionInLine" : 42
      },
      "52" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1014,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1032,
        "CharPositionInLine" : 1
      },
      "54" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1034,
        "CharPositionInLine" : 137
      },
      "55" : {
        "Text" : "# r7-r8\n",
        "Line" : 1036,
        "CharPositionInLine" : 110
      },
      "56" : {
        "Text" : "# before r7\n",
        "Line" : 1038,
        "CharPositionInLine" : 36
      },
      "57" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1058,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# TODO: check if .so file exists before the renaming\n",
        "Line" : 1061,
        "CharPositionInLine" : 1
      },
      "59" : {
        "Text" : "# ccache support\n",
        "Line" : 1065,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1078,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Use gcc-ar if we have it for better LTO support.\n",
        "Line" : 1102,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1126,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1149,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1165,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1171,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1186,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# NDK flags\n",
        "Line" : 1193,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1210,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1237,
        "CharPositionInLine" : 62
      },
      "70" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1244,
        "CharPositionInLine" : 72
      },
      "71" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1247,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1258,
        "CharPositionInLine" : 91
      },
      "73" : {
        "Text" : "# STL\n",
        "Line" : 1273,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# C objects:\n",
        "Line" : 1284,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1302,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# before r7\n",
        "Line" : 1303,
        "CharPositionInLine" : 40
      },
      "77" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1304,
        "CharPositionInLine" : 1
      },
      "78" : {
        "Text" : "# linker flags\n",
        "Line" : 1324,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1328,
        "CharPositionInLine" : 1
      },
      "80" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1335,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# after r8b\n",
        "Line" : 1356,
        "CharPositionInLine" : 48
      },
      "82" : {
        "Text" : "# version 4.6\n",
        "Line" : 1364,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "# cache flags\n",
        "Line" : 1386,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1397,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# finish flags\n",
        "Line" : 1403,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# pie/pic\n",
        "Line" : 1420,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# configure rtti\n",
        "Line" : 1430,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1439,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1450,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1452,
        "CharPositionInLine" : 111
      },
      "91" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1455,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# setup output directories\n",
        "Line" : 1492,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1509,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1521,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1525,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1528,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1534,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1556,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1615,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1617,
        "CharPositionInLine" : 1
      },
      "102" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1619,
        "CharPositionInLine" : 37
      },
      "103" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1623,
        "CharPositionInLine" : 1
      },
      "104" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK : path to your NDK install\n\n#   NDK_CCACHE : path to your ccache executable\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   ARM64_V8A : TRUE for arm64-v8a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   X86_64 : TRUE if configured for x86_64\n\n#   MIPS : TRUE if configured for mips\n\n#   MIPS64 : TRUE if configured for mips64\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : from r5 to r10d; set only for NDK\n\n#   ANDROID_NDK_RELEASE_NUM : numeric ANDROID_NDK_RELEASE version (1000*major+minor)\n\n#   ANDROID_ARCH_NAME : \"arm\", \"x86\", \"mips\", \"arm64\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1628,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 105
    },
    "cmake/iOS_32.cmake" : {
      "ObjectId" : "1c8cba42db489ea0c3d1f47529a3bd2b75c26ac4",
      "LastModified" : "2015-11-10T06:41:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Standard settings\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Setup iOS platform\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setup iOS developer location\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find and use the most recent iOS sdk \n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set the architecture for iOS - using ARCHS_STANDARD_32_BIT sets armv6,armv7 and appears to be XCode's standard. \n\n# The other value that works is ARCHS_UNIVERSAL_IPHONE_OS but that sets armv7 only\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/iOS_64.cmake" : {
      "ObjectId" : "7063db0275189cda9512465c3aa071043001c364",
      "LastModified" : "2015-11-10T06:41:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Standard settings\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Setup iOS platform\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setup iOS developer location\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find and use the most recent iOS sdk \n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set the architecture for iOS - using ARCHS_STANDARD_32_BIT sets armv6,armv7 and appears to be XCode's standard. \n\n# The other value that works is ARCHS_UNIVERSAL_IPHONE_OS but that sets armv7 only\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "contrib/CMakeLists.txt" : {
      "ObjectId" : "cae327fa614905e933e21ea69f230347ea394c4e",
      "LastModified" : "2018-01-22T13:59:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/DirectX/CMakeLists.txt" : {
      "ObjectId" : "8168bab604ee31510f7816bb1a1cb005c71269a6",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/HLSLCrossCompiler/CMakeLists.txt" : {
      "ObjectId" : "66aae0c59ed31cd018a39c11692247d30207e8af",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/HLSLCrossCompiler/mk/CMakeLists.txt" : {
      "ObjectId" : "3cb25c0dbf4f6b8bb1b1842bb2422c43a23723a7",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ADD_EXECUTABLE( HLSLcc ${HLSLcc_SOURCES} )\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile 32-bit binaries for linux\n\n# IF(BUILD_PLATFORM_LINUX)\n\n#     ADD_LIBRARY( libHLSLcc-i386 ${libHLSLcc_SOURCES} )\n\n#     #ADD_EXECUTABLE( HLSLcc-i386 ${HLSLcc_SOURCES} )\n\n#     TARGET_LINK_LIBRARIES( HLSLcc-i386 libHLSLcc-i386)\n\n#     SET_TARGET_PROPERTIES(libHLSLcc-i386 PROPERTIES COMPILE_FLAGS -m32 LINK_FLAGS -m32 )\n\n#     SET_TARGET_PROPERTIES(HLSLcc-i386 PROPERTIES COMPILE_FLAGS -m32 LINK_FLAGS -m32 )\n\n# ENDIF()",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/MyGUIEngine/CMakeLists.txt" : {
      "ObjectId" : "3ba0720c1544b16a4cfc1d65c1d64085389ba7b3",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/android_native_app_glue/CMakeLists.txt" : {
      "ObjectId" : "6aa9a59adb7e7794569bd0c9e050966a92bfdacd",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/bullet/CMakeLists.txt" : {
      "ObjectId" : "939fa16a9f7b79f48dc165d46dca20d279ac65dd",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this line has to appear before 'PROJECT' in order to be able to disable incremental linking\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"Use double precision\"\n",
        "Line" : 14,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# \"Use Graphical Benchmark\"\n\n# \"Use custom vectormath library\"\n",
        "Line" : 15,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# \"Use BulletMultiThreading\"\n",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "# \"Use BulletMultiThreading\"\n",
        "Line" : 30,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# \"Use Multithreaded Benchmark\"\n",
        "Line" : 34,
        "CharPositionInLine" : 38
      },
      "6" : {
        "Text" : "# \"Build OpenCL demos for MiniCL (Generic CPU)\"\n",
        "Line" : 40,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "# \"Build OpenCL demos for MiniCL (Generic CPU)\"\n",
        "Line" : 42,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#\"Build OpenCL demos for AMD (GPU or CPU)\"\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "10" : {
        "Text" : "# \"Build OpenCL demos for AMD (GPU or CPU)\"\n",
        "Line" : 66,
        "CharPositionInLine" : 35
      },
      "11" : {
        "Text" : "# \"Build OpenCL demos for Intel (CPU)\"\n",
        "Line" : 80,
        "CharPositionInLine" : 37
      },
      "12" : {
        "Text" : "# \"Build OpenCL demos for Intel (CPU)\"\n",
        "Line" : 82,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : "# \"Build OpenCL demos for NVidia (GPU)\"\n",
        "Line" : 97,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "# \"Build OpenCL demos for NVidia (GPU)\"\n",
        "Line" : 99,
        "CharPositionInLine" : 40
      },
      "15" : {
        "Text" : "#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable\n",
        "Line" : 104,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# \"Build OpenCL demos for AMD (GPU or CPU)\"\n",
        "Line" : 113,
        "CharPositionInLine" : 37
      },
      "17" : {
        "Text" : "# \"Build OpenCL demos for AMD (GPU or CPU)\"\n",
        "Line" : 116,
        "CharPositionInLine" : 37
      },
      "18" : {
        "Text" : "# \"Build OpenCL demos for Intel (CPU)\"\n",
        "Line" : 125,
        "CharPositionInLine" : 48
      },
      "19" : {
        "Text" : "# \"Build OpenCL demos for Intel (CPU)\"\n",
        "Line" : 128,
        "CharPositionInLine" : 48
      },
      "20" : {
        "Text" : "# \"Build OpenCL demos for NVidia (GPU)\"\n",
        "Line" : 138,
        "CharPositionInLine" : 40
      },
      "21" : {
        "Text" : "# \"Build OpenCL demos for NVidia (GPU)\"\n",
        "Line" : 141,
        "CharPositionInLine" : 40
      },
      "22" : {
        "Text" : "# \"Create MSVC projectfiles with relative paths\"\n",
        "Line" : 154,
        "CharPositionInLine" : 59
      },
      "23" : {
        "Text" : "# \"Add MSVC postfix for executable names (_Debug)\"\n",
        "Line" : 155,
        "CharPositionInLine" : 49
      },
      "24" : {
        "Text" : "# \"Internal update serialization structures\"\n",
        "Line" : 156,
        "CharPositionInLine" : 52
      },
      "25" : {
        "Text" : "# \"Build original Bullet CPU demos\"\n",
        "Line" : 165,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 26
    },
    "contrib/bullet/src/BulletCollision/CMakeLists.txt" : {
      "ObjectId" : "c4723ae25c1a5809acbf8cd525e0661e1f3d7d73",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 277,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "contrib/bullet/src/BulletDynamics/CMakeLists.txt" : {
      "ObjectId" : "cc4727639fa5fac644ffae0cfc33022199d82820",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 144,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 1
    },
    "contrib/bullet/src/BulletMultiThreaded/CMakeLists.txt" : {
      "ObjectId" : "dcc5427703ae36ef92f236085c620be87c925b62",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SPURS_PEGatherScatterTask/SpuPEGatherScatterTask.cpp\n\n#SpuPEGatherScatterTaskProcess.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#Some GPU related stuff, mainly CUDA and perhaps OpenCL\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#SPURS_PEGatherScatterTask/SpuPEGatherScatterTask.h\n\n#SpuPEGatherScatterTaskProcess.h\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#Some GPU related stuff, mainly CUDA and perhaps OpenCL\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\t\t\tIF(INSTALL_EXTRA_LIBS)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t\t\tENDIF (INSTALL_EXTRA_LIBS)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 120,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 8
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/CMakeLists.txt" : {
      "ObjectId" : "224a3e0a85143ca209312aa1a5ddba68b6d2b20a",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/DX11/CMakeLists.txt" : {
      "ObjectId" : "52f335d232e2ec2a54d35569a586a950ef15ad56",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/AMD/CMakeLists.txt" : {
      "ObjectId" : "1fc07328e407f51af916c17b1060d95d840cecdd",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/Apple/CMakeLists.txt" : {
      "ObjectId" : "6e593a998d758614bad4dc121eed36cc8d18fff2",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/CMakeLists.txt" : {
      "ObjectId" : "cf9a0be288c222bc93494a63916489e90ef02a60",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/Intel/CMakeLists.txt" : {
      "ObjectId" : "ecca1813025535bc0ad1e889f3ecb29d349210ed",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/MiniCL/CMakeLists.txt" : {
      "ObjectId" : "97deb7e46671e56d17e45594953eec449275d9ab",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/bullet/src/BulletMultiThreaded/GpuSoftBodySolvers/OpenCL/NVidia/CMakeLists.txt" : {
      "ObjectId" : "884a0ffea855aa2bdba8a1de4a8d8aebd0d3181e",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenCL and HLSL Shaders.\n\n# Build rules generated to stringify these into headers\n\n# which are needed by some of the sources\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tOutputToVertexArray\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#headers are already installed by BulletMultiThreaded library\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/bullet/src/BulletSoftBody/CMakeLists.txt" : {
      "ObjectId" : "e66bd02d44f15aa3e286a4d76ef1c44acdff675f",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SUBDIRS( Solvers )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/bullet/src/CMakeLists.txt" : {
      "ObjectId" : "85b353b1b63661f4a877b4bb54cf7ac3faface3e",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Don't actually need to install any common files, the frameworks include everything\n",
        "Line" : 11,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "contrib/bullet/src/LinearMath/CMakeLists.txt" : {
      "ObjectId" : "8d8a54b9ebf78320bb5ee8b2b90bf5001e0dc4b6",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "contrib/bullet/src/Makefile.am" : {
      "ObjectId" : "0ecb5c9f5f039045ac52249954528cc5d4cee098",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "contrib/bullet/src/MiniCL/CMakeLists.txt" : {
      "ObjectId" : "f351b1ce745ff540656a98b30ed955006ff564f5",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MiniCL provides a small subset of OpenCL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\t\t\tIF(INSTALL_EXTRA_LIBS)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t\t\tENDIF (INSTALL_EXTRA_LIBS)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 63,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "contrib/freetype/CMakeLists.txt" : {
      "ObjectId" : "bf1da2c7ab542ec1fe0d7648b3a79e3135094ebe",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/freetype/src/tools/ftrandom/Makefile" : {
      "ObjectId" : "2e619299cdfcdb13ec98282f200b013d60a002c3",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# TOP_DIR and OBJ_DIR should be set by the user to the right directories,\n\n# if necessary.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The setup below is for gcc on a Unix-like platform.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EOF\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/gles/CMakeLists.txt" : {
      "ObjectId" : "f286ff348343df5acebb5376a607e3270d1a2288",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glew/CMakeLists.txt" : {
      "ObjectId" : "6b8f0293020772dc2dd1da98ec3428546ebe7560",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glfw/CMake/amd64-mingw32msvc.cmake" : {
      "ObjectId" : "705e251d3917f3787eca55aa3b3b0e303aee548f",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/glfw/CMake/i586-mingw32msvc.cmake" : {
      "ObjectId" : "393ddbda3019706378b25bb3d1abb634a3936866",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/glfw/CMake/i686-pc-mingw32.cmake" : {
      "ObjectId" : "9a46aef7b3457c8382fe16b3ad2e5a776f7f5f7d",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/glfw/CMake/i686-w64-mingw32.cmake" : {
      "ObjectId" : "9bd60936de2ed08f365601fbbfe404adbb37853a",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/glfw/CMake/modules/FindMir.cmake" : {
      "ObjectId" : "b1a495ba191db856c27e790cecd100a7288eeb89",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Mir on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   MIR_LIBRARIES   - Link these to use Wayland\n\n#   MIR_INCLUDE_DIR - Include directory for Wayland\n\n#\n\n# Copyright (c) 2014 Brandon Schaefer <brandon.schaefer@canonical.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/glfw/CMake/modules/FindVulkan.cmake" : {
      "ObjectId" : "d3a664a8bda6d16449d86c24781e0f28a3ebaec8",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Vulkan\n\n#\n\n# VULKAN_INCLUDE_DIR\n\n# VULKAN_LIBRARY\n\n# VULKAN_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/glfw/CMake/modules/FindWaylandProtocols.cmake" : {
      "ObjectId" : "8eb83f27ef88575f80a56198bd2635580452a914",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glfw/CMake/modules/FindXKBCommon.cmake" : {
      "ObjectId" : "0f571eeacb5cd91d4ef72a89a066142e5a6a0d0a",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find XKBCommon\n\n# Once done, this will define\n\n#\n\n#   XKBCOMMON_FOUND - System has XKBCommon\n\n#   XKBCOMMON_INCLUDE_DIRS - The XKBCommon include directories\n\n#   XKBCOMMON_LIBRARIES - The libraries needed to use XKBCommon\n\n#   XKBCOMMON_DEFINITIONS - Compiler switches required for using XKBCommon\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/glfw/CMake/x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "84b2c701ec1d9e2ee0b72f3031cfccb4a81d205e",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/glfw/CMakeLists.txt" : {
      "ObjectId" : "a9b5f53655ace6d93c8c60e364e04c3f7520b7f3",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Until all major package systems have moved to CMake 3,\n\n# we stick with the older INSTALL_NAME_DIR mechanism\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# \"Build shared libraries\"\n",
        "Line" : 23,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# \"Build the GLFW example programs\"\n",
        "Line" : 24,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# \"Build the GLFW test programs\"\n",
        "Line" : 25,
        "CharPositionInLine" : 26
      },
      "4" : {
        "Text" : "# \"Build the GLFW documentation\"\n",
        "Line" : 26,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# \"Generate installation target\"\n",
        "Line" : 27,
        "CharPositionInLine" : 22
      },
      "6" : {
        "Text" : "# \"Include internals in documentation\"\n",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# \"Force use of high-performance GPU on hybrid systems\"\n",
        "Line" : 31,
        "CharPositionInLine" : 33
      },
      "8" : {
        "Text" : "# \"Make glfwInit chdir to Contents/Resources\"\n",
        "Line" : 35,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : "# \"Populate the menu bar on first window creation\"\n",
        "Line" : 36,
        "CharPositionInLine" : 29
      },
      "10" : {
        "Text" : "# \"Use the full resolution of Retina displays\"\n",
        "Line" : 37,
        "CharPositionInLine" : 28
      },
      "11" : {
        "Text" : "# \"Use EGL for context creation\"\n",
        "Line" : 39,
        "CharPositionInLine" : 26
      },
      "12" : {
        "Text" : "# \"Use Wayland for context creation (implies EGL as well)\"\n",
        "Line" : 43,
        "CharPositionInLine" : 30
      },
      "13" : {
        "Text" : "#     \"Use Mir for context creation (implies EGL as well)\"\n",
        "Line" : 44,
        "CharPositionInLine" : 26
      },
      "14" : {
        "Text" : "# \"Use MSVC runtime library DLL\"\n",
        "Line" : 48,
        "CharPositionInLine" : 41
      },
      "15" : {
        "Text" : "# On Unix-like systems, shared libraries can use the soname system.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Set compiler specific flags\n\n#--------------------------------------------------------------------\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Enable link-time exploit mitigation features enabled by default on MSVC\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Compatibility with data execution prevention (DEP)\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Compatibility with address space layout randomization (ASLR)\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Compatibility with 64-bit address space layout randomization (ASLR)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Detect and select backend APIs\n\n#--------------------------------------------------------------------\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Find and add Unix math and time libraries\n\n#--------------------------------------------------------------------\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Win32 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use X11 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check for XRandR (modern resolution switching and gamma control)\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Check for Xinerama (legacy multi-monitor support)\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Check for Xf86VidMode (fallback gamma control)\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Backwards compatibility (see CMake bug 0006976)\n",
        "Line" : 224,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# Check for Xkb (X keyboard extension)\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Check for Xcursor\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Wayland for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Mir for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Cocoa for window creation and NSOpenGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Export GLFW library dependencies\n\n#--------------------------------------------------------------------\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Create generated files\n\n#--------------------------------------------------------------------\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add subdirectories\n\n#--------------------------------------------------------------------\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Install files other than the library\n\n# The library is installed by src/CMakeLists.txt\n\n#--------------------------------------------------------------------\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 41
    },
    "contrib/glfw/src/CMakeLists.txt" : {
      "ObjectId" : "5042aba382aa86dba035b84c5955adef6f7ee821",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, CMake doesn't know about .m\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n\n# win32_platform.h.  We define them here until a saner solution can be found\n\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable a reasonable set of warnings (no, -Wextra is not reasonable)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove the lib prefix on the DLL (but not the import library\n",
        "Line" : 87,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Add a suffix to the import library to avoid naming conflicts\n",
        "Line" : 90,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Add a suffix to the import library to avoid naming conflicts\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Add -fno-common to work around a bug in Apple's GCC\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Hide symbols not explicitly tagged for export from the shared library\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "contrib/glsl-optimizer/CMakeLists.txt" : {
      "ObjectId" : "9e41f1d5aeab5c2170ac44eff289f3169fd00cc9",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glslang/CMakeLists.txt" : {
      "ObjectId" : "fe1deb1231f1ddcb34dee794e5876b362ec7f4b8",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We depend on these for later projects, so they should come first.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/glslang/OGLCompilersDLL/CMakeLists.txt" : {
      "ObjectId" : "4954db9458472bfefe9f741a9859de6fdc7c9d97",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glslang/SPIRV/CMakeLists.txt" : {
      "ObjectId" : "5c169b141ad5c60c3d25ad000472051698518146",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glslang/glslang/CMakeLists.txt" : {
      "ObjectId" : "f431cc1125e959025d883d29502ac1fc7e7e8c6c",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This might be useful for making grammar changes:\n\n#\n\n# find_package(BISON)\n\n# add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp.h\n\n#                    COMMAND ${BISON_EXECUTABLE} --defines=${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp.h -t ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang.y -o ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp\n\n#                    MAIN_DEPENDENCY MachineIndependent/glslang.y\n\n#                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n\n# set(BISON_GLSLParser_OUTPUT_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/MachineIndependent/glslang_tab.cpp)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/glslang/glslang/OSDependent/Unix/CMakeLists.txt" : {
      "ObjectId" : "174cc9167e07e6f412d9bf00e1e0500784ff82e1",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/glslang/glslang/OSDependent/Windows/CMakeLists.txt" : {
      "ObjectId" : "399760c30a7d0ed38d204f18d09b53a2cbdc6080",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MinGW GCC complains about function pointer casts to void*.\n\n# Turn that off with -fpermissive.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/glslang/hlsl/CMakeLists.txt" : {
      "ObjectId" : "c7537e27126ae6c5fa9c57b77c80e76f434ab616",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/imgui/CMakeLists.txt" : {
      "ObjectId" : "5195fe9f5f3f43d0e58d5de722f7970c361b4679",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libiconv/CMakeLists.txt" : {
      "ObjectId" : "c033b4c4a6b092a61b976e372caacb27a14326fa",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libjpeg/CMakeLists.txt" : {
      "ObjectId" : "94367415cef9e2c99b4c1c2c0aa5e20c2d17408a",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libogg/CMakeLists.txt" : {
      "ObjectId" : "c21de4194940e8e8d4908caa7d760b74518143e8",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libpng/CMakeLists.txt" : {
      "ObjectId" : "60162a21c283831e00a970085f21c3e4a37a531d",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/libvorbis/CMakeLists.txt" : {
      "ObjectId" : "c4114afe9a465b5aee7070494a0d487590e60c1b",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/openal/CMakeLists.txt" : {
      "ObjectId" : "a3220907e325bec15b0b7255548b5dca7a8aef0c",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build file list for OpenAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check for the dlopen API for loading optional libs\n\n# Treat compile warnings as errors\n\n# Disable building the alsoft-config utility\n\n# Build and install example programs\n\n# Build and install test programs\n\n# Build and install utility programs\n\n# Install alsoft.conf sample configuration file\n\n# Install HRTF definition files\n\n# Install headers and libraries\n\n# Require Windows Multimedia backend\n",
        "Line" : 32,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# Require DirectSound backend\n",
        "Line" : 42,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Require MMDevApi backend\n",
        "Line" : 43,
        "CharPositionInLine" : 36
      },
      "4" : {
        "Text" : "# Require Solaris backend\n",
        "Line" : 44,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# \"Require PortAudio backend\"\n",
        "Line" : 45,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "# \"Require ALSA backend\"\n",
        "Line" : 46,
        "CharPositionInLine" : 31
      },
      "7" : {
        "Text" : "# \"Require PulseAudio backend\"\n",
        "Line" : 47,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "# \"Require JACK backend\"\n",
        "Line" : 48,
        "CharPositionInLine" : 31
      },
      "9" : {
        "Text" : "# \"Require OSS backend\"\n",
        "Line" : 49,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# \"Require CoreAudio backend\"\n",
        "Line" : 50,
        "CharPositionInLine" : 36
      },
      "11" : {
        "Text" : "# \"Require OpenSL backend\"\n",
        "Line" : 51,
        "CharPositionInLine" : 33
      },
      "12" : {
        "Text" : "# \"Require ARM Neon support\"\n",
        "Line" : 52,
        "CharPositionInLine" : 31
      },
      "13" : {
        "Text" : "# \"Require SndIO backend\"\n",
        "Line" : 53,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "# \"Require QSA backend\"\n\n# \"Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys\"\n",
        "Line" : 54,
        "CharPositionInLine" : 30
      },
      "15" : {
        "Text" : "#\"Build an import .lib using dlltool (requires sed)\"\n",
        "Line" : 56,
        "CharPositionInLine" : 34
      },
      "16" : {
        "Text" : "# \"Require SSE support\"\n",
        "Line" : 57,
        "CharPositionInLine" : 30
      },
      "17" : {
        "Text" : "# \"Require SSE2 support\"\n\n# \"Require SSE3 support\"\n",
        "Line" : 58,
        "CharPositionInLine" : 31
      },
      "18" : {
        "Text" : "# \"Require SSE4.1 support\"\n",
        "Line" : 60,
        "CharPositionInLine" : 33
      },
      "19" : {
        "Text" : "# \"Enable SSE support\"\n",
        "Line" : 61,
        "CharPositionInLine" : 28
      },
      "20" : {
        "Text" : "# \"Enable SSE2 support\"\n\n# \"Enable SSE3 support\"\n",
        "Line" : 62,
        "CharPositionInLine" : 29
      },
      "21" : {
        "Text" : "# \"Enable SSE4.1 support\"\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "# \"Enable ARM Neon support\"\n",
        "Line" : 65,
        "CharPositionInLine" : 29
      },
      "23" : {
        "Text" : "# \"Enable ALSA backend\"\n",
        "Line" : 66,
        "CharPositionInLine" : 30
      },
      "24" : {
        "Text" : "# \"Enable OSS backend\"\n",
        "Line" : 67,
        "CharPositionInLine" : 29
      },
      "25" : {
        "Text" : "# \"Enable Solaris backend\"\n",
        "Line" : 68,
        "CharPositionInLine" : 33
      },
      "26" : {
        "Text" : "# \"Enable SndIO backend\"\n",
        "Line" : 69,
        "CharPositionInLine" : 31
      },
      "27" : {
        "Text" : "# \"Enable QSA backend\"\n",
        "Line" : 70,
        "CharPositionInLine" : 29
      },
      "28" : {
        "Text" : "# \"Enable Windows Multimedia backend\"\n",
        "Line" : 71,
        "CharPositionInLine" : 31
      },
      "29" : {
        "Text" : "# \"Enable DirectSound backend\"\n",
        "Line" : 72,
        "CharPositionInLine" : 32
      },
      "30" : {
        "Text" : "# \"Enable MMDevApi backend\"\n",
        "Line" : 73,
        "CharPositionInLine" : 34
      },
      "31" : {
        "Text" : "# \"Enable PortAudio backend\"\n",
        "Line" : 74,
        "CharPositionInLine" : 35
      },
      "32" : {
        "Text" : "# \"Enable PulseAudio backend\"\n",
        "Line" : 75,
        "CharPositionInLine" : 36
      },
      "33" : {
        "Text" : "# \"Enable JACK backend\"\n",
        "Line" : 76,
        "CharPositionInLine" : 30
      },
      "34" : {
        "Text" : "# \"Enable CoreAudio backend\"\n",
        "Line" : 77,
        "CharPositionInLine" : 35
      },
      "35" : {
        "Text" : "# \"Enable OpenSL backend\"\n",
        "Line" : 78,
        "CharPositionInLine" : 32
      },
      "36" : {
        "Text" : "# \"Enable Wave Writer backend\"\n",
        "Line" : 79,
        "CharPositionInLine" : 30
      },
      "37" : {
        "Text" : "# QNX's gcc do not uses /usr/include and /usr/lib pathes by default\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Check if _POSIX_C_SOURCE needs to be set for POSIX functions\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Set defines for large file support\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# MSVC may need workarounds for C99 restrict and inline\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# TODO: Once we truly require C99, these restrict and inline checks should go\n\n# away.\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Make sure we have C99-style inline semantics with GCC (4.3 or newer).\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Force no inlining for the next test.\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Check if we have C99 variable length arrays\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Check if we have C99 bool\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Check if we have C11 static_assert\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Check if we have C11 alignas\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Check if we have C11 _Atomic\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Add definitions, compiler switches, etc.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Force enable -fPIC for CMake versions before 2.8.9 (later versions have\n\n# the POSITION_INDEPENDENT_CODE target property). The static common library\n\n# will be linked into the dynamic openal library, which requires all its\n\n# code to be position-independent.\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# We want RelWithDebInfo to actually include debug stuff (define _DEBUG\n\n# instead of NDEBUG)\n",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Set visibility/export options if available\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Yes GCC, really don't accept visibility modes you don't support\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Some systems need libm for some of the following math functions to work\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Check for the dlopen API (for dynamicly loading backend libs)\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Check if we have Windows headers\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# We need pthreads outside of Windows\n",
        "Line" : 548,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Some systems need pthread_np.h to get recursive mutexes\n",
        "Line" : 553,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Check for a 64-bit type\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Check for SSE support\n",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Check for ARM Neon support\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Default backends, always available\n",
        "Line" : 775,
        "CharPositionInLine" : 14
      },
      "63" : {
        "Text" : "# Check ALSA backend\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Check OSS backend\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Check Solaris backend\n",
        "Line" : 811,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Check SndIO backend\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Check QSA backend\n",
        "Line" : 842,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Check Windows-only backends\n",
        "Line" : 858,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Check MMSystem backend\n",
        "Line" : 860,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Check DSound backend\n",
        "Line" : 874,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Check for MMDevApi backend\n",
        "Line" : 888,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Check PortAudio backend\n",
        "Line" : 908,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Check PulseAudio backend\n",
        "Line" : 924,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Check JACK backend\n",
        "Line" : 940,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Check CoreAudio backend\n",
        "Line" : 956,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Some versions of OSX may need the AudioToolbox framework. Add it if\n\n# it's found.\n",
        "Line" : 971,
        "CharPositionInLine" : 12
      },
      "77" : {
        "Text" : "# Check for OpenSL (Android) backend\n",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Optionally enable the Wave Writer backend\n",
        "Line" : 1006,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# This is always available\n",
        "Line" : 1013,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Needed for openal.pc.in\n",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# End configuration\n",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Build a common library with reusable helpers\n",
        "Line" : 1055,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Build main library\n",
        "Line" : 1061,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Add an install target here\n",
        "Line" : 1131,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# Install alsoft.conf configuration file\n",
        "Line" : 1164,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Install HRTF definitions\n",
        "Line" : 1173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 87
    },
    "contrib/openal/cmake/CheckFileOffsetBits.cmake" : {
      "ObjectId" : "1dc154e489b716b872c11755d854da957cb8317a",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the _FILE_OFFSET_BITS macro is needed for large files\n\n# CHECK_FILE_OFFSET_BITS()\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Chris Robinson\n\n#\n\n# Redistribution and use is allowed according to the terms of the LGPL license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/openal/cmake/CheckSharedFunctionExists.cmake" : {
      "ObjectId" : "7975f2334ccf16dbe0034e79d929416c325cf342",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if a symbol exists as a function, variable, or macro\n\n# CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)\n\n#\n\n# Check that the <symbol> is available after including given header\n\n# <files> and store the result in a <variable>.  Specify the list\n\n# of files in one argument as a semicolon-separated list.\n\n#\n\n# If the header files define the symbol as a macro it is considered\n\n# available and assumed to work.  If the header files declare the\n\n# symbol as a function or variable then the symbol must also be\n\n# available for linking.  If the symbol is a type or enum value\n\n# it will not be recognized (consider using CheckTypeSize or\n\n# CheckCSourceCompiles).\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/openal/cmake/FindALSA.cmake" : {
      "ObjectId" : "519304d6322113f05a736f6ff3f2b98f5e422e2a",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find alsa\n\n# Find the alsa libraries (asound)\n\n#\n\n#  This module defines the following variables:\n\n#     ALSA_FOUND       - True if ALSA_INCLUDE_DIR & ALSA_LIBRARY are found\n\n#     ALSA_LIBRARIES   - Set when ALSA_LIBRARY is found\n\n#     ALSA_INCLUDE_DIRS - Set when ALSA_INCLUDE_DIR is found\n\n#\n\n#     ALSA_INCLUDE_DIR - where to find asoundlib.h, etc.\n\n#     ALSA_LIBRARY     - the asound library\n\n#     ALSA_VERSION_STRING - the version of alsa found (since CMake 2.8.8)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009-2011 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ALSA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/openal/cmake/FindAudioIO.cmake" : {
      "ObjectId" : "f0f8b2a59aff1f6e9987ef5d80f70da0b4008016",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find AudioIO includes and libraries\n\n#\n\n#   AUDIOIO_FOUND        - True if AUDIOIO_INCLUDE_DIR is found\n\n#   AUDIOIO_INCLUDE_DIRS - Set when AUDIOIO_INCLUDE_DIR is found\n\n#\n\n#   AUDIOIO_INCLUDE_DIR - where to find sys/audioio.h, etc.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/openal/cmake/FindDSound.cmake" : {
      "ObjectId" : "0ddf98aad51df37a0332d60614fd5af0e73d5995",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find DirectSound includes and libraries\n\n#\n\n#   DSOUND_FOUND        - True if DSOUND_INCLUDE_DIR & DSOUND_LIBRARY are found\n\n#   DSOUND_LIBRARIES    - Set when DSOUND_LIBRARY is found\n\n#   DSOUND_INCLUDE_DIRS - Set when DSOUND_INCLUDE_DIR is found\n\n#\n\n#   DSOUND_INCLUDE_DIR - where to find dsound.h, etc.\n\n#   DSOUND_LIBRARY     - the dsound library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/openal/cmake/FindFFmpeg.cmake" : {
      "ObjectId" : "96cbb6ed021dfbf50c1b0f04768c6b9f7699dffa",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: ts=2 sw=2\n\n# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)\n\n#\n\n# Once done this will define\n\n#  FFMPEG_FOUND         - System has the all required components.\n\n#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.\n\n#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.\n\n#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.\n\n#\n\n# For each of the components it will additionaly set.\n\n#   - AVCODEC\n\n#   - AVDEVICE\n\n#   - AVFORMAT\n\n#   - AVUTIL\n\n#   - POSTPROC\n\n#   - SWSCALE\n\n#   - SWRESAMPLE\n\n# the following variables will be defined\n\n#  <component>_FOUND        - System has <component>\n\n#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers\n\n#  <component>_LIBRARIES    - Link these to use <component>\n\n#  <component>_DEFINITIONS  - Compiler switches required for using <component>\n\n#  <component>_VERSION      - The components version\n\n#\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2011, Michael Jansen, <kde@michael-jansen.biz>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n### Macro: set_component_found\n\n#\n\n# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(STATUS \"  - ${_component} found.\")\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# message(STATUS \"  - ${_component} not found.\")\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\n\n### Macro: find_component\n\n#\n\n# Checks for the given component by invoking pkgconfig and then looking up the libraries and\n\n# include directories.\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check for all possible components.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check if the required components were found and add their stuff to the FFMPEG_* vars.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# message(STATUS \"Required component ${_component} present.\")\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# message(STATUS \"Required component ${_component} missing.\")\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Build the include path and library list with duplicates removed.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cache the vars.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Now set the noncached _FOUND vars for the components.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Compile the list of required vars\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Give a nice error message if some of the required vars are missing.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "contrib/openal/cmake/FindJACK.cmake" : {
      "ObjectId" : "b72fe3f9a91ed55050e41719d8d9486abd210c1b",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find JACK\n\n# Find the JACK libraries\n\n#\n\n#  This module defines the following variables:\n\n#     JACK_FOUND        - True if JACK_INCLUDE_DIR & JACK_LIBRARY are found\n\n#     JACK_INCLUDE_DIRS - where to find jack.h, etc.\n\n#     JACK_LIBRARIES    - the jack library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009-2011 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JACK_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/openal/cmake/FindOSS.cmake" : {
      "ObjectId" : "88ee66ad2e48a90aa42b0445b30b0879a3f50750",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OSS includes\n\n#\n\n#   OSS_FOUND        - True if OSS_INCLUDE_DIR is found\n\n#   OSS_INCLUDE_DIRS - Set when OSS_INCLUDE_DIR is found\n\n#\n\n#   OSS_INCLUDE_DIR - where to find sys/soundcard.h, etc.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/openal/cmake/FindPortAudio.cmake" : {
      "ObjectId" : "fad2313df834759e4d83d0feb18abb5178b434f1",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PortAudio includes and libraries\n\n#\n\n#   PORTAUDIO_FOUND        - True if PORTAUDIO_INCLUDE_DIR & PORTAUDIO_LIBRARY\n\n#                            are found\n\n#   PORTAUDIO_LIBRARIES    - Set when PORTAUDIO_LIBRARY is found\n\n#   PORTAUDIO_INCLUDE_DIRS - Set when PORTAUDIO_INCLUDE_DIR is found\n\n#\n\n#   PORTAUDIO_INCLUDE_DIR - where to find portaudio.h, etc.\n\n#   PORTAUDIO_LIBRARY     - the portaudio library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/openal/cmake/FindPulseAudio.cmake" : {
      "ObjectId" : "1f6f843a1d8d5402504d06d07cd67f1cecfc5b2d",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PulseAudio includes and libraries\n\n#\n\n#   PULSEAUDIO_FOUND        - True if PULSEAUDIO_INCLUDE_DIR &\n\n#                             PULSEAUDIO_LIBRARY are found\n\n#   PULSEAUDIO_LIBRARIES    - Set when PULSEAUDIO_LIBRARY is found\n\n#   PULSEAUDIO_INCLUDE_DIRS - Set when PULSEAUDIO_INCLUDE_DIR is found\n\n#\n\n#   PULSEAUDIO_INCLUDE_DIR - where to find pulse/pulseaudio.h, etc.\n\n#   PULSEAUDIO_LIBRARY     - the pulse library\n\n#   PULSEAUDIO_VERSION_STRING - the version of PulseAudio found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/openal/cmake/FindQSA.cmake" : {
      "ObjectId" : "0ad1fd43893f0dbd6b5935b9f8b17994a9570c4e",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find QSA includes and libraries\n\n#\n\n#   QSA_FOUND        - True if QSA_INCLUDE_DIR & QSA_LIBRARY are found\n\n#   QSA_LIBRARIES    - Set when QSA_LIBRARY is found\n\n#   QSA_INCLUDE_DIRS - Set when QSA_INCLUDE_DIR is found\n\n#\n\n#   QSA_INCLUDE_DIR - where to find sys/asoundlib.h, etc.\n\n#   QSA_LIBRARY     - the asound library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only check for QSA on QNX, because it conflicts with ALSA.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/openal/cmake/FindSDL2.cmake" : {
      "ObjectId" : "70e607a89f66ff616e3a4e2035b9689dc5f81438",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 84,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 85,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "contrib/openal/cmake/FindSDL_sound.cmake" : {
      "ObjectId" : "5557b55b1587a293afc2c41f57f7f3625b20c2b9",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locates the SDL_sound library\n\n#\n\n# This module depends on SDL being found and\n\n# must be called AFTER FindSDL.cmake or FindSDL2.cmake is called.\n\n#\n\n# This module defines\n\n#  SDL_SOUND_INCLUDE_DIR, where to find SDL_sound.h\n\n#  SDL_SOUND_FOUND, if false, do not try to link to SDL_sound\n\n#  SDL_SOUND_LIBRARIES, this contains the list of libraries that you need\n\n#    to link against. This is a read-only variable and is marked INTERNAL.\n\n#  SDL_SOUND_EXTRAS, this is an optional variable for you to add your own\n\n#    flags to SDL_SOUND_LIBRARIES. This is prepended to SDL_SOUND_LIBRARIES.\n\n#    This is available mostly for cases this module failed to anticipate for\n\n#    and you must add additional flags. This is marked as ADVANCED.\n\n#  SDL_SOUND_VERSION_STRING, human-readable string containing the version of SDL_sound\n\n#\n\n# This module also defines (but you shouldn't need to use directly)\n\n#   SDL_SOUND_LIBRARY, the name of just the SDL_sound library you would link\n\n#   against. Use SDL_SOUND_LIBRARIES for you link instructions and not this one.\n\n# And might define the following as needed\n\n#   MIKMOD_LIBRARY\n\n#   MODPLUG_LIBRARY\n\n#   OGG_LIBRARY\n\n#   VORBIS_LIBRARY\n\n#   SMPEG_LIBRARY\n\n#   FLAC_LIBRARY\n\n#   SPEEX_LIBRARY\n\n#\n\n# Typically, you should not use these variables directly, and you should use\n\n# SDL_SOUND_LIBRARIES which contains SDL_SOUND_LIBRARY and the other audio libraries\n\n# (if needed) to successfully compile on your system.\n\n#\n\n# Created by Eric Wing.\n\n# This module is a bit more complicated than the other FindSDL* family modules.\n\n# The reason is that SDL_sound can be compiled in a large variety of different ways\n\n# which are independent of platform. SDL_sound may dynamically link against other 3rd\n\n# party libraries to get additional codec support, such as Ogg Vorbis, SMPEG, ModPlug,\n\n# MikMod, FLAC, Speex, and potentially others.\n\n# Under some circumstances which I don't fully understand,\n\n# there seems to be a requirement\n\n# that dependent libraries of libraries you use must also be explicitly\n\n# linked against in order to successfully compile. SDL_sound does not currently\n\n# have any system in place to know how it was compiled.\n\n# So this CMake module does the hard work in trying to discover which 3rd party\n\n# libraries are required for building (if any).\n\n# This module uses a brute force approach to create a test program that uses SDL_sound,\n\n# and then tries to build it. If the build fails, it parses the error output for\n\n# known symbol names to figure out which libraries are needed.\n\n#\n\n# Responds to the $SDLDIR and $SDLSOUNDDIR environmental variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR used in building SDL.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL_LIBRARY or SDL2_LIBRARY to override this selection or set the CMake\n\n# environment CMAKE_INCLUDE_PATH to modify the search paths.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find SDL_sound.h\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake is giving me problems using TRY_COMPILE with the CMAKE_FLAGS\n\n# for the :STRING syntax if I have multiple values contained in a\n\n# single variable. This is a problem for the SDL2_LIBRARY variable\n\n# because it does just that. When I feed this variable to the command,\n\n# only the first value gets the appropriate modifier (e.g. -I) and\n\n# the rest get dropped.\n\n# To get multiple single variables to work, I must separate them with a \"\\;\"\n\n# I could go back and modify the FindSDL2.cmake module, but that's kind of painful.\n\n# The solution would be to try something like:\n\n# set(SDL2_TRY_COMPILE_LIBRARY_LIST \"${SDL2_TRY_COMPILE_LIBRARY_LIST}\\;${CMAKE_THREAD_LIBS_INIT}\")\n\n# Instead, it was suggested on the mailing list to write a temporary CMakeLists.txt\n\n# with a temporary test project and invoke that with TRY_COMPILE.\n\n# See message thread \"Figuring out dependencies for a library in order to build\"\n\n# 2005-07-16\n\n#     try_compile(\n\n#             MY_RESULT\n\n#             ${CMAKE_BINARY_DIR}\n\n#             ${PROJECT_SOURCE_DIR}/DetermineSoundLibs.c\n\n#             CMAKE_FLAGS\n\n#                     -DINCLUDE_DIRECTORIES:STRING=${SDL2_INCLUDE_DIR}\\;${SDL_SOUND_INCLUDE_DIR}\n\n#                     -DLINK_LIBRARIES:STRING=${SDL_SOUND_LIBRARY}\\;${SDL2_LIBRARY}\n\n#             OUTPUT_VARIABLE MY_OUTPUT\n\n#     )\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# To minimize external dependencies, create a sdlsound test program\n\n# which will be used to figure out if additional link dependencies are\n\n# required for the link phase.\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Calling\n\n# target_link_libraries(DetermineSoundLibs \"${SDL_SOUND_LIBRARY} ${SDL2_LIBRARY})\n\n# causes problems when SDL2_LIBRARY looks like\n\n# /Library/Frameworks/SDL2.framework;-framework Cocoa\n\n# The ;-framework Cocoa seems to be confusing CMake once the OS X\n\n# framework support was added. I was told that breaking up the list\n\n# would fix the problem.\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Keep trying to build a temp project until we find all missing libs.\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# message(\"TMP_TRY_LIBS ${TMP_TRY_LIBS}\")\n",
        "Line" : 168,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Write the CMakeLists.txt and test project\n\n# Weird, this is still sketchy. If I don't quote the variables\n\n# in the TARGET_LINK_LIBRARIES, I seem to loose everything\n\n# in the SDL2_LIBRARY string after the \"-framework\".\n\n# But if I quote the stuff in INCLUDE_DIRECTORIES, it doesn't work.\n",
        "Line" : 170,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# message(\"${MY_RESULT}\")\n\n# message(${MY_OUTPUT})\n",
        "Line" : 190,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# I expect that MPGLIB, VOC, WAV, AIFF, and SHN are compiled in statically.\n\n# I think Timidity is also compiled in statically.\n\n# I've never had to explcitly link against Quicktime, so I'll skip that for now.\n",
        "Line" : 194,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "# Find libmath\n",
        "Line" : 198,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# Find MikMod\n",
        "Line" : 208,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# Find ModPlug\n",
        "Line" : 229,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "# Find Ogg and Vorbis\n",
        "Line" : 250,
        "CharPositionInLine" : 16
      },
      "15" : {
        "Text" : "# Find SMPEG\n",
        "Line" : 310,
        "CharPositionInLine" : 16
      },
      "16" : {
        "Text" : "# Find FLAC\n",
        "Line" : 332,
        "CharPositionInLine" : 16
      },
      "17" : {
        "Text" : "# Hmmm...Speex seems to depend on Ogg. This might be a problem if\n\n# the TRY_COMPILE attempt gets blocked at SPEEX before it can pull\n\n# in the Ogg symbols. I'm not sure if I should duplicate the ogg stuff\n\n# above for here or if two ogg entries will screw up things.\n",
        "Line" : 354,
        "CharPositionInLine" : 16
      },
      "18" : {
        "Text" : "# Find OGG (needed for Speex)\n\n# We might have already found Ogg for Vorbis, so skip it if so.\n",
        "Line" : 377,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 19
    },
    "contrib/openal/cmake/FindSoundIO.cmake" : {
      "ObjectId" : "10450254d213fd602682f8b579e57752644da701",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find SoundIO (sndio) includes and libraries\n\n#\n\n#   SOUNDIO_FOUND        - True if SOUNDIO_INCLUDE_DIR & SOUNDIO_LIBRARY are\n\n#                          found\n\n#   SOUNDIO_LIBRARIES    - Set when SOUNDIO_LIBRARY is found\n\n#   SOUNDIO_INCLUDE_DIRS - Set when SOUNDIO_INCLUDE_DIR is found\n\n#\n\n#   SOUNDIO_INCLUDE_DIR - where to find sndio.h, etc.\n\n#   SOUNDIO_LIBRARY     - the sndio library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "6a3b773a4f7d87a80809a18761522fc16f989904",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/unzip/CMakeLists.txt" : {
      "ObjectId" : "07948d73df78aa98480ef20259972dc7b10c7373",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/zlib/CMakeLists.txt" : {
      "ObjectId" : "50e321d08a15e0758f631e7e03bdc00d0ad6dfda",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Enable building i686 assembly implementation\n\n#Enable building amd64 assembly implementation\n",
        "Line" : 8,
        "CharPositionInLine" : 18
      },
      "1" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# clear variable\n",
        "Line" : 47,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 121,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "sample/06.CubeWorld/CMakeLists.txt" : {
      "ObjectId" : "9c50564cdf6d1f31f1d3e96c5a2eb04c41d71905",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sample/09.Globalillumination/CMakeLists.txt" : {
      "ObjectId" : "496c7b6da660af9e1c11ae1469f9d0d85ce7dcb9",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "159968d6f275b6a1a0e97d7c6d0316d13fe1dab6",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/engine/CMakeLists.txt" : {
      "ObjectId" : "078ebd17b316a84a46069ef57f268d2de2fbb426",
      "LastModified" : "2018-01-22T13:59:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/lib3d/CMakeLists.txt" : {
      "ObjectId" : "e5deff04212413b3df5228966854f4439e784108",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libgui/CMakeLists.txt" : {
      "ObjectId" : "e07669773a4f55a537edef9838d91aeffa99ffbc",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libimage/CMakeLists.txt" : {
      "ObjectId" : "94eda503da65fb56f5661b86516625654a317540",
      "LastModified" : "2018-06-06T11:07:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libinput/CMakeLists.txt" : {
      "ObjectId" : "02be984601bb8c808ee8c010427ea644692357ba",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libmodel/CMakeLists.txt" : {
      "ObjectId" : "8c1d2ac25b94a5eff3f060cf4ee3676c301f8d06",
      "LastModified" : "2018-06-06T11:07:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libphysic/CMakeLists.txt" : {
      "ObjectId" : "a879ec2e2b620381728f6f9a123eacd69a842558",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libplatform/CMakeLists.txt" : {
      "ObjectId" : "ca7b0f79a514799d2c89ed0f7b150f1a7e18486b",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/librenderer/CMakeLists.txt" : {
      "ObjectId" : "b75c2d4c2ab1533f3469fecc5d82cc5b9953ca24",
      "LastModified" : "2018-01-22T13:59:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/libsound/CMakeLists.txt" : {
      "ObjectId" : "c4f51317a8f8f618436557eed1563a045909e207",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "6883166f4e636890808abadc2b37ba6ae452abca",
      "LastModified" : "2018-01-22T13:59:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/Editor/CMakeLists.txt" : {
      "ObjectId" : "3f83a11307b4a18d462c1a07b92e4d1bc0550ca9",
      "LastModified" : "2018-01-23T02:55:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/HLSLcc/CMakeLists.txt" : {
      "ObjectId" : "1d6cbc154468728af95127eadcc950837c1ff713",
      "LastModified" : "2017-06-14T04:45:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 90,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 4400
}