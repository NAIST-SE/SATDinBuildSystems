{
  "Repository" : "10401646",
  "Revision" : "HEAD",
  "ObjectId" : "115d932222013e1feacb29fcf86fc7bc1cb566c2",
  "CommitTime" : "2019-04-14T18:45:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b8b8aae426f52af9fcfc3f73cf530132fa2e0276",
      "LastModified" : "2019-02-25T19:39:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# allows us to override platform specific variables\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fix macOS RPATH issues\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# additional modules for loading libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# needed by ifs below\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# some basic and important variables\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# needed by doxygen\n",
        "Line" : 76,
        "CharPositionInLine" : 28
      },
      "6" : {
        "Text" : "# needs version above\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ensure KDB_DB_SYSTEM is an absolute path\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# process KDB_DB_SPEC so it is available everywhere\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# now add all directories\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add scripts after doc\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# is there anything to build except documentation?\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "57f1be9b963411cdc1de9d72ba055d7859419352",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Useful for debugging: COMMAND strace -o strace.out \"${command}\"\n\n# ~~~\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# exclude storage and KDB benchmark from mingw\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# exclude the OPMPHM benchmarks from mingw\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set USE_OPENMP here and define it in opmphm.c\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "4fd5b9f672cfb41d8ad188f200ea4788bc48bcab",
      "LastModified" : "2019-01-30T20:13:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ElektraPackaging needs to be included first (sets PACKAGE_ variables)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmake settings for use by find_package\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# pkg-config files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/ElektraCache.cmake" : {
      "ObjectId" : "309ad1816728c7dd056881e9a4f857eafdbec677",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# CACHE\n\n#\n\n# Here all cache variables are set\n\n#\n\n#\n\n# If you add something here, make sure to also add it in\n\n# src/plugins/constants/\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set BINDINGS cache variable\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO include swig_ruby when issue #1770 is resolved (also in scripts/configure-*)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# set TOOLS cache variable\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Runtime paths for KDB\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Compile options\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Build properties\n\n#\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install documentation makes no sense if it is not build (even though the option would not harm)\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# install testing makes no sense if it is not build (even though the option would not harm)\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#\n\n# Developer builds\n\n#\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Target installation folders\n\n#\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Misc.\n\n#\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The following settings might be relevant to a few users:\n",
        "Line" : 388,
        "CharPositionInLine" : 24
      },
      "13" : {
        "Text" : "# The following settings are internal (not to be changed by users):\n",
        "Line" : 410,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 14
    },
    "cmake/ElektraClasspath.cmake" : {
      "ObjectId" : "cc8abd86d075ad79d3b1c147f3e06cfb56d01c4e",
      "LastModified" : "2018-07-25T20:03:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ElektraCompiling.cmake" : {
      "ObjectId" : "dd304640362452d60195fce11fb6b449aceac6d8",
      "LastModified" : "2018-10-23T17:28:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n#\n\n# This file sets compiler flags and things related\n\n# to compiler detection\n\n#\n\n#\n\n# make sure to update src/plugins/constants/constants.c\n\n#\n\n# if new flags are added\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# The mode (standard) to be used by the compiler\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# check if -Wl,--version-script linker option is supported TODO: darwin ld only supports -Wl,-exported_symbols_list + the file syntax is\n\n# different\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Extra handling/flags for specific compilers/OS\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ~~~\n\n# older clang did not support non-pod-varargs (will compile, but crash if used)\n\n# so simply avoid to use it\n\n# icc also crashes (but just warns, no error)\n\n# ~~~\n\n# set (EXTRA_FLAGS \"${EXTRA_FLAGS} -Wno-error=non-pod-varargs\")\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# not supported by icc:\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# set (EXTRA_FLAGS \"${EXTRA_FLAGS} -Wno-ignored-qualifiers\")\n",
        "Line" : 60,
        "CharPositionInLine" : 65
      },
      "7" : {
        "Text" : "# mingw builds need wine to be installed\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# not supported by icc:\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# set (EXTRA_FLAGS \"${EXTRA_FLAGS} -Wno-ignored-qualifiers\")\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# not supported by icc/clang:\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# needed by gcc4.7 for C++11 chrono\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#\n\n# Platform specific settings\n\n#\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ~~~\n\n# statically link in libimf.so libsvml.so libirng.so libintlc.so.5\n\n# and fix warning #10237: -lcilkrts linked in dynamically, # static library not available\n\n# ~~~\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# cmake bug: cmake thinks Intel does not know isystem\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#\n\n# ASAN\n\n#\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# in case the ubsan library exists, link it otherwise some tests will fail due to missing symbols on unix\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Work around error “unrecognized option '--push-state'”\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# this is needed because of wrong pthread detection\n",
        "Line" : 141,
        "CharPositionInLine" : 31
      },
      "19" : {
        "Text" : "# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69443\n",
        "Line" : 142,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "#\n\n# Common flags can be used by both C and C++ and by all supported compilers (gcc, mingw, icc, clang)\n\n#\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# allow long long in C++ code\n",
        "Line" : 152,
        "CharPositionInLine" : 52
      },
      "22" : {
        "Text" : "# Not every compiler understands -Wmaybe-uninitialized\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined\")\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# Merge all flags\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake/ElektraCoverage.cmake" : {
      "ObjectId" : "93ed2457349d45914dcb90f03f0fa9ea930b7f21",
      "LastModified" : "2018-10-11T17:34:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# coverage integration\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make all invocations of lcov and genhtml quiet\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# directory for html+info files\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# script to remove source files not from Elektra\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/ElektraDocSet.cmake" : {
      "ObjectId" : "4c8bfcba6389d839953ee11b8ebbb143b4e658a2",
      "LastModified" : "2018-07-25T20:03:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ElektraPackaging.cmake" : {
      "ObjectId" : "38b11d55adfd770f110ce56253e4d98619b8c03f",
      "LastModified" : "2018-07-25T20:03:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed because otherwise files would be written to system during creating the package\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# package is not relocatable:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find architecture\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Try to find distro name and distro-specific arch\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# For Debian-based distros we want to create DEB packages.\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# no dependencies without any PLUGINS\n",
        "Line" : 63,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : "# We need to alter the architecture names as per distro rules\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/ElektraUninstall.cmake" : {
      "ObjectId" : "55457fc037f6a1c7b5592c4c4c305fc7adda8c55",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Much faster is:\n\n# xargs rm < install_manifest.txt\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# message (MANIFEST IS ${MANIFEST})\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==========\n\n# = Python =\n\n# ==========\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# =========\n\n# = Files =\n\n# =========\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ===============\n\n# = Directories =\n\n# ===============\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The following directories might be empty. The order of the directories is important, since we remove them in the given order. A directory\n\n# that occurs later in the list might be empty, since we removed all its subdirectories before.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/DownloadProject.cmake" : {
      "ObjectId" : "65ec50ececdfa8f269e88d23f632bf651fb4f495",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file DownloadProjectLicense.txt or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 104,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 113,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also the base point below which the default source and binary dirs\n\n# will be. The prefix must always be an absolute path.\n",
        "Line" : 121,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 132,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of the CMakeCache.txt to be copied across due to it not\n\n# expecting there to be a project within a project.  This causes the hard-coded paths in the cache to be copied and builds to fail.\n\n# To mitigate this, we simply remove the cache if it exists before we configure the new project.  It is safe to do so because it\n\n# will be re-generated.  Since this is only executed at the configure step, it should not cause additional builds or downloads.\n",
        "Line" : 142,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download. If we've already previously done these steps, they will not\n\n# cause anything to be updated, so extra rebuilds of the project won't occur. Make sure to pass through CMAKE_MAKE_PROGRAM in case\n\n# the main project has this set to something not findable on the PATH.\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindANTLR4CPP.cmake" : {
      "ObjectId" : "67bc012cd6ee658fbcb3fc96e9adca14765f08c1",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the C++ runtime of ANTLR\n\n# ====================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Once done this will define\n\n#\n\n# - ANTLR4CPP_FOUND: Tells us if the script was able to find the C++ runtime of ANTLR\n\n# - ANTLR4CPP_INCLUDE_DIRS: The ANTLR C++ runtime include directories\n\n# - ANTLR4CPP_LIBRARIES: The libraries needed to use the ANTLR C++ runtime\n\n#\n\n# This script is a modified version of the code available here: https://cmake.org/Wiki/CMake:How_To_Find_Libraries#Writing_find_modules\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindAugeas.cmake" : {
      "ObjectId" : "cafb8a0afcc406d9c514f4b8179f3f50534d2f22",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Finds augeas and its libraries\n\n# Uses the same semantics as pkg_check_modules, i.e. LIBAUGEAS{_FOUND,_INCLUDE_DIR,_LIBRARIES}\n\n#\n\n# This is an adapted version of FindSystemd.cmake:\n\n# Copyright: Red Hat, Inc. 2013\n\n# Author: Martin Briza <mbriza@redhat.com>\n\n#\n\n# Distributed under the BSD license. See COPYING-CMAKE-SCRIPTS for details.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 14,
        "CharPositionInLine" : 72
      },
      "2" : {
        "Text" : "# try to find libaugeas via pkg-config\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindCppCMS.cmake" : {
      "ObjectId" : "d5d05e7d1c20a5832e7e495e7d517ad8e50a8a2c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Script created on basis of\n\n# https://theogit.fmi.uni-stuttgart.de/bahrdtdl/oscar/blob/8c6d602d044d726aa3d56138100a14f3d6f4c22a/cmake/FindCPPCMS.cmake\n\n#\n\n# Find the cppcms includes and library and the booster include and library\n\n#\n\n#  CPPCMS_INCLUDE_DIR  - Where to find cppcms include sub-directory.\n\n#  CPPCMS_LIBRARIES    - List of libraries when using CPPCMS.\n\n#  CPPCMS_FOUND        - True if CPPCMS found.\n\n#  BOOSTER_INCLUDE_DIR - Where to find booster include sub-directory.\n\n#  BOOSTER_LIBRARIES   - List of libraries when using BOOSTER.\n\n#  BOOSTER_FOUND       - True if BOOSTER found.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent.\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set CPPCMS_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindDBus.cmake" : {
      "ObjectId" : "cbd075b5e99241fa0f89370f22bdec4e315f4b53",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# - Try to find the low-level D-Bus library\n\n# Once done this will define\n\n#\n\n#  DBUS_FOUND - system has D-Bus\n\n#  DBUS_INCLUDE_DIR - the D-Bus include directory\n\n#  DBUS_ARCH_INCLUDE_DIR - the D-Bus architecture-specific include directory\n\n#  DBUS_LIBRARIES - the libraries needed to use D-Bus\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# Copyright (c) 2008, Kevin Kofler, <kevin.kofler@chello.at>\n\n# modeled after FindLibArt.cmake:\n\n# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n# ~~~\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindDiscount.cmake" : {
      "ObjectId" : "b382bc18270a2c8d8de1ea61314fb08999104617",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# -------------------------------------------------------------------------------\n\n# Copyright (c) 2013-2013, Lars Baehren <lbaehren@gmail.com>\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# -------------------------------------------------------------------------------\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# DISCOUNT is an implementation of John Gruber's Markdown markup language.\n\n#\n\n# DISCOUNT is free software written by David Parsons <orc@pell.chi.il.us>;\n\n# it is released under a BSD-style license that allows you to do\n\n# as you wish with it as long as you don't attempt to claim it as\n\n# your own work.\n\n#\n\n# The following variables are set when DISCOUNT is found:\n\n#  DISCOUNT_FOUND      = Set to true, if all components of DISCOUNT have been found.\n\n#  DISCOUNT_INCLUDES   = Include path for the header files of DISCOUNT\n\n#  DISCOUNT_LIBRARIES  = Link these to use DISCOUNT\n\n#  DISCOUNT_LFLAGS     = Linker flags (optional)\n\n# ~~~\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ____________________________________________________________________________ Check for the header files\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# ____________________________________________________________________________ Check for the library\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# ____________________________________________________________________________ Check for the executable\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# ____________________________________________________________________________ Actions taken when all components have been found\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Update DISCOUNT_ROOT DIR\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Display variables\n",
        "Line" : 85,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "# ____________________________________________________________________________ Mark advanced variables\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "cmake/Modules/FindGLib.cmake" : {
      "ObjectId" : "e11b7449fefe3ca850342cf14cd25f891c71fc07",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindGLib.cmake <https://github.com/nemequ/gnome-cmake>\n\n#\n\n# CMake support for GLib/GObject/GIO.\n\n#\n\n# License:\n\n#\n\n# Copyright (c) 2016 Evan Nemerson <evan@nemerson.com>\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the\n\n# \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,\n\n# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to\n\n# the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR\n\n# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGObjectIntrospection.cmake" : {
      "ObjectId" : "3d11db709474ad1da95ed8f2eb1580f8f311f9c1",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# - try to find gobject-introspection\n\n#\n\n# Once done this will define\n\n#\n\n#  INTROSPECTION_FOUND - system has gobject-introspection\n\n#  INTROSPECTION_SCANNER - the gobject-introspection scanner, g-ir-scanner\n\n#  INTROSPECTION_COMPILER - the gobject-introspection compiler, g-ir-compiler\n\n#  INTROSPECTION_GENERATE - the gobject-introspection generate, g-ir-generate\n\n#  INTROSPECTION_GIRDIR\n\n#  INTROSPECTION_TYPELIBDIR\n\n#  INTROSPECTION_CFLAGS\n\n#  INTROSPECTION_LIBS\n\n#\n\n# Copyright (C) 2010, Pino Toscano, <pino@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGTest.cmake" : {
      "ObjectId" : "0d996d871176a4b5caf9aeb61e62011d466352ee",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# This script reads the GTEST_ROOT variable, if available,\n\n# looking into it as base directory of the Google Test sources.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindHaskell.cmake" : {
      "ObjectId" : "44caeafe3b6c9cb4e6ae9536749928b2ec3408b2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Find the haskell environment required for the haskell bindings and plugins.\n\n# Only searches for the GHC compiler and not other haskell compilers as it is\n\n# the most widespread and advanced haskell compiler.\n\n#\n\n#  CABAL_EXECUTABLE       - Path to the cabal executable\n\n#  C2HS_EXECUTABLE        - Path to the c2hs executable\n\n#  ALEX_EXECUTABLE        - Path to the alex executable\n\n#  HAPPY_EXECUTABLE       - Path to the happy executable\n\n#  GHC_EXECUTABLE         - Path to the ghc executable\n\n#  GHC-PKG_EXECUTABLE     - Path to the ghc-pkg executable\n\n#  GHC_HSPEC_FOUND        - True if the hspec library is available\n\n#  GHC_QUICKCHECK_FOUND   - True if the QuickCheck library is available\n\n#  GHC_VERSION            - The numeric version of the ghc executable\n\n#  GHC_TARGET_PLATFORM    - The target platform string of ghc\n\n#                           sanitized (darwin -> osx, unknown-linux -> linux)\n\n#  CABAL_DYNLIB_PATH      - The default path where cabal installs dynamic libraries\n\n#  CABAL_CUSTOM_TARGET    - The default dependencies of the custom Setup.hs for plugins\n\n#  HASKELL_SHARED_SANDBOX - The sandbox containing all required dependencies for haskell things\n\n#  HASKELL_FOUND          - True if the whole required haskell environment exists\n\n#    This variable is set to true if CABAL_EXECUTABLE, C2HS_EXECUTABLE, GHC_EXECUTABLE\n\n#    and GHC-PKG_EXECUTABLE are all available. If BUILD_TESTING is enabled, it also\n\n#    requires GHC_HSPEC_FOUND and GHC_QUICKCHECK_FOUND to be true.\n\n#  HASKELL_NOTFOUND_INFO  - A string describing which haskell dependency is missing\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check for hspec and QuickCheck ghc-pkg return code is 0 on success, 1 otherwise\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# correct the mapping..\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# normalize the result variables, 0 means success which corresponds to 1 in cmake booleans\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find the default cabal installation path sort of hacky but i haven't found a uniform way of doing this first find the global cabal\n\n# directory\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# filter the library path matching our ghc version, ignoring architectures for now\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# dependencies for the default cmake Setup.hs For cabal the system version should be used\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# By using cabal sandboxes we can install hspec and QuickCheck to the sandbox without any concerns as they are independent from the global\n\n# environment. So they are not required. All set, have fun with haskell!\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindIconv.cmake" : {
      "ObjectId" : "906471ded54560ccecd19bfdb6bf2eb790f19147",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying file Copyright.txt or https://cmake.org/licensing for details.\n\n# TODO: Remove this file after we require CMake 3.11\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindIconv\n---------\n\nThis module finds the ``iconv()`` POSIX.1 functions on the system.\nThese functions might be provided in the regular C library or externally\nin the form of an additional library.\n\nThe following variables are provided to indicate iconv support:\n\n.. variable:: Iconv_FOUND\n\n  Variable indicating if the iconv support was found.\n\n.. variable:: Iconv_INCLUDE_DIRS\n\n  The directories containing the iconv headers.\n\n.. variable:: Iconv_LIBRARIES\n\n  The iconv libraries to be linked.\n\n.. variable:: Iconv_IS_BUILT_IN\n\n  A variable indicating whether iconv support is stemming from the\n  C library or not. Even if the C library provides `iconv()`, the presence of\n  an external `libiconv` implementation might lead to this being false.\n\nAdditionally, the following :prop_tgt:`IMPORTED` target is being provided:\n\n.. variable:: Iconv::Iconv\n\n  Imported target for using iconv.\n\nThe following cache variables may also be set:\n\n.. variable:: Iconv_INCLUDE_DIR\n\n  The directory containing the iconv headers.\n\n.. variable:: Iconv_LIBRARY\n\n  The iconv library (if not implicitly given in the C library).\n\n.. note::\n  On POSIX platforms, iconv might be part of the C library and the cache\n  variables ``Iconv_INCLUDE_DIR`` and ``Iconv_LIBRARY`` might be empty.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# iconv can only be provided in libc on a POSIX system. If any cache variable is already set, we'll skip this test.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We always suppress the message here: Otherwise on supported systems not having iconv in their C library (e.g. those using\n\n# libiconv) would always display a confusing \"Looking for iconv - not found\" message\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The following code will not work, but it's sufficient to see if it compiles. Note: libiconv will define the iconv\n\n# functions as macros, so CheckSymbolExists will not yield correct results.\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindLibBotan.cmake" : {
      "ObjectId" : "eb225cfc9db02277e13c833c33c071d82abedc7a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Try to find the Botan library.\n\n#\n\n# Defines:\n\n#\n\n#  Botan_FOUND - set if the system has the Botan library\n\n#  Botan_LIBRARIES - the linker libraries needed to use the Botan library\n\n#  Botan_INCLUDE_DIRS - the path to the include files of the Botan library\n\n#\n\n# Copyright (c) 2017 Peter Nirschl <peter.nirschl@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try to compile and link a minimal sample program against libbotan\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLibEv.cmake" : {
      "ObjectId" : "761bcedee9e268e18d2b9832ce1befc2d84e59c4",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Try to find libev\n\n# Once done, this will define\n\n#\n\n# LIBEV_FOUND        - system has libev\n\n# LIBEV_INCLUDE_DIRS - libev include directories\n\n# LIBEV_LIBRARIES    - libraries needed to use libev\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLibFA.cmake" : {
      "ObjectId" : "58ca52049321df82945c9c5b64ad54d2f2f3396a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Try to find LibFA, usually bundled with Augeas\n\n# Once done this will define\n\n#  LIBFA_FOUND        - System has LibFA\n\n#  LIBFA_INCLUDE_DIRS - The LibFA include directories\n\n#  LIBFA_LIBRARIES    - The libraries needed to use LibFA\n\n#  LIBFA_LIBRARY_DIRS - The directories containing the required libraries\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handles the REQUIRED, QUIET and version-related arguments to find_package(). It also sets the LIBFA_FOUND variable.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# hide variables from the CMake GUI\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLibGit2.cmake" : {
      "ObjectId" : "1b4b5f082b3fa7d3b3ced2b77e7a535fc555025a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Defines:\n\n#\n\n# LibGit2_FOUND\n\n# LibGit2_INCLUDE_DIR\n\n# LibGit2_LIBRARIES\n\n# LibGit2_VERSION\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLibGpgme.cmake" : {
      "ObjectId" : "454f87544011e5c403a0ca4f6106bb35dedd4f2d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Detect the \"GnuPG Made Easy\" (GPGME) library on the system.\n\n#\n\n# LIBGPGME_FOUND - set if GPGME is detected\n\n# LIBGPGME_CFLAGS - GPGME compiler flags\n\n# LIBGPGME_LIBRARIES - GPGME linker flags\n\n#\n\n# Copyright (c) 2018 Peter Nirschl.\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license. For details see the accompanying COPYING-CMAKE-SCRIPTS ile.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# reset variables\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if gpgme-config has been found\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# workaround for MinGW/MSYS CMake can't starts shell scripts on windows so it needs to use sh.exe\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# parse include directory from C-Flags\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindLibJWT.cmake" : {
      "ObjectId" : "41f781193694dc73c311dafb0d71ff64d725979f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Find the libjwt includes and library\n\n#\n\n#  LIBJWT_INCLUDE_DIR  - Where to find libjwt include sub-directory.\n\n#  LIBJWT_LIBRARY      - Path to libjwt library.\n\n#  LIBJWT_FOUND        - True if libjwt found.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent.\n",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set LIBJWT_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLibOpenSSL.cmake" : {
      "ObjectId" : "3efba83e912e9fbb25025eaa5d0b20ef24fe78ff",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Try to find the OpenSSL library.\n\n#\n\n# Defines:\n\n#\n\n#  OPENSSL_FOUND - set if the system has the OpenSSL library\n\n#  OPENSSL_LIBRARIES - the linker libraries needed to use the OpenSSL library\n\n#  OPENSSL_INCLUDE_DIR - the path to the include files of the OpenSSL library\n\n#\n\n# Copyright (c) 2017 Peter Nirschl <peter.nirschl@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use Homebrew version of OpenSSL on macOS, if OpenSSL is installed and `OPENSSL_ROOT_DIR` is not set.\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# ~~~\n\n# Disable warnings about unset CMake policy in `FindOpenSSL.cmake`.\n\n# TODO: Remove the calls to `cmake_policy` after the CMake developers update `FindOpenSSL.cmake`.\n\n# ~~~\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Policy CMP0054 is not known to CMake 3.0\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# try to compile and link a minimal sample program against libcrypto\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindLibRt.cmake" : {
      "ObjectId" : "4a9e528d2a5abc5e15c506bf4877691a4029db59",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Finds librt\n\n# Sets the variables LIBRT_FOUND and LIBRT_LIBRARIES\n\n#\n\n# Distributed under the BSD license. See COPYING-CMAKE-SCRIPTS for details.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handles the REQUIRED, QUIET and version-related arguments to find_package(). It also sets the LIBRT_FOUND variable.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# hide variables from the CMake GUI\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Most systems (except Linux) have librt features built into their libc. If no librt has been found, there is still a chance that the system\n\n# supports our desired features.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindLibgcrypt.cmake" : {
      "ObjectId" : "2ebe1ef04f73909a8822a09694e14c6212e94f9c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Module for Libgcrypt\n\n# =========================\n\n#\n\n# This module defines the variables listed below.\n\n#\n\n# - Libgcrypt_FOUND:        This variable will be set to a value that evaluates to true, if the system includes Libgcrypt.\n\n# - Libgcrypt_INCLUDE_DIRS: This variable stores the Libgcrypt include directory.\n\n# - Libgcrypt_LIBRARIES:    This variable stores the libraries needed to link to Libgcrypt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to compile and link a minimal sample program against libgcrypt\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLua.cmake" : {
      "ObjectId" : "446e40c7e2bf7d0f6c20b8485a06db992d250447",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# .rst:\n\n# FindLua\n\n# -------\n\n#\n\n#\n\n#\n\n# Locate Lua library This module defines\n\n#\n\n# ::\n\n#\n\n#   LUA_FOUND          - if false, do not try to link to Lua\n\n#   LUA_LIBRARIES      - both lua and lualib\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\n\n#   LUA_VERSION_STRING - the version of Lua found\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\n\n#\n\n#\n\n#\n\n# Note that the expected include convention is\n\n#\n\n# ::\n\n#\n\n#   #include \"lua.h\"\n\n#\n\n# and not\n\n#\n\n# ::\n\n#\n\n#   #include <lua/lua.h>\n\n#\n\n# This is because, the lua location is not standardized and may exist in\n\n# locations other than lua/\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# =============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Copyright 2013 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n# =============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n# ~~~\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 67,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 80,
        "CharPositionInLine" : 45
      },
      "5" : {
        "Text" : "# Compare only MAJOR.MINOR\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Fink\n",
        "Line" : 156,
        "CharPositionInLine" : 7
      },
      "7" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 157,
        "CharPositionInLine" : 14
      },
      "8" : {
        "Text" : "# Blastwave\n",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 186,
        "CharPositionInLine" : 9
      },
      "11" : {
        "Text" : "# At least 5.[012] have different ways to express the version so all of them need to be tested. Lua 5.2 defines LUA_VERSION and\n\n# LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# LUA_VERSION_STRING available from here\n",
        "Line" : 252,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Modules/FindMySqlCppConn.cmake" : {
      "ObjectId" : "630615f6d33f88f7c4ea3ff3cf468c9a77bc690a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Find the libmysqlcppconn includes and library\n\n#\n\n#  MYSQLCPPCONN_INCLUDE_DIR  - Where to find libmysqlcppconn include sub-directory.\n\n#  MYSQLCPPCONN_LIBRARY      - Path to libmysqlcppconn library.\n\n#  MYSQLCPPCONN_FOUND        - True if libmysqlcppconn found.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent.\n",
        "Line" : 9,
        "CharPositionInLine" : 30
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set MYSQLCPPCONN_FOUND to TRUE if all listed variables are TRUE.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindPEGTL.cmake" : {
      "ObjectId" : "2531e96d4b5b4221c7ddbd91ae9cbb177384f79b",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find PEGTL\n\n# =================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This find script defines the following variables:\n\n#\n\n# - `PEGTL_FOUND`:         System has PEGTL\n\n# - `PEGTL_INCLUDE_DIRS`:  The PEGTL include directories\n\n# - `PEGTL_VERSION`:       The PEGTL version\n\n#\n\n# .\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindPluginprocess.cmake" : {
      "ObjectId" : "b014b4432abec48b872d64a2b3a0a82f5bce56f4",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Find the dependencies of libpluginprocess to determine if plugins\n\n# which depend on it can be included or not.\n\n#\n\n#  HAVE_MKFIFO                  - True if mkfifo is available on the platform\n\n#  HAVE_FORK                    - True if fork is available on the platform\n\n#  HAVE_PLUGINPROCESS\t        - True if the pluginprocess library can be built\n\n#  PLUGINPROCESS_NOTFOUND_INFO\t- A string describing which pluginprocess dependency is missing\n\n#\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindPython2Interp.cmake" : {
      "ObjectId" : "95fc5d9269de01df1d41e5cf9413e130532dd3d8",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# - Find python interpreter\n\n# This module finds if Python interpreter is installed and determines where the\n\n# executables are. This code sets the following variables:\n\n#\n\n#  PYTHON2INTERP_FOUND         - Was the Python executable found\n\n#  PYTHON2_EXECUTABLE          - path to the Python interpreter\n\n#\n\n#  PYTHON2_VERSION_STRING      - Python version found e.g. 2.5.2\n\n#  PYTHON2_VERSION_MAJOR       - Python major version found e.g. 2\n\n#  PYTHON2_VERSION_MINOR       - Python minor version found e.g. 5\n\n#  PYTHON2_VERSION_PATCH       - Python patch version found e.g. 2\n\n#\n\n# The Python2_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# version numbers that should be taken into account when searching for Python.\n\n# You need to set this variable before calling find_package(Python2Interp).\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# =============================================================================\n\n# Copyright 2005-2010 Kitware, Inc.\n\n# Copyright 2011 Bjoern Ricks <bjoern.ricks@gmail.com>\n\n# Copyright 2012 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n# =============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n# ~~~\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for the current active python version first\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set up the versions we know about, in the order we will search. Always add the user supplied additional versions to the front.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for newest python version if python executable isn't found\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# determine python version string\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# it's called \"Python 2.7\", not \"2.7.0\"\n",
        "Line" : 121,
        "CharPositionInLine" : 37
      },
      "7" : {
        "Text" : "# sys.version predates sys.version_info, so use that\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# sys.version was first documented for Python 1.5, so assume this is older.\n",
        "Line" : 162,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PYTHON2INTERP_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/Modules/FindPython2Libs.cmake" : {
      "ObjectId" : "fa7199fa73996dedace8238a6f5174847b6706f7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# - Find python libraries\n\n# This module finds if Python is installed and determines where the\n\n# include files and libraries are. It also determines what the name of\n\n# the library is. This code sets the following variables:\n\n#\n\n#  PYTHON2LIBS_FOUND           - have the Python libs been found\n\n#  PYTHON2_LIBRARIES           - path to the python library\n\n#  PYTHON2_INCLUDE_PATH        - path to where Python.h is found (deprecated)\n\n#  PYTHON2_INCLUDE_DIRS        - path to where Python.h is found\n\n#  PYTHON2_DEBUG_LIBRARIES     - path to the debug library (deprecated)\n\n#  PYTHON2LIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)\n\n#\n\n# The Python2_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# version numbers that should be taken into account when searching for Python.\n\n# You need to set this variable before calling find_package(Python2Libs).\n\n#\n\n# If you'd like to specify the installation of Python to use, you should modify\n\n# the following cache variables:\n\n#  PYTHON2_LIBRARY             - path to the python library\n\n#  PYTHON2_INCLUDE_DIR         - path to where Python.h is found\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# =============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n# =============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n# ~~~\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for the python framework on Apple.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set up the versions we know about, in the order we will search. Always add the user supplied additional versions to the front.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Avoid finding the .dll in the PATH.  We want the .lib.\n",
        "Line" : 114,
        "CharPositionInLine" : 35
      },
      "5" : {
        "Text" : "# Look for the static library in the Python config directory\n",
        "Line" : 117,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Avoid finding the .dll in the PATH.  We want the .lib.\n",
        "Line" : 121,
        "CharPositionInLine" : 35
      },
      "7" : {
        "Text" : "# This is where the static library is usually located\n",
        "Line" : 122,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : "# For backward compatibility, honour value of PYTHON2_INCLUDE_PATH, if PYTHON2_INCLUDE_DIR is not set.\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For backward compatibility, set PYTHON2_INCLUDE_PATH.\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# We use PYTHON2_INCLUDE_DIR, PYTHON2_LIBRARY and PYTHON2_DEBUG_LIBRARY for the cache entries because they are meant to specify the location\n\n# of a single library. We now set the variables listed by the documentation for this module.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# These variables have been historically named in this module different from what SELECT_LIBRARY_CONFIGURATIONS() expects.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SELECT_LIBRARY_CONFIGURATIONS() sets ${PREFIX}_FOUND if it has a library. Unset this, this prefix doesn't match the module prefix, they\n\n# are different for historical reasons.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# PYTHON2_ADD_MODULE(<name> src1 src2 ... srcN) is used to build modules for python. PYTHON2_WRITE_MODULES_HEADER(<filename>) writes a\n\n# header file you can include in your sources to initialize the static python modules\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Mark these options as advanced\n",
        "Line" : 208,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# TARGET_LINK_LIBRARIES(${_NAME} ${PYTHON2_LIBRARIES})\n",
        "Line" : 226,
        "CharPositionInLine" : 51
      },
      "16" : {
        "Text" : "# with CONFIGURE_FILE() cmake complains that you may not use a file created using FILE(WRITE) as input file for CONFIGURE_FILE()\n",
        "Line" : 306,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 17
    },
    "cmake/Modules/FindSystemdJournal.cmake" : {
      "ObjectId" : "1efa90d9f7fe543c39cbe8a19619ea4ff7e2840a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Finds systemd-journal and its libraries\n\n# Uses the same semantics as pkg_check_modules, i.e. LIBSYSTEMD_JOURNAL{_FOUND,_INCLUDE_DIR,_LIBRARIES}\n\n#\n\n# This is an adapted version of FindSystemd.cmake:\n\n# Copyright: Red Hat, Inc. 2013\n\n# Author: Martin Briza <mbriza@redhat.com>\n\n#\n\n# Distributed under the BSD license. See COPYING-CMAKE-SCRIPTS for details.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 13,
        "CharPositionInLine" : 37
      },
      "2" : {
        "Text" : "# try to find systemd-journal via pkg-config\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# try to use the merged library libsystemd\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# if the merged library was not found try to use the old split library\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindXercesC.cmake" : {
      "ObjectId" : "73fed5a11b98462a133fd8b60beb8b8d47d3ed2b",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# .rst:\n\n# FindXercesC\n\n# -----------\n\n#\n\n# Find the Apache Xerces-C++ validating XML parser headers and libraries.\n\n#\n\n# Imported targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``XercesC::XercesC``\n\n#   The Xerces-C++ ``xerces-c`` library, if found.\n\n#\n\n# Result variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``XercesC_FOUND``\n\n#   true if the Xerces headers and libraries were found\n\n# ``XercesC_VERSION``\n\n#   Xerces release version\n\n# ``XercesC_INCLUDE_DIRS``\n\n#   the directory containing the Xerces headers\n\n# ``XercesC_LIBRARIES``\n\n#   Xerces libraries to be linked\n\n#\n\n# Cache variables\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# The following cache variables may also be set:\n\n#\n\n# ``XercesC_INCLUDE_DIR``\n\n#   the directory containing the Xerces headers\n\n# ``XercesC_LIBRARY``\n\n#   the Xerces library\n\n#\n\n# Written by Roger Leigh <rleigh@codelibre.net>\n\n#\n\n# =============================================================================\n\n# Copyright 2014-2015 University of Dundee\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file LICENSE.md for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n# =============================================================================\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include directory\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find all XercesC libraries\n",
        "Line" : 95,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 131,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindYAEP.cmake" : {
      "ObjectId" : "bfb9de83b30b53f9245f9dcd7607e0bfa2c6cdc7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find YAEP\n\n# ================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This find script defines the following variables:\n\n#\n\n# - YAEP_FOUND:         System has YAEP\n\n# - YAEP_INCLUDE_DIRS:  The YAEP include directories\n\n# - YAEP_LIBRARIES:     The library needed to use YAEP (C)\n\n# - YAEP_LIBRARIES_CPP: The library needed to use YAEP (C++)\n\n#\n\n# .\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set YAEP_FOUND to TRUE, if all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindYajl.cmake" : {
      "ObjectId" : "1d4feadd0664ebd944846e4d048cf3f688246db5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Find libyajl\n\n#\n\n# yajl is a json parser needed for the plugin yajl\n\n#\n\n# YAJL_FOUND          - true if yajl was found\n\n# YAJL_INCLUDE_DIRS   - where to find the header file yajl/yajl_common.h\n\n# YAJL_LIBRARIES      - where to find the library libyail\n\n# YAJL_VERSION        - \"1\" if no yajl/yajl_version.h found\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindZeroMQ.cmake" : {
      "ObjectId" : "fe2dd302b489f73fca83488f1fd91bb24db2dacd",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Module for ZeroMQ\n\n# ======================\n\n#\n\n# This module defines the variables listed below.\n\n#\n\n# - ZeroMQ_FOUND:        This variable will be set to a value that evaluates to true, if the system includes ZeroMQ.\n\n# - ZeroMQ_INCLUDE_DIRS: This variable stores the ZeroMQ include directory.\n\n# - ZeroMQ_LIBRARIES:    This variable stores the libraries needed to link to ZeroMQ.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/Findlibuv.cmake" : {
      "ObjectId" : "e9dce49f0ff8b28ac5744dc81a88d029b46543c6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Module for libuv\n\n# =====================\n\n#\n\n# This module defines the variables listed below.\n\n#\n\n# - libuv_FOUND:        This variable will be set to a value that evaluates to true, if the system includes libuv.\n\n# - libuv_INCLUDE_DIRS: This variable stores the libuv include directory.\n\n# - libuv_LIBRARIES:    This variable stores the libraries needed to link to libuv.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/Findyaml-cpp.cmake" : {
      "ObjectId" : "1a67fc3f9ec71c9b707b1fce2b45c697050ceb33",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find yaml-cpp\n\n# ====================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# Once done this will define\n\n#\n\n#  YAML-CPP_FOUND\t\tSystem has yaml-cpp\n\n#  YAML-CPP_INCLUDE_DIRS\tThe yaml-cpp include directories\n\n#  YAML-CPP_LIBRARIES\t\tThe libraries needed to use yaml-cpp\n\n#  YAML-CPP_VERSION\t\tThe version string of yaml-cpp\n\n#\n\n# This script is a modified version of the code available here: https://cmake.org/Wiki/CMake:How_To_Find_Libraries#Writing_find_modules\n\n# ~~~\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set YAML-CPP_FOUND to TRUE, if all listed variables are TRUE\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/LibAddBinding.cmake" : {
      "ObjectId" : "fe552371fbbd313582ab91f4f3773f4156fa3e6e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# QUICK INTRODUCTION:\n\n# > To add a binding the following steps have to be performed:\n\n#   - call \"check_binding_included ()\": this prints exclusion messages based on categories\n\n#   - based on dependency checks\n\n#    a) call \"exclude_binding ()\": this prints a custom exclusion message\n\n#    b) call \"add_binding ()\": this prints the inclusion message\n\n#\n\n# > To check if a binding is built there are two options:\n\n#   - General check (i.e. is this binding included by categories): \"check_binding_included ()\"\n\n#   - Check if \"add_binding ()\" was called: \"check_binding_was_added ()\"\n\n#     Note that this only works after the CMake has processed the scripts in\n\n#     \"bindings\" directory. As a result this only works for CMake scripts in the\n\n#     \"tools\", \"include\" and \"plugins\" (ADDTESTING_PHASE) directories.\n\n#\n\n# ~~~\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# - Adds a binding if it is included in BINDINGS and not excluded by name or\n\n#   category (infos/status or infos/provides from it's README.md).\n\n#\n\n#   If the binding is excluded the reason is printed along with the binding name.\n\n#\n\n#   This is function can be used anywhere since the base directory is fixed to\n\n#   the bindings source directory. However if the binding uses subdirectories\n\n#   (like swig, gi or io) you need to supply the correct SUBDIRECTORY option\n\n#   (see examples).\n\n#\n\n# check_binding_included (BINDING_NAME OUTVARIABLE)\n\n#\n\n# BINDING_NAME:\n\n#   name of the binding\n\n#\n\n# OUTVARIABLE:\n\n#   variable that is set to true if binding was added\n\n#\n\n# SILENT:\n\n#   suppress exclusion message\n\n#\n\n# Additional options are passed to check_item_is_excluded ().\n\n# Default for SUBDIRECTORY is BINDING_NAME\n\n#\n\n# Example:\n\n#   check_binding_included (\"swig_python\" IS_INCLUDED SUBDIRECTORY \"swig/python\")\n\n#   if (IS_INCLUDED)\n\n#     add_subdirectory (python)\n\n#   endif ()\n\n# ~~~\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# optional keywords\n",
        "Line" : 52,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# one value keywords\n\n# multi value keywords\n",
        "Line" : 53,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# make sure that the exclusion message is not printed\n",
        "Line" : 67,
        "CharPositionInLine" : 18
      },
      "5" : {
        "Text" : "# ~~~\n\n# - Add a binding to list of bindings that will be built and print corresponding\n\n#  message.\n\n#\n\n#  add_binding (BINDING_NAME)\n\n#\n\n#  BINDING_NAME:\n\n#    name of the binding\n\n#\n\n#  example:\n\n#    add_binding (\"anynameyouwant\")\n\n# ~~~\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# optional keywords\n",
        "Line" : 91,
        "CharPositionInLine" : 24
      },
      "7" : {
        "Text" : "# one value keywords\n\n# multi value keywords\n",
        "Line" : 92,
        "CharPositionInLine" : 13
      },
      "8" : {
        "Text" : "# ~~~\n\n# - Remove a binding from the global cache\n\n#\n\n#  exclude_binding (name reason)\n\n#\n\n#  name\n\n#    binding name\n\n#\n\n#  reason\n\n#    reason for exclusion\n\n#\n\n#  REMOVE\n\n#    (optional) remove already added with add_binding.\n\n#    Consistency check: If not given it is made sure that the binding is not on\n\n#    the list.\n\n#\n\n# example:\n\n#  exclude_binding (fstab \"mntent is missing\")\n\n# ~~~\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# optional keywords\n",
        "Line" : 141,
        "CharPositionInLine" : 19
      },
      "10" : {
        "Text" : "# one value keywords\n\n# multi value keywords\n",
        "Line" : 142,
        "CharPositionInLine" : 13
      },
      "11" : {
        "Text" : "# ~~~\n\n# - Check if a binding will be built.\n\n#   Can only be used run after bindins have been processed (e.g. in\n\n#   ADDTESTING_PHASE of plugins)\n\n#   This is function can be used anywhere.\n\n#\n\n# check_binding_was_added (BINDING_NAME OUTVARIABLE)\n\n#\n\n# BINDING_NAME:\n\n#   name of the binding\n\n#\n\n# OUTVARIABLE:\n\n#   variable that is set to true if binding was added\n\n#\n\n# Example:\n\n#   check_binding_was_added (\"swig_python\" WAS_ADDED)\n\n#   if (NOT WAS_ADDED)\n\n#     message (WARNING \"swig_python bindings are required for testing, test deactivated\")\n\n#   endif ()\n\n# ~~~\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ~~~\n\n# - Determines if ITEM_NAME is not included from LIST by\n\n#  explicit mention or by category\n\n#\n\n#  check_item_is_excluded (OUTVARIABLE LIST ITEM_NAME)\n\n#\n\n# OUTVARIABLE:\n\n#   name of variable in which exclusion reason are stored\n\n#\n\n# LIST:\n\n#   name of variable with list of items or categories\n\n#\n\n# ITEM_NAME:\n\n#   name of item in list\n\n#\n\n# SUBDIRECTORY:\n\n#   (optional) set subdirectory for README.md. Defaults to current directory\n\n#\n\n# NO_CATEGORIES:\n\n#   (optional) disable categories\n\n#\n\n# ENABLE_PROVIDES:\n\n#   (optional) add \"infos/provides\" from README.md to categories and expand the\n\n#   list with split_plugin_providers()\n\n#\n\n#\n\n# example:\n\n# \t# BINDINGS=\"ALL;-EXPERIMENTAL\"\n\n# \tcheck_item_is_excluded (IS_EXCLUDED BINDINGS \"io_uv\")\n\n# \tif (IS_EXCLUDED)\n\n# \t\tremove_something (\"io_uv\" ${IS_EXCLUDED})\n\n# \tendif ()\n\n# ~~~\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# optional keywords\n",
        "Line" : 236,
        "CharPositionInLine" : 42
      },
      "14" : {
        "Text" : "# one value keywords\n",
        "Line" : 237,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# multi value keywords\n",
        "Line" : 238,
        "CharPositionInLine" : 13
      },
      "16" : {
        "Text" : "# let explicit exclusion win\n",
        "Line" : 246,
        "CharPositionInLine" : 58
      },
      "17" : {
        "Text" : "# maybe it is included by category\n",
        "Line" : 255,
        "CharPositionInLine" : 45
      },
      "18" : {
        "Text" : "# plugin is given explicit\n",
        "Line" : 259,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# we are done if categories are disabled\n",
        "Line" : 264,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# we need README.md for extracting categories\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# message (STATUS \"CATEGORIES FOUND FOR ${ITEM_NAME}: ${CATEGORIES}\")\n",
        "Line" : 321,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 22
    },
    "cmake/Modules/LibAddHaskellPlugin.cmake" : {
      "ObjectId" : "bcaa7941932009525a45fbc6ed1250776844be87",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Allows one to add plugins written in Haskell, setting up the include paths and\n\n# libraries automatically.\n\n#\n\n# Expects that plugins make use of Cabal as their build system.\n\n#\n\n# MODULES:\n\n#  the name of the Haskell modules to be compiled\n\n#  by default it assumes there is a single module called Elektra.<pluginName>\n\n# NO_SHARED_SANDBOX:\n\n#  By default all Haskell plugins and the bindings are compiled in a shared sandbox to\n\n#  speed up compilation times by only compiling commonly-used libraries once. Set this\n\n#  flag to use an independent sandbox instead in case there are e.g. library version conflicts\n\n# SANDBOX_ADD_SOURCES:\n\n#  additional source paths which should be added to the Cabal sandbox\n\n#  required if the build should depend on Haskell libraries not available on hackage\n\n# ADDITIONAL_SOURCES:\n\n#  in case your plugin depends on other files than *.hs and *.lhs Haskell files and the default\n\n#  Cabal file and c test file and setup file, you can specify them here\n\n# ~~~\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# optional keywords\n",
        "Line" : 26,
        "CharPositionInLine" : 60
      },
      "2" : {
        "Text" : "# one value keywords\n",
        "Line" : 27,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# multi value keywords\n",
        "Line" : 28,
        "CharPositionInLine" : 36
      },
      "4" : {
        "Text" : "# compile our c wrapper which takes care of invoking the haskell runtime the actual haskell plugin gets linked in dynamically as a\n\n# library\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# this is required so that it finds the type checker plugin and all the libraries\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# needed for HsFFI.h\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# for the haskell function stubs and HsFFI.h\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# shared variants of ghc libraries have the ghc version as a suffix\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# ~~~\n\n# since we want to continue to use our cmake add_plugin macro we compile via the c compiler instead of ghc so we must feed it with\n\n# the ghc library paths manually\n\n# inspired by https://github.com/jarrett/cpphs/blob/master/Makefile\n\n# ~~~\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# GHC's structure differs between OSX and Linux On OSX we need to link iconv and Cffi additionally\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# configure include paths\n",
        "Line" : 248,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# configure the haskell plugin base file for the current plugin\n",
        "Line" : 251,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# same for the header\n",
        "Line" : 254,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# copy the readme so the macro in haskell.c finds it\n",
        "Line" : 257,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# same for the setup logic, depending on wheter a custom one exists use the default suitable for almost everything\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as we require the sandbox to exist we can do this during the configuration phase it doesn't compile or install anything\n",
        "Line" : 267,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# our custom libs are all to be processed by cmake before we can add them, so enforce that, the build is more stable this\n\n# way\n",
        "Line" : 272,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Grab potential haskell source files\n",
        "Line" : 281,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# exclude the dist directory\n",
        "Line" : 288,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# reconfiguration due to Cabal library version issues on stretch\n",
        "Line" : 326,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 21
    },
    "cmake/Modules/LibAddLib.cmake" : {
      "ObjectId" : "459f6cd1ae8a9ea646c1889c063247af2b3947c8",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# optional keywords\n",
        "Line" : 3,
        "CharPositionInLine" : 16
      },
      "1" : {
        "Text" : "# one value keywords\n",
        "Line" : 4,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# multi value keywords\n",
        "Line" : 5,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 3
    },
    "cmake/Modules/LibAddMacros.cmake" : {
      "ObjectId" : "34e3a11a948673913b1d7cb25fb20dbb50a46ce1",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Copy a file from source dir to binary dir\n\n#\n\n# copy_file or directory\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# Create a symlink for a plugin both in lib and at installation\n\n#\n\n# Parameter: PLUGIN: install symlink in TARGET_PLUGIN_FOLDER subdirectory\n\n#\n\n# create_lib_symlink src dest - create a symbolic link from src -> dest\n\n# ~~~\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# optional keywords\n",
        "Line" : 20,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# one value keywords\n\n# multi value keywords\n",
        "Line" : 21,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# ~~~\n\n# Make a directory\n\n#\n\n# mkdir dir\n\n# ~~~\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for generic targets (not tools) use this function to link against elektra\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for tools (not tests) use this function to link against elektra\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ~~~\n\n# find an util to pass to add_custom_command later\n\n#\n\n# Parameters:\n\n#\n\n# 1. util        [in] : the utility to search for. Must be added using\n\n#                       add_executable first.\n\n# 2. EXE_SYM_LOC [out]: a name for a variable where the program to be executed\n\n#                       is written to.\n\n#                       Note: you must pass this value to COMMAND of add_custom_command\n\n# 3. EXE_SYM_ARG [out]: a name for a variable where the argument to be executed\n\n#                       is written to.\n\n#                       Note: you must pass this value to ARGS in add_custom_command\n\n#\n\n# Example Usage:\n\n# add_executable (elektra-export-symbols ...)\n\n# include(LibAddMacros)\n\n# find_util(elektra-export-symbols EXE_SYM_LOC EXE_SYM_ARG)\n\n#\n\n# add_custom_command (\n\n# \t\tDEPENDS elektra-export-symbols\n\n# \t\tCOMMAND ${EXE_SYM_LOC}\n\n# \t\tARGS ${EXE_SYM_ARG} ... other arguments\n\n# \t\t)\n\n# ~~~\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ~~~\n\n# - Adds all headerfiles of global include path to the given variable\n\n#\n\n#  ADD_HEADERS (variable)\n\n#\n\n# example:\n\n# add_headers (SOURCES)\n\n# SOURCES now contain the names of all global header files\n\n#\n\n# thus the necessary directories are also included within the macro\n\n# don't execute this within a loop.\n\n#\n\n# The added files will be always the same anyway. Example see in\n\n# tests/CMakeLists.txt\n\n# ~~~\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ~~~\n\n# Add all headers needed for cpp bindings\n\n# ~~~\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ~~~\n\n# - Removes a plugin from the global cache\n\n#\n\n#  REMOVE_PLUGIN (name reason)\n\n#\n\n# example:\n\n# remove_plugin (fstab \"mntent is missing\")\n\n#\n\n# ~~~\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ~~~\n\n# LIST_FILTER(<list> <regexp_var>\n\n# Removes items from <list> which match the specified\n\n# regular expression. An optional argument OUTPUT_VARIABLE\n\n# specifies a variable in which to store the matched items instead of\n\n# updating <list>\n\n# As regular expressions can not be given to macros (see bug #5389), we pass\n\n# variable names whose content is the regular expressions.\n\n#\n\n# For example:\n\n# set (XXX \"gi_a;gi_b;swig_a;gi_c;swig_d;x;y\")\n\n# set (YYY \"swig_.*\")\n\n# list_filter(XXX YYY)\n\n# message (STATUS \"XXX is ${XXX}\") will be gi_a;gi_b;gi_c;x;y\n\n# ~~~\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ~~~\n\n# find string in list with regex\n\n# ~~~\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Reset output variable  Extract input list from arguments\n",
        "Line" : 349,
        "CharPositionInLine" : 50
      },
      "14" : {
        "Text" : "# message(\"try to match ${LIST_FILTER_regexp} with ${LIST_FILTER_item}\")\n",
        "Line" : 352,
        "CharPositionInLine" : 48
      },
      "15" : {
        "Text" : "# ~~~\n\n# - Add sources for a target\n\n#\n\n#  ADD_SOURCES (<target> <source1> [<source2> ...])\n\n#\n\n# The target should add the sources using:\n\n#\n\n# get_property (elektra_SRCS GLOBAL PROPERTY elektra_SRCS)\n\n# list (APPEND SRC_FILES ${elektra_SRCS})\n\n#\n\n# descend into sub-directories\n\n# add_subdirectory(a)\n\n# add_subdirectory(b)\n\n#\n\n# get_property(super_SRCS GLOBAL PROPERTY super_SRCS)\n\n#\n\n# add_library(super STATIC ${super_SRCS})\n\n#\n\n#\n\n# a/CMakeLists.txt:\n\n#\n\n# add_sources(super\n\n#  a1.f\n\n#  a2.f\n\n#  a3.f\n\n#  )\n\n#\n\n#\n\n# b/CMakeLists.txt:\n\n#\n\n# add_sources(super\n\n#  b1.f\n\n#  b2.f\n\n#  )\n\n#\n\n#\n\n# Thank to Michael Wild\n\n#\n\n#\n\n# elektra...        are the sources for all elektra targets\n\n# elektra-shared... are the additional sources\n\n#                   for elektra SHARED only (excludes elektra-full)\n\n# elektra-full...   are the additional sources for the versions\n\n#                   with all plugins built-in (excludes elektra-shared)\n\n# ~~~\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# define the <target>_SRCS properties if necessary\n",
        "Line" : 405,
        "CharPositionInLine" : 30
      },
      "17" : {
        "Text" : "# create list of sources (absolute paths)\n",
        "Line" : 412,
        "CharPositionInLine" : 26
      },
      "18" : {
        "Text" : "# append to global property\n",
        "Line" : 420,
        "CharPositionInLine" : 26
      },
      "19" : {
        "Text" : "# ~~~\n\n# - Add includes for a target\n\n#\n\n#  ADD_INCLUDES (<target> <source1> [<source2> ...])\n\n#\n\n# The target should do:\n\n#\n\n# get_property (elektra_INCLUDES GLOBAL PROPERTY elektra_INCLUDES)\n\n# include_directories (${elektra_INCLUDES})\n\n# ~~~\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# define the <target>_INCLUDES properties if necessary\n",
        "Line" : 437,
        "CharPositionInLine" : 31
      },
      "21" : {
        "Text" : "# create list of sources (absolute paths)\n",
        "Line" : 444,
        "CharPositionInLine" : 26
      },
      "22" : {
        "Text" : "# append to global property\n",
        "Line" : 449,
        "CharPositionInLine" : 26
      },
      "23" : {
        "Text" : "# ~~~\n\n# - Add libraries for a target\n\n#\n\n#  ADD_LIBRARIES (<target> <source1> [<source2> ...])\n\n#\n\n# The target should do:\n\n#\n\n# get_property (elektra_LIBRARIES GLOBAL PROPERTY elektra_LIBRARIES)\n\n# target_link_libraries (elektra ${elektra_LIBRARIES})\n\n#\n\n# ~~~\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# define the <target>_LIBRARIES properties if necessary\n",
        "Line" : 467,
        "CharPositionInLine" : 32
      },
      "25" : {
        "Text" : "# create list of sources (absolute paths)\n",
        "Line" : 474,
        "CharPositionInLine" : 26
      },
      "26" : {
        "Text" : "# append to global property\n",
        "Line" : 479,
        "CharPositionInLine" : 26
      },
      "27" : {
        "Text" : "# ~~~\n\n# - Create a static library from sources collected by MY_ADD_LIBRARY\n\n#\n\n#  MY_ADD_STATIC_MODULE(<name>)\n\n#\n\n# Compiles a static library <name> from the sources defined in\n\n# MY_STATIC_MODULES_<name>_SOURCES by MY_ADD_LIBRARY(). This\n\n# function must be called after all calls to MY_ADD_LIBRARY()\n\n# contributing sources to this static module.\n\n#\n\n# Thanks to Michael Wild <themiwi@gmail.com>\n\n# ~~~\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# remove pseudo \"-element\"\n",
        "Line" : 510,
        "CharPositionInLine" : 24
      },
      "29" : {
        "Text" : "# optional keywords\n",
        "Line" : 543,
        "CharPositionInLine" : 14
      },
      "30" : {
        "Text" : "# one value keywords\n",
        "Line" : 544,
        "CharPositionInLine" : 30
      },
      "31" : {
        "Text" : "# multi value keywords\n",
        "Line" : 545,
        "CharPositionInLine" : 14
      },
      "32" : {
        "Text" : "# ~~~\n\n# Parameter: the pluginname\n\n#\n\n# converts a README.md (markdown texts with key/value pairs)\n\n# to a readme_pluginname.c that contains keys to be added in the contract\n\n#\n\n# the key/value pairs need to be written like:\n\n# - infos/licence = BSD\n\n#\n\n# - infos/description =\n\n# has a special functionality: when it is used the rest of the file\n\n# is interpreted as description. So this key must be last.\n\n# ~~~\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# rerun cmake when README.md is changed  also allows cmake variable substitution\n",
        "Line" : 611,
        "CharPositionInLine" : 29
      },
      "34" : {
        "Text" : "# read\n",
        "Line" : 614,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# allow macros:\n",
        "Line" : 731,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 36
    },
    "cmake/Modules/LibAddPlugin.cmake" : {
      "ObjectId" : "ad62492cae5723c72616536730e44e5e161a3971",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Provides additional compiler definitions:\n\n#\n\n# - ELEKTRA_PLUGIN_NAME containing the short plugin name as string\n\n# - ELEKTRA_PLUGIN_NAME_C containing the short plugin name which can be used in function names\n\n#\n\n# shortname:\n\n#   pass the PLUGIN_SHORT_NAME as this argument\n\n#\n\n# ADDITIONAL_COMPILE_DEFINITIONS:\n\n#   will contain the additional compiler definitions mentioned above.\n\n#   will be set to the parent scope, i.e. the caller of the function\n\n#\n\n# ~~~\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# provide the plugin name as string to the compiler/preprocessor\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# provide the plugin name as macro that can be used for building function names, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# ~~~\n\n# Add a test for a plugin\n\n#\n\n# Will include the common tests.h file + its source file\n\n# additional source files can be added as additional arguments.\n\n# They need to be absolute or relative to the plugin dir.\n\n#\n\n# The testname must be the pluginname.\n\n# By convention the source file needs to be called `testmod_${pluginname}.c`\n\n# or `testmod_${pluginname}.cpp`, if you specify the optional keyword `CPP`.\n\n#\n\n# Prefer to use ADD_TEST of add_plugin which takes care\n\n# of properly set all arguments so that the test is built\n\n# in the same way as the plugin.\n\n#\n\n# CPP:\n\n#  Build a C++ test instead of a C test.\n\n#\n\n# ENVIRONMENT:\n\n#   Specifies environment variables set while the build system executes the test\n\n#\n\n# LINK_PLUGIN:\n\n#  Link against a different plugin (not the test name itself).\n\n#  If you want to avoid linking against a plugin, use the string <no>.\n\n#\n\n# links the executable (only if build_static or build_full)\n\n# and adds a test\n\n# ~~~\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# optional keywords\n",
        "Line" : 83,
        "CharPositionInLine" : 43
      },
      "5" : {
        "Text" : "# one value keywords\n",
        "Line" : 84,
        "CharPositionInLine" : 14
      },
      "6" : {
        "Text" : "# multi value keywords\n",
        "Line" : 85,
        "CharPositionInLine" : 37
      },
      "7" : {
        "Text" : "# plugin for test was not added in previous phase or removed because of missing deps, exit quietly\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# assume that test case+plugin to be tested\n",
        "Line" : 155,
        "CharPositionInLine" : 76
      },
      "9" : {
        "Text" : "# have same name:\n",
        "Line" : 156,
        "CharPositionInLine" : 13
      },
      "10" : {
        "Text" : "# ~~~\n\n# alternative approach to restore_variable\n\n# get_target_property(TARGET_COMPILE_DEFINITIONS PLUGIN_TARGET_OBJS COMPILE_DEFINITIONS)\n\n# ~~~\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# let explicit exclusion win\n",
        "Line" : 254,
        "CharPositionInLine" : 56
      },
      "12" : {
        "Text" : "# maybe it is included by category\n",
        "Line" : 263,
        "CharPositionInLine" : 43
      },
      "13" : {
        "Text" : "# plugin is given explicit\n",
        "Line" : 267,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# message (STATUS \"CATEGORIES ${CATEGORIES}\")\n",
        "Line" : 308,
        "CharPositionInLine" : 15
      },
      "15" : {
        "Text" : "# ~~~\n\n# both stored and given by user: do consistency check\n\n# message (STATUS \"consistency check, plugin ${PLUGIN_NAME} got ${VARIABLE} reset to ${VAR}\")\n\n# ~~~\n",
        "Line" : 336,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# stored, but not given by user, use what was stored\n",
        "Line" : 349,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# given by user, but not stored: store it\n",
        "Line" : 355,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# ~~~\n\n# add_plugin: register and potentially add a plugin\n\n#\n\n# SOURCES:\n\n#  The sources of the plugin\n\n#\n\n# OBJECT_SOURCES:\n\n#  Object library sources for the plugin\n\n#\n\n# LINK_LIBRARIES:\n\n#  add here only add libraries found by cmake\n\n#  do not add dependencies to Elektra, use LINK_ELEKTRA for that\n\n#\n\n# LINK_ELEKTRA:\n\n#  allows you to selectively link against different Elektra libraries, the default is elektra-plugin\n\n#\n\n# COMPILE_DEFINITIONS:\n\n#  Set additional macros for per-variant compilation.\n\n#\n\n# INCLUDE_DIRECTORIES:\n\n#  Append to include path (globally+plugin specific).\n\n#\n\n# INCLUDE_SYSTEM_DIRECTORIES:\n\n#  Same as INCLUDE_DIRECTORIES, but avoids warnings and dependency calculation\n\n#  for these include folders.\n\n#\n\n# ONLY_SHARED:\n\n#  Do not include this plugin in FULL or STATIC builds.\n\n#\n\n# ADD_TEST:\n\n#  Add a plugin test case written in C (alternatively you can use add_gtest)\n\n#\n\n# CPP_TEST:\n\n#  If you add this optional keyword, then the function will add\n\n#  a C++ test instead of a C test. This argument only makes sense if you also\n\n#  specified the keyword `ADD_TEST`.\n\n#\n\n# INSTALL_TEST_DATA:\n\n#  Install a directory with test data which has the same name as the plugin.\n\n#\n\n# TEST_README:\n\n#  Add a Markdown Shell Recorder test for the ReadMe of the plugin\n\n#\n\n# TEST_ENVIRONMENT:\n\n#   Specifies environment variables set while the build system executes the plugin tests\n\n#\n\n# TEST_REQUIRED_PLUGINS:\n\n#   Specifies a list of required plugins for the **Markdown Shell Recorder** test\n\n#\n\n# TEST_LINK_LIBRARIES:\n\n#   like LINK_LIBRARIES but only applies to plugin tests\n\n#\n\n# TEST_LINK_ELEKTRA:\n\n#   like LINK_ELEKTRA but only applies to plugin tests\n\n# ~~~\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# optional keywords\n",
        "Line" : 431,
        "CharPositionInLine" : 76
      },
      "20" : {
        "Text" : "# one value keywords\n",
        "Line" : 432,
        "CharPositionInLine" : 13
      },
      "21" : {
        "Text" : "# multi value keywords\n",
        "Line" : 433,
        "CharPositionInLine" : 36
      },
      "22" : {
        "Text" : "# message (STATUS \"enter add_plugin ${PLUGIN_SHORT_NAME}\")\n",
        "Line" : 503,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# needed for variants where PLUGIN_SHORT_NAME != PLUGIN_FOLDER_NAME\n",
        "Line" : 531,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# plugin was not added in previous phase or removed because of missing deps, exit quietly\n",
        "Line" : 565,
        "CharPositionInLine" : 11
      },
      "25" : {
        "Text" : "# ~~~\n\n# message (STATUS \"name: ${PLUGIN_NAME}\")\n\n# message (STATUS \"srcs are: ${ARG_SOURCES}\")\n\n# message (STATUS \"deps are: ${ARG_LINK_LIBRARIES}\")\n\n# message (STATUS \"comp are: ${ARG_COMPILE_DEFINITIONS}\")\n\n# message (STATUS \"incl are: ${ARG_INCLUDE_DIRECTORIES}\")\n\n# message (STATUS \"system incl are: ${ARG_INCLUDE_SYSTEM_DIRECTORIES}\")\n\n# message (STATUS \"current bin ${CMAKE_CURRENT_BINARY_DIR}\")\n\n# ~~~\n",
        "Line" : 573,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# also add it to the list of ONLY_SHARED plugins for exportsymbols.c configuration\n",
        "Line" : 594,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# for readme\n",
        "Line" : 631,
        "CharPositionInLine" : 38
      },
      "28" : {
        "Text" : "# needed for shared libraries\n",
        "Line" : 637,
        "CharPositionInLine" : 31
      },
      "29" : {
        "Text" : "# for readme\n",
        "Line" : 682,
        "CharPositionInLine" : 39
      },
      "30" : {
        "Text" : "# message (STATUS \"added ${PLUGIN_TARGET_OBJS}\")\n",
        "Line" : 706,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cleanup\n",
        "Line" : 719,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 32
    },
    "cmake/Modules/LibAddTest.cmake" : {
      "ObjectId" : "f0046a82152a202732b964b4a84440cf7be60466",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Allows one to add test cases using Google Test\n\n#\n\n# recommended to use\n\n#\n\n# export GTEST_CATCH_EXCEPTIONS=0\n\n#\n\n# which disables a feature that seems to be popup-blocker for Windows\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# Add a Google Test for a list of specified source files.\n\n#\n\n# INCLUDE_DIRECTORIES:\n\n# \tThis optional variable specifies a list of include paths for the test.\n\n# ~~~\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# optional keywords\n",
        "Line" : 21,
        "CharPositionInLine" : 48
      },
      "3" : {
        "Text" : "# one value keywords\n",
        "Line" : 22,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# multi value keywords\n",
        "Line" : 23,
        "CharPositionInLine" : 68
      },
      "5" : {
        "Text" : "# ~~~\n\n# Add a Markdown Shell Recorder test for a certain Markdown file\n\n#\n\n# NAME: This argument specifies a postfix for the name of the CTest this function creates.\n\n# FILE: This argument specifies the location of the Markdown file that contains the test data.\n\n#\n\n# REQUIRED_PLUGINS:\n\n# \tThis optional variable specifies a list of plugins required to run the test.\n\n#\n\n# ENVIRONMENT:\n\n# \tThis optional argument specifies environment variables defined while CTest executes the MSR test.\n\n# ~~~\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ~~~\n\n# Add a Markdown Shell Recorder test for a certain plugin\n\n#\n\n# PLUGIN: This argument specifies the name of the plugin for which this function creates a MSR test.\n\n#\n\n# REQUIRED_PLUGINS:\n\n# \tThis optional variable specifies a list of plugins required to run the MSR test.\n\n#\n\n# ENVIRONMENT:\n\n# \tThis optional argument specifies environment variables defined while CTest executes the MSR test.\n\n# ~~~\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/LibFindMacros.cmake" : {
      "ObjectId" : "f0b17f0beb76b98b5e5a6b4b170685a0e9e99e57",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/SafeCheckSymbolExists.cmake" : {
      "ObjectId" : "e5b5c33a61ec10be9767343c73f65d64e48a1229",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Check if a symbol is exported\n\n#\n\n# Same as check_symbol_exists but works around the problem of not detecting\n\n# symbols when -Wpedantic is on.\n\n#\n\n# Also automatically adds the definitions of the current directory to\n\n# CMAKE_REQUIRED_DEFINITIONS.\n\n#\n\n# https://issues.libelektra.org/2218\n\n# ~~~\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prepends prefix onto all argn list members and saves the result to var Can be replaced by list(TRANSFORM .. PREPEND ..) once we use CMake\n\n# 3.12\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Platform.cmake" : {
      "ObjectId" : "b7208088fb56da7d7b9fd2e306901df08a49541e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this file overrides platform specific information\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/PrintDependencies.cmake" : {
      "ObjectId" : "4c03f4a7f35a90b7fb275068edbdf1b565f98564",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Print a list of Elektra's dependencies\n\n#\n\n# (currently only essential deps, excluding CMake which is needed\n\n# to run this script)\n\n#\n\n# == Usage ==\n\n#\n\n# On Debian/Ubuntu:\n\n#\n\n# apt-get install `cmake -DPLUGINS=\"ALL\" -P cmake/PrintDependencies.cmake`\n\n#\n\n# On Apple:\n\n#\n\n# brew install `cmake -DPLUGINS=\"ALL\" -P cmake/PrintDependencies.cmake`\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Toolchain/Toolchain-mingw-w64-x86_64.cmake" : {
      "ObjectId" : "5ad1307efa2db53f50de21a9b486b2b78b420e83",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# link libraries statically. wine is unable to find them\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands: search headers and libraries in the target environment, search programs in the\n\n# host environment\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Toolchain/Toolchain-mingw32.cmake" : {
      "ObjectId" : "b4fcb2e3c2365060db28b8085045693341d6b6bd",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands: search headers and libraries in the target environment, search programs in the\n\n# host environment\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "e3090bef32d5538cfb590f334b75c999cf46dea7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# do_doc\n\n#\n\n# builds and install documentation\n\n#\n\n# target  is man, html or latex\n\n# folder  is the folder where it will be built\n\n# file    is the file name to set a dependency to\n\n# install is where it should be installed\n\n# ~~~\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sometimes doxygen is too slow and fails with \"Could not create output directory .../doc/html\"\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# get_filename_component (name ${target} NAME_WE)\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# fix usage with wine: https://github.com/ElektraInitiative/libelektra/pull/340#discussion_r44044444\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "doc/help/CMakeLists.txt" : {
      "ObjectId" : "f45fd47825e112fb884dc25597b13e5d8d0db54b",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "87a01df3a41d8f884fb35573b279414091b3bd74",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# don't call add_headers in a loop\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Notification examples\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cannot build examples without notification library which requires the internalnotification plugin\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build notification polling example\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# TODO resolve issues.libelektra.org/2007\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Build notification async example\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# add sources for elektra-io-uv for static and full builds\n",
        "Line" : 71,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "# Make sure `libuv_VERSION` is defined correctly\n",
        "Line" : 82,
        "CharPositionInLine" : 29
      },
      "8" : {
        "Text" : "# Build notification reload example\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Work around missing header errors that occurs if only `BUILD_FULL`, but not `BUILD_SHARED` is enabled.\n",
        "Line" : 100,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# add sources for elektra-io-uv for static and full builds\n",
        "Line" : 106,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 11
    },
    "examples/external/cmake/CMakeLists.txt" : {
      "ObjectId" : "fd91b4c72bf99edb201777455b26d5088365c5fc",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# you might need to change CMAKE_MODULE_PATH\n\n# can also be done with ccmake\n\n# set (CUSTOM_MODULE_PATH \"/opt/local/share/cmake-3.0/Modules\")\n\n# set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CUSTOM_MODULE_PATH})\n\n# ~~~\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/external/pkgconfig/Makefile" : {
      "ObjectId" : "bd7660ebf409f5546c4dac8c215c898e1e4d0164",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/highlevel/cmake/CMakeLists.txt" : {
      "ObjectId" : "66245853500f807a532c243c7cdf485e219fe31f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# you might need to change CMAKE_MODULE_PATH\n\n# can also be done with ccmake\n\n# set (CUSTOM_MODULE_PATH \"/opt/local/share/cmake-3.0/Modules\")\n\n# set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CUSTOM_MODULE_PATH})\n\n# ~~~\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link additional libraries\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "examples/highlevel/pkgconfig/Makefile" : {
      "ObjectId" : "4e9ff05b02c6ef94379c35bc41c24c18fafbc0f3",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "a7582b77f9e44db7c3df2e3cf62012bca36ada56",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On macOS we need to copy this into another folder. Because of \"System Integrity Protection\", we need to use a /usr/local\n\n# path\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This Folder is at least the valid folder for Debian\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "scripts/ffconfig/CMakeLists.txt" : {
      "ObjectId" : "c17fca4c1e1162e425e5ebcf1f8edcb1a3ea54cc",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "2bc87093fe71c46fe825bef5de1b90d28f9b8231",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/CMakeLists.txt" : {
      "ObjectId" : "b4d25b97e756ddc7bc7f078c278f9784a60dfd0b",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/cpp/CMakeLists.txt" : {
      "ObjectId" : "010b92ea7b56ab146082ad9e6d04e49edae8969f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/cpp/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "5635cdadf0216df1a7d74a6153049c11df6e9e3f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required by gethostname\n",
        "Line" : 27,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 1
    },
    "src/bindings/cpp/examples/CMakeLists.txt" : {
      "ObjectId" : "820767596501d4dccf498d797c0bf7ad84156449",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/cpp/include/CMakeLists.txt" : {
      "ObjectId" : "3e3f11e8689c8656e5745d2a9e17c3d9aca22d42",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/cpp/tests/CMakeLists.txt" : {
      "ObjectId" : "d3ceff4000045c9943f62b3a2157544cf5fcf91e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/gi/CMakeLists.txt" : {
      "ObjectId" : "4c7bd476ac505f3009def19c6b607566a224d1c1",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is needed for GIR to put asan in front\n",
        "Line" : 27,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# this is needed so ASAN is not used during GIR compilation\n",
        "Line" : 28,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 2
    },
    "src/bindings/gi/lua/CMakeLists.txt" : {
      "ObjectId" : "a756de8746dc2a98760e80e72065c314a9ad29df",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we're searching for the lua interpreter however FindLua only searches for the library. But that's better than nothing.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/bindings/gi/python/CMakeLists.txt" : {
      "ObjectId" : "5d100e39e31fc16658eb1fe83b512e796399f027",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/glib/CMakeLists.txt" : {
      "ObjectId" : "fa686246764975b95a42cdcb7d2f4ab5b8a9cef4",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test if binding can be build\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add binding\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/bindings/glib/tests/CMakeLists.txt" : {
      "ObjectId" : "a0e2a6db0eb722a4d3aa69f4d5728d3f40c6ed8c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/gsettings/CMakeLists.txt" : {
      "ObjectId" : "f4d48b5b7da148bc28c38ecfe45858f547d129d8",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/haskell/CMakeLists.txt" : {
      "ObjectId" : "4aeaa2e8b3cc61e399040da570cfcb921556a991",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configure include paths\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Use the post-build logic to glue the bindings together with cmake  as its done for plugins\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# as we require the sandbox to exist we can do this during the configuration phase it doesn't compile or install anything\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Sometimes building fails reporting an outdated package file. In this case we need to configure the package again.\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# recompile with tests enabled, to get the dependency graph for the static versions correct the tests need the elektra\n\n# library already built - while for the haskell plugins it doesn't matter as a static build depends on the plugins but not\n\n# on the bindings, this is the way we can resolve the circular dependency by treating the tests separately\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Sometimes building fails reporting an outdated package file. In this case we need to configure the package again.\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# as those are not controlled by cmake really, adjust the rpath manually install rpath is enough, we don't depend on\n\n# any cabal libraries anymore tests are statically compiled\n",
        "Line" : 82,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 7
    },
    "src/bindings/intercept/CMakeLists.txt" : {
      "ObjectId" : "59e9b48caac464133c87eed23adfd8ca019d644c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/intercept/env/CMakeLists.txt" : {
      "ObjectId" : "5476cc811dfaa53caa5ee562c0cca781c7a05c45",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/intercept/env/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "d0801ea06e86fa050e55bd13be326dbcbcbe4590",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/intercept/env/examples/CMakeLists.txt" : {
      "ObjectId" : "07490f9adc526754c54b018d9766a6b637ceab60",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/intercept/env/include/CMakeLists.txt" : {
      "ObjectId" : "3d748514058282e0a4cbfe870bc4a03269399d34",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/intercept/env/src/CMakeLists.txt" : {
      "ObjectId" : "030aed98a4225124792df67ae9e241a284576a67",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# must be shared!\n",
        "Line" : 15,
        "CharPositionInLine" : 70
      },
      "CommentCount" : 1
    },
    "src/bindings/intercept/env/tests/CMakeLists.txt" : {
      "ObjectId" : "41ff25775c95db7ed010d81d79561faa2579fd6d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/intercept/fs/CMakeLists.txt" : {
      "ObjectId" : "68af70537bb4949c745c31bf60fb31ef889b34a0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/io/CMakeLists.txt" : {
      "ObjectId" : "4f6ef833cd8b4178335d7cace55aa3a5276ffac0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check_binding_included (\"io_doc\" IS_INCLUDED SUBDIRECTORY \"io/doc\") if (IS_INCLUDED) add_subdirectory (doc) endif ()\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/bindings/io/doc/CMakeLists.txt" : {
      "ObjectId" : "7dac8fd92a4eb5998064b88e80d57f99f76ecbca",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ~~~\n\n# If needed add a library (e.g. found with pkg_check_modules)\n\n# target_include_directories (${IO_VARIANT_LIBRARY} SYSTEM PUBLIC ${SOMELIB_INCLUDE_DIRS})\n\n# target_compile_options (${IO_VARIANT_LIBRARY} PUBLIC ${SOMELIB_CFLAGS_OTHER})\n\n# target_link_elektra (${IO_VARIANT_LIBRARY} elektra-io ${SOMELIB_LDFLAGS})\n\n# ~~~\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# configure_file ( \"${CMAKE_CURRENT_SOURCE_DIR}/${IO_VARIANT_LIBRARY}.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/${IO_VARIANT_LIBRARY}.pc\" @ONLY )\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install ( FILES \"${CMAKE_CURRENT_BINARY_DIR}/${IO_VARIANT_LIBRARY}.pc\" DESTINATION lib${LIB_SUFFIX}/${TARGET_PKGCONFIG_FOLDER} )\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build test\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/bindings/io/ev/CMakeLists.txt" : {
      "ObjectId" : "fca0b7feb17b57affc8bc1a740722979831ba2a7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build library\n",
        "Line" : 6,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# create object library so that executables can use $<TARGET_OBJECTS:OBJ_${IO_VARIANT_LIBRARY}>\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Build test\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# add sources for elektra-io-ev for static and full builds\n",
        "Line" : 49,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 4
    },
    "src/bindings/io/ev/example/CMakeLists.txt" : {
      "ObjectId" : "c0f1623186002aa57d628d73bd31a0477f9d31bf",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add sources for elektra-io-ev for static and full builds\n",
        "Line" : 11,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# Build test\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/bindings/io/glib/CMakeLists.txt" : {
      "ObjectId" : "4220be830eecc39b937316559ae89fadb4423a28",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build library\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# create object library so that executables can use $<TARGET_OBJECTS:OBJ_${IO_VARIANT_LIBRARY}>\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Build test\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# add sources for elektra-io-glib for static and full builds\n",
        "Line" : 54,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 4
    },
    "src/bindings/io/glib/example/CMakeLists.txt" : {
      "ObjectId" : "2c86df9ad1bafbe56566a60366c8ac5cec66461e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add sources for elektra-io-glib for static and full builds\n",
        "Line" : 13,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# Build test\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/bindings/io/uv/CMakeLists.txt" : {
      "ObjectId" : "ef8791f24f4d397ce997a348b52e3f1f8d6ac843",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build library\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# create object library so that executables can use $<TARGET_OBJECTS:OBJ_${IO_UV_LIBRARY}>\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Build test\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# add sources for elektra-io-uv for static and full builds\n",
        "Line" : 73,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 4
    },
    "src/bindings/io/uv/example/CMakeLists.txt" : {
      "ObjectId" : "84afe1e1c86241208b2b84fd0289b0a99cbfc786",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add sources for elektra-io-uv for static and full builds\n",
        "Line" : 13,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : "# Build test\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/bindings/jna/CMakeLists.txt" : {
      "ObjectId" : "f9b6347ad940f814d96ff86f539d848bb72d5a4f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# the version schemes are different on the jdks\n\n# on osx/oracle jdk its called java 9.0.1\n\n# osx/oracle jdk 8 is called java 1.8.x\n\n# on ubuntu/open jdk its called java 1.9.0\n\n# therefore this workaround should work in all cases\n\n# as 9.x.x > 1.8 and 1.8.x > 1.8 and 1.9.x > 1.8\n\n# ~~~\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# See also: https://travis-ci.org/sanssecours/elektra/jobs/445840045\n",
        "Line" : 21,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# set by find_program\n",
        "Line" : 26,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "# first fill the elektra version in the pom file @ONLY to avoid replacing pom.xml placeholders which also use the\n\n# format ${}\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# required to have a recognizable name for the pom upon installation in case other software installs a pom to the\n\n# target directory and calls it pom.xml\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# The build system calls Maven to recompile the binding, if we change any of the following source files.\n",
        "Line" : 56,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Compile the source files and build the jar. We copy the source files into the build folder as that is the easiest\n\n# way to handle the integration between CMake and Maven.\n",
        "Line" : 76,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# and add maven test to execute with ctest in the testing phase\n",
        "Line" : 97,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# we cannot set DYLD_LIBRARY_PATH on new macOS versions, making the kdb tests fail if its not installed in\n\n# the system\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "src/bindings/swig/CMakeLists.txt" : {
      "ObjectId" : "225dffae8909eb630243771e1fde7af8dc8ffa50",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO rename swig_python3 to swig_python\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# remove sometime in the future\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "src/bindings/swig/lua/CMakeLists.txt" : {
      "ObjectId" : "e469db2c2673a9d2096063b158c964a5af8a645a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/lua/tests/CMakeLists.txt" : {
      "ObjectId" : "bf84a724c584f2749346dd16327efa8ed6c0fcd0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/python/CMakeLists.txt" : {
      "ObjectId" : "44d7ae923a3642394656fb69b0ceb9e6421eb9bc",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set (PythonInterp_FIND_VERSION_EXACT ON)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unfortunately the generated code produces warnings.\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "src/bindings/swig/python/tests/CMakeLists.txt" : {
      "ObjectId" : "6d78313eae2b00da76f1c7c187b34b7321c3a388",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/python2/CMakeLists.txt" : {
      "ObjectId" : "99e506c74c70c8d383e366bb0b56eb1006f1936a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set (PythonInterp_FIND_VERSION_EXACT ON)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure we use the correct Python version on macOS\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unfortunately compiling the generated code produces warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "src/bindings/swig/python2/tests/CMakeLists.txt" : {
      "ObjectId" : "f4e259c957697be694e7555d8203e3a62e30c01c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/ruby/CMakeLists.txt" : {
      "ObjectId" : "e4fa72b5fbf80da33bb38f7d257f22a20b7e9b67",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# try user environment first, then search for system libs  required on OSX under rvm\n",
        "Line" : 5,
        "CharPositionInLine" : 35
      },
      "1" : {
        "Text" : "# Prefer Ruby versions installed via Homebrew\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# minimal replacement for Ruby's mkmf.create_makefile\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# ~~~\n\n# message (STATUS \"Ruby executable: ${RUBY_EXECUTABLE}\")\n\n# message (STATUS \"Ruby library: ${RUBY_LIBRARY}\")\n\n# message (STATUS \"Ruby version: ${RUBY_VERSION}\")\n\n# to print RUBY_* variables for debugging build run cmake with -D_RUBY_DEBUG_OUTPUT=1\n\n# ~~~\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# specify the SWIG_TYPE_TABLE to use (has to be in sync with the ruby plugin)\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# disable certain compiler warnings for SWIG generated files\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# ~~~\n\n# TODO: Reenable the following warning after we add a virtual destructor to `PluginDatabase`, and its subclasses.\n\n# See also:\n\n# - https://github.com/ElektraInitiative/libelektra/pull/1841\n\n# - https://github.com/ElektraInitiative/libelektra/commit/15d67328\n\n# ~~~\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# add 'kdb' module\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# set the compiler settings for the generated file  (has to be done for each module\n",
        "Line" : 102,
        "CharPositionInLine" : 40
      },
      "9" : {
        "Text" : "# separately)\n",
        "Line" : 103,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# add the 'kdbtools' module\n",
        "Line" : 106,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# ~~~\n\n# CMAKE_INSTALL_PREFIX dependent install location\n\n# if we hit one of the usual cases (/usr/local or /usr) install the lib\n\n# in Ruby default include path\n\n# ~~~\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# should be under /usr/local/lib/...\n",
        "Line" : 133,
        "CharPositionInLine" : 55
      },
      "13" : {
        "Text" : "# should be under /usr/lib/...\n",
        "Line" : 136,
        "CharPositionInLine" : 53
      },
      "14" : {
        "Text" : "# fallback, define a custom location\n",
        "Line" : 139,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 15
    },
    "src/bindings/swig/ruby/tests/CMakeLists.txt" : {
      "ObjectId" : "2c20f98484ee61b93625e57b5fd5fa01e7cdf811",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set RUBYLIB to find newly built binding lib\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# special label for kdb\n",
        "Line" : 25,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 2
    },
    "src/error/CMakeLists.txt" : {
      "ObjectId" : "e1602cbbea346c015bec8dc45a6eb5390b05b637",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/include/CMakeLists.txt" : {
      "ObjectId" : "fe2c68dcb55a96e9eed5eb1c79760509634682b5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set ELEKTRA_NO_SANATIZE_*\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clang section\n",
        "Line" : 54,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : "# others section\n",
        "Line" : 57,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 3
    },
    "src/include/elektra/CMakeLists.txt" : {
      "ObjectId" : "5049cc5f05d3bf4bb3fd2a36af79df27595d0d06",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/include/kdbio/CMakeLists.txt" : {
      "ObjectId" : "b71fabcffa7ac8a843c57506e49d7bdbe6f38f0e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/CMakeLists.txt" : {
      "ObjectId" : "e495755101fbd02e86a9e188fd2e05bf1bf2cf04",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The subdirectory for LibElektra must be the last entry!\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/ease/CMakeLists.txt" : {
      "ObjectId" : "d5d315c5bc11300d3dc1dc3bcf26e821a8669fb9",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/elektra/CMakeLists.txt" : {
      "ObjectId" : "62a93807cc64634aadcf2dca1bb4f10c9b00e7a6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# For static inclusion of libraries we need a list\n\n# of symbols to make the static runtime linker work.\n\n#\n\n# For that there is the program elektra-export-symbols which\n\n# generates the sourcefiles exported_symbols.h\n\n# and exported_symbols.c containing an array of\n\n# all symbols.\n\n#\n\n# The program needs a list of all backends as\n\n# argument.\n\n#\n\n# Symbols of libelektratools will be treaded specially.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# do not include plugins configured with SHARED_ONLY in the exported symbols as those are only used for the FULL and STATIC builds\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include the shared header files of the elektra project\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include the current binary directory to get exported_symbols.h\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now add all source files of this folder\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# remove those we don't want..\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# remove the opmphm files\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# now add all source files of other folders\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# the targets built to export\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ~~~\n\n# message(STATUS \"ignore the following ADD_LIBRARY warning\")\n\n# add_library (elektra INTERFACE) # no SOVERSION?\n\n# ~~~\n",
        "Line" : 121,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# ~~~\n\n# target_link_libraries (elektra ${elektra-extension_LIBRARIES})\n\n# target_link_libraries (elektra elektra-core elektra-kdb)\n\n# set_target_properties (${elektra-all_LIBRARIES} PROPERTIES LINK_FLAGS \"--copy-dt-needed-entries\")\n\n# ~~~\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# ~~~\n\n# RPATH settings, see http://www.itk.org/Wiki/CMake_RPATH_handling\n\n# those settings are needed to find the plugins at runtime even without ld.so.conf\n\n# search only in the prefix the user decided to install elektra\n\n# (e.g. /usr/local/)\n\n# ~~~\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# for the next two builds, append some more sources\n",
        "Line" : 179,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# and get all libraries to link against\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# include the directories of all libraries for the static or full-shared build\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# if you want the same name for those 3 libraries, here is how to do it:\n\n# http://www.itk.org/Wiki/CMake_FAQ#How_do_I_make_my_shared_and_static_libraries_have_the_same_root_name.2C_but_different_suffixes.3F\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/libs/globbing/CMakeLists.txt" : {
      "ObjectId" : "152bdc09b5ce3970a7e7996d405ccbecae1f61ad",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/highlevel/CMakeLists.txt" : {
      "ObjectId" : "745ae6e90586146abece1825697b53321a39cffc",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/invoke/CMakeLists.txt" : {
      "ObjectId" : "631e7b72bf9735aef1a4037ee08841e565357e10",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/io/CMakeLists.txt" : {
      "ObjectId" : "110d9a77a503580bf65ad76ae3bc2cba869029db",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/io/adapter/CMakeLists.txt" : {
      "ObjectId" : "d56f58e36015c8d605e78215ad10f222b5088634",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/io/adapter/dbus/CMakeLists.txt" : {
      "ObjectId" : "b6c63dca87465cee419f00e82e781eaf7657d9e2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE CMAKE_POSITION_INDEPENDENT_CODE does not seem to work (e.g. CMake 3.9.2 on Travis)\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/libs/io/adapter/zeromq/CMakeLists.txt" : {
      "ObjectId" : "a19e402eac7a2fc2f46c320bf86f6f4fb429afb8",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build library\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# NOTE CMAKE_POSITION_INDEPENDENT_CODE does not seem to work (e.g. CMake 3.9.2 on Travis)\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "src/libs/loader/CMakeLists.txt" : {
      "ObjectId" : "c064d9c7267fda4d63a393c12e78471135762298",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/meta/CMakeLists.txt" : {
      "ObjectId" : "33680b0407ca21326e2e06679a926618a5ca4893",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/notification/CMakeLists.txt" : {
      "ObjectId" : "b0e43bed8e8d7cb4c305988bb255ee85a0009d97",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/notification/tests/CMakeLists.txt" : {
      "ObjectId" : "8f7a04ca5f7056e1c402b3dd03f09690635749d5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang with enabled ASAN reports that this test leaks memory: https://travis-ci.org/sanssecours/elektra/jobs/383014685#L2197\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/opts/CMakeLists.txt" : {
      "ObjectId" : "b0f0ec92088b0e54189c4b12e726d7d25acc7575",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/plugin/CMakeLists.txt" : {
      "ObjectId" : "2c5dd5317b1f187b5e1608f4ecf1bc08e29dc721",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/pluginprocess/CMakeLists.txt" : {
      "ObjectId" : "414ccf5d0b49498093e250dddeb0bc5c646dbdd6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/pluginprocess/tests/CMakeLists.txt" : {
      "ObjectId" : "2e46f0d170f164ad7e098f393a83654314c3ec84",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/proposal/CMakeLists.txt" : {
      "ObjectId" : "ee80e9cd8417dc7621ddecb6538c366b11d32988",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/tools/CMakeLists.txt" : {
      "ObjectId" : "0475cab45fb54b000a8790cc621020945ee738b6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/tools/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "fc38ad9c1dc8f996f809b68068468c1a566b6673",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/tools/examples/CMakeLists.txt" : {
      "ObjectId" : "929fcb9a484416fdac565ff8ec313e521cdff02c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/tools/include/CMakeLists.txt" : {
      "ObjectId" : "9377e8afe8ad463486270152cd4d9b46cdd1e96f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/tools/src/CMakeLists.txt" : {
      "ObjectId" : "316b5d59665b06aaad33d80ce2aa8790482e2c88",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# TODO: Reenable the following warning after we add a virtual destructor to `PluginDatabase`, and its subclasses.\n\n# See also:\n\n# - https://github.com/ElektraInitiative/libelektra/pull/1841\n\n# - https://github.com/ElektraInitiative/libelektra/commit/15d67328\n\n# ~~~\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/tools/tests/CMakeLists.txt" : {
      "ObjectId" : "29b567f581c09860f3043e3930df59387b41afcf",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# TODO: Reenable the following warning after we add a virtual destructor to `PluginDatabase`, and its subclasses.\n\n# See also:\n\n# - https://github.com/ElektraInitiative/libelektra/pull/1841\n\n# - https://github.com/ElektraInitiative/libelektra/commit/15d67328\n\n# ~~~\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/typesystem/libfa/CMakeLists.txt" : {
      "ObjectId" : "98e79e0bc31248f9c3f9aa8bb0afee9388bb96fc",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid build artifacts in the source folder\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/typesystem/specelektra/CMakeLists.txt" : {
      "ObjectId" : "3e20503e0e8644b0dcc1b8eb19f9914cfc323e4d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid build artifacts in the source folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/typesystem/spectranslator/CMakeLists.txt" : {
      "ObjectId" : "3635598817a8856cf26e459afefcc5e36db9362b",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid build artifacts in the source folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/utility/CMakeLists.txt" : {
      "ObjectId" : "0db72ddd423b83f8f78993a5d3e782b90101cca8",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/CMakeLists.txt" : {
      "ObjectId" : "1270a114ecae9978bec6d8cf3dc0a3d884c4ac85",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# message (STATUS ${plugin})\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#\n\n# Now ADDED_DIRECTORIES and ADDED_PLUGINS is modified accordingly\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/plugins/augeas/CMakeLists.txt" : {
      "ObjectId" : "2ba1dbe4d117a4fda0911299663255ec2d8783c5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# The unit test for the plugin fails on an ASAN enabled macOS build, if we do not disable container overflow detection.\n\n# Reference: https://travis-ci.org/sanssecours/elektra/jobs/418554628\n\n# ~~~\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/plugins/base64/CMakeLists.txt" : {
      "ObjectId" : "964fed533c1e4064dc4ad1ae422a13365b843e91",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/blockresolver/CMakeLists.txt" : {
      "ObjectId" : "710c87c385c5dea99c6d6c2445a6f6079b76ff98",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake-format\n",
        "Line" : 3,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 1
    },
    "src/plugins/boolean/CMakeLists.txt" : {
      "ObjectId" : "9f0fcdf8d7e9bd3234e652c81b700401d55cbb0a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/c/CMakeLists.txt" : {
      "ObjectId" : "9b886f9a7a71845217558e121def65150926b7fd",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/cache/CMakeLists.txt" : {
      "ObjectId" : "78cb20fc040f653872d148f29a3e3fc613494a9e",
      "LastModified" : "2019-04-09T10:19:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/cachefilter/CMakeLists.txt" : {
      "ObjectId" : "f9bb2b5bda8da5da20be17ddcafe6a780a8ca396",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/camel/CMakeLists.txt" : {
      "ObjectId" : "7e0dc021c512bbf1bfbeac343a4f578c41f6ff5d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/ccode/CMakeLists.txt" : {
      "ObjectId" : "326e358fc10428009d696ce15e49fb62b81b6208",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/conditionals/CMakeLists.txt" : {
      "ObjectId" : "5b96552c5389f839f4675a739c2aa10263968128",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/constants/CMakeLists.txt" : {
      "ObjectId" : "cf57ebf01b4509f7035fd885de23f3df84f7bc30",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/counter/CMakeLists.txt" : {
      "ObjectId" : "9005fadf4182ff6f284fbdb67fb6787510c8eaa5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/cpptemplate/CMakeLists.txt" : {
      "ObjectId" : "d97430fb7dcfbd8d677545351ff75ad3c469bd81",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/cpptype/CMakeLists.txt" : {
      "ObjectId" : "89339f0f1a351525c4c1bdcb6fc8b1ae8826e4e2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# The unit test for the plugin fails on an ASAN enabled macOS build, if we do not disable container overflow detection.\n\n# Reference: https://travis-ci.org/sanssecours/elektra/jobs/418554628\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/plugins/crypto/CMakeLists.txt" : {
      "ObjectId" : "ec6a278a3997370782b4269c5acf1f576358dfc2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Plugin variant: crypto_openssl\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Plugin variant: crypto_gcrypt\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Plugin variant: crypto_botan\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# clean up for dependency phase\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#\n\n# Compile Variant: libgcrypt\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Compile Variant: OpenSSL\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Compile Variant: Botan\n\n#\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/plugins/csvstorage/CMakeLists.txt" : {
      "ObjectId" : "f449beb870fdf47fbaccb5a6f9233278a48b8e78",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/curlget/CMakeLists.txt" : {
      "ObjectId" : "f857788324e5f03bff433a11e26082c1f83abadb",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/date/CMakeLists.txt" : {
      "ObjectId" : "d883a38d67cb97055ebb6112d77cf205a16df3b0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The plugin does not work correctly if we compile it with GCC 4.7\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/plugins/dbus/CMakeLists.txt" : {
      "ObjectId" : "a8112bb906f0202bbecb92dd38f250f3e82df813",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/dbusrecv/CMakeLists.txt" : {
      "ObjectId" : "0394ae1bdfe840a7413f6f0483776ed7a34d944a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# target_compile_options(elektra-dbusrecv PRIVATE \"-fPIC\")\n\n# set_property (TARGET ${ADAPTER_OBJECT} PROPERTY CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# ~~~\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ~~~\n\n# if (BUILD_FULL OR BUILD_STATIC)\n\n#\n\n# endif ()\n\n# ~~~\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# the test requires an IO binding; using io_uv for now\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# libuv is present; otherwise io_uv bindings would not be added\n",
        "Line" : 52,
        "CharPositionInLine" : 45
      },
      "4" : {
        "Text" : "# add sources manually because add_plugintest does not support generator expressions for additional source files\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# add sources for elektra-io-uv for static and full builds\n",
        "Line" : 63,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 6
    },
    "src/plugins/desktop/CMakeLists.txt" : {
      "ObjectId" : "9728925c8622dd23bdbf09824198ad2987ffa286",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/dini/CMakeLists.txt" : {
      "ObjectId" : "40b27646dc2604d8084e25ff6441e9daca025770",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/directoryvalue/CMakeLists.txt" : {
      "ObjectId" : "30330a28f41533672414d7f5511157aa9dcfa2e0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/doc/CMakeLists.txt" : {
      "ObjectId" : "80679410d00e261a9f463c4a37ce86b31763cde0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/dpkg/CMakeLists.txt" : {
      "ObjectId" : "52dca329461a72a30204e4a94c76490d068f6b15",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/dump/CMakeLists.txt" : {
      "ObjectId" : "2d9fafec083dd4b371c7a44edd2a7d7d0492956e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/enum/CMakeLists.txt" : {
      "ObjectId" : "5ce880a5527388ba6bbf83caece8061e6c7be786",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/error/CMakeLists.txt" : {
      "ObjectId" : "743e273c00bc64e5d63a71cb3def97ac6234e4b9",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/fcrypt/CMakeLists.txt" : {
      "ObjectId" : "5812b431cc6f7e88df346cce8c5ff6b1fff264de",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/file/CMakeLists.txt" : {
      "ObjectId" : "a1add4ddecd828894dc3e3c2f648fa46351a2c17",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/filecheck/CMakeLists.txt" : {
      "ObjectId" : "b1af8bd23e18faf8b057004491b77c48e3ae0aa5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/fstab/CMakeLists.txt" : {
      "ObjectId" : "a92281e5c750563760bf15ed0e19ecf5105eb587",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/gitresolver/CMakeLists.txt" : {
      "ObjectId" : "efcb8d14d7eb988ec481d9465a587b649e57ece0",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/glob/CMakeLists.txt" : {
      "ObjectId" : "a4b4e59cd1267d2c19a018a740f4d81f7f005068",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/gopts/CMakeLists.txt" : {
      "ObjectId" : "25a84217274d64f5255768d471378db80ec789b5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/gpgme/CMakeLists.txt" : {
      "ObjectId" : "56d6a51e761bba9e8005532e83ac6e74e7328080",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/haskell/CMakeLists.txt" : {
      "ObjectId" : "65545f5e6ad601ad8d3800af816ceab217349cb3",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/hexcode/CMakeLists.txt" : {
      "ObjectId" : "081cd82abd1e6ee04e117ff25ec15747f1e6858d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/hexnumber/CMakeLists.txt" : {
      "ObjectId" : "a4b8b88b95b717b324501fecb176a454fad8cc5c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/hidden/CMakeLists.txt" : {
      "ObjectId" : "a6568f9dfeeb751cc0f9bcbed68208d3d9a25275",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/hosts/CMakeLists.txt" : {
      "ObjectId" : "88c49788e163fe3b29093bedf014b8f4d94f3607",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/iconv/CMakeLists.txt" : {
      "ObjectId" : "a35b3af1cb0efeaefee5ed611d211a6a91300d88",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/ini/CMakeLists.txt" : {
      "ObjectId" : "c1b90a34d2975892f5cfe041fee899200c739d8e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/internalnotification/CMakeLists.txt" : {
      "ObjectId" : "ef7c56e245ddea2a3efabe9214cad1eaf58e1aab",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/ipaddr/CMakeLists.txt" : {
      "ObjectId" : "2ff94e7e379519c8217e6176e14f4109f1ee3d54",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/iterate/CMakeLists.txt" : {
      "ObjectId" : "409b0e7d1979a8a5f0417f11493794cc870c7c85",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/jni/CMakeLists.txt" : {
      "ObjectId" : "4b4d3d2e919b329afc1f0f04284b3d3c0a6ae15d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for check_symbol_exists\n",
        "Line" : 17,
        "CharPositionInLine" : 91
      },
      "1" : {
        "Text" : "# Generate header file\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "src/plugins/journald/CMakeLists.txt" : {
      "ObjectId" : "1a79ea63363fea0cd1b5ca86d0534302e10deb8f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/keytometa/CMakeLists.txt" : {
      "ObjectId" : "868cdaeb3546de33a567f5c23d148d8a5258b6a2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/line/CMakeLists.txt" : {
      "ObjectId" : "02d664f2a0f0792c90ac6bed6a92e89ed7068a44",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/lineendings/CMakeLists.txt" : {
      "ObjectId" : "00ecfbe628811ffca1d74ded023c96c5d645a8ff",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/list/CMakeLists.txt" : {
      "ObjectId" : "acf1e4b9e39703e0724fe6818c2789c24f977d66",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/logchange/CMakeLists.txt" : {
      "ObjectId" : "02951091627a2cac885ca1a82a86e1926470af0e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/lua/CMakeLists.txt" : {
      "ObjectId" : "4efdd9fc40d6b9a0d30c139322ae82cbd0ec7268",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we call this SWIG_COMPILE_FLAGS because we have the same variable in our swig bindings\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# TODO: ENABLE_BROKEN_TESTS\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# bindings are required for tests\n",
        "Line" : 50,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "# test environment clears env so setting LUA_CPATH is no option we workaround this by changing the current directory to our\n\n# bindings output directory + per default lua loads modules from current directory\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "src/plugins/mathcheck/CMakeLists.txt" : {
      "ObjectId" : "2d30e3d6fd127d43767327d60be7bde893f8e5c3",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/mini/CMakeLists.txt" : {
      "ObjectId" : "ce242a108e40fda0234e95fa375f42b7120f7833",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/mmapstorage/CMakeLists.txt" : {
      "ObjectId" : "b45f6e24017a307f79e51b3004a0acea7a5516b6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Plugin variant: mmapstorage_crc\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Plugin variant: mmapstorage\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/plugins/mozprefs/CMakeLists.txt" : {
      "ObjectId" : "fcf965f4cd54a58201dd7e9c6de1316b4e5c64a6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/multifile/CMakeLists.txt" : {
      "ObjectId" : "b5a6591bf047689a6dd2536e06545978ea4ef2ad",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/network/CMakeLists.txt" : {
      "ObjectId" : "6b67bdf6d2004238ec4512b061ea6c593b6cef3c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/ni/CMakeLists.txt" : {
      "ObjectId" : "baf9effa04c870541d49fb663dcd249005c170c7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/ni/nickel-1.1.0/src/Makefile" : {
      "ObjectId" : "9cd38d13fb171cbf47f56dc14115c3a1c60a5d28",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###############################################################################\n\n# Nickel - a library for hierarchical maps and .ini files\n\n# One of the Bohr Game Libraries (see chaoslizard.org/devel/bohr)\n\n# Copyright (C) 2008 Charles Lindsay.  Some rights reserved; see COPYING.\n\n# $Id: Makefile 349 2008-01-19 18:18:22Z chaz $\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This Makefile may need help on non-GNU/Linux systems.  Contributions are\n\n# welcome!  ...But no GNU autotools please.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Standard configurable make options.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Release-specific stuff.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project-specific stuff.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Rules.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/plugins/noresolver/CMakeLists.txt" : {
      "ObjectId" : "df9ce344fee8d8e08dd40ce8c6e20958c65935c3",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/null/CMakeLists.txt" : {
      "ObjectId" : "5f2cc65532b365f7231ea2f6536c2bda630c8573",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/passwd/CMakeLists.txt" : {
      "ObjectId" : "08efb4d6f663e9bb85dd62ae23d6298b261431ad",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# no need to remove the plugin as our fallbacks have no deps\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/plugins/path/CMakeLists.txt" : {
      "ObjectId" : "cc012e5f7752cda98b0168c6b67f189c4c5181d6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/process/CMakeLists.txt" : {
      "ObjectId" : "77d9bc9e75942566162bfd5cc525b0019bf86391",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/profile/CMakeLists.txt" : {
      "ObjectId" : "6c0191aad581c566f1258bde477bbcbf1002f320",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/python/CMakeLists.txt" : {
      "ObjectId" : "08b6756db9e647cb8fe86535fa0e8f7eae3885a4",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we call this SWIG_COMPILE_FLAGS because we have the same variable in our swig bindings\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Unfortunately compiling the generated code produces warnings about casts between incompatible function types.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# bindings are required for tests\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# test environment clears env so setting PYTHONPATH is no option we workaround this by changing the current directory to our\n\n# bindings output directory + our test adds the current directory to pythons sys.path\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "src/plugins/python2/CMakeLists.txt" : {
      "ObjectId" : "5f80af51ea1f6a9e064cf87b9b4b27b7f2305851",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure we use the correct Python version on macOS\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# we call this SWIG_COMPILE_FLAGS because we have the same variable in our swig bindings\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# generate readme from pythons3 README.md it will overwrite previously generated file of add_plugin directly above\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# bindings are required for tests\n",
        "Line" : 96,
        "CharPositionInLine" : 60
      },
      "4" : {
        "Text" : "# test environment clears env so setting PYTHONPATH is no option we workaround this by changing the current directory to our\n\n# bindings output directory + our test adds the current directory to pythons sys.path\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/plugins/quickdump/CMakeLists.txt" : {
      "ObjectId" : "1639d23143dca3c141a1f9c2005af8ed033492ab",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/range/CMakeLists.txt" : {
      "ObjectId" : "49b9957d192a8b1c18312cc1d75ad9be5b737b20",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable test for Clang + valgrind combination: https://github.com/ElektraInitiative/libelektra/issues/1871\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/plugins/reference/CMakeLists.txt" : {
      "ObjectId" : "5896cd3d9a5a5abd969d8b24fc5ccdf79ea50372",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/regexdispatcher/CMakeLists.txt" : {
      "ObjectId" : "13a05ea62eb8033d540006e61b5dc7168ee1d7da",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/regexstore/CMakeLists.txt" : {
      "ObjectId" : "2f2572ffb2dce1d5d46bd9d41748cbc0e87c42d2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/rename/CMakeLists.txt" : {
      "ObjectId" : "402ed27e60e82d17d99368ad97e6cd1c167b63ea",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/required/CMakeLists.txt" : {
      "ObjectId" : "047e5c630c75f1058442f2e3b861612a150b1ed4",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/resolver/CMakeLists.txt" : {
      "ObjectId" : "931f97a1960da961ae4d0fe8c16661dd317f74a7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# default resolver\n",
        "Line" : 6,
        "CharPositionInLine" : 43
      },
      "1" : {
        "Text" : "# default\n",
        "Line" : 33,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "# don't forget near-global scope for CMake variables\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/plugins/ruby/CMakeLists.txt" : {
      "ObjectId" : "c4bbc38ca31186cefb6b615b945e192c81ada01c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prefer Ruby versions installed via Homebrew\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ~~~\n\n# Disable on GCC 4 and earlier:\n\n# - https://build.libelektra.org/jenkins/job/elektra-gcc47-all\n\n# - https://build.libelektra.org/jenkins/job/elektra-gcc-configure-debian-wheezy\n\n# ~~~\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# we call this SWIG_COMPILE_FLAGS because we have the same variable in our swig bindings\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Disable warnings produced by generated code\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# bindings are required for tests\n",
        "Line" : 78,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "src/plugins/semlock/CMakeLists.txt" : {
      "ObjectId" : "0de59816bb7306143a4b41eec798ee0a2f2c371d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ADD_TEST\n",
        "Line" : 5,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 1
    },
    "src/plugins/shell/CMakeLists.txt" : {
      "ObjectId" : "91fd2eb3da702890daeb758eb0a909fb35fc86ec",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/simpleini/CMakeLists.txt" : {
      "ObjectId" : "cb5b7f1edc3f56e58363ab2bf3d06a6b1d9343c6",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/simplespeclang/CMakeLists.txt" : {
      "ObjectId" : "bb65042228e512eafd60ee3ccd689ba71ec4591e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/spec/CMakeLists.txt" : {
      "ObjectId" : "81e1a35f596d11bd3274f2708a1c1d95030d253a",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/specload/CMakeLists.txt" : {
      "ObjectId" : "44834de47381b3b2ffe02a0be714908697332244",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/struct/CMakeLists.txt" : {
      "ObjectId" : "ae16c27465b768785e6267afe75cb4818b655c88",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/sync/CMakeLists.txt" : {
      "ObjectId" : "17cae42151638fe8905c6b64c2defdf7055bedea",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/syslog/CMakeLists.txt" : {
      "ObjectId" : "ef1c7314796b39c2b9871d75ece40814523fc044",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/tcl/CMakeLists.txt" : {
      "ObjectId" : "e8f820a30d46fc0d815284763f962c4834a62f24",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/template/CMakeLists.txt" : {
      "ObjectId" : "f065ad7f3828f33243d71b1698df06d0fe7c479c",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/timeofday/CMakeLists.txt" : {
      "ObjectId" : "39cf65722edf17e61f74681ea1fda5c9fa1e5f84",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/tracer/CMakeLists.txt" : {
      "ObjectId" : "e66232bd4296517720cfd4e609d513886b703bce",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/type/CMakeLists.txt" : {
      "ObjectId" : "1f1e3065cb27303d050f2ff51b2211db7472d586",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/typechecker/CMakeLists.txt" : {
      "ObjectId" : "a559a58bf882e5812eb1d469561dafe0fa045011",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if haskell was not found, the target will not be created and a message was already printed so we can skip the extra installation\n\n# procedures\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# no extra dependency required so we can inline it without needing a user sandbox\n",
        "Line" : 33,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# copy our small typechecker sandbox to the library dir so it can be easily deployed and use the dependencies for hint from\n\n# there\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# copy our prelude library so it can be always used for mounting typechecker specifications\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "src/plugins/uname/CMakeLists.txt" : {
      "ObjectId" : "042bf42b25f88727e28be95fa5fb90aa2b934dbc",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/validation/CMakeLists.txt" : {
      "ObjectId" : "9dbb9e24b8e1f98d8b2568365f148550810977c3",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/wresolver/CMakeLists.txt" : {
      "ObjectId" : "91116d1eebe9543f34b6ee9f3998c1455de10cb3",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/xerces/CMakeLists.txt" : {
      "ObjectId" : "81dea820b3e082ce216a6766aea16b9ca72ee87d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/xerces/xerces/pom.xml" : {
      "ObjectId" : "a291d11b568ad1eee8af87485ef7184f597ab0fd",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "src/plugins/xmltool/CMakeLists.txt" : {
      "ObjectId" : "284d597c2056947079ddb5f6d1ecbf6931704308",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/yajl/CMakeLists.txt" : {
      "ObjectId" : "93ceae54bebce4dfc1fde6c1098a3f397217d95f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/yambi/CMakeLists.txt" : {
      "ObjectId" : "86ed35b7cebe19cc3333770981dde598af1d82fb",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This functions checks if the dependencies for the YAMBi plugin are available.\n\n#\n\n# If they are, the function sets the variable `FOUND_DEPENDENCIES` to `TRUE`. The function then also sets:\n\n#\n\n# - `BISON_VERSION` to the version number of the detected version of Bison\n\n#\n\n# and defines the macro `bison_target`. If the function was unsuccessful it sets `FOUND_DEPENDENCIES` to `FALSE` and stores the reason for\n\n# the failure in the variable `FAILURE_MESSAGE`.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add path to Homebrew version of Bison, if it exists.\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# This functions generates the source files of the YAML parser using Bison. If generating the source files was successful, then it sets the\n\n# variables:\n\n#\n\n# - `GENERATED_CODE` to `TRUE`,\n\n# - `BISON_YAMBI_OUTPUT_SOURCE` to the filepath of the parser source, and\n\n# - `BISON_YAMBI_OUTPUT_HEADER` to the filepath of the parser header\n\n#\n\n# . If the function was unsuccessful it sets `GENERATED_CODE` to `FALSE` and stores the reason for the error in the variable\n\n# `FAILURE_MESSAGE`.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ignore runtime error about member call on address, which does not point to object of type `__codecvt_abstract_base` in\n\n# `libstdc++`. See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81068\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "src/plugins/yamlcpp/CMakeLists.txt" : {
      "ObjectId" : "d95230f03b26832aed0c59383772be4bf0ebd18d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/yamlsmith/CMakeLists.txt" : {
      "ObjectId" : "4d9441aa7347666b35a64fa94c47a9c6110c0de7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/plugins/yanlr/CMakeLists.txt" : {
      "ObjectId" : "fb0f4686beb814439b6bc6b54b405d4aa33c51d9",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This functions checks if the dependencies for the Yan LR plugin are available.\n\n#\n\n# If they are, the function sets the variable `FOUND_DEPENDENCIES` to `TRUE`. The function then also sets:\n\n#\n\n# - `ANTLR_EXECUTABLE` to the name of the ANTLR executable,\n\n# - `ANTLR4CPP_LIBRARIES` to the paths of the libraries provided by ANTLR’s C++ runtime, and\n\n# - `ANTLR4CPP_INCLUDE_DIRS` to the paths of the included directories of ANTLR’s C++ runtime\n\n#\n\n# . If the function was unsuccessful it sets `FOUND_DEPENDENCIES` to `FALSE` and stores the reason for the failure in the variable\n\n# `FAILURE_MESSAGE`.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This functions generates the source files of the YAML parser using the given ANTLR executable (`ANTLR_EXECUTABLE`). The function also\n\n# invokes the script `RenameSymbols.cmake` to replace the symbol names used by ANTLR in error messages by a more human readable form.\n\n#\n\n# The function exports the list\n\n#\n\n# - `GENERATED_SOURCE_FILES`, which contains the list of source files generated by ANTLR and `RenameSymbols.cmake`\n\n#\n\n# .\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The generated parser code seems to contain a double free that causes the unit test to crash with a segfault on **some** systems that use\n\n# `glibc`. If AddressSanitizer is enabled everything seems to work fine.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We only disable the test, if we detect a GNU C Library based system.\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Unfortunately it looks like ANTLR’s code [causes a container-overflow](https://github.com/antlr/antlr4/issues/2332).\n",
        "Line" : 172,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 5
    },
    "src/plugins/yanlr/RenameSymbols.cmake" : {
      "ObjectId" : "1f4324400c8179dca3510f7c426e93dbf9600556",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script changes the names of symbols used by ANTLR in error messages. For that purpose the script\n\n#\n\n# - reads the generated parser code stored in the file `PARSER_SOURCE_FILE`,\n\n# - replaces the symbol names with a more human readable form, and\n\n# - stores the result in the file `PARSER_MODIFIED_SOURCE_FILE`\n\n#\n\n# .\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/plugins/yawn/CMakeLists.txt" : {
      "ObjectId" : "b1b13ebaa3732c8df1adc2d9491000eeeac29c1f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This functions checks if the dependencies for the YAwn plugin are available.\n\n#\n\n# If they are, the function sets the variable `FOUND_DEPENDENCIES` to `TRUE`. The function then also sets:\n\n#\n\n# - `YAWN_INCLUDE_DIRS` to the path of the include directories needed by YAwn,\n\n# - `YAWN_LIBRARIES` to the path of the libraries needed to compile YAwn, and\n\n# - `SOURCE_FILES` to the list of source files of the YAwn plugin\n\n#\n\n# . If the function was unsuccessful it sets `FOUND_DEPENDENCIES` to `FALSE` and stores the reason for the failure in the variable\n\n# `FAILURE_MESSAGE`.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ignore runtime error about member call on address, which does not point to object of type `__codecvt_abstract_base` in\n\n# `libstdc++`. See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81068\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Make sure the build system recreates the header for the grammar, if we modify `yaml.bnf`\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "src/plugins/yaypeg/CMakeLists.txt" : {
      "ObjectId" : "047f6bfd9b83bea01a6d82ca5173bb4d7541224b",
      "LastModified" : "2019-04-12T12:54:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This functions checks if the dependencies for the YAy PEG plugin are available.\n\n#\n\n# If they are, the function sets the variable `FOUND_DEPENDENCIES` to `TRUE`. The function then also sets:\n\n#\n\n# - `PEGTL_VERSION` to the version number of the detected version of PEGTL, and\n\n# - `PEGTL_INCLUDE_DIRS` to the header directory of PEGTL\n\n#\n\n# . If the function was unsuccessful it sets `FOUND_DEPENDENCIES` to `FALSE` and stores the reason for the failure in the variable\n\n# `FAILURE_MESSAGE`.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/plugins/zeromqrecv/CMakeLists.txt" : {
      "ObjectId" : "04745c80aeb7fde43804f9ee6d5e7abe7bfe7014",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libuv is present; otherwise io_uv bindings would not be added\n",
        "Line" : 24,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# add sources manually because add_plugintest does not support generator expressions for additional source files\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# add sources for elektra-io-uv for static and full builds\n",
        "Line" : 40,
        "CharPositionInLine" : 34
      },
      "CommentCount" : 3
    },
    "src/plugins/zeromqsend/CMakeLists.txt" : {
      "ObjectId" : "143b080c132707c55f418557e8f8be73b1120d93",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the test requires pthread\n",
        "Line" : 16,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 1
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "fa988dc5f7ec2f0b5cad4372e13f09077357545d",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/gen/CMakeLists.txt" : {
      "ObjectId" : "18522453cfae7cb099dba7e734e5211660fde9b8",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# file(GLOB SUPPORT RELATIVE support \"*.py\")\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# call the gen tool\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# add_subdirectory(util)\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# ~~~\n\n# for future cmakification\n\n# add_subdirectory(support)\n\n# add_subdirectory(template)\n\n# add_subdirectory(tests)\n\n# ~~~\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "src/tools/gen/Makefile" : {
      "ObjectId" : "cfc417b70f48f79302db5d5e7db7f193ee8449bf",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#this Makefile allows you to build some examples\n\n#note that the build is in-tree\n\n#\n\n#You need to have Elektra installed and pkg-config available so that\n\n#it will work.\n\n#\n\n#For compilation, just type:\n\n#\n\n# make\n\n#\n\n#\"fatal error: kdb.h\" means that you do not have Elektra installed\n\n#properly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#staticcontextlift contextvisit contexteditor location\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#lift_context_static.hpp:${GEN} tests/lift.ini template/context_static.hpp support/context.py util.py cpp_util.py\n\n#\t${GEN} tests/lift.ini template/context_static.hpp -o lift_context_static.hpp\n\n#\n\n#visit_context.hpp:${GEN} tests/visit.ini template/context_static.hpp support/context.py util.py cpp_util.py\n\n#\t${GEN} tests/visit.ini template/context_static.hpp -o visit_context.hpp\n\n#\n\n#editor_context.hpp:${GEN} tests/editor.ini template/context_static.hpp support/context.py util.py cpp_util.py\n\n#\t${GEN} tests/editor.ini template/context_static.hpp -o editor_context.hpp\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#staticcontextlift:lift_context_static.hpp tests/lift_context.cpp\n\n#\tc++ ${FLAGS} ${LDFLAGS} ${CXXFLAGS}  -std=c++11 -Wall tests/lift_context.cpp lift_context_static.hpp ${ELEKTRA}  -o staticcontextlift\n\n#\n\n#contextvisit:visit_context.hpp tests/visit_context.cpp\n\n#\tc++ ${FLAGS} ${LDFLAGS} ${CXXFLAGS}  -std=c++11 -Wall tests/visit_context.cpp visit_context.hpp ${ELEKTRA}  -o contextvisit\n\n#\n\n#contexteditor:editor_context.hpp tests/editor_context.cpp\n\n#\tc++ ${FLAGS} ${LDFLAGS} ${CXXFLAGS}  -std=c++11 -Wall tests/editor_context.cpp editor_context.hpp ${ELEKTRA}  -o contexteditor\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/tools/hub-zeromq/CMakeLists.txt" : {
      "ObjectId" : "84dcca81205dee413b3789b4dd919b1ee47d521b",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find installation path\n",
        "Line" : 7,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Build hub\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# configure and copy files\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# copy hub binary\n",
        "Line" : 27,
        "CharPositionInLine" : 98
      },
      "4" : {
        "Text" : "# install files to destination\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "src/tools/kdb/CMakeLists.txt" : {
      "ObjectId" : "2f5a51bdb69239501eb2fc8849c78dc43cf0f4d5",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: add helper libraries of plugins, too\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tools/qt-gui/CMakeLists.txt" : {
      "ObjectId" : "2dbe597a297240ee41248e2d0658580cf95f85ce",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Provide list of default paths for Homebrew’s Qt\n",
        "Line" : 8,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 1
    },
    "src/tools/qt-gui/deployment.pri" : {
      "ObjectId" : "5441b63dc855592018a104ca9f08a76f996f4b69",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/tools/qt-gui/qt-gui.pro" : {
      "ObjectId" : "a378f66b7a71d3781a1a2a64cfad892106d2bab2",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Additional import path used to resolve QML modules in Qt Creator's code model\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default rules for deployment.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tools/qt-gui/unittest/unittest.pro" : {
      "ObjectId" : "aad1714a6cc85ccd5e1db5cc2a8ef8c88db67a46",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/tools/race/CMakeLists.txt" : {
      "ObjectId" : "ae36f8db5e469892ccd8165e7e137d4693f90ade",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# macOS does not provide pthread_barrier_t and all related functions are not to be found. Thus we exclude the race test from macOS.\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tools/rest-backend/CMakeLists.txt" : {
      "ObjectId" : "89e4d59eca6aa1dac07b5f5aafa05bff2cfd6f2f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/rest-backend/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "0ef2f841b5da445aa9753e1a3aa948194fecebc7",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/rest-backend/tests/CMakeLists.txt" : {
      "ObjectId" : "d8e1ff9adfd632452ed127e0f99000fca91f82a9",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/rest-frontend/CMakeLists.txt" : {
      "ObjectId" : "08e0b134c468cb484cb10c33982fb42d7b88ea8e",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create simplified tool name without special characters\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# define configuration path\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# find installation path\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# set variables for Gruntfile.js configuration\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# configure and copy files\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# install files to destination\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# attempt to install npm dependencies\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "src/tools/web/CMakeLists.txt" : {
      "ObjectId" : "024b35db2d129ff7f5d7073e2317b395670e4289",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define configuration path\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# find installation path\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# configure and copy files\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# install files to destination\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# build elektra-web\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# generate manpages\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# test apis\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# testing is possible\n",
        "Line" : 93,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 8
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "753da886aa1023336d9599b147cdfae8d07aeb75",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Elektra Test Suite\n\n#\n\n# This file is responsible for generating all tests\n\n# regarding Elektra's core.\n\n#\n\n# Backends and Bindings specific tests might be in\n\n# their folders.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent GoogleTest from overriding our compiler/linker options when building with Visual Studio\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# don't call add_headers in a loop\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/abi/CMakeLists.txt" : {
      "ObjectId" : "55a16c85c9a03c51b452a0177798cbea7bd884e4",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/cframework/CMakeLists.txt" : {
      "ObjectId" : "26168e41d1bdc189973a56786692fb4d20e27a50",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/ctest/CMakeLists.txt" : {
      "ObjectId" : "50920f3717b468a270bd11f6a68b0b0271e5d030",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/kdb/CMakeLists.txt" : {
      "ObjectId" : "18753216c48d1357e95b8a0e19bcd66e7ccbd762",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/shell/CMakeLists.txt" : {
      "ObjectId" : "3a4a5fa21dfd50557d52091388f25af9b6e6df0f",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Add a test for a script\n\n#\n\n# The given testname is blah.sh\n\n#   the script file must be called blah.sh\n\n#   it will be installed on the system as blah.sh\n\n#   the test will be called testscr_blah\n\n#   and the script file for the test will be testscr_blah.sh\n\n# ~~~\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# dash does memleak:\n",
        "Line" : 102,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 2
    },
    "tests/shell/external/CMakeLists.txt" : {
      "ObjectId" : "5d44a3940708e201c98961fa0bb8f8c6b30ebe72",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# don't acutally add as test, only run via `kdb run_all`\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tests/shell/shell_recorder/CMakeLists.txt" : {
      "ObjectId" : "8e6145c8f514436f51e963ea6654c2d070607689",
      "LastModified" : "2019-04-07T16:33:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set kdb command\n",
        "Line" : 30,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 1
    },
    "tests/shell/shell_recorder/tutorial_wrapper/CMakeLists.txt" : {
      "ObjectId" : "96358871e219f0efedaab3c9d8288e2e873bbd70",
      "LastModified" : "2019-04-12T12:54:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ========\n\n# = Help =\n\n# ========\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# =============\n\n# = Tutorials =\n\n# =============\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ========\n\n# = Misc =\n\n# ========\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ~~~\n\n# Only works with super user privileges, since it writes to `/etc/hosts`:\n\n# add_msr_test (tutorial_mount \"${CMAKE_SOURCE_DIR}/doc/tutorials/mount.md\")\n\n# ~~~\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 264,
    "QMAKE" : 3,
    "MAKEFILE" : 4,
    "MAVEN" : 1
  },
  "ElapsedTime" : 2174
}