{
  "Repository" : "6681796",
  "Revision" : "HEAD",
  "ObjectId" : "08d470cef7052908db3c165354e5567470644a40",
  "CommitTime" : "2019-04-15T07:30:21Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "41003a0c5a22a275466c8114df936326a5b66d34",
      "LastModified" : "2019-02-27T07:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set to minimum version that supports clean build on cygwin\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## required min. libBoost version\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The version number.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Lua 5.2 pkg-config is broken.\n\n# Depending on whether the used distro fixed that to\n\n# provide backward compatibility we need to find the\n\n# include dir and library name ourselves.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FreeBSD has to include libexecinfo\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"-static\")\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Macro for setting up precompiled headers. Usage:\n\n#\n\n#   add_precompiled_header(target header.h [FORCEINCLUDE])\n\n#\n\n# MSVC: A source file with the same name as the header must exist and\n\n# be included in the target (E.g. header.cpp).\n\n#\n\n# MSVC: Add FORCEINCLUDE to automatically include the precompiled\n\n# header file from every source file.\n\n#\n\n# GCC: The precompiled header is always automatically included from\n\n# every header file.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-switch\")\n\n#ADD_DEFINITIONS( -Wall -O0 -ggdb )\n\n#ADD_DEFINITIONS( -Wfatal-errors -Wformat=2 -Werror=format-security )\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Strip out -Wl,â€¦ linker directives as they make GCC fail\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# a custom target that is always built\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# creates appversion.h using cmake script\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Target\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# explicitly say that the executable depends on the revisiontag\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Link libraries\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# Find MD5/RMD160/SHA library\n\n#\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Boost\n\n#\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# compare found vs required libBoost version\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# ZLIB\n\n#\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# MINIZIP\n\n#\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# CURL\n\n#\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# add_definitions(-DWWW_ENABLE_SSL)\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#\n\n# USB\n\n#\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## support lua popen on Linux platforms\n\n#IF(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n\n# SET(OperatingSystem \"Linux\")\n\n# add_definitions(-DLUA_USE_LINUX)\n\n#ENDIF(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# OpenZWave\n\n# try to find open-zwave, if found, include support\n\n#\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# open-zwave needs libudev if statically linked\n",
        "Line" : 694,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#target_link_libraries(domoticz ${ICONV_INCLUDE_DIR})\n",
        "Line" : 705,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# build a CPack driven installer package\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#SET (DOMOTICZ_VERSION_SHORT \"${domoticz_VERSION_MAJOR}.${domoticz_VERSION_MINOR}.${domoticz_VERSION_PATCH}\")\n\n#SET(CPACK_PACKAGE_FILE_NAME \"domoticz-${DOMOTICZ_VERSION_SHORT}-${CMAKE_SYSTEM_NAME}\")\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#set(CPACK_DEB_COMPONENT_INSTALL TRUE)\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "MQTT/CMakeLists.txt" : {
      "ObjectId" : "2be92019cb4d5a6fd38c55d769fe9df94527c81d",
      "LastModified" : "2017-10-22T10:41:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set to minimum version that supports clean build on cygwin\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "getgit.cmake" : {
      "ObjectId" : "51ccd076e71d4b370fc57b1b9bd3394f7d090ede",
      "LastModified" : "2016-03-30T06:24:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this macro gets called as a custom build step by running make\n\n# please take into account, that the variable 'SOURCE_DIR' has been defined by the caller\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the git.cmake module is part of the standard distribution\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# write a file with the APPVERSION define\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if ProjectDate is 0, create appversion.h.txt from a copy of appversion.default\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# copy the file to the final header only if the version changes\n\n# reduces needless rebuilds\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "lua/CMakeLists.txt" : {
      "ObjectId" : "915295490c2150a523fe159177b6ceff489bb046",
      "LastModified" : "2016-05-15T10:18:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# used bypackages that wish to link against lua\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lua/src/CMakeLists.txt" : {
      "ObjectId" : "884b77f248e5d992d67561177791a349d4052617",
      "LastModified" : "2018-06-10T06:07:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_EXECUTABLE(luaexec lua.c)\n\n#TARGET_LINK_LIBRARIES(luaexec lua m) \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_EXECUTABLE(luac luac.c)\n\n#TARGET_LINK_LIBRARIES(luac lua m) \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sqlite/CMakeLists.txt" : {
      "ObjectId" : "0286ad6b5bef1a7de9031b7dc0de8b2522c648f7",
      "LastModified" : "2016-05-15T10:18:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tinyxpath/CMakeLists.txt" : {
      "ObjectId" : "48e90b1c2c811178b0ae80c9d9a85d282d88d789",
      "LastModified" : "2017-10-22T10:41:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set to minimum version that supports clean build on cygwin\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tinyxpath/Makefile.am" : {
      "ObjectId" : "375b3c314200d9fbd56392bd63a936fb257c0557",
      "LastModified" : "2016-05-15T10:18:32Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# set the include path found by configure\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the library search path.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "zip/CMakeLists.txt" : {
      "ObjectId" : "cca0a87797fd1adcdad0c8d5025c37b8a19b2b1b",
      "LastModified" : "2018-05-25T13:08:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# used bypackages that wish to link against minizip\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "zlib/CMakeLists.txt" : {
      "ObjectId" : "b916a3626fa2135ab36c266567e225f55099133b",
      "LastModified" : "2018-05-25T13:08:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear variable\n",
        "Line" : 47,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we're doing an out of source build and the user has a zconf.h\n\n# in their source tree...\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 128,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "zlib/Makefile" : {
      "ObjectId" : "6bba86c73fca2abda416baa1a7cf883b3494fb29",
      "LastModified" : "2018-05-25T13:08:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 10611
}