{
  "Repository" : "36008197",
  "Revision" : "HEAD",
  "ObjectId" : "ffa84f6a5376ba3a5cf70bdacef210aa4fa218a2",
  "CommitTime" : "2019-04-15T03:02:19Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ce7c58448159916bd4c2fadefc5348e2fe3b99ec",
      "LastModified" : "2019-04-15T03:02:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# project_VERSION* variables populated from project(... VERSION x.x.x) string\n",
        "Line" : 5,
        "CharPositionInLine" : 31
      },
      "1" : {
        "Text" : "#option_with_print(ENABLE_GENERIC \"Enable mostly static linking in shared library\" OFF)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MPI option A\n",
        "Line" : 31,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "#include(custom_static_library)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#find_package(psi4 1.1 REQUIRED COMPONENTS ambit chemps2)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    target_link_libraries(forte ${Boost_LIBRARIES})\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Including custom cmake rules\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check if we can compile with SSE4.2\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# -Werror)\n",
        "Line" : 63,
        "CharPositionInLine" : 45
      },
      "9" : {
        "Text" : "# enabling coverage\n",
        "Line" : 66,
        "CharPositionInLine" : 57
      },
      "10" : {
        "Text" : "# List of CC files\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## 64bit implementation\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# MPI option A\n",
        "Line" : 197,
        "CharPositionInLine" : 63
      },
      "13" : {
        "Text" : "#target_link_libraries(forte PRIVATE MPI::MPI_CXX)  # MPI option B\n\n#target_add_definitions(forte PRIVATE HAVE_MPI)  # MPI option B\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#\n\n# Forte tests\n\n#\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/FindGlobalArrays.cmake" : {
      "ObjectId" : "9ff32f777f9893a57f65ef125f24ad4f7ceb4295",
      "LastModified" : "2017-05-26T22:40:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGlobalArrays\n\n# ----------------\n\n#\n\n# Find the native GlobalArrays includes and libraries.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# If GA is found, this module defines the following :prop_tgt:`IMPORTED`\n\n# targets::\n\n#\n\n#  GlobalArrays::ga      - The main GA library.\n\n#  GA::armrrays::ga ci   - The ARMCI support library used by GA.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project::\n\n#\n\n#  GlobalArrays_FOUND          - True if GA found on the local system\n\n#  GlobalArrays_INCLUDE_DIRS   - Location of GA header files.\n\n#  GlobalArrays_LIBRARIES      - The GA libraries.\n\n#\n\n# Hints\n\n# ^^^^^\n\n#\n\n# Set ``GA_ROOT_DIR`` to a directory that contains a GA installation.\n\n#\n\n# This script expects to find libraries at ``$GA_ROOT_DIR/lib`` and the GA\n\n# headers at ``$GA_ROOT_DIR/include/ga/src``.\n\n#\n\n# Cache Variables\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# This module may set the following variables depending on platform and type\n\n# of GA installation discovered.  These variables may optionally be set to\n\n# help this module find the correct files::\n\n#\n\n#  ARMCI_LIBRARY       - Location of the ARMCI library.\n\n#  GA_LIBRARY          - Location of the GA library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# If the user has provided ``GA_ROOT_DIR``, use it!  Choose items found\n\n# at this location over system locations.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Set GA_INCLUDE_DIRS and GA_LIBRARIES. Try\n\n# to find the libraries at $GA_ROOT_DIR (if provided) or in standard system\n\n# locations.  These find_library and find_path calls will prefer custom\n\n# locations over standard locations (HINTS).  If the requested file is not found\n\n# at the HINTS location, standard system locations will be still be searched\n\n# (/usr/lib64 (Redhat), lib/i386-linux-gnu (Debian)).\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# handle the QUIETLY and REQUIRED arguments and set GA_FOUND to TRUE if all\n\n# listed variables are TRUE\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindMPI.cmake" : {
      "ObjectId" : "e4a7ae5ca1d09543641f9ee4c497a4bad7747d56",
      "LastModified" : "2017-05-26T22:40:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from\n\n#   https://raw.githubusercontent.com/Kitware/CMake/master/Modules/FindMPI.cmake\n\n#       on 23 May 2017 for imported target not yet released\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#.rst:\n\n# FindMPI\n\n# -------\n\n#\n\n# Find a Message Passing Interface (MPI) implementation\n\n#\n\n# The Message Passing Interface (MPI) is a library used to write\n\n# high-performance distributed-memory parallel applications, and is\n\n# typically deployed on a cluster.  MPI is a standard interface (defined\n\n# by the MPI forum) for which many implementations are available.\n\n#\n\n# Variables\n\n# ^^^^^^^^^\n\n#\n\n# This module will set the following variables per language in your\n\n# project, where ``<lang>`` is one of C, CXX, or Fortran:\n\n#\n\n# ``MPI_<lang>_FOUND``\n\n#   Variable indicating the MPI settings for ``<lang>`` were found.\n\n# ``MPI_<lang>_COMPILER``\n\n#   MPI Compiler wrapper for ``<lang>``.\n\n# ``MPI_<lang>_COMPILE_FLAGS``\n\n#   Compilation flags for MPI programs, separated by spaces.\n\n#   This is *not* a :ref:`;-list <CMake Language Lists>`.\n\n# ``MPI_<lang>_INCLUDE_PATH``\n\n#   Include path(s) for MPI header.\n\n# ``MPI_<lang>_LINK_FLAGS``\n\n#   Linker flags for MPI programs.\n\n# ``MPI_<lang>_LIBRARIES``\n\n#   All libraries to link MPI programs against.\n\n#\n\n# Additionally, the following :prop_tgt:`IMPORTED` targets are defined:\n\n#\n\n# ``MPI::MPI_<lang>``\n\n#   Target for using MPI from ``<lang>``.\n\n#\n\n# Additionally, FindMPI sets the following variables for running MPI\n\n# programs from the command line:\n\n#\n\n# ``MPIEXEC``\n\n#   Executable for running MPI programs, if provided.\n\n# ``MPIEXEC_NUMPROC_FLAG``\n\n#   Flag to pass to ``MPIEXEC`` before giving it the number of processors to run on.\n\n# ``MPIEXEC_MAX_NUMPROCS``\n\n#   Number of MPI processors to utilize. Defaults to the number\n\n#   of processors detected on the host system.\n\n# ``MPIEXEC_PREFLAGS``\n\n#   Flags to pass to ``MPIEXEC`` directly before the executable to run.\n\n# ``MPIEXEC_POSTFLAGS``\n\n#   Flags to pass to ``MPIEXEC`` after other flags.\n\n#\n\n# Usage\n\n# ^^^^^\n\n#\n\n# To use this module, call ``find_package(MPI)``.  If you are happy with the\n\n# auto-detected configuration for your language, then you're done.  If\n\n# not, you have two options:\n\n#\n\n# 1. Set ``MPI_<lang>_COMPILER`` to the MPI wrapper (e.g. ``mpicc``) of your\n\n#    choice and reconfigure.  FindMPI will attempt to determine all the\n\n#    necessary variables using *that* compiler's compile and link flags.\n\n# 2. If this fails, or if your MPI implementation does not come with\n\n#    a compiler wrapper, then set both ``MPI_<lang>_LIBRARIES`` and\n\n#    ``MPI_<lang>_INCLUDE_PATH``.  You may also set any other variables\n\n#    listed above, but these two are required.  This will circumvent\n\n#    autodetection entirely.\n\n#\n\n# When configuration is successful, ``MPI_<lang>_COMPILER`` will be set to\n\n# the compiler wrapper for ``<lang>``, if it was found. ``MPI_<lang>_FOUND``\n\n# and other variables above will be set if any MPI implementation was\n\n# found for ``<lang>``, regardless of whether a compiler was found.\n\n#\n\n# When using ``MPIEXEC`` to execute MPI applications, you should typically\n\n# use all of the ``MPIEXEC`` flags as follows:\n\n#\n\n# ::\n\n#\n\n#    ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS}\n\n#      ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS\n\n#\n\n# where ``EXECUTABLE`` is the MPI program, and ``ARGS`` are the arguments to\n\n# pass to the MPI program.\n\n#\n\n# Backward Compatibility\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# For backward compatibility with older versions of FindMPI, these\n\n# variables are set, but deprecated:\n\n#\n\n# ::\n\n#\n\n#    MPI_FOUND           MPI_COMPILER        MPI_LIBRARY\n\n#    MPI_COMPILE_FLAGS   MPI_INCLUDE_PATH    MPI_EXTRA_LIBRARY\n\n#    MPI_LINK_FLAGS      MPI_LIBRARIES\n\n#\n\n# In new projects, please use the ``MPI_<lang>_XXX`` equivalents.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# This part detects MPI compilers, attempting to wade through the mess of compiler names in\n\n# a sensible way.\n\n#\n\n# The compilers are detected in this order:\n\n#\n\n# 1. Try to find the most generic available MPI compiler, as this is usually set up by\n\n#    cluster admins, e.g. if plain old mpicc is available, we'll use it and assume it's\n\n#    the right compiler.\n\n#\n\n# 2. If a generic mpicc is NOT found, then we attempt to find one that matches\n\n#    CMAKE_<lang>_COMPILER_ID. e.g. if you are using XL compilers, we'll try to find mpixlc\n\n#    and company, but not mpiicc. This hopefully prevents toolchain mismatches.\n\n#\n\n# If you want to force a particular MPI compiler other than what we autodetect (e.g. if you\n\n# want to compile regular stuff with GNU and parallel stuff with Intel), you can always set\n\n# your favorite MPI_<lang>_COMPILER explicitly and this stuff will be ignored.\n\n#\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Start out with the generic MPI compiler names, as these are most commonly used.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# GNU compiler names\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Intel MPI compiler names\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# PGI compiler names\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# XLC MPI Compiler names\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append vendor-specific compilers to the list if we either don't know the compiler id,\n\n# or if we know it matches the regular compiler.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# clean up the namespace here\n",
        "Line" : 167,
        "CharPositionInLine" : 48
      },
      "11" : {
        "Text" : "# Names to try for MPI exec\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Grab the path to MPI from the registry if we're on windows.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# MSMPI\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# The default path ends with a '\\' and doesn't mix with ';' when appending.\n",
        "Line" : 179,
        "CharPositionInLine" : 55
      },
      "15" : {
        "Text" : "# The SDK is installed separately from the runtime\n",
        "Line" : 183,
        "CharPositionInLine" : 53
      },
      "16" : {
        "Text" : "# MPICH\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Build a list of prefixes to search for MPI.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Intel MPI 5.0.1 will return a zero return code even when the\n\n# argument to the MPI compiler wrapper is unknown.  Attempt to\n\n# catch this case.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\n\n# interrogate_mpi_compiler(lang try_libs)\n\n#\n\n# Attempts to extract compiler and linker args from an MPI compiler. The arguments set\n\n# by this function are:\n\n#\n\n#   MPI_<lang>_INCLUDE_PATH    MPI_<lang>_LINK_FLAGS     MPI_<lang>_FOUND\n\n#   MPI_<lang>_COMPILE_FLAGS   MPI_<lang>_LIBRARIES\n\n#\n\n# MPI_<lang>_COMPILER must be set beforehand to the absolute path to an MPI compiler for\n\n# <lang>.  Additionally, MPI_<lang>_INCLUDE_PATH and MPI_<lang>_LIBRARIES may be set\n\n# to skip autodetection.\n\n#\n\n# If try_libs is TRUE, this will also attempt to find plain MPI libraries in the usual\n\n# way.  In general, this is not as effective as interrogating the compilers, as it\n\n# ignores language-specific flags and libraries.  However, some MPI implementations\n\n# (Windows implementations) do not have compiler wrappers, so this approach must be used.\n\n#\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# MPI_${lang}_NO_INTERROGATE will be set to a compiler name when the *regular* compiler was\n\n# discovered to be the MPI compiler.  This happens on machines like the Cray XE6 that use\n\n# modules to set cc, CC, and ftn to the MPI compilers.  If the user force-sets another MPI\n\n# compiler, MPI_${lang}_COMPILER won't be equal to MPI_${lang}_NO_INTERROGATE, and we'll\n\n# inspect that compiler anew.  This allows users to set new compilers w/o rm'ing cache.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# If MPI is set already in the cache, don't bother with interrogating the compiler.\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Check whether the -showme:compile option works. This indicates that we have either OpenMPI\n\n# or a newer version of LAM-MPI, and implies that -showme:link will also work.\n",
        "Line" : 244,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# If we appear to have -showme:compile, then we should\n\n# also have -showme:link. Try it.\n",
        "Line" : 248,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# We probably have -showme:incdirs and -showme:libdirs as well,\n\n# so grab that while we're at it.\n",
        "Line" : 257,
        "CharPositionInLine" : 10
      },
      "25" : {
        "Text" : "# reset things here if something went wrong.\n",
        "Line" : 270,
        "CharPositionInLine" : 10
      },
      "26" : {
        "Text" : "# Older versions of LAM-MPI have \"-showme\". Try to find that.\n",
        "Line" : 276,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# MVAPICH uses -compile-info and -link-info.  Try them.\n",
        "Line" : 281,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# If we have compile-info, also have link-info.\n",
        "Line" : 285,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# make sure we got compile and link.  Reset vars if something's wrong.\n",
        "Line" : 294,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# MPICH just uses \"-show\". Try it.\n",
        "Line" : 301,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# We have our command lines, but we might need to copy MPI_COMPILE_CMDLINE\n\n# into MPI_LINK_CMDLINE, if we didn't find the link line.\n",
        "Line" : 307,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# Here, we're done with the interrogation part, and we'll try to extract args we care\n\n# about from what we learned from the compiler wrapper scripts.\n",
        "Line" : 318,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# If interrogation came back with something, extract our variable from the MPI command line\n",
        "Line" : 321,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Extract compile flags from the compile command line.\n",
        "Line" : 323,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Extract include paths from compile command line\n",
        "Line" : 336,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# try using showme:incdirs if extracting didn't work.\n",
        "Line" : 348,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# If all else fails, just search for mpi.h in the normal include paths.\n",
        "Line" : 354,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Extract linker paths from the link command line\n",
        "Line" : 363,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# try using showme:libdirs if extracting didn't work.\n",
        "Line" : 372,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# Extract linker flags from the link command line\n",
        "Line" : 378,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Extract the set of libraries to link against from the link command\n\n# line\n",
        "Line" : 390,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# The intel wrappers on windows link against static versions of the MPI libraries.\n\n# The static libraries are simply listed on the command line without -l.\n\n# For instance: \" icl ... impi.lib \"\n",
        "Line" : 394,
        "CharPositionInLine" : 10
      },
      "43" : {
        "Text" : "# add the compiler implicit directories because some compilers\n\n# such as the intel compiler have libraries that show up\n\n# in the showme list that can only be found in the implicit\n\n# link directories of the compiler.\n",
        "Line" : 401,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# Determine full path names for all of the libraries that one needs\n\n# to link against in an MPI program\n",
        "Line" : 410,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# MPI_LIB is cached by find_library, but we don't want that.  Clear it first.\n",
        "Line" : 418,
        "CharPositionInLine" : 10
      },
      "46" : {
        "Text" : "# Sanity check MPI_LIBRARIES to make sure there are enough libraries\n",
        "Line" : 429,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# If we didn't have an MPI compiler script to interrogate, attempt to find everything\n\n# with plain old find functions.  This is nasty because MPI implementations have LOTS of\n\n# different library names, so this section isn't going to be very generic.  We need to\n\n# make sure it works for MS MPI, though, since there are no compiler wrappers for that.\n",
        "Line" : 438,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# Decide between 32-bit and 64-bit libraries for Microsoft's MPI\n",
        "Line" : 447,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Right now, we only know about the extra libs for C++.\n\n# We could add Fortran here (as there is usually libfmpich, etc.), but\n\n# this really only has to work with MS MPI on Windows.\n\n# Assume that other MPI's are covered by the compiler wrappers.\n",
        "Line" : 463,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# If we found MPI, set up all of the appropriate cache entries\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# clear out our temporary lib/header detection variable here.\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# finally set a found variable for each MPI language\n",
        "Line" : 495,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# This function attempts to compile with the regular compiler, to see if MPI programs\n\n# work with it.  This is a last ditch attempt after we've tried interrogating mpicc and\n\n# friends, and after we've tried to find generic libraries.  Works on machines like\n\n# Cray XE6, where the modules environment changes what MPI version cc, CC, and ftn use.\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# End definitions, commence real work here.\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Most mpi distros have some form of mpiexec which gives us something we can reliably look for.\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# call get_filename_component twice to remove mpiexec and the directory it exists in (typically bin).\n\n# This gives us a fairly reliable base directory to search for /bin /lib and /include from.\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# According to the MPI standard, section 8.8 -n is a guaranteed, and the only guaranteed way to\n\n# launch an MPI process using mpiexec if such a program exists.\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Set the number of processes to the processor count and the previous default\n\n# of 2 if that couldn't be determined.\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#=============================================================================\n\n# Backward compatibility input hacks.  Propagate the FindMPI hints to C and\n\n# CXX if the respective new versions are not defined.  Translate the old\n\n# MPI_LIBRARY and MPI_EXTRA_LIBRARY to respective MPI_${lang}_LIBRARIES.\n\n#\n\n# Once we find the new variables, we translate them back into their old\n\n# equivalents below.\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Old input variables.\n",
        "Line" : 586,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Set new vars based on their old equivalents, if the new versions are not already set.\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Special handling for MPI_LIBRARY and MPI_EXTRA_LIBRARY, which we nixed in the\n\n# new FindMPI.  These need to be merged into MPI_<lang>_LIBRARIES\n",
        "Line" : 596,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "#=============================================================================\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# This loop finds the compilers and sends them off for interrogation.\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# If the user supplies a compiler *name* instead of an absolute path, assume that we need to find THAT compiler.\n",
        "Line" : 608,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Get rid of our default list of names and just search for the name the user wants.\n",
        "Line" : 611,
        "CharPositionInLine" : 8
      },
      "67" : {
        "Text" : "# If the user specifies a compiler, we don't want to try to search libraries either.\n",
        "Line" : 615,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# last ditch try -- if nothing works so far, just try running the regular compiler and\n\n# see if we can create an MPI executable.\n",
        "Line" : 629,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "#=============================================================================\n\n# More backward compatibility stuff\n\n#\n\n# Bare MPI sans ${lang} vars are set to CXX then C, depending on what was found.\n\n# This mimics the behavior of the old language-oblivious FindMPI.\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Note that we might still have found Fortran, but you'll need to use MPI_Fortran_FOUND\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Chop MPI_LIBRARIES into the old-style MPI_LIBRARY and MPI_EXTRA_LIBRARY, and set them in cache.\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#=============================================================================\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# unset these vars to cleanup namespace\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 74
    },
    "cmake/FindTargetLAPACK.cmake" : {
      "ObjectId" : "d1f6ddad78755cd437621f4d9e1fed7a2c6499d6",
      "LastModified" : "2017-05-26T22:40:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTargetLAPACK.cmake\n\n# ----------------------\n\n#\n\n# LAPACK cmake module to wrap FindLAPACK.cmake in a target.\n\n#\n\n# This module sets the following variables in your project: ::\n\n#\n\n#   TargetLAPACK_FOUND - true if BLAS/LAPACK found on the system\n\n#   TargetLAPACK_MESSAGE - status message with BLAS/LAPACK library path list\n\n#\n\n# This module *unsets* the following conventional LAPACK variables so as\n\n#   to force using the target: ::\n\n#\n\n#   LAPACK_FOUND\n\n#   LAPACK_LIBRARIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 1st precedence - libraries passed in through -DLAPACK_LIBRARIES\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 2nd precedence - target already prepared and findable in TargetLAPACKConfig.cmake\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# 3rd precedence - usual variables from FindLAPACK.cmake\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/autocmake_mpi.cmake" : {
      "ObjectId" : "349d5272cf6aa593c1e67e4476f78538c6de08d5",
      "LastModified" : "2017-05-26T22:40:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from\n\n#   https://github.com/coderefinery/autocmake/blob/master/modules/mpi.cmake\n\n# * moved option up\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Enables MPI support.\n\n#\n\n# Variables used::\n\n#\n\n#   ENABLE_MPI\n\n#   MPI_FOUND\n\n#\n\n# Variables modified (provided the corresponding language is enabled)::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#   CMAKE_C_FLAGS\n\n#   CMAKE_CXX_FLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--mpi Enable MPI parallelization [default: False].\"\n\n#   define: \"'-DENABLE_MPI={0}'.format(arguments['--mpi'])\"\n\n#\n\n#option(ENABLE_MPI \"Enable MPI parallelization\" OFF)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# on Cray configure with -D MPI_FOUND=1\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/autocmake_omp.cmake" : {
      "ObjectId" : "0ce6db70e0f4c1ff4e9d682ef169f0a2fe222b1e",
      "LastModified" : "2017-05-26T22:40:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from\n\n#   https://github.com/coderefinery/autocmake/blob/master/modules/omp.cmake\n\n# * moved option up\n\n# * toggled option default to ON\n\n# * reorganized logic for Fortran + C/CXX, see https://github.com/coderefinery/autocmake/issues/177\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Enables OpenMP support.\n\n#\n\n# Variables used::\n\n#\n\n#   ENABLE_OPENMP\n\n#   OPENMP_FOUND\n\n#\n\n# Variables modified (provided the corresponding language is enabled)::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#   CMAKE_C_FLAGS\n\n#   CMAKE_CXX_FLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--omp Enable OpenMP parallelization [default: False].\"\n\n#   define: \"'-DENABLE_OPENMP={0}'.format(arguments['--omp'])\"\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we do this in a pedestrian way because the Fortran support is relatively recent\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# do nothing in this case\n",
        "Line" : 68,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "cmake/clang-cxx-dev-tools.cmake" : {
      "ObjectId" : "3c064346791c970dcca0d07239111f5286aafeef",
      "LastModified" : "2017-06-16T04:22:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional targets to perform clang-format/clang-tidy\n\n# Get all project files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adding clang-format target if executable is found\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adding clang-tidy target if executable is found\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/git-version.cmake" : {
      "ObjectId" : "7b7e4b427f8eec9b8e29b22684e970a7a9806df5",
      "LastModified" : "2017-07-04T20:11:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/psi4OptionsTools.cmake" : {
      "ObjectId" : "1657978685a639c9d77630024c849c5f6c6dbb0c",
      "LastModified" : "2017-07-04T20:11:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###This file contains functions used throughout the Psi4 build.  Like source\n\n###code, the build system should be factored and common code extracted out into\n\n###functions/macros.  If you find repetitive code throughout the build scripts\n\n###this is the place to add it (make sure you document it too).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Macro for printing an option in a consistent manner\n\n#\n\n#Syntax: print_option(<option to print> <was specified>)\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Wraps an option with default ON/OFF. Adds nice messaging to option()\n\n#\n\n#Syntax: option_with_print(<option name> <description> <default value>)\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Wraps an option with a default other than ON/OFF and prints it\n\n#NOTE: Can't combine with above b/c CMake handles ON/OFF options specially\n\n#NOTE2: CMAKE_BUILD_TYPE (and other CMake variables) are always defined so need\n\n#       to further check for if they are the NULL string.  This is also why we\n\n#       need the force\n\n#\n\n#Syntax: option_with_default(<option name> <description> <default value>)\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMake >= 3.3, so local copy in cmake/\n",
        "Line" : 45,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "#The guts of the next two functions, use the wrappers please\n\n#\n\n#Syntax: add_C_or_CXX_flags(<True for C, False for CXX>)\n\n#\n\n# Note: resist adding -Werror to the check_X_compiler_flag calls,\n\n#   as (i) the flag for Intel is actually -diag-error warn, (ii)\n\n#   Intel ifort doesn't define -Werror, and (iii) passing it\n\n#   changes REQUIRED_DEFINITIONS.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Checks if C flags are valid, if so adds them to CMAKE_C_FLAGS\n\n#Input should be a list of flags to try.  If two flags are to be tried together\n\n#enclose them in quotes, e.g. \"-L/path/to/dir -lmylib\" is tried as a single\n\n#flag, whereas \"-L/path/to/dir\" \"-lmylib\" is tried as two separate flags.\n\n#The first list item to succeed is added to CMAKE_C_FLAGS, then try loop\n\n#breaks. Warning issued if no flags in list succeed.\n\n#\n\n#\n\n#Syntax: add_C_flags(<flags to add>)\n\n#\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Checks if CXX flags are valid, if so adds them to CMAKE_CXX_FLAGS\n\n#See add_C_flags for more info on syntax\n\n#\n\n#Syntax: add_CXX_flags(<flags to add>)\n\n#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Checks if Fortran flags are valid, if so adds them to CMAKE_Fortran_FLAGS\n\n#See add_C_flags for more info on syntax\n\n#\n\n#Syntax: add_Fortran_flags(<flags to add>)\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Macro for adding flags common to both C and CXX, if the compiler supports them\n\n#\n\n#Syntax: add_flags(<flags to add>)\n\n#\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Defines an option that if enabled turns on some compiler flags\n\n#\n\n#Syntax: option_with_flags(<option> <description> <default value> <flags>)\n\n#\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "docs/sphinx/Makefile" : {
      "ObjectId" : "ecf3d6c07bfe99487205a72b30e74b1b5d27feea",
      "LastModified" : "2017-07-04T20:11:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 5158
}