{
  "Repository" : "13360545",
  "Revision" : "HEAD",
  "ObjectId" : "7d1530130d8585166bb53ebfbd8d5d317ec46013",
  "CommitTime" : "2019-04-16T16:28:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f62299b836642a96bc505f2a78cc6356d2fd73b4",
      "LastModified" : "2018-12-27T15:31:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set Intel OpenMP as default MKL thread layer\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Configure forge submodule\n\n#forge is included in ALL target if AF_BUILD_FORGE is ON\n\n#otherwise, forge is not built at all\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# when crosscompiling use the bin2cpp file from the native bin directory\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# UNSET THE VARIABLES FROM LAPACKE\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# On some distributions the linker will not add a library to the ELF header if\n\n# the symbols are not needed when the library was first parsed by the linker.\n\n# This causes undefined references issues when linking with libraries which have\n\n# circular dependencies.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MACOSX_FRAMEWORK_INFO_PLIST Info.plist\n\n#PUBLIC_HEADER \"${CMAKE_CURRENT_SOURCE_DIR}/include/arrayfire.h;${af_headers}\"\n\n#XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"iPhone Developer\"\n",
        "Line" : 192,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "## The ArrayFire version file is generated and won't be included above, install\n\n## it separately.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#TODO(pradeep) install forge dependency for packaging - not required for builds\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# install the examples irrespective of the AF_BUILD_EXAMPLES value\n\n# only the examples source files are installed, so the installation of these\n\n# source files does not depend on AF_BUILD_EXAMPLES\n\n# when AF_BUILD_EXAMPLES is OFF, the examples source is installed without\n\n# building the example executables\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#NOTE The slash at the end is important\n",
        "Line" : 219,
        "CharPositionInLine" : 28
      },
      "11" : {
        "Text" : "#NOTE The slash at the end is important\n",
        "Line" : 223,
        "CharPositionInLine" : 35
      },
      "12" : {
        "Text" : "# This config file will be installed so we need to set the install_destination\n\n# path relitive to the install path\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This variable is used to add tbb.so.2 library because the main lib\n\n# is a linker script and not a symlink so it cant be resolved using\n\n# get_filename_component\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# This file will be used to create the config file for the build directory.\n\n# These config files will be used by the examples to find the ArrayFire\n\n# libraries\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Registers the current build directory with the user's cmake config. This will\n\n# create a file at $HOME/.cmake/packages/ArrayFire which will point to this source\n\n# build directory.\n\n# TODO(umar): Disable for now. Causing issues with builds on windows.\n\n#export(PACKAGE ArrayFire)\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unset the visibility to avoid setting policy commands for older versions of\n\n# CMake for examples and tests.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Handle depricated BUILD_TEST variable if found.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "CMakeModules/AFInstallDirs.cmake" : {
      "ObjectId" : "2c7b96eaf8cab3e61ef69a7690cbead44fc9b148",
      "LastModified" : "2018-07-11T17:12:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Sets ArrayFire installation paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: These paths are all relative to the project installation prefix.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Executables\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Header files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Documentation\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Man pages\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMake files\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/AFconfigure_forge_submodule.cmake" : {
      "ObjectId" : "748e1ba48d24320167056b4fffb72ec68f5e357f",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2019, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/CPackConfig.cmake" : {
      "ObjectId" : "fa2ea76c733302c585ee172582ee872cc10c7312",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# https://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Long description of the package\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Short description of the package\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Common settings to all packaging tools\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Platform specific settings for CPACK generators\n\n# - OSX specific\n\n#   - DragNDrop (OSX only)\n\n#   - PackageMaker (OSX only)\n\n#   - OSXX11 (OSX only)\n\n#   - Bundle (OSX only)\n\n# - Windows\n\n#   - NSIS64 Generator\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#NSIS SPECIFIC VARIABLES\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the default components installed in the package\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##\n\n# IFW CPACK generator\n\n# Uses Qt installer framework, cross platform installer generator.\n\n# Uniform installer GUI on all major desktop platforms: Windows, OSX & Linux.\n\n##\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##\n\n# Debian package\n\n##\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#set(CMAKE_INSTALL_RPATH /usr/lib;${ArrayFire_BUILD_DIR}/third_party/forge/lib)\n\n#set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##\n\n# RPM package\n\n##\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##\n\n# Source package\n\n##\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Ignore build directories that may be in the source tree\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Configure file with custom definitions for NSIS.\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "CMakeModules/CTestCustom.cmake" : {
      "ObjectId" : "d92a80972187247ecc273cccca36775265349014",
      "LastModified" : "2018-08-09T00:41:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# All external and third_party libraries\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Remove bin2cpp from coverage\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMakeModules/FileToString.cmake" : {
      "ObjectId" : "7004ba360e25c4b9ca279dff18606204adc8539c",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function to turn an OpenCL source file into a C string within a source file.\n\n# xxd uses its input's filename to name the string and its length, so we\n\n# need to move them to a name that depends only on the path output, not its\n\n# input.  Otherwise, builds in different relative locations would put the\n\n# source into different variable names, and everything would fall over.\n\n# The actual name will be filename (.s replaced with underscores), and length\n\n# name_len.\n\n#\n\n# Usage example:\n\n#\n\n# set(KERNELS a.cl b/c.cl)\n\n# resource_to_cxx_source(\n\n#   SOURCES ${KERNELS}\n\n#   VARNAME OUTPUTS\n\n# )\n\n# add_executable(foo ${OUTPUTS})\n\n#\n\n# The namespace they are placed in is taken from filename.namespace.\n\n#\n\n# For example, if the input file is kernel.cl, the two variables will be\n\n#  unsigned char ns::kernel_cl[];\n\n#  unsigned int ns::kernel_cl_len;\n\n#\n\n# where ns is the contents of kernel.cl.namespace.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindCBLAS.cmake" : {
      "ObjectId" : "31b6f72dd53ee108ac69ccfa0ec5f49438e5d919",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Using FindCBLAS.cmake from the following repo\n\n# https://github.com/clementfarabet/THC/blob/master/COPYRIGHT.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find CBLAS library\n\n#\n\n# This module finds an installed fortran library that implements the CBLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/), with CBLAS\n\n# interface.\n\n#\n\n# This module sets the following variables:\n\n#  CBLAS_FOUND - set to true if a library implementing the CBLAS interface is found\n\n#  CBLAS_LIBRARIES - list of libraries (using full path name) to link against to use CBLAS\n\n#  CBLAS_INCLUDE_DIR - path to includes\n\n#  CBLAS_INCLUDE_FILE - the file to be included to use CBLAS\n\n#  MKL_BLAS_FOUND - set if MKL is found\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If a valid PkgConfig configuration for cblas is found, this overrides and cancels\n\n# all further checks.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Windows and Linux\n",
        "Line" : 99,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# Old CBLAS search\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# did we find all the libraries in the _list until now?\n\n# (we stop at the first unfound one)\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Test include\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#CMAKE BUG!!! SHOULD NOT BE THAT\n",
        "Line" : 190,
        "CharPositionInLine" : 46
      },
      "9" : {
        "Text" : "#CMAKE BUG!!! SHOULD NOT BE THAT\n",
        "Line" : 191,
        "CharPositionInLine" : 58
      },
      "10" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Fin\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Apple CBLAS library?\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# CBLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# OpenBLAS library\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generic CBLAS library\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Generic BLAS+CBLAS library\n\n# Debian based systems have them as single library\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "CMakeModules/FindFFTW.cmake" : {
      "ObjectId" : "15bc7843d4c6776b16a7ce76870af14e8f58684d",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the FFTW library\n\n#\n\n# Usage:\n\n#   FIND_PACKAGE(FFTW [REQUIRED] [QUIET] )\n\n#\n\n# It sets the following variables:\n\n#   FFTW_FOUND               ... true if fftw is found on the system\n\n#   FFTW_LIBRARIES           ... full path to fftw library\n\n#   FFTW_INCLUDES            ... fftw include directory\n\n#\n\n# The following variables will be checked by the function\n\n#   FFTW_USE_STATIC_LIBS    ... if true, only static libraries are found\n\n#   FFTW_ROOT               ... if set, the libraries are exclusively searched\n\n#                               under this path\n\n#   FFTW_LIBRARY            ... fftw library to use\n\n#   FFTW_INCLUDE_DIR        ... fftw include directory\n\n#\n\n#If environment variable FFTWDIR is specified, it has same effect as FFTW_ROOT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######## This FindFFTW.cmake file is a copy of the file from the eigen library\n\n######## http://code.metager.de/source/xref/lib/eigen/cmake/FindFFTW.cmake\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindFreeImage.cmake" : {
      "ObjectId" : "b049ec06a3b3ba1c779627788e3aaa537f9468e3",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n\n#\n\n# Targets defined by this script\n\n#   FreeImage::FreeImage\n\n#   FreeImage::FreeImage_STATIC\n\n#\n\n# Note:\n\n# 1. The static version target is only defined if the static lib is found\n\n# 2. Environment variable FreeImage_ROOT can be defined on Windows where\n\n#    FreeImage is just a zip file of header and library files.\n\n#\n\n# Sets the following variables:\n\n#          FreeImage_FOUND\n\n#          FreeImage_INCLUDE_DIR\n\n#          FreeImage_LINK_LIBRARY\n\n#          FreeImage_STATIC_LIBRARY\n\n#          FreeImage_DLL_LIBRARY - Windows only\n\n#\n\n# Usage:\n\n# find_package(FreeImage)\n\n# if (FreeImage_FOUND)\n\n#    target_link_libraries(mylib PRIVATE FreeImage::FreeImage)\n\n# endif (FreeImage_FOUND)\n\n#\n\n# OR if you want to link against the static library:\n\n#\n\n# find_package(FreeImage)\n\n# if (FreeImage_FOUND)\n\n#    target_link_libraries(mylib PRIVATE FreeImage::FreeImage_STATIC)\n\n# endif (FreeImage_FOUND)\n\n#\n\n# NOTE: You do not need to include the FreeImage include directories since they\n\n# will be included as part of the target_link_libraries command\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindLAPACKE.cmake" : {
      "ObjectId" : "84e20fe7e93674e2f4696bde48c436484de9d246",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the LAPACKE library\n\n#\n\n# Usage:\n\n#   FIND_PACKAGE(LAPACKE [REQUIRED] [QUIET] )\n\n#\n\n# It sets the following variables:\n\n#   LAPACK_FOUND               ... true if LAPACKE is found on the system\n\n#   LAPACK_LIBRARIES           ... full path to LAPACKE library\n\n#   LAPACK_INCLUDES            ... LAPACKE include directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if we can use PkgConfig\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Determine from PKG\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#find libs\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "CMakeModules/FindMKL.cmake" : {
      "ObjectId" : "1a1e5b8204734bd05c65045441677d885547a0fb",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license. The complete license\n\n# agreement can be obtained at: http://arrayfire.com/licenses/BSD-3-Clause\n\n#\n\n# A FindMKL script based on the recommendations by the Intel's Link Line\n\n# Advisor. It currently only tested on the 2018 version of MKL on Windows,\n\n# Linux, and OSX but it should work on older versions.\n\n#\n\n# To use this module call the mklvars.(sh,bat) script before you call cmake. This\n\n# script is located in the bin folder of your mkl installation. This will set the\n\n# MKLROOT environment variable which will be used to find the libraries on your system.\n\n#\n\n# Example:\n\n# set(MKL_THREAD_LAYER \"TBB\")\n\n# find_package(MKL)\n\n#\n\n# add_executable(myapp main.cpp)\n\n# target_link_libraries(myapp PRIVATE MKL::MKL)\n\n#\n\n# This module bases its behavior based on the following variables:\n\n#\n\n# ``MKL_THREAD_LAYER``\n\n#   The threading layer that needs to be used by the MKL library. This\n\n#   Defines which library will be used to parallelize the MKL kernels. Possible\n\n#   options are TBB(Default), GNU OpenMP, Intel OpenMP, Sequential\n\n#\n\n# This module provides the following :prop_tgt:'IMPORTED' targets:\n\n#\n\n# ``MKL::MKL``\n\n#   Target used to define and link all MKL libraries required by Intel's Link\n\n#   Line Advisor. This usually the only thing you need to link against unless\n\n#   you want to link against the single dynamic library version of MKL\n\n#   (libmkl_rt.so)\n\n#\n\n#  Optional:\n\n#\n\n# ``MKL::ThreadLayer{_STATIC}``\n\n#   Target used to define the threading layer(TBB, OpenMP, etc.) based on\n\n#   MKL_THREAD_LAYER variable.\n\n#\n\n# ``MKL::ThreadingLibrary``\n\n#   Target used to define the threading library(libtbb, libomp, etc) that the\n\n#   application will need to link against.\n\n#\n\n# ``MKL::Interface``\n\n#   Target used to determine which interface library to use(32bit int or 64bit\n\n#   int).\n\n#\n\n# ``MKL::Core``\n\n#   Target for the dynamic library dispatcher\n\n#\n\n# ``MKL::RT``\n\n#   Target for the single dynamic library\n\n#\n\n# ``MKL::{mkl_def;mkl_mc;mkl_mc3;mkl_avx;mkl_avx2;mkl_avx512}{_STATIC}``\n\n#   Targets for MKL kernel libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Finds and creates libraries for MKL with the MKL:: prefix\n\n#\n\n# Parameters:\n\n#    NAME:         A variable name describing the library\n\n#    LIBRARY_NAME: The library that needs to be searched\n\n#\n\n# Output Libraries:\n\n#    MKL::${NAME}\n\n#    MKL::${NAME}_STATIC\n\n#\n\n# Output Variables\n\n#    MKL_INCLUDE_DIR:                Include directory for MKL\n\n#    MKL_FFTW_INCLUDE_DIR:           Include directory for the MKL FFTW interface\n\n#    MKL_${NAME}_LINK_LIBRARY:        on Unix: *.so on Windows *.lib\n\n#    MKL_${NAME}_STATIC_LINK_LIBRARY: on Unix: *.a  on Windows *.lib\n\n#    MKL_${NAME}_DLL_LIBRARY:         on Unix: \"\"   on Windows *.dll\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(STATUS \"NAME: ${mkl_args_NAME} LIBNAME: ${mkl_args_LIBRARY_NAME} MKL_${mkl_args_NAME}_LINK_LIBRARY  ${MKL_${mkl_args_NAME}_LINK_LIBRARY}\")\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The rt library does not have a static library\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# MKL can link against Intel OpenMP, GNU OpenMP, TBB, and Sequential\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindOpenCL.cmake" : {
      "ObjectId" : "54c26e5c840654c1110a97c4ed1ac8bfa6cf1544",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindOpenCL\n\n# ----------\n\n#\n\n# Try to find OpenCL\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``OpenCL::OpenCL``, if\n\n# OpenCL has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables::\n\n#\n\n#   OpenCL_FOUND          - True if OpenCL was found\n\n#   OpenCL_INCLUDE_DIRS   - include directories for OpenCL\n\n#   OpenCL_LIBRARIES      - link against this library to use OpenCL\n\n#   OpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)\n\n#   OpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation\n\n#   OpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation\n\n#\n\n# The module will also define two cache variables::\n\n#\n\n#   OpenCL_INCLUDE_DIR    - the OpenCL include directory\n\n#   OpenCL_LIBRARY        - the path to the OpenCL library\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindOpenGL.cmake" : {
      "ObjectId" : "4ab5d4bfd51a13212c962d70818326252958230b",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindOpenGL\n\n# ----------\n\n#\n\n# FindModule for OpenGL and GLU.\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``OpenGL::GL``\n\n#  Defined if the system has OpenGL.\n\n# ``OpenGL::GLU``\n\n#  Defined if the system has GLU.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module sets the following variables:\n\n#\n\n# ``OPENGL_FOUND``\n\n#  True, if the system has OpenGL.\n\n# ``OPENGL_XMESA_FOUND``\n\n#  True, if the system has XMESA.\n\n# ``OPENGL_GLU_FOUND``\n\n#  True, if the system has GLU.\n\n# ``OPENGL_INCLUDE_DIR``\n\n#  Path to the OpenGL include directory.\n\n# ``OPENGL_LIBRARIES``\n\n#  Paths to the OpenGL and GLU libraries.\n\n#\n\n# If you want to use just GL you can use these values:\n\n#\n\n# ``OPENGL_gl_LIBRARY``\n\n#  Path to the OpenGL library.\n\n# ``OPENGL_glu_LIBRARY``\n\n#  Path to the GLU library.\n\n#\n\n# OSX Specific\n\n# ^^^^^^^^^^^^\n\n#\n\n# On OSX default to using the framework version of OpenGL. People will\n\n# have to change the cache values of OPENGL_glu_LIBRARY and\n\n# OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The OpenGL.framework provides both gl and glu\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Handle HP-UX cases where we only want to find OpenGL in either hpux64\n\n# or hpux32 depending on if we're doing a 64 bit build.\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# The first line below is to make sure that the proper headers\n\n# are used on a Linux machine with the NVidia drivers installed.\n\n# They replace Mesa with NVidia's own library but normally do not\n\n# install headers and that causes the linking to\n\n# fail since the compiler finds the Mesa headers but NVidia's library.\n\n# Make sure the NVIDIA directory comes BEFORE the others.\n\n#  - Atanas Georgiev <atanas@cs.columbia.edu>\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This deprecated setting is for backward compatibility with CMake1.4\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This deprecated setting is for backward compatibility with CMake1.4\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# OpenGL:: targets\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/FindOpenMP.cmake" : {
      "ObjectId" : "be7f85661d258e13f4745234cd3998e3d947208d",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindOpenMP\n\n# ----------\n\n#\n\n# Finds OpenMP support\n\n#\n\n# This module can be used to detect OpenMP support in a compiler.  If\n\n# the compiler supports OpenMP, the flags required to compile with\n\n# OpenMP support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support OpenMP.\n\n#\n\n# Variables\n\n# ^^^^^^^^^\n\n#\n\n# This module will set the following variables per language in your\n\n# project, where ``<lang>`` is one of C, CXX, or Fortran:\n\n#\n\n# ``OpenMP_<lang>_FOUND``\n\n#   Variable indicating if OpenMP support for ``<lang>`` was detected.\n\n# ``OpenMP_<lang>_FLAGS``\n\n#   OpenMP compiler flags for ``<lang>``, separated by spaces.\n\n#\n\n# For linking with OpenMP code written in ``<lang>``, the following\n\n# variables are provided:\n\n#\n\n# ``OpenMP_<lang>_LIB_NAMES``\n\n#   :ref:`;-list <CMake Language Lists>` of libraries for OpenMP programs for ``<lang>``.\n\n# ``OpenMP_<libname>_LIBRARY``\n\n#   Location of the individual libraries needed for OpenMP support in ``<lang>``.\n\n# ``OpenMP_<lang>_LIBRARIES``\n\n#   A list of libraries needed to link with OpenMP code written in ``<lang>``.\n\n#\n\n# Additionally, the module provides :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``OpenMP::OpenMP_<lang>``\n\n#   Target for using OpenMP from ``<lang>``.\n\n#\n\n# Specifically for Fortran, the module sets the following variables:\n\n#\n\n# ``OpenMP_Fortran_HAVE_OMPLIB_HEADER``\n\n#   Boolean indicating if OpenMP is accessible through ``omp_lib.h``.\n\n# ``OpenMP_Fortran_HAVE_OMPLIB_MODULE``\n\n#   Boolean indicating if OpenMP is accessible through the ``omp_lib`` Fortran module.\n\n#\n\n# The module will also try to provide the OpenMP version variables:\n\n#\n\n# ``OpenMP_<lang>_SPEC_DATE``\n\n#   Date of the OpenMP specification implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION_MAJOR``\n\n#   Major version of OpenMP implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION_MINOR``\n\n#   Minor version of OpenMP implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION``\n\n#   OpenMP version implemented by the ``<lang>`` compiler.\n\n#\n\n# The specification date is formatted as given in the OpenMP standard:\n\n# ``yyyymm`` where ``yyyy`` and ``mm`` represents the year and month of\n\n# the OpenMP specification implemented by the ``<lang>`` compiler.\n\n#\n\n# Backward Compatibility\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# For backward compatibility with older versions of FindOpenMP, these\n\n# variables are set, but deprecated::\n\n#\n\n#   OpenMP_FOUND\n\n#\n\n# In new projects, please use the ``OpenMP_<lang>_XXX`` equivalents.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if IN_LIST\n",
        "Line" : 75,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# Cray compiles with OpenMP automatically\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If we know the correct flags, use those\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Fall back to reasonable default tries otherwise\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# sample openmp source code to test\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# in Fortran, an implementation may provide an omp_lib.h header\n\n# or omp_lib module, or both (OpenMP standard, section 3.1)\n\n# Furthmore !$ is the Fortran equivalent of #ifdef _OPENMP (OpenMP standard, 2.2.2)\n\n# Without the conditional compilation, some compilers (e.g. PGI) might compile OpenMP code\n\n# while not actually enabling OpenMP, building code sequentially\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The Intel compiler on windows has no verbose mode, so we need to treat it explicitly\n",
        "Line" : 211,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Combined versions, 2.5 onwards\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# C/C++ version 2.0\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Fortran version 2.0\n",
        "Line" : 296,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Fortran version 1.1\n",
        "Line" : 298,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# C/C++ version 1.0 (there's no 1.1 for C/C++)\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Fortran version 1.0\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "CMakeModules/InternalUtils.cmake" : {
      "ObjectId" : "fc4a1beb6e7fb2260a52ae8d0e7b07c54e5d1e75",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Includes the directory if the variable is set\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenCL targets need this flag to avoid ignored attribute warnings in the\n\n# OpenCL headers\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Store all binaries in the bin/<Config> directory\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "CMakeModules/MinBuildTime.cmake" : {
      "ObjectId" : "e48ab0263bb1de5cf7cc0ac8e2a2fa107ea1a4e0",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# BUILD_TYPE is Release - Set the flags\n\n# The flags should be set only when going from OFF -> ON. This is\n\n# determined by MINBUILDTIME_FLAG\n\n# IF FLAG is ON, then the flags were already set, no need to set them again\n\n# IF FLAG is OFF, then the flags are not set, so set them now, and back up\n\n# release flags\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Backup Default Release Flags\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# MIN_BUILD_TIME is OFF. Change the flags back only if the flag was set before\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "CMakeModules/TegraCrossToolchain.cmake" : {
      "ObjectId" : "e8b1e10f5ab4b164d5619ca8f9fad34eb21b63a5",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/UploadCoveralls.cmake" : {
      "ObjectId" : "0fe0663eb2dd32edcc4d44ee8ba6e42c6017da54",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FIXME: Remove after eddyxu/cpp-coveralls #75 accepted\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "CMakeModules/Version.cmake" : {
      "ObjectId" : "54c0ac81749a8395a221001fbdb275dba4bfa7cf",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n\n#\n\n# Make a version file that includes the ArrayFire version and git revision\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# From CMake 3.0.0 CMAKE_<LANG>_COMPILER_ID is AppleClang for OSX machines\n\n# that use clang for compilations\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/boost_package.cmake" : {
      "ObjectId" : "1756f0d15d07dddfabeb21931df1ec5fdc7a14cb",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: BOOST_CHRONO_HEADER_ONLY is required for Windows because otherwise it\n\n# will try to link with libboost-chrono.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/build_CLBlast.cmake" : {
      "ObjectId" : "4fa20ddd859e90a5900780bd481c376da7c1ab0c",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# v1.4.0 plus CLBlast #295\n",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 2
    },
    "CMakeModules/build_cl2hpp.cmake" : {
      "ObjectId" : "70a94c56b3214bf77375df8e01dd4bf3abf14e5a",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if cl2.hpp exsists and if not download it from khronos GitHub repo\n\n#\n\n# NOTE: This file does not use ExternalProject_Add because that command was\n\n#       was not able to download files that are not archives before CMake\n\n#       version 3.6\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/build_clBLAS.cmake" : {
      "ObjectId" : "8de529e8409b0ccb24b21bd0996faea1e8d30aa6",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clBLAS uses a custom FindOpenCL that doesn't work well on Ubuntu\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "CMakeModules/build_clFFT.cmake" : {
      "ObjectId" : "28be38a3cb692e5bcbc1a672a282d17aa91c6924",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/platform.cmake" : {
      "ObjectId" : "68c66d9b2d4890953cc49e7e554d38bb3b69bf52",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Platform specific settings\n\n#\n\n# Add paths and flags specific platforms. This can inc\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default path for Intel MKL libraries\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Default path for Intel MKL libraries\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# C4068: Warnings about unknown pragmas\n\n# C4275: Warnings about using non-exported classes as base class of an\n\n#        exported class\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "CMakeModules/select_compute_arch.cmake" : {
      "ObjectId" : "d0ace2aab676fbe11a235da75712129ecdfbd200",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 192,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "ae3a6b355c17eae1c470d2e884bfce5a7498b9ce",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "f6951ae3e739f462b1a12a3271f1d06de3a14dfc",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n## This generates a list of the examples cpp files and\n\n## creates a dox file under docs/details/examples.dox\n\n## This is used to generate documentation for examples\n\n###########################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sort alphabetically\n\n# Note: example directories will be major sort order\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get filenames and write to a string\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Write string containing file names to examples.dox\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install Doxygen documentation\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install man pages\n\n#install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/man DESTINATION ${AF_INSTALL_MAN_DIR}\n\n#    COMPONENT documentation\n\n#)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "94b5b19c43229848135e16e76b4419216d3c93ee",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - WIN32_LEAN_AND_MEAN & VC_EXTRALEAN reduces the number of\n\n#   windows headers being included.\n\n# - NOMINMAX is required for ArrayFire code that uses\n\n#   functions af::min & af::max. Having a namespace doesn't help also.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "examples/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "c5b717f41a24caeb00faf96f8e4fe5b03f46bf90",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/computer_vision/CMakeLists.txt" : {
      "ObjectId" : "521f7dc0a3220dcb23880000748fd1ca4eeb4e20",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FAST examples\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Harris corner detector examples\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Template Matching examples\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Template Matching examples\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "examples/financial/CMakeLists.txt" : {
      "ObjectId" : "7c65c63595cafebf5f834ceb2bec899cc5ed05cb",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Black-Scholes Options\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Heston Model\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Monte Carlo Options\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "examples/getting_started/CMakeLists.txt" : {
      "ObjectId" : "63bd043cd0e62b404ff5113490f153f9c081262e",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convolve examples\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Integer examples\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Rainfall examples\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Vectorization examples\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "examples/graphics/CMakeLists.txt" : {
      "ObjectId" : "e7186cd1a7a018f3df46e466dc80ff84e0b14707",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Conway Game of Life\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Conway Game of Life with Color\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Vector fields example\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Fractal example\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Gravity Simulation example\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Histogram example\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Plot 2D example\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Plot 3 example\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Surface example\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "examples/helloworld/CMakeLists.txt" : {
      "ObjectId" : "64e9a6aa6a420a53ab8810f7698e85eaac9e7fed",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hello World example\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "examples/image_processing/CMakeLists.txt" : {
      "ObjectId" : "3e450911ddb74d7564b69f8e1a0bfd3694218d84",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adaptive Thresholding example\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Binary Thresholding example\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Brain Segmentation example\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Edge detection example\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Filters example\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Image example\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Image Editing example\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Morph example\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Optical Flow example\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Pyramids example\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Gradient anisotropic diffusion example\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#Image Deconvolution Example\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Gradient anisotropic diffusion example\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#Image Deconvolution Example\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Gradient anisotropic diffusion example\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#Image Deconvolution Example\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "examples/lin_algebra/CMakeLists.txt" : {
      "ObjectId" : "59aa2cbcd9648dc541ec6748fd58d8502bc04c03",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cholesky example\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# LU example\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# QR example\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# SVD example\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "examples/machine_learning/CMakeLists.txt" : {
      "ObjectId" : "136e9338a0b989dbc8a6a7930812a668cb6316e7",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bagging example\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Deep Belief Network example\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Genetic Algorithm example\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# k Means example\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Logistic Regression example\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Naive Bayes example\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Neural Network example\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Preceptron example\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Restricted Boltsmann Machine example\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Softmax Regression example\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "examples/pde/CMakeLists.txt" : {
      "ObjectId" : "345afeabfba3c1802047cdb02be778bec1ea25d6",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Shallow Water simulation example\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "examples/unified/CMakeLists.txt" : {
      "ObjectId" : "330a9c4af790c894e957e9213b2a463d3280624f",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Simple unified backend example\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "src/api/c/CMakeLists.txt" : {
      "ObjectId" : "6f7bbd4c0f83de7d175a259cf7454be0ccf4290a",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/api/cpp/CMakeLists.txt" : {
      "ObjectId" : "53d3aa97c602dbaec96bb18d81bf509741d9b8a2",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/api/unified/CMakeLists.txt" : {
      "ObjectId" : "f6fb2404de0358211964f678bdd30c9ab8c7caad",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: When loading libraries we only use the RTLD_LAZY flag for the unified\n\n# backend. This will only load the symbols but will not make those symbols\n\n# available to libraries loaded in the future. Because we link against MKL\n\n# and since MKL also dynamically loads libraries at runtime, the linker\n\n# is not able to load those symbols that are needed by those files. You could\n\n# pass the RTLD_GLOBAL flag to dlload, but that causes issues with the ArrayFire\n\n# libraries. To get around this we are also linking the unified backend with\n\n# the MKL library\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install(TARGETS af EXPORT AF DESTINATION \"${AF_INSTALL_LIB_DIR}\"\n\n#   COMPONENT libraries)\n\n#\n\n# if(APPLE)\n\n#   INSTALL(SCRIPT \"${PROJECT_SOURCE_DIR}/CMakeModules/osx_install/InstallTool.cmake\")\n\n# endif(APPLE)\n\n#\n\n# export(TARGETS af FILE ArrayFireUnified.cmake)\n\n# install(EXPORT AF DESTINATION \"${AF_INSTALL_CMAKE_DIR}\"\n\n#   COMPONENT cmake\n\n#   FILE ArrayFireUnified.cmake)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/backend/common/CMakeLists.txt" : {
      "ObjectId" : "905892271cff99e1f6b7053362e9c0817c7a1589",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/backend/cpu/CMakeLists.txt" : {
      "ObjectId" : "abbfe47b778ff387d985f3b03d40309a177b3fc3",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU backend source files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CPU backend kernel files\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO(umar) Find a better way to determine BLAS selection\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MKL requires multiple passes when linking with the static libs. This can be\n\n# done in CMake using LINK_INTERFACE_MULTIPLICITY but that will require\n\n# changine the way FindCBLAS works. This can also be done using the\n\n# --start-group and --end-group linker around the libraries in the linking\n\n# step.\n\n#\n\n# TODO(umar): Change the way CBLAS libraries are found and linked\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/backend/cpu/kernel/sort_by_key/CMakeLists.txt" : {
      "ObjectId" : "fd71ce54b7b3adff88a8963ea38d05a2fc4342e4",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO(umar): This should just use the include directories from the\n\n# afcpu_static target\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "src/backend/cuda/CMakeLists.txt" : {
      "ObjectId" : "8550860523dedd74e95a975340f326263c72068c",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Space after comma is necessary\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "## Copied from FindCUDA.cmake\n\n## The target_link_library needs to link with the cuda libraries using\n\n## PRIVATE\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add the library.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# This definition is required in addition to the definition below because in\n\n# an older verion of cmake definitions added using target_compile_definitions\n\n# were not added to the nvcc flags. This manually adds these definitions and\n\n# pass them to the options parameter in cuda_add_library\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# If the driver is not found the cuda driver api need to be linked against the\n\n# libcuda.so stub located in the lib[64]/stubs directory\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#NOTE: Only link against the stub library when building\n",
        "Line" : 512,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# TODO(umar): This is required for NVRTC to work correctly on OSX. It may not\n\n#             be necessary on other platforms.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#UNIX\n",
        "Line" : 554,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 14
    },
    "src/backend/cuda/kernel/scan_by_key/CMakeLists.txt" : {
      "ObjectId" : "78dd2b6341fcf8cf4a451b1abcec7ce36f36a322",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When using cuda_compile with older versions of FindCUDA. The generated targets\n\n# have the same names as the source file. Since we are using the same file for\n\n# the compilation of these targets we need to rename them before sending them\n\n# to the cuda_compile command so that it doesn't generate multiple targets with\n\n# the same name\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/backend/cuda/kernel/thrust_sort_by_key/CMakeLists.txt" : {
      "ObjectId" : "e8726a3d73a35089cda2f126574f6ef3d7eb77b8",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When using cuda_compile with older versions of FindCUDA. The generated targets\n\n# have the same names as the source file. Since we are using the same file for\n\n# the compilation of these targets we need to rename them before sending them\n\n# to the cuda_compile command so that it doesn't generate multiple targets with\n\n# the same name\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "src/backend/opencl/CMakeLists.txt" : {
      "ObjectId" : "f3a67c09dbb435e097414ee5024ef371b780db2b",
      "LastModified" : "2019-04-16T16:28:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#kernel/laset_band.hpp\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#magma/laset_band.cpp\n",
        "Line" : 455,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#magma/unmqr2.cpp\n",
        "Line" : 475,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "src/backend/opencl/kernel/scan_by_key/CMakeLists.txt" : {
      "ObjectId" : "f717a31ec5f66ca353df1971aa0360832dcf456a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/backend/opencl/kernel/sort_by_key/CMakeLists.txt" : {
      "ObjectId" : "41f821f1818058c975238d262f58301f7bec67c8",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "92e88cde8dcf0be85c27d8e4d6d0dbf1e365b7aa",
      "LastModified" : "2019-04-08T16:36:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gtest targets cmake version 2.6 which throws warnings for policy CMP0042 on\n\n# newer cmakes. This sets the default global setting for that policy.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Hide gtest project variables\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Reset the CXX flags for tests\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# RELATIVE_TEST_DATA_DIR is a User-visible option with default value of test/data directory\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Not using relative test data directory\n",
        "Line" : 53,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : "# Creates tests for all backends\n\n#\n\n# Creates a standard test for all backends. Most of the time you only need to\n\n# specify the name of the source file to create a test.\n\n#\n\n# Parameters\n\n# ----------\n\n# 'CXX11'       If set the tests will be compiled using c++11. Tests should strive\n\n#               to be C++98 compilient\n\n# 'SRC'         The source files for the test\n\n# 'LIBRARIES'   Libraries other than ArrayFire that need to be linked\n\n# 'DEFINITIONS' Definitions that need to be defined\n\n# 'BACKENDS'    Backends to target for this test. If not set then the test will\n\n#               compiled againat all backends\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO(umar): Create this executable separately\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#make_test(manual_memory_test.cpp)\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "test/CMakeModules/FindOpenCL.cmake" : {
      "ObjectId" : "4d4ef57bc3436f491a03298cc3e9f2cb01f8e028",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenCL\n\n# ----------\n\n#\n\n# Try to find OpenCL\n\n#\n\n# Once done this will define::\n\n#\n\n#   OpenCL_FOUND          - True if OpenCL was found\n\n#   OpenCL_INCLUDE_DIRS   - include directories for OpenCL\n\n#   OpenCL_LIBRARIES      - link against this library to use OpenCL\n\n#   OpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)\n\n#   OpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation\n\n#   OpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation\n\n#\n\n# The module will also define two cache variables::\n\n#\n\n#   OpenCL_INCLUDE_DIR    - the OpenCL include directory\n\n#   OpenCL_LIBRARY        - the path to the OpenCL library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# From CMake 3.2\n\n# Copyright 2014 Matthaeus G. Chajdas\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2014 Kitware, Inc.\n\n# Copyright 2000-2011 Insight Software Consortium\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/CMakeModules/download_sparse_datasets.cmake" : {
      "ObjectId" : "2c58a7b1c707e400eddcdc0cc5cf011a0b396117",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CLOUDFLARE error code\n",
        "Line" : 38,
        "CharPositionInLine" : 10
      },
      "2" : {
        "Text" : "# CLOUDFLARE error code\n",
        "Line" : 41,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# Following files are used for testing mtx read fn\n\n# integer data\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# real data\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# complex data\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Following files are used for sparse-sparse arith\n\n# real data\n\n#linear programming problem\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Subsequent Circuit Simulation problem\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# complex data\n\n#Quantum Chemistry problem\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "test/mmio/CMakeLists.txt" : {
      "ObjectId" : "5ef52292ad631424d7573f2c4804fad941bf8a73",
      "LastModified" : "2019-04-01T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018, ArrayFire\n\n# All rights reserved.\n\n#\n\n# This file is distributed under 3-clause BSD license.\n\n# The complete license agreement can be obtained at:\n\n# http://arrayfire.com/licenses/BSD-3-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 56
  },
  "ElapsedTime" : 2877
}