{
  "Repository" : "21133220",
  "Revision" : "HEAD",
  "ObjectId" : "3cacb363a646e0c46428f0525bca729c610f7198",
  "CommitTime" : "2019-04-16T15:51:30Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "374f9debeaff64738f8c109222e93cc4b2fc25f6",
      "LastModified" : "2019-04-16T13:07:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# link to full path of libs\n\n# escapes in add_definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : "# use vars for options\n",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : "# for wxWidgets, use generator expressions\n",
        "Line" : 10,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# get win32 deps before project declaration, because toolchain is set for vcpkg\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Output all binaries at top level\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# on visual studio use all bundled stuff\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# XXX: do some stuff with this\n\n#option(ENABLE_BUNDLED_LIBS \"Use bundled libraries instead of system libraries\" ${ENABLE_BUNDLED_LIBS_DEFAULT})\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# use ccache if available, and not already enabled on the command line\n\n# but not with ninja and msys ccache on msys2\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The ARM ASM core seems to be very buggy, see #98 and #54. Default to it being\n\n# OFF for the time being, until it is either fixed or replaced.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# currently completely broken\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# lto produces buggy binaries for 64 bit win32\n\n# and we generally don't want it when debugging because it makes linking slow\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The SDL port can't be built without debugging support\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# this has to run after the toolchain is initialized so it can't be in\n\n# Win32deps.cmake\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# only use the plugin to tie the configure state to the sha to force rebuilds\n\n# of files that depend on version.h\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# no git or no tags, use ChangeLog\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# generate version.h\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# hack for ninja in msys2\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add support for Homebrew, MacPorts and Fink on OS X\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# We do not support amd64 asm yet\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Look for some dependencies using CMake scripts\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# try not to link SDL2main\n",
        "Line" : 216,
        "CharPositionInLine" : 36
      },
      "21" : {
        "Text" : "# msys2 does not have static sfml libs atm\n\n# while on mxe we use static libs\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# set the standard libraries all ports use\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# C defines\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# IPC linking code needs sem_timedwait which can be either in librt or pthreads\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# The debugger is enabled by default\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# The ASM core is disabled by default because we don't know on which platform we are\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Enable internationalization\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# for now, only GBALink.cpp uses gettext() directly\n",
        "Line" : 340,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# use Homebrew gettext if available\n",
        "Line" : 342,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Compiler stuff\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# check that LTO is not broken before enabling it\n",
        "Line" : 392,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# common optimization flags\n",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# LTO and -fomit-frame-pointer generate broken binaries on Lion with XCode 4.2 tools\n",
        "Line" : 418,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# only use -mtune=generic on PC architectures\n",
        "Line" : 422,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# common debug flags\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# common flags\n",
        "Line" : 447,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# inline asm is not allowed with -fPIC\n",
        "Line" : 450,
        "CharPositionInLine" : 30
      },
      "38" : {
        "Text" : "# check if ssp flags are supported for this version of gcc\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# we do not add it to MY_C_FLAGS because this breaks things like CMAKE_REQUIRED_LIBRARIES\n\n# which misinterpret compiler flags without leading dashes\n",
        "Line" : 467,
        "CharPositionInLine" : 20
      },
      "40" : {
        "Text" : "# These must be set for C++ only, and we can't use generator expressions in\n\n# ADD_COMPILE_OPTIONS because that's a cmake 3.3 feature and we need 2.8.12\n\n# compat for Ubuntu 14.\n",
        "Line" : 517,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# need all flags for linking, because of -flto etc.\n",
        "Line" : 526,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# for the gcc -fstack-protector* flags we need libssp\n\n# we also have to use the gcc- binutils for LTO to work\n",
        "Line" : 530,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# set linker flags\n",
        "Line" : 557,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Assembler flags\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#Unused(?) but in the VS projects\n\n#Unused(?) but in the VS projects\n",
        "Line" : 719,
        "CharPositionInLine" : 28
      },
      "46" : {
        "Text" : "# Native Language Support\n",
        "Line" : 900,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# manual pages\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# linux data and icon files\n",
        "Line" : 917,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 49
    },
    "cmake/Architecture.cmake" : {
      "ObjectId" : "c0f055d73ee390086924a86f49f86edcb84c95bb",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# turn asm on by default on 32bit x86\n\n# and set WINARCH for windows stuff\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 32 bit\n",
        "Line" : 16,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 2
    },
    "cmake/CMakeASM_NASMInformation.cmake" : {
      "ObjectId" : "9d4f661df04f4f5d21c6746e4a8b8dc0229f4c72",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# support for the nasm assembler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load the generic ASMInformation file:\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeDetermineASM_NASMCompiler.cmake" : {
      "ObjectId" : "d184c0a810f9a2a0aab611dc8214131bb70d1777",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the nasm assembler. yasm (http://www.tortall.net/projects/yasm/) is nasm compatible\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load the generic DetermineASM compiler file with the DIALECT set properly:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CMakeTestASM_NASMCompiler.cmake" : {
      "ObjectId" : "a5e2bea0a76b84050a17a0c7e660205181b3d8da",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\n\n# determine that the selected ASM_NASM \"compiler\" works.\n\n# For assembler this can only check whether the compiler has been found,\n\n# because otherwise there would have to be a separate assembler source file\n\n# for each assembler on every architecture.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ChangeLogVersion.cmake" : {
      "ObjectId" : "7d93b97a7fa3b60d5fd2cc77aed95fc168889fb1",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindDirectX.cmake" : {
      "ObjectId" : "85aee211d2c8343167f9ff396efdacc6e56c3cc9",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# mostly taken from emeraldviewer\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindGettext.cmake" : {
      "ObjectId" : "9f07b0a4108556c59a1d3fa3e860e52e9fac73f1",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindGettext\n\n# -----------\n\n#\n\n# Find GNU gettext tools\n\n#\n\n# This module looks for the GNU gettext tools.  This module defines the\n\n# following values:\n\n#\n\n# ::\n\n#\n\n#   GETTEXT_MSGMERGE_EXECUTABLE: the full path to the msgmerge tool.\n\n#   GETTEXT_MSGFMT_EXECUTABLE: the full path to the msgfmt tool.\n\n#   GETTEXT_FOUND: True if gettext has been found.\n\n#   GETTEXT_VERSION_STRING: the version of gettext found (since CMake 2.8.8)\n\n#\n\n#\n\n#\n\n# Additionally it provides the following macros:\n\n#\n\n# GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 ...  fileN )\n\n#\n\n# ::\n\n#\n\n#     This will create a target \"translations\" which will convert the\n\n#     given input po files into the binary output mo file. If the\n\n#     ALL option is used, the translations will also be created when\n\n#     building the default target.\n\n#\n\n# GETTEXT_PROCESS_POT_FILE( <potfile> [ALL] [INSTALL_DESTINATION <destdir>]\n\n# LANGUAGES <lang1> <lang2> ...  )\n\n#\n\n# ::\n\n#\n\n#      Process the given pot file to mo files.\n\n#      If INSTALL_DESTINATION is given then automatically install rules will\n\n#      be created, the language subdirectory will be taken into account\n\n#      (by default use share/locale/).\n\n#      If ALL is specified, the pot file is processed when building the all traget.\n\n#      It creates a custom target \"potfile\".\n\n#\n\n# GETTEXT_PROCESS_PO_FILES( <lang> [ALL] [INSTALL_DESTINATION <dir>]\n\n# PO_FILES <po1> <po2> ...  )\n\n#\n\n# ::\n\n#\n\n#      Process the given po files to mo files for the given language.\n\n#      If INSTALL_DESTINATION is given then automatically install rules will\n\n#      be created, the language subdirectory will be taken into account\n\n#      (by default use share/locale/).\n\n#      If ALL is specified, the po files are processed when building the all traget.\n\n#      It creates a custom target \"pofiles\".\n\n#\n\n# .. note::\n\n#   If you wish to use the Gettext library (libintl), use :module:`FindIntl`.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make it a real variable, so we can modify it here\n",
        "Line" : 97,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#COMMAND ${GETTEXT_MSGMERGE_EXECUTABLE} --quiet --update --backup=none -s ${_absFile} ${_absPotFile}\n",
        "Line" : 119,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 4
    },
    "cmake/FindOpenAL.cmake" : {
      "ObjectId" : "0dd9bfdce68f4f48600a0000b74be7ef0934dedd",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenAL\n\n# ----------\n\n#\n\n#\n\n#\n\n# Locate OpenAL This module defines OPENAL_LIBRARY OPENAL_FOUND, if\n\n# false, do not try to link to OpenAL OPENAL_INCLUDE_DIR, where to find\n\n# the headers\n\n#\n\n# $OPENALDIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$OPENALDIR used in building OpenAL.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\n\n# module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This makes the presumption that you are include al.h like\n\n# #include \"al.h\"\n\n# and not\n\n# #include <AL/al.h>\n\n# The reason for this is that the latter is not entirely portable.\n\n# Windows/Creative Labs does not by default put their headers in AL/ and\n\n# OS X uses the convention <OpenAL/al.h>.\n\n#\n\n# For Windows, Creative Labs seems to have added a registry key for their\n\n# OpenAL 1.1 installer. I have added that key to the list of search paths,\n\n# however, the key looks like it could be a little fragile depending on\n\n# if they decide to change the 1.00.0000 number for bug fix releases.\n\n# Also, they seem to have laid down groundwork for multiple library platforms\n\n# which puts the library in an extra subdirectory. Currently there is only\n\n# Win32 and I have hardcoded that here. This may need to be adjusted as\n\n# platforms are introduced.\n\n# The OpenAL 1.0 installer doesn't seem to have a useful key I can use.\n\n# I do not know if the Nvidia OpenAL SDK has a registry key.\n\n#\n\n# For OS X, remember that OpenAL was added by Apple in 10.4 (Tiger).\n\n# To support the framework, I originally wrote special framework detection\n\n# code in this module which I have now removed with CMake's introduction\n\n# of native support for frameworks.\n\n# In addition, OpenAL is open source, and it is possible to compile on Panther.\n\n# Furthermore, due to bugs in the initial OpenAL release, and the\n\n# transition to OpenAL 1.1, it is common to need to override the built-in\n\n# framework.\n\n# Per my request, CMake should search for frameworks first in\n\n# the following order:\n\n# ~/Library/Frameworks/OpenAL.framework/Headers\n\n# /Library/Frameworks/OpenAL.framework/Headers\n\n# /System/Library/Frameworks/OpenAL.framework/Headers\n\n#\n\n# On OS X, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# OPENAL_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 76,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 77,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "63da103d5e2a03f31ede0bc65b8368ac775aa8ce",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# If you have pkg-config, these extra variables are also defined:\n\n# SDL2_DEFINITIONS, extra CFLAGS\n\n# SDL2_EXTRA_LIBS, extra link libs\n\n# SDL2_LINKER_FLAGS, extra link flags\n\n#\n\n# The latter two are automatically added to SDL2_LIBRARY\n\n#\n\n# To use them, add code such as:\n\n#\n\n# # SET(SDL2_STATIC ON) # if you want to link SDL2 statically\n\n# FIND_PACKAGE(SDL2 REQUIRED)\n\n# ADD_DEFINITIONS(${SDL2_DEFINITIONS})\n\n# TARGET_LINK_LIBRARIES(your-executable-target ${SDL2_LIBRARY} ...)\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# If you want to link SDL2 statically, set SDL2_STATIC to ON.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL3/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mac Homebrew and local installs\n",
        "Line" : 86,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 88,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# MacPorts\n",
        "Line" : 89,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# OpenCSW (Solaris)\n",
        "Line" : 90,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MinGW needs an additional link flag, -mwindows (to make a GUI app)\n\n# but we only add it when not making a Debug build.\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -mwindows\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# For SDL2main\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 175,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# For MinGW library\n",
        "Line" : 182,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Add some stuff from pkg-config, if available\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# get any definitions\n",
        "Line" : 193,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# get any extra stuff needed for linking\n",
        "Line" : 198,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 218,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 220,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 18
    },
    "cmake/FindSFML.cmake" : {
      "ObjectId" : "fe84c96192ef40f21e0ababfffd7e900334a8fd5",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(SFML COMPONENTS graphics window system) # find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(SFML COMPONENTS ...)     # no specific version required\n\n#   find_package(SFML 2 COMPONENTS ...)   # any 2.x version\n\n#   find_package(SFML 2.4 COMPONENTS ...) # version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n\n# Since you have to link yourself all the SFML dependencies when you link it statically, the following\n\n# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\n\n# description below).\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n\n# to tell CMake where SFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n\n# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n\n# - SFML_FOUND:        true if all the required modules are found\n\n# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n\n# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SFML version is < 2.0\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 121,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 135,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\n",
        "Line" : 195,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\n",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of SFML libraries\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# No lookup in environment variables (PATH on Windows), as they may contain wrong library versions\n",
        "Line" : 245,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# sfml-system\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 257,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# sfml-network\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 274,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# sfml-window\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# find libraries\n",
        "Line" : 285,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# update the list\n",
        "Line" : 295,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# sfml-graphics\n",
        "Line" : 308,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# find libraries\n",
        "Line" : 312,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# update the list\n",
        "Line" : 316,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# sfml-audio\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# find libraries\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# update the list\n",
        "Line" : 333,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# handle errors\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# SFML version not ok\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# fatal error\n",
        "Line" : 354,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# error but continue\n",
        "Line" : 357,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# handle success\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    },
    "cmake/FindSSP.cmake" : {
      "ObjectId" : "f1047be6ff63723a631864b208fe9aaa80755ed3",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindSSP.cmake\n\n#\n\n# Find libssp necessary when using gcc with e.g. -fstack-protector=strong\n\n#\n\n# See: http://wiki.osdev.org/Stack_Smashing_Protector\n\n#\n\n# To use:\n\n#\n\n# put a copy into your <project_root>/cmake/\n\n#\n\n# In your main CMakeLists.txt do something like this:\n\n#\n\n# if(WIN32)\n\n#     set(SSP_STATIC ON)\n\n# endif()\n\n#\n\n# find_package(SSP)\n\n#\n\n# if(SSP_LIBRARY)\n\n#     set(CMAKE_CXX_LINK_EXECUTABLE \"${CMAKE_CXX_LINK_EXECUTABLE} ${SSP_LIBRARY}\")\n\n#     set(CMAKE_C_LINK_EXECUTABLE   \"${CMAKE_C_LINK_EXECUTABLE}   ${SSP_LIBRARY}\")\n\n# endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only do this when compiling with gcc/g++\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "8ab03bc5f0b766462e05edb6afbe9c20e8115b46",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n#  git_local_changes(<var>)\n\n#\n\n# Returns either \"CLEAN\" or \"DIRTY\" with respect to uncommitted changes.\n\n# Uses the return code of \"git diff-index --quiet HEAD --\".\n\n# Does not regard untracked files.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 51,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 55,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 111,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/GitTagVersion.cmake" : {
      "ObjectId" : "6eb25b3a75d86b7fc905639f1ce3a04846824ef7",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get latest version from tag history\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# if no tags (e.g. shallow clone) do nothing\n",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# convert to list of the form [tag0, ref0, tag1, ref1, ...]\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# if cannot get current ref, do nothing\n",
        "Line" : 21,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# tag is a version number with or without a \"-revision\"\n",
        "Line" : 34,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# revision name tagged\n",
        "Line" : 46,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# dev version, use short sha for ref\n",
        "Line" : 55,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 7
    },
    "cmake/HostCompile.cmake" : {
      "ObjectId" : "bcba1167ec02217e47e83f09b2d0239eaf95824e",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# assume cc foo.c -o foo # will work on most hosts\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# special case for Visual Studio\n",
        "Line" : 20,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/LLVMToolchain.cmake" : {
      "ObjectId" : "0953f96865b9bda16f367f6b394696c041453be0",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/MacPackageManagers.cmake" : {
      "ObjectId" : "ad17045d13c4252871c383b81238d4f0a8044637",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module checks for Mac Homebrew, MacPorts, or Fink, in that order, on Mac\n\n# OS X.\n\n#\n\n# It will prepend the active package manager's paths to:\n\n#\n\n# CMAKE_FRAMEWORK_PATH\n\n# CMAKE_INCLUDE_PATH\n\n# CMAKE_LIBRARY_PATH\n\n# CMAKE_PROGRAM_PATH\n\n#\n\n# In addition, the following commands are called with the package manager's\n\n# paths:\n\n#\n\n# INCLUDE_DIRECTORIES()\n\n# LINK_DIRECTORIES()\n\n#\n\n# The paths of package managers not currently in $ENV{PATH} are added to\n\n# CMAKE_IGNORE_PATH .\n\n#\n\n# Copyright (c) 2016, Rafael Kitover\n\n# All rights reserved.\n\n# \n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n# \n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n# \n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# no package manager found or active, do nothing\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# only ignore /usr/local if brew is installed and not in the PATH\n\n# in other cases, it is the user's personal installations\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/PathRun.cmake" : {
      "ObjectId" : "2c4d6aa58b47f0e9d2fd9ba3a2343d96e05d52be",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Toolchain-cross-MinGW-w64-i686.cmake" : {
      "ObjectId" : "1225f5ae91ca538dae20a682267a3dc9d10b64c6",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment too\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# pkg-config may be under the prefix\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Toolchain-cross-MinGW-w64-x86_64.cmake" : {
      "ObjectId" : "cfdab98661a5936f5500f369a8455bb68d8eee86",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment too\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# pkg-config may be under the prefix\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Toolchain-cross-m32.cmake" : {
      "ObjectId" : "bf7e8364f7815e4b9ddf218682dc8ca6802c0ce3",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fedora\n",
        "Line" : 4,
        "CharPositionInLine" : 20
      },
      "1" : {
        "Text" : "# Arch, Solus\n",
        "Line" : 7,
        "CharPositionInLine" : 26
      },
      "2" : {
        "Text" : "# this is probably unlikely to be needed, but just in case\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find Wx config script on Fedora for the highest version of 32 bit Wx installed\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# on Fedora and Arch and similar, point pkgconfig at 32 bit .pc files. We have\n\n# to include the regular system .pc files as well (at the end), because some\n\n# are not always present in the 32 bit directory\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/UseGCCBinUtilsWrappers.cmake" : {
      "ObjectId" : "43d6cad2529cc1d7cb4f4c9e6b3a89166a0bc1e4",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UseGCCBinUtilsWrappers.cmake\n\n#\n\n# Use gcc binutils wrappers such as gcc-ar, this may be necessary for LTO.\n\n#\n\n# To use:\n\n#\n\n# put a copy into your <project_root>/CMakeScripts/\n\n#\n\n# In your main CMakeLists.txt add the command:\n\n#\n\n# INCLUDE(UseGCCBinUtilsWrappers)\n\n#\n\n# BSD 2-Clause License\n\n#\n\n# Copyright (c) 2016, Rafael Kitover\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only do this when compiling with gcc/g++\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first try appending -util to basename of compiler\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if that does not work, try looking for gcc-util in the compiler directory,\n\n# and failing that in the PATH\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/VbamFunctions.cmake" : {
      "ObjectId" : "e6628c82c6447e7cf2975ba44ce6de62e0a7c157",
      "LastModified" : "2019-04-09T02:04:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From: https://stackoverflow.com/a/7216542\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#fixes escaping\n",
        "Line" : 4,
        "CharPositionInLine" : 64
      },
      "2" : {
        "Text" : "# convert msys paths like /c/foo to windows paths like c:/foo\n\n# for variables set by FindWxWidgets\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# special case for msys2, where programs might complain about\n\n# not being win32 programs\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# on win32, including cross builds we prefer the plain utility name first from PATH\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# find_program caches the result\n",
        "Line" : 95,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# check that the utility can be executed cleanly\n\n# in case we find e.g. the wrong architecture binary\n\n# when cross-compiling\n",
        "Line" : 100,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# don't iterate over minor versions for empty major version\n",
        "Line" : 111,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "# default to util name if not found, so the error is more clear\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "cmake/Win32Deps.cmake" : {
      "ObjectId" : "1787a7a6d18015a2d2eee5da256de9df84df0740",
      "LastModified" : "2019-04-16T13:07:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# compiler has not been detected yet maybe\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Win32 deps submodules (dependencies and vcpkg)\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# for GL/glext.h and getopt.h\n",
        "Line" : 32,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : "# build vcpkg if not built\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#list(APPEND VCPKG_DEPS_QUALIFIED ${pkg}:${WINARCH}-windows-static)\n",
        "Line" : 49,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# build our deps\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# not sure why this is necessary\n",
        "Line" : 63,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 7
    },
    "fex/CMakeLists.txt" : {
      "ObjectId" : "f464a5ebbd6605cbb77d622f507e6942427912ab",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Do not use this file directly.  Always use the top level CMakeLists.txt file\n\n#File extractors so the user doesn't have to extract the rom before playing it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Source files definition\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "99ceb39a16787e3ae161df372f78a4e5c4f95a8c",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "po/wxvbam/CMakeLists.txt" : {
      "ObjectId" : "074f5bb9949fbbdd0ad6a88f2dacd27c984f1960",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libretro/Makefile" : {
      "ObjectId" : "c2d9c30d3ec544db01a3c0710cc6d2db4847aedb",
      "LastModified" : "2019-04-16T14:13:22Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# iOS\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Classic Platforms ####################\n\n# Platform affix = classic_<ISA>_<µARCH>\n\n# Help at https://modmyclassic.com/comp\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# (armv7 a7, hard point, neon based) ###\n\n# NESC, SNESC, C64 mini\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If gcc is 5.0 or later\n",
        "Line" : 155,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#######################################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Windows MSVC 2017 all architectures\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 32:55 token recognition error at: '\\1'\nline 193:72 token recognition error at: '\\S'\nline 193:81 token recognition error at: '\\W'\nline 193:93 token recognition error at: '\\M'\nline 193:103 token recognition error at: '\\M'\nline 193:118 token recognition error at: '\\W'\nline 193:126 token recognition error at: '\\v'\nline 194:71 token recognition error at: '\\S'\nline 194:80 token recognition error at: '\\W'\nline 194:92 token recognition error at: '\\M'\nline 194:102 token recognition error at: '\\M'\nline 194:117 token recognition error at: '\\W'\nline 194:125 token recognition error at: '\\v'\nline 195:72 token recognition error at: '\\S'\nline 195:81 token recognition error at: '\\M'\nline 195:91 token recognition error at: '\\M'\nline 195:106 token recognition error at: '\\W'\nline 195:114 token recognition error at: '\\v'\nline 196:71 token recognition error at: '\\S'\nline 196:80 token recognition error at: '\\M'\nline 196:90 token recognition error at: '\\M'\nline 196:105 token recognition error at: '\\W'\nline 196:113 token recognition error at: '\\v'\nline 222:50 token recognition error at: '\"$(WindowsSdkDir)\\I'\nline 222:96 token recognition error at: '\\s'\nline 223:65 token recognition error at: '\\I'\nline 223:94 token recognition error at: '\\u'\nline 224:63 token recognition error at: '\\I'\nline 224:92 token recognition error at: '\\u'\nline 225:61 token recognition error at: '\\L'\nline 225:86 token recognition error at: '\\u'\nline 226:59 token recognition error at: '\\L'\nline 226:84 token recognition error at: '\\u'\nline 229:17 token recognition error at: '\" opening a shared library), and vice-versa.\\n\\t# Work around it for now by using the strictly x86 compiler for x86, and x64 for x64.\\n\\t# NOTE: What about ARM?\\n\\tifneq (,$(findstring x64,$(TargetArchMoniker)))\\n\\t\\tVCCompilerToolsBinDir := $(VcCompilerToolsDir)\\b'\nline 233:52 token recognition error at: '\\H'\nline 235:48 token recognition error at: '\\b'\nline 235:52 token recognition error at: '\\H'\n"
    },
    "src/wx/CMakeLists.txt" : {
      "ObjectId" : "5b310f616fbe579f7b543805decae1649b065cee",
      "LastModified" : "2019-04-16T14:13:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do not use this file directly.  Always use the top level CMakeLists.txt file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link to full path of libs\n\n# escapes in add_definitions\n",
        "Line" : 4,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# use vars for options\n",
        "Line" : 8,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# for wxWidgets, use generator expressions\n",
        "Line" : 12,
        "CharPositionInLine" : 38
      },
      "4" : {
        "Text" : "# not yet implemented\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# on VS with vcpkg we can't use FindwxWidgets, we have to set everything up\n\n# manually because the package is broken\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set up wxwidgets stuff\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# get zip binary for wxrc\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# unzip it\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SDL2.dll does not get copied to build dir\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# noop if wx is compiled with --disable-debug, like in Mac Homebrew atm\n",
        "Line" : 121,
        "CharPositionInLine" : 36
      },
      "11" : {
        "Text" : "# on e.g. msys2 add a couple of libraries wx needs\n\n#if(WIN32 AND (CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID STREQUAL Clang))\n\n#    set(CMAKE_CXX_LINK_EXECUTABLE \"${CMAKE_CXX_LINK_EXECUTABLE} -luuid -lwinspool\")\n\n#endif()\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check for gtk4 then gtk3 packages first, some dists like arch rename the\n\n# wx-config utility for these packages to e.g. wx-config-gtk3\n\n#\n\n# Do not do the check if the WX_CONFIG env var is set or the cmake variable\n\n# is set\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# adv is for wxAboutBox\n\n# xml, html is for xrc\n\n# the gl lib may not be available, and if it looks like it is we still have to\n\n# do a compile test later\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# tell wx to enable debug mode if possible, if the cmake module did not do it for us\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# this one should be safe in non-debug builds too\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# set up variables for some compile/run checks for wxWidgets\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# CheckCXXSourceCompiles ignores compiler flags, so we have to stuff them into the definitions\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# find the right C++ ABI version for wxWidgets, this is also necessary for the OpenGL check following\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# on windows we need the trampoline library from dependencies\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# minhook requires -fpermissive unfortunately\n",
        "Line" : 285,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# assume 32 bit windows\n",
        "Line" : 292,
        "CharPositionInLine" : 19
      },
      "22" : {
        "Text" : "# remove -fpermissive set for minhook\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# currently goes up to 11 with gcc7, but we give it some room\n",
        "Line" : 304,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# add C++ flags\n",
        "Line" : 336,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# now check for OpenGL\n",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# end of wx compile checks\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# we make some direct gtk/gdk calls on linux and such\n\n# so need to link the gtk that wx was built with\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# try to use pkg-config to find gtk2 first\n",
        "Line" : 403,
        "CharPositionInLine" : 16
      },
      "29" : {
        "Text" : "# and if that fails, use the cmake module\n",
        "Line" : 411,
        "CharPositionInLine" : 20
      },
      "30" : {
        "Text" : "# wxWidgets checks\n",
        "Line" : 434,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# contrib widgets\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# for out-of-tree builds, grab includes from both target and source dirs\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# wxrc does not support xrs files in -c output (> 10x compression)\n\n# we do it using the bin2c.c utility\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# this is necessary on msys2\n",
        "Line" : 519,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# check if the path from wx-config is good\n\n# and not e.g. an incompatible binary when cross-compiling\n",
        "Line" : 529,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# this is necessary on msys2\n",
        "Line" : 538,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# pass xrc sources through cygpath in case we only have native wxrc\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# use a built-in vba-over.ini if no config file present\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# I don't like duplicating/triplicating code, so I only declare\n\n# event handlers once, and copy them in other places they are needed\n\n# all using portable cmake code\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# the following should be in the main file for consistency with\n\n# other front ends, but can't due to cmake issues\n\n# then again, the main file should be split up into separate dirs anyway\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# probably ought to be in common\n",
        "Line" : 624,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# from external source with minor modifications\n",
        "Line" : 626,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# generated\n",
        "Line" : 628,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# generated includes must be explicitly listed\n",
        "Line" : 630,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# icon File\n",
        "Line" : 635,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# probably ought to be in common\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# from external source with minor modifications\n",
        "Line" : 660,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# workaround for some symbols needed by static SDL2.lib\n",
        "Line" : 692,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# not strictly directx, but win32-related\n",
        "Line" : 695,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# link libgcc/libstdc++ statically on mingw\n\n# and adjust link command when making a static binary\n",
        "Line" : 755,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Build a console app in debug mode on Windows\n",
        "Line" : 759,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# some dists don't have a static libpthread\n",
        "Line" : 768,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# this should set ROM file types correctly\n",
        "Line" : 796,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# bundle dylibs and relink them for releasing .app\n\n# also install translations into the .app\n\n# but only in Release mode\n",
        "Line" : 801,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 55
    },
    "src/wx/copy-events.cmake" : {
      "ObjectId" : "252a5b8804a6c6b18aad57a22d427b1258ca56e5",
      "LastModified" : "2019-04-16T14:13:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create cmdtab.cpp, cmdhandlers.h, cmd-evtable.h from cmdevents.cpp\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmdtab.cpp is a table of cmd-id-name/cmd-name pairs\n\n# sorted for binary searching\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# stripping the wxID_ makes it look better, but it's still all-caps\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# cmdhandlers.h contains prototypes for all handlers\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# cmd-evtable.h has the event table entries for all handlers\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/wx/link-static.cmake" : {
      "ObjectId" : "3720b336b74f82adf12a1a1efb5d6a6cf27c44b3",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/wx/mac-translations.cmake" : {
      "ObjectId" : "d3072a276e5778757f91febffe526687ed71aae6",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install localizations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# strip path\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/wx/msys-link-static.cmake" : {
      "ObjectId" : "4850e3b3f61826613b5d5b77bd430ff00566019d",
      "LastModified" : "2019-03-21T23:01:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 32,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2790
}