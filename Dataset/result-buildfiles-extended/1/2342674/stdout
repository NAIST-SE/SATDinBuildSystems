{
  "Repository" : "2342674",
  "Revision" : "HEAD",
  "ObjectId" : "4824428971de9ffb51883c2252bc5dc8a2abf921",
  "CommitTime" : "2019-04-14T11:01:52Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d7309ace9b00a8d356af77f78d41969328001944",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the source and binary directory are not the sample\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set a few policies\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMAKE_INSTALL_PREFIX is defined but also overwritten by the PROJECT command so we need to set it later\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Reset this variable\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Define options and editable variables in the section below:\n\n# This is only needed for single configuration generators so don't annoy others\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Override standard CMake configurations\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Currently only GCC support ccache properly without generating additional warnings\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check if the external modules exists\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# On windows and mac the default should be to always build the included libraries\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Include cotire file from https://github.com/sakra/cotire/\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This includes source code for some tools, either used in the build or also for something else\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Default to using Freespace2 as startup project if CMake supports it.\n",
        "Line" : 171,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Print used options to log\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/Cxx11.cmake" : {
      "ObjectId" : "38fce8026341b1c0c33609c1f577ce7ab66c4eca",
      "LastModified" : "2017-11-30T12:26:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/appimage.cmake" : {
      "ObjectId" : "cb87f1bea7d5339572ff71b33ca8b90059e26dfb",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/clang-tidy.cmake" : {
      "ObjectId" : "bf800ac72f79c8f6c16d87d33b5cc5f76c3be720",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Not enabled in this configuration\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/cross_compile/mingw64.cmake" : {
      "ObjectId" : "46c49e23b38efba55a9b827d0e345d5de37ae461",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sample toolchain file for building for Windows from a Linux system.\n\n#\n\n# Typical usage:\n\n#    *) install cross compiler: `sudo apt-get install mingw-w64 g++-mingw-w64`\n\n#    *) cd build\n\n#    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/Toolchain-Ubuntu-mingw64.cmake ..\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cross compilers to use for C and C++\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# target environment on the build host system\n\n#   set 1st to dir with the cross compiler's C/C++ headers/libs\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# modify default behavior of FIND_XXX() commands to\n\n# search for headers/libs in the target environment and\n\n# don't search for programs in the build host environment\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/debug-vars.cmake" : {
      "ObjectId" : "e6a93de0cb9f972632bf96282be5448cb19b0013",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------- Begin Generic CMake Variable Logging ------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# /*\tC++ comment style not allowed\t*/\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if you are building in-source, this is the same as CMAKE_SOURCE_DIR, otherwise\n\n# this is the top level directory of your build tree\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if you are building in-source, this is the same as CMAKE_CURRENT_SOURCE_DIR, otherwise this\n\n# is the directory where the compiled or generated files from the current CMakeLists.txt will go to\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# this is the directory, from which cmake was started, i.e. the top level source directory\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this is the directory where the currently processed CMakeLists.txt is located in\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# contains the full path to the top level directory of your build tree\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# contains the full path to the root of your project source directory,\n\n# i.e. to the nearest directory where CMakeLists.txt contains the PROJECT() command\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# set this variable to specify a common place where CMake should put all executable files\n\n# (instead of CMAKE_CURRENT_BINARY_DIR)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# set this variable to specify a common place where CMake should put all libraries\n\n# (instead of CMAKE_CURRENT_BINARY_DIR)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# tell CMake to search first in directories listed in CMAKE_MODULE_PATH\n\n# when you use FIND_PACKAGE() or INCLUDE()\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# this is the complete path of the cmake which runs currently (e.g. /usr/local/bin/cmake)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# this is the CMake installation directory\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# this is the filename including the complete path of the file where this variable is used.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# this is linenumber where the variable is used\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# this is used when searching for include files e.g. using the FIND_PATH() command.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# this is used when searching for libraries e.g. using the FIND_LIBRARY() command.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# the complete system name, e.g. \"Linux-2.4.22\", \"FreeBSD-5.4-RELEASE\" or \"Windows 5.1\"\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# the short system name, e.g. \"Linux\", \"FreeBSD\" or \"Windows\"\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# only the version part of CMAKE_SYSTEM\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# the processor name (e.g. \"Intel(R) Pentium(R) M processor 2.00GHz\")\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# is TRUE on all UNIX-like OS's, including Apple OS X and CygWin\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# is TRUE on Windows, including CygWin\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# is TRUE on Apple OS X\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# is TRUE when using the MinGW compiler in Windows\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# is TRUE on Windows when using the CygWin version of cmake\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# is TRUE on Windows when using a Borland compiler\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Microsoft compiler\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# set this to true if you don't want to rebuild the object files if the rules have changed,\n\n# but not the actual source files or headers (e.g. if you changed the some compiler switches)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# since CMake 2.1 the install rule depends on all, i.e. everything will be built before installing.\n\n# If you don't like this, set this one to true.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# If set, runtime paths are not added when using shared libraries. Default it is set to OFF\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# set this to true if you are using makefiles and want to see the full compile and link\n\n# commands instead of only the shortened ones\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# this will cause CMake to not put in the rules that re-run CMake. This might be useful if\n\n# you want to use the generated build files on another machine.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# A simple way to get switches to the compiler is to use ADD_DEFINITIONS().\n\n# But there are also two variables exactly for this purpose:\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# the compiler flags for compiling C sources\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# the compiler flags for compiling C++ sources\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Choose the type of build.  Example: SET(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# if this is set to ON, then all libraries are built as shared libraries by default.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# the compiler used for C files\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# the compiler used for C++ files\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# if the compiler is a variant of gcc, this should be set to 1\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# if the compiler is a variant of g++, this should be set to 1\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# the tools for creating libraries\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n\n#MESSAGE( STATUS \": \" ${} )\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ------------------------- End of Generic CMake Variable Logging ------------------\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    },
    "cmake/doxygen.cmake" : {
      "ObjectId" : "4ca079c0ffae0bb7703ebfbeaa3153491e4c79d1",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/external/cotire/cotire.cmake" : {
      "ObjectId" : "62cd23db987b85040a47799c88a720a5c8e2952d",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2017 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# strict checking for break() command\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 209,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# remove from head\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# option with separate argument\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# remember option\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# option with joined argument\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# flush remembered option\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 422,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# add target compile flags\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# target compile options\n",
        "Line" : 444,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 451,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 462,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 482,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 494,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# platform specific flags\n",
        "Line" : 505,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# default include dirs\n",
        "Line" : 540,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 547,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 559,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# target include directories\n",
        "Line" : 571,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 583,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 591,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 687,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# target export define symbol\n",
        "Line" : 691,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 696,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# target compile definitions\n",
        "Line" : 705,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 714,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 723,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 739,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 894,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 983,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1027,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1035,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1038,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# header is outside\n",
        "Line" : 1052,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1063,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# check header file extension\n",
        "Line" : 1073,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1086,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1091,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# GCC like output\n",
        "Line" : 1100,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1116,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1119,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1121,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# then separate lines\n",
        "Line" : 1123,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1126,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1144,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# update stack\n",
        "Line" : 1154,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1170,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1172,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1179,
        "CharPositionInLine" : 5
      },
      "73" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1188,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1200,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1238,
        "CharPositionInLine" : 1
      },
      "76" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1254,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1405,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# create empty log file\n",
        "Line" : 1446,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1462,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1499,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1508,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1511,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1515,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1526,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1533,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1538,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1541,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1546,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1555,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1558,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1562,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1567,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1573,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1592,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1603,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1610,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1617,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1626,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1629,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1637,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1649,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1656,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1663,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1678,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1689,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1708,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1716,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1722,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1729,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1734,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1739,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1744,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1747,
        "CharPositionInLine" : 3
      },
      "116" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1751,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1757,
        "CharPositionInLine" : 3
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1760,
        "CharPositionInLine" : 3
      },
      "119" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1766,
        "CharPositionInLine" : 3
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1774,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1780,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1787,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1789,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1792,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1797,
        "CharPositionInLine" : 3
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1810,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1818,
        "CharPositionInLine" : 5
      },
      "128" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1827,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# append to list\n",
        "Line" : 1829,
        "CharPositionInLine" : 5
      },
      "130" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1832,
        "CharPositionInLine" : 5
      },
      "131" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1869,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Newer versions of Clang and GCC seem to embed a compilation timestamp into the precompiled header binary,\n\n# which results in \"file has been modified since the precompiled header was built\" errors if ccache is used.\n\n# We work around the problem by disabling ccache upon pre-compiling the prefix header.\n",
        "Line" : 1874,
        "CharPositionInLine" : 3
      },
      "133" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1893,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1897,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1904,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1907,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1946,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1965,
        "CharPositionInLine" : 1
      },
      "139" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 2008,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 2022,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2093,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2098,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2101,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2104,
        "CharPositionInLine" : 4
      },
      "146" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2107,
        "CharPositionInLine" : 4
      },
      "147" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2139,
        "CharPositionInLine" : 1
      },
      "148" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2143,
        "CharPositionInLine" : 2
      },
      "149" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2148,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2165,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2178,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2203,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2208,
        "CharPositionInLine" : 3
      },
      "154" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2215,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2218,
        "CharPositionInLine" : 1
      },
      "156" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2223,
        "CharPositionInLine" : 1
      },
      "157" : {
        "Text" : "# generate target script file\n",
        "Line" : 2246,
        "CharPositionInLine" : 1
      },
      "158" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2251,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2265,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2274,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2276,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2280,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2289,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2311,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2316,
        "CharPositionInLine" : 3
      },
      "166" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2323,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2329,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2336,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2339,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2346,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2353,
        "CharPositionInLine" : 1
      },
      "172" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2355,
        "CharPositionInLine" : 1
      },
      "173" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2419,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2430,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2441,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2453,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2457,
        "CharPositionInLine" : 3
      },
      "179" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2479,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2485,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2494,
        "CharPositionInLine" : 3
      },
      "182" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2502,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2532,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2550,
        "CharPositionInLine" : 1
      },
      "185" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2555,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2580,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2589,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2598,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2605,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2780,
        "CharPositionInLine" : 3
      },
      "191" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2784,
        "CharPositionInLine" : 3
      },
      "192" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2798,
        "CharPositionInLine" : 3
      },
      "193" : {
        "Text" : "# use all available cores\n",
        "Line" : 2818,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2843,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2850,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2860,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2865,
        "CharPositionInLine" : 1
      },
      "198" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2867,
        "CharPositionInLine" : 2
      },
      "199" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2876,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2886,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2893,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2897,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2925,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2930,
        "CharPositionInLine" : 4
      },
      "205" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2945,
        "CharPositionInLine" : 2
      },
      "206" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2966,
        "CharPositionInLine" : 3
      },
      "207" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2974,
        "CharPositionInLine" : 3
      },
      "208" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2997,
        "CharPositionInLine" : 4
      },
      "209" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 3009,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 3019,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 3022,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 3027,
        "CharPositionInLine" : 2
      },
      "213" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3037,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# generate unity target\n",
        "Line" : 3044,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# depend on original target's automoc target, if it exists\n",
        "Line" : 3051,
        "CharPositionInLine" : 2
      },
      "216" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 3057,
        "CharPositionInLine" : 3
      },
      "217" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3065,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3075,
        "CharPositionInLine" : 3
      },
      "219" : {
        "Text" : "# copy output name\n",
        "Line" : 3100,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3108,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# copy compile features\n",
        "Line" : 3120,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3125,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3133,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3144,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3147,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3153,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3169,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3177,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3182,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3206,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# resolve alias\n",
        "Line" : 3218,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3226,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3242,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3247,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3296,
        "CharPositionInLine" : 4
      },
      "236" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3358,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3445,
        "CharPositionInLine" : 1
      },
      "238" : {
        "Text" : "# include target script if available\n",
        "Line" : 3457,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3459,
        "CharPositionInLine" : 2
      },
      "240" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3475,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3495,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3498,
        "CharPositionInLine" : 3
      },
      "243" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3517,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3520,
        "CharPositionInLine" : 3
      },
      "245" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3588,
        "CharPositionInLine" : 3
      },
      "246" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3591,
        "CharPositionInLine" : 3
      },
      "247" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3614,
        "CharPositionInLine" : 1
      },
      "248" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3651,
        "CharPositionInLine" : 3
      },
      "249" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3685,
        "CharPositionInLine" : 2
      },
      "250" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3699,
        "CharPositionInLine" : 3
      },
      "251" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3706,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3759,
        "CharPositionInLine" : 1
      },
      "253" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3831,
        "CharPositionInLine" : 1
      },
      "254" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3995,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 255
    },
    "cmake/finder/FindSpeech.cmake" : {
      "ObjectId" : "96667a99af1eaf1d48d8d836286846844eef5db0",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/generateHeaders.cmake" : {
      "ObjectId" : "d48d41f7840e93b1b00d1bda970396e1a510999b",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/globals.cmake" : {
      "ObjectId" : "e29570f2bacaf52ff4d15024e8b04942a3b869f3",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/headers.cmake" : {
      "ObjectId" : "b8fbeb5d771063035454765797d3ebfbec799462",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/package.cmake" : {
      "ObjectId" : "49990130fe5204fe5be8063d17c2df7f7bccfa66",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/platform-darwin.cmake" : {
      "ObjectId" : "4a7fce15eae9bdabc21a7e20f1bad89c764d180c",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the path where library dependencies are copied to\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate and don't strip debug symbols\n\n# These settings don't seem to generate debug symbols for code and Freespace2\n\n# so those settings are set manually in code and Freespace2's CMakeLists.txt files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate .dSYM file\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/platform-freebsd.cmake" : {
      "ObjectId" : "2616e137fa797826b1b55ec1fdf1226428bf99d2",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/platform-solaris.cmake" : {
      "ObjectId" : "ba6b3ded31828cddfba060d99a30bb49ff58cbc4",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/platform-unix.cmake" : {
      "ObjectId" : "cacecf6a668480e8c2a04e4a91bc6b4cfc311a33",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set RPATH\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/platform-win32.cmake" : {
      "ObjectId" : "6230b7c52aa4b56b056928a5b3a8c6582593dbb5",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Specify minimum Windows version for the headers (currently this is XP)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/platformChecks.cmake" : {
      "ObjectId" : "930ccdc319b180567f1788926f69dbd073329a8e",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required for g++ <= 5\n",
        "Line" : 19,
        "CharPositionInLine" : 43
      },
      "CommentCount" : 1
    },
    "cmake/platforms.cmake" : {
      "ObjectId" : "f72bd54d9e752398e680b5f73c7fed0724ae4698",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/toolchain-apple-clang.cmake" : {
      "ObjectId" : "414ae16aea1855b5223a8eed6f2f7f0639b4095f",
      "LastModified" : "2019-01-02T05:12:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Actually add Mac specific flags here...\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress specific warning\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Omit \"conversion from string literal to 'char *' is deprecated\" warnings.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/toolchain-clang.cmake" : {
      "ObjectId" : "f68e9024c9b6c46e75608b48df5857ffcaac6e91",
      "LastModified" : "2019-01-02T05:12:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are the default values\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For C and C++, the values can be overwritten independently\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initialize with an empty string to make sure we always get a clean start\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is a slight hack since our flag setup is a bit more complicated\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Omit \"argument unused during compilation\" when clang is used with ccache.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force color diagnostics for Ninja generator\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Start with an empty list\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Dear Clang, please tell us if a function does not return a value since that part of the standard is stupid!\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Always use the base flags and add our compiler flags at the bacl\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make warnings fatal if the right variable is set\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Always define this to make sure that the fixed width format macros are available\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/toolchain-gcc.cmake" : {
      "ObjectId" : "3227cd513698177e7b3abe72b5108b634183ec7b",
      "LastModified" : "2019-01-02T05:12:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are the default values\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For C and C++, the values can be overwritten independently\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Initialize with an empty string to make sure we always get a clean start\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a slight hack since our flag setup is a bit more complicated\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Place each function and data in its own section so the linker can\n\n# perform dead code elimination\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Force color diagnostics for Ninja generator\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Start with an empty list\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Dear GCC, please tell us if a function does not return a value since that part of the standard is stupid!\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These two warnings cause a lot of false-positives in the FSO code base\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Always use the base flags and add our compiler flags at the bacl\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Allow the linker to perform dead code elimination; this is considered\n\n# experimental for COFF and PE formats and thus disabled for Windows builds\n\n# (https://sourceware.org/binutils/docs/ld/Options.html)\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Make warnings fatal if the right variable is set\n",
        "Line" : 137,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Always define this to make sure that the fixed width format macros are available\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/toolchain-msvc.cmake" : {
      "ObjectId" : "ffcaf8aa87bb68b1c4f5e0b42e7f52392d167436",
      "LastModified" : "2019-01-02T05:12:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are the warnings we disable\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# unreferenced formal parameters\n\n# constant conditional (assert)\n\n# nonstandard extension used: nameless struct/union (happens a lot in Windows include headers)\n\n# C++ exception specification ignored except to indicate a function is not __declspec(nothrow)\n\n# empty control statement (triggered by nprintf and mprintf's inside of one-line if's, etc)\n\n# illegal size for operand... ie... \tfxch st(1)\n\n# copy constructor could not be generated (happens a lot in Windows include headers)\n\n# assignment operator could not be generated (happens a lot in Windows include headers)\n\n# unreferenced inline function removed\n\n# _setjmp warning.  Since we use setjmp alot, and we don't really use constructors or destructors, this warning doesn't really apply to us.\n\n# C++ language change (template specification)\n\n# is inline function not expanded (who cares?)\n\n# tells us an inline function was expanded (who cares?)\n\n# is identifier truncated to 255 characters (happens all the time in Microsoft #includes) -- Goober5000\"\n\n# deprecated strcpy, strcat, sprintf, etc. (from MSVC 2005) - taylor\n\n# Disables warnings about casting pointer types to ints. The funny thing is these warnings can't be resolved, just disabled... - m!m\n\n# Same as above - m!m\n\n# The result of the unary '&' operator may be unaligned - m!m\n\n# \"symbol will be dynamically initialized\" is being generated by a compiler bug, see https://stackoverflow.com/a/34027257 for an explanation - m!m\n",
        "Line" : 18,
        "CharPositionInLine" : 9
      },
      "2" : {
        "Text" : "# In release mode there are unreferenced variables because debug needs them\n",
        "Line" : 37,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# \"'vsprintf': name was marked as #pragma deprecated\" is being caused by our custom definition of vsprintf. I have no idea what causes this or how to fix it - m!m\n\n# \"potential divide by 0\" is caused by some code that definitely will not divide by zero - m!m\n",
        "Line" : 38,
        "CharPositionInLine" : 9
      },
      "4" : {
        "Text" : "# Base\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Release\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Debug\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Visual Studio supports compiling for multiple vector instruction sets\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Don't set anything, it will likely not work\n",
        "Line" : 126,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Make warnings fatal if the right variable is set\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 10
    },
    "cmake/toolchain.cmake" : {
      "ObjectId" : "d32c7239fc921b3b04195ec46661efadcbece2d7",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File to execute compiler specific commands\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy release settings to FastDebug\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adjust runtime library\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/util.cmake" : {
      "ObjectId" : "0bf708c5caa90a87f2d27ef6462c209791c97a93",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy from http://cmake.3232098.n2.nabble.com/RFC-cmake-analog-to-AC-SEARCH-LIBS-td7585423.html\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# End copy\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do something special for windows...\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Expecting normal library\n",
        "Line" : 117,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Disable unity build as it doesn't work well for us\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Suppresses warnings for the specified target\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Assume everything else uses GCC style options\n",
        "Line" : 196,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/version.cmake" : {
      "ObjectId" : "92be9a8787b45de2eeda041b03ada77062d6a3db",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This allows to override the values by using a special file\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# A numeric revision e.g. the CI build number\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A generic revision string, can be anything\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a 64-bit builds\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "code/CMakeLists.txt" : {
      "ObjectId" : "dc7bd826422b7a263fa00d4908e9efefe663a8dd",
      "LastModified" : "2019-01-02T05:12:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers for standalone \"gui\" on UNIX\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure that Xcode generates debug symbols on macOS for Debug builds\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "code/cfilearchiver/CMakeLists.txt" : {
      "ObjectId" : "c6b96be2d9031ac7a90543fa6ed26e35524f1023",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/cfileextractor/CMakeLists.txt" : {
      "ObjectId" : "a53ca143f92212ef398d890f9e0d137859bec77f",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "code/default_files.cmake" : {
      "ObjectId" : "1a1ddcbac618378c7ae4cbd512c159553a1f3d7b",
      "LastModified" : "2019-01-02T05:12:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows specific version using resource files\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Retrieve the path type name from the relative path\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Generic version using embedfile\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# For some reason this is needed...\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Retrieve the path type name from the relative path\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# There is a bug in CMake where it thinks MinGW uses forward slashes for paths but we need backslashes for Windows builds\n",
        "Line" : 55,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Properly escape back slashes in strings\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "code/source_groups.cmake" : {
      "ObjectId" : "75c11df38c1efe77ce26795012f59a9a6faf09f2",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# top-level files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AI files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Anim files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Asteroid files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Autopilot files\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Bmpman files\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Camera files\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CFile files\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Cmdline files\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMeasure files\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ControlConfig files\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Cutscene files\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Cutscene\\ffmpeg files\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ddsutils files\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Debris files\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DebugConsole files\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These files will be included in the executable but not in CFile\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Variable for all embedded files\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ExceptionHandler files\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ExternalDLL files\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Fireball files\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# GameHelp files\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# GameHelp -> fs2netd files\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# GameSequence files\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# GameSnd files\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# GlobalIncs files\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Graphics files\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Graphics -> OpenGLGr files\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Graphics -> OpenGLGr -> OpenGL CPPs files\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Graphics -> OpenGLGr -> OpenGL Headers files\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Graphics -> Paths\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Graphics -> Paths\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Graphics -> SoftwareGr files\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# HeadTracking files\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Hud files\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# iff_defs files\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# InetFile files\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Io files\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# jpgutils files\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# JumpNode files\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Lab files\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Lighting files\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Localization files\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Math files\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# MenuUI files\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Mission files\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# MissionUI files\n",
        "Line" : 688,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# mod_table files\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Model files\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Nebula files\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Network files\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Object files\n",
        "Line" : 820,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Observer files\n",
        "Line" : 847,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# OsApi files\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Parse files\n",
        "Line" : 867,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Particle files\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# PcxUtils files\n",
        "Line" : 922,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Physics files\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# PilotFile files\n",
        "Line" : 934,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Playerman files\n",
        "Line" : 951,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# pngutils files\n",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Popup files\n",
        "Line" : 965,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Radar files\n",
        "Line" : 973,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Render files\n",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Ship files\n",
        "Line" : 1175,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Sound files\n",
        "Line" : 1194,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Sound -> ffmpeg files\n",
        "Line" : 1220,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Species_Defs files\n",
        "Line" : 1228,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Starfield files\n",
        "Line" : 1234,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Stats files\n",
        "Line" : 1244,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# TgaUtils files\n",
        "Line" : 1254,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Tracing files\n",
        "Line" : 1260,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Ui files\n",
        "Line" : 1279,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Utils files\n",
        "Line" : 1314,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Weapon files\n",
        "Line" : 1320,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Windows stubs files\n",
        "Line" : 1343,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 76
    },
    "code/voice_rec.cmake" : {
      "ObjectId" : "d7aadb0d2c428cef8f48b621f2075836f305cf95",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "fred2/CMakeLists.txt" : {
      "ObjectId" : "ef6756d1ab5b7a766940322e6f5cb6772b1fb984",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This will also link all dependencies of code\n",
        "Line" : 179,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 1
    },
    "freespace2/CMakeLists.txt" : {
      "ObjectId" : "316bd35a1f678d91c0a7d45a7472c2efbfcc964d",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link sdl main only here as it interferes with fred\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add install script to copy the executable to the FreeSpace path if possible and wanted\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ensure that Xcode generates debug symbols on macOS for Debug builds\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "freespace2/resources.cmake" : {
      "ObjectId" : "cb0e3c0629869d0a153467d8658a8fd64e4f12b1",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Handling of windows resources\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Handling of mac resources\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Copy everything from the Resources directory\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# No special resource handling required, add rules for new platforms here\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "05fd043da2f4e01d1d0bfe47ef94252d7c84624c",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are only required for the web-ui which is non-Windows\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/FFmpeg.cmake" : {
      "ObjectId" : "edda677d80e1e7fe87e3225071b685ac5b696f6c",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake can't check for ffmpeg so we'll just use PkgConfig\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Check if we have ffmpeg, the minimum version we support is 2.7\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# I need to do some workarounds to be able to use our prebuilt LGPL builds\n\n# so we can distribute that in releases\n\n# The ffmpeg libs specify a SONAME that is different from the name of the file\n\n# so we also need to copy and install that symlink in addition to the actual library\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use our libraries\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "lib/OpenAL.cmake" : {
      "ObjectId" : "42d0ab115664854a1f24c89420c789b47cc14288",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We have precompiled libs for windows\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/discord/CMakeLists.txt" : {
      "ObjectId" : "febd4f0ab6f826fc669a9047b2c86fd7dc8c351d",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/discord/src/CMakeLists.txt" : {
      "ObjectId" : "f7a3d36887b93652fbd2858cee422dcaf753de7d",
      "LastModified" : "2018-08-13T13:38:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/freetype.cmake" : {
      "ObjectId" : "0154341ec770a7b4dca77cfd2fc7bb5dda780d60",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We use prebuilt binaries for windows\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "lib/jansson/CMakeLists.txt" : {
      "ObjectId" : "84c62fc5f24701d8b16c606c3e717c720a42c644",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################\n\n# NOTE: This file was changed for the FreeSpace Open version, the source code is unchanged\n\n###############################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Notes:\n\n#\n\n# Author: Paul Harris, June 2012\n\n# Additions: Joakim Soderberg, Febuary 2013\n\n#\n\n# Supports: building static/shared, release/debug/etc, can also build html docs\n\n# and some of the tests.\n\n# Note that its designed for out-of-tree builds, so it will not pollute your\n\n# source tree.\n\n#\n\n# TODO 1: Finish implementing tests. api tests are working, but the valgrind\n\n# variants are not flagging problems.\n\n#\n\n# TODO 2: There is a check_exports script that would try and incorporate.\n\n#\n\n# TODO 3: Consolidate version numbers, currently the version number is written\n\n# into: * cmake (here) * autotools (the configure) * source code header files.\n\n# Should not be written directly into header files, autotools/cmake can do\n\n# that job.\n\n#\n\n# Brief intro on how to use cmake:\n\n# > mkdir build (somewhere - we do out-of-tree builds)\n\n# > use cmake, ccmake, or cmake-gui to configure the project. for linux, you\n\n# can only choose one variant: release,debug,etc... and static or shared.\n\n# >> example:\n\n# >> cd build\n\n# >> ccmake -i ../path_to_jansson_dir\n\n# >>  inside, configure your options. press C until there are no lines\n\n#     with * next to them.\n\n# >>  note, I like to configure the 'install' path to ../install, so I get\n\n#     self-contained clean installs I can point other projects to.\n\n# >>  press G to 'generate' the project files.\n\n# >> make (to build the project)\n\n# >> make install\n\n# >> make test (to run the tests, if you enabled them)\n\n#\n\n# Brief description on how it works:\n\n# There is a small heirachy of CMakeLists.txt files which define how the\n\n# project is built.\n\n# Header file detection etc is done, and the results are written into config.h\n\n# and jansson_config.h, which are generated from the corresponding\n\n# config.h.cmake and jansson_config.h.cmake template files.\n\n# The generated header files end up in the build directory - not in\n\n# the source directory.\n\n# The rest is down to the usual make process.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Options\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# This is how I thought it should go\n\n# set (JANSSON_VERSION \"2.3.1\")\n\n# set (JANSSON_SOVERSION 2)\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This is what is required to match the same numbers as automake's\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# for CheckFunctionKeywords\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check for the int-type includes\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Check our 64 bit integer sizes\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Check our 32 bit integer sizes\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check for ssize_t and SSIZE_T existance.\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Check for all the variants of strtoll\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Figure out what variant we should use\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# fallback to strtol (32 bit)\n\n# this will set all the required variables\n",
        "Line" : 203,
        "CharPositionInLine" : 7
      },
      "13" : {
        "Text" : "# if we haven't defined JSON_INT_T, then we have a 64 bit conversion function.\n\n# detect what to use for the 64 bit type.\n\n# Note: I will prefer long long if I can get it, as that is what the automake system aimed for.\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Apparently, Borland BCC and MSVC wants I64d,\n\n# Borland BCC could also accept LD\n\n# and gcc wants ldd,\n\n# I am not sure what cygwin will want, so I will assume I64d\n",
        "Line" : 224,
        "CharPositionInLine" : 7
      },
      "15" : {
        "Text" : "# matches both msvc and cygwin\n",
        "Line" : 229,
        "CharPositionInLine" : 18
      },
      "16" : {
        "Text" : "# If locale.h and localeconv() are available, define to 1, otherwise to 0.\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# check if we have setlocale\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Check what the inline keyword is.\n\n# Note that the original JSON_INLINE was always set to just 'inline', so this goes further.\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# no inline on this platform\n",
        "Line" : 263,
        "CharPositionInLine" : 7
      },
      "20" : {
        "Text" : "# configure the public config file\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Copy the jansson.h file to the public include folder\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# configure the private config file\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# and tell the source code to include it\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add the lib sources.\n",
        "Line" : 287,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "lib/jansson/cmake/CheckFunctionKeywords.cmake" : {
      "ObjectId" : "44601fd4e9fa15f0d9a26481d84ebf0662316131",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#      break()\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/jansson/cmake/jansson_config.h.cmake" : {
      "ObjectId" : "43e36c573742a0bcceedce475b890550fe8eb166",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n * Copyright (c) 2010-2014 Petri Lehtinen <petri@digip.org>\n *\n * Jansson is free software; you can redistribute it and/or modify\n * it under the terms of the MIT license. See LICENSE for details.\n *\n *\n * This file specifies a part of the site-specific configuration for\n * Jansson, namely those things that affect the public API in\n * jansson.h.\n *\n * The CMake system will generate the jansson_config.h file and\n * copy it to the build and install directories.\n */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Define this so that we can disable scattered automake configuration in source files */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Note: when using cmake, JSON_INTEGER_IS_LONG_LONG is not defined nor used,\n * as we will also check for __int64 etc types.\n * (the definition was used in the automake system) */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Bring in the cmake-detected defines */",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Include our standard type header for the integer typedef */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* If your compiler supports the inline keyword in C, JSON_INLINE is\n   defined to `inline', otherwise empty. In C++, the inline is always\n   supported. */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* If locale.h and localeconv() are available, define to 1, otherwise to 0. */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "lib/jansson/cmake/jansson_private_config.h.cmake" : {
      "ObjectId" : "09bbe630740cf31eba4302342e2a7ae590047493",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "lib/jansson/src/Makefile.am" : {
      "ObjectId" : "b5db968eef91c2604c4f3741c82e9d6d2c8c5599",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "lib/libRocket.cmake" : {
      "ObjectId" : "8d1716dc61f09a37759cb35e291b885b39a2996d",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===================================\n\n# Build script for libRocket =======\n\n#===================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Search in the 'cmake' directory for additional CMake modules.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#===================================\n\n# Environment tests ================\n\n#===================================\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#===================================\n\n# Plaform specific global hacks ====\n\n#===================================\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disables naked builtins from AssertMacros.h which\n\n# This prevents naming collisions such as those from the check()\n\n# function macro with LuaType::check\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#===================================\n\n# Find dependencies ================\n\n#===================================\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# FreeType\n\n#find_package(Freetype REQUIRED)7\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#===================================\n\n# Setup paths ======================\n\n#===================================\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include list of source files\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#===================================\n\n# Build libraries ==================\n\n#===================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build Lua bindings\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#===================================\n\n# Link libraries ===================\n\n#===================================\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "lib/libjpeg/CMakeLists.txt" : {
      "ObjectId" : "1301840befc6c1da3144075b094afdbd9cce6429",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "lib/libpng/CMakeLists.txt" : {
      "ObjectId" : "2a445353df412741a026f6c746381098eb64c718",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This will only be defined if we are building a shared library\n",
        "Line" : 39,
        "CharPositionInLine" : 31
      },
      "1" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "lib/libsdl/CMakeLists.txt" : {
      "ObjectId" : "4d336c01400bf28f90576479fc93bd807b62c3ef",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 64-bit\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# 32-bit\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#MINGW\n",
        "Line" : 20,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# CMake can't check for SDL2 so we'll just use PkgConfig\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "lib/lua/CMakeLists.txt" : {
      "ObjectId" : "fa74bbd85bd7c7f6be86109a73e44b04a246eda8",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloading\n",
        "Line" : 43,
        "CharPositionInLine" : 3
      },
      "1" : {
        "Text" : "# Full path or URL of source\n",
        "Line" : 44,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "# MD5 checksum of file at URL\n",
        "Line" : 45,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : "# Configuring\n",
        "Line" : 46,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Building\n",
        "Line" : 48,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Installing\n",
        "Line" : 51,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# The standard FindLua51 doesn't work on Fedora, use pkg-config instead\n",
        "Line" : 97,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# This will only be defined if we are building a shared library\n",
        "Line" : 186,
        "CharPositionInLine" : 35
      },
      "8" : {
        "Text" : "# Set the correct defines for the current platform\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "lib/md5/CMakeLists.txt" : {
      "ObjectId" : "fa2db8f7a67c75f7484755f4d4e0817a3c19e2cb",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/mongoose/CMakeLists.txt" : {
      "ObjectId" : "2ac5a8267c4faf75fe650147049ecf67da66f371",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/mongoose/Makefile.am" : {
      "ObjectId" : "2c620c577974a5215910a8ee07c2fbea46781a51",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# D_ variants are defaults and should always be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n##\n\n## Begin Mongoose library\n\n##\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## End Mongoose library\n\n##\n\n###############################################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "lib/opengl/CMakeLists.txt" : {
      "ObjectId" : "99fe8dec58b4da6ace6b222e961c22ea3c4c1d3e",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/opengl/gl/CMakeLists.txt" : {
      "ObjectId" : "c2764ef941729ede1d0bf8f53dee37f3bfa66096",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Windows we need WGL which requires the OpenGL libraries\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "lib/prebuilt.cmake" : {
      "ObjectId" : "ce6f744a0ea7847ad8bb2a5529d1637ec9f2e37e",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Libraries already downloaded and up-to-date\r\n",
        "Line" : 16,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Use Linux binaries...\r\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Remove previous files\r\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Make sure the directory exists\r\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Extract the downloaded file\r\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# We are done now. Set the cache variables and return the result\r\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "lib/utfcpp/CMakeLists.txt" : {
      "ObjectId" : "64229686885dd07d5442acaaaab95f5651be6783",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/zlib/CMakeLists.txt" : {
      "ObjectId" : "c31135290ce6a1b2aeec7c2221d24fbc7e8e0aef",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This will only be defined if we are building a shared library\n",
        "Line" : 39,
        "CharPositionInLine" : 26
      },
      "1" : {
        "Text" : "# Disable warnings if building from source\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "qtfred/CMakeLists.txt" : {
      "ObjectId" : "a4df43bff74eb911835d7d0058a0ccc62b103dc6",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# largely inspired from http://doc.qt.io/qt-5/cmake-manual.html\n\n# Find includes in corresponding build directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the QtWidgets library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When building qtFRED we need to install the runtime libraries since the Qt DLLs need them\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Undefine emit since it conflicts with our code\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Define the deprecated attribute so that usage of such functions causes a warning\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We handle the main method ourself since the prebuilt version conflicts with our setup\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Windows requires that the qwindows DLL is copied as well\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "qtfred/source_groups.cmake" : {
      "ObjectId" : "8aff12f6d6eeb6122f6de904df2178afd0bb5fde",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "68c0abf224c4aa5809897f55b6ac1fbd9beae52e",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/gtest/CMakeLists.txt" : {
      "ObjectId" : "4c0d648747042d7a6ce630360c56c50ced0533a1",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Visibility\n",
        "Line" : 51,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# These commands only run if this is the main project\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 86,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Create the CMake package file descriptors.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 263,
        "CharPositionInLine" : 46
      },
      "25" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "test/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "98674367c0cbff3d289f9284e65e10ef142ac6c5",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Prevent D9025 warning for targets that have exception handling\n\n# turned off (/EHs-c- flag). Where required, exceptions are explicitly\n\n# re-enabled using the cxx_exception_flags variable.\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 71,
        "CharPositionInLine" : 33
      },
      "11" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 81,
        "CharPositionInLine" : 33
      },
      "15" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 90,
        "CharPositionInLine" : 39
      },
      "17" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Generate debug library name with a postfix.\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Set the output directory for build artifacts\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# make PDBs match library name\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 222,
        "CharPositionInLine" : 48
      },
      "34" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 289,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 303,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 317,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# install_project(targets...)\n\n#\n\n# Installs the specified targets and configures the associated pkgconfig files.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Install the project targets.\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Install PDBs\n",
        "Line" : 349,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Configure and install pkgconfig files.\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 48
    },
    "test/src/CMakeLists.txt" : {
      "ObjectId" : "0df56e1b013ef65eceaa2359aa0a5c9023b66f52",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/src/source_groups.cmake" : {
      "ObjectId" : "fe8bec35ecd02c932591f1c74204278d851ec331",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "73cb90f58749e1fabe8beda9c92e34682603231d",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/embedfile/CMakeLists.txt" : {
      "ObjectId" : "a8b866d159880fcf909b1de33e60d8234aba4689",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "wxfred2/CMakeLists.txt" : {
      "ObjectId" : "7dbf73a0a68fbce404f3b695dc1df6adb859804c",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason this is needed...\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add install script to copy the executable to the FreeSpace path if possible and wanted\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "wxfred2/source_groups.cmake" : {
      "ObjectId" : "2af2d4d75686a4b556c3ccbde8a7d64a83009bbf",
      "LastModified" : "2019-03-28T11:31:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# top-level files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Base files\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Editors files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Help files\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Misc files\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the source groups\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append all files to the file_root\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "CMAKE" : 67,
    "CMAKESOURCE" : 2,
    "AUTOMAKE" : 2
  },
  "ElapsedTime" : 5091
}