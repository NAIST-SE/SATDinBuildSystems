{
  "Repository" : "4334008",
  "Revision" : "HEAD",
  "ObjectId" : "f6f818d36a64f81a75f7826871926f4ee950e03a",
  "CommitTime" : "2019-03-20T10:40:17Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "30b437387fb156768acb6e4f4cae6f559f6a3e6e",
      "LastModified" : "2019-02-07T22:34:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# rpath specific patches\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# require > 2.8.8 for FILE DOWNLOAD fixes\n\n# allow < 2.8.12 for debian backports\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add build type for profiling\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set default build-type to release to enable performance improvements\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Version info from Git\n\n# ----------------------------------------------------------------------------\n\n# Embed the information about CRPropa version into the binaries for easier\n\n# debugging with a reproducibility in mind\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Dependencies\n\n# ----------------------------------------------------------------------------\n\n# googletest (provided, see https://code.google.com/p/googletest/wiki/FAQ\n\n#     Why is it not recommended use a pre-compiled copy of Google Test?)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# generate coverage data\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# clean external libs\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Generate html output\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# kiss (provided)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# HepID (provided)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SOPHIA (provided)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DINT (provided)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# EleCa (provided)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# GlacticMagneticLenses\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Eigen redux (provided)\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# healpix redux (provided)\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# OpenMP (optional for shared memory multiprocessing)\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Additional configuration OMP_SCHEDULE\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Google Performance Tools (optional as possible performance tweak for OpenMP)\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# FFTW3F (optional for turbulent magnetic fields)\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Quimby (optional for SPH magnetic fields)\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# SAGA (optinal for AMR grids)\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# muparser (optional for generic source spectra)\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# zlib / zstream-cpp (optional for compressed output files)\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# HDF5 (optional for HDF5 output files)\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# parallel version requires MPI which is not supported in CRPropa\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Fix Apple RPATH\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Fix for linker error on mac, Issue: #147\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Download data files (interaction data, masses, decay data ...)\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Library and Binary\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Python\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# use SWIG's builtin (maybe should be abandoned if everything will be tested and working with -builtin)\n",
        "Line" : 407,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# tries to import numpy\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Install\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ------------------------------------------------------------------\n\n# Documentation\n\n# ------------------------------------------------------------------\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Testing\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# python tests\n",
        "Line" : 547,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 39
    },
    "cmake/FindCFITSIO.cmake" : {
      "ObjectId" : "fd9441b77f3d5efe8581c4e9080f13edb572d374",
      "LastModified" : "2014-11-06T11:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find CFTISIO\n\n# CFITSIO_FOUND = true if cfitsio is found\n\n# CFITSIO_INCLUDE_DIR = fitsio.h\n\n# CFITSIO_LIBRARY = libcfitsio.a .so\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindFFTW3F.cmake" : {
      "ObjectId" : "bd2debe7854f3410e20580597280f0946bdb9a7c",
      "LastModified" : "2014-11-06T11:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find FFTW3 with single precision. Sets\n\n# FFTW3F_FOUND = true if fftw3f is found\n\n# FFTW3F_INCLUDE_DIR = fftw3.h\n\n# FFTW3F_LIBRARY = libfftw3f.a .so\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindGooglePerfTools.cmake" : {
      "ObjectId" : "3d4ca76c5d8d4c1f52d955fe04de642e792856a2",
      "LastModified" : "2014-11-06T11:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Google perftools includes and libraries\n\n# This module defines\n\n#  GOOGLE_PERFTOOLS_INCLUDE_DIR, where to find heap-profiler.h, etc.\n\n#  GOOGLE_PERFTOOLS_FOUND, If false, do not try to use Google perftools.\n\n# also defined for general use are\n\n#  TCMALLOC_LIBRARIES, where to find the tcmalloc library.\n\n#  STACKTRACE_LIBRARIES, where to find the stacktrace library.\n\n#  PROFILER_LIBRARIES, where to find the profiler library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindQuimby.cmake" : {
      "ObjectId" : "d29201a56da804918a2f89f8757afbdb57a44504",
      "LastModified" : "2014-11-06T11:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QUIMBY_INCLUDE_DIR = path to Quimby directory\n\n# QUIMBY_LIBRARY = libQuimby.a\n\n# QUIMBY_FOUND = true if Quimby is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSAGA.cmake" : {
      "ObjectId" : "7886e2dae8a16166e496cd8848fad5ce1efeb343",
      "LastModified" : "2014-11-06T11:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SAGA_INCLUDE_DIR = path to SAGA directory\n\n# SAGA_LIBRARY libsaga.a\n\n# SAGA_FOUND = true if SAGA is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSQLite3.cmake" : {
      "ObjectId" : "e4bf1759e27fd086ad66e435551c9c94f6a0ae1f",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SQLITE3_INCLUDE_DIR = path to SAGA directory\n\n# SQLITE3_LIBRARY = libsaga.so\n\n# SQLITE3_FOUND = true if SAGA is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindmuParser.cmake" : {
      "ObjectId" : "628ab90ab657ab36f787265ce4c64bfd8c2cf370",
      "LastModified" : "2014-11-06T11:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find muParser\n\n# Once done this will define\n\n#  MUPARSER_FOUND - System has LibXml2\n\n#  MUPARSER_INCLUDE_DIRS - The LibXml2 include directories\n\n#  MUPARSER_LIBRARIES - The libraries needed to use LibXml2\n\n#  MUPARSER_DEFINITIONS - Compiler switches required for using LibXml2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "c8d27f2e8ce494c96404086ce58982239916a44c",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "libs/EleCa/CMakeLists.txt" : {
      "ObjectId" : "db3e4ae68d5bb17792d706cb18927430beecf8b5",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/HepPID/CMakeLists.txt" : {
      "ObjectId" : "4017027f72db6dec5f969c89296bbcd4ba342e21",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/dint/CMakeLists.txt" : {
      "ObjectId" : "fa1b9bb78c6ab47d6ffd14e3ef1653eb3006f374",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/gtest/CMakeLists.txt" : {
      "ObjectId" : "2669f53ff9be424fdc955482539b6888daaa226a",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 33,
        "CharPositionInLine" : 30
      },
      "5" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n\n#\n\n# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "libs/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "9f002c4a1ae4f968f44f93fcac88f9c48f25bfa2",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#fix_default_compiler_settings_()\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 96,
        "CharPositionInLine" : 32
      },
      "15" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n\n#find_package(PythonInterp)\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 29
    },
    "libs/healpix_base/CMakeLists.txt" : {
      "ObjectId" : "3aa2417cc60666eed6d18afed03e8b85f9abee35",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/kiss/CMakeLists.txt" : {
      "ObjectId" : "2752f6bb09f9e2ab00469dab7c34b813795da85c",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# testing\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libs/sophia/CMakeLists.txt" : {
      "ObjectId" : "150c0757901d405b12ddf910a2a1d814c476b2e3",
      "LastModified" : "2015-08-04T18:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugin-template/CMakeLists.txt" : {
      "ObjectId" : "fc0e0ec74014aa88ed691e058146369f249eaeac",
      "LastModified" : "2018-05-18T13:58:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Change name of the library to something meaningful!\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get information on crpropa\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# swig plugin\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build interface and source in one library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Uncomment these lines for installation of the plugin\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PLUGINNAME}.py\" DESTINATION \"${PYTHON_SITE_PACKAGES}/${PLUGINNAME}\")\n\n# install(TARGETS ${PLUGINNAME} LIBRARY DESTINATION \"${PYTHON_SITE_PACKAGES}/${PLUGINNAME}\")\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "python/Python.cmake" : {
      "ObjectId" : "99227d41ca51a725898793f1ffde28ea9dd107f0",
      "LastModified" : "2015-10-21T15:05:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SETUP PYTHON\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get default python inerpreter\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find python include path\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# apple changed linking to Python in OS X 10.9 (Mavericks)\n\n# until 10.8: use Python.framework as part of the SDK (-framework Python)\n\n# since 10.9: link to Python like any other UNIX\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# extract (minor) version number from SDK name (major version always 10 for OS X)\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# MESSAGE(\"Found OS X SDK minor version: ${OSX_SDK_MINOR_VERSION}\")\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Search for the python framework on Apple.\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "#find the site package destinaton \n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "CMAKE" : 19
  },
  "ElapsedTime" : 1915
}