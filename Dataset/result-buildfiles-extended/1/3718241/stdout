{
  "Repository" : "3718241",
  "Revision" : "HEAD",
  "ObjectId" : "b0aacb6cafebd2b3e43b6636f1325e0ae10d7fba",
  "CommitTime" : "2018-10-03T18:24:56Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "878a2b3ddf69873fd3834c24b9c287277a80ace0",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Build and Install the EbbRT Native/Hosted Libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n# \tPREFIX=<path> \t\t\t\t\t# linux install directory [=/usr/local] \n\n# \tEBBRT_SYSROOT=<path>\t\t# native install director [=/opt/ebbrt] \n\n# \tBUILD_ROOT=<path>\t\t\t\t# build directory [=$PWD]\n\n#\n\n# \tCLEANUP=1     \t\t\t\t\t# remove build state when finished\n\n# \tDEBUG=1 \t\t\t\t\t\t\t\t# build without optimisation\n\n# \tVERBOSE=1   \t\t\t\t\t\t# verbose build\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Local config (optional)\n",
        "Line" : 12,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# Install Linux libraries to /usr/local\n",
        "Line" : 20,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "# Install Native libraries to /opt/ebbrt\n",
        "Line" : 21,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "# Assume this Makefile is located in the root directory of EbbRT repo \n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Assume this file is located in the root directory of EbbRT repo \n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "apps/helloworld-pool/CMakeLists.txt" : {
      "ObjectId" : "bb816cb32fd22906e41011f0b8383fc2399c1d58",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Baremetal  ========================================================\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hosted  ===========================================================\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO(jmcadden): remove source-dir requirement\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "apps/helloworld-pool/Makefile" : {
      "ObjectId" : "2874a8c7eaff5b24fd0f67dfbd36a7a5e2712fdf",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/helloworld-pool/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "apps/helloworld-pool/cmake/FindTBB.cmake" : {
      "ObjectId" : "b1ec1751d9b1a7aeff9696246232fc31a11ce15b",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "apps/helloworld/CMakeLists.txt" : {
      "ObjectId" : "bb816cb32fd22906e41011f0b8383fc2399c1d58",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Baremetal  ========================================================\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hosted  ===========================================================\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO(jmcadden): remove source-dir requirement\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "apps/helloworld/Makefile" : {
      "ObjectId" : "2874a8c7eaff5b24fd0f67dfbd36a7a5e2712fdf",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/helloworld/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "apps/helloworld/cmake/FindTBB.cmake" : {
      "ObjectId" : "b1ec1751d9b1a7aeff9696246232fc31a11ce15b",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "apps/iperf/CMakeLists.txt" : {
      "ObjectId" : "b13973d76c5556c4d45cc796bd7cbaead59402b0",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Baremetal  ========================================================\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hosted  ===========================================================\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/iperf/Makefile" : {
      "ObjectId" : "45efbd99932d361fec55f17ed44ae0ad6a26fb9d",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/iperf/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "apps/iperf/cmake/FindTBB.cmake" : {
      "ObjectId" : "aa72dfad8b44aa1f9faefde2e65df4b76424c66f",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "apps/msgtst/CMakeLists.txt" : {
      "ObjectId" : "19c58853ecd6584dda6df07a86516ea71b7ff5ba",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Baremetal  ========================================================\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hosted  ===========================================================\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/msgtst/Makefile" : {
      "ObjectId" : "2874a8c7eaff5b24fd0f67dfbd36a7a5e2712fdf",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/msgtst/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "apps/msgtst/cmake/FindTBB.cmake" : {
      "ObjectId" : "aa72dfad8b44aa1f9faefde2e65df4b76424c66f",
      "LastModified" : "2017-07-10T18:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "apps/zookeeper_app/CMakeLists.txt" : {
      "ObjectId" : "bf32c76a3d9008bb07af7a3ff8c76b57d82ff07c",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/zookeeper_app/Makefile" : {
      "ObjectId" : "5164563ad73899fd3875862a75e896f18034c5f2",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#all: Debug Release\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/zookeeper_app/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "apps/zookeeper_app/cmake/FindTBB.cmake" : {
      "ObjectId" : "aa72dfad8b44aa1f9faefde2e65df4b76424c66f",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "contrib/appgen/template/default/CMakeLists.txt" : {
      "ObjectId" : "001bad36f46fdc3fa43fb6492dec8c43cbf5200b",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Baremetal  ========================================================\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hosted  ===========================================================\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/appgen/template/default/Makefile" : {
      "ObjectId" : "45efbd99932d361fec55f17ed44ae0ad6a26fb9d",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/appgen/template/default/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "contrib/appgen/template/default/cmake/FindTBB.cmake" : {
      "ObjectId" : "b1ec1751d9b1a7aeff9696246232fc31a11ce15b",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "contrib/appgen/template/native/CMakeLists.txt" : {
      "ObjectId" : "95ee4e81e6189d33267727664081e65d6b8128ee",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hosted  ===========================================================\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/appgen/template/native/Makefile" : {
      "ObjectId" : "69cf831fddf8611b6fb1b65dbfdff8b675d0be79",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ENVIRONMENT VARIABLES\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libs/CMakeLists.txt" : {
      "ObjectId" : "026938efc227064a98f0812a6badd90a0d26bffa",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EbbRT Library to build by default\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libs/cmdline/CMakeLists.txt" : {
      "ObjectId" : "fb941c93bba8bf450af8d528e76811143f71100a",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Platform-specific package dependencies\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Offer the user the choice of overriding the installation directories\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libs/cmdline/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "libs/filesystem/CMakeLists.txt" : {
      "ObjectId" : "2f84d8faa919aa15aa17d215bf9f55acac5c0267",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Platform-specific package dependencies\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Offer the user the choice of overriding the installation directories\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libs/filesystem/cmake/FindCapnp.cmake" : {
      "ObjectId" : "b9bafb4babf8ea27ce98d57a52b807a58451b928",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "libs/socket/CMakeLists.txt" : {
      "ObjectId" : "1710b9ca65b289318a91e5ac0d67bfbc4c691d5d",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-unused-variable -Wno-unused-function\")\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Platform-specific package \n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library targets\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Installation directories \n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install targets\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Package config file\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "libs/zookeeper/CMakeLists.txt" : {
      "ObjectId" : "52daeda6e642c9f5cfbc126917aca312dccc064c",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Platform-specific package dependencies\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library targets\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Installation directories \n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install targets\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Package config file\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "f4ef3453c58264f6b80e3099a9695841a44cb14f",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Platform Setup\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include platform-specific configuration\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EbbRT Sources & Headers\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CapnProto \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# EbbRT Library \n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only create cmake package for hosted runtime\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/cmake/Modules/FindCapnProto.cmake" : {
      "ObjectId" : "fabcb2be41bc4846ee1564e76a8c39da58505171",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use pkg-config to get path hints and definitions\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/cmake/Modules/FindCapnp.cmake" : {
      "ObjectId" : "bacd549a6001b898ffda2ee8c395bb6212937ded",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use pkg-config to get path hints and definitions\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/cmake/Modules/FindTBB.cmake" : {
      "ObjectId" : "b1ec1751d9b1a7aeff9696246232fc31a11ce15b",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n# Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n# Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n# e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n# TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n# in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n# which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n# which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n# that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n# find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n# containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n# (hence no else), instead I test if the user really specified\n\n# the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n# ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n# variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n# tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n# variables, which now point to the directories of the lib files.\n\n# It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n# argument instead of the implicit PATHS as it isn't hard-coded\n\n# but computed by system introspection. Searching the LIBRARY_PATH\n\n# and LD_LIBRARY_PATH environment variables is now even more important\n\n# that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n# the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n# Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "src/cmake/Platform/EbbRT.cmake" : {
      "ObjectId" : "72a05131e2ad2ace1cda60758218ee19ceaa3296",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# lib\n\n# .a\n",
        "Line" : 2,
        "CharPositionInLine" : 43
      },
      "CommentCount" : 1
    },
    "src/cmake/ebbrt.cmake" : {
      "ObjectId" : "62f48968ec6afc49395851eed9fdb22f45bd7e0c",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# where is the target environment\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for programs in the build host directories\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for libraries and headers in the target directories\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/hosted/config.cmake" : {
      "ObjectId" : "6225f5fc0c9be4401a32a8be262b8cb55c8f3067",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EbbRT hosted platform-specific configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/native/config.cmake" : {
      "ObjectId" : "f38319790e7d30bc3296b32bc1fcfeadbdd15570",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EbbRT native platform-specific configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build Settings\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is a bit of a hack to get the host capnp import path, rather than\n\n# the sysroot ones which will be found by default\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "toolchain/Makefile" : {
      "ObjectId" : "f6615d8e1dd7e9ab888ce821b21cc73b1de5be51",
      "LastModified" : "2018-10-03T18:24:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#EBBRT_BUILD_DEFS ?= -DCMAKE_C_COMPILER_FORCED=1 \\\n#\t\t\t\t\t\t\t\t\t\t-DCMAKE_CXX_COMPILER_FORCED=1\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Autoconf ###\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Automake ###\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Capnp ###\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### deps ###\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### Binutils ###\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### GCC ###\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### Newlib ###\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### ACPICA ###\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "### BOOST ###\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### CAPNP ###\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### TBB ###\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### EbbRT ###\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    }
  },
  "FileTypes" : {
    "CMAKE" : 34,
    "MAKEFILE" : 9
  },
  "ElapsedTime" : 1212
}