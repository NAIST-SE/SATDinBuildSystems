{
  "Repository" : "10041",
  "Revision" : "HEAD",
  "ObjectId" : "1594d15922e39bfbec749815349c812ca16d8a53",
  "CommitTime" : "2019-04-13T15:17:47Z",
  "Files" : {
    "src/Makefile" : {
      "ObjectId" : "8b9b16e470ca05d3a598692154b9b77be87088b6",
      "LastModified" : "2018-11-19T10:18:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Stockfish, a UCI chess playing engine derived from Glaurung 2.1\n\n# Copyright (C) 2004-2008 Tord Romstad (Glaurung author)\n\n# Copyright (C) 2008-2015 Marco Costalba, Joona Kiiski, Tord Romstad\n\n# Copyright (C) 2015-2019 Marco Costalba, Joona Kiiski, Gary Linscott, Tord Romstad\n\n#\n\n# Stockfish is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# Stockfish is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### ==========================================================================\n\n### Section 1. General Configuration\n\n### ==========================================================================\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Executable name\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Installation dir definitions\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Built-in benchmark for pgo-builds\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### Object files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### Establish the operating system name\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### ==========================================================================\n\n### Section 2. High-level Configuration\n\n### ==========================================================================\n\n#\n\n# flag                --- Comp switch --- Description\n\n# ----------------------------------------------------------------------------\n\n#\n\n# debug = yes/no      --- -DNDEBUG         --- Enable/Disable debug mode\n\n# sanitize = undefined/thread/no (-fsanitize )\n\n#                     --- ( undefined )    --- enable undefined behavior checks\n\n#                     --- ( thread    )    --- enable threading error  checks\n\n# optimize = yes/no   --- (-O3/-fast etc.) --- Enable/Disable optimizations\n\n# arch = (name)       --- (-arch)          --- Target architecture\n\n# bits = 64/32        --- -DIS_64BIT       --- 64-/32-bit operating system\n\n# prefetch = yes/no   --- -DUSE_PREFETCH   --- Use prefetch asm-instruction\n\n# popcnt = yes/no     --- -DUSE_POPCNT     --- Use popcnt asm-instruction\n\n# sse = yes/no        --- -msse            --- Use Intel Streaming SIMD Extensions\n\n# pext = yes/no       --- -DUSE_PEXT       --- Use pext x86_64 asm-instruction\n\n#\n\n# Note that Makefile is space sensitive, so when adding new architectures\n\n# or modifying existing flags, you have to make sure there are no extra spaces\n\n# at the end of the line for flag values.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### 2.1. General and architecture defaults\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "### 2.2 Architecture specific\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### ==========================================================================\n\n### Section 3. Low-level configuration\n\n### ==========================================================================\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### 3.1 Selecting compiler (default = gcc)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### Travis CI script uses COMPILER to overwrite CXX\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Allow overwriting CXX from command line\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "### On mingw use Windows threads, otherwise POSIX\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# On Android Bionic's C library comes with its own pthread implementation bundled in\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Haiku has pthreads in its libroot, so only link it in on other platforms\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "### 3.2.1 Debugging\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### 3.2.2 Debugging with undefined behavior sanitizers\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "### 3.3 Optimization\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "### 3.4 Bits\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### 3.5 prefetch\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "### 3.6 popcnt\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "### 3.7 pext\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "### 3.8 Link Time Optimization, it works since gcc 4.5 but not on mingw under Windows.\n\n### This is a mix of compile and link time options because the lto link phase\n\n### needs access to the optimization flags.\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "### 3.9 Android 5 can only run position independent executables. Note that this\n\n### breaks Android 4.0 and earlier.\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "### ==========================================================================\n\n### Section 4. Public targets\n\n### ==========================================================================\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#clean all\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# clean binaries and objects\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# clean auxiliary profiling files\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "### ==========================================================================\n\n### Section 5. Private targets\n\n### ==========================================================================\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1182
}