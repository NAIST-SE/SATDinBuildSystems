{
  "Repository" : "7905",
  "Revision" : "HEAD",
  "ObjectId" : "e244ba4775e81a43e7847266638b218869c63627",
  "CommitTime" : "2019-03-31T08:29:42Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "095ab2914c7506dcdf71e48f7cdcf8ac70934063",
      "LastModified" : "2014-11-05T13:25:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# functions map for reading backtraces\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add executable icon for win32 platforms\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add client executable\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# installation\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add \"make run\"\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/client/CMakeLists.txt" : {
      "ObjectId" : "d6fb4f6bc85aef90a51abdc4e3fd4ddcf5d67336",
      "LastModified" : "2015-02-13T18:07:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_CURRENT_LIST_DIR cmake 2.6 compatibility\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# client options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# client\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# core\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# lua\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# net\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ui\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# util\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "src/framework/CMakeLists.txt" : {
      "ObjectId" : "f5f64e0e721d4055cc53e575f4a826f59739fbe4",
      "LastModified" : "2017-11-04T13:05:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# framework flags\n\n# FRAMEWORK_SOUND\n\n# FRAMEWORK_GRAPHICS\n\n# FRAMEWORK_NET\n\n# FRAMEWORK_XML\n\n# FRAMEWORK_SQL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_CURRENT_LIST_DIR cmake 2.6 compatibility\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add framework cmake modules\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# stdext\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# core\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# luaengine\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# otml\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# crash handler\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# some build options\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default build type\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# gcc compile flags\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# process options\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# find boost\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# fix boost thread linkage\n",
        "Line" : 201,
        "CharPositionInLine" : 79
      },
      "14" : {
        "Text" : "#find lua\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NDEBUG disable asserts\n",
        "Line" : 246,
        "CharPositionInLine" : 69
      },
      "16" : {
        "Text" : "# strip all debug information\n",
        "Line" : 249,
        "CharPositionInLine" : 67
      },
      "17" : {
        "Text" : "# only link needed libraries\n",
        "Line" : 250,
        "CharPositionInLine" : 76
      },
      "18" : {
        "Text" : "#set(CMAKE_CXX_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS} -Wl,--large-address-aware\") # strip all debug information\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# enable thread safe code\n",
        "Line" : 275,
        "CharPositionInLine" : 73
      },
      "20" : {
        "Text" : "# rdynamic is needed by backtrace.h used in crash handler\n",
        "Line" : 279,
        "CharPositionInLine" : 88
      },
      "21" : {
        "Text" : "## TODO: CMake Documentation says that this is not the right\n\n# Thing for Mac OS X, but it works for now.\n",
        "Line" : 304,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# native dx9 support while its under development\n",
        "Line" : 327,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# ui\n",
        "Line" : 404,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# platform window\n",
        "Line" : 433,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# window input\n",
        "Line" : 441,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 26
    },
    "src/framework/cmake/FindCXX11.cmake" : {
      "ObjectId" : "1702e8dfbb865b58762cdb9d88b5102bfb2d7a49",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tested on Mac OS X 10.8.2 with XCode 4.6 Command Line Tools\n\n# Clang requires this to find the correct c++11 headers\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindDirectX.cmake" : {
      "ObjectId" : "15c2ef040a9272d290bf42f4c78a3110c89bbe20",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Find DirectX SDK\n\n# Define:\n\n# DirectX_FOUND\n\n# DirectX_INCLUDE_DIR\n\n# DirectX_LIBRARY\n\n# DirectX_ROOT_DIR\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The only platform it makes sense to check for DirectX SDK\n",
        "Line" : 18,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# Get path, convert backslashes as ${ENV_DXSDK_DIR}\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# construct search paths\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# redo search if prefix path changed\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# dlls are in DirectX_ROOT_DIR/Developer Runtime/x64|x86\n\n# lib files are in DirectX_ROOT_DIR/Lib/x64|x86\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# look for dxgi (needed by both 10 and 11)\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# look for d3dcompiler (needed by 11)\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# look for D3D11 components\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "src/framework/cmake/FindEGL.cmake" : {
      "ObjectId" : "83acc422dbf03151379a82a1a9ef4fbdb3d84074",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the EGL library\n\n#  EGL_FOUND - system has EGL\n\n#  EGL_INCLUDE_DIR - the EGL include directory\n\n#  EGL_LIBRARY - the EGL library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(USE_STATIC_LIBS)\n\n#    FIND_LIBRARY(EGL_LIBRARY NAMES ${_EGL_STATIC_LIBS} ${_EGL_SHARED_LIBS})\n\n#ELSE()\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/framework/cmake/FindGLEW.cmake" : {
      "ObjectId" : "0d20c732f197bcac88747f2ac3c7d8e9ae6e8fb8",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GLEW library\n\n#  GLEW_FOUND - system has GLEW\n\n#  GLEW_INCLUDE_DIR - the GLEW include directory\n\n#  GLEW_LIBRARY - the GLEW library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindGMP.cmake" : {
      "ObjectId" : "428b89213c858cbeea8bbc9012aaa15bb31d52f9",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GMP library\n\n#  GMP_FOUND - system has GMP\n\n#  GMP_INCLUDE_DIR - the GMP include directory\n\n#  GMP_LIBRARY - the GMP library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindICU.cmake" : {
      "ObjectId" : "d4c2ec80bd6a2251032ca9ed8dc4c4f59f253ad1",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the ICU library\n\n#  ICU_FOUND - system has ICU\n\n#  ICU_INCLUDE_DIR - the ICU include directory\n\n#  ICU_LIBRARY - the ICU library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindLua.cmake" : {
      "ObjectId" : "ef4084ebd5a6dad3a90cb134df6409bb133ec589",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the lua library\n\n#  LUA_FOUND - system has lua\n\n#  LUA_INCLUDE_DIR - the lua include directory\n\n#  LUA_LIBRARY - the lua library\n\n#  LUA_LIBRARIES - the lua library and it's dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindLuaJIT.cmake" : {
      "ObjectId" : "c65886cfd20572d243dc0a98bbb41ee70cc49d74",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the lua library\n\n#  LUAJIT_FOUND - system has lua\n\n#  LUAJIT_INCLUDE_DIR - the lua include directory\n\n#  LUAJIT_LIBRARY - the lua library\n\n#  LUAJIT_LIBRARIES - the lua library and it's dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindMySQL.cmake" : {
      "ObjectId" : "1b4f71fe21a656cc031cf9ec29f1fb2d16722f34",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the mysql library\n\n#  MYSQL_FOUND - system has mysql\n\n#  MYSQL_INCLUDE_DIR - the mysql include directory\n\n#  MYSQL_LIBRARY - the mysql library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindOgg.cmake" : {
      "ObjectId" : "8105e473014bc5b378638d2c61e9a95c711c0b58",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OGG library\n\n#  OGG_FOUND - system has OGG\n\n#  OGG_INCLUDE_DIR - the OGG include directory\n\n#  OGG_LIBRARY - the OGG library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindOpenAL.cmake" : {
      "ObjectId" : "a66f2573087d58c259e609bc9ede877fe547defa",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OPENAL library\n\n#  OPENAL_FOUND - system has OPENAL\n\n#  OPENAL_INCLUDE_DIR - the OPENAL include directory\n\n#  OPENAL_LIBRARY - the OPENAL library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindOpenGLES1.cmake" : {
      "ObjectId" : "be9853e3fd15ed7e8985b2ad5f02b18229c457ae",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OpenGLES2 library\n\n#  OPENGLES1_FOUND - system has OpenGL ES 1.0\n\n#  OPENGLES1_INCLUDE_DIR - the OpenGL ES 1.0 include directory\n\n#  OPENGLES1_LIBRARY - the OpenGL ES 1.0 library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(USE_STATIC_LIBS)\n\n#    FIND_LIBRARY(OPENGLES1_LIBRARY NAMES ${_OPENGLES1_STATIC_LIBS} ${_OPENGLES1_SHARED_LIBS})\n\n#ELSE()\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/framework/cmake/FindOpenGLES2.cmake" : {
      "ObjectId" : "a4480feec011e109ae174abea1c0f0bb5b5d6e11",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OpenGLES2 library\n\n#  OPENGLES2_FOUND - system has OpenGL ES 2.0\n\n#  OPENGLES2_INCLUDE_DIR - the OpenGL ES 2.0 include directory\n\n#  OPENGLES2_LIBRARY - the OpenGL ES 2.0 library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#IF(USE_STATIC_LIBS)\n\n#    FIND_LIBRARY(OPENGLES2_LIBRARY NAMES ${_OPENGLES2_STATIC_LIBS} ${_OPENGLES2_SHARED_LIBS})\n\n#ELSE()\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ENDIF()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/framework/cmake/FindOpenSSL.cmake" : {
      "ObjectId" : "8b600c496c354ac9016ec5c4b64b5fb61b0dcbcc",
      "LastModified" : "2017-11-04T11:03:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OpenSSL library\n\n#  OPENSSL_FOUND - system has OpenSSL\n\n#  OPENSSL_INCLUDE_DIR - the OpenSSL include directory\n\n#  OPENSSL_LIBRARY - the OpenSSL library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindPhysFS.cmake" : {
      "ObjectId" : "12ee3d4a32d18b8f50b70f1e7cac6de53d188f8a",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the PHYSFS library\n\n#  PHYSFS_FOUND - system has PHYSFS\n\n#  PHYSFS_INCLUDE_DIR - the PHYSFS include directory\n\n#  PHYSFS_LIBRARY - the PHYSFS library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindPkgMacros.cmake" : {
      "ObjectId" : "bd8e5730411ebbf668063fb72a7bd187d7a4503e",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\n\n# Provides some common functionality for the FindPackage modules\n\n##################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Begin processing of package\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 32,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clear cache variables if a certain variable changed\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test against internal check variable\n\n# HACK: Apparently, adding a variable to the cache cleans up the list\n\n# a bit. We need to also remove any empty strings from the list, but\n\n# at the same time ensure that we are actually dealing with a list.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try to get some hints from pkg-config, if available\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate debug names from given release names\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the parent dir from DIR to VAR\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do the final processing for the package find.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Slightly customised framework finder\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These could be arrays of paths, add each individually to the search paths\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "src/framework/cmake/FindVorbis.cmake" : {
      "ObjectId" : "bc2e16de8f816fa084b4db9f3f72299bf069085c",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the VORBIS library\n\n#  VORBIS_FOUND - system has VORBIS\n\n#  VORBIS_INCLUDE_DIR - the VORBIS include directory\n\n#  VORBIS_LIBRARY - the VORBIS library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindVorbisFile.cmake" : {
      "ObjectId" : "5e1da5b56b13e968cfc72fe6f4396ee7b90a7d44",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the VORBISFILE library\n\n#  VORBISFILE_FOUND - system has VORBISFILE\n\n#  VORBISFILE_INCLUDE_DIR - the VORBISFILE include directory\n\n#  VORBISFILE_LIBRARY - the VORBISFILE library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/FindZLIB.cmake" : {
      "ObjectId" : "b12f75efade34148daa3f092c1f5cc8f142aa1c9",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the ZLIB library\n\n#  ZLIB_FOUND - system has ZLIB\n\n#  ZLIB_INCLUDE_DIR - the ZLIB include directory\n\n#  ZLIB_LIBRARY - the ZLIB library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/framework/cmake/cotire.cmake" : {
      "ObjectId" : "7fbbb190e3ee0c6774dbeb9948a8125af86cb805",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we need the CMake variables CMAKE_SCRIPT_MODE_FILE and CMAKE_ARGV available since 2.8.5\n\n# we need APPEND_STRING option for set_property available since 2.8.6\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use CMake's predefined version variable for MSVC, if available\n",
        "Line" : 47,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 51,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# use CMake's predefined compiler version variable (available since CMake 2.8.8)\n",
        "Line" : 60,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# assume GCC like command line interface\n",
        "Line" : 64,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# option with separate argument\n",
        "Line" : 249,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "# remember option\n",
        "Line" : 253,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# option with joined argument\n",
        "Line" : 256,
        "CharPositionInLine" : 16
      },
      "10" : {
        "Text" : "# flush remembered option\n",
        "Line" : 260,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 265,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# add option from CMake target type variable\n",
        "Line" : 297,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# flags variable for module library uses different name SHARED_MODULE\n\n# (e.g., CMAKE_SHARED_MODULE_C_FLAGS)\n",
        "Line" : 300,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# add_definitions may have been used to add flags to the compiler command\n",
        "Line" : 309,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# add target compile options\n",
        "Line" : 316,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# platform specific flags\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# default include dirs\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# target include directories\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# mimic CMake SystemTools::MakeCindentifier behavior\n",
        "Line" : 400,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 425,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# target export define symbol\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 434,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# target compile definitions\n",
        "Line" : 443,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 452,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 467,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 669,
        "CharPositionInLine" : 12
      },
      "29" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 677,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 680,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# header is outside\n",
        "Line" : 694,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 705,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# check header file extension\n",
        "Line" : 715,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 728,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 733,
        "CharPositionInLine" : 12
      },
      "36" : {
        "Text" : "# GCC like output\n",
        "Line" : 742,
        "CharPositionInLine" : 12
      },
      "37" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 758,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 764,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 782,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# update stack\n",
        "Line" : 792,
        "CharPositionInLine" : 16
      },
      "41" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 808,
        "CharPositionInLine" : 16
      },
      "42" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 810,
        "CharPositionInLine" : 20
      },
      "43" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 817,
        "CharPositionInLine" : 20
      },
      "44" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 826,
        "CharPositionInLine" : 32
      },
      "45" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 838,
        "CharPositionInLine" : 20
      },
      "46" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 872,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 891,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1077,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# append to list\n",
        "Line" : 1086,
        "CharPositionInLine" : 12
      },
      "50" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1089,
        "CharPositionInLine" : 12
      },
      "51" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1093,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# append to list\n",
        "Line" : 1098,
        "CharPositionInLine" : 12
      },
      "53" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1104,
        "CharPositionInLine" : 12
      },
      "54" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n",
        "Line" : 1111,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# append to list\n",
        "Line" : 1115,
        "CharPositionInLine" : 12
      },
      "56" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1118,
        "CharPositionInLine" : 12
      },
      "57" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n",
        "Line" : 1133,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# append to list\n",
        "Line" : 1143,
        "CharPositionInLine" : 12
      },
      "59" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1147,
        "CharPositionInLine" : 12
      },
      "60" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n",
        "Line" : 1151,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# append to list\n",
        "Line" : 1158,
        "CharPositionInLine" : 12
      },
      "62" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1161,
        "CharPositionInLine" : 12
      },
      "63" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n",
        "Line" : 1175,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "# append to list\n",
        "Line" : 1180,
        "CharPositionInLine" : 12
      },
      "65" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1183,
        "CharPositionInLine" : 12
      },
      "66" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n",
        "Line" : 1187,
        "CharPositionInLine" : 8
      },
      "67" : {
        "Text" : "# append to list\n",
        "Line" : 1191,
        "CharPositionInLine" : 12
      },
      "68" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1194,
        "CharPositionInLine" : 12
      },
      "69" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n",
        "Line" : 1198,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# append to list\n",
        "Line" : 1202,
        "CharPositionInLine" : 12
      },
      "71" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1205,
        "CharPositionInLine" : 12
      },
      "72" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1239,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1250,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# GCC PCH support requires GCC >= 3.4\n",
        "Line" : 1254,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "# Clang has PCH support\n",
        "Line" : 1265,
        "CharPositionInLine" : 8
      },
      "76" : {
        "Text" : "# PCH compilation not supported by GCC / Clang when multiple build architectures (e.g., i386, x86_64) are selected\n",
        "Line" : 1271,
        "CharPositionInLine" : 8
      },
      "77" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1375,
        "CharPositionInLine" : 16
      },
      "78" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1380,
        "CharPositionInLine" : 16
      },
      "79" : {
        "Text" : "# GCC / Clang look for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1383,
        "CharPositionInLine" : 16
      },
      "80" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 1416,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 1419,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 1424,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 1441,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 1456,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# remove COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 1482,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# for Visual Studio, we attach the precompiled header compilation to the first source file\n\n# the remaining files include the precompiled header, see cotire_setup_prefix_file_inclusion\n",
        "Line" : 1501,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "# make first source file depend on prefix header\n",
        "Line" : 1514,
        "CharPositionInLine" : 12
      },
      "88" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 1518,
        "CharPositionInLine" : 8
      },
      "89" : {
        "Text" : "# for Visual Studio, we include the precompiled header in all but the first source file\n\n# the first source file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 1541,
        "CharPositionInLine" : 8
      },
      "90" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 1545,
        "CharPositionInLine" : 12
      },
      "91" : {
        "Text" : "# make source files depend on precompiled header\n",
        "Line" : 1554,
        "CharPositionInLine" : 12
      },
      "92" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 1559,
        "CharPositionInLine" : 12
      },
      "93" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 1567,
        "CharPositionInLine" : 12
      },
      "94" : {
        "Text" : "# make source files depend on precompiled header\n",
        "Line" : 1570,
        "CharPositionInLine" : 8
      },
      "95" : {
        "Text" : "# for Visual Studio, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_prefix_file_inclusion\n",
        "Line" : 1589,
        "CharPositionInLine" : 8
      },
      "96" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n\n# if necessary, we also generate a single prefix header which includes all language specific prefix headers\n",
        "Line" : 1592,
        "CharPositionInLine" : 8
      },
      "97" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 1616,
        "CharPositionInLine" : 8
      },
      "98" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 1621,
        "CharPositionInLine" : 12
      },
      "99" : {
        "Text" : "# create a joint unity file from all unity file segments\n",
        "Line" : 1662,
        "CharPositionInLine" : 8
      },
      "100" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 1858,
        "CharPositionInLine" : 12
      },
      "101" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 1862,
        "CharPositionInLine" : 12
      },
      "102" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 1876,
        "CharPositionInLine" : 12
      },
      "103" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 1926,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 1952,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# Visual Studio only creates precompiled header as a side effect\n",
        "Line" : 1957,
        "CharPositionInLine" : 16
      },
      "106" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 1976,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 1994,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2001,
        "CharPositionInLine" : 12
      },
      "109" : {
        "Text" : "# then add unity source file instead\n",
        "Line" : 2009,
        "CharPositionInLine" : 12
      },
      "110" : {
        "Text" : "# make unity files use precompiled header if there are multiple unity files\n",
        "Line" : 2011,
        "CharPositionInLine" : 12
      },
      "111" : {
        "Text" : "# add the prefix header to unity target sources\n",
        "Line" : 2021,
        "CharPositionInLine" : 20
      },
      "112" : {
        "Text" : "# generate unity target\n",
        "Line" : 2030,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2040,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# copy output name\n",
        "Line" : 2069,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2076,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2082,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# copy Qt stuff\n",
        "Line" : 2092,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2095,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# copy platform stuff\n",
        "Line" : 2098,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2110,
        "CharPositionInLine" : 4
      },
      "121" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2115,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# trivial checks\n",
        "Line" : 2145,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 2151,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 2167,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 2206,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 2280,
        "CharPositionInLine" : 4
      },
      "127" : {
        "Text" : "# include target script if available\n",
        "Line" : 2296,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# for MSVC, compiler IDs may not always be set correctly\n",
        "Line" : 2302,
        "CharPositionInLine" : 8
      },
      "129" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 2316,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 2410,
        "CharPositionInLine" : 4
      },
      "131" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 2478,
        "CharPositionInLine" : 12
      },
      "132" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 2485,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 2526,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 2584,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 2705,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 136
    },
    "src/framework/cmake/i486-mingw32_toolchain.cmake" : {
      "ObjectId" : "45e3467d10adb08480047aca2d4829dd99efd5c6",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/cmake/i586-mingw32msvc_toolchain.cmake" : {
      "ObjectId" : "7c7557a216423b3421ef14864b22bd7ee707ac99",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/framework/cmake/i686-w64-mingw32_toolchain.cmake" : {
      "ObjectId" : "17661dfdefaeefc88a08608a910a8fc98ee10c61",
      "LastModified" : "2016-07-10T14:09:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 26
  },
  "ElapsedTime" : 2491
}