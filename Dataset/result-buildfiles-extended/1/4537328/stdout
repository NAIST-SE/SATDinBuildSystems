{
  "Repository" : "4537328",
  "Revision" : "HEAD",
  "ObjectId" : "dde9e56fb61eee040d7f3dba2331c6d6c095aee8",
  "CommitTime" : "2019-04-17T21:12:08Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f3d1d4785daf239170c2feb8575ab6dbe662520f",
      "LastModified" : "2017-04-28T22:33:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Flags\n\n# When using MSVC\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we want to respect the standard, and we are bored of those **** .\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# OpenMP support?\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Includes\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Torch libraries\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Necessary do generate wrapper\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/TorchExports.cmake" : {
      "ObjectId" : "8443cee44653fe2fe5f6fec51a3a73442dcda34f",
      "LastModified" : "2014-04-11T16:13:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TorchPackage.cmake" : {
      "ObjectId" : "f966dacab4d62ee47b8d9cb06ac32119e533539b",
      "LastModified" : "2017-05-26T03:25:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### C/C++ sources\n\n# As per CMake doc, macro arguments are not variables, so simple test syntax not working\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "### Torch packages supposes libraries prefix is \"lib\"\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "### lua sources\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/TorchPaths.cmake" : {
      "ObjectId" : "b0417aafa1ec9b6cd673766c3a65b44bd426bc6e",
      "LastModified" : "2014-02-14T10:27:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# workaround another annoying cmake bug\n\n# http://public.kitware.com/Bug/view.php?id=14462\n\n# https://awesome.naquadah.org/bugs/index.php?do=details&task_id=869\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/TorchPathsInit.cmake" : {
      "ObjectId" : "2b59c4a0c852848f8d316b67c8687ba99afbb4d3",
      "LastModified" : "2014-11-16T19:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(Torch_INSTALL_DOK \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_DOK_SUBDIR}\")\n\n#SET(Torch_INSTALL_HTML \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_HTML_SUBDIR}\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(Torch_INSTALL_LUA_PKG_PATH \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_LUA_PKG_PATH_SUBDIR}\")\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SET(Torch_INSTALL_LUAROCKS_SYSCONF \"${Torch_INSTALL_PREFIX}/${Torch_INSTALL_LUAROCKS_SYSCONF_SUBDIR}\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# reverse relative path to prefix (ridbus is the palindrom of subdir)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# @rpath in libs\n",
        "Line" : 28,
        "CharPositionInLine" : 35
      },
      "5" : {
        "Text" : "# exec\n",
        "Line" : 29,
        "CharPositionInLine" : 75
      },
      "6" : {
        "Text" : "# no @rpath in libs\n",
        "Line" : 34,
        "CharPositionInLine" : 34
      },
      "CommentCount" : 7
    },
    "cmake/TorchWrap.cmake" : {
      "ObjectId" : "05bd978e415ded1a6ec9e6409ae9bd291d6b2680",
      "LastModified" : "2016-02-01T00:44:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "7d4f3c475f62abf9dabf1b40dcb04b436248a379",
      "LastModified" : "2016-02-01T00:44:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/TH/CMakeLists.txt" : {
      "ObjectId" : "803dfe1a8112c6a84ea2643ce87ef9a93fcef4bb",
      "LastModified" : "2017-08-28T01:30:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid some cmake warnings\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Can be compiled standalone\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################################################\n\n###### macros section\n\n#####################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n\n##### flags section\n\n######################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MSVC now supports C99 since VS2013/VS2015, however the standard version switch is not provided yet\n\n# SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /std:c99\")\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# enable gnu99 and not c99 because we use\n\n# gnu extensions like posix_memalign\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# respect the standard\n",
        "Line" : 58,
        "CharPositionInLine" : 49
      },
      "7" : {
        "Text" : "# prevent Unknown CMake command \"check_function_exists\".\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# OpenMP support?\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ARM specific flags\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check for a cpuid intrinsic\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# checks SSE, AVX and AVX2\n",
        "Line" : 148,
        "CharPositionInLine" : 18
      },
      "12" : {
        "Text" : "# we don't set -mavx and -mavx2 flags globally, but only for specific files\n\n# however, we want to enable the AVX codepaths, so we still need to\n\n# add USE_AVX and USE_AVX2 macro defines\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#######################################################################\n\n##### sources section\n\n######################################################################\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# IF ANY SIMD FOUND\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# IF SSE4 FOUND\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# IF AVX FOUND\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#######################################################################\n\n##### build section\n\n######################################################################\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# https://github.com/libgit2/libgit2/issues/2128#issuecomment-35649830\n",
        "Line" : 326,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html\n",
        "Line" : 340,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Is __thread supported?\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#######################################################################\n\n##### install section\n\n######################################################################\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Create THConfig.cmake\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "lib/TH/cmake/FindARM.cmake" : {
      "ObjectId" : "2dcb2a24f208b56c1184736fceb96861b6ce0864",
      "LastModified" : "2017-05-26T03:25:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the processor is an ARM and if Neon instruction are available on the machine where\n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#neon instruction can be found on the majority part of modern ARM processor\n",
        "Line" : 7,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# on ARMv8, neon is inherit and instead listed as 'asimd' in /proc/cpuinfo\n",
        "Line" : 16,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#Find the processor type (for now OMAP3 or OMAP4)\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#Find the processor type (for now OMAP3 or OMAP4)\n",
        "Line" : 34,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#neon instruction can be found on the majority part of modern ARM processor\n",
        "Line" : 47,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# TODO\n",
        "Line" : 57,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 7
    },
    "lib/TH/cmake/FindBLAS.cmake" : {
      "ObjectId" : "a62cfadf46d72855f630b144f1602cd23900e676",
      "LastModified" : "2017-07-10T14:29:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find BLAS library\n\n# This module finds an installed fortran library that implements the BLAS \n\n# linear-algebra interface (see http://www.netlib.org/blas/).  \n\n# The list of libraries searched for is taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface is found.\n\n#  BLAS_INFO - name of the detected BLAS library.\n\n#  BLAS_F2C - set to true if following the f2c return convention\n\n#  BLAS_LIBRARIES - list of libraries to link against to use BLAS\n\n#  BLAS_INCLUDE_DIR - include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing is BLAS was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Old FindBlas\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the \n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to NOTFOUND.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Intel MKL?\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Determine if blas was compiled with the f2c conventions\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# epilogue\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Do nothing is BLAS was found before\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "lib/TH/cmake/FindLAPACK.cmake" : {
      "ObjectId" : "9eca0730fc2683dfe0963dc49a1e054564abec71",
      "LastModified" : "2017-05-26T03:25:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface is found\n\n#  LAPACK_LIBRARIES - list of libraries (using full path name) for LAPACK\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: I do not think it is a good idea to mixup different BLAS/LAPACK versions\n\n# Hence, this script wants to find a Lapack library matching your Blas library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Old search lapack script\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Intel MKL\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# OpenBlas\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# GotoBlas\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ACML\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Accelerate\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# vecLib\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "lib/TH/cmake/FindMKL.cmake" : {
      "ObjectId" : "88f0aa3281d4dda70369a116d231e352f70fd922",
      "LastModified" : "2017-07-19T15:22:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find INTEL MKL library\n\n#\n\n# This module finds the Intel Mkl libraries.\n\n#\n\n# This module sets the following variables:\n\n#  MKL_FOUND - set to true if a library implementing the CBLAS interface is found\n\n#  MKL_VERSION - best guess\n\n#  MKL_INCLUDE_DIR - path to include dir.\n\n#  MKL_LIBRARIES - list of libraries for base mkl\n\n#  MKL_LAPACK_LIBRARIES - list of libraries to add for lapack\n\n#  MKL_SCALAPACK_LIBRARIES - list of libraries to add for scalapack\n\n#  MKL_SOLVER_LIBRARIES - list of libraries to add for the solvers\n\n#  MKL_CDFT_LIBRARIES - list of libraries to add for the solvers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Includes\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Intel Compiler Suite\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Checks\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Kernel libraries dynamically loaded\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Paths\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try linking multiple libs\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This macro checks for the existence of the combination of libraries given by _list.\n\n# If the combination is found, this macro checks whether we can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# start checking\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Fin\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Check for version 10/11\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for older versions\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Include files\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Other libraries\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# LibIRC: intel compiler always links this; \n\n# gcc does not; but mkl kernels sometimes need it.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Final\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Standard termination\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "lib/TH/cmake/FindSSE.cmake" : {
      "ObjectId" : "a14abe8d4c0692f5a535b95e55f7dec5b5dff54b",
      "LastModified" : "2017-05-26T03:25:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/luaT/CMakeLists.txt" : {
      "ObjectId" : "072991cb1a981f297bb95afb7e11658909b0dc60",
      "LastModified" : "2017-05-26T03:25:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# avoid some cmake warnings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# note: must be done before defining target\n",
        "Line" : 8,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# must be done after ;)\n",
        "Line" : 31,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : "# Create luaT.cmake\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 14
  },
  "ElapsedTime" : 1344
}