{
  "Repository" : "18527853",
  "Revision" : "HEAD",
  "ObjectId" : "8ccedcb1b172ea22257af63b54673a5a836d6bdb",
  "CommitTime" : "2019-03-18T19:00:35Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "09ee8eb3ae1899d8817bf7b4eb28845405a36344",
      "LastModified" : "2019-03-16T10:17:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage (Linux):\n\n#   $ cd OpenTombSrc\n\n#   $ mkdir build && cd build\n\n#   $ cmake .. && make\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect system FreeType\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Detect system BULLET\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disable warnings when using unsafe functions\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cross compiling on Linux with the MinGW toolchain.\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Check for optional OpenAL include files that are not present in all implementations of the library\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "860d23816ef5d08760beb467383658c377a4d244",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "cmake/Toolchain-cross-mingw32-linux.cmake" : {
      "ObjectId" : "ddd8b2d7759f60e24f73e849f4bbff0d7a4cb196",
      "LastModified" : "2017-10-22T11:27:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cross compile toolchain configuration based on:\n\n# http://www.cmake.org/Wiki/CMake_Cross_Compiling\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the classical mingw32 (http://www.mingw.org/)\n\n#SET(TOOLCHAIN_PREFIX \"i586-mingw32msvc\")\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# 32 or 64 bits mingw-w64 (http://mingw-w64.sourceforge.net/)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#SET(TOOLCHAIN_PREFIX \"x86_64-w64-mingw32\"\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Toolchain path prefix (CYGWIN cross compiler)\n\n#SET(COMPILER_PREFIX ${TOOLCHAIN_PREFIX}/sys-root/mingw)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Toolchain path prefix (standard prefix)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# compilers to use for C and C++\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# path to the target environment\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "extern/bullet/CMakeLists.txt" : {
      "ObjectId" : "6df9673fb4fddda7254673df63b045f4a73616a4",
      "LastModified" : "2016-12-28T06:05:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "extern/freetype2/CMakeLists.txt" : {
      "ObjectId" : "a749e227c6ff879a83d48bf8c157c3fdf4486178",
      "LastModified" : "2018-03-27T17:02:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "extern/lua/CMakeLists.txt" : {
      "ObjectId" : "d9497ce2f389e71d8278a223b3a1aab413ed7ad9",
      "LastModified" : "2018-03-27T17:02:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 2739
}