{
  "Repository" : "20661577",
  "Revision" : "HEAD",
  "ObjectId" : "7084311e454f312094195df06fba12996e64fb05",
  "CommitTime" : "2019-02-09T15:31:48Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1217497f90dfb0769174ecd8aa69681743388453",
      "LastModified" : "2018-12-31T18:05:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==================================================================================================\n\n# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n\n# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n\n# width of 100 characters per line.\n\n#\n\n# Author(s):\n\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\n#\n\n# ==================================================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Overrides for MSVC static runtime\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake project details\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Options and their default values\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The optional Netlib API for CLBlast\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Workarounds for bugs\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Select between an OpenCL API (default) or a CUDA API (beta)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compile in verbose mode with additional diagnostic messages\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPATH settings\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Compiler-version check (requires at least CMake 2.8.10)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DLL Settings\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# C++ compiler settings\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# GCC does not support attributes on template arguments\n\n# in particular we hit this with the alignment attributes on cl_XXX types\n\n# which are then used to instantiate various templates in CLBlast\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# clang 4.0 or higher\n",
        "Line" : 142,
        "CharPositionInLine" : 58
      },
      "16" : {
        "Text" : "# but not for AppleClang\n",
        "Line" : 143,
        "CharPositionInLine" : 59
      },
      "17" : {
        "Text" : "# C compiler settings (for the sample)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Package scripts location\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Requires OpenCL. It is found through the included \"FindOpenCL.cmake\" in CMAKE_MODULE_PATH.\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# For CUDA, the \"FindCUDA.cmake\" is part of CMake\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Don't search for system libraries when cross-compiling\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Locates the reference BLAS libraries in case the tests need to be compiled. The \"FindclBLAS.cmake\",\n\n# \"FindCBLAS.cmake\", \"FindMKL.cmake\", and \"FindcuBLAS.cmake\" are included.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets the supported routines and the used kernels. New routines and kernels should be added here.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Sample programs\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Gathers all source-files (required for the compiler) and header-files (for IDEs only)\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# only source, don't include it as a test\n",
        "Line" : 254,
        "CharPositionInLine" : 35
      },
      "30" : {
        "Text" : "# such that they can be discovered by IDEs such as CLion and Visual Studio\n",
        "Line" : 257,
        "CharPositionInLine" : 13
      },
      "31" : {
        "Text" : "# Creates and links the library\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Includes directories: CLBlast and OpenCL\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Sets the proper __declspec(dllexport) keyword for Visual Studio when the library is built\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# requires at least CMake 2.8.11\n",
        "Line" : 343,
        "CharPositionInLine" : 64
      },
      "35" : {
        "Text" : "# Installs the library\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Installs the config for find_package in dependent projects\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Install pkg-config file on Linux\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# This section contains all the code related to the examples\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Downloads the cl.hpp file from Khronos\n",
        "Line" : 377,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Adds sample programs (C++)\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Adds sample programs (C)\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# This section contains all the code related to the tuners\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# such that they can be discovered by IDEs such as CLion and Visual Studio\n",
        "Line" : 411,
        "CharPositionInLine" : 22
      },
      "46" : {
        "Text" : "# Creates a library with common sources for all tuners\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Visual Studio requires the sources of non-exported objects/libraries\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Creates the common performance-tests objects (requires CMake 2.8.8)\n",
        "Line" : 426,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Adds CLBlast's interface include paths because we can't link to CLBlast here\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Adds tuning executables\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Adds 'alltuners' target: runs all tuners for all precisions\n",
        "Line" : 453,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Section for the tests: common part for both performance ('CLIENTS') and correctness ('TESTS')\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Sets the specifics for the reference BLAS libraries\n",
        "Line" : 479,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# prefers MKL over another CBLAS implementation\n",
        "Line" : 494,
        "CharPositionInLine" : 19
      },
      "56" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Section for the performance tests (i.e. the client). These compare against optionally a reference\n\n# library, either clBLAS, a CPU BLAS, or CUDA's cuBLAS.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Visual Studio requires the sources of non-exported objects/libraries\n",
        "Line" : 534,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Creates the common performance-tests objects (requires CMake 2.8.8)\n",
        "Line" : 539,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# Adds CLBlast's interface include paths because we can't link to CLBlast here\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Compiles the performance-tests\n",
        "Line" : 549,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Section for the correctness tests. Note that these tests require the presence of clBLAS and/or a\n\n# CPU BLAS library, and/or cuBLAS to act as a reference.\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Visual Studio requires the sources of non-exported objects/libraries\n",
        "Line" : 587,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Creates the common correctness-tests objects (requires CMake 2.8.8)\n",
        "Line" : 592,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Compiles the correctness-tests\n",
        "Line" : 601,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# Miscellaneous tests\n",
        "Line" : 629,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# CLBlast diagnostics\n",
        "Line" : 645,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# Adds 'alltests' target: runs all tests\n",
        "Line" : 652,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 71
    },
    "cmake/Modules/FindCBLAS.cmake" : {
      "ObjectId" : "fa97ce9fc732348348aff4da6b94a045ba9282f6",
      "LastModified" : "2018-06-02T15:57:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==================================================================================================\n\n# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n\n# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n\n# width of 100 characters per line.\n\n#\n\n# Author(s):\n\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\n#\n\n# ==================================================================================================\n\n#\n\n# Defines the following variables:\n\n#   CBLAS_FOUND          Boolean holding whether or not the Netlib BLAS library was found\n\n#   CBLAS_INCLUDE_DIRS   The Netlib BLAS include directory\n\n#   CBLAS_LIBRARIES      The Netlib BLAS library\n\n#\n\n# In case BLAS is not installed in the default directory, set the CBLAS_ROOT variable to point to\n\n# the root of BLAS, such that 'cblas.h' can be found in $CBLAS_ROOT/include. This can either be\n\n# done using an environmental variable (e.g. export CBLAS_ROOT=/path/to/BLAS) or using a CMake\n\n# variable (e.g. cmake -DCBLAS_ROOT=/path/to/BLAS ..).\n\n#\n\n# ==================================================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the possible install locations\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finds the include directories\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finds the library\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Notification messages\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determines whether or not BLAS was found\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindMKL.cmake" : {
      "ObjectId" : "df481a4dc4e31605dd3b0baa98e660dae4e74d81",
      "LastModified" : "2018-06-02T15:57:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==================================================================================================\n\n# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n\n# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n\n# width of 100 characters per line.\n\n#\n\n# Author(s):\n\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\n#\n\n# ==================================================================================================\n\n#\n\n# Defines the following variables:\n\n#   MKL_FOUND          Boolean holding whether or not the Intel MKL BLAS library was found\n\n#   MKL_INCLUDE_DIRS   The Intel MKL BLAS include directory\n\n#   MKL_LIBRARIES      The Intel MKL BLAS library\n\n#\n\n# In case MKL is not installed in the default directory, set the MKL_ROOT variable to point to\n\n# the root of MKL, such that 'mkl_cblas.h' can be found in $MKL_ROOT/include. This can either be\n\n# done using an environmental variable (e.g. export MKL_ROOT=/path/to/MKL) or using a CMake\n\n# variable (e.g. cmake -DMKL_ROOT=/path/to/MKL ..).\n\n#\n\n# ==================================================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the possible install locations\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finds the include directories\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finds the libraries\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Notification messages\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determines whether or not MKL was found\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindOpenCL.cmake" : {
      "ObjectId" : "656ba04f21d3186397cba4b315f4ba9182178c69",
      "LastModified" : "2018-10-29T19:06:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==================================================================================================\n\n# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n\n# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n\n# width of 100 characters per line.\n\n#\n\n# Author(s):\n\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\n#\n\n# ==================================================================================================\n\n#\n\n# Defines the following variables:\n\n#   OPENCL_FOUND          Boolean holding whether or not the OpenCL library was found\n\n#   OPENCL_INCLUDE_DIRS   The OpenCL include directory\n\n#   OPENCL_LIBRARIES      The OpenCL library\n\n#\n\n# In case OpenCL is not installed in the default directory, set the OPENCL_ROOT variable to point to\n\n# the root of OpenCL, such that 'OpenCL/cl.h' or 'CL/cl.h' can be found in $OPENCL_ROOT/include.\n\n# This can either be done using an environmental variable (e.g. export OPENCL_ROOT=/path/to/opencl)\n\n# or using a CMake variable (e.g. cmake -DOPENCL_ROOT=/path/to/opencl ..).\n\n#\n\n# ==================================================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the possible install locations\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finds the include directories\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finds the library\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Notification messages\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determines whether or not OpenCL was found\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindclBLAS.cmake" : {
      "ObjectId" : "6a153de9b08af619b36fdd80afb2cce0b21d898c",
      "LastModified" : "2018-06-02T15:57:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==================================================================================================\n\n# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n\n# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n\n# width of 100 characters per line.\n\n#\n\n# Author(s):\n\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\n#\n\n# ==================================================================================================\n\n#\n\n# Defines the following variables:\n\n#   CLBLAS_FOUND          Boolean holding whether or not the clBLAS library was found\n\n#   CLBLAS_INCLUDE_DIRS   The clBLAS include directory\n\n#   CLBLAS_LIBRARIES      The clBLAS library\n\n#\n\n# In case clBLAS is not installed in the default directory, set the CLBLAS_ROOT variable to point to\n\n# the root of clBLAS, such that 'clBLAS.h' can be found in $CLBLAS_ROOT/include. This can either be\n\n# done using an environmental variable (e.g. export CLBLAS_ROOT=/path/to/clBLAS) or using a CMake\n\n# variable (e.g. cmake -DCLBLAS_ROOT=/path/to/clBLAS ..).\n\n#\n\n# ==================================================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the possible install locations\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finds the include directories\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finds the library\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Notification messages\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determines whether or not clBLAS was found\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindcuBLAS.cmake" : {
      "ObjectId" : "e470289b84bd4502ff82e9eb2cd6fedfad29321e",
      "LastModified" : "2018-06-02T15:57:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==================================================================================================\n\n# This file is part of the cuBLASt project. The project is licensed under Apache Version 2.0. This\n\n# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n\n# width of 100 characters per line.\n\n#\n\n# Author(s):\n\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\n#\n\n# ==================================================================================================\n\n#\n\n# Defines the following variables:\n\n#   CUBLAS_FOUND          Boolean holding whether or not the cuBLAS library was found\n\n#   CUBLAS_INCLUDE_DIRS   The CUDA and cuBLAS include directory\n\n#   CUDA_LIBRARIES        The CUDA library\n\n#   CUBLAS_LIBRARIES      The cuBLAS library\n\n#\n\n# In case CUDA is not installed in the default directory, set the CUDA_ROOT variable to point to\n\n# the root of cuBLAS, such that 'cublas_v2.h' can be found in $CUDA_ROOT/include. This can either be\n\n# done using an environmental variable (e.g. export CUDA_ROOT=/path/to/cuBLAS) or using a CMake\n\n# variable (e.g. cmake -DCUDA_ROOT=/path/to/cuBLAS ..).\n\n#\n\n# ==================================================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the possible install locations\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finds the include directories\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finds the libraries\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Notification messages\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determines whether or not cuBLAS was found\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==================================================================================================\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/c_flag_overrides.cmake" : {
      "ObjectId" : "3b38d297c6b418124cd213f602ab51e9b9d92ba1",
      "LastModified" : "2018-06-02T15:57:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Overriding the CMake flags to use static runtime libraries\n\n# See http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/cxx_flag_overrides.cmake" : {
      "ObjectId" : "b8935bf7a70d9ae6efcc45418b545fa17fbad6a1",
      "LastModified" : "2018-06-02T15:57:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Overriding the CMake flags to use static runtime libraries\n\n# See http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 1175
}