{
  "Repository" : "12704639",
  "Revision" : "HEAD",
  "ObjectId" : "553f3ddf75fa331ce8f46a69876f54bb11822fe3",
  "CommitTime" : "2018-01-12T02:50:36Z",
  "Files" : {
    "code_practice_junit/build.xml" : {
      "ObjectId" : "66e548c67f06489edd2add7cba870c7566a70983",
      "LastModified" : "2015-02-15T15:48:21Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " <mlr 131009: begin - sandbox for getting up to speed.> ",
        "Line" : 5,
        "CharPositionInLine" : 65
      },
      "1" : {
        "Text" : " <mlr 131117: begin - add capability to run Perl script that starts Openfire ",
        "Line" : 13,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : " <mlr 131117: begin - add this for ant-contrib tasks> ",
        "Line" : 14,
        "CharPositionInLine" : 63
      },
      "3" : {
        "Text" : " <mlr 131117: end - add this for ant-contrib tasks> ",
        "Line" : 16,
        "CharPositionInLine" : 61
      },
      "4" : {
        "Text" : " <mlr 131117: end - add capability to run Perl script that starts Openfire ",
        "Line" : 17,
        "CharPositionInLine" : 84
      },
      "5" : {
        "Text" : " set global properties for this build ",
        "Line" : 19,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : " Nice example at ...\n\thttp://stackoverflow.com/questions/722774/getting-ant-javac-to-recognise-a-classpath\n\t",
        "Line" : 29,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "\n\t\t<fileset dir=\"${web.dir}/WEB-INF/lib\">\n\t\t\t<include name=\"*.jar\"/>\n\t\t</fileset>\n\t\t<fileset dir=\"${appserver.lib}\">\n\t\t\t<include name=\"servlet*.jar\"/>\n\t\t</fileset>\n\t\t",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : " <mlr 131009: end - sandbox for getting up to speed.> ",
        "Line" : 80,
        "CharPositionInLine" : 63
      },
      "9" : {
        "Text" : " <mlr 131020: begin - sandbox for learning macrodefs.> ",
        "Line" : 82,
        "CharPositionInLine" : 64
      },
      "10" : {
        "Text" : " <mlr 131020: end - sandbox for learning macrodefs.> ",
        "Line" : 99,
        "CharPositionInLine" : 62
      },
      "11" : {
        "Text" : " \n\t     ##################################################################\n\t     #                                                                #\n\t     #       Begin Production (non-sandbox) Build Configuration       #\n\t     #                                                                #\n\t     ##################################################################\n\t",
        "Line" : 120,
        "CharPositionInLine" : 5
      },
      "12" : {
        "Text" : " URL: http://ant.apache.org/manual/tutorial-HelloWorldWithAnt.html ",
        "Line" : 121,
        "CharPositionInLine" : 76
      },
      "13" : {
        "Text" : " <mlr 131009: begin - Tutorial: Hello World with Apache Ant> ",
        "Line" : 122,
        "CharPositionInLine" : 70
      },
      "14" : {
        "Text" : " PROPERTIES - set properties for the project ",
        "Line" : 123,
        "CharPositionInLine" : 54
      },
      "15" : {
        "Text" : " PATH - for use as classpath to find the jar files for the libraries we're using ",
        "Line" : 139,
        "CharPositionInLine" : 90
      },
      "16" : {
        "Text" : " PATH - that abstracts our app.jar; for use with junit ",
        "Line" : 144,
        "CharPositionInLine" : 64
      },
      "17" : {
        "Text" : " PATTERNSET - that selects the app. derived objects. ",
        "Line" : 147,
        "CharPositionInLine" : 62
      },
      "18" : {
        "Text" : " PATTERNSET - that selects the test derived objects. ",
        "Line" : 152,
        "CharPositionInLine" : 62
      },
      "19" : {
        "Text" : " \n\t     ##################################################################\n\t     #                                                                #\n\t     #                         CLEAN TARGETS                          #\n\t     #                                                                #\n\t     ##################################################################\n\t",
        "Line" : 163,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : " TARGET - that cleans the production derived objects ",
        "Line" : 164,
        "CharPositionInLine" : 62
      },
      "21" : {
        "Text" : " TARGET - that cleans the testing derived objects ",
        "Line" : 174,
        "CharPositionInLine" : 59
      },
      "22" : {
        "Text" : " TARGET (CLI) - that one button cleans all the derived objects ",
        "Line" : 183,
        "CharPositionInLine" : 72
      },
      "23" : {
        "Text" : " \n\t     ##################################################################\n\t     #                                                                #\n\t     #                    APPLICATION TARGETS                         #\n\t     #                                                                #\n\t     ##################################################################\n\t",
        "Line" : 193,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : " TARGET - that compiles the production source files ",
        "Line" : 194,
        "CharPositionInLine" : 61
      },
      "25" : {
        "Text" : " TARGET - that packages the production derived objects ",
        "Line" : 208,
        "CharPositionInLine" : 64
      },
      "26" : {
        "Text" : " TARGET - that executes the production application ",
        "Line" : 219,
        "CharPositionInLine" : 60
      },
      "27" : {
        "Text" : " TARGET (CLI) - that one button builds and runs the application ",
        "Line" : 232,
        "CharPositionInLine" : 73
      },
      "28" : {
        "Text" : " \n\t     ##################################################################\n\t     #                                                                #\n\t     #                 UNIT TEST TARGETS (comprehensive)              #\n\t     #                                                                #\n\t     ##################################################################\n\t",
        "Line" : 242,
        "CharPositionInLine" : 5
      },
      "29" : {
        "Text" : " PATTERNSET - that selects the unit tests ",
        "Line" : 243,
        "CharPositionInLine" : 51
      },
      "30" : {
        "Text" : " PROPERTY - set the property that determines unit tests to run (CLI overridable) ",
        "Line" : 254,
        "CharPositionInLine" : 91
      },
      "31" : {
        "Text" : " MACRODEF - that abstracts a task to determine a set of unit tests to execute ",
        "Line" : 257,
        "CharPositionInLine" : 87
      },
      "32" : {
        "Text" : " MACRODEF - that abstracts a task to manage Openfire sever using a Perl script ",
        "Line" : 272,
        "CharPositionInLine" : 88
      },
      "33" : {
        "Text" : " TODO: 131213 - rethink the decision making; decide how to provide messaging ",
        "Line" : 273,
        "CharPositionInLine" : 86
      },
      "34" : {
        "Text" : " TARGET - that configures the unit tests to execute ",
        "Line" : 289,
        "CharPositionInLine" : 61
      },
      "35" : {
        "Text" : " TARGET - that compiles the unit testing source files ",
        "Line" : 305,
        "CharPositionInLine" : 63
      },
      "36" : {
        "Text" : " TARGET - that executes the unit testing suite ",
        "Line" : 320,
        "CharPositionInLine" : 56
      },
      "37" : {
        "Text" : " Make sure the Openfire server is running when performing end-to-end acceptance tests ",
        "Line" : 327,
        "CharPositionInLine" : 96
      },
      "38" : {
        "Text" : "<test name=\"${ant.project.name}\"  todir=\"${reportUT.dir}\" />",
        "Line" : 334,
        "CharPositionInLine" : 71
      },
      "39" : {
        "Text" : "<path refid=\"application\"/>",
        "Line" : 339,
        "CharPositionInLine" : 39
      },
      "40" : {
        "Text" : " TARGET (CLI) - that one button builds and runs the unit tests ",
        "Line" : 354,
        "CharPositionInLine" : 72
      },
      "41" : {
        "Text" : " TARGET (CLI) - that one button builds, runs, and creates a report for the unit tests ",
        "Line" : 358,
        "CharPositionInLine" : 95
      },
      "42" : {
        "Text" : " TARGET - that executes the unit testing suite ",
        "Line" : 362,
        "CharPositionInLine" : 56
      },
      "43" : {
        "Text" : " <mlr 131009: end - Tutorial: Hello World with Apache Ant> ",
        "Line" : 370,
        "CharPositionInLine" : 68
      },
      "44" : {
        "Text" : " \n\t     ##################################################################\n\t     #                                                                #\n\t     #       SINGLE UNIT TEST TARGETS (use during developement)       #\n\t     #                                                                #\n\t     ##################################################################\n\t",
        "Line" : 378,
        "CharPositionInLine" : 5
      },
      "45" : {
        "Text" : " <mlr 131010: begin - add capability to run specific tests during development ",
        "Line" : 379,
        "CharPositionInLine" : 87
      },
      "46" : {
        "Text" : " TARGET - that compiles a single unit testing source file ",
        "Line" : 380,
        "CharPositionInLine" : 67
      },
      "47" : {
        "Text" : " TARGET - that enforces a correct command line to run a single unit test ",
        "Line" : 395,
        "CharPositionInLine" : 82
      },
      "48" : {
        "Text" : " TARGET (CLI) - that one button builds and runs a single unit test ",
        "Line" : 400,
        "CharPositionInLine" : 76
      },
      "49" : {
        "Text" : " TARGET - that executes a single unit test ",
        "Line" : 405,
        "CharPositionInLine" : 52
      },
      "50" : {
        "Text" : " Make sure the Openfire server is running when performing end-to-end acceptance tests ",
        "Line" : 408,
        "CharPositionInLine" : 96
      },
      "51" : {
        "Text" : "<sysproperty key=\"tests\" value=\"${tests}\"/>",
        "Line" : 412,
        "CharPositionInLine" : 54
      },
      "52" : {
        "Text" : "<path refid=\"application\"/>",
        "Line" : 417,
        "CharPositionInLine" : 39
      },
      "53" : {
        "Text" : " <mlr 131010: end - add capability to run specific tests during development ",
        "Line" : 427,
        "CharPositionInLine" : 85
      },
      "54" : {
        "Text" : " \n\t     ##################################################################\n\t     #                                                                #\n\t     #                      SPECIAL PURPOSE TARGETS                   #\n\t     #                                                                #\n\t     ##################################################################\n\t",
        "Line" : 435,
        "CharPositionInLine" : 5
      },
      "55" : {
        "Text" : " <mlr 131117: begin - add capability to run Perl script that starts Openfire ",
        "Line" : 436,
        "CharPositionInLine" : 86
      },
      "56" : {
        "Text" : " Usage: ant run-perl-openfirectl\n\t            ant run-perl-openfirectl -DperlVerbose=\"\"\n\t            ant run-perl-openfirectl -Dcommand=kill;\n\t            ant run-perl-openfirectl -DperlDebug=args_kill\n\t            ant run-perl-openfirectl -DperlDebug=args_kill -Dcommand=kill\n\t",
        "Line" : 442,
        "CharPositionInLine" : 5
      },
      "57" : {
        "Text" : " PROPERTIES - set properties for the custome target ",
        "Line" : 443,
        "CharPositionInLine" : 61
      },
      "58" : {
        "Text" : " TARGET (CLI) - that one button runs a perl script for managing the Openfire server ",
        "Line" : 447,
        "CharPositionInLine" : 93
      },
      "59" : {
        "Text" : " <mlr 131117: end - add capability to run Perl script that starts Openfire ",
        "Line" : 458,
        "CharPositionInLine" : 84
      },
      "CommentCount" : 60
    },
    "code_practice_junit/pom.xml" : {
      "ObjectId" : "258573165f7e679c0604fe30fa42e1b746ebb0f2",
      "LastModified" : "2015-02-15T15:48:21Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " The Basics ",
        "Line" : 5,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : " The following parent object looks to me like it's needed to deploy \n\t\tto Sonatype OSS Maven Repository, which pl.pragmatists did with JUnitParams ",
        "Line" : 98,
        "CharPositionInLine" : 82
      },
      "2" : {
        "Text" : " Build Settings ",
        "Line" : 108,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " <mlr 131117: begin - add capability to run Perl script that starts \n\t\t\t\tOpenfire ",
        "Line" : 112,
        "CharPositionInLine" : 17
      },
      "4" : {
        "Text" : " http://stackoverflow.com/questions/3970753/how-to-run-an-ant-target-from-maven2 \n\t\t\t\tmvn antrun:run mvn antrun:run -Dcommand=kill ",
        "Line" : 114,
        "CharPositionInLine" : 53
      },
      "5" : {
        "Text" : " <mlr 131117: end - add capability to run Perl script that starts \n\t\t\t\tOpenfire ",
        "Line" : 133,
        "CharPositionInLine" : 17
      },
      "6" : {
        "Text" : " I need the following <executions> block to prevent a test file from \n\t\t\t\t\tcompiling. Source: http://stackoverflow.com/questions/3028612/maven-compiler-plugin-exclude \n\t\t\t\t\tTest file to exclude: /H:/student/code_practice_junit/src/test/java/LogAnalyzerHWJMockitStubTests_130921_bad.java ",
        "Line" : 146,
        "CharPositionInLine" : 123
      },
      "7" : {
        "Text" : " <mlr 131213: begin - insert comments for CLI to test various combinations> ",
        "Line" : 173,
        "CharPositionInLine" : 87
      },
      "8" : {
        "Text" : " http://stackoverflow.com/questions/6819888/how-to-run-all-tests-in-a-particular-package-with-maven \n\t\t\t\tmvn test - all tests mvn test -Dtest=auctionsniper.tests.unit.*Tests - AuctionSniper \n\t\t\t\tall unit tests only mvn antrun:run test -Dtest=AuctionMessageTranslatorTests \n\t\t\t\t- Auction Sniper only the specified unit test mvn antrun:run test -Dtest=auctionsniper.tests.*.*Tests \n\t\t\t\t- start Openfire server, AuctionSniper acceptance and unit tests mvn antrun:run \n\t\t\t\ttest -Dtest=AuctionSniperEndToEndTests - start Openfire server, AuctionSniper \n\t\t\t\tacceptance tests only ",
        "Line" : 180,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : " <mlr 131213: end - insert comments for CLI to test various combinations> ",
        "Line" : 181,
        "CharPositionInLine" : 85
      },
      "10" : {
        "Text" : " More Project Information ",
        "Line" : 219,
        "CharPositionInLine" : 35
      },
      "11" : {
        "Text" : " Environment Settings ",
        "Line" : 246,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : " For the reason why the next to tags stand commented, see https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-6.CentralSyncRequirement ",
        "Line" : 260,
        "CharPositionInLine" : 216
      },
      "13" : {
        "Text" : " AVOID RELEASE REPOSITORY/PLUGINREPOSITORY: <repositories></repositories> \n\t\t<pluginRepositories></pluginRepositories> ",
        "Line" : 262,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 14
    },
    "gooligum/Baseline/01-Light_an_LED/Makefile" : {
      "ObjectId" : "fca8e2ccd1ea7fad28edee1341799410c330132e",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  There exist several targets which are by default empty and which can be \n\n#  used for execution of your targets. These targets are usually executed \n\n#  before and after some main targets. They are: \n\n#\n\n#     .build-pre:              called before 'build' target\n\n#     .build-post:             called after 'build' target\n\n#     .clean-pre:              called before 'clean' target\n\n#     .clean-post:             called after 'clean' target\n\n#     .clobber-pre:            called before 'clobber' target\n\n#     .clobber-post:           called after 'clobber' target\n\n#     .all-pre:                called before 'all' target\n\n#     .all-post:               called after 'all' target\n\n#     .help-pre:               called before 'help' target\n\n#     .help-post:              called after 'help' target\n\n#\n\n#  Targets beginning with '.' are not intended to be called on their own.\n\n#\n\n#  Main targets can be executed directly, and they are:\n\n#  \n\n#     build                    build a specific configuration\n\n#     clean                    remove built files from a configuration\n\n#     clobber                  remove all built files\n\n#     all                      build all configurations\n\n#     help                     print help mesage\n\n#  \n\n#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and\n\n#  .help-impl are implemented in nbproject/makefile-impl.mk.\n\n#\n\n#  Available make variables:\n\n#\n\n#     CND_BASEDIR                base directory for relative paths\n\n#     CND_DISTDIR                default top distribution directory (build artifacts)\n\n#     CND_BUILDDIR               default top build directory (object files, ...)\n\n#     CONF                       name of current configuration\n\n#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)\n\n#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)\n\n#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)\n\n#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)\n\n#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)\n\n#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)\n\n#\n\n# NOCDDL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Environment \n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add your pre 'build' code here...\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add your post 'build' code here...\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add your pre 'clean' code here...\n\n# WARNING: the IDE does not call this target since it takes a long time to\n\n# simply run make. Instead, the IDE removes the configuration directories\n\n# under build and dist directly without calling make.\n\n# This target is left here so people can do a clean when running a clean\n\n# outside the IDE.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add your post 'clean' code here...\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clobber\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add your pre 'clobber' code here...\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add your post 'clobber' code here...\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# all\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add your pre 'all' code here...\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add your post 'all' code here...\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# help\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add your pre 'help' code here...\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add your post 'help' code here...\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# include project implementation makefile\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# include project make variables\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "gooligum/Baseline/02-Flash_LED/Makefile" : {
      "ObjectId" : "fca8e2ccd1ea7fad28edee1341799410c330132e",
      "LastModified" : "2018-01-12T02:50:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  There exist several targets which are by default empty and which can be \n\n#  used for execution of your targets. These targets are usually executed \n\n#  before and after some main targets. They are: \n\n#\n\n#     .build-pre:              called before 'build' target\n\n#     .build-post:             called after 'build' target\n\n#     .clean-pre:              called before 'clean' target\n\n#     .clean-post:             called after 'clean' target\n\n#     .clobber-pre:            called before 'clobber' target\n\n#     .clobber-post:           called after 'clobber' target\n\n#     .all-pre:                called before 'all' target\n\n#     .all-post:               called after 'all' target\n\n#     .help-pre:               called before 'help' target\n\n#     .help-post:              called after 'help' target\n\n#\n\n#  Targets beginning with '.' are not intended to be called on their own.\n\n#\n\n#  Main targets can be executed directly, and they are:\n\n#  \n\n#     build                    build a specific configuration\n\n#     clean                    remove built files from a configuration\n\n#     clobber                  remove all built files\n\n#     all                      build all configurations\n\n#     help                     print help mesage\n\n#  \n\n#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and\n\n#  .help-impl are implemented in nbproject/makefile-impl.mk.\n\n#\n\n#  Available make variables:\n\n#\n\n#     CND_BASEDIR                base directory for relative paths\n\n#     CND_DISTDIR                default top distribution directory (build artifacts)\n\n#     CND_BUILDDIR               default top build directory (object files, ...)\n\n#     CONF                       name of current configuration\n\n#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)\n\n#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)\n\n#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)\n\n#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)\n\n#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)\n\n#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)\n\n#\n\n# NOCDDL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Environment \n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add your pre 'build' code here...\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add your post 'build' code here...\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add your pre 'clean' code here...\n\n# WARNING: the IDE does not call this target since it takes a long time to\n\n# simply run make. Instead, the IDE removes the configuration directories\n\n# under build and dist directly without calling make.\n\n# This target is left here so people can do a clean when running a clean\n\n# outside the IDE.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add your post 'clean' code here...\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clobber\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add your pre 'clobber' code here...\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add your post 'clobber' code here...\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# all\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add your pre 'all' code here...\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add your post 'all' code here...\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# help\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add your pre 'help' code here...\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add your post 'help' code here...\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# include project implementation makefile\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# include project make variables\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "java_sandbox/ConsultingAgency/build.xml" : {
      "ObjectId" : "ac4ffeaf382504e1e4537cf65bf4796f718048b1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java_sandbox/DVDStore/build.xml" : {
      "ObjectId" : "597bee34df5482a026c2368932b3a02b30c7afef",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java_sandbox/DVDStoreAdmin/pom.xml" : {
      "ObjectId" : "9796ab776740682290be78352dcf490a1c412416",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java_sandbox/EventManager/pom.xml" : {
      "ObjectId" : "83c634beb7721c129d7c135f6d0aef47b27c7c18",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.1</version>\n            <scope>provided</scope>\n        </dependency>",
        "Line" : 28,
        "CharPositionInLine" : 25
      },
      "1" : {
        "Text" : " https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j13 ",
        "Line" : 29,
        "CharPositionInLine" : 76
      },
      "CommentCount" : 2
    },
    "java_sandbox/HelloWeb/build.xml" : {
      "ObjectId" : "21452eab775d5660008b4984bf8560036a951e1a",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java_sandbox/SimpleEE6App/build.xml" : {
      "ObjectId" : "de8d6a4eac5d338d1d5cc7f7099fd9346a839a57",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java_sandbox/affableBean/build.xml" : {
      "ObjectId" : "3a9d619c1dd8ceb914f36120fb612d57cc06771a",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java_sandbox/jsfDemo/build.xml" : {
      "ObjectId" : "17bfe16281f3902465fbd9ca0d1ec35b8c0bd724",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java_sandbox/myAjaxApp/build.xml" : {
      "ObjectId" : "7f7bfafd97cab9983b377953e1848ce937bf9911",
      "LastModified" : "2018-01-12T02:18:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2,
    "ANT" : 8,
    "MAVEN" : 3
  },
  "ElapsedTime" : 1649
}