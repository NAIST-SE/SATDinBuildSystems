{
  "Repository" : "9788759",
  "Revision" : "HEAD",
  "ObjectId" : "be9878006194657fec8ca8ff1e4dccb5f6d95cc3",
  "CommitTime" : "2019-02-11T22:04:19Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1483020d835830ada7d70b5b1ecd59cb6d75669a",
      "LastModified" : "2018-01-25T23:30:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Setup CMake options\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Setup project\n\n#\n\n# We parse the canonical version number located in <boost/hana/version.hpp>.\n\n# This is done to allow the library to be used without requiring a proper\n\n# installation during which the version would be written to this header.\n\n##############################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Perform checks to make sure we support the current compiler\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# Setup the 'hana' header-only library target, along with its install target\n\n# and exports.\n\n##############################################################################\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Export the `hana` library into a HanaConfig.cmake file\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Also install an optional pkg-config file\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################################################################\n\n# Function to setup common compiler flags on tests and examples\n\n##############################################################################\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# GCC pretends to have the flag, but produces a \"unrecognized command line option\"\n\n# warning when we use it.\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "##############################################################################\n\n# Look for the rest of Boost, which is an optional dependency of some tests.\n\n##############################################################################\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################################################\n\n# Setup custom functions to ease the creation of targets\n\n##############################################################################\n\n#   boost_hana_target_name_for(<output variable> <source file> [ext])\n\n#\n\n# Return the target name associated to a source file. If the path of the\n\n# source file relative from the root of Hana is `path/to/source/file.ext`,\n\n# the target name associated to it will be `path.to.source.file`.\n\n#\n\n# The extension of the file should be specified as a last argument. If no\n\n# extension is specified, the `.cpp` extension is assumed.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##############################################################################\n\n# Setup the `check` target to build and then run all the tests and examples.\n\n##############################################################################\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n# Setup subdirectories and testing\n\n##############################################################################\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "benchmark/CMakeLists.txt" : {
      "ObjectId" : "212454563153f75086bde4bf6ad5a24423be286e",
      "LastModified" : "2017-06-24T21:53:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Required packages, gems and caveats\n\n##############################################################################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for the 'ruby-progressbar' and 'tilt' gems\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some benchmarks depend on those libraries\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# Configure the measure.rb script\n\n##############################################################################\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#input\n\n#output\n",
        "Line" : 36,
        "CharPositionInLine" : 57
      },
      "6" : {
        "Text" : "##############################################################################\n\n# Add the benchmarks\n\n##############################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/CheckCxxCompilerSupport.cmake" : {
      "ObjectId" : "78f1b5fd462f2206c34fb502bbcd2815e3da220d",
      "LastModified" : "2017-01-07T22:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Copyright Markus J. Weber 2015\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n#\n\n# This CMake module checks whether the current compiler is supported, and\n\n# provides friendly hints to the user.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMPL11.cmake" : {
      "ObjectId" : "5b8b3c4e0391a37b087b098f906dbdf504030167",
      "LastModified" : "2017-01-07T22:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n#\n\n# This CMake module finds the MPL11 include directory. This module sets the\n\n# following CMake variables:\n\n#\n\n# MPL11_FOUND\n\n#   Set to 1 when the MPL11 include directory is found, 0 otherwise.\n\n#\n\n# MPL11_INCLUDE_DIR\n\n#   If the MPL11 include directory is found, this is set to the path of that\n\n#   directory. Otherwise, this is not set.\n\n#\n\n#\n\n# The following variables can be used to customize the behavior of the module:\n\n#\n\n# MPL11_INCLUDE_DIR\n\n#   The path to the MPL11 include directory. When set, this will be used as-is.\n\n#\n\n# MPL11_CLONE_IF_MISSING\n\n#   If the MPL11 include directory can't be found and this is set to true,\n\n#   the MPL11 project will be cloned locally.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable build step\n\n# Disable install step\n\n# Disable test step\n",
        "Line" : 38,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 2
    },
    "cmake/FindMeta.cmake" : {
      "ObjectId" : "0a532062bb0fc3733f518c26105178399396fb02",
      "LastModified" : "2017-01-07T22:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n# This file was adapted from FindMeta.cmake at https://github.com/ericniebler/meta.\n\n#\n\n#\n\n# This CMake module finds the Meta include directory. This module sets the\n\n# following CMake variables:\n\n#\n\n# Meta_FOUND\n\n#   Set to 1 when the Meta include directory is found, 0 otherwise.\n\n#\n\n# Meta_INCLUDE_DIR\n\n#   If the Meta include directory is found, this is set to the path of that\n\n#   directory. Otherwise, this is not set.\n\n#\n\n#\n\n# The following variables can be used to customize the behavior of the module:\n\n#\n\n# Meta_INCLUDE_DIR\n\n#   The path to the Meta include directory. When set, this will be used as-is.\n\n#\n\n# Meta_CLONE_IF_MISSING\n\n#   If the Meta include directory can't be found and this is set to true,\n\n#   the Meta project will be cloned locally.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable build step\n\n# Disable install step\n\n# Disable test step\n",
        "Line" : 40,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 2
    },
    "cmake/TestHeaders.cmake" : {
      "ObjectId" : "663c9f4e883b986b77a3796826ef6ef12fa83d28",
      "LastModified" : "2017-11-25T21:00:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n#\n\n# This CMake module provides a function generating a unit test to make sure\n\n# that every public header can be included on its own.\n\n#\n\n# When a C++ library or application has many header files, it can happen that\n\n# a header does not include all the other headers it depends on. When this is\n\n# the case, it can happen that including that header file on its own will\n\n# break the compilation. This CMake module generates a dummy executable\n\n# comprised of many .cpp files, each of which includes a header file that\n\n# is part of the public API. In other words, the executable is comprised\n\n# of .cpp files of the form:\n\n#\n\n#   #include <the/public/header.hpp>\n\n#\n\n# and then exactly one `main` function. If this succeeds to compile, it means\n\n# that the header can be included on its own, which is what clients expect.\n\n# Otherwise, you have a problem. Since writing these dumb unit tests by hand\n\n# is tedious and repetitive, you can use this CMake module to automate this\n\n# task.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   add_header_test(<target> [EXCLUDE_FROM_ALL] [EXCLUDE excludes...] HEADERS headers...)\n\n#\n\n# Generates header-inclusion unit tests for all the specified headers.\n\n#\n\n# This function creates a target which builds a dummy executable including\n\n# each specified header file individually. If this target builds successfully,\n\n# it means that all the specified header files can be included individually.\n\n#\n\n# Parameters\n\n# ----------\n\n# <target>:\n\n#   The name of the target to generate.\n\n#\n\n# HEADERS headers:\n\n#   A list of header files to generate the inclusion tests for. All headers\n\n#   in this list must be represented as relative paths from the root of the\n\n#   include directory added to the compiler's header search path. In other\n\n#   words, it should be possible to include all headers in this list as\n\n#\n\n#       #include <${header}>\n\n#\n\n#   For example, for a library with the following structure:\n\n#\n\n#       project/\n\n#           doc/\n\n#           test/\n\n#           ...\n\n#           include/\n\n#               boost/\n\n#                   hana.hpp\n\n#                   hana/\n\n#                       transform.hpp\n\n#                       tuple.hpp\n\n#                       pair.hpp\n\n#                       ...\n\n#\n\n#   When building the unit tests for that library, we'll add `-I project/include'\n\n#   to the compiler's arguments. The list of public headers should therefore contain\n\n#\n\n#       boost/hana.hpp\n\n#       boost/hana/transform.hpp\n\n#       boost/hana/tuple.hpp\n\n#       boost/hana/pair.hpp\n\n#       ...\n\n#\n\n#   Usually, all the 'public' header files of a library should be tested for\n\n#   standalone inclusion. A header is considered 'public' if a client should\n\n#   be able to include that header on its own.\n\n#\n\n# [EXCLUDE excludes]:\n\n#   An optional list of headers or regexes for which no unit test should be\n\n#   generated. Basically, any header in the list specified by the `HEADERS`\n\n#   argument that matches anything in `EXCLUDE` will be skipped.\n\n#\n\n# [EXCLUDE_FROM_ALL]:\n\n#   If provided, the generated target is excluded from the 'all' target.\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# options\n\n# 1 value args\n\n# multivalued args\n",
        "Line" : 83,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 3
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "66406606cc98d0bc44ca62a67f70599b37745bf9",
      "LastModified" : "2017-01-07T22:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "example/CMakeLists.txt" : {
      "ObjectId" : "0464c0960d770d385ab465c047eec4c53b388590",
      "LastModified" : "2018-01-26T03:46:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Take note of files that depend on Boost\n\n##############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Caveats: Take note of examples that are not supported.\n\n##############################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# Add all the examples\n\n##############################################################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Several examples have unused parameters because the name of the parameters\n\n# are useful for illustration, even if the implementation is not actually\n\n# presented. We don't want to generate warnings for that or need to comment\n\n# out all unused parameter names.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "example/cmake_integration/CMakeLists.txt" : {
      "ObjectId" : "000d03dd8a10f1f2a911a28ee50d6da0c57d1609",
      "LastModified" : "2017-03-30T04:41:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# [snip]\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# [snip]\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "52ee6c4aa5b08b61eef46955d631914a50bd7547",
      "LastModified" : "2018-01-26T03:46:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Take note of files that depend on Boost\n\n##############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Caveats: Take note of public headers and tests that are not supported.\n\n##############################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The experimental::type_name test is only supported on Clang >= 3.6 and\n\n# AppleClang >= 7.0\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Windows, Clang-cl emulates a MSVC bug that causes EBO not to be applied\n\n# properly. We disable the tests that check for EBO.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n\n# Generate tests that include each public header.\n\n# The headers that were excluded above due to caveats are ignored here.\n\n##############################################################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##############################################################################\n\n# Check for ODR violations when linking several translation units\n\n# (GitHub issue 75)\n\n##############################################################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################################################################\n\n# Add all the remaining unit tests\n\n##############################################################################\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##############################################################################\n\n# Add the deployment test, which checks that we can indeed install `hana` and\n\n# then use the provided `HanaConfig.cmake` config file to use `hana` from an\n\n# external project.\n\n##############################################################################\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Disable test step\n\n# Disable source work-tree update\n",
        "Line" : 129,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 10
    },
    "test/deploy/CMakeLists.txt" : {
      "ObjectId" : "186d5def73951e4b3f312522ad53a3f80909f224",
      "LastModified" : "2018-01-26T03:46:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2017\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 11
  },
  "ElapsedTime" : 2637
}